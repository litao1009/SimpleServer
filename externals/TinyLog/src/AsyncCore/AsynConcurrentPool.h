#pragma once

/*******************************************************************
					异步多线程前摄器（IOCP）并发池
*******************************************************************/
#include "AsynConcurrentPoolFwd.h"
#include "Utils/Pimp.h"
#include "Utils/intDef.h"
#include "Utils/Type/ProactorType.h"
#include "Utils/Type/ErrCodeType.h"

#include <boost/noncopyable.hpp>

namespace tinyLog
{


class AsynConcurrentPool : boost::noncopyable
{
	DEFINE_PIMP

public:
	/*******************************************************************
	ThreadNr:	工作线程数量
	*******************************************************************/
						AsynConcurrentPool(uint32_t ThreadNr);

						~AsynConcurrentPool();

	/*******************************************************************
	非阻塞启动，立即返回
	*******************************************************************/
	void				Start();

	/*******************************************************************
	阻塞启动，所有工作线程停止后返回
	*******************************************************************/
	uint32_t			Run();

	uint32_t			Run(ErrCodeType& ec);

	void				Join();

	/*******************************************************************
	停止前摄器工作，所有线程立即返回
	*******************************************************************/
	void				Stop();

	bool				IsStop() const;

	/*******************************************************************
	获取未包装的前摄器
	*******************************************************************/
	ProactorType&		GetProactor();


	/*******************************************************************
	获取安全包装的前摄器
	*******************************************************************/
	SafeProactorType&	GetStand();

	uint32_t			GetThreadsSize() const;
};

}