// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HeadInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HeadInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace moriMsg {

namespace {

const ::google::protobuf::Descriptor* SMsgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SMsgInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SFileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SFileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeadInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HeadInfo_2eproto() {
  protobuf_AddDesc_HeadInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HeadInfo.proto");
  GOOGLE_CHECK(file != NULL);
  SMsgInfo_descriptor_ = file->message_type(0);
  static const int SMsgInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMsgInfo, msglen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMsgInfo, msgchksum_),
  };
  SMsgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SMsgInfo_descriptor_,
      SMsgInfo::default_instance_,
      SMsgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMsgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMsgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SMsgInfo));
  SFileInfo_descriptor_ = file->message_type(1);
  static const int SFileInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFileInfo, filelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFileInfo, filechksum_),
  };
  SFileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SFileInfo_descriptor_,
      SFileInfo::default_instance_,
      SFileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SFileInfo));
  HeadInfo_descriptor_ = file->message_type(2);
  static const int HeadInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadInfo, msginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadInfo, filesinfo_),
  };
  HeadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeadInfo_descriptor_,
      HeadInfo::default_instance_,
      HeadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeadInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HeadInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SMsgInfo_descriptor_, &SMsgInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SFileInfo_descriptor_, &SFileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeadInfo_descriptor_, &HeadInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HeadInfo_2eproto() {
  delete SMsgInfo::default_instance_;
  delete SMsgInfo_reflection_;
  delete SFileInfo::default_instance_;
  delete SFileInfo_reflection_;
  delete HeadInfo::default_instance_;
  delete HeadInfo_reflection_;
}

void protobuf_AddDesc_HeadInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016HeadInfo.proto\022\007moriMsg\"-\n\010SMsgInfo\022\016\n"
    "\006MsgLen\030\001 \002(\005\022\021\n\tMsgChksum\030\002 \002(\005\"0\n\tSFil"
    "eInfo\022\017\n\007FileLen\030\001 \002(\005\022\022\n\nFileChksum\030\002 \002"
    "(\005\"U\n\010HeadInfo\022\"\n\007MsgInfo\030\001 \001(\0132\021.moriMs"
    "g.SMsgInfo\022%\n\tFilesInfo\030\002 \003(\0132\022.moriMsg."
    "SFileInfo", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HeadInfo.proto", &protobuf_RegisterTypes);
  SMsgInfo::default_instance_ = new SMsgInfo();
  SFileInfo::default_instance_ = new SFileInfo();
  HeadInfo::default_instance_ = new HeadInfo();
  SMsgInfo::default_instance_->InitAsDefaultInstance();
  SFileInfo::default_instance_->InitAsDefaultInstance();
  HeadInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HeadInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HeadInfo_2eproto {
  StaticDescriptorInitializer_HeadInfo_2eproto() {
    protobuf_AddDesc_HeadInfo_2eproto();
  }
} static_descriptor_initializer_HeadInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SMsgInfo::kMsgLenFieldNumber;
const int SMsgInfo::kMsgChksumFieldNumber;
#endif  // !_MSC_VER

SMsgInfo::SMsgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SMsgInfo::InitAsDefaultInstance() {
}

SMsgInfo::SMsgInfo(const SMsgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SMsgInfo::SharedCtor() {
  _cached_size_ = 0;
  msglen_ = 0;
  msgchksum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SMsgInfo::~SMsgInfo() {
  SharedDtor();
}

void SMsgInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SMsgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMsgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMsgInfo_descriptor_;
}

const SMsgInfo& SMsgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HeadInfo_2eproto();
  return *default_instance_;
}

SMsgInfo* SMsgInfo::default_instance_ = NULL;

SMsgInfo* SMsgInfo::New() const {
  return new SMsgInfo;
}

void SMsgInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msglen_ = 0;
    msgchksum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SMsgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MsgLen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msglen_)));
          set_has_msglen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MsgChksum;
        break;
      }

      // required int32 MsgChksum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MsgChksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgchksum_)));
          set_has_msgchksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SMsgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MsgLen = 1;
  if (has_msglen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msglen(), output);
  }

  // required int32 MsgChksum = 2;
  if (has_msgchksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msgchksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SMsgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MsgLen = 1;
  if (has_msglen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msglen(), target);
  }

  // required int32 MsgChksum = 2;
  if (has_msgchksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msgchksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SMsgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MsgLen = 1;
    if (has_msglen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msglen());
    }

    // required int32 MsgChksum = 2;
    if (has_msgchksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgchksum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMsgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SMsgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SMsgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SMsgInfo::MergeFrom(const SMsgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msglen()) {
      set_msglen(from.msglen());
    }
    if (from.has_msgchksum()) {
      set_msgchksum(from.msgchksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SMsgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMsgInfo::CopyFrom(const SMsgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMsgInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SMsgInfo::Swap(SMsgInfo* other) {
  if (other != this) {
    std::swap(msglen_, other->msglen_);
    std::swap(msgchksum_, other->msgchksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SMsgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SMsgInfo_descriptor_;
  metadata.reflection = SMsgInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SFileInfo::kFileLenFieldNumber;
const int SFileInfo::kFileChksumFieldNumber;
#endif  // !_MSC_VER

SFileInfo::SFileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SFileInfo::InitAsDefaultInstance() {
}

SFileInfo::SFileInfo(const SFileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SFileInfo::SharedCtor() {
  _cached_size_ = 0;
  filelen_ = 0;
  filechksum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SFileInfo::~SFileInfo() {
  SharedDtor();
}

void SFileInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SFileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SFileInfo_descriptor_;
}

const SFileInfo& SFileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HeadInfo_2eproto();
  return *default_instance_;
}

SFileInfo* SFileInfo::default_instance_ = NULL;

SFileInfo* SFileInfo::New() const {
  return new SFileInfo;
}

void SFileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    filelen_ = 0;
    filechksum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FileLen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filelen_)));
          set_has_filelen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FileChksum;
        break;
      }

      // required int32 FileChksum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FileChksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filechksum_)));
          set_has_filechksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FileLen = 1;
  if (has_filelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->filelen(), output);
  }

  // required int32 FileChksum = 2;
  if (has_filechksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->filechksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SFileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FileLen = 1;
  if (has_filelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->filelen(), target);
  }

  // required int32 FileChksum = 2;
  if (has_filechksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->filechksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SFileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FileLen = 1;
    if (has_filelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filelen());
    }

    // required int32 FileChksum = 2;
    if (has_filechksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filechksum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SFileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SFileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SFileInfo::MergeFrom(const SFileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filelen()) {
      set_filelen(from.filelen());
    }
    if (from.has_filechksum()) {
      set_filechksum(from.filechksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SFileInfo::CopyFrom(const SFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SFileInfo::Swap(SFileInfo* other) {
  if (other != this) {
    std::swap(filelen_, other->filelen_);
    std::swap(filechksum_, other->filechksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SFileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SFileInfo_descriptor_;
  metadata.reflection = SFileInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeadInfo::kMsgInfoFieldNumber;
const int HeadInfo::kFilesInfoFieldNumber;
#endif  // !_MSC_VER

HeadInfo::HeadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeadInfo::InitAsDefaultInstance() {
  msginfo_ = const_cast< ::moriMsg::SMsgInfo*>(&::moriMsg::SMsgInfo::default_instance());
}

HeadInfo::HeadInfo(const HeadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeadInfo::SharedCtor() {
  _cached_size_ = 0;
  msginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeadInfo::~HeadInfo() {
  SharedDtor();
}

void HeadInfo::SharedDtor() {
  if (this != default_instance_) {
    delete msginfo_;
  }
}

void HeadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadInfo_descriptor_;
}

const HeadInfo& HeadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HeadInfo_2eproto();
  return *default_instance_;
}

HeadInfo* HeadInfo::default_instance_ = NULL;

HeadInfo* HeadInfo::New() const {
  return new HeadInfo;
}

void HeadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msginfo()) {
      if (msginfo_ != NULL) msginfo_->::moriMsg::SMsgInfo::Clear();
    }
  }
  filesinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .moriMsg.SMsgInfo MsgInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FilesInfo;
        break;
      }

      // repeated .moriMsg.SFileInfo FilesInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FilesInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filesinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FilesInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .moriMsg.SMsgInfo MsgInfo = 1;
  if (has_msginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msginfo(), output);
  }

  // repeated .moriMsg.SFileInfo FilesInfo = 2;
  for (int i = 0; i < this->filesinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filesinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .moriMsg.SMsgInfo MsgInfo = 1;
  if (has_msginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msginfo(), target);
  }

  // repeated .moriMsg.SFileInfo FilesInfo = 2;
  for (int i = 0; i < this->filesinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filesinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .moriMsg.SMsgInfo MsgInfo = 1;
    if (has_msginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msginfo());
    }

  }
  // repeated .moriMsg.SFileInfo FilesInfo = 2;
  total_size += 1 * this->filesinfo_size();
  for (int i = 0; i < this->filesinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filesinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeadInfo::MergeFrom(const HeadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  filesinfo_.MergeFrom(from.filesinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msginfo()) {
      mutable_msginfo()->::moriMsg::SMsgInfo::MergeFrom(from.msginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadInfo::CopyFrom(const HeadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadInfo::IsInitialized() const {

  if (has_msginfo()) {
    if (!this->msginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < filesinfo_size(); i++) {
    if (!this->filesinfo(i).IsInitialized()) return false;
  }
  return true;
}

void HeadInfo::Swap(HeadInfo* other) {
  if (other != this) {
    std::swap(msginfo_, other->msginfo_);
    filesinfo_.Swap(&other->filesinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeadInfo_descriptor_;
  metadata.reflection = HeadInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace moriMsg

// @@protoc_insertion_point(global_scope)
