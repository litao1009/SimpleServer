// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UploadLib.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UploadLib.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

namespace {

const ::google::protobuf::Descriptor* QUpLoadLib_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QUpLoadLib_reflection_ = NULL;
const ::google::protobuf::Descriptor* AUpLoadLib_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AUpLoadLib_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UploadLib_2eproto() {
  protobuf_AddDesc_UploadLib_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UploadLib.proto");
  GOOGLE_CHECK(file != NULL);
  QUpLoadLib_descriptor_ = file->message_type(0);
  static const int QUpLoadLib_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUpLoadLib, jk_table_),
  };
  QUpLoadLib_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QUpLoadLib_descriptor_,
      QUpLoadLib::default_instance_,
      QUpLoadLib_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUpLoadLib, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUpLoadLib, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QUpLoadLib));
  AUpLoadLib_descriptor_ = file->message_type(1);
  static const int AUpLoadLib_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AUpLoadLib, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AUpLoadLib, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AUpLoadLib, verindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AUpLoadLib, neededfiles_),
  };
  AUpLoadLib_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AUpLoadLib_descriptor_,
      AUpLoadLib::default_instance_,
      AUpLoadLib_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AUpLoadLib, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AUpLoadLib, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AUpLoadLib));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UploadLib_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QUpLoadLib_descriptor_, &QUpLoadLib::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AUpLoadLib_descriptor_, &AUpLoadLib::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UploadLib_2eproto() {
  delete QUpLoadLib::default_instance_;
  delete QUpLoadLib_reflection_;
  delete AUpLoadLib::default_instance_;
  delete AUpLoadLib_reflection_;
}

void protobuf_AddDesc_UploadLib_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::transMsg::protobuf_AddDesc_EReturnStatus_2eproto();
  ::transMsg::protobuf_AddDesc_msg_2dJK_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017UploadLib.proto\022\010transMsg\032\023EReturnStat"
    "us.proto\032\014msg-JK.proto\"2\n\nQUpLoadLib\022$\n\010"
    "JK_Table\030\001 \002(\0132\022.transMsg.JK_Table\"l\n\nAU"
    "pLoadLib\022&\n\005Stats\030\001 \002(\0162\027.transMsg.ERetu"
    "rnStatus\022\017\n\007VerCode\030\002 \001(\003\022\020\n\010VerIndex\030\003 "
    "\001(\005\022\023\n\013NeededFiles\030\004 \003(\014", 224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UploadLib.proto", &protobuf_RegisterTypes);
  QUpLoadLib::default_instance_ = new QUpLoadLib();
  AUpLoadLib::default_instance_ = new AUpLoadLib();
  QUpLoadLib::default_instance_->InitAsDefaultInstance();
  AUpLoadLib::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UploadLib_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UploadLib_2eproto {
  StaticDescriptorInitializer_UploadLib_2eproto() {
    protobuf_AddDesc_UploadLib_2eproto();
  }
} static_descriptor_initializer_UploadLib_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int QUpLoadLib::kJKTableFieldNumber;
#endif  // !_MSC_VER

QUpLoadLib::QUpLoadLib()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QUpLoadLib::InitAsDefaultInstance() {
  jk_table_ = const_cast< ::transMsg::JK_Table*>(&::transMsg::JK_Table::default_instance());
}

QUpLoadLib::QUpLoadLib(const QUpLoadLib& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QUpLoadLib::SharedCtor() {
  _cached_size_ = 0;
  jk_table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QUpLoadLib::~QUpLoadLib() {
  SharedDtor();
}

void QUpLoadLib::SharedDtor() {
  if (this != default_instance_) {
    delete jk_table_;
  }
}

void QUpLoadLib::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QUpLoadLib::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QUpLoadLib_descriptor_;
}

const QUpLoadLib& QUpLoadLib::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadLib_2eproto();
  return *default_instance_;
}

QUpLoadLib* QUpLoadLib::default_instance_ = NULL;

QUpLoadLib* QUpLoadLib::New() const {
  return new QUpLoadLib;
}

void QUpLoadLib::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_jk_table()) {
      if (jk_table_ != NULL) jk_table_->::transMsg::JK_Table::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QUpLoadLib::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transMsg.JK_Table JK_Table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jk_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QUpLoadLib::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transMsg.JK_Table JK_Table = 1;
  if (has_jk_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jk_table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QUpLoadLib::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transMsg.JK_Table JK_Table = 1;
  if (has_jk_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jk_table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QUpLoadLib::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transMsg.JK_Table JK_Table = 1;
    if (has_jk_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jk_table());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QUpLoadLib::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QUpLoadLib* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QUpLoadLib*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QUpLoadLib::MergeFrom(const QUpLoadLib& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jk_table()) {
      mutable_jk_table()->::transMsg::JK_Table::MergeFrom(from.jk_table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QUpLoadLib::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QUpLoadLib::CopyFrom(const QUpLoadLib& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QUpLoadLib::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_jk_table()) {
    if (!this->jk_table().IsInitialized()) return false;
  }
  return true;
}

void QUpLoadLib::Swap(QUpLoadLib* other) {
  if (other != this) {
    std::swap(jk_table_, other->jk_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QUpLoadLib::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QUpLoadLib_descriptor_;
  metadata.reflection = QUpLoadLib_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AUpLoadLib::kStatsFieldNumber;
const int AUpLoadLib::kVerCodeFieldNumber;
const int AUpLoadLib::kVerIndexFieldNumber;
const int AUpLoadLib::kNeededFilesFieldNumber;
#endif  // !_MSC_VER

AUpLoadLib::AUpLoadLib()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AUpLoadLib::InitAsDefaultInstance() {
}

AUpLoadLib::AUpLoadLib(const AUpLoadLib& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AUpLoadLib::SharedCtor() {
  _cached_size_ = 0;
  stats_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  verindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AUpLoadLib::~AUpLoadLib() {
  SharedDtor();
}

void AUpLoadLib::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AUpLoadLib::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AUpLoadLib::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AUpLoadLib_descriptor_;
}

const AUpLoadLib& AUpLoadLib::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadLib_2eproto();
  return *default_instance_;
}

AUpLoadLib* AUpLoadLib::default_instance_ = NULL;

AUpLoadLib* AUpLoadLib::New() const {
  return new AUpLoadLib;
}

void AUpLoadLib::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stats_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    verindex_ = 0;
  }
  neededfiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AUpLoadLib::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transMsg.EReturnStatus Stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transMsg::EReturnStatus_IsValid(value)) {
            set_stats(static_cast< ::transMsg::EReturnStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_VerCode;
        break;
      }

      // optional int64 VerCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_VerIndex;
        break;
      }

      // optional int32 VerIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verindex_)));
          set_has_verindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NeededFiles;
        break;
      }

      // repeated bytes NeededFiles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NeededFiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_neededfiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NeededFiles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AUpLoadLib::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stats(), output);
  }

  // optional int64 VerCode = 2;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->vercode(), output);
  }

  // optional int32 VerIndex = 3;
  if (has_verindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->verindex(), output);
  }

  // repeated bytes NeededFiles = 4;
  for (int i = 0; i < this->neededfiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->neededfiles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AUpLoadLib::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stats(), target);
  }

  // optional int64 VerCode = 2;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->vercode(), target);
  }

  // optional int32 VerIndex = 3;
  if (has_verindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->verindex(), target);
  }

  // repeated bytes NeededFiles = 4;
  for (int i = 0; i < this->neededfiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->neededfiles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AUpLoadLib::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transMsg.EReturnStatus Stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stats());
    }

    // optional int64 VerCode = 2;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // optional int32 VerIndex = 3;
    if (has_verindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verindex());
    }

  }
  // repeated bytes NeededFiles = 4;
  total_size += 1 * this->neededfiles_size();
  for (int i = 0; i < this->neededfiles_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->neededfiles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AUpLoadLib::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AUpLoadLib* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AUpLoadLib*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AUpLoadLib::MergeFrom(const AUpLoadLib& from) {
  GOOGLE_CHECK_NE(&from, this);
  neededfiles_.MergeFrom(from.neededfiles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      set_stats(from.stats());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_verindex()) {
      set_verindex(from.verindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AUpLoadLib::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AUpLoadLib::CopyFrom(const AUpLoadLib& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUpLoadLib::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AUpLoadLib::Swap(AUpLoadLib* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    std::swap(vercode_, other->vercode_);
    std::swap(verindex_, other->verindex_);
    neededfiles_.Swap(&other->neededfiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AUpLoadLib::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AUpLoadLib_descriptor_;
  metadata.reflection = AUpLoadLib_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

// @@protoc_insertion_point(global_scope)
