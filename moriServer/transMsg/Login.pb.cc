// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

namespace {

const ::google::protobuf::Descriptor* QLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ALogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ALogin_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Login_2eproto() {
  protobuf_AddDesc_Login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Login.proto");
  GOOGLE_CHECK(file != NULL);
  QLogin_descriptor_ = file->message_type(0);
  static const int QLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLogin, usercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLogin, userpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLogin, pubrsakey_),
  };
  QLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QLogin_descriptor_,
      QLogin::default_instance_,
      QLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QLogin));
  ALogin_descriptor_ = file->message_type(1);
  static const int ALogin_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALogin, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALogin, verifycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALogin, pubrsakey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALogin, gl_userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALogin, gl_deptinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALogin, gl_rolerightinfo_),
  };
  ALogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ALogin_descriptor_,
      ALogin::default_instance_,
      ALogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ALogin));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QLogin_descriptor_, &QLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ALogin_descriptor_, &ALogin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Login_2eproto() {
  delete QLogin::default_instance_;
  delete QLogin_reflection_;
  delete ALogin::default_instance_;
  delete ALogin_reflection_;
}

void protobuf_AddDesc_Login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::transMsg::protobuf_AddDesc_EReturnStatus_2eproto();
  ::transMsg::protobuf_AddDesc_msg_2dGL_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Login.proto\022\010transMsg\032\023EReturnStatus.p"
    "roto\032\014msg-GL.proto\">\n\006QLogin\022\020\n\010UserCode"
    "\030\001 \002(\014\022\017\n\007UserPwd\030\002 \002(\014\022\021\n\tPubRSAKey\030\003 \001"
    "(\014\"\345\001\n\006ALogin\022&\n\005Stats\030\001 \002(\0162\027.transMsg."
    "EReturnStatus\022\022\n\nVerifyCode\030\002 \001(\014\022\021\n\tPub"
    "RSAKey\030\003 \001(\014\022*\n\013GL_UserInfo\030e \001(\0132\025.tran"
    "sMsg.GL_UserInfo\022*\n\013GL_DeptInfo\030f \003(\0132\025."
    "transMsg.GL_DeptInfo\0224\n\020GL_RoleRightInfo"
    "\030g \003(\0132\032.transMsg.GL_RoleRightInfo", 354);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Login.proto", &protobuf_RegisterTypes);
  QLogin::default_instance_ = new QLogin();
  ALogin::default_instance_ = new ALogin();
  QLogin::default_instance_->InitAsDefaultInstance();
  ALogin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Login_2eproto {
  StaticDescriptorInitializer_Login_2eproto() {
    protobuf_AddDesc_Login_2eproto();
  }
} static_descriptor_initializer_Login_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int QLogin::kUserCodeFieldNumber;
const int QLogin::kUserPwdFieldNumber;
const int QLogin::kPubRSAKeyFieldNumber;
#endif  // !_MSC_VER

QLogin::QLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QLogin::InitAsDefaultInstance() {
}

QLogin::QLogin(const QLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QLogin::SharedCtor() {
  _cached_size_ = 0;
  usercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pubrsakey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QLogin::~QLogin() {
  SharedDtor();
}

void QLogin::SharedDtor() {
  if (usercode_ != &::google::protobuf::internal::kEmptyString) {
    delete usercode_;
  }
  if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpwd_;
  }
  if (pubrsakey_ != &::google::protobuf::internal::kEmptyString) {
    delete pubrsakey_;
  }
  if (this != default_instance_) {
  }
}

void QLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QLogin_descriptor_;
}

const QLogin& QLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

QLogin* QLogin::default_instance_ = NULL;

QLogin* QLogin::New() const {
  return new QLogin;
}

void QLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_usercode()) {
      if (usercode_ != &::google::protobuf::internal::kEmptyString) {
        usercode_->clear();
      }
    }
    if (has_userpwd()) {
      if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
        userpwd_->clear();
      }
    }
    if (has_pubrsakey()) {
      if (pubrsakey_ != &::google::protobuf::internal::kEmptyString) {
        pubrsakey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes UserCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_usercode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserPwd;
        break;
      }

      // required bytes UserPwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userpwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PubRSAKey;
        break;
      }

      // optional bytes PubRSAKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PubRSAKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubrsakey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes UserCode = 1;
  if (has_usercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->usercode(), output);
  }

  // required bytes UserPwd = 2;
  if (has_userpwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->userpwd(), output);
  }

  // optional bytes PubRSAKey = 3;
  if (has_pubrsakey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->pubrsakey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes UserCode = 1;
  if (has_usercode()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->usercode(), target);
  }

  // required bytes UserPwd = 2;
  if (has_userpwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->userpwd(), target);
  }

  // optional bytes PubRSAKey = 3;
  if (has_pubrsakey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pubrsakey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes UserCode = 1;
    if (has_usercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->usercode());
    }

    // required bytes UserPwd = 2;
    if (has_userpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userpwd());
    }

    // optional bytes PubRSAKey = 3;
    if (has_pubrsakey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubrsakey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QLogin::MergeFrom(const QLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usercode()) {
      set_usercode(from.usercode());
    }
    if (from.has_userpwd()) {
      set_userpwd(from.userpwd());
    }
    if (from.has_pubrsakey()) {
      set_pubrsakey(from.pubrsakey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QLogin::CopyFrom(const QLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QLogin::Swap(QLogin* other) {
  if (other != this) {
    std::swap(usercode_, other->usercode_);
    std::swap(userpwd_, other->userpwd_);
    std::swap(pubrsakey_, other->pubrsakey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QLogin_descriptor_;
  metadata.reflection = QLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ALogin::kStatsFieldNumber;
const int ALogin::kVerifyCodeFieldNumber;
const int ALogin::kPubRSAKeyFieldNumber;
const int ALogin::kGLUserInfoFieldNumber;
const int ALogin::kGLDeptInfoFieldNumber;
const int ALogin::kGLRoleRightInfoFieldNumber;
#endif  // !_MSC_VER

ALogin::ALogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ALogin::InitAsDefaultInstance() {
  gl_userinfo_ = const_cast< ::transMsg::GL_UserInfo*>(&::transMsg::GL_UserInfo::default_instance());
}

ALogin::ALogin(const ALogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ALogin::SharedCtor() {
  _cached_size_ = 0;
  stats_ = 0;
  verifycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pubrsakey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gl_userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ALogin::~ALogin() {
  SharedDtor();
}

void ALogin::SharedDtor() {
  if (verifycode_ != &::google::protobuf::internal::kEmptyString) {
    delete verifycode_;
  }
  if (pubrsakey_ != &::google::protobuf::internal::kEmptyString) {
    delete pubrsakey_;
  }
  if (this != default_instance_) {
    delete gl_userinfo_;
  }
}

void ALogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ALogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ALogin_descriptor_;
}

const ALogin& ALogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

ALogin* ALogin::default_instance_ = NULL;

ALogin* ALogin::New() const {
  return new ALogin;
}

void ALogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stats_ = 0;
    if (has_verifycode()) {
      if (verifycode_ != &::google::protobuf::internal::kEmptyString) {
        verifycode_->clear();
      }
    }
    if (has_pubrsakey()) {
      if (pubrsakey_ != &::google::protobuf::internal::kEmptyString) {
        pubrsakey_->clear();
      }
    }
    if (has_gl_userinfo()) {
      if (gl_userinfo_ != NULL) gl_userinfo_->::transMsg::GL_UserInfo::Clear();
    }
  }
  gl_deptinfo_.Clear();
  gl_rolerightinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ALogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transMsg.EReturnStatus Stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transMsg::EReturnStatus_IsValid(value)) {
            set_stats(static_cast< ::transMsg::EReturnStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_VerifyCode;
        break;
      }

      // optional bytes VerifyCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VerifyCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verifycode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PubRSAKey;
        break;
      }

      // optional bytes PubRSAKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PubRSAKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubrsakey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_GL_UserInfo;
        break;
      }

      // optional .transMsg.GL_UserInfo GL_UserInfo = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gl_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_GL_DeptInfo;
        break;
      }

      // repeated .transMsg.GL_DeptInfo GL_DeptInfo = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_DeptInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_deptinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_GL_DeptInfo;
        if (input->ExpectTag(826)) goto parse_GL_RoleRightInfo;
        break;
      }

      // repeated .transMsg.GL_RoleRightInfo GL_RoleRightInfo = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_RoleRightInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_rolerightinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_GL_RoleRightInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ALogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stats(), output);
  }

  // optional bytes VerifyCode = 2;
  if (has_verifycode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->verifycode(), output);
  }

  // optional bytes PubRSAKey = 3;
  if (has_pubrsakey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->pubrsakey(), output);
  }

  // optional .transMsg.GL_UserInfo GL_UserInfo = 101;
  if (has_gl_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->gl_userinfo(), output);
  }

  // repeated .transMsg.GL_DeptInfo GL_DeptInfo = 102;
  for (int i = 0; i < this->gl_deptinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->gl_deptinfo(i), output);
  }

  // repeated .transMsg.GL_RoleRightInfo GL_RoleRightInfo = 103;
  for (int i = 0; i < this->gl_rolerightinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->gl_rolerightinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ALogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stats(), target);
  }

  // optional bytes VerifyCode = 2;
  if (has_verifycode()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->verifycode(), target);
  }

  // optional bytes PubRSAKey = 3;
  if (has_pubrsakey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pubrsakey(), target);
  }

  // optional .transMsg.GL_UserInfo GL_UserInfo = 101;
  if (has_gl_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->gl_userinfo(), target);
  }

  // repeated .transMsg.GL_DeptInfo GL_DeptInfo = 102;
  for (int i = 0; i < this->gl_deptinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->gl_deptinfo(i), target);
  }

  // repeated .transMsg.GL_RoleRightInfo GL_RoleRightInfo = 103;
  for (int i = 0; i < this->gl_rolerightinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->gl_rolerightinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ALogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transMsg.EReturnStatus Stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stats());
    }

    // optional bytes VerifyCode = 2;
    if (has_verifycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verifycode());
    }

    // optional bytes PubRSAKey = 3;
    if (has_pubrsakey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubrsakey());
    }

    // optional .transMsg.GL_UserInfo GL_UserInfo = 101;
    if (has_gl_userinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gl_userinfo());
    }

  }
  // repeated .transMsg.GL_DeptInfo GL_DeptInfo = 102;
  total_size += 2 * this->gl_deptinfo_size();
  for (int i = 0; i < this->gl_deptinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_deptinfo(i));
  }

  // repeated .transMsg.GL_RoleRightInfo GL_RoleRightInfo = 103;
  total_size += 2 * this->gl_rolerightinfo_size();
  for (int i = 0; i < this->gl_rolerightinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_rolerightinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ALogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ALogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ALogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ALogin::MergeFrom(const ALogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  gl_deptinfo_.MergeFrom(from.gl_deptinfo_);
  gl_rolerightinfo_.MergeFrom(from.gl_rolerightinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      set_stats(from.stats());
    }
    if (from.has_verifycode()) {
      set_verifycode(from.verifycode());
    }
    if (from.has_pubrsakey()) {
      set_pubrsakey(from.pubrsakey());
    }
    if (from.has_gl_userinfo()) {
      mutable_gl_userinfo()->::transMsg::GL_UserInfo::MergeFrom(from.gl_userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ALogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ALogin::CopyFrom(const ALogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ALogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ALogin::Swap(ALogin* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    std::swap(verifycode_, other->verifycode_);
    std::swap(pubrsakey_, other->pubrsakey_);
    std::swap(gl_userinfo_, other->gl_userinfo_);
    gl_deptinfo_.Swap(&other->gl_deptinfo_);
    gl_rolerightinfo_.Swap(&other->gl_rolerightinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ALogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ALogin_descriptor_;
  metadata.reflection = ALogin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

// @@protoc_insertion_point(global_scope)
