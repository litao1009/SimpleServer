// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UploadRes.proto

#ifndef PROTOBUF_UploadRes_2eproto__INCLUDED
#define PROTOBUF_UploadRes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "EReturnStatus.pb.h"
// @@protoc_insertion_point(includes)

namespace transMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UploadRes_2eproto();
void protobuf_AssignDesc_UploadRes_2eproto();
void protobuf_ShutdownFile_UploadRes_2eproto();

class QUploadRes;
class AUploadRes;

// ===================================================================

class QUploadRes : public ::google::protobuf::Message {
 public:
  QUploadRes();
  virtual ~QUploadRes();

  QUploadRes(const QUploadRes& from);

  inline QUploadRes& operator=(const QUploadRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QUploadRes& default_instance();

  void Swap(QUploadRes* other);

  // implements Message ----------------------------------------------

  QUploadRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QUploadRes& from);
  void MergeFrom(const QUploadRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes FilesHash = 1;
  inline int fileshash_size() const;
  inline void clear_fileshash();
  static const int kFilesHashFieldNumber = 1;
  inline const ::std::string& fileshash(int index) const;
  inline ::std::string* mutable_fileshash(int index);
  inline void set_fileshash(int index, const ::std::string& value);
  inline void set_fileshash(int index, const char* value);
  inline void set_fileshash(int index, const void* value, size_t size);
  inline ::std::string* add_fileshash();
  inline void add_fileshash(const ::std::string& value);
  inline void add_fileshash(const char* value);
  inline void add_fileshash(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& fileshash() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fileshash();

  // @@protoc_insertion_point(class_scope:transMsg.QUploadRes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> fileshash_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_UploadRes_2eproto();
  friend void protobuf_AssignDesc_UploadRes_2eproto();
  friend void protobuf_ShutdownFile_UploadRes_2eproto();

  void InitAsDefaultInstance();
  static QUploadRes* default_instance_;
};
// -------------------------------------------------------------------

class AUploadRes : public ::google::protobuf::Message {
 public:
  AUploadRes();
  virtual ~AUploadRes();

  AUploadRes(const AUploadRes& from);

  inline AUploadRes& operator=(const AUploadRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AUploadRes& default_instance();

  void Swap(AUploadRes* other);

  // implements Message ----------------------------------------------

  AUploadRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AUploadRes& from);
  void MergeFrom(const AUploadRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .transMsg.EReturnStatus Stats = 1;
  inline bool has_stats() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 1;
  inline ::transMsg::EReturnStatus stats() const;
  inline void set_stats(::transMsg::EReturnStatus value);

  // repeated bytes RejectedFiles = 2;
  inline int rejectedfiles_size() const;
  inline void clear_rejectedfiles();
  static const int kRejectedFilesFieldNumber = 2;
  inline const ::std::string& rejectedfiles(int index) const;
  inline ::std::string* mutable_rejectedfiles(int index);
  inline void set_rejectedfiles(int index, const ::std::string& value);
  inline void set_rejectedfiles(int index, const char* value);
  inline void set_rejectedfiles(int index, const void* value, size_t size);
  inline ::std::string* add_rejectedfiles();
  inline void add_rejectedfiles(const ::std::string& value);
  inline void add_rejectedfiles(const char* value);
  inline void add_rejectedfiles(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& rejectedfiles() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rejectedfiles();

  // repeated bytes LostFiles = 3;
  inline int lostfiles_size() const;
  inline void clear_lostfiles();
  static const int kLostFilesFieldNumber = 3;
  inline const ::std::string& lostfiles(int index) const;
  inline ::std::string* mutable_lostfiles(int index);
  inline void set_lostfiles(int index, const ::std::string& value);
  inline void set_lostfiles(int index, const char* value);
  inline void set_lostfiles(int index, const void* value, size_t size);
  inline ::std::string* add_lostfiles();
  inline void add_lostfiles(const ::std::string& value);
  inline void add_lostfiles(const char* value);
  inline void add_lostfiles(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& lostfiles() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lostfiles();

  // @@protoc_insertion_point(class_scope:transMsg.AUploadRes)
 private:
  inline void set_has_stats();
  inline void clear_has_stats();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> rejectedfiles_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lostfiles_;
  int stats_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_UploadRes_2eproto();
  friend void protobuf_AssignDesc_UploadRes_2eproto();
  friend void protobuf_ShutdownFile_UploadRes_2eproto();

  void InitAsDefaultInstance();
  static AUploadRes* default_instance_;
};
// ===================================================================


// ===================================================================

// QUploadRes

// repeated bytes FilesHash = 1;
inline int QUploadRes::fileshash_size() const {
  return fileshash_.size();
}
inline void QUploadRes::clear_fileshash() {
  fileshash_.Clear();
}
inline const ::std::string& QUploadRes::fileshash(int index) const {
  return fileshash_.Get(index);
}
inline ::std::string* QUploadRes::mutable_fileshash(int index) {
  return fileshash_.Mutable(index);
}
inline void QUploadRes::set_fileshash(int index, const ::std::string& value) {
  fileshash_.Mutable(index)->assign(value);
}
inline void QUploadRes::set_fileshash(int index, const char* value) {
  fileshash_.Mutable(index)->assign(value);
}
inline void QUploadRes::set_fileshash(int index, const void* value, size_t size) {
  fileshash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QUploadRes::add_fileshash() {
  return fileshash_.Add();
}
inline void QUploadRes::add_fileshash(const ::std::string& value) {
  fileshash_.Add()->assign(value);
}
inline void QUploadRes::add_fileshash(const char* value) {
  fileshash_.Add()->assign(value);
}
inline void QUploadRes::add_fileshash(const void* value, size_t size) {
  fileshash_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QUploadRes::fileshash() const {
  return fileshash_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QUploadRes::mutable_fileshash() {
  return &fileshash_;
}

// -------------------------------------------------------------------

// AUploadRes

// required .transMsg.EReturnStatus Stats = 1;
inline bool AUploadRes::has_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AUploadRes::set_has_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AUploadRes::clear_has_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AUploadRes::clear_stats() {
  stats_ = 0;
  clear_has_stats();
}
inline ::transMsg::EReturnStatus AUploadRes::stats() const {
  return static_cast< ::transMsg::EReturnStatus >(stats_);
}
inline void AUploadRes::set_stats(::transMsg::EReturnStatus value) {
  assert(::transMsg::EReturnStatus_IsValid(value));
  set_has_stats();
  stats_ = value;
}

// repeated bytes RejectedFiles = 2;
inline int AUploadRes::rejectedfiles_size() const {
  return rejectedfiles_.size();
}
inline void AUploadRes::clear_rejectedfiles() {
  rejectedfiles_.Clear();
}
inline const ::std::string& AUploadRes::rejectedfiles(int index) const {
  return rejectedfiles_.Get(index);
}
inline ::std::string* AUploadRes::mutable_rejectedfiles(int index) {
  return rejectedfiles_.Mutable(index);
}
inline void AUploadRes::set_rejectedfiles(int index, const ::std::string& value) {
  rejectedfiles_.Mutable(index)->assign(value);
}
inline void AUploadRes::set_rejectedfiles(int index, const char* value) {
  rejectedfiles_.Mutable(index)->assign(value);
}
inline void AUploadRes::set_rejectedfiles(int index, const void* value, size_t size) {
  rejectedfiles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AUploadRes::add_rejectedfiles() {
  return rejectedfiles_.Add();
}
inline void AUploadRes::add_rejectedfiles(const ::std::string& value) {
  rejectedfiles_.Add()->assign(value);
}
inline void AUploadRes::add_rejectedfiles(const char* value) {
  rejectedfiles_.Add()->assign(value);
}
inline void AUploadRes::add_rejectedfiles(const void* value, size_t size) {
  rejectedfiles_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AUploadRes::rejectedfiles() const {
  return rejectedfiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AUploadRes::mutable_rejectedfiles() {
  return &rejectedfiles_;
}

// repeated bytes LostFiles = 3;
inline int AUploadRes::lostfiles_size() const {
  return lostfiles_.size();
}
inline void AUploadRes::clear_lostfiles() {
  lostfiles_.Clear();
}
inline const ::std::string& AUploadRes::lostfiles(int index) const {
  return lostfiles_.Get(index);
}
inline ::std::string* AUploadRes::mutable_lostfiles(int index) {
  return lostfiles_.Mutable(index);
}
inline void AUploadRes::set_lostfiles(int index, const ::std::string& value) {
  lostfiles_.Mutable(index)->assign(value);
}
inline void AUploadRes::set_lostfiles(int index, const char* value) {
  lostfiles_.Mutable(index)->assign(value);
}
inline void AUploadRes::set_lostfiles(int index, const void* value, size_t size) {
  lostfiles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AUploadRes::add_lostfiles() {
  return lostfiles_.Add();
}
inline void AUploadRes::add_lostfiles(const ::std::string& value) {
  lostfiles_.Add()->assign(value);
}
inline void AUploadRes::add_lostfiles(const char* value) {
  lostfiles_.Add()->assign(value);
}
inline void AUploadRes::add_lostfiles(const void* value, size_t size) {
  lostfiles_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AUploadRes::lostfiles() const {
  return lostfiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AUploadRes::mutable_lostfiles() {
  return &lostfiles_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UploadRes_2eproto__INCLUDED
