// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UploadASData.proto

#ifndef PROTOBUF_UploadASData_2eproto__INCLUDED
#define PROTOBUF_UploadASData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "EReturnStatus.pb.h"
// @@protoc_insertion_point(includes)

namespace transMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UploadASData_2eproto();
void protobuf_AssignDesc_UploadASData_2eproto();
void protobuf_ShutdownFile_UploadASData_2eproto();

class ASDataInfo;
class QUploadASData;
class AUploadASData;

// ===================================================================

class ASDataInfo : public ::google::protobuf::Message {
 public:
  ASDataInfo();
  virtual ~ASDataInfo();

  ASDataInfo(const ASDataInfo& from);

  inline ASDataInfo& operator=(const ASDataInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ASDataInfo& default_instance();

  void Swap(ASDataInfo* other);

  // implements Message ----------------------------------------------

  ASDataInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ASDataInfo& from);
  void MergeFrom(const ASDataInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ItemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // required string ItemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // required bytes ItemData = 3;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemDataFieldNumber = 3;
  inline const ::std::string& itemdata() const;
  inline void set_itemdata(const ::std::string& value);
  inline void set_itemdata(const char* value);
  inline void set_itemdata(const void* value, size_t size);
  inline ::std::string* mutable_itemdata();
  inline ::std::string* release_itemdata();
  inline void set_allocated_itemdata(::std::string* itemdata);

  // @@protoc_insertion_point(class_scope:transMsg.ASDataInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* itemname_;
  ::std::string* itemdata_;
  ::google::protobuf::int32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_UploadASData_2eproto();
  friend void protobuf_AssignDesc_UploadASData_2eproto();
  friend void protobuf_ShutdownFile_UploadASData_2eproto();

  void InitAsDefaultInstance();
  static ASDataInfo* default_instance_;
};
// -------------------------------------------------------------------

class QUploadASData : public ::google::protobuf::Message {
 public:
  QUploadASData();
  virtual ~QUploadASData();

  QUploadASData(const QUploadASData& from);

  inline QUploadASData& operator=(const QUploadASData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QUploadASData& default_instance();

  void Swap(QUploadASData* other);

  // implements Message ----------------------------------------------

  QUploadASData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QUploadASData& from);
  void MergeFrom(const QUploadASData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .transMsg.ASDataInfo ASDataInfo = 1;
  inline int asdatainfo_size() const;
  inline void clear_asdatainfo();
  static const int kASDataInfoFieldNumber = 1;
  inline const ::transMsg::ASDataInfo& asdatainfo(int index) const;
  inline ::transMsg::ASDataInfo* mutable_asdatainfo(int index);
  inline ::transMsg::ASDataInfo* add_asdatainfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::ASDataInfo >&
      asdatainfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::ASDataInfo >*
      mutable_asdatainfo();

  // @@protoc_insertion_point(class_scope:transMsg.QUploadASData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::transMsg::ASDataInfo > asdatainfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_UploadASData_2eproto();
  friend void protobuf_AssignDesc_UploadASData_2eproto();
  friend void protobuf_ShutdownFile_UploadASData_2eproto();

  void InitAsDefaultInstance();
  static QUploadASData* default_instance_;
};
// -------------------------------------------------------------------

class AUploadASData : public ::google::protobuf::Message {
 public:
  AUploadASData();
  virtual ~AUploadASData();

  AUploadASData(const AUploadASData& from);

  inline AUploadASData& operator=(const AUploadASData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AUploadASData& default_instance();

  void Swap(AUploadASData* other);

  // implements Message ----------------------------------------------

  AUploadASData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AUploadASData& from);
  void MergeFrom(const AUploadASData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .transMsg.EReturnStatus Stats = 1;
  inline bool has_stats() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 1;
  inline ::transMsg::EReturnStatus stats() const;
  inline void set_stats(::transMsg::EReturnStatus value);

  // @@protoc_insertion_point(class_scope:transMsg.AUploadASData)
 private:
  inline void set_has_stats();
  inline void clear_has_stats();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int stats_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_UploadASData_2eproto();
  friend void protobuf_AssignDesc_UploadASData_2eproto();
  friend void protobuf_ShutdownFile_UploadASData_2eproto();

  void InitAsDefaultInstance();
  static AUploadASData* default_instance_;
};
// ===================================================================


// ===================================================================

// ASDataInfo

// required int32 ItemID = 1;
inline bool ASDataInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ASDataInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ASDataInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ASDataInfo::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 ASDataInfo::itemid() const {
  return itemid_;
}
inline void ASDataInfo::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required string ItemName = 2;
inline bool ASDataInfo::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ASDataInfo::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ASDataInfo::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ASDataInfo::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& ASDataInfo::itemname() const {
  return *itemname_;
}
inline void ASDataInfo::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void ASDataInfo::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void ASDataInfo::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ASDataInfo::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  return itemname_;
}
inline ::std::string* ASDataInfo::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ASDataInfo::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes ItemData = 3;
inline bool ASDataInfo::has_itemdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ASDataInfo::set_has_itemdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ASDataInfo::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ASDataInfo::clear_itemdata() {
  if (itemdata_ != &::google::protobuf::internal::kEmptyString) {
    itemdata_->clear();
  }
  clear_has_itemdata();
}
inline const ::std::string& ASDataInfo::itemdata() const {
  return *itemdata_;
}
inline void ASDataInfo::set_itemdata(const ::std::string& value) {
  set_has_itemdata();
  if (itemdata_ == &::google::protobuf::internal::kEmptyString) {
    itemdata_ = new ::std::string;
  }
  itemdata_->assign(value);
}
inline void ASDataInfo::set_itemdata(const char* value) {
  set_has_itemdata();
  if (itemdata_ == &::google::protobuf::internal::kEmptyString) {
    itemdata_ = new ::std::string;
  }
  itemdata_->assign(value);
}
inline void ASDataInfo::set_itemdata(const void* value, size_t size) {
  set_has_itemdata();
  if (itemdata_ == &::google::protobuf::internal::kEmptyString) {
    itemdata_ = new ::std::string;
  }
  itemdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ASDataInfo::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == &::google::protobuf::internal::kEmptyString) {
    itemdata_ = new ::std::string;
  }
  return itemdata_;
}
inline ::std::string* ASDataInfo::release_itemdata() {
  clear_has_itemdata();
  if (itemdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemdata_;
    itemdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ASDataInfo::set_allocated_itemdata(::std::string* itemdata) {
  if (itemdata_ != &::google::protobuf::internal::kEmptyString) {
    delete itemdata_;
  }
  if (itemdata) {
    set_has_itemdata();
    itemdata_ = itemdata;
  } else {
    clear_has_itemdata();
    itemdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// QUploadASData

// repeated .transMsg.ASDataInfo ASDataInfo = 1;
inline int QUploadASData::asdatainfo_size() const {
  return asdatainfo_.size();
}
inline void QUploadASData::clear_asdatainfo() {
  asdatainfo_.Clear();
}
inline const ::transMsg::ASDataInfo& QUploadASData::asdatainfo(int index) const {
  return asdatainfo_.Get(index);
}
inline ::transMsg::ASDataInfo* QUploadASData::mutable_asdatainfo(int index) {
  return asdatainfo_.Mutable(index);
}
inline ::transMsg::ASDataInfo* QUploadASData::add_asdatainfo() {
  return asdatainfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::ASDataInfo >&
QUploadASData::asdatainfo() const {
  return asdatainfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::ASDataInfo >*
QUploadASData::mutable_asdatainfo() {
  return &asdatainfo_;
}

// -------------------------------------------------------------------

// AUploadASData

// required .transMsg.EReturnStatus Stats = 1;
inline bool AUploadASData::has_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AUploadASData::set_has_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AUploadASData::clear_has_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AUploadASData::clear_stats() {
  stats_ = 0;
  clear_has_stats();
}
inline ::transMsg::EReturnStatus AUploadASData::stats() const {
  return static_cast< ::transMsg::EReturnStatus >(stats_);
}
inline void AUploadASData::set_stats(::transMsg::EReturnStatus value) {
  assert(::transMsg::EReturnStatus_IsValid(value));
  set_has_stats();
  stats_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UploadASData_2eproto__INCLUDED
