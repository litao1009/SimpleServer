// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GetOrderLog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GetOrderLog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

namespace {

const ::google::protobuf::Descriptor* QGetOrderLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QGetOrderLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* AGetOrderLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AGetOrderLog_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GetOrderLog_2eproto() {
  protobuf_AddDesc_GetOrderLog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GetOrderLog.proto");
  GOOGLE_CHECK(file != NULL);
  QGetOrderLog_descriptor_ = file->message_type(0);
  static const int QGetOrderLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QGetOrderLog, orderid_),
  };
  QGetOrderLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QGetOrderLog_descriptor_,
      QGetOrderLog::default_instance_,
      QGetOrderLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QGetOrderLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QGetOrderLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QGetOrderLog));
  AGetOrderLog_descriptor_ = file->message_type(1);
  static const int AGetOrderLog_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGetOrderLog, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGetOrderLog, orderlog_),
  };
  AGetOrderLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AGetOrderLog_descriptor_,
      AGetOrderLog::default_instance_,
      AGetOrderLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGetOrderLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGetOrderLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AGetOrderLog));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GetOrderLog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QGetOrderLog_descriptor_, &QGetOrderLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AGetOrderLog_descriptor_, &AGetOrderLog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GetOrderLog_2eproto() {
  delete QGetOrderLog::default_instance_;
  delete QGetOrderLog_reflection_;
  delete AGetOrderLog::default_instance_;
  delete AGetOrderLog_reflection_;
}

void protobuf_AddDesc_GetOrderLog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::transMsg::protobuf_AddDesc_EReturnStatus_2eproto();
  ::transMsg::protobuf_AddDesc_msg_2dSV_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GetOrderLog.proto\022\010transMsg\032\023EReturnSt"
    "atus.proto\032\014msg-SV.proto\"\037\n\014QGetOrderLog"
    "\022\017\n\007OrderID\030\001 \002(\003\"l\n\014AGetOrderLog\022&\n\005Sta"
    "ts\030\001 \002(\0162\027.transMsg.EReturnStatus\0224\n\010Ord"
    "erLog\030\002 \003(\0132\".transMsg.SV_OrderActionRec"
    "ordInfo", 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GetOrderLog.proto", &protobuf_RegisterTypes);
  QGetOrderLog::default_instance_ = new QGetOrderLog();
  AGetOrderLog::default_instance_ = new AGetOrderLog();
  QGetOrderLog::default_instance_->InitAsDefaultInstance();
  AGetOrderLog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GetOrderLog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GetOrderLog_2eproto {
  StaticDescriptorInitializer_GetOrderLog_2eproto() {
    protobuf_AddDesc_GetOrderLog_2eproto();
  }
} static_descriptor_initializer_GetOrderLog_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int QGetOrderLog::kOrderIDFieldNumber;
#endif  // !_MSC_VER

QGetOrderLog::QGetOrderLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QGetOrderLog::InitAsDefaultInstance() {
}

QGetOrderLog::QGetOrderLog(const QGetOrderLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QGetOrderLog::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QGetOrderLog::~QGetOrderLog() {
  SharedDtor();
}

void QGetOrderLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QGetOrderLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QGetOrderLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QGetOrderLog_descriptor_;
}

const QGetOrderLog& QGetOrderLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GetOrderLog_2eproto();
  return *default_instance_;
}

QGetOrderLog* QGetOrderLog::default_instance_ = NULL;

QGetOrderLog* QGetOrderLog::New() const {
  return new QGetOrderLog;
}

void QGetOrderLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QGetOrderLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 OrderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QGetOrderLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 OrderID = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->orderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QGetOrderLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 OrderID = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->orderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QGetOrderLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 OrderID = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QGetOrderLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QGetOrderLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QGetOrderLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QGetOrderLog::MergeFrom(const QGetOrderLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QGetOrderLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QGetOrderLog::CopyFrom(const QGetOrderLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QGetOrderLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QGetOrderLog::Swap(QGetOrderLog* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QGetOrderLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QGetOrderLog_descriptor_;
  metadata.reflection = QGetOrderLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AGetOrderLog::kStatsFieldNumber;
const int AGetOrderLog::kOrderLogFieldNumber;
#endif  // !_MSC_VER

AGetOrderLog::AGetOrderLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AGetOrderLog::InitAsDefaultInstance() {
}

AGetOrderLog::AGetOrderLog(const AGetOrderLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AGetOrderLog::SharedCtor() {
  _cached_size_ = 0;
  stats_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AGetOrderLog::~AGetOrderLog() {
  SharedDtor();
}

void AGetOrderLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AGetOrderLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AGetOrderLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AGetOrderLog_descriptor_;
}

const AGetOrderLog& AGetOrderLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GetOrderLog_2eproto();
  return *default_instance_;
}

AGetOrderLog* AGetOrderLog::default_instance_ = NULL;

AGetOrderLog* AGetOrderLog::New() const {
  return new AGetOrderLog;
}

void AGetOrderLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stats_ = 0;
  }
  orderlog_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AGetOrderLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transMsg.EReturnStatus Stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transMsg::EReturnStatus_IsValid(value)) {
            set_stats(static_cast< ::transMsg::EReturnStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OrderLog;
        break;
      }

      // repeated .transMsg.SV_OrderActionRecordInfo OrderLog = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderLog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orderlog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OrderLog;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AGetOrderLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stats(), output);
  }

  // repeated .transMsg.SV_OrderActionRecordInfo OrderLog = 2;
  for (int i = 0; i < this->orderlog_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->orderlog(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AGetOrderLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stats(), target);
  }

  // repeated .transMsg.SV_OrderActionRecordInfo OrderLog = 2;
  for (int i = 0; i < this->orderlog_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->orderlog(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AGetOrderLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transMsg.EReturnStatus Stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stats());
    }

  }
  // repeated .transMsg.SV_OrderActionRecordInfo OrderLog = 2;
  total_size += 1 * this->orderlog_size();
  for (int i = 0; i < this->orderlog_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orderlog(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AGetOrderLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AGetOrderLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AGetOrderLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AGetOrderLog::MergeFrom(const AGetOrderLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  orderlog_.MergeFrom(from.orderlog_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      set_stats(from.stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AGetOrderLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AGetOrderLog::CopyFrom(const AGetOrderLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AGetOrderLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < orderlog_size(); i++) {
    if (!this->orderlog(i).IsInitialized()) return false;
  }
  return true;
}

void AGetOrderLog::Swap(AGetOrderLog* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    orderlog_.Swap(&other->orderlog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AGetOrderLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AGetOrderLog_descriptor_;
  metadata.reflection = AGetOrderLog_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

// @@protoc_insertion_point(global_scope)
