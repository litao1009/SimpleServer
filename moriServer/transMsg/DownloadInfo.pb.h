// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DownloadInfo.proto

#ifndef PROTOBUF_DownloadInfo_2eproto__INCLUDED
#define PROTOBUF_DownloadInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "EReturnStatus.pb.h"
#include "msg-GL.pb.h"
// @@protoc_insertion_point(includes)

namespace transMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DownloadInfo_2eproto();
void protobuf_AssignDesc_DownloadInfo_2eproto();
void protobuf_ShutdownFile_DownloadInfo_2eproto();

class QDownloadInfo;
class ADownloadInfo;

// ===================================================================

class QDownloadInfo : public ::google::protobuf::Message {
 public:
  QDownloadInfo();
  virtual ~QDownloadInfo();

  QDownloadInfo(const QDownloadInfo& from);

  inline QDownloadInfo& operator=(const QDownloadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QDownloadInfo& default_instance();

  void Swap(QDownloadInfo* other);

  // implements Message ----------------------------------------------

  QDownloadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QDownloadInfo& from);
  void MergeFrom(const QDownloadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool GL_AreaGeoMapInfo = 1 [default = false];
  inline bool has_gl_areageomapinfo() const;
  inline void clear_gl_areageomapinfo();
  static const int kGLAreaGeoMapInfoFieldNumber = 1;
  inline bool gl_areageomapinfo() const;
  inline void set_gl_areageomapinfo(bool value);

  // optional bool GL_AreaInfo = 2 [default = false];
  inline bool has_gl_areainfo() const;
  inline void clear_gl_areainfo();
  static const int kGLAreaInfoFieldNumber = 2;
  inline bool gl_areainfo() const;
  inline void set_gl_areainfo(bool value);

  // optional bool GL_DeptInfo = 3 [default = false];
  inline bool has_gl_deptinfo() const;
  inline void clear_gl_deptinfo();
  static const int kGLDeptInfoFieldNumber = 3;
  inline bool gl_deptinfo() const;
  inline void set_gl_deptinfo(bool value);

  // optional bool GL_DesignerConfigInfo = 4 [default = false];
  inline bool has_gl_designerconfiginfo() const;
  inline void clear_gl_designerconfiginfo();
  static const int kGLDesignerConfigInfoFieldNumber = 4;
  inline bool gl_designerconfiginfo() const;
  inline void set_gl_designerconfiginfo(bool value);

  // optional bool GL_GTypeInfo = 5 [default = false];
  inline bool has_gl_gtypeinfo() const;
  inline void clear_gl_gtypeinfo();
  static const int kGLGTypeInfoFieldNumber = 5;
  inline bool gl_gtypeinfo() const;
  inline void set_gl_gtypeinfo(bool value);

  // optional bool GL_MajorCateInfo = 6 [default = false];
  inline bool has_gl_majorcateinfo() const;
  inline void clear_gl_majorcateinfo();
  static const int kGLMajorCateInfoFieldNumber = 6;
  inline bool gl_majorcateinfo() const;
  inline void set_gl_majorcateinfo(bool value);

  // optional bool GL_MinorCateInfo = 7 [default = false];
  inline bool has_gl_minorcateinfo() const;
  inline void clear_gl_minorcateinfo();
  static const int kGLMinorCateInfoFieldNumber = 7;
  inline bool gl_minorcateinfo() const;
  inline void set_gl_minorcateinfo(bool value);

  // optional bool GL_MinorGTypeMapInfo = 8 [default = false];
  inline bool has_gl_minorgtypemapinfo() const;
  inline void clear_gl_minorgtypemapinfo();
  static const int kGLMinorGTypeMapInfoFieldNumber = 8;
  inline bool gl_minorgtypemapinfo() const;
  inline void set_gl_minorgtypemapinfo(bool value);

  // optional bool GL_GeoCodeInfo = 9 [default = false];
  inline bool has_gl_geocodeinfo() const;
  inline void clear_gl_geocodeinfo();
  static const int kGLGeoCodeInfoFieldNumber = 9;
  inline bool gl_geocodeinfo() const;
  inline void set_gl_geocodeinfo(bool value);

  // optional bool GL_UnitInfo = 10 [default = false];
  inline bool has_gl_unitinfo() const;
  inline void clear_gl_unitinfo();
  static const int kGLUnitInfoFieldNumber = 10;
  inline bool gl_unitinfo() const;
  inline void set_gl_unitinfo(bool value);

  // optional bool GL_UserInfo = 11 [default = false];
  inline bool has_gl_userinfo() const;
  inline void clear_gl_userinfo();
  static const int kGLUserInfoFieldNumber = 11;
  inline bool gl_userinfo() const;
  inline void set_gl_userinfo(bool value);

  // optional bool GL_RoleRightInfo = 12 [default = false];
  inline bool has_gl_rolerightinfo() const;
  inline void clear_gl_rolerightinfo();
  static const int kGLRoleRightInfoFieldNumber = 12;
  inline bool gl_rolerightinfo() const;
  inline void set_gl_rolerightinfo(bool value);

  // optional bool GL_PrintTemplateInfo = 13 [default = false];
  inline bool has_gl_printtemplateinfo() const;
  inline void clear_gl_printtemplateinfo();
  static const int kGLPrintTemplateInfoFieldNumber = 13;
  inline bool gl_printtemplateinfo() const;
  inline void set_gl_printtemplateinfo(bool value);

  // optional bool GL_AppleseedInfo = 14 [default = false];
  inline bool has_gl_appleseedinfo() const;
  inline void clear_gl_appleseedinfo();
  static const int kGLAppleseedInfoFieldNumber = 14;
  inline bool gl_appleseedinfo() const;
  inline void set_gl_appleseedinfo(bool value);

  // @@protoc_insertion_point(class_scope:transMsg.QDownloadInfo)
 private:
  inline void set_has_gl_areageomapinfo();
  inline void clear_has_gl_areageomapinfo();
  inline void set_has_gl_areainfo();
  inline void clear_has_gl_areainfo();
  inline void set_has_gl_deptinfo();
  inline void clear_has_gl_deptinfo();
  inline void set_has_gl_designerconfiginfo();
  inline void clear_has_gl_designerconfiginfo();
  inline void set_has_gl_gtypeinfo();
  inline void clear_has_gl_gtypeinfo();
  inline void set_has_gl_majorcateinfo();
  inline void clear_has_gl_majorcateinfo();
  inline void set_has_gl_minorcateinfo();
  inline void clear_has_gl_minorcateinfo();
  inline void set_has_gl_minorgtypemapinfo();
  inline void clear_has_gl_minorgtypemapinfo();
  inline void set_has_gl_geocodeinfo();
  inline void clear_has_gl_geocodeinfo();
  inline void set_has_gl_unitinfo();
  inline void clear_has_gl_unitinfo();
  inline void set_has_gl_userinfo();
  inline void clear_has_gl_userinfo();
  inline void set_has_gl_rolerightinfo();
  inline void clear_has_gl_rolerightinfo();
  inline void set_has_gl_printtemplateinfo();
  inline void clear_has_gl_printtemplateinfo();
  inline void set_has_gl_appleseedinfo();
  inline void clear_has_gl_appleseedinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool gl_areageomapinfo_;
  bool gl_areainfo_;
  bool gl_deptinfo_;
  bool gl_designerconfiginfo_;
  bool gl_gtypeinfo_;
  bool gl_majorcateinfo_;
  bool gl_minorcateinfo_;
  bool gl_minorgtypemapinfo_;
  bool gl_geocodeinfo_;
  bool gl_unitinfo_;
  bool gl_userinfo_;
  bool gl_rolerightinfo_;
  bool gl_printtemplateinfo_;
  bool gl_appleseedinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_DownloadInfo_2eproto();
  friend void protobuf_AssignDesc_DownloadInfo_2eproto();
  friend void protobuf_ShutdownFile_DownloadInfo_2eproto();

  void InitAsDefaultInstance();
  static QDownloadInfo* default_instance_;
};
// -------------------------------------------------------------------

class ADownloadInfo : public ::google::protobuf::Message {
 public:
  ADownloadInfo();
  virtual ~ADownloadInfo();

  ADownloadInfo(const ADownloadInfo& from);

  inline ADownloadInfo& operator=(const ADownloadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADownloadInfo& default_instance();

  void Swap(ADownloadInfo* other);

  // implements Message ----------------------------------------------

  ADownloadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADownloadInfo& from);
  void MergeFrom(const ADownloadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .transMsg.EReturnStatus Stats = 1;
  inline bool has_stats() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 1;
  inline ::transMsg::EReturnStatus stats() const;
  inline void set_stats(::transMsg::EReturnStatus value);

  // optional .transMsg.GL_Table GL_Table = 101;
  inline bool has_gl_table() const;
  inline void clear_gl_table();
  static const int kGLTableFieldNumber = 101;
  inline const ::transMsg::GL_Table& gl_table() const;
  inline ::transMsg::GL_Table* mutable_gl_table();
  inline ::transMsg::GL_Table* release_gl_table();
  inline void set_allocated_gl_table(::transMsg::GL_Table* gl_table);

  // @@protoc_insertion_point(class_scope:transMsg.ADownloadInfo)
 private:
  inline void set_has_stats();
  inline void clear_has_stats();
  inline void set_has_gl_table();
  inline void clear_has_gl_table();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::transMsg::GL_Table* gl_table_;
  int stats_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DownloadInfo_2eproto();
  friend void protobuf_AssignDesc_DownloadInfo_2eproto();
  friend void protobuf_ShutdownFile_DownloadInfo_2eproto();

  void InitAsDefaultInstance();
  static ADownloadInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// QDownloadInfo

// optional bool GL_AreaGeoMapInfo = 1 [default = false];
inline bool QDownloadInfo::has_gl_areageomapinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QDownloadInfo::set_has_gl_areageomapinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QDownloadInfo::clear_has_gl_areageomapinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QDownloadInfo::clear_gl_areageomapinfo() {
  gl_areageomapinfo_ = false;
  clear_has_gl_areageomapinfo();
}
inline bool QDownloadInfo::gl_areageomapinfo() const {
  return gl_areageomapinfo_;
}
inline void QDownloadInfo::set_gl_areageomapinfo(bool value) {
  set_has_gl_areageomapinfo();
  gl_areageomapinfo_ = value;
}

// optional bool GL_AreaInfo = 2 [default = false];
inline bool QDownloadInfo::has_gl_areainfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QDownloadInfo::set_has_gl_areainfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QDownloadInfo::clear_has_gl_areainfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QDownloadInfo::clear_gl_areainfo() {
  gl_areainfo_ = false;
  clear_has_gl_areainfo();
}
inline bool QDownloadInfo::gl_areainfo() const {
  return gl_areainfo_;
}
inline void QDownloadInfo::set_gl_areainfo(bool value) {
  set_has_gl_areainfo();
  gl_areainfo_ = value;
}

// optional bool GL_DeptInfo = 3 [default = false];
inline bool QDownloadInfo::has_gl_deptinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QDownloadInfo::set_has_gl_deptinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QDownloadInfo::clear_has_gl_deptinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QDownloadInfo::clear_gl_deptinfo() {
  gl_deptinfo_ = false;
  clear_has_gl_deptinfo();
}
inline bool QDownloadInfo::gl_deptinfo() const {
  return gl_deptinfo_;
}
inline void QDownloadInfo::set_gl_deptinfo(bool value) {
  set_has_gl_deptinfo();
  gl_deptinfo_ = value;
}

// optional bool GL_DesignerConfigInfo = 4 [default = false];
inline bool QDownloadInfo::has_gl_designerconfiginfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QDownloadInfo::set_has_gl_designerconfiginfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QDownloadInfo::clear_has_gl_designerconfiginfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QDownloadInfo::clear_gl_designerconfiginfo() {
  gl_designerconfiginfo_ = false;
  clear_has_gl_designerconfiginfo();
}
inline bool QDownloadInfo::gl_designerconfiginfo() const {
  return gl_designerconfiginfo_;
}
inline void QDownloadInfo::set_gl_designerconfiginfo(bool value) {
  set_has_gl_designerconfiginfo();
  gl_designerconfiginfo_ = value;
}

// optional bool GL_GTypeInfo = 5 [default = false];
inline bool QDownloadInfo::has_gl_gtypeinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QDownloadInfo::set_has_gl_gtypeinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QDownloadInfo::clear_has_gl_gtypeinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QDownloadInfo::clear_gl_gtypeinfo() {
  gl_gtypeinfo_ = false;
  clear_has_gl_gtypeinfo();
}
inline bool QDownloadInfo::gl_gtypeinfo() const {
  return gl_gtypeinfo_;
}
inline void QDownloadInfo::set_gl_gtypeinfo(bool value) {
  set_has_gl_gtypeinfo();
  gl_gtypeinfo_ = value;
}

// optional bool GL_MajorCateInfo = 6 [default = false];
inline bool QDownloadInfo::has_gl_majorcateinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QDownloadInfo::set_has_gl_majorcateinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QDownloadInfo::clear_has_gl_majorcateinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QDownloadInfo::clear_gl_majorcateinfo() {
  gl_majorcateinfo_ = false;
  clear_has_gl_majorcateinfo();
}
inline bool QDownloadInfo::gl_majorcateinfo() const {
  return gl_majorcateinfo_;
}
inline void QDownloadInfo::set_gl_majorcateinfo(bool value) {
  set_has_gl_majorcateinfo();
  gl_majorcateinfo_ = value;
}

// optional bool GL_MinorCateInfo = 7 [default = false];
inline bool QDownloadInfo::has_gl_minorcateinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QDownloadInfo::set_has_gl_minorcateinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QDownloadInfo::clear_has_gl_minorcateinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QDownloadInfo::clear_gl_minorcateinfo() {
  gl_minorcateinfo_ = false;
  clear_has_gl_minorcateinfo();
}
inline bool QDownloadInfo::gl_minorcateinfo() const {
  return gl_minorcateinfo_;
}
inline void QDownloadInfo::set_gl_minorcateinfo(bool value) {
  set_has_gl_minorcateinfo();
  gl_minorcateinfo_ = value;
}

// optional bool GL_MinorGTypeMapInfo = 8 [default = false];
inline bool QDownloadInfo::has_gl_minorgtypemapinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QDownloadInfo::set_has_gl_minorgtypemapinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QDownloadInfo::clear_has_gl_minorgtypemapinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QDownloadInfo::clear_gl_minorgtypemapinfo() {
  gl_minorgtypemapinfo_ = false;
  clear_has_gl_minorgtypemapinfo();
}
inline bool QDownloadInfo::gl_minorgtypemapinfo() const {
  return gl_minorgtypemapinfo_;
}
inline void QDownloadInfo::set_gl_minorgtypemapinfo(bool value) {
  set_has_gl_minorgtypemapinfo();
  gl_minorgtypemapinfo_ = value;
}

// optional bool GL_GeoCodeInfo = 9 [default = false];
inline bool QDownloadInfo::has_gl_geocodeinfo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QDownloadInfo::set_has_gl_geocodeinfo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QDownloadInfo::clear_has_gl_geocodeinfo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QDownloadInfo::clear_gl_geocodeinfo() {
  gl_geocodeinfo_ = false;
  clear_has_gl_geocodeinfo();
}
inline bool QDownloadInfo::gl_geocodeinfo() const {
  return gl_geocodeinfo_;
}
inline void QDownloadInfo::set_gl_geocodeinfo(bool value) {
  set_has_gl_geocodeinfo();
  gl_geocodeinfo_ = value;
}

// optional bool GL_UnitInfo = 10 [default = false];
inline bool QDownloadInfo::has_gl_unitinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QDownloadInfo::set_has_gl_unitinfo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QDownloadInfo::clear_has_gl_unitinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QDownloadInfo::clear_gl_unitinfo() {
  gl_unitinfo_ = false;
  clear_has_gl_unitinfo();
}
inline bool QDownloadInfo::gl_unitinfo() const {
  return gl_unitinfo_;
}
inline void QDownloadInfo::set_gl_unitinfo(bool value) {
  set_has_gl_unitinfo();
  gl_unitinfo_ = value;
}

// optional bool GL_UserInfo = 11 [default = false];
inline bool QDownloadInfo::has_gl_userinfo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QDownloadInfo::set_has_gl_userinfo() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QDownloadInfo::clear_has_gl_userinfo() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QDownloadInfo::clear_gl_userinfo() {
  gl_userinfo_ = false;
  clear_has_gl_userinfo();
}
inline bool QDownloadInfo::gl_userinfo() const {
  return gl_userinfo_;
}
inline void QDownloadInfo::set_gl_userinfo(bool value) {
  set_has_gl_userinfo();
  gl_userinfo_ = value;
}

// optional bool GL_RoleRightInfo = 12 [default = false];
inline bool QDownloadInfo::has_gl_rolerightinfo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QDownloadInfo::set_has_gl_rolerightinfo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QDownloadInfo::clear_has_gl_rolerightinfo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QDownloadInfo::clear_gl_rolerightinfo() {
  gl_rolerightinfo_ = false;
  clear_has_gl_rolerightinfo();
}
inline bool QDownloadInfo::gl_rolerightinfo() const {
  return gl_rolerightinfo_;
}
inline void QDownloadInfo::set_gl_rolerightinfo(bool value) {
  set_has_gl_rolerightinfo();
  gl_rolerightinfo_ = value;
}

// optional bool GL_PrintTemplateInfo = 13 [default = false];
inline bool QDownloadInfo::has_gl_printtemplateinfo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QDownloadInfo::set_has_gl_printtemplateinfo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void QDownloadInfo::clear_has_gl_printtemplateinfo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void QDownloadInfo::clear_gl_printtemplateinfo() {
  gl_printtemplateinfo_ = false;
  clear_has_gl_printtemplateinfo();
}
inline bool QDownloadInfo::gl_printtemplateinfo() const {
  return gl_printtemplateinfo_;
}
inline void QDownloadInfo::set_gl_printtemplateinfo(bool value) {
  set_has_gl_printtemplateinfo();
  gl_printtemplateinfo_ = value;
}

// optional bool GL_AppleseedInfo = 14 [default = false];
inline bool QDownloadInfo::has_gl_appleseedinfo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void QDownloadInfo::set_has_gl_appleseedinfo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void QDownloadInfo::clear_has_gl_appleseedinfo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void QDownloadInfo::clear_gl_appleseedinfo() {
  gl_appleseedinfo_ = false;
  clear_has_gl_appleseedinfo();
}
inline bool QDownloadInfo::gl_appleseedinfo() const {
  return gl_appleseedinfo_;
}
inline void QDownloadInfo::set_gl_appleseedinfo(bool value) {
  set_has_gl_appleseedinfo();
  gl_appleseedinfo_ = value;
}

// -------------------------------------------------------------------

// ADownloadInfo

// required .transMsg.EReturnStatus Stats = 1;
inline bool ADownloadInfo::has_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ADownloadInfo::set_has_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ADownloadInfo::clear_has_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ADownloadInfo::clear_stats() {
  stats_ = 0;
  clear_has_stats();
}
inline ::transMsg::EReturnStatus ADownloadInfo::stats() const {
  return static_cast< ::transMsg::EReturnStatus >(stats_);
}
inline void ADownloadInfo::set_stats(::transMsg::EReturnStatus value) {
  assert(::transMsg::EReturnStatus_IsValid(value));
  set_has_stats();
  stats_ = value;
}

// optional .transMsg.GL_Table GL_Table = 101;
inline bool ADownloadInfo::has_gl_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ADownloadInfo::set_has_gl_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ADownloadInfo::clear_has_gl_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ADownloadInfo::clear_gl_table() {
  if (gl_table_ != NULL) gl_table_->::transMsg::GL_Table::Clear();
  clear_has_gl_table();
}
inline const ::transMsg::GL_Table& ADownloadInfo::gl_table() const {
  return gl_table_ != NULL ? *gl_table_ : *default_instance_->gl_table_;
}
inline ::transMsg::GL_Table* ADownloadInfo::mutable_gl_table() {
  set_has_gl_table();
  if (gl_table_ == NULL) gl_table_ = new ::transMsg::GL_Table;
  return gl_table_;
}
inline ::transMsg::GL_Table* ADownloadInfo::release_gl_table() {
  clear_has_gl_table();
  ::transMsg::GL_Table* temp = gl_table_;
  gl_table_ = NULL;
  return temp;
}
inline void ADownloadInfo::set_allocated_gl_table(::transMsg::GL_Table* gl_table) {
  delete gl_table_;
  gl_table_ = gl_table;
  if (gl_table) {
    set_has_gl_table();
  } else {
    clear_has_gl_table();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DownloadInfo_2eproto__INCLUDED
