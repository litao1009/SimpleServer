// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg-GL.proto

#ifndef PROTOBUF_msg_2dGL_2eproto__INCLUDED
#define PROTOBUF_msg_2dGL_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_2dGL_2eproto();
void protobuf_AssignDesc_msg_2dGL_2eproto();
void protobuf_ShutdownFile_msg_2dGL_2eproto();

class GL_AppVerInfo;
class GL_AppleseedInfo;
class GL_AreaGeoMapInfo;
class GL_AreaInfo;
class GL_BaseBoardInfo;
class GL_ChargeLogInfo;
class GL_DeptInfo;
class GL_DesignerConfigInfo;
class GL_GTypeInfo;
class GL_GeoCodeInfo;
class GL_MajorCateInfo;
class GL_MinorCateInfo;
class GL_MinorGTypeMapInfo;
class GL_OrderInfo;
class GL_PinYin;
class GL_PrepaidCardInfo;
class GL_PrintTemplateInfo;
class GL_RoleInfo;
class GL_RoleRightInfo;
class GL_SugarVerInfo;
class GL_TransferOrderInfo;
class GL_UnitInfo;
class GL_UserActivationInfo;
class GL_UserInfo;
class GL_Table;

// ===================================================================

class GL_AppVerInfo : public ::google::protobuf::Message {
 public:
  GL_AppVerInfo();
  virtual ~GL_AppVerInfo();

  GL_AppVerInfo(const GL_AppVerInfo& from);

  inline GL_AppVerInfo& operator=(const GL_AppVerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_AppVerInfo& default_instance();

  void Swap(GL_AppVerInfo* other);

  // implements Message ----------------------------------------------

  GL_AppVerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_AppVerInfo& from);
  void MergeFrom(const GL_AppVerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 AppVerID = 1;
  inline bool has_appverid() const;
  inline void clear_appverid();
  static const int kAppVerIDFieldNumber = 1;
  inline ::google::protobuf::int32 appverid() const;
  inline void set_appverid(::google::protobuf::int32 value);

  // optional int32 ClientType = 2;
  inline bool has_clienttype() const;
  inline void clear_clienttype();
  static const int kClientTypeFieldNumber = 2;
  inline ::google::protobuf::int32 clienttype() const;
  inline void set_clienttype(::google::protobuf::int32 value);

  // optional bool IsActive = 3;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 3;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // optional int64 FileSize = 4;
  inline bool has_filesize() const;
  inline void clear_filesize();
  static const int kFileSizeFieldNumber = 4;
  inline ::google::protobuf::int64 filesize() const;
  inline void set_filesize(::google::protobuf::int64 value);

  // optional string AppVerCode = 5;
  inline bool has_appvercode() const;
  inline void clear_appvercode();
  static const int kAppVerCodeFieldNumber = 5;
  inline const ::std::string& appvercode() const;
  inline void set_appvercode(const ::std::string& value);
  inline void set_appvercode(const char* value);
  inline void set_appvercode(const char* value, size_t size);
  inline ::std::string* mutable_appvercode();
  inline ::std::string* release_appvercode();
  inline void set_allocated_appvercode(::std::string* appvercode);

  // optional string HashCode = 6;
  inline bool has_hashcode() const;
  inline void clear_hashcode();
  static const int kHashCodeFieldNumber = 6;
  inline const ::std::string& hashcode() const;
  inline void set_hashcode(const ::std::string& value);
  inline void set_hashcode(const char* value);
  inline void set_hashcode(const char* value, size_t size);
  inline ::std::string* mutable_hashcode();
  inline ::std::string* release_hashcode();
  inline void set_allocated_hashcode(::std::string* hashcode);

  // optional string FilePath = 7;
  inline bool has_filepath() const;
  inline void clear_filepath();
  static const int kFilePathFieldNumber = 7;
  inline const ::std::string& filepath() const;
  inline void set_filepath(const ::std::string& value);
  inline void set_filepath(const char* value);
  inline void set_filepath(const char* value, size_t size);
  inline ::std::string* mutable_filepath();
  inline ::std::string* release_filepath();
  inline void set_allocated_filepath(::std::string* filepath);

  // @@protoc_insertion_point(class_scope:transMsg.GL_AppVerInfo)
 private:
  inline void set_has_appverid();
  inline void clear_has_appverid();
  inline void set_has_clienttype();
  inline void clear_has_clienttype();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_filesize();
  inline void clear_has_filesize();
  inline void set_has_appvercode();
  inline void clear_has_appvercode();
  inline void set_has_hashcode();
  inline void clear_has_hashcode();
  inline void set_has_filepath();
  inline void clear_has_filepath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 appverid_;
  ::google::protobuf::int32 clienttype_;
  ::google::protobuf::int64 filesize_;
  ::std::string* appvercode_;
  ::std::string* hashcode_;
  ::std::string* filepath_;
  bool isactive_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_AppVerInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_AppleseedInfo : public ::google::protobuf::Message {
 public:
  GL_AppleseedInfo();
  virtual ~GL_AppleseedInfo();

  GL_AppleseedInfo(const GL_AppleseedInfo& from);

  inline GL_AppleseedInfo& operator=(const GL_AppleseedInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_AppleseedInfo& default_instance();

  void Swap(GL_AppleseedInfo* other);

  // implements Message ----------------------------------------------

  GL_AppleseedInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_AppleseedInfo& from);
  void MergeFrom(const GL_AppleseedInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional string ItemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional string ItemData = 3;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemDataFieldNumber = 3;
  inline const ::std::string& itemdata() const;
  inline void set_itemdata(const ::std::string& value);
  inline void set_itemdata(const char* value);
  inline void set_itemdata(const char* value, size_t size);
  inline ::std::string* mutable_itemdata();
  inline ::std::string* release_itemdata();
  inline void set_allocated_itemdata(::std::string* itemdata);

  // @@protoc_insertion_point(class_scope:transMsg.GL_AppleseedInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* itemname_;
  ::std::string* itemdata_;
  ::google::protobuf::int32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_AppleseedInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_AreaGeoMapInfo : public ::google::protobuf::Message {
 public:
  GL_AreaGeoMapInfo();
  virtual ~GL_AreaGeoMapInfo();

  GL_AreaGeoMapInfo(const GL_AreaGeoMapInfo& from);

  inline GL_AreaGeoMapInfo& operator=(const GL_AreaGeoMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_AreaGeoMapInfo& default_instance();

  void Swap(GL_AreaGeoMapInfo* other);

  // implements Message ----------------------------------------------

  GL_AreaGeoMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_AreaGeoMapInfo& from);
  void MergeFrom(const GL_AreaGeoMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 AreaID = 1;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaIDFieldNumber = 1;
  inline ::google::protobuf::int32 areaid() const;
  inline void set_areaid(::google::protobuf::int32 value);

  // optional string GeoCode = 2;
  inline bool has_geocode() const;
  inline void clear_geocode();
  static const int kGeoCodeFieldNumber = 2;
  inline const ::std::string& geocode() const;
  inline void set_geocode(const ::std::string& value);
  inline void set_geocode(const char* value);
  inline void set_geocode(const char* value, size_t size);
  inline ::std::string* mutable_geocode();
  inline ::std::string* release_geocode();
  inline void set_allocated_geocode(::std::string* geocode);

  // @@protoc_insertion_point(class_scope:transMsg.GL_AreaGeoMapInfo)
 private:
  inline void set_has_areaid();
  inline void clear_has_areaid();
  inline void set_has_geocode();
  inline void clear_has_geocode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* geocode_;
  ::google::protobuf::int32 areaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_AreaGeoMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_AreaInfo : public ::google::protobuf::Message {
 public:
  GL_AreaInfo();
  virtual ~GL_AreaInfo();

  GL_AreaInfo(const GL_AreaInfo& from);

  inline GL_AreaInfo& operator=(const GL_AreaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_AreaInfo& default_instance();

  void Swap(GL_AreaInfo* other);

  // implements Message ----------------------------------------------

  GL_AreaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_AreaInfo& from);
  void MergeFrom(const GL_AreaInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 AreaID = 1;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaIDFieldNumber = 1;
  inline ::google::protobuf::int32 areaid() const;
  inline void set_areaid(::google::protobuf::int32 value);

  // optional int32 DeptID = 2;
  inline bool has_deptid() const;
  inline void clear_deptid();
  static const int kDeptIDFieldNumber = 2;
  inline ::google::protobuf::int32 deptid() const;
  inline void set_deptid(::google::protobuf::int32 value);

  // optional int32 CreatorID = 3;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 3;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // optional int32 UpdaterID = 4;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 4;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // optional int64 CreateTime = 5;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 5;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int64 UpdateTime = 6;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // optional string AreaName = 7;
  inline bool has_areaname() const;
  inline void clear_areaname();
  static const int kAreaNameFieldNumber = 7;
  inline const ::std::string& areaname() const;
  inline void set_areaname(const ::std::string& value);
  inline void set_areaname(const char* value);
  inline void set_areaname(const char* value, size_t size);
  inline ::std::string* mutable_areaname();
  inline ::std::string* release_areaname();
  inline void set_allocated_areaname(::std::string* areaname);

  // @@protoc_insertion_point(class_scope:transMsg.GL_AreaInfo)
 private:
  inline void set_has_areaid();
  inline void clear_has_areaid();
  inline void set_has_deptid();
  inline void clear_has_deptid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_areaname();
  inline void clear_has_areaname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 areaid_;
  ::google::protobuf::int32 deptid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* areaname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_AreaInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_BaseBoardInfo : public ::google::protobuf::Message {
 public:
  GL_BaseBoardInfo();
  virtual ~GL_BaseBoardInfo();

  GL_BaseBoardInfo(const GL_BaseBoardInfo& from);

  inline GL_BaseBoardInfo& operator=(const GL_BaseBoardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_BaseBoardInfo& default_instance();

  void Swap(GL_BaseBoardInfo* other);

  // implements Message ----------------------------------------------

  GL_BaseBoardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_BaseBoardInfo& from);
  void MergeFrom(const GL_BaseBoardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CabShape = 1;
  inline bool has_cabshape() const;
  inline void clear_cabshape();
  static const int kCabShapeFieldNumber = 1;
  inline ::google::protobuf::int32 cabshape() const;
  inline void set_cabshape(::google::protobuf::int32 value);

  // optional int32 CabGapType = 2;
  inline bool has_cabgaptype() const;
  inline void clear_cabgaptype();
  static const int kCabGapTypeFieldNumber = 2;
  inline ::google::protobuf::int32 cabgaptype() const;
  inline void set_cabgaptype(::google::protobuf::int32 value);

  // optional int32 BoardType = 3;
  inline bool has_boardtype() const;
  inline void clear_boardtype();
  static const int kBoardTypeFieldNumber = 3;
  inline ::google::protobuf::int32 boardtype() const;
  inline void set_boardtype(::google::protobuf::int32 value);

  // optional int32 BoardPosition = 4;
  inline bool has_boardposition() const;
  inline void clear_boardposition();
  static const int kBoardPositionFieldNumber = 4;
  inline ::google::protobuf::int32 boardposition() const;
  inline void set_boardposition(::google::protobuf::int32 value);

  // optional int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // optional string XFormula = 6;
  inline bool has_xformula() const;
  inline void clear_xformula();
  static const int kXFormulaFieldNumber = 6;
  inline const ::std::string& xformula() const;
  inline void set_xformula(const ::std::string& value);
  inline void set_xformula(const char* value);
  inline void set_xformula(const char* value, size_t size);
  inline ::std::string* mutable_xformula();
  inline ::std::string* release_xformula();
  inline void set_allocated_xformula(::std::string* xformula);

  // optional string YFormula = 7;
  inline bool has_yformula() const;
  inline void clear_yformula();
  static const int kYFormulaFieldNumber = 7;
  inline const ::std::string& yformula() const;
  inline void set_yformula(const ::std::string& value);
  inline void set_yformula(const char* value);
  inline void set_yformula(const char* value, size_t size);
  inline ::std::string* mutable_yformula();
  inline ::std::string* release_yformula();
  inline void set_allocated_yformula(::std::string* yformula);

  // optional int32 XDock = 8;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 8;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // optional int32 YDock = 9;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 9;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // optional int32 ZDock = 10;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 10;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // optional string XOffset = 11;
  inline bool has_xoffset() const;
  inline void clear_xoffset();
  static const int kXOffsetFieldNumber = 11;
  inline const ::std::string& xoffset() const;
  inline void set_xoffset(const ::std::string& value);
  inline void set_xoffset(const char* value);
  inline void set_xoffset(const char* value, size_t size);
  inline ::std::string* mutable_xoffset();
  inline ::std::string* release_xoffset();
  inline void set_allocated_xoffset(::std::string* xoffset);

  // optional string YOffset = 12;
  inline bool has_yoffset() const;
  inline void clear_yoffset();
  static const int kYOffsetFieldNumber = 12;
  inline const ::std::string& yoffset() const;
  inline void set_yoffset(const ::std::string& value);
  inline void set_yoffset(const char* value);
  inline void set_yoffset(const char* value, size_t size);
  inline ::std::string* mutable_yoffset();
  inline ::std::string* release_yoffset();
  inline void set_allocated_yoffset(::std::string* yoffset);

  // optional string ZOffset = 13;
  inline bool has_zoffset() const;
  inline void clear_zoffset();
  static const int kZOffsetFieldNumber = 13;
  inline const ::std::string& zoffset() const;
  inline void set_zoffset(const ::std::string& value);
  inline void set_zoffset(const char* value);
  inline void set_zoffset(const char* value, size_t size);
  inline ::std::string* mutable_zoffset();
  inline ::std::string* release_zoffset();
  inline void set_allocated_zoffset(::std::string* zoffset);

  // optional double ArcX = 14;
  inline bool has_arcx() const;
  inline void clear_arcx();
  static const int kArcXFieldNumber = 14;
  inline double arcx() const;
  inline void set_arcx(double value);

  // optional double ArcY = 15;
  inline bool has_arcy() const;
  inline void clear_arcy();
  static const int kArcYFieldNumber = 15;
  inline double arcy() const;
  inline void set_arcy(double value);

  // optional double ArcZ = 16;
  inline bool has_arcz() const;
  inline void clear_arcz();
  static const int kArcZFieldNumber = 16;
  inline double arcz() const;
  inline void set_arcz(double value);

  // optional string Name = 17;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 17;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:transMsg.GL_BaseBoardInfo)
 private:
  inline void set_has_cabshape();
  inline void clear_has_cabshape();
  inline void set_has_cabgaptype();
  inline void clear_has_cabgaptype();
  inline void set_has_boardtype();
  inline void clear_has_boardtype();
  inline void set_has_boardposition();
  inline void clear_has_boardposition();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_xformula();
  inline void clear_has_xformula();
  inline void set_has_yformula();
  inline void clear_has_yformula();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xoffset();
  inline void clear_has_xoffset();
  inline void set_has_yoffset();
  inline void clear_has_yoffset();
  inline void set_has_zoffset();
  inline void clear_has_zoffset();
  inline void set_has_arcx();
  inline void clear_has_arcx();
  inline void set_has_arcy();
  inline void clear_has_arcy();
  inline void set_has_arcz();
  inline void clear_has_arcz();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabshape_;
  ::google::protobuf::int32 cabgaptype_;
  ::google::protobuf::int32 boardtype_;
  ::google::protobuf::int32 boardposition_;
  ::std::string* xformula_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 xdock_;
  ::std::string* yformula_;
  ::google::protobuf::int32 ydock_;
  ::google::protobuf::int32 zdock_;
  ::std::string* xoffset_;
  ::std::string* yoffset_;
  ::std::string* zoffset_;
  double arcx_;
  double arcy_;
  double arcz_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_BaseBoardInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_ChargeLogInfo : public ::google::protobuf::Message {
 public:
  GL_ChargeLogInfo();
  virtual ~GL_ChargeLogInfo();

  GL_ChargeLogInfo(const GL_ChargeLogInfo& from);

  inline GL_ChargeLogInfo& operator=(const GL_ChargeLogInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_ChargeLogInfo& default_instance();

  void Swap(GL_ChargeLogInfo* other);

  // implements Message ----------------------------------------------

  GL_ChargeLogInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_ChargeLogInfo& from);
  void MergeFrom(const GL_ChargeLogInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LogID = 1;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogIDFieldNumber = 1;
  inline ::google::protobuf::int32 logid() const;
  inline void set_logid(::google::protobuf::int32 value);

  // optional string CardNo = 2;
  inline bool has_cardno() const;
  inline void clear_cardno();
  static const int kCardNoFieldNumber = 2;
  inline const ::std::string& cardno() const;
  inline void set_cardno(const ::std::string& value);
  inline void set_cardno(const char* value);
  inline void set_cardno(const char* value, size_t size);
  inline ::std::string* mutable_cardno();
  inline ::std::string* release_cardno();
  inline void set_allocated_cardno(::std::string* cardno);

  // optional int32 FactoryID = 3;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 3;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // optional int32 ShopID = 4;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 4;
  inline ::google::protobuf::int32 shopid() const;
  inline void set_shopid(::google::protobuf::int32 value);

  // optional int32 UserID = 5;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 5;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.GL_ChargeLogInfo)
 private:
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_cardno();
  inline void clear_has_cardno();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_shopid();
  inline void clear_has_shopid();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cardno_;
  ::google::protobuf::int32 logid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 shopid_;
  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_ChargeLogInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_DeptInfo : public ::google::protobuf::Message {
 public:
  GL_DeptInfo();
  virtual ~GL_DeptInfo();

  GL_DeptInfo(const GL_DeptInfo& from);

  inline GL_DeptInfo& operator=(const GL_DeptInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_DeptInfo& default_instance();

  void Swap(GL_DeptInfo* other);

  // implements Message ----------------------------------------------

  GL_DeptInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_DeptInfo& from);
  void MergeFrom(const GL_DeptInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 DeptID = 1;
  inline bool has_deptid() const;
  inline void clear_deptid();
  static const int kDeptIDFieldNumber = 1;
  inline ::google::protobuf::int32 deptid() const;
  inline void set_deptid(::google::protobuf::int32 value);

  // optional int32 ParentID = 2;
  inline bool has_parentid() const;
  inline void clear_parentid();
  static const int kParentIDFieldNumber = 2;
  inline ::google::protobuf::int32 parentid() const;
  inline void set_parentid(::google::protobuf::int32 value);

  // optional bool IsDel = 3;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 3;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // optional int32 DTypeID = 4;
  inline bool has_dtypeid() const;
  inline void clear_dtypeid();
  static const int kDTypeIDFieldNumber = 4;
  inline ::google::protobuf::int32 dtypeid() const;
  inline void set_dtypeid(::google::protobuf::int32 value);

  // optional int32 IncOrder = 5;
  inline bool has_incorder() const;
  inline void clear_incorder();
  static const int kIncOrderFieldNumber = 5;
  inline ::google::protobuf::int32 incorder() const;
  inline void set_incorder(::google::protobuf::int32 value);

  // optional int32 ShowOrder = 6;
  inline bool has_showorder() const;
  inline void clear_showorder();
  static const int kShowOrderFieldNumber = 6;
  inline ::google::protobuf::int32 showorder() const;
  inline void set_showorder(::google::protobuf::int32 value);

  // optional int32 CreatorID = 7;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 7;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // optional int32 UpdaterID = 8;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 8;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // optional int64 CreateTime = 9;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 9;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int64 UpdateTime = 10;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 10;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // optional string GeoCode = 11;
  inline bool has_geocode() const;
  inline void clear_geocode();
  static const int kGeoCodeFieldNumber = 11;
  inline const ::std::string& geocode() const;
  inline void set_geocode(const ::std::string& value);
  inline void set_geocode(const char* value);
  inline void set_geocode(const char* value, size_t size);
  inline ::std::string* mutable_geocode();
  inline ::std::string* release_geocode();
  inline void set_allocated_geocode(::std::string* geocode);

  // optional string DeptCode = 12;
  inline bool has_deptcode() const;
  inline void clear_deptcode();
  static const int kDeptCodeFieldNumber = 12;
  inline const ::std::string& deptcode() const;
  inline void set_deptcode(const ::std::string& value);
  inline void set_deptcode(const char* value);
  inline void set_deptcode(const char* value, size_t size);
  inline ::std::string* mutable_deptcode();
  inline ::std::string* release_deptcode();
  inline void set_allocated_deptcode(::std::string* deptcode);

  // optional string DeptName = 13;
  inline bool has_deptname() const;
  inline void clear_deptname();
  static const int kDeptNameFieldNumber = 13;
  inline const ::std::string& deptname() const;
  inline void set_deptname(const ::std::string& value);
  inline void set_deptname(const char* value);
  inline void set_deptname(const char* value, size_t size);
  inline ::std::string* mutable_deptname();
  inline ::std::string* release_deptname();
  inline void set_allocated_deptname(::std::string* deptname);

  // optional string Postcode = 14;
  inline bool has_postcode() const;
  inline void clear_postcode();
  static const int kPostcodeFieldNumber = 14;
  inline const ::std::string& postcode() const;
  inline void set_postcode(const ::std::string& value);
  inline void set_postcode(const char* value);
  inline void set_postcode(const char* value, size_t size);
  inline ::std::string* mutable_postcode();
  inline ::std::string* release_postcode();
  inline void set_allocated_postcode(::std::string* postcode);

  // optional string Tel = 15;
  inline bool has_tel() const;
  inline void clear_tel();
  static const int kTelFieldNumber = 15;
  inline const ::std::string& tel() const;
  inline void set_tel(const ::std::string& value);
  inline void set_tel(const char* value);
  inline void set_tel(const char* value, size_t size);
  inline ::std::string* mutable_tel();
  inline ::std::string* release_tel();
  inline void set_allocated_tel(::std::string* tel);

  // optional string Contacter = 16;
  inline bool has_contacter() const;
  inline void clear_contacter();
  static const int kContacterFieldNumber = 16;
  inline const ::std::string& contacter() const;
  inline void set_contacter(const ::std::string& value);
  inline void set_contacter(const char* value);
  inline void set_contacter(const char* value, size_t size);
  inline ::std::string* mutable_contacter();
  inline ::std::string* release_contacter();
  inline void set_allocated_contacter(::std::string* contacter);

  // optional string ContactAddress = 17;
  inline bool has_contactaddress() const;
  inline void clear_contactaddress();
  static const int kContactAddressFieldNumber = 17;
  inline const ::std::string& contactaddress() const;
  inline void set_contactaddress(const ::std::string& value);
  inline void set_contactaddress(const char* value);
  inline void set_contactaddress(const char* value, size_t size);
  inline ::std::string* mutable_contactaddress();
  inline ::std::string* release_contactaddress();
  inline void set_allocated_contactaddress(::std::string* contactaddress);

  // optional string DeptMemo = 18;
  inline bool has_deptmemo() const;
  inline void clear_deptmemo();
  static const int kDeptMemoFieldNumber = 18;
  inline const ::std::string& deptmemo() const;
  inline void set_deptmemo(const ::std::string& value);
  inline void set_deptmemo(const char* value);
  inline void set_deptmemo(const char* value, size_t size);
  inline ::std::string* mutable_deptmemo();
  inline ::std::string* release_deptmemo();
  inline void set_allocated_deptmemo(::std::string* deptmemo);

  // @@protoc_insertion_point(class_scope:transMsg.GL_DeptInfo)
 private:
  inline void set_has_deptid();
  inline void clear_has_deptid();
  inline void set_has_parentid();
  inline void clear_has_parentid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_dtypeid();
  inline void clear_has_dtypeid();
  inline void set_has_incorder();
  inline void clear_has_incorder();
  inline void set_has_showorder();
  inline void clear_has_showorder();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_geocode();
  inline void clear_has_geocode();
  inline void set_has_deptcode();
  inline void clear_has_deptcode();
  inline void set_has_deptname();
  inline void clear_has_deptname();
  inline void set_has_postcode();
  inline void clear_has_postcode();
  inline void set_has_tel();
  inline void clear_has_tel();
  inline void set_has_contacter();
  inline void clear_has_contacter();
  inline void set_has_contactaddress();
  inline void clear_has_contactaddress();
  inline void set_has_deptmemo();
  inline void clear_has_deptmemo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 deptid_;
  ::google::protobuf::int32 parentid_;
  bool isdel_;
  ::google::protobuf::int32 dtypeid_;
  ::google::protobuf::int32 incorder_;
  ::google::protobuf::int32 showorder_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* geocode_;
  ::std::string* deptcode_;
  ::std::string* deptname_;
  ::std::string* postcode_;
  ::std::string* tel_;
  ::std::string* contacter_;
  ::std::string* contactaddress_;
  ::std::string* deptmemo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_DeptInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_DesignerConfigInfo : public ::google::protobuf::Message {
 public:
  GL_DesignerConfigInfo();
  virtual ~GL_DesignerConfigInfo();

  GL_DesignerConfigInfo(const GL_DesignerConfigInfo& from);

  inline GL_DesignerConfigInfo& operator=(const GL_DesignerConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_DesignerConfigInfo& default_instance();

  void Swap(GL_DesignerConfigInfo* other);

  // implements Message ----------------------------------------------

  GL_DesignerConfigInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_DesignerConfigInfo& from);
  void MergeFrom(const GL_DesignerConfigInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool EnableSnap = 1;
  inline bool has_enablesnap() const;
  inline void clear_enablesnap();
  static const int kEnableSnapFieldNumber = 1;
  inline bool enablesnap() const;
  inline void set_enablesnap(bool value);

  // optional bool AllPole = 2;
  inline bool has_allpole() const;
  inline void clear_allpole();
  static const int kAllPoleFieldNumber = 2;
  inline bool allpole() const;
  inline void set_allpole(bool value);

  // optional bool CrossPole = 3;
  inline bool has_crosspole() const;
  inline void clear_crosspole();
  static const int kCrossPoleFieldNumber = 3;
  inline bool crosspole() const;
  inline void set_crosspole(bool value);

  // optional bool WallPole = 4;
  inline bool has_wallpole() const;
  inline void clear_wallpole();
  static const int kWallPoleFieldNumber = 4;
  inline bool wallpole() const;
  inline void set_wallpole(bool value);

  // optional bool HotspotCapture = 5;
  inline bool has_hotspotcapture() const;
  inline void clear_hotspotcapture();
  static const int kHotspotCaptureFieldNumber = 5;
  inline bool hotspotcapture() const;
  inline void set_hotspotcapture(bool value);

  // optional bool GridShow = 6;
  inline bool has_gridshow() const;
  inline void clear_gridshow();
  static const int kGridShowFieldNumber = 6;
  inline bool gridshow() const;
  inline void set_gridshow(bool value);

  // optional int32 AngleStep = 7;
  inline bool has_anglestep() const;
  inline void clear_anglestep();
  static const int kAngleStepFieldNumber = 7;
  inline ::google::protobuf::int32 anglestep() const;
  inline void set_anglestep(::google::protobuf::int32 value);

  // optional int32 TargetRange = 8;
  inline bool has_targetrange() const;
  inline void clear_targetrange();
  static const int kTargetRangeFieldNumber = 8;
  inline ::google::protobuf::int32 targetrange() const;
  inline void set_targetrange(::google::protobuf::int32 value);

  // optional int32 DesignBGID = 9;
  inline bool has_designbgid() const;
  inline void clear_designbgid();
  static const int kDesignBGIDFieldNumber = 9;
  inline ::google::protobuf::int32 designbgid() const;
  inline void set_designbgid(::google::protobuf::int32 value);

  // optional int32 PrintBGID = 10;
  inline bool has_printbgid() const;
  inline void clear_printbgid();
  static const int kPrintBGIDFieldNumber = 10;
  inline ::google::protobuf::int32 printbgid() const;
  inline void set_printbgid(::google::protobuf::int32 value);

  // optional int32 GridBigID = 11;
  inline bool has_gridbigid() const;
  inline void clear_gridbigid();
  static const int kGridBigIDFieldNumber = 11;
  inline ::google::protobuf::int32 gridbigid() const;
  inline void set_gridbigid(::google::protobuf::int32 value);

  // optional int32 GridSmallID = 12;
  inline bool has_gridsmallid() const;
  inline void clear_gridsmallid();
  static const int kGridSmallIDFieldNumber = 12;
  inline ::google::protobuf::int32 gridsmallid() const;
  inline void set_gridsmallid(::google::protobuf::int32 value);

  // optional int32 HotspotRotateID = 13;
  inline bool has_hotspotrotateid() const;
  inline void clear_hotspotrotateid();
  static const int kHotspotRotateIDFieldNumber = 13;
  inline ::google::protobuf::int32 hotspotrotateid() const;
  inline void set_hotspotrotateid(::google::protobuf::int32 value);

  // optional int32 HotspotNormalID = 14;
  inline bool has_hotspotnormalid() const;
  inline void clear_hotspotnormalid();
  static const int kHotspotNormalIDFieldNumber = 14;
  inline ::google::protobuf::int32 hotspotnormalid() const;
  inline void set_hotspotnormalid(::google::protobuf::int32 value);

  // optional int32 HotspotSelectID = 15;
  inline bool has_hotspotselectid() const;
  inline void clear_hotspotselectid();
  static const int kHotspotSelectIDFieldNumber = 15;
  inline ::google::protobuf::int32 hotspotselectid() const;
  inline void set_hotspotselectid(::google::protobuf::int32 value);

  // optional int32 CreatePointID = 16;
  inline bool has_createpointid() const;
  inline void clear_createpointid();
  static const int kCreatePointIDFieldNumber = 16;
  inline ::google::protobuf::int32 createpointid() const;
  inline void set_createpointid(::google::protobuf::int32 value);

  // optional int64 DesignBGColor = 17;
  inline bool has_designbgcolor() const;
  inline void clear_designbgcolor();
  static const int kDesignBGColorFieldNumber = 17;
  inline ::google::protobuf::int64 designbgcolor() const;
  inline void set_designbgcolor(::google::protobuf::int64 value);

  // optional int64 PrintBGColor = 18;
  inline bool has_printbgcolor() const;
  inline void clear_printbgcolor();
  static const int kPrintBGColorFieldNumber = 18;
  inline ::google::protobuf::int64 printbgcolor() const;
  inline void set_printbgcolor(::google::protobuf::int64 value);

  // optional int64 GridBigColor = 19;
  inline bool has_gridbigcolor() const;
  inline void clear_gridbigcolor();
  static const int kGridBigColorFieldNumber = 19;
  inline ::google::protobuf::int64 gridbigcolor() const;
  inline void set_gridbigcolor(::google::protobuf::int64 value);

  // optional int64 GridSmallColor = 20;
  inline bool has_gridsmallcolor() const;
  inline void clear_gridsmallcolor();
  static const int kGridSmallColorFieldNumber = 20;
  inline ::google::protobuf::int64 gridsmallcolor() const;
  inline void set_gridsmallcolor(::google::protobuf::int64 value);

  // optional int64 HotspotRotateColor = 21;
  inline bool has_hotspotrotatecolor() const;
  inline void clear_hotspotrotatecolor();
  static const int kHotspotRotateColorFieldNumber = 21;
  inline ::google::protobuf::int64 hotspotrotatecolor() const;
  inline void set_hotspotrotatecolor(::google::protobuf::int64 value);

  // optional int64 HotspotNormalColor = 22;
  inline bool has_hotspotnormalcolor() const;
  inline void clear_hotspotnormalcolor();
  static const int kHotspotNormalColorFieldNumber = 22;
  inline ::google::protobuf::int64 hotspotnormalcolor() const;
  inline void set_hotspotnormalcolor(::google::protobuf::int64 value);

  // optional int64 HotspotSelectColor = 23;
  inline bool has_hotspotselectcolor() const;
  inline void clear_hotspotselectcolor();
  static const int kHotspotSelectColorFieldNumber = 23;
  inline ::google::protobuf::int64 hotspotselectcolor() const;
  inline void set_hotspotselectcolor(::google::protobuf::int64 value);

  // optional int64 CreatePointColor = 24;
  inline bool has_createpointcolor() const;
  inline void clear_createpointcolor();
  static const int kCreatePointColorFieldNumber = 24;
  inline ::google::protobuf::int64 createpointcolor() const;
  inline void set_createpointcolor(::google::protobuf::int64 value);

  // optional int32 UserID = 25;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 25;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional double WallThickness = 26;
  inline bool has_wallthickness() const;
  inline void clear_wallthickness();
  static const int kWallThicknessFieldNumber = 26;
  inline double wallthickness() const;
  inline void set_wallthickness(double value);

  // optional double WallHeight = 27;
  inline bool has_wallheight() const;
  inline void clear_wallheight();
  static const int kWallHeightFieldNumber = 27;
  inline double wallheight() const;
  inline void set_wallheight(double value);

  // optional double BaseLineLen = 28;
  inline bool has_baselinelen() const;
  inline void clear_baselinelen();
  static const int kBaseLineLenFieldNumber = 28;
  inline double baselinelen() const;
  inline void set_baselinelen(double value);

  // optional double GridWidth = 29;
  inline bool has_gridwidth() const;
  inline void clear_gridwidth();
  static const int kGridWidthFieldNumber = 29;
  inline double gridwidth() const;
  inline void set_gridwidth(double value);

  // optional double SnapRange = 30;
  inline bool has_snaprange() const;
  inline void clear_snaprange();
  static const int kSnapRangeFieldNumber = 30;
  inline double snaprange() const;
  inline void set_snaprange(double value);

  // optional double SkirtLineOffsetLen = 31;
  inline bool has_skirtlineoffsetlen() const;
  inline void clear_skirtlineoffsetlen();
  static const int kSkirtLineOffsetLenFieldNumber = 31;
  inline double skirtlineoffsetlen() const;
  inline void set_skirtlineoffsetlen(double value);

  // optional double BottomLineOffsetLen = 32;
  inline bool has_bottomlineoffsetlen() const;
  inline void clear_bottomlineoffsetlen();
  static const int kBottomLineOffsetLenFieldNumber = 32;
  inline double bottomlineoffsetlen() const;
  inline void set_bottomlineoffsetlen(double value);

  // optional double TopLineOffsetLen = 33;
  inline bool has_toplineoffsetlen() const;
  inline void clear_toplineoffsetlen();
  static const int kTopLineOffsetLenFieldNumber = 33;
  inline double toplineoffsetlen() const;
  inline void set_toplineoffsetlen(double value);

  // @@protoc_insertion_point(class_scope:transMsg.GL_DesignerConfigInfo)
 private:
  inline void set_has_enablesnap();
  inline void clear_has_enablesnap();
  inline void set_has_allpole();
  inline void clear_has_allpole();
  inline void set_has_crosspole();
  inline void clear_has_crosspole();
  inline void set_has_wallpole();
  inline void clear_has_wallpole();
  inline void set_has_hotspotcapture();
  inline void clear_has_hotspotcapture();
  inline void set_has_gridshow();
  inline void clear_has_gridshow();
  inline void set_has_anglestep();
  inline void clear_has_anglestep();
  inline void set_has_targetrange();
  inline void clear_has_targetrange();
  inline void set_has_designbgid();
  inline void clear_has_designbgid();
  inline void set_has_printbgid();
  inline void clear_has_printbgid();
  inline void set_has_gridbigid();
  inline void clear_has_gridbigid();
  inline void set_has_gridsmallid();
  inline void clear_has_gridsmallid();
  inline void set_has_hotspotrotateid();
  inline void clear_has_hotspotrotateid();
  inline void set_has_hotspotnormalid();
  inline void clear_has_hotspotnormalid();
  inline void set_has_hotspotselectid();
  inline void clear_has_hotspotselectid();
  inline void set_has_createpointid();
  inline void clear_has_createpointid();
  inline void set_has_designbgcolor();
  inline void clear_has_designbgcolor();
  inline void set_has_printbgcolor();
  inline void clear_has_printbgcolor();
  inline void set_has_gridbigcolor();
  inline void clear_has_gridbigcolor();
  inline void set_has_gridsmallcolor();
  inline void clear_has_gridsmallcolor();
  inline void set_has_hotspotrotatecolor();
  inline void clear_has_hotspotrotatecolor();
  inline void set_has_hotspotnormalcolor();
  inline void clear_has_hotspotnormalcolor();
  inline void set_has_hotspotselectcolor();
  inline void clear_has_hotspotselectcolor();
  inline void set_has_createpointcolor();
  inline void clear_has_createpointcolor();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_wallthickness();
  inline void clear_has_wallthickness();
  inline void set_has_wallheight();
  inline void clear_has_wallheight();
  inline void set_has_baselinelen();
  inline void clear_has_baselinelen();
  inline void set_has_gridwidth();
  inline void clear_has_gridwidth();
  inline void set_has_snaprange();
  inline void clear_has_snaprange();
  inline void set_has_skirtlineoffsetlen();
  inline void clear_has_skirtlineoffsetlen();
  inline void set_has_bottomlineoffsetlen();
  inline void clear_has_bottomlineoffsetlen();
  inline void set_has_toplineoffsetlen();
  inline void clear_has_toplineoffsetlen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool enablesnap_;
  bool allpole_;
  bool crosspole_;
  bool wallpole_;
  bool hotspotcapture_;
  bool gridshow_;
  ::google::protobuf::int32 anglestep_;
  ::google::protobuf::int32 targetrange_;
  ::google::protobuf::int32 designbgid_;
  ::google::protobuf::int32 printbgid_;
  ::google::protobuf::int32 gridbigid_;
  ::google::protobuf::int32 gridsmallid_;
  ::google::protobuf::int32 hotspotrotateid_;
  ::google::protobuf::int32 hotspotnormalid_;
  ::google::protobuf::int32 hotspotselectid_;
  ::google::protobuf::int32 createpointid_;
  ::google::protobuf::int64 designbgcolor_;
  ::google::protobuf::int64 printbgcolor_;
  ::google::protobuf::int64 gridbigcolor_;
  ::google::protobuf::int64 gridsmallcolor_;
  ::google::protobuf::int64 hotspotrotatecolor_;
  ::google::protobuf::int64 hotspotnormalcolor_;
  ::google::protobuf::int64 hotspotselectcolor_;
  ::google::protobuf::int64 createpointcolor_;
  double wallthickness_;
  double wallheight_;
  double baselinelen_;
  double gridwidth_;
  double snaprange_;
  double skirtlineoffsetlen_;
  double bottomlineoffsetlen_;
  double toplineoffsetlen_;
  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(33 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_DesignerConfigInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_GTypeInfo : public ::google::protobuf::Message {
 public:
  GL_GTypeInfo();
  virtual ~GL_GTypeInfo();

  GL_GTypeInfo(const GL_GTypeInfo& from);

  inline GL_GTypeInfo& operator=(const GL_GTypeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_GTypeInfo& default_instance();

  void Swap(GL_GTypeInfo* other);

  // implements Message ----------------------------------------------

  GL_GTypeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_GTypeInfo& from);
  void MergeFrom(const GL_GTypeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 GTypeID = 1;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 1;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // optional string GTypeName = 2;
  inline bool has_gtypename() const;
  inline void clear_gtypename();
  static const int kGTypeNameFieldNumber = 2;
  inline const ::std::string& gtypename() const;
  inline void set_gtypename(const ::std::string& value);
  inline void set_gtypename(const char* value);
  inline void set_gtypename(const char* value, size_t size);
  inline ::std::string* mutable_gtypename();
  inline ::std::string* release_gtypename();
  inline void set_allocated_gtypename(::std::string* gtypename);

  // @@protoc_insertion_point(class_scope:transMsg.GL_GTypeInfo)
 private:
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_gtypename();
  inline void clear_has_gtypename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gtypename_;
  ::google::protobuf::int32 gtypeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_GTypeInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_GeoCodeInfo : public ::google::protobuf::Message {
 public:
  GL_GeoCodeInfo();
  virtual ~GL_GeoCodeInfo();

  GL_GeoCodeInfo(const GL_GeoCodeInfo& from);

  inline GL_GeoCodeInfo& operator=(const GL_GeoCodeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_GeoCodeInfo& default_instance();

  void Swap(GL_GeoCodeInfo* other);

  // implements Message ----------------------------------------------

  GL_GeoCodeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_GeoCodeInfo& from);
  void MergeFrom(const GL_GeoCodeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GeoCode = 1;
  inline bool has_geocode() const;
  inline void clear_geocode();
  static const int kGeoCodeFieldNumber = 1;
  inline const ::std::string& geocode() const;
  inline void set_geocode(const ::std::string& value);
  inline void set_geocode(const char* value);
  inline void set_geocode(const char* value, size_t size);
  inline ::std::string* mutable_geocode();
  inline ::std::string* release_geocode();
  inline void set_allocated_geocode(::std::string* geocode);

  // optional string GeoName = 2;
  inline bool has_geoname() const;
  inline void clear_geoname();
  static const int kGeoNameFieldNumber = 2;
  inline const ::std::string& geoname() const;
  inline void set_geoname(const ::std::string& value);
  inline void set_geoname(const char* value);
  inline void set_geoname(const char* value, size_t size);
  inline ::std::string* mutable_geoname();
  inline ::std::string* release_geoname();
  inline void set_allocated_geoname(::std::string* geoname);

  // @@protoc_insertion_point(class_scope:transMsg.GL_GeoCodeInfo)
 private:
  inline void set_has_geocode();
  inline void clear_has_geocode();
  inline void set_has_geoname();
  inline void clear_has_geoname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* geocode_;
  ::std::string* geoname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_GeoCodeInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_MajorCateInfo : public ::google::protobuf::Message {
 public:
  GL_MajorCateInfo();
  virtual ~GL_MajorCateInfo();

  GL_MajorCateInfo(const GL_MajorCateInfo& from);

  inline GL_MajorCateInfo& operator=(const GL_MajorCateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_MajorCateInfo& default_instance();

  void Swap(GL_MajorCateInfo* other);

  // implements Message ----------------------------------------------

  GL_MajorCateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_MajorCateInfo& from);
  void MergeFrom(const GL_MajorCateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MajorCateID = 1;
  inline bool has_majorcateid() const;
  inline void clear_majorcateid();
  static const int kMajorCateIDFieldNumber = 1;
  inline ::google::protobuf::int32 majorcateid() const;
  inline void set_majorcateid(::google::protobuf::int32 value);

  // optional string MajorCateName = 2;
  inline bool has_majorcatename() const;
  inline void clear_majorcatename();
  static const int kMajorCateNameFieldNumber = 2;
  inline const ::std::string& majorcatename() const;
  inline void set_majorcatename(const ::std::string& value);
  inline void set_majorcatename(const char* value);
  inline void set_majorcatename(const char* value, size_t size);
  inline ::std::string* mutable_majorcatename();
  inline ::std::string* release_majorcatename();
  inline void set_allocated_majorcatename(::std::string* majorcatename);

  // @@protoc_insertion_point(class_scope:transMsg.GL_MajorCateInfo)
 private:
  inline void set_has_majorcateid();
  inline void clear_has_majorcateid();
  inline void set_has_majorcatename();
  inline void clear_has_majorcatename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* majorcatename_;
  ::google::protobuf::int32 majorcateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_MajorCateInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_MinorCateInfo : public ::google::protobuf::Message {
 public:
  GL_MinorCateInfo();
  virtual ~GL_MinorCateInfo();

  GL_MinorCateInfo(const GL_MinorCateInfo& from);

  inline GL_MinorCateInfo& operator=(const GL_MinorCateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_MinorCateInfo& default_instance();

  void Swap(GL_MinorCateInfo* other);

  // implements Message ----------------------------------------------

  GL_MinorCateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_MinorCateInfo& from);
  void MergeFrom(const GL_MinorCateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MajorCateID = 1;
  inline bool has_majorcateid() const;
  inline void clear_majorcateid();
  static const int kMajorCateIDFieldNumber = 1;
  inline ::google::protobuf::int32 majorcateid() const;
  inline void set_majorcateid(::google::protobuf::int32 value);

  // optional int32 MinorCateID = 2;
  inline bool has_minorcateid() const;
  inline void clear_minorcateid();
  static const int kMinorCateIDFieldNumber = 2;
  inline ::google::protobuf::int32 minorcateid() const;
  inline void set_minorcateid(::google::protobuf::int32 value);

  // optional string MinorCateName = 3;
  inline bool has_minorcatename() const;
  inline void clear_minorcatename();
  static const int kMinorCateNameFieldNumber = 3;
  inline const ::std::string& minorcatename() const;
  inline void set_minorcatename(const ::std::string& value);
  inline void set_minorcatename(const char* value);
  inline void set_minorcatename(const char* value, size_t size);
  inline ::std::string* mutable_minorcatename();
  inline ::std::string* release_minorcatename();
  inline void set_allocated_minorcatename(::std::string* minorcatename);

  // @@protoc_insertion_point(class_scope:transMsg.GL_MinorCateInfo)
 private:
  inline void set_has_majorcateid();
  inline void clear_has_majorcateid();
  inline void set_has_minorcateid();
  inline void clear_has_minorcateid();
  inline void set_has_minorcatename();
  inline void clear_has_minorcatename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 majorcateid_;
  ::google::protobuf::int32 minorcateid_;
  ::std::string* minorcatename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_MinorCateInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_MinorGTypeMapInfo : public ::google::protobuf::Message {
 public:
  GL_MinorGTypeMapInfo();
  virtual ~GL_MinorGTypeMapInfo();

  GL_MinorGTypeMapInfo(const GL_MinorGTypeMapInfo& from);

  inline GL_MinorGTypeMapInfo& operator=(const GL_MinorGTypeMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_MinorGTypeMapInfo& default_instance();

  void Swap(GL_MinorGTypeMapInfo* other);

  // implements Message ----------------------------------------------

  GL_MinorGTypeMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_MinorGTypeMapInfo& from);
  void MergeFrom(const GL_MinorGTypeMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MajorCateID = 1;
  inline bool has_majorcateid() const;
  inline void clear_majorcateid();
  static const int kMajorCateIDFieldNumber = 1;
  inline ::google::protobuf::int32 majorcateid() const;
  inline void set_majorcateid(::google::protobuf::int32 value);

  // optional int32 MinorCateID = 2;
  inline bool has_minorcateid() const;
  inline void clear_minorcateid();
  static const int kMinorCateIDFieldNumber = 2;
  inline ::google::protobuf::int32 minorcateid() const;
  inline void set_minorcateid(::google::protobuf::int32 value);

  // optional int32 CreateType = 3;
  inline bool has_createtype() const;
  inline void clear_createtype();
  static const int kCreateTypeFieldNumber = 3;
  inline ::google::protobuf::int32 createtype() const;
  inline void set_createtype(::google::protobuf::int32 value);

  // optional int32 GTypeID = 4;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 4;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.GL_MinorGTypeMapInfo)
 private:
  inline void set_has_majorcateid();
  inline void clear_has_majorcateid();
  inline void set_has_minorcateid();
  inline void clear_has_minorcateid();
  inline void set_has_createtype();
  inline void clear_has_createtype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 majorcateid_;
  ::google::protobuf::int32 minorcateid_;
  ::google::protobuf::int32 createtype_;
  ::google::protobuf::int32 gtypeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_MinorGTypeMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_OrderInfo : public ::google::protobuf::Message {
 public:
  GL_OrderInfo();
  virtual ~GL_OrderInfo();

  GL_OrderInfo(const GL_OrderInfo& from);

  inline GL_OrderInfo& operator=(const GL_OrderInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_OrderInfo& default_instance();

  void Swap(GL_OrderInfo* other);

  // implements Message ----------------------------------------------

  GL_OrderInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_OrderInfo& from);
  void MergeFrom(const GL_OrderInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 OrderID = 1;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 1;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // optional int64 ClientOrderID = 2;
  inline bool has_clientorderid() const;
  inline void clear_clientorderid();
  static const int kClientOrderIDFieldNumber = 2;
  inline ::google::protobuf::int64 clientorderid() const;
  inline void set_clientorderid(::google::protobuf::int64 value);

  // optional int32 OrderIndex = 3;
  inline bool has_orderindex() const;
  inline void clear_orderindex();
  static const int kOrderIndexFieldNumber = 3;
  inline ::google::protobuf::int32 orderindex() const;
  inline void set_orderindex(::google::protobuf::int32 value);

  // optional int32 OrderType = 4;
  inline bool has_ordertype() const;
  inline void clear_ordertype();
  static const int kOrderTypeFieldNumber = 4;
  inline ::google::protobuf::int32 ordertype() const;
  inline void set_ordertype(::google::protobuf::int32 value);

  // optional int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // optional int32 ShopID = 6;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 6;
  inline ::google::protobuf::int32 shopid() const;
  inline void set_shopid(::google::protobuf::int32 value);

  // optional int32 OrderStatus = 7;
  inline bool has_orderstatus() const;
  inline void clear_orderstatus();
  static const int kOrderStatusFieldNumber = 7;
  inline ::google::protobuf::int32 orderstatus() const;
  inline void set_orderstatus(::google::protobuf::int32 value);

  // optional bool IsDel = 8;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 8;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // optional int32 DesignerID = 9;
  inline bool has_designerid() const;
  inline void clear_designerid();
  static const int kDesignerIDFieldNumber = 9;
  inline ::google::protobuf::int32 designerid() const;
  inline void set_designerid(::google::protobuf::int32 value);

  // optional int32 ShopAuditorID = 10;
  inline bool has_shopauditorid() const;
  inline void clear_shopauditorid();
  static const int kShopAuditorIDFieldNumber = 10;
  inline ::google::protobuf::int32 shopauditorid() const;
  inline void set_shopauditorid(::google::protobuf::int32 value);

  // optional int32 ShopCommitorID = 11;
  inline bool has_shopcommitorid() const;
  inline void clear_shopcommitorid();
  static const int kShopCommitorIDFieldNumber = 11;
  inline ::google::protobuf::int32 shopcommitorid() const;
  inline void set_shopcommitorid(::google::protobuf::int32 value);

  // optional int32 FactoryGraphAuditorID = 12;
  inline bool has_factorygraphauditorid() const;
  inline void clear_factorygraphauditorid();
  static const int kFactoryGraphAuditorIDFieldNumber = 12;
  inline ::google::protobuf::int32 factorygraphauditorid() const;
  inline void set_factorygraphauditorid(::google::protobuf::int32 value);

  // optional int32 FactoryListAuditorID = 13;
  inline bool has_factorylistauditorid() const;
  inline void clear_factorylistauditorid();
  static const int kFactoryListAuditorIDFieldNumber = 13;
  inline ::google::protobuf::int32 factorylistauditorid() const;
  inline void set_factorylistauditorid(::google::protobuf::int32 value);

  // optional int32 FactoryFinanceAuditorID = 14;
  inline bool has_factoryfinanceauditorid() const;
  inline void clear_factoryfinanceauditorid();
  static const int kFactoryFinanceAuditorIDFieldNumber = 14;
  inline ::google::protobuf::int32 factoryfinanceauditorid() const;
  inline void set_factoryfinanceauditorid(::google::protobuf::int32 value);

  // optional int64 ShopAuditTime = 15;
  inline bool has_shopaudittime() const;
  inline void clear_shopaudittime();
  static const int kShopAuditTimeFieldNumber = 15;
  inline ::google::protobuf::int64 shopaudittime() const;
  inline void set_shopaudittime(::google::protobuf::int64 value);

  // optional int64 ShopCommitTime = 16;
  inline bool has_shopcommittime() const;
  inline void clear_shopcommittime();
  static const int kShopCommitTimeFieldNumber = 16;
  inline ::google::protobuf::int64 shopcommittime() const;
  inline void set_shopcommittime(::google::protobuf::int64 value);

  // optional int64 GraphAuditTime = 17;
  inline bool has_graphaudittime() const;
  inline void clear_graphaudittime();
  static const int kGraphAuditTimeFieldNumber = 17;
  inline ::google::protobuf::int64 graphaudittime() const;
  inline void set_graphaudittime(::google::protobuf::int64 value);

  // optional int64 ListAuditTime = 18;
  inline bool has_listaudittime() const;
  inline void clear_listaudittime();
  static const int kListAuditTimeFieldNumber = 18;
  inline ::google::protobuf::int64 listaudittime() const;
  inline void set_listaudittime(::google::protobuf::int64 value);

  // optional int64 FinanceAuditTime = 19;
  inline bool has_financeaudittime() const;
  inline void clear_financeaudittime();
  static const int kFinanceAuditTimeFieldNumber = 19;
  inline ::google::protobuf::int64 financeaudittime() const;
  inline void set_financeaudittime(::google::protobuf::int64 value);

  // optional string OrderCode = 20;
  inline bool has_ordercode() const;
  inline void clear_ordercode();
  static const int kOrderCodeFieldNumber = 20;
  inline const ::std::string& ordercode() const;
  inline void set_ordercode(const ::std::string& value);
  inline void set_ordercode(const char* value);
  inline void set_ordercode(const char* value, size_t size);
  inline ::std::string* mutable_ordercode();
  inline ::std::string* release_ordercode();
  inline void set_allocated_ordercode(::std::string* ordercode);

  // optional string ShopAuditContent = 21;
  inline bool has_shopauditcontent() const;
  inline void clear_shopauditcontent();
  static const int kShopAuditContentFieldNumber = 21;
  inline const ::std::string& shopauditcontent() const;
  inline void set_shopauditcontent(const ::std::string& value);
  inline void set_shopauditcontent(const char* value);
  inline void set_shopauditcontent(const char* value, size_t size);
  inline ::std::string* mutable_shopauditcontent();
  inline ::std::string* release_shopauditcontent();
  inline void set_allocated_shopauditcontent(::std::string* shopauditcontent);

  // optional string ShopCommitContent = 22;
  inline bool has_shopcommitcontent() const;
  inline void clear_shopcommitcontent();
  static const int kShopCommitContentFieldNumber = 22;
  inline const ::std::string& shopcommitcontent() const;
  inline void set_shopcommitcontent(const ::std::string& value);
  inline void set_shopcommitcontent(const char* value);
  inline void set_shopcommitcontent(const char* value, size_t size);
  inline ::std::string* mutable_shopcommitcontent();
  inline ::std::string* release_shopcommitcontent();
  inline void set_allocated_shopcommitcontent(::std::string* shopcommitcontent);

  // optional string GraphAuditContent = 23;
  inline bool has_graphauditcontent() const;
  inline void clear_graphauditcontent();
  static const int kGraphAuditContentFieldNumber = 23;
  inline const ::std::string& graphauditcontent() const;
  inline void set_graphauditcontent(const ::std::string& value);
  inline void set_graphauditcontent(const char* value);
  inline void set_graphauditcontent(const char* value, size_t size);
  inline ::std::string* mutable_graphauditcontent();
  inline ::std::string* release_graphauditcontent();
  inline void set_allocated_graphauditcontent(::std::string* graphauditcontent);

  // optional string ListAuditContent = 24;
  inline bool has_listauditcontent() const;
  inline void clear_listauditcontent();
  static const int kListAuditContentFieldNumber = 24;
  inline const ::std::string& listauditcontent() const;
  inline void set_listauditcontent(const ::std::string& value);
  inline void set_listauditcontent(const char* value);
  inline void set_listauditcontent(const char* value, size_t size);
  inline ::std::string* mutable_listauditcontent();
  inline ::std::string* release_listauditcontent();
  inline void set_allocated_listauditcontent(::std::string* listauditcontent);

  // optional string FinanceAuditContent = 25;
  inline bool has_financeauditcontent() const;
  inline void clear_financeauditcontent();
  static const int kFinanceAuditContentFieldNumber = 25;
  inline const ::std::string& financeauditcontent() const;
  inline void set_financeauditcontent(const ::std::string& value);
  inline void set_financeauditcontent(const char* value);
  inline void set_financeauditcontent(const char* value, size_t size);
  inline ::std::string* mutable_financeauditcontent();
  inline ::std::string* release_financeauditcontent();
  inline void set_allocated_financeauditcontent(::std::string* financeauditcontent);

  // @@protoc_insertion_point(class_scope:transMsg.GL_OrderInfo)
 private:
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_clientorderid();
  inline void clear_has_clientorderid();
  inline void set_has_orderindex();
  inline void clear_has_orderindex();
  inline void set_has_ordertype();
  inline void clear_has_ordertype();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_shopid();
  inline void clear_has_shopid();
  inline void set_has_orderstatus();
  inline void clear_has_orderstatus();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_designerid();
  inline void clear_has_designerid();
  inline void set_has_shopauditorid();
  inline void clear_has_shopauditorid();
  inline void set_has_shopcommitorid();
  inline void clear_has_shopcommitorid();
  inline void set_has_factorygraphauditorid();
  inline void clear_has_factorygraphauditorid();
  inline void set_has_factorylistauditorid();
  inline void clear_has_factorylistauditorid();
  inline void set_has_factoryfinanceauditorid();
  inline void clear_has_factoryfinanceauditorid();
  inline void set_has_shopaudittime();
  inline void clear_has_shopaudittime();
  inline void set_has_shopcommittime();
  inline void clear_has_shopcommittime();
  inline void set_has_graphaudittime();
  inline void clear_has_graphaudittime();
  inline void set_has_listaudittime();
  inline void clear_has_listaudittime();
  inline void set_has_financeaudittime();
  inline void clear_has_financeaudittime();
  inline void set_has_ordercode();
  inline void clear_has_ordercode();
  inline void set_has_shopauditcontent();
  inline void clear_has_shopauditcontent();
  inline void set_has_shopcommitcontent();
  inline void clear_has_shopcommitcontent();
  inline void set_has_graphauditcontent();
  inline void clear_has_graphauditcontent();
  inline void set_has_listauditcontent();
  inline void clear_has_listauditcontent();
  inline void set_has_financeauditcontent();
  inline void clear_has_financeauditcontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int64 clientorderid_;
  ::google::protobuf::int32 orderindex_;
  ::google::protobuf::int32 ordertype_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 shopid_;
  ::google::protobuf::int32 orderstatus_;
  bool isdel_;
  ::google::protobuf::int32 designerid_;
  ::google::protobuf::int32 shopauditorid_;
  ::google::protobuf::int32 shopcommitorid_;
  ::google::protobuf::int32 factorygraphauditorid_;
  ::google::protobuf::int32 factorylistauditorid_;
  ::google::protobuf::int32 factoryfinanceauditorid_;
  ::google::protobuf::int64 shopaudittime_;
  ::google::protobuf::int64 shopcommittime_;
  ::google::protobuf::int64 graphaudittime_;
  ::google::protobuf::int64 listaudittime_;
  ::google::protobuf::int64 financeaudittime_;
  ::std::string* ordercode_;
  ::std::string* shopauditcontent_;
  ::std::string* shopcommitcontent_;
  ::std::string* graphauditcontent_;
  ::std::string* listauditcontent_;
  ::std::string* financeauditcontent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_OrderInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_PinYin : public ::google::protobuf::Message {
 public:
  GL_PinYin();
  virtual ~GL_PinYin();

  GL_PinYin(const GL_PinYin& from);

  inline GL_PinYin& operator=(const GL_PinYin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_PinYin& default_instance();

  void Swap(GL_PinYin* other);

  // implements Message ----------------------------------------------

  GL_PinYin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_PinYin& from);
  void MergeFrom(const GL_PinYin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string PYCode = 1;
  inline bool has_pycode() const;
  inline void clear_pycode();
  static const int kPYCodeFieldNumber = 1;
  inline const ::std::string& pycode() const;
  inline void set_pycode(const ::std::string& value);
  inline void set_pycode(const char* value);
  inline void set_pycode(const char* value, size_t size);
  inline ::std::string* mutable_pycode();
  inline ::std::string* release_pycode();
  inline void set_allocated_pycode(::std::string* pycode);

  // optional string PYName = 2;
  inline bool has_pyname() const;
  inline void clear_pyname();
  static const int kPYNameFieldNumber = 2;
  inline const ::std::string& pyname() const;
  inline void set_pyname(const ::std::string& value);
  inline void set_pyname(const char* value);
  inline void set_pyname(const char* value, size_t size);
  inline ::std::string* mutable_pyname();
  inline ::std::string* release_pyname();
  inline void set_allocated_pyname(::std::string* pyname);

  // @@protoc_insertion_point(class_scope:transMsg.GL_PinYin)
 private:
  inline void set_has_pycode();
  inline void clear_has_pycode();
  inline void set_has_pyname();
  inline void clear_has_pyname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pycode_;
  ::std::string* pyname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_PinYin* default_instance_;
};
// -------------------------------------------------------------------

class GL_PrepaidCardInfo : public ::google::protobuf::Message {
 public:
  GL_PrepaidCardInfo();
  virtual ~GL_PrepaidCardInfo();

  GL_PrepaidCardInfo(const GL_PrepaidCardInfo& from);

  inline GL_PrepaidCardInfo& operator=(const GL_PrepaidCardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_PrepaidCardInfo& default_instance();

  void Swap(GL_PrepaidCardInfo* other);

  // implements Message ----------------------------------------------

  GL_PrepaidCardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_PrepaidCardInfo& from);
  void MergeFrom(const GL_PrepaidCardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CardID = 1;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardIDFieldNumber = 1;
  inline ::google::protobuf::int32 cardid() const;
  inline void set_cardid(::google::protobuf::int32 value);

  // optional int32 CardCategory = 2;
  inline bool has_cardcategory() const;
  inline void clear_cardcategory();
  static const int kCardCategoryFieldNumber = 2;
  inline ::google::protobuf::int32 cardcategory() const;
  inline void set_cardcategory(::google::protobuf::int32 value);

  // optional int32 CardType = 3;
  inline bool has_cardtype() const;
  inline void clear_cardtype();
  static const int kCardTypeFieldNumber = 3;
  inline ::google::protobuf::int32 cardtype() const;
  inline void set_cardtype(::google::protobuf::int32 value);

  // optional int32 Period = 4;
  inline bool has_period() const;
  inline void clear_period();
  static const int kPeriodFieldNumber = 4;
  inline ::google::protobuf::int32 period() const;
  inline void set_period(::google::protobuf::int32 value);

  // optional string SecureCode = 5;
  inline bool has_securecode() const;
  inline void clear_securecode();
  static const int kSecureCodeFieldNumber = 5;
  inline const ::std::string& securecode() const;
  inline void set_securecode(const ::std::string& value);
  inline void set_securecode(const char* value);
  inline void set_securecode(const char* value, size_t size);
  inline ::std::string* mutable_securecode();
  inline ::std::string* release_securecode();
  inline void set_allocated_securecode(::std::string* securecode);

  // optional string CardPwd = 6;
  inline bool has_cardpwd() const;
  inline void clear_cardpwd();
  static const int kCardPwdFieldNumber = 6;
  inline const ::std::string& cardpwd() const;
  inline void set_cardpwd(const ::std::string& value);
  inline void set_cardpwd(const char* value);
  inline void set_cardpwd(const char* value, size_t size);
  inline ::std::string* mutable_cardpwd();
  inline ::std::string* release_cardpwd();
  inline void set_allocated_cardpwd(::std::string* cardpwd);

  // optional string SerialNo = 7;
  inline bool has_serialno() const;
  inline void clear_serialno();
  static const int kSerialNoFieldNumber = 7;
  inline const ::std::string& serialno() const;
  inline void set_serialno(const ::std::string& value);
  inline void set_serialno(const char* value);
  inline void set_serialno(const char* value, size_t size);
  inline ::std::string* mutable_serialno();
  inline ::std::string* release_serialno();
  inline void set_allocated_serialno(::std::string* serialno);

  // optional string CardNo = 8;
  inline bool has_cardno() const;
  inline void clear_cardno();
  static const int kCardNoFieldNumber = 8;
  inline const ::std::string& cardno() const;
  inline void set_cardno(const ::std::string& value);
  inline void set_cardno(const char* value);
  inline void set_cardno(const char* value, size_t size);
  inline ::std::string* mutable_cardno();
  inline ::std::string* release_cardno();
  inline void set_allocated_cardno(::std::string* cardno);

  // @@protoc_insertion_point(class_scope:transMsg.GL_PrepaidCardInfo)
 private:
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_cardcategory();
  inline void clear_has_cardcategory();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();
  inline void set_has_period();
  inline void clear_has_period();
  inline void set_has_securecode();
  inline void clear_has_securecode();
  inline void set_has_cardpwd();
  inline void clear_has_cardpwd();
  inline void set_has_serialno();
  inline void clear_has_serialno();
  inline void set_has_cardno();
  inline void clear_has_cardno();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cardid_;
  ::google::protobuf::int32 cardcategory_;
  ::google::protobuf::int32 cardtype_;
  ::google::protobuf::int32 period_;
  ::std::string* securecode_;
  ::std::string* cardpwd_;
  ::std::string* serialno_;
  ::std::string* cardno_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_PrepaidCardInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_PrintTemplateInfo : public ::google::protobuf::Message {
 public:
  GL_PrintTemplateInfo();
  virtual ~GL_PrintTemplateInfo();

  GL_PrintTemplateInfo(const GL_PrintTemplateInfo& from);

  inline GL_PrintTemplateInfo& operator=(const GL_PrintTemplateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_PrintTemplateInfo& default_instance();

  void Swap(GL_PrintTemplateInfo* other);

  // implements Message ----------------------------------------------

  GL_PrintTemplateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_PrintTemplateInfo& from);
  void MergeFrom(const GL_PrintTemplateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TemplateID = 1;
  inline bool has_templateid() const;
  inline void clear_templateid();
  static const int kTemplateIDFieldNumber = 1;
  inline ::google::protobuf::int32 templateid() const;
  inline void set_templateid(::google::protobuf::int32 value);

  // optional int32 FactoryID = 2;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 2;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // optional bool IsActive = 3;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 3;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // optional string RelativePath = 4;
  inline bool has_relativepath() const;
  inline void clear_relativepath();
  static const int kRelativePathFieldNumber = 4;
  inline const ::std::string& relativepath() const;
  inline void set_relativepath(const ::std::string& value);
  inline void set_relativepath(const char* value);
  inline void set_relativepath(const char* value, size_t size);
  inline ::std::string* mutable_relativepath();
  inline ::std::string* release_relativepath();
  inline void set_allocated_relativepath(::std::string* relativepath);

  // optional string TemplateName = 5;
  inline bool has_templatename() const;
  inline void clear_templatename();
  static const int kTemplateNameFieldNumber = 5;
  inline const ::std::string& templatename() const;
  inline void set_templatename(const ::std::string& value);
  inline void set_templatename(const char* value);
  inline void set_templatename(const char* value, size_t size);
  inline ::std::string* mutable_templatename();
  inline ::std::string* release_templatename();
  inline void set_allocated_templatename(::std::string* templatename);

  // optional string TemplateMemo = 6;
  inline bool has_templatememo() const;
  inline void clear_templatememo();
  static const int kTemplateMemoFieldNumber = 6;
  inline const ::std::string& templatememo() const;
  inline void set_templatememo(const ::std::string& value);
  inline void set_templatememo(const char* value);
  inline void set_templatememo(const char* value, size_t size);
  inline ::std::string* mutable_templatememo();
  inline ::std::string* release_templatememo();
  inline void set_allocated_templatememo(::std::string* templatememo);

  // optional string HashCode = 7;
  inline bool has_hashcode() const;
  inline void clear_hashcode();
  static const int kHashCodeFieldNumber = 7;
  inline const ::std::string& hashcode() const;
  inline void set_hashcode(const ::std::string& value);
  inline void set_hashcode(const char* value);
  inline void set_hashcode(const char* value, size_t size);
  inline ::std::string* mutable_hashcode();
  inline ::std::string* release_hashcode();
  inline void set_allocated_hashcode(::std::string* hashcode);

  // @@protoc_insertion_point(class_scope:transMsg.GL_PrintTemplateInfo)
 private:
  inline void set_has_templateid();
  inline void clear_has_templateid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_relativepath();
  inline void clear_has_relativepath();
  inline void set_has_templatename();
  inline void clear_has_templatename();
  inline void set_has_templatememo();
  inline void clear_has_templatememo();
  inline void set_has_hashcode();
  inline void clear_has_hashcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 templateid_;
  ::google::protobuf::int32 factoryid_;
  ::std::string* relativepath_;
  ::std::string* templatename_;
  ::std::string* templatememo_;
  ::std::string* hashcode_;
  bool isactive_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_PrintTemplateInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_RoleInfo : public ::google::protobuf::Message {
 public:
  GL_RoleInfo();
  virtual ~GL_RoleInfo();

  GL_RoleInfo(const GL_RoleInfo& from);

  inline GL_RoleInfo& operator=(const GL_RoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_RoleInfo& default_instance();

  void Swap(GL_RoleInfo* other);

  // implements Message ----------------------------------------------

  GL_RoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_RoleInfo& from);
  void MergeFrom(const GL_RoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 RoleID = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 DeptID = 2;
  inline bool has_deptid() const;
  inline void clear_deptid();
  static const int kDeptIDFieldNumber = 2;
  inline ::google::protobuf::int32 deptid() const;
  inline void set_deptid(::google::protobuf::int32 value);

  // optional int32 DTypeID = 3;
  inline bool has_dtypeid() const;
  inline void clear_dtypeid();
  static const int kDTypeIDFieldNumber = 3;
  inline ::google::protobuf::int32 dtypeid() const;
  inline void set_dtypeid(::google::protobuf::int32 value);

  // optional int32 CreatorID = 4;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 4;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // optional int32 UpdaterID = 5;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 5;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // optional int64 CreateTime = 6;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 6;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int64 UpdateTime = 7;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 7;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // optional string RoleName = 8;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 8;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // @@protoc_insertion_point(class_scope:transMsg.GL_RoleInfo)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_deptid();
  inline void clear_has_deptid();
  inline void set_has_dtypeid();
  inline void clear_has_dtypeid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_rolename();
  inline void clear_has_rolename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 deptid_;
  ::google::protobuf::int32 dtypeid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* rolename_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_RoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_RoleRightInfo : public ::google::protobuf::Message {
 public:
  GL_RoleRightInfo();
  virtual ~GL_RoleRightInfo();

  GL_RoleRightInfo(const GL_RoleRightInfo& from);

  inline GL_RoleRightInfo& operator=(const GL_RoleRightInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_RoleRightInfo& default_instance();

  void Swap(GL_RoleRightInfo* other);

  // implements Message ----------------------------------------------

  GL_RoleRightInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_RoleRightInfo& from);
  void MergeFrom(const GL_RoleRightInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 RightID = 1;
  inline bool has_rightid() const;
  inline void clear_rightid();
  static const int kRightIDFieldNumber = 1;
  inline ::google::protobuf::int32 rightid() const;
  inline void set_rightid(::google::protobuf::int32 value);

  // optional int32 RightType = 2;
  inline bool has_righttype() const;
  inline void clear_righttype();
  static const int kRightTypeFieldNumber = 2;
  inline ::google::protobuf::int32 righttype() const;
  inline void set_righttype(::google::protobuf::int32 value);

  // optional int32 RoleID = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 3;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.GL_RoleRightInfo)
 private:
  inline void set_has_rightid();
  inline void clear_has_rightid();
  inline void set_has_righttype();
  inline void clear_has_righttype();
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rightid_;
  ::google::protobuf::int32 righttype_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_RoleRightInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_SugarVerInfo : public ::google::protobuf::Message {
 public:
  GL_SugarVerInfo();
  virtual ~GL_SugarVerInfo();

  GL_SugarVerInfo(const GL_SugarVerInfo& from);

  inline GL_SugarVerInfo& operator=(const GL_SugarVerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_SugarVerInfo& default_instance();

  void Swap(GL_SugarVerInfo* other);

  // implements Message ----------------------------------------------

  GL_SugarVerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_SugarVerInfo& from);
  void MergeFrom(const GL_SugarVerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 VerCode = 1;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 1;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // optional int32 DeptID = 2;
  inline bool has_deptid() const;
  inline void clear_deptid();
  static const int kDeptIDFieldNumber = 2;
  inline ::google::protobuf::int32 deptid() const;
  inline void set_deptid(::google::protobuf::int32 value);

  // optional int32 VerType = 3;
  inline bool has_vertype() const;
  inline void clear_vertype();
  static const int kVerTypeFieldNumber = 3;
  inline ::google::protobuf::int32 vertype() const;
  inline void set_vertype(::google::protobuf::int32 value);

  // optional int32 VerIndex = 4;
  inline bool has_verindex() const;
  inline void clear_verindex();
  static const int kVerIndexFieldNumber = 4;
  inline ::google::protobuf::int32 verindex() const;
  inline void set_verindex(::google::protobuf::int32 value);

  // optional int32 UploadStatus = 5;
  inline bool has_uploadstatus() const;
  inline void clear_uploadstatus();
  static const int kUploadStatusFieldNumber = 5;
  inline ::google::protobuf::int32 uploadstatus() const;
  inline void set_uploadstatus(::google::protobuf::int32 value);

  // optional int32 FileCount = 6;
  inline bool has_filecount() const;
  inline void clear_filecount();
  static const int kFileCountFieldNumber = 6;
  inline ::google::protobuf::int32 filecount() const;
  inline void set_filecount(::google::protobuf::int32 value);

  // optional int32 VerDBState = 7;
  inline bool has_verdbstate() const;
  inline void clear_verdbstate();
  static const int kVerDBStateFieldNumber = 7;
  inline ::google::protobuf::int32 verdbstate() const;
  inline void set_verdbstate(::google::protobuf::int32 value);

  // optional int32 CreatorID = 8;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 8;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // optional int64 StartTime = 9;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 9;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // optional int64 StopTime = 10;
  inline bool has_stoptime() const;
  inline void clear_stoptime();
  static const int kStopTimeFieldNumber = 10;
  inline ::google::protobuf::int64 stoptime() const;
  inline void set_stoptime(::google::protobuf::int64 value);

  // optional int64 CreateTime = 11;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 11;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional string VerMemo = 12;
  inline bool has_vermemo() const;
  inline void clear_vermemo();
  static const int kVerMemoFieldNumber = 12;
  inline const ::std::string& vermemo() const;
  inline void set_vermemo(const ::std::string& value);
  inline void set_vermemo(const char* value);
  inline void set_vermemo(const char* value, size_t size);
  inline ::std::string* mutable_vermemo();
  inline ::std::string* release_vermemo();
  inline void set_allocated_vermemo(::std::string* vermemo);

  // @@protoc_insertion_point(class_scope:transMsg.GL_SugarVerInfo)
 private:
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_deptid();
  inline void clear_has_deptid();
  inline void set_has_vertype();
  inline void clear_has_vertype();
  inline void set_has_verindex();
  inline void clear_has_verindex();
  inline void set_has_uploadstatus();
  inline void clear_has_uploadstatus();
  inline void set_has_filecount();
  inline void clear_has_filecount();
  inline void set_has_verdbstate();
  inline void clear_has_verdbstate();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_stoptime();
  inline void clear_has_stoptime();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_vermemo();
  inline void clear_has_vermemo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 deptid_;
  ::google::protobuf::int32 vertype_;
  ::google::protobuf::int32 verindex_;
  ::google::protobuf::int32 uploadstatus_;
  ::google::protobuf::int32 filecount_;
  ::google::protobuf::int32 verdbstate_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int64 stoptime_;
  ::google::protobuf::int64 createtime_;
  ::std::string* vermemo_;
  ::google::protobuf::int32 creatorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_SugarVerInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_TransferOrderInfo : public ::google::protobuf::Message {
 public:
  GL_TransferOrderInfo();
  virtual ~GL_TransferOrderInfo();

  GL_TransferOrderInfo(const GL_TransferOrderInfo& from);

  inline GL_TransferOrderInfo& operator=(const GL_TransferOrderInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_TransferOrderInfo& default_instance();

  void Swap(GL_TransferOrderInfo* other);

  // implements Message ----------------------------------------------

  GL_TransferOrderInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_TransferOrderInfo& from);
  void MergeFrom(const GL_TransferOrderInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 RecordID = 1;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIDFieldNumber = 1;
  inline ::google::protobuf::int64 recordid() const;
  inline void set_recordid(::google::protobuf::int64 value);

  // optional int32 TransferByUserID = 2;
  inline bool has_transferbyuserid() const;
  inline void clear_transferbyuserid();
  static const int kTransferByUserIDFieldNumber = 2;
  inline ::google::protobuf::int32 transferbyuserid() const;
  inline void set_transferbyuserid(::google::protobuf::int32 value);

  // optional int32 TransferToUserID = 3;
  inline bool has_transfertouserid() const;
  inline void clear_transfertouserid();
  static const int kTransferToUserIDFieldNumber = 3;
  inline ::google::protobuf::int32 transfertouserid() const;
  inline void set_transfertouserid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.GL_TransferOrderInfo)
 private:
  inline void set_has_recordid();
  inline void clear_has_recordid();
  inline void set_has_transferbyuserid();
  inline void clear_has_transferbyuserid();
  inline void set_has_transfertouserid();
  inline void clear_has_transfertouserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 recordid_;
  ::google::protobuf::int32 transferbyuserid_;
  ::google::protobuf::int32 transfertouserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_TransferOrderInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_UnitInfo : public ::google::protobuf::Message {
 public:
  GL_UnitInfo();
  virtual ~GL_UnitInfo();

  GL_UnitInfo(const GL_UnitInfo& from);

  inline GL_UnitInfo& operator=(const GL_UnitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_UnitInfo& default_instance();

  void Swap(GL_UnitInfo* other);

  // implements Message ----------------------------------------------

  GL_UnitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_UnitInfo& from);
  void MergeFrom(const GL_UnitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 UnitID = 1;
  inline bool has_unitid() const;
  inline void clear_unitid();
  static const int kUnitIDFieldNumber = 1;
  inline ::google::protobuf::int32 unitid() const;
  inline void set_unitid(::google::protobuf::int32 value);

  // optional int32 GTypeID = 2;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 2;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // optional string UnitName = 3;
  inline bool has_unitname() const;
  inline void clear_unitname();
  static const int kUnitNameFieldNumber = 3;
  inline const ::std::string& unitname() const;
  inline void set_unitname(const ::std::string& value);
  inline void set_unitname(const char* value);
  inline void set_unitname(const char* value, size_t size);
  inline ::std::string* mutable_unitname();
  inline ::std::string* release_unitname();
  inline void set_allocated_unitname(::std::string* unitname);

  // optional int32 CreatorID = 4;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 4;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // optional int32 UpdaterID = 5;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 5;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // optional int64 CreateTime = 6;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 6;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int64 UpdateTime = 7;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 7;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.GL_UnitInfo)
 private:
  inline void set_has_unitid();
  inline void clear_has_unitid();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_unitname();
  inline void clear_has_unitname();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 unitid_;
  ::google::protobuf::int32 gtypeid_;
  ::std::string* unitname_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_UnitInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_UserActivationInfo : public ::google::protobuf::Message {
 public:
  GL_UserActivationInfo();
  virtual ~GL_UserActivationInfo();

  GL_UserActivationInfo(const GL_UserActivationInfo& from);

  inline GL_UserActivationInfo& operator=(const GL_UserActivationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_UserActivationInfo& default_instance();

  void Swap(GL_UserActivationInfo* other);

  // implements Message ----------------------------------------------

  GL_UserActivationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_UserActivationInfo& from);
  void MergeFrom(const GL_UserActivationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 UserID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string ActivationCode = 2;
  inline bool has_activationcode() const;
  inline void clear_activationcode();
  static const int kActivationCodeFieldNumber = 2;
  inline const ::std::string& activationcode() const;
  inline void set_activationcode(const ::std::string& value);
  inline void set_activationcode(const char* value);
  inline void set_activationcode(const char* value, size_t size);
  inline ::std::string* mutable_activationcode();
  inline ::std::string* release_activationcode();
  inline void set_allocated_activationcode(::std::string* activationcode);

  // optional int32 TryCount = 3;
  inline bool has_trycount() const;
  inline void clear_trycount();
  static const int kTryCountFieldNumber = 3;
  inline ::google::protobuf::int32 trycount() const;
  inline void set_trycount(::google::protobuf::int32 value);

  // optional int64 LastTryTime = 4;
  inline bool has_lasttrytime() const;
  inline void clear_lasttrytime();
  static const int kLastTryTimeFieldNumber = 4;
  inline ::google::protobuf::int64 lasttrytime() const;
  inline void set_lasttrytime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.GL_UserActivationInfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_activationcode();
  inline void clear_has_activationcode();
  inline void set_has_trycount();
  inline void clear_has_trycount();
  inline void set_has_lasttrytime();
  inline void clear_has_lasttrytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* activationcode_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 trycount_;
  ::google::protobuf::int64 lasttrytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_UserActivationInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_UserInfo : public ::google::protobuf::Message {
 public:
  GL_UserInfo();
  virtual ~GL_UserInfo();

  GL_UserInfo(const GL_UserInfo& from);

  inline GL_UserInfo& operator=(const GL_UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_UserInfo& default_instance();

  void Swap(GL_UserInfo* other);

  // implements Message ----------------------------------------------

  GL_UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_UserInfo& from);
  void MergeFrom(const GL_UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 UserID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 FactoryID = 2;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 2;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // optional int32 ShopID = 3;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 3;
  inline ::google::protobuf::int32 shopid() const;
  inline void set_shopid(::google::protobuf::int32 value);

  // optional int32 DeptID = 4;
  inline bool has_deptid() const;
  inline void clear_deptid();
  static const int kDeptIDFieldNumber = 4;
  inline ::google::protobuf::int32 deptid() const;
  inline void set_deptid(::google::protobuf::int32 value);

  // optional bool IsDel = 5;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 5;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // optional int32 RoleID = 6;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 6;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 CreatorID = 7;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 7;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // optional int32 UpdaterID = 8;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 8;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // optional int64 CreateTime = 9;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 9;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int64 UpdateTime = 10;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 10;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // optional string UserPwd = 11;
  inline bool has_userpwd() const;
  inline void clear_userpwd();
  static const int kUserPwdFieldNumber = 11;
  inline const ::std::string& userpwd() const;
  inline void set_userpwd(const ::std::string& value);
  inline void set_userpwd(const char* value);
  inline void set_userpwd(const char* value, size_t size);
  inline ::std::string* mutable_userpwd();
  inline ::std::string* release_userpwd();
  inline void set_allocated_userpwd(::std::string* userpwd);

  // optional string UserCode = 12;
  inline bool has_usercode() const;
  inline void clear_usercode();
  static const int kUserCodeFieldNumber = 12;
  inline const ::std::string& usercode() const;
  inline void set_usercode(const ::std::string& value);
  inline void set_usercode(const char* value);
  inline void set_usercode(const char* value, size_t size);
  inline ::std::string* mutable_usercode();
  inline ::std::string* release_usercode();
  inline void set_allocated_usercode(::std::string* usercode);

  // optional string EncodeStr = 13;
  inline bool has_encodestr() const;
  inline void clear_encodestr();
  static const int kEncodeStrFieldNumber = 13;
  inline const ::std::string& encodestr() const;
  inline void set_encodestr(const ::std::string& value);
  inline void set_encodestr(const char* value);
  inline void set_encodestr(const char* value, size_t size);
  inline ::std::string* mutable_encodestr();
  inline ::std::string* release_encodestr();
  inline void set_allocated_encodestr(::std::string* encodestr);

  // optional string TrueName = 14;
  inline bool has_truename() const;
  inline void clear_truename();
  static const int kTrueNameFieldNumber = 14;
  inline const ::std::string& truename() const;
  inline void set_truename(const ::std::string& value);
  inline void set_truename(const char* value);
  inline void set_truename(const char* value, size_t size);
  inline ::std::string* mutable_truename();
  inline ::std::string* release_truename();
  inline void set_allocated_truename(::std::string* truename);

  // optional string IDCode = 15;
  inline bool has_idcode() const;
  inline void clear_idcode();
  static const int kIDCodeFieldNumber = 15;
  inline const ::std::string& idcode() const;
  inline void set_idcode(const ::std::string& value);
  inline void set_idcode(const char* value);
  inline void set_idcode(const char* value, size_t size);
  inline ::std::string* mutable_idcode();
  inline ::std::string* release_idcode();
  inline void set_allocated_idcode(::std::string* idcode);

  // optional string QQNum = 16;
  inline bool has_qqnum() const;
  inline void clear_qqnum();
  static const int kQQNumFieldNumber = 16;
  inline const ::std::string& qqnum() const;
  inline void set_qqnum(const ::std::string& value);
  inline void set_qqnum(const char* value);
  inline void set_qqnum(const char* value, size_t size);
  inline ::std::string* mutable_qqnum();
  inline ::std::string* release_qqnum();
  inline void set_allocated_qqnum(::std::string* qqnum);

  // optional string Email = 17;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 17;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional string Tel = 18;
  inline bool has_tel() const;
  inline void clear_tel();
  static const int kTelFieldNumber = 18;
  inline const ::std::string& tel() const;
  inline void set_tel(const ::std::string& value);
  inline void set_tel(const char* value);
  inline void set_tel(const char* value, size_t size);
  inline ::std::string* mutable_tel();
  inline ::std::string* release_tel();
  inline void set_allocated_tel(::std::string* tel);

  // optional string CellPhone = 19;
  inline bool has_cellphone() const;
  inline void clear_cellphone();
  static const int kCellPhoneFieldNumber = 19;
  inline const ::std::string& cellphone() const;
  inline void set_cellphone(const ::std::string& value);
  inline void set_cellphone(const char* value);
  inline void set_cellphone(const char* value, size_t size);
  inline ::std::string* mutable_cellphone();
  inline ::std::string* release_cellphone();
  inline void set_allocated_cellphone(::std::string* cellphone);

  // optional string PostCode = 20;
  inline bool has_postcode() const;
  inline void clear_postcode();
  static const int kPostCodeFieldNumber = 20;
  inline const ::std::string& postcode() const;
  inline void set_postcode(const ::std::string& value);
  inline void set_postcode(const char* value);
  inline void set_postcode(const char* value, size_t size);
  inline ::std::string* mutable_postcode();
  inline ::std::string* release_postcode();
  inline void set_allocated_postcode(::std::string* postcode);

  // optional string ContactAddress = 21;
  inline bool has_contactaddress() const;
  inline void clear_contactaddress();
  static const int kContactAddressFieldNumber = 21;
  inline const ::std::string& contactaddress() const;
  inline void set_contactaddress(const ::std::string& value);
  inline void set_contactaddress(const char* value);
  inline void set_contactaddress(const char* value, size_t size);
  inline ::std::string* mutable_contactaddress();
  inline ::std::string* release_contactaddress();
  inline void set_allocated_contactaddress(::std::string* contactaddress);

  // optional bool IsActived = 22;
  inline bool has_isactived() const;
  inline void clear_isactived();
  static const int kIsActivedFieldNumber = 22;
  inline bool isactived() const;
  inline void set_isactived(bool value);

  // optional bool IsLocked = 23;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 23;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // @@protoc_insertion_point(class_scope:transMsg.GL_UserInfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_shopid();
  inline void clear_has_shopid();
  inline void set_has_deptid();
  inline void clear_has_deptid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_userpwd();
  inline void clear_has_userpwd();
  inline void set_has_usercode();
  inline void clear_has_usercode();
  inline void set_has_encodestr();
  inline void clear_has_encodestr();
  inline void set_has_truename();
  inline void clear_has_truename();
  inline void set_has_idcode();
  inline void clear_has_idcode();
  inline void set_has_qqnum();
  inline void clear_has_qqnum();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_tel();
  inline void clear_has_tel();
  inline void set_has_cellphone();
  inline void clear_has_cellphone();
  inline void set_has_postcode();
  inline void clear_has_postcode();
  inline void set_has_contactaddress();
  inline void clear_has_contactaddress();
  inline void set_has_isactived();
  inline void clear_has_isactived();
  inline void set_has_islocked();
  inline void clear_has_islocked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 shopid_;
  ::google::protobuf::int32 deptid_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* userpwd_;
  ::std::string* usercode_;
  ::std::string* encodestr_;
  ::std::string* truename_;
  ::google::protobuf::int32 updaterid_;
  bool isdel_;
  bool isactived_;
  bool islocked_;
  ::std::string* idcode_;
  ::std::string* qqnum_;
  ::std::string* email_;
  ::std::string* tel_;
  ::std::string* cellphone_;
  ::std::string* postcode_;
  ::std::string* contactaddress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class GL_Table : public ::google::protobuf::Message {
 public:
  GL_Table();
  virtual ~GL_Table();

  GL_Table(const GL_Table& from);

  inline GL_Table& operator=(const GL_Table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GL_Table& default_instance();

  void Swap(GL_Table* other);

  // implements Message ----------------------------------------------

  GL_Table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GL_Table& from);
  void MergeFrom(const GL_Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .transMsg.GL_AppVerInfo GL_AppVerInfo = 1;
  inline int gl_appverinfo_size() const;
  inline void clear_gl_appverinfo();
  static const int kGLAppVerInfoFieldNumber = 1;
  inline const ::transMsg::GL_AppVerInfo& gl_appverinfo(int index) const;
  inline ::transMsg::GL_AppVerInfo* mutable_gl_appverinfo(int index);
  inline ::transMsg::GL_AppVerInfo* add_gl_appverinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AppVerInfo >&
      gl_appverinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AppVerInfo >*
      mutable_gl_appverinfo();

  // repeated .transMsg.GL_AppleseedInfo GL_AppleseedInfo = 2;
  inline int gl_appleseedinfo_size() const;
  inline void clear_gl_appleseedinfo();
  static const int kGLAppleseedInfoFieldNumber = 2;
  inline const ::transMsg::GL_AppleseedInfo& gl_appleseedinfo(int index) const;
  inline ::transMsg::GL_AppleseedInfo* mutable_gl_appleseedinfo(int index);
  inline ::transMsg::GL_AppleseedInfo* add_gl_appleseedinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AppleseedInfo >&
      gl_appleseedinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AppleseedInfo >*
      mutable_gl_appleseedinfo();

  // repeated .transMsg.GL_AreaGeoMapInfo GL_AreaGeoMapInfo = 3;
  inline int gl_areageomapinfo_size() const;
  inline void clear_gl_areageomapinfo();
  static const int kGLAreaGeoMapInfoFieldNumber = 3;
  inline const ::transMsg::GL_AreaGeoMapInfo& gl_areageomapinfo(int index) const;
  inline ::transMsg::GL_AreaGeoMapInfo* mutable_gl_areageomapinfo(int index);
  inline ::transMsg::GL_AreaGeoMapInfo* add_gl_areageomapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AreaGeoMapInfo >&
      gl_areageomapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AreaGeoMapInfo >*
      mutable_gl_areageomapinfo();

  // repeated .transMsg.GL_AreaInfo GL_AreaInfo = 4;
  inline int gl_areainfo_size() const;
  inline void clear_gl_areainfo();
  static const int kGLAreaInfoFieldNumber = 4;
  inline const ::transMsg::GL_AreaInfo& gl_areainfo(int index) const;
  inline ::transMsg::GL_AreaInfo* mutable_gl_areainfo(int index);
  inline ::transMsg::GL_AreaInfo* add_gl_areainfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AreaInfo >&
      gl_areainfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AreaInfo >*
      mutable_gl_areainfo();

  // repeated .transMsg.GL_BaseBoardInfo GL_BaseBoardInfo = 5;
  inline int gl_baseboardinfo_size() const;
  inline void clear_gl_baseboardinfo();
  static const int kGLBaseBoardInfoFieldNumber = 5;
  inline const ::transMsg::GL_BaseBoardInfo& gl_baseboardinfo(int index) const;
  inline ::transMsg::GL_BaseBoardInfo* mutable_gl_baseboardinfo(int index);
  inline ::transMsg::GL_BaseBoardInfo* add_gl_baseboardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_BaseBoardInfo >&
      gl_baseboardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_BaseBoardInfo >*
      mutable_gl_baseboardinfo();

  // repeated .transMsg.GL_ChargeLogInfo GL_ChargeLogInfo = 6;
  inline int gl_chargeloginfo_size() const;
  inline void clear_gl_chargeloginfo();
  static const int kGLChargeLogInfoFieldNumber = 6;
  inline const ::transMsg::GL_ChargeLogInfo& gl_chargeloginfo(int index) const;
  inline ::transMsg::GL_ChargeLogInfo* mutable_gl_chargeloginfo(int index);
  inline ::transMsg::GL_ChargeLogInfo* add_gl_chargeloginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_ChargeLogInfo >&
      gl_chargeloginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_ChargeLogInfo >*
      mutable_gl_chargeloginfo();

  // repeated .transMsg.GL_DeptInfo GL_DeptInfo = 7;
  inline int gl_deptinfo_size() const;
  inline void clear_gl_deptinfo();
  static const int kGLDeptInfoFieldNumber = 7;
  inline const ::transMsg::GL_DeptInfo& gl_deptinfo(int index) const;
  inline ::transMsg::GL_DeptInfo* mutable_gl_deptinfo(int index);
  inline ::transMsg::GL_DeptInfo* add_gl_deptinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_DeptInfo >&
      gl_deptinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_DeptInfo >*
      mutable_gl_deptinfo();

  // repeated .transMsg.GL_DesignerConfigInfo GL_DesignerConfigInfo = 8;
  inline int gl_designerconfiginfo_size() const;
  inline void clear_gl_designerconfiginfo();
  static const int kGLDesignerConfigInfoFieldNumber = 8;
  inline const ::transMsg::GL_DesignerConfigInfo& gl_designerconfiginfo(int index) const;
  inline ::transMsg::GL_DesignerConfigInfo* mutable_gl_designerconfiginfo(int index);
  inline ::transMsg::GL_DesignerConfigInfo* add_gl_designerconfiginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_DesignerConfigInfo >&
      gl_designerconfiginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_DesignerConfigInfo >*
      mutable_gl_designerconfiginfo();

  // repeated .transMsg.GL_GTypeInfo GL_GTypeInfo = 9;
  inline int gl_gtypeinfo_size() const;
  inline void clear_gl_gtypeinfo();
  static const int kGLGTypeInfoFieldNumber = 9;
  inline const ::transMsg::GL_GTypeInfo& gl_gtypeinfo(int index) const;
  inline ::transMsg::GL_GTypeInfo* mutable_gl_gtypeinfo(int index);
  inline ::transMsg::GL_GTypeInfo* add_gl_gtypeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_GTypeInfo >&
      gl_gtypeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_GTypeInfo >*
      mutable_gl_gtypeinfo();

  // repeated .transMsg.GL_GeoCodeInfo GL_GeoCodeInfo = 10;
  inline int gl_geocodeinfo_size() const;
  inline void clear_gl_geocodeinfo();
  static const int kGLGeoCodeInfoFieldNumber = 10;
  inline const ::transMsg::GL_GeoCodeInfo& gl_geocodeinfo(int index) const;
  inline ::transMsg::GL_GeoCodeInfo* mutable_gl_geocodeinfo(int index);
  inline ::transMsg::GL_GeoCodeInfo* add_gl_geocodeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_GeoCodeInfo >&
      gl_geocodeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_GeoCodeInfo >*
      mutable_gl_geocodeinfo();

  // repeated .transMsg.GL_MajorCateInfo GL_MajorCateInfo = 11;
  inline int gl_majorcateinfo_size() const;
  inline void clear_gl_majorcateinfo();
  static const int kGLMajorCateInfoFieldNumber = 11;
  inline const ::transMsg::GL_MajorCateInfo& gl_majorcateinfo(int index) const;
  inline ::transMsg::GL_MajorCateInfo* mutable_gl_majorcateinfo(int index);
  inline ::transMsg::GL_MajorCateInfo* add_gl_majorcateinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MajorCateInfo >&
      gl_majorcateinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MajorCateInfo >*
      mutable_gl_majorcateinfo();

  // repeated .transMsg.GL_MinorCateInfo GL_MinorCateInfo = 12;
  inline int gl_minorcateinfo_size() const;
  inline void clear_gl_minorcateinfo();
  static const int kGLMinorCateInfoFieldNumber = 12;
  inline const ::transMsg::GL_MinorCateInfo& gl_minorcateinfo(int index) const;
  inline ::transMsg::GL_MinorCateInfo* mutable_gl_minorcateinfo(int index);
  inline ::transMsg::GL_MinorCateInfo* add_gl_minorcateinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MinorCateInfo >&
      gl_minorcateinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MinorCateInfo >*
      mutable_gl_minorcateinfo();

  // repeated .transMsg.GL_MinorGTypeMapInfo GL_MinorGTypeMapInfo = 13;
  inline int gl_minorgtypemapinfo_size() const;
  inline void clear_gl_minorgtypemapinfo();
  static const int kGLMinorGTypeMapInfoFieldNumber = 13;
  inline const ::transMsg::GL_MinorGTypeMapInfo& gl_minorgtypemapinfo(int index) const;
  inline ::transMsg::GL_MinorGTypeMapInfo* mutable_gl_minorgtypemapinfo(int index);
  inline ::transMsg::GL_MinorGTypeMapInfo* add_gl_minorgtypemapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MinorGTypeMapInfo >&
      gl_minorgtypemapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MinorGTypeMapInfo >*
      mutable_gl_minorgtypemapinfo();

  // repeated .transMsg.GL_OrderInfo GL_OrderInfo = 14;
  inline int gl_orderinfo_size() const;
  inline void clear_gl_orderinfo();
  static const int kGLOrderInfoFieldNumber = 14;
  inline const ::transMsg::GL_OrderInfo& gl_orderinfo(int index) const;
  inline ::transMsg::GL_OrderInfo* mutable_gl_orderinfo(int index);
  inline ::transMsg::GL_OrderInfo* add_gl_orderinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_OrderInfo >&
      gl_orderinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_OrderInfo >*
      mutable_gl_orderinfo();

  // repeated .transMsg.GL_PinYin GL_PinYin = 15;
  inline int gl_pinyin_size() const;
  inline void clear_gl_pinyin();
  static const int kGLPinYinFieldNumber = 15;
  inline const ::transMsg::GL_PinYin& gl_pinyin(int index) const;
  inline ::transMsg::GL_PinYin* mutable_gl_pinyin(int index);
  inline ::transMsg::GL_PinYin* add_gl_pinyin();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PinYin >&
      gl_pinyin() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PinYin >*
      mutable_gl_pinyin();

  // repeated .transMsg.GL_PrepaidCardInfo GL_PrepaidCardInfo = 16;
  inline int gl_prepaidcardinfo_size() const;
  inline void clear_gl_prepaidcardinfo();
  static const int kGLPrepaidCardInfoFieldNumber = 16;
  inline const ::transMsg::GL_PrepaidCardInfo& gl_prepaidcardinfo(int index) const;
  inline ::transMsg::GL_PrepaidCardInfo* mutable_gl_prepaidcardinfo(int index);
  inline ::transMsg::GL_PrepaidCardInfo* add_gl_prepaidcardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PrepaidCardInfo >&
      gl_prepaidcardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PrepaidCardInfo >*
      mutable_gl_prepaidcardinfo();

  // repeated .transMsg.GL_PrintTemplateInfo GL_PrintTemplateInfo = 17;
  inline int gl_printtemplateinfo_size() const;
  inline void clear_gl_printtemplateinfo();
  static const int kGLPrintTemplateInfoFieldNumber = 17;
  inline const ::transMsg::GL_PrintTemplateInfo& gl_printtemplateinfo(int index) const;
  inline ::transMsg::GL_PrintTemplateInfo* mutable_gl_printtemplateinfo(int index);
  inline ::transMsg::GL_PrintTemplateInfo* add_gl_printtemplateinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PrintTemplateInfo >&
      gl_printtemplateinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PrintTemplateInfo >*
      mutable_gl_printtemplateinfo();

  // repeated .transMsg.GL_RoleInfo GL_RoleInfo = 18;
  inline int gl_roleinfo_size() const;
  inline void clear_gl_roleinfo();
  static const int kGLRoleInfoFieldNumber = 18;
  inline const ::transMsg::GL_RoleInfo& gl_roleinfo(int index) const;
  inline ::transMsg::GL_RoleInfo* mutable_gl_roleinfo(int index);
  inline ::transMsg::GL_RoleInfo* add_gl_roleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_RoleInfo >&
      gl_roleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_RoleInfo >*
      mutable_gl_roleinfo();

  // repeated .transMsg.GL_RoleRightInfo GL_RoleRightInfo = 19;
  inline int gl_rolerightinfo_size() const;
  inline void clear_gl_rolerightinfo();
  static const int kGLRoleRightInfoFieldNumber = 19;
  inline const ::transMsg::GL_RoleRightInfo& gl_rolerightinfo(int index) const;
  inline ::transMsg::GL_RoleRightInfo* mutable_gl_rolerightinfo(int index);
  inline ::transMsg::GL_RoleRightInfo* add_gl_rolerightinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_RoleRightInfo >&
      gl_rolerightinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_RoleRightInfo >*
      mutable_gl_rolerightinfo();

  // repeated .transMsg.GL_SugarVerInfo GL_SugarVerInfo = 20;
  inline int gl_sugarverinfo_size() const;
  inline void clear_gl_sugarverinfo();
  static const int kGLSugarVerInfoFieldNumber = 20;
  inline const ::transMsg::GL_SugarVerInfo& gl_sugarverinfo(int index) const;
  inline ::transMsg::GL_SugarVerInfo* mutable_gl_sugarverinfo(int index);
  inline ::transMsg::GL_SugarVerInfo* add_gl_sugarverinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_SugarVerInfo >&
      gl_sugarverinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_SugarVerInfo >*
      mutable_gl_sugarverinfo();

  // repeated .transMsg.GL_TransferOrderInfo GL_TransferOrderInfo = 21;
  inline int gl_transferorderinfo_size() const;
  inline void clear_gl_transferorderinfo();
  static const int kGLTransferOrderInfoFieldNumber = 21;
  inline const ::transMsg::GL_TransferOrderInfo& gl_transferorderinfo(int index) const;
  inline ::transMsg::GL_TransferOrderInfo* mutable_gl_transferorderinfo(int index);
  inline ::transMsg::GL_TransferOrderInfo* add_gl_transferorderinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_TransferOrderInfo >&
      gl_transferorderinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_TransferOrderInfo >*
      mutable_gl_transferorderinfo();

  // repeated .transMsg.GL_UnitInfo GL_UnitInfo = 22;
  inline int gl_unitinfo_size() const;
  inline void clear_gl_unitinfo();
  static const int kGLUnitInfoFieldNumber = 22;
  inline const ::transMsg::GL_UnitInfo& gl_unitinfo(int index) const;
  inline ::transMsg::GL_UnitInfo* mutable_gl_unitinfo(int index);
  inline ::transMsg::GL_UnitInfo* add_gl_unitinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UnitInfo >&
      gl_unitinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UnitInfo >*
      mutable_gl_unitinfo();

  // repeated .transMsg.GL_UserActivationInfo GL_UserActivationInfo = 23;
  inline int gl_useractivationinfo_size() const;
  inline void clear_gl_useractivationinfo();
  static const int kGLUserActivationInfoFieldNumber = 23;
  inline const ::transMsg::GL_UserActivationInfo& gl_useractivationinfo(int index) const;
  inline ::transMsg::GL_UserActivationInfo* mutable_gl_useractivationinfo(int index);
  inline ::transMsg::GL_UserActivationInfo* add_gl_useractivationinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UserActivationInfo >&
      gl_useractivationinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UserActivationInfo >*
      mutable_gl_useractivationinfo();

  // repeated .transMsg.GL_UserInfo GL_UserInfo = 24;
  inline int gl_userinfo_size() const;
  inline void clear_gl_userinfo();
  static const int kGLUserInfoFieldNumber = 24;
  inline const ::transMsg::GL_UserInfo& gl_userinfo(int index) const;
  inline ::transMsg::GL_UserInfo* mutable_gl_userinfo(int index);
  inline ::transMsg::GL_UserInfo* add_gl_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UserInfo >&
      gl_userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UserInfo >*
      mutable_gl_userinfo();

  // @@protoc_insertion_point(class_scope:transMsg.GL_Table)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AppVerInfo > gl_appverinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AppleseedInfo > gl_appleseedinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AreaGeoMapInfo > gl_areageomapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AreaInfo > gl_areainfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_BaseBoardInfo > gl_baseboardinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_ChargeLogInfo > gl_chargeloginfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_DeptInfo > gl_deptinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_DesignerConfigInfo > gl_designerconfiginfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_GTypeInfo > gl_gtypeinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_GeoCodeInfo > gl_geocodeinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MajorCateInfo > gl_majorcateinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MinorCateInfo > gl_minorcateinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MinorGTypeMapInfo > gl_minorgtypemapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_OrderInfo > gl_orderinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PinYin > gl_pinyin_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PrepaidCardInfo > gl_prepaidcardinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PrintTemplateInfo > gl_printtemplateinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_RoleInfo > gl_roleinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_RoleRightInfo > gl_rolerightinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_SugarVerInfo > gl_sugarverinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_TransferOrderInfo > gl_transferorderinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UnitInfo > gl_unitinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UserActivationInfo > gl_useractivationinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UserInfo > gl_userinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dGL_2eproto();
  friend void protobuf_AssignDesc_msg_2dGL_2eproto();
  friend void protobuf_ShutdownFile_msg_2dGL_2eproto();

  void InitAsDefaultInstance();
  static GL_Table* default_instance_;
};
// ===================================================================


// ===================================================================

// GL_AppVerInfo

// optional int32 AppVerID = 1;
inline bool GL_AppVerInfo::has_appverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_AppVerInfo::set_has_appverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_AppVerInfo::clear_has_appverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_AppVerInfo::clear_appverid() {
  appverid_ = 0;
  clear_has_appverid();
}
inline ::google::protobuf::int32 GL_AppVerInfo::appverid() const {
  return appverid_;
}
inline void GL_AppVerInfo::set_appverid(::google::protobuf::int32 value) {
  set_has_appverid();
  appverid_ = value;
}

// optional int32 ClientType = 2;
inline bool GL_AppVerInfo::has_clienttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_AppVerInfo::set_has_clienttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_AppVerInfo::clear_has_clienttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_AppVerInfo::clear_clienttype() {
  clienttype_ = 0;
  clear_has_clienttype();
}
inline ::google::protobuf::int32 GL_AppVerInfo::clienttype() const {
  return clienttype_;
}
inline void GL_AppVerInfo::set_clienttype(::google::protobuf::int32 value) {
  set_has_clienttype();
  clienttype_ = value;
}

// optional bool IsActive = 3;
inline bool GL_AppVerInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_AppVerInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_AppVerInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_AppVerInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool GL_AppVerInfo::isactive() const {
  return isactive_;
}
inline void GL_AppVerInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// optional int64 FileSize = 4;
inline bool GL_AppVerInfo::has_filesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_AppVerInfo::set_has_filesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_AppVerInfo::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_AppVerInfo::clear_filesize() {
  filesize_ = GOOGLE_LONGLONG(0);
  clear_has_filesize();
}
inline ::google::protobuf::int64 GL_AppVerInfo::filesize() const {
  return filesize_;
}
inline void GL_AppVerInfo::set_filesize(::google::protobuf::int64 value) {
  set_has_filesize();
  filesize_ = value;
}

// optional string AppVerCode = 5;
inline bool GL_AppVerInfo::has_appvercode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GL_AppVerInfo::set_has_appvercode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GL_AppVerInfo::clear_has_appvercode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GL_AppVerInfo::clear_appvercode() {
  if (appvercode_ != &::google::protobuf::internal::kEmptyString) {
    appvercode_->clear();
  }
  clear_has_appvercode();
}
inline const ::std::string& GL_AppVerInfo::appvercode() const {
  return *appvercode_;
}
inline void GL_AppVerInfo::set_appvercode(const ::std::string& value) {
  set_has_appvercode();
  if (appvercode_ == &::google::protobuf::internal::kEmptyString) {
    appvercode_ = new ::std::string;
  }
  appvercode_->assign(value);
}
inline void GL_AppVerInfo::set_appvercode(const char* value) {
  set_has_appvercode();
  if (appvercode_ == &::google::protobuf::internal::kEmptyString) {
    appvercode_ = new ::std::string;
  }
  appvercode_->assign(value);
}
inline void GL_AppVerInfo::set_appvercode(const char* value, size_t size) {
  set_has_appvercode();
  if (appvercode_ == &::google::protobuf::internal::kEmptyString) {
    appvercode_ = new ::std::string;
  }
  appvercode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_AppVerInfo::mutable_appvercode() {
  set_has_appvercode();
  if (appvercode_ == &::google::protobuf::internal::kEmptyString) {
    appvercode_ = new ::std::string;
  }
  return appvercode_;
}
inline ::std::string* GL_AppVerInfo::release_appvercode() {
  clear_has_appvercode();
  if (appvercode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appvercode_;
    appvercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_AppVerInfo::set_allocated_appvercode(::std::string* appvercode) {
  if (appvercode_ != &::google::protobuf::internal::kEmptyString) {
    delete appvercode_;
  }
  if (appvercode) {
    set_has_appvercode();
    appvercode_ = appvercode;
  } else {
    clear_has_appvercode();
    appvercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string HashCode = 6;
inline bool GL_AppVerInfo::has_hashcode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GL_AppVerInfo::set_has_hashcode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GL_AppVerInfo::clear_has_hashcode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GL_AppVerInfo::clear_hashcode() {
  if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
    hashcode_->clear();
  }
  clear_has_hashcode();
}
inline const ::std::string& GL_AppVerInfo::hashcode() const {
  return *hashcode_;
}
inline void GL_AppVerInfo::set_hashcode(const ::std::string& value) {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  hashcode_->assign(value);
}
inline void GL_AppVerInfo::set_hashcode(const char* value) {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  hashcode_->assign(value);
}
inline void GL_AppVerInfo::set_hashcode(const char* value, size_t size) {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  hashcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_AppVerInfo::mutable_hashcode() {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  return hashcode_;
}
inline ::std::string* GL_AppVerInfo::release_hashcode() {
  clear_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hashcode_;
    hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_AppVerInfo::set_allocated_hashcode(::std::string* hashcode) {
  if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
    delete hashcode_;
  }
  if (hashcode) {
    set_has_hashcode();
    hashcode_ = hashcode;
  } else {
    clear_has_hashcode();
    hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FilePath = 7;
inline bool GL_AppVerInfo::has_filepath() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GL_AppVerInfo::set_has_filepath() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GL_AppVerInfo::clear_has_filepath() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GL_AppVerInfo::clear_filepath() {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    filepath_->clear();
  }
  clear_has_filepath();
}
inline const ::std::string& GL_AppVerInfo::filepath() const {
  return *filepath_;
}
inline void GL_AppVerInfo::set_filepath(const ::std::string& value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void GL_AppVerInfo::set_filepath(const char* value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void GL_AppVerInfo::set_filepath(const char* value, size_t size) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_AppVerInfo::mutable_filepath() {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  return filepath_;
}
inline ::std::string* GL_AppVerInfo::release_filepath() {
  clear_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filepath_;
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_AppVerInfo::set_allocated_filepath(::std::string* filepath) {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (filepath) {
    set_has_filepath();
    filepath_ = filepath;
  } else {
    clear_has_filepath();
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_AppleseedInfo

// optional int32 ItemID = 1;
inline bool GL_AppleseedInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_AppleseedInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_AppleseedInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_AppleseedInfo::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 GL_AppleseedInfo::itemid() const {
  return itemid_;
}
inline void GL_AppleseedInfo::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional string ItemName = 2;
inline bool GL_AppleseedInfo::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_AppleseedInfo::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_AppleseedInfo::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_AppleseedInfo::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& GL_AppleseedInfo::itemname() const {
  return *itemname_;
}
inline void GL_AppleseedInfo::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void GL_AppleseedInfo::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void GL_AppleseedInfo::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_AppleseedInfo::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  return itemname_;
}
inline ::std::string* GL_AppleseedInfo::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_AppleseedInfo::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ItemData = 3;
inline bool GL_AppleseedInfo::has_itemdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_AppleseedInfo::set_has_itemdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_AppleseedInfo::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_AppleseedInfo::clear_itemdata() {
  if (itemdata_ != &::google::protobuf::internal::kEmptyString) {
    itemdata_->clear();
  }
  clear_has_itemdata();
}
inline const ::std::string& GL_AppleseedInfo::itemdata() const {
  return *itemdata_;
}
inline void GL_AppleseedInfo::set_itemdata(const ::std::string& value) {
  set_has_itemdata();
  if (itemdata_ == &::google::protobuf::internal::kEmptyString) {
    itemdata_ = new ::std::string;
  }
  itemdata_->assign(value);
}
inline void GL_AppleseedInfo::set_itemdata(const char* value) {
  set_has_itemdata();
  if (itemdata_ == &::google::protobuf::internal::kEmptyString) {
    itemdata_ = new ::std::string;
  }
  itemdata_->assign(value);
}
inline void GL_AppleseedInfo::set_itemdata(const char* value, size_t size) {
  set_has_itemdata();
  if (itemdata_ == &::google::protobuf::internal::kEmptyString) {
    itemdata_ = new ::std::string;
  }
  itemdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_AppleseedInfo::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == &::google::protobuf::internal::kEmptyString) {
    itemdata_ = new ::std::string;
  }
  return itemdata_;
}
inline ::std::string* GL_AppleseedInfo::release_itemdata() {
  clear_has_itemdata();
  if (itemdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemdata_;
    itemdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_AppleseedInfo::set_allocated_itemdata(::std::string* itemdata) {
  if (itemdata_ != &::google::protobuf::internal::kEmptyString) {
    delete itemdata_;
  }
  if (itemdata) {
    set_has_itemdata();
    itemdata_ = itemdata;
  } else {
    clear_has_itemdata();
    itemdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_AreaGeoMapInfo

// optional int32 AreaID = 1;
inline bool GL_AreaGeoMapInfo::has_areaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_AreaGeoMapInfo::set_has_areaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_AreaGeoMapInfo::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_AreaGeoMapInfo::clear_areaid() {
  areaid_ = 0;
  clear_has_areaid();
}
inline ::google::protobuf::int32 GL_AreaGeoMapInfo::areaid() const {
  return areaid_;
}
inline void GL_AreaGeoMapInfo::set_areaid(::google::protobuf::int32 value) {
  set_has_areaid();
  areaid_ = value;
}

// optional string GeoCode = 2;
inline bool GL_AreaGeoMapInfo::has_geocode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_AreaGeoMapInfo::set_has_geocode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_AreaGeoMapInfo::clear_has_geocode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_AreaGeoMapInfo::clear_geocode() {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    geocode_->clear();
  }
  clear_has_geocode();
}
inline const ::std::string& GL_AreaGeoMapInfo::geocode() const {
  return *geocode_;
}
inline void GL_AreaGeoMapInfo::set_geocode(const ::std::string& value) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(value);
}
inline void GL_AreaGeoMapInfo::set_geocode(const char* value) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(value);
}
inline void GL_AreaGeoMapInfo::set_geocode(const char* value, size_t size) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_AreaGeoMapInfo::mutable_geocode() {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  return geocode_;
}
inline ::std::string* GL_AreaGeoMapInfo::release_geocode() {
  clear_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = geocode_;
    geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_AreaGeoMapInfo::set_allocated_geocode(::std::string* geocode) {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    delete geocode_;
  }
  if (geocode) {
    set_has_geocode();
    geocode_ = geocode;
  } else {
    clear_has_geocode();
    geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_AreaInfo

// optional int32 AreaID = 1;
inline bool GL_AreaInfo::has_areaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_AreaInfo::set_has_areaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_AreaInfo::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_AreaInfo::clear_areaid() {
  areaid_ = 0;
  clear_has_areaid();
}
inline ::google::protobuf::int32 GL_AreaInfo::areaid() const {
  return areaid_;
}
inline void GL_AreaInfo::set_areaid(::google::protobuf::int32 value) {
  set_has_areaid();
  areaid_ = value;
}

// optional int32 DeptID = 2;
inline bool GL_AreaInfo::has_deptid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_AreaInfo::set_has_deptid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_AreaInfo::clear_has_deptid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_AreaInfo::clear_deptid() {
  deptid_ = 0;
  clear_has_deptid();
}
inline ::google::protobuf::int32 GL_AreaInfo::deptid() const {
  return deptid_;
}
inline void GL_AreaInfo::set_deptid(::google::protobuf::int32 value) {
  set_has_deptid();
  deptid_ = value;
}

// optional int32 CreatorID = 3;
inline bool GL_AreaInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_AreaInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_AreaInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_AreaInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 GL_AreaInfo::creatorid() const {
  return creatorid_;
}
inline void GL_AreaInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// optional int32 UpdaterID = 4;
inline bool GL_AreaInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_AreaInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_AreaInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_AreaInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 GL_AreaInfo::updaterid() const {
  return updaterid_;
}
inline void GL_AreaInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// optional int64 CreateTime = 5;
inline bool GL_AreaInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GL_AreaInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GL_AreaInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GL_AreaInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 GL_AreaInfo::createtime() const {
  return createtime_;
}
inline void GL_AreaInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional int64 UpdateTime = 6;
inline bool GL_AreaInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GL_AreaInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GL_AreaInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GL_AreaInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 GL_AreaInfo::updatetime() const {
  return updatetime_;
}
inline void GL_AreaInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// optional string AreaName = 7;
inline bool GL_AreaInfo::has_areaname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GL_AreaInfo::set_has_areaname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GL_AreaInfo::clear_has_areaname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GL_AreaInfo::clear_areaname() {
  if (areaname_ != &::google::protobuf::internal::kEmptyString) {
    areaname_->clear();
  }
  clear_has_areaname();
}
inline const ::std::string& GL_AreaInfo::areaname() const {
  return *areaname_;
}
inline void GL_AreaInfo::set_areaname(const ::std::string& value) {
  set_has_areaname();
  if (areaname_ == &::google::protobuf::internal::kEmptyString) {
    areaname_ = new ::std::string;
  }
  areaname_->assign(value);
}
inline void GL_AreaInfo::set_areaname(const char* value) {
  set_has_areaname();
  if (areaname_ == &::google::protobuf::internal::kEmptyString) {
    areaname_ = new ::std::string;
  }
  areaname_->assign(value);
}
inline void GL_AreaInfo::set_areaname(const char* value, size_t size) {
  set_has_areaname();
  if (areaname_ == &::google::protobuf::internal::kEmptyString) {
    areaname_ = new ::std::string;
  }
  areaname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_AreaInfo::mutable_areaname() {
  set_has_areaname();
  if (areaname_ == &::google::protobuf::internal::kEmptyString) {
    areaname_ = new ::std::string;
  }
  return areaname_;
}
inline ::std::string* GL_AreaInfo::release_areaname() {
  clear_has_areaname();
  if (areaname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = areaname_;
    areaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_AreaInfo::set_allocated_areaname(::std::string* areaname) {
  if (areaname_ != &::google::protobuf::internal::kEmptyString) {
    delete areaname_;
  }
  if (areaname) {
    set_has_areaname();
    areaname_ = areaname;
  } else {
    clear_has_areaname();
    areaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_BaseBoardInfo

// optional int32 CabShape = 1;
inline bool GL_BaseBoardInfo::has_cabshape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_BaseBoardInfo::set_has_cabshape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_BaseBoardInfo::clear_has_cabshape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_BaseBoardInfo::clear_cabshape() {
  cabshape_ = 0;
  clear_has_cabshape();
}
inline ::google::protobuf::int32 GL_BaseBoardInfo::cabshape() const {
  return cabshape_;
}
inline void GL_BaseBoardInfo::set_cabshape(::google::protobuf::int32 value) {
  set_has_cabshape();
  cabshape_ = value;
}

// optional int32 CabGapType = 2;
inline bool GL_BaseBoardInfo::has_cabgaptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_BaseBoardInfo::set_has_cabgaptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_BaseBoardInfo::clear_has_cabgaptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_BaseBoardInfo::clear_cabgaptype() {
  cabgaptype_ = 0;
  clear_has_cabgaptype();
}
inline ::google::protobuf::int32 GL_BaseBoardInfo::cabgaptype() const {
  return cabgaptype_;
}
inline void GL_BaseBoardInfo::set_cabgaptype(::google::protobuf::int32 value) {
  set_has_cabgaptype();
  cabgaptype_ = value;
}

// optional int32 BoardType = 3;
inline bool GL_BaseBoardInfo::has_boardtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_BaseBoardInfo::set_has_boardtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_BaseBoardInfo::clear_has_boardtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_BaseBoardInfo::clear_boardtype() {
  boardtype_ = 0;
  clear_has_boardtype();
}
inline ::google::protobuf::int32 GL_BaseBoardInfo::boardtype() const {
  return boardtype_;
}
inline void GL_BaseBoardInfo::set_boardtype(::google::protobuf::int32 value) {
  set_has_boardtype();
  boardtype_ = value;
}

// optional int32 BoardPosition = 4;
inline bool GL_BaseBoardInfo::has_boardposition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_BaseBoardInfo::set_has_boardposition() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_BaseBoardInfo::clear_has_boardposition() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_BaseBoardInfo::clear_boardposition() {
  boardposition_ = 0;
  clear_has_boardposition();
}
inline ::google::protobuf::int32 GL_BaseBoardInfo::boardposition() const {
  return boardposition_;
}
inline void GL_BaseBoardInfo::set_boardposition(::google::protobuf::int32 value) {
  set_has_boardposition();
  boardposition_ = value;
}

// optional int32 FactoryID = 5;
inline bool GL_BaseBoardInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GL_BaseBoardInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GL_BaseBoardInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GL_BaseBoardInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 GL_BaseBoardInfo::factoryid() const {
  return factoryid_;
}
inline void GL_BaseBoardInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// optional string XFormula = 6;
inline bool GL_BaseBoardInfo::has_xformula() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GL_BaseBoardInfo::set_has_xformula() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GL_BaseBoardInfo::clear_has_xformula() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GL_BaseBoardInfo::clear_xformula() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    xformula_->clear();
  }
  clear_has_xformula();
}
inline const ::std::string& GL_BaseBoardInfo::xformula() const {
  return *xformula_;
}
inline void GL_BaseBoardInfo::set_xformula(const ::std::string& value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void GL_BaseBoardInfo::set_xformula(const char* value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void GL_BaseBoardInfo::set_xformula(const char* value, size_t size) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_BaseBoardInfo::mutable_xformula() {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  return xformula_;
}
inline ::std::string* GL_BaseBoardInfo::release_xformula() {
  clear_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xformula_;
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_BaseBoardInfo::set_allocated_xformula(::std::string* xformula) {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (xformula) {
    set_has_xformula();
    xformula_ = xformula;
  } else {
    clear_has_xformula();
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string YFormula = 7;
inline bool GL_BaseBoardInfo::has_yformula() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GL_BaseBoardInfo::set_has_yformula() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GL_BaseBoardInfo::clear_has_yformula() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GL_BaseBoardInfo::clear_yformula() {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    yformula_->clear();
  }
  clear_has_yformula();
}
inline const ::std::string& GL_BaseBoardInfo::yformula() const {
  return *yformula_;
}
inline void GL_BaseBoardInfo::set_yformula(const ::std::string& value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void GL_BaseBoardInfo::set_yformula(const char* value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void GL_BaseBoardInfo::set_yformula(const char* value, size_t size) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_BaseBoardInfo::mutable_yformula() {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  return yformula_;
}
inline ::std::string* GL_BaseBoardInfo::release_yformula() {
  clear_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yformula_;
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_BaseBoardInfo::set_allocated_yformula(::std::string* yformula) {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (yformula) {
    set_has_yformula();
    yformula_ = yformula;
  } else {
    clear_has_yformula();
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 XDock = 8;
inline bool GL_BaseBoardInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GL_BaseBoardInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GL_BaseBoardInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GL_BaseBoardInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 GL_BaseBoardInfo::xdock() const {
  return xdock_;
}
inline void GL_BaseBoardInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// optional int32 YDock = 9;
inline bool GL_BaseBoardInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GL_BaseBoardInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GL_BaseBoardInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GL_BaseBoardInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 GL_BaseBoardInfo::ydock() const {
  return ydock_;
}
inline void GL_BaseBoardInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// optional int32 ZDock = 10;
inline bool GL_BaseBoardInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GL_BaseBoardInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GL_BaseBoardInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GL_BaseBoardInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 GL_BaseBoardInfo::zdock() const {
  return zdock_;
}
inline void GL_BaseBoardInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// optional string XOffset = 11;
inline bool GL_BaseBoardInfo::has_xoffset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GL_BaseBoardInfo::set_has_xoffset() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GL_BaseBoardInfo::clear_has_xoffset() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GL_BaseBoardInfo::clear_xoffset() {
  if (xoffset_ != &::google::protobuf::internal::kEmptyString) {
    xoffset_->clear();
  }
  clear_has_xoffset();
}
inline const ::std::string& GL_BaseBoardInfo::xoffset() const {
  return *xoffset_;
}
inline void GL_BaseBoardInfo::set_xoffset(const ::std::string& value) {
  set_has_xoffset();
  if (xoffset_ == &::google::protobuf::internal::kEmptyString) {
    xoffset_ = new ::std::string;
  }
  xoffset_->assign(value);
}
inline void GL_BaseBoardInfo::set_xoffset(const char* value) {
  set_has_xoffset();
  if (xoffset_ == &::google::protobuf::internal::kEmptyString) {
    xoffset_ = new ::std::string;
  }
  xoffset_->assign(value);
}
inline void GL_BaseBoardInfo::set_xoffset(const char* value, size_t size) {
  set_has_xoffset();
  if (xoffset_ == &::google::protobuf::internal::kEmptyString) {
    xoffset_ = new ::std::string;
  }
  xoffset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_BaseBoardInfo::mutable_xoffset() {
  set_has_xoffset();
  if (xoffset_ == &::google::protobuf::internal::kEmptyString) {
    xoffset_ = new ::std::string;
  }
  return xoffset_;
}
inline ::std::string* GL_BaseBoardInfo::release_xoffset() {
  clear_has_xoffset();
  if (xoffset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffset_;
    xoffset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_BaseBoardInfo::set_allocated_xoffset(::std::string* xoffset) {
  if (xoffset_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffset_;
  }
  if (xoffset) {
    set_has_xoffset();
    xoffset_ = xoffset;
  } else {
    clear_has_xoffset();
    xoffset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string YOffset = 12;
inline bool GL_BaseBoardInfo::has_yoffset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GL_BaseBoardInfo::set_has_yoffset() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GL_BaseBoardInfo::clear_has_yoffset() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GL_BaseBoardInfo::clear_yoffset() {
  if (yoffset_ != &::google::protobuf::internal::kEmptyString) {
    yoffset_->clear();
  }
  clear_has_yoffset();
}
inline const ::std::string& GL_BaseBoardInfo::yoffset() const {
  return *yoffset_;
}
inline void GL_BaseBoardInfo::set_yoffset(const ::std::string& value) {
  set_has_yoffset();
  if (yoffset_ == &::google::protobuf::internal::kEmptyString) {
    yoffset_ = new ::std::string;
  }
  yoffset_->assign(value);
}
inline void GL_BaseBoardInfo::set_yoffset(const char* value) {
  set_has_yoffset();
  if (yoffset_ == &::google::protobuf::internal::kEmptyString) {
    yoffset_ = new ::std::string;
  }
  yoffset_->assign(value);
}
inline void GL_BaseBoardInfo::set_yoffset(const char* value, size_t size) {
  set_has_yoffset();
  if (yoffset_ == &::google::protobuf::internal::kEmptyString) {
    yoffset_ = new ::std::string;
  }
  yoffset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_BaseBoardInfo::mutable_yoffset() {
  set_has_yoffset();
  if (yoffset_ == &::google::protobuf::internal::kEmptyString) {
    yoffset_ = new ::std::string;
  }
  return yoffset_;
}
inline ::std::string* GL_BaseBoardInfo::release_yoffset() {
  clear_has_yoffset();
  if (yoffset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffset_;
    yoffset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_BaseBoardInfo::set_allocated_yoffset(::std::string* yoffset) {
  if (yoffset_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffset_;
  }
  if (yoffset) {
    set_has_yoffset();
    yoffset_ = yoffset;
  } else {
    clear_has_yoffset();
    yoffset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ZOffset = 13;
inline bool GL_BaseBoardInfo::has_zoffset() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GL_BaseBoardInfo::set_has_zoffset() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GL_BaseBoardInfo::clear_has_zoffset() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GL_BaseBoardInfo::clear_zoffset() {
  if (zoffset_ != &::google::protobuf::internal::kEmptyString) {
    zoffset_->clear();
  }
  clear_has_zoffset();
}
inline const ::std::string& GL_BaseBoardInfo::zoffset() const {
  return *zoffset_;
}
inline void GL_BaseBoardInfo::set_zoffset(const ::std::string& value) {
  set_has_zoffset();
  if (zoffset_ == &::google::protobuf::internal::kEmptyString) {
    zoffset_ = new ::std::string;
  }
  zoffset_->assign(value);
}
inline void GL_BaseBoardInfo::set_zoffset(const char* value) {
  set_has_zoffset();
  if (zoffset_ == &::google::protobuf::internal::kEmptyString) {
    zoffset_ = new ::std::string;
  }
  zoffset_->assign(value);
}
inline void GL_BaseBoardInfo::set_zoffset(const char* value, size_t size) {
  set_has_zoffset();
  if (zoffset_ == &::google::protobuf::internal::kEmptyString) {
    zoffset_ = new ::std::string;
  }
  zoffset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_BaseBoardInfo::mutable_zoffset() {
  set_has_zoffset();
  if (zoffset_ == &::google::protobuf::internal::kEmptyString) {
    zoffset_ = new ::std::string;
  }
  return zoffset_;
}
inline ::std::string* GL_BaseBoardInfo::release_zoffset() {
  clear_has_zoffset();
  if (zoffset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffset_;
    zoffset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_BaseBoardInfo::set_allocated_zoffset(::std::string* zoffset) {
  if (zoffset_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffset_;
  }
  if (zoffset) {
    set_has_zoffset();
    zoffset_ = zoffset;
  } else {
    clear_has_zoffset();
    zoffset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double ArcX = 14;
inline bool GL_BaseBoardInfo::has_arcx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GL_BaseBoardInfo::set_has_arcx() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GL_BaseBoardInfo::clear_has_arcx() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GL_BaseBoardInfo::clear_arcx() {
  arcx_ = 0;
  clear_has_arcx();
}
inline double GL_BaseBoardInfo::arcx() const {
  return arcx_;
}
inline void GL_BaseBoardInfo::set_arcx(double value) {
  set_has_arcx();
  arcx_ = value;
}

// optional double ArcY = 15;
inline bool GL_BaseBoardInfo::has_arcy() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GL_BaseBoardInfo::set_has_arcy() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GL_BaseBoardInfo::clear_has_arcy() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GL_BaseBoardInfo::clear_arcy() {
  arcy_ = 0;
  clear_has_arcy();
}
inline double GL_BaseBoardInfo::arcy() const {
  return arcy_;
}
inline void GL_BaseBoardInfo::set_arcy(double value) {
  set_has_arcy();
  arcy_ = value;
}

// optional double ArcZ = 16;
inline bool GL_BaseBoardInfo::has_arcz() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GL_BaseBoardInfo::set_has_arcz() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GL_BaseBoardInfo::clear_has_arcz() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GL_BaseBoardInfo::clear_arcz() {
  arcz_ = 0;
  clear_has_arcz();
}
inline double GL_BaseBoardInfo::arcz() const {
  return arcz_;
}
inline void GL_BaseBoardInfo::set_arcz(double value) {
  set_has_arcz();
  arcz_ = value;
}

// optional string Name = 17;
inline bool GL_BaseBoardInfo::has_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GL_BaseBoardInfo::set_has_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GL_BaseBoardInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GL_BaseBoardInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GL_BaseBoardInfo::name() const {
  return *name_;
}
inline void GL_BaseBoardInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GL_BaseBoardInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GL_BaseBoardInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_BaseBoardInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GL_BaseBoardInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_BaseBoardInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_ChargeLogInfo

// optional int32 LogID = 1;
inline bool GL_ChargeLogInfo::has_logid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_ChargeLogInfo::set_has_logid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_ChargeLogInfo::clear_has_logid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_ChargeLogInfo::clear_logid() {
  logid_ = 0;
  clear_has_logid();
}
inline ::google::protobuf::int32 GL_ChargeLogInfo::logid() const {
  return logid_;
}
inline void GL_ChargeLogInfo::set_logid(::google::protobuf::int32 value) {
  set_has_logid();
  logid_ = value;
}

// optional string CardNo = 2;
inline bool GL_ChargeLogInfo::has_cardno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_ChargeLogInfo::set_has_cardno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_ChargeLogInfo::clear_has_cardno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_ChargeLogInfo::clear_cardno() {
  if (cardno_ != &::google::protobuf::internal::kEmptyString) {
    cardno_->clear();
  }
  clear_has_cardno();
}
inline const ::std::string& GL_ChargeLogInfo::cardno() const {
  return *cardno_;
}
inline void GL_ChargeLogInfo::set_cardno(const ::std::string& value) {
  set_has_cardno();
  if (cardno_ == &::google::protobuf::internal::kEmptyString) {
    cardno_ = new ::std::string;
  }
  cardno_->assign(value);
}
inline void GL_ChargeLogInfo::set_cardno(const char* value) {
  set_has_cardno();
  if (cardno_ == &::google::protobuf::internal::kEmptyString) {
    cardno_ = new ::std::string;
  }
  cardno_->assign(value);
}
inline void GL_ChargeLogInfo::set_cardno(const char* value, size_t size) {
  set_has_cardno();
  if (cardno_ == &::google::protobuf::internal::kEmptyString) {
    cardno_ = new ::std::string;
  }
  cardno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_ChargeLogInfo::mutable_cardno() {
  set_has_cardno();
  if (cardno_ == &::google::protobuf::internal::kEmptyString) {
    cardno_ = new ::std::string;
  }
  return cardno_;
}
inline ::std::string* GL_ChargeLogInfo::release_cardno() {
  clear_has_cardno();
  if (cardno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardno_;
    cardno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_ChargeLogInfo::set_allocated_cardno(::std::string* cardno) {
  if (cardno_ != &::google::protobuf::internal::kEmptyString) {
    delete cardno_;
  }
  if (cardno) {
    set_has_cardno();
    cardno_ = cardno;
  } else {
    clear_has_cardno();
    cardno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 FactoryID = 3;
inline bool GL_ChargeLogInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_ChargeLogInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_ChargeLogInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_ChargeLogInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 GL_ChargeLogInfo::factoryid() const {
  return factoryid_;
}
inline void GL_ChargeLogInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// optional int32 ShopID = 4;
inline bool GL_ChargeLogInfo::has_shopid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_ChargeLogInfo::set_has_shopid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_ChargeLogInfo::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_ChargeLogInfo::clear_shopid() {
  shopid_ = 0;
  clear_has_shopid();
}
inline ::google::protobuf::int32 GL_ChargeLogInfo::shopid() const {
  return shopid_;
}
inline void GL_ChargeLogInfo::set_shopid(::google::protobuf::int32 value) {
  set_has_shopid();
  shopid_ = value;
}

// optional int32 UserID = 5;
inline bool GL_ChargeLogInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GL_ChargeLogInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GL_ChargeLogInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GL_ChargeLogInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 GL_ChargeLogInfo::userid() const {
  return userid_;
}
inline void GL_ChargeLogInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// GL_DeptInfo

// optional int32 DeptID = 1;
inline bool GL_DeptInfo::has_deptid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_DeptInfo::set_has_deptid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_DeptInfo::clear_has_deptid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_DeptInfo::clear_deptid() {
  deptid_ = 0;
  clear_has_deptid();
}
inline ::google::protobuf::int32 GL_DeptInfo::deptid() const {
  return deptid_;
}
inline void GL_DeptInfo::set_deptid(::google::protobuf::int32 value) {
  set_has_deptid();
  deptid_ = value;
}

// optional int32 ParentID = 2;
inline bool GL_DeptInfo::has_parentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_DeptInfo::set_has_parentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_DeptInfo::clear_has_parentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_DeptInfo::clear_parentid() {
  parentid_ = 0;
  clear_has_parentid();
}
inline ::google::protobuf::int32 GL_DeptInfo::parentid() const {
  return parentid_;
}
inline void GL_DeptInfo::set_parentid(::google::protobuf::int32 value) {
  set_has_parentid();
  parentid_ = value;
}

// optional bool IsDel = 3;
inline bool GL_DeptInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_DeptInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_DeptInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_DeptInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool GL_DeptInfo::isdel() const {
  return isdel_;
}
inline void GL_DeptInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// optional int32 DTypeID = 4;
inline bool GL_DeptInfo::has_dtypeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_DeptInfo::set_has_dtypeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_DeptInfo::clear_has_dtypeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_DeptInfo::clear_dtypeid() {
  dtypeid_ = 0;
  clear_has_dtypeid();
}
inline ::google::protobuf::int32 GL_DeptInfo::dtypeid() const {
  return dtypeid_;
}
inline void GL_DeptInfo::set_dtypeid(::google::protobuf::int32 value) {
  set_has_dtypeid();
  dtypeid_ = value;
}

// optional int32 IncOrder = 5;
inline bool GL_DeptInfo::has_incorder() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GL_DeptInfo::set_has_incorder() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GL_DeptInfo::clear_has_incorder() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GL_DeptInfo::clear_incorder() {
  incorder_ = 0;
  clear_has_incorder();
}
inline ::google::protobuf::int32 GL_DeptInfo::incorder() const {
  return incorder_;
}
inline void GL_DeptInfo::set_incorder(::google::protobuf::int32 value) {
  set_has_incorder();
  incorder_ = value;
}

// optional int32 ShowOrder = 6;
inline bool GL_DeptInfo::has_showorder() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GL_DeptInfo::set_has_showorder() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GL_DeptInfo::clear_has_showorder() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GL_DeptInfo::clear_showorder() {
  showorder_ = 0;
  clear_has_showorder();
}
inline ::google::protobuf::int32 GL_DeptInfo::showorder() const {
  return showorder_;
}
inline void GL_DeptInfo::set_showorder(::google::protobuf::int32 value) {
  set_has_showorder();
  showorder_ = value;
}

// optional int32 CreatorID = 7;
inline bool GL_DeptInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GL_DeptInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GL_DeptInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GL_DeptInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 GL_DeptInfo::creatorid() const {
  return creatorid_;
}
inline void GL_DeptInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// optional int32 UpdaterID = 8;
inline bool GL_DeptInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GL_DeptInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GL_DeptInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GL_DeptInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 GL_DeptInfo::updaterid() const {
  return updaterid_;
}
inline void GL_DeptInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// optional int64 CreateTime = 9;
inline bool GL_DeptInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GL_DeptInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GL_DeptInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GL_DeptInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 GL_DeptInfo::createtime() const {
  return createtime_;
}
inline void GL_DeptInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional int64 UpdateTime = 10;
inline bool GL_DeptInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GL_DeptInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GL_DeptInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GL_DeptInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 GL_DeptInfo::updatetime() const {
  return updatetime_;
}
inline void GL_DeptInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// optional string GeoCode = 11;
inline bool GL_DeptInfo::has_geocode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GL_DeptInfo::set_has_geocode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GL_DeptInfo::clear_has_geocode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GL_DeptInfo::clear_geocode() {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    geocode_->clear();
  }
  clear_has_geocode();
}
inline const ::std::string& GL_DeptInfo::geocode() const {
  return *geocode_;
}
inline void GL_DeptInfo::set_geocode(const ::std::string& value) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(value);
}
inline void GL_DeptInfo::set_geocode(const char* value) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(value);
}
inline void GL_DeptInfo::set_geocode(const char* value, size_t size) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_DeptInfo::mutable_geocode() {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  return geocode_;
}
inline ::std::string* GL_DeptInfo::release_geocode() {
  clear_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = geocode_;
    geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_DeptInfo::set_allocated_geocode(::std::string* geocode) {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    delete geocode_;
  }
  if (geocode) {
    set_has_geocode();
    geocode_ = geocode;
  } else {
    clear_has_geocode();
    geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string DeptCode = 12;
inline bool GL_DeptInfo::has_deptcode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GL_DeptInfo::set_has_deptcode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GL_DeptInfo::clear_has_deptcode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GL_DeptInfo::clear_deptcode() {
  if (deptcode_ != &::google::protobuf::internal::kEmptyString) {
    deptcode_->clear();
  }
  clear_has_deptcode();
}
inline const ::std::string& GL_DeptInfo::deptcode() const {
  return *deptcode_;
}
inline void GL_DeptInfo::set_deptcode(const ::std::string& value) {
  set_has_deptcode();
  if (deptcode_ == &::google::protobuf::internal::kEmptyString) {
    deptcode_ = new ::std::string;
  }
  deptcode_->assign(value);
}
inline void GL_DeptInfo::set_deptcode(const char* value) {
  set_has_deptcode();
  if (deptcode_ == &::google::protobuf::internal::kEmptyString) {
    deptcode_ = new ::std::string;
  }
  deptcode_->assign(value);
}
inline void GL_DeptInfo::set_deptcode(const char* value, size_t size) {
  set_has_deptcode();
  if (deptcode_ == &::google::protobuf::internal::kEmptyString) {
    deptcode_ = new ::std::string;
  }
  deptcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_DeptInfo::mutable_deptcode() {
  set_has_deptcode();
  if (deptcode_ == &::google::protobuf::internal::kEmptyString) {
    deptcode_ = new ::std::string;
  }
  return deptcode_;
}
inline ::std::string* GL_DeptInfo::release_deptcode() {
  clear_has_deptcode();
  if (deptcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deptcode_;
    deptcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_DeptInfo::set_allocated_deptcode(::std::string* deptcode) {
  if (deptcode_ != &::google::protobuf::internal::kEmptyString) {
    delete deptcode_;
  }
  if (deptcode) {
    set_has_deptcode();
    deptcode_ = deptcode;
  } else {
    clear_has_deptcode();
    deptcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string DeptName = 13;
inline bool GL_DeptInfo::has_deptname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GL_DeptInfo::set_has_deptname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GL_DeptInfo::clear_has_deptname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GL_DeptInfo::clear_deptname() {
  if (deptname_ != &::google::protobuf::internal::kEmptyString) {
    deptname_->clear();
  }
  clear_has_deptname();
}
inline const ::std::string& GL_DeptInfo::deptname() const {
  return *deptname_;
}
inline void GL_DeptInfo::set_deptname(const ::std::string& value) {
  set_has_deptname();
  if (deptname_ == &::google::protobuf::internal::kEmptyString) {
    deptname_ = new ::std::string;
  }
  deptname_->assign(value);
}
inline void GL_DeptInfo::set_deptname(const char* value) {
  set_has_deptname();
  if (deptname_ == &::google::protobuf::internal::kEmptyString) {
    deptname_ = new ::std::string;
  }
  deptname_->assign(value);
}
inline void GL_DeptInfo::set_deptname(const char* value, size_t size) {
  set_has_deptname();
  if (deptname_ == &::google::protobuf::internal::kEmptyString) {
    deptname_ = new ::std::string;
  }
  deptname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_DeptInfo::mutable_deptname() {
  set_has_deptname();
  if (deptname_ == &::google::protobuf::internal::kEmptyString) {
    deptname_ = new ::std::string;
  }
  return deptname_;
}
inline ::std::string* GL_DeptInfo::release_deptname() {
  clear_has_deptname();
  if (deptname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deptname_;
    deptname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_DeptInfo::set_allocated_deptname(::std::string* deptname) {
  if (deptname_ != &::google::protobuf::internal::kEmptyString) {
    delete deptname_;
  }
  if (deptname) {
    set_has_deptname();
    deptname_ = deptname;
  } else {
    clear_has_deptname();
    deptname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Postcode = 14;
inline bool GL_DeptInfo::has_postcode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GL_DeptInfo::set_has_postcode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GL_DeptInfo::clear_has_postcode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GL_DeptInfo::clear_postcode() {
  if (postcode_ != &::google::protobuf::internal::kEmptyString) {
    postcode_->clear();
  }
  clear_has_postcode();
}
inline const ::std::string& GL_DeptInfo::postcode() const {
  return *postcode_;
}
inline void GL_DeptInfo::set_postcode(const ::std::string& value) {
  set_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    postcode_ = new ::std::string;
  }
  postcode_->assign(value);
}
inline void GL_DeptInfo::set_postcode(const char* value) {
  set_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    postcode_ = new ::std::string;
  }
  postcode_->assign(value);
}
inline void GL_DeptInfo::set_postcode(const char* value, size_t size) {
  set_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    postcode_ = new ::std::string;
  }
  postcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_DeptInfo::mutable_postcode() {
  set_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    postcode_ = new ::std::string;
  }
  return postcode_;
}
inline ::std::string* GL_DeptInfo::release_postcode() {
  clear_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = postcode_;
    postcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_DeptInfo::set_allocated_postcode(::std::string* postcode) {
  if (postcode_ != &::google::protobuf::internal::kEmptyString) {
    delete postcode_;
  }
  if (postcode) {
    set_has_postcode();
    postcode_ = postcode;
  } else {
    clear_has_postcode();
    postcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Tel = 15;
inline bool GL_DeptInfo::has_tel() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GL_DeptInfo::set_has_tel() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GL_DeptInfo::clear_has_tel() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GL_DeptInfo::clear_tel() {
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    tel_->clear();
  }
  clear_has_tel();
}
inline const ::std::string& GL_DeptInfo::tel() const {
  return *tel_;
}
inline void GL_DeptInfo::set_tel(const ::std::string& value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
}
inline void GL_DeptInfo::set_tel(const char* value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
}
inline void GL_DeptInfo::set_tel(const char* value, size_t size) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_DeptInfo::mutable_tel() {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  return tel_;
}
inline ::std::string* GL_DeptInfo::release_tel() {
  clear_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tel_;
    tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_DeptInfo::set_allocated_tel(::std::string* tel) {
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    delete tel_;
  }
  if (tel) {
    set_has_tel();
    tel_ = tel;
  } else {
    clear_has_tel();
    tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Contacter = 16;
inline bool GL_DeptInfo::has_contacter() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GL_DeptInfo::set_has_contacter() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GL_DeptInfo::clear_has_contacter() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GL_DeptInfo::clear_contacter() {
  if (contacter_ != &::google::protobuf::internal::kEmptyString) {
    contacter_->clear();
  }
  clear_has_contacter();
}
inline const ::std::string& GL_DeptInfo::contacter() const {
  return *contacter_;
}
inline void GL_DeptInfo::set_contacter(const ::std::string& value) {
  set_has_contacter();
  if (contacter_ == &::google::protobuf::internal::kEmptyString) {
    contacter_ = new ::std::string;
  }
  contacter_->assign(value);
}
inline void GL_DeptInfo::set_contacter(const char* value) {
  set_has_contacter();
  if (contacter_ == &::google::protobuf::internal::kEmptyString) {
    contacter_ = new ::std::string;
  }
  contacter_->assign(value);
}
inline void GL_DeptInfo::set_contacter(const char* value, size_t size) {
  set_has_contacter();
  if (contacter_ == &::google::protobuf::internal::kEmptyString) {
    contacter_ = new ::std::string;
  }
  contacter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_DeptInfo::mutable_contacter() {
  set_has_contacter();
  if (contacter_ == &::google::protobuf::internal::kEmptyString) {
    contacter_ = new ::std::string;
  }
  return contacter_;
}
inline ::std::string* GL_DeptInfo::release_contacter() {
  clear_has_contacter();
  if (contacter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contacter_;
    contacter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_DeptInfo::set_allocated_contacter(::std::string* contacter) {
  if (contacter_ != &::google::protobuf::internal::kEmptyString) {
    delete contacter_;
  }
  if (contacter) {
    set_has_contacter();
    contacter_ = contacter;
  } else {
    clear_has_contacter();
    contacter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ContactAddress = 17;
inline bool GL_DeptInfo::has_contactaddress() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GL_DeptInfo::set_has_contactaddress() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GL_DeptInfo::clear_has_contactaddress() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GL_DeptInfo::clear_contactaddress() {
  if (contactaddress_ != &::google::protobuf::internal::kEmptyString) {
    contactaddress_->clear();
  }
  clear_has_contactaddress();
}
inline const ::std::string& GL_DeptInfo::contactaddress() const {
  return *contactaddress_;
}
inline void GL_DeptInfo::set_contactaddress(const ::std::string& value) {
  set_has_contactaddress();
  if (contactaddress_ == &::google::protobuf::internal::kEmptyString) {
    contactaddress_ = new ::std::string;
  }
  contactaddress_->assign(value);
}
inline void GL_DeptInfo::set_contactaddress(const char* value) {
  set_has_contactaddress();
  if (contactaddress_ == &::google::protobuf::internal::kEmptyString) {
    contactaddress_ = new ::std::string;
  }
  contactaddress_->assign(value);
}
inline void GL_DeptInfo::set_contactaddress(const char* value, size_t size) {
  set_has_contactaddress();
  if (contactaddress_ == &::google::protobuf::internal::kEmptyString) {
    contactaddress_ = new ::std::string;
  }
  contactaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_DeptInfo::mutable_contactaddress() {
  set_has_contactaddress();
  if (contactaddress_ == &::google::protobuf::internal::kEmptyString) {
    contactaddress_ = new ::std::string;
  }
  return contactaddress_;
}
inline ::std::string* GL_DeptInfo::release_contactaddress() {
  clear_has_contactaddress();
  if (contactaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contactaddress_;
    contactaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_DeptInfo::set_allocated_contactaddress(::std::string* contactaddress) {
  if (contactaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete contactaddress_;
  }
  if (contactaddress) {
    set_has_contactaddress();
    contactaddress_ = contactaddress;
  } else {
    clear_has_contactaddress();
    contactaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string DeptMemo = 18;
inline bool GL_DeptInfo::has_deptmemo() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GL_DeptInfo::set_has_deptmemo() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GL_DeptInfo::clear_has_deptmemo() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GL_DeptInfo::clear_deptmemo() {
  if (deptmemo_ != &::google::protobuf::internal::kEmptyString) {
    deptmemo_->clear();
  }
  clear_has_deptmemo();
}
inline const ::std::string& GL_DeptInfo::deptmemo() const {
  return *deptmemo_;
}
inline void GL_DeptInfo::set_deptmemo(const ::std::string& value) {
  set_has_deptmemo();
  if (deptmemo_ == &::google::protobuf::internal::kEmptyString) {
    deptmemo_ = new ::std::string;
  }
  deptmemo_->assign(value);
}
inline void GL_DeptInfo::set_deptmemo(const char* value) {
  set_has_deptmemo();
  if (deptmemo_ == &::google::protobuf::internal::kEmptyString) {
    deptmemo_ = new ::std::string;
  }
  deptmemo_->assign(value);
}
inline void GL_DeptInfo::set_deptmemo(const char* value, size_t size) {
  set_has_deptmemo();
  if (deptmemo_ == &::google::protobuf::internal::kEmptyString) {
    deptmemo_ = new ::std::string;
  }
  deptmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_DeptInfo::mutable_deptmemo() {
  set_has_deptmemo();
  if (deptmemo_ == &::google::protobuf::internal::kEmptyString) {
    deptmemo_ = new ::std::string;
  }
  return deptmemo_;
}
inline ::std::string* GL_DeptInfo::release_deptmemo() {
  clear_has_deptmemo();
  if (deptmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deptmemo_;
    deptmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_DeptInfo::set_allocated_deptmemo(::std::string* deptmemo) {
  if (deptmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete deptmemo_;
  }
  if (deptmemo) {
    set_has_deptmemo();
    deptmemo_ = deptmemo;
  } else {
    clear_has_deptmemo();
    deptmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_DesignerConfigInfo

// optional bool EnableSnap = 1;
inline bool GL_DesignerConfigInfo::has_enablesnap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_enablesnap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_DesignerConfigInfo::clear_has_enablesnap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_DesignerConfigInfo::clear_enablesnap() {
  enablesnap_ = false;
  clear_has_enablesnap();
}
inline bool GL_DesignerConfigInfo::enablesnap() const {
  return enablesnap_;
}
inline void GL_DesignerConfigInfo::set_enablesnap(bool value) {
  set_has_enablesnap();
  enablesnap_ = value;
}

// optional bool AllPole = 2;
inline bool GL_DesignerConfigInfo::has_allpole() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_allpole() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_DesignerConfigInfo::clear_has_allpole() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_DesignerConfigInfo::clear_allpole() {
  allpole_ = false;
  clear_has_allpole();
}
inline bool GL_DesignerConfigInfo::allpole() const {
  return allpole_;
}
inline void GL_DesignerConfigInfo::set_allpole(bool value) {
  set_has_allpole();
  allpole_ = value;
}

// optional bool CrossPole = 3;
inline bool GL_DesignerConfigInfo::has_crosspole() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_crosspole() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_DesignerConfigInfo::clear_has_crosspole() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_DesignerConfigInfo::clear_crosspole() {
  crosspole_ = false;
  clear_has_crosspole();
}
inline bool GL_DesignerConfigInfo::crosspole() const {
  return crosspole_;
}
inline void GL_DesignerConfigInfo::set_crosspole(bool value) {
  set_has_crosspole();
  crosspole_ = value;
}

// optional bool WallPole = 4;
inline bool GL_DesignerConfigInfo::has_wallpole() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_wallpole() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_DesignerConfigInfo::clear_has_wallpole() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_DesignerConfigInfo::clear_wallpole() {
  wallpole_ = false;
  clear_has_wallpole();
}
inline bool GL_DesignerConfigInfo::wallpole() const {
  return wallpole_;
}
inline void GL_DesignerConfigInfo::set_wallpole(bool value) {
  set_has_wallpole();
  wallpole_ = value;
}

// optional bool HotspotCapture = 5;
inline bool GL_DesignerConfigInfo::has_hotspotcapture() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_hotspotcapture() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GL_DesignerConfigInfo::clear_has_hotspotcapture() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GL_DesignerConfigInfo::clear_hotspotcapture() {
  hotspotcapture_ = false;
  clear_has_hotspotcapture();
}
inline bool GL_DesignerConfigInfo::hotspotcapture() const {
  return hotspotcapture_;
}
inline void GL_DesignerConfigInfo::set_hotspotcapture(bool value) {
  set_has_hotspotcapture();
  hotspotcapture_ = value;
}

// optional bool GridShow = 6;
inline bool GL_DesignerConfigInfo::has_gridshow() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_gridshow() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GL_DesignerConfigInfo::clear_has_gridshow() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GL_DesignerConfigInfo::clear_gridshow() {
  gridshow_ = false;
  clear_has_gridshow();
}
inline bool GL_DesignerConfigInfo::gridshow() const {
  return gridshow_;
}
inline void GL_DesignerConfigInfo::set_gridshow(bool value) {
  set_has_gridshow();
  gridshow_ = value;
}

// optional int32 AngleStep = 7;
inline bool GL_DesignerConfigInfo::has_anglestep() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_anglestep() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GL_DesignerConfigInfo::clear_has_anglestep() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GL_DesignerConfigInfo::clear_anglestep() {
  anglestep_ = 0;
  clear_has_anglestep();
}
inline ::google::protobuf::int32 GL_DesignerConfigInfo::anglestep() const {
  return anglestep_;
}
inline void GL_DesignerConfigInfo::set_anglestep(::google::protobuf::int32 value) {
  set_has_anglestep();
  anglestep_ = value;
}

// optional int32 TargetRange = 8;
inline bool GL_DesignerConfigInfo::has_targetrange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_targetrange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GL_DesignerConfigInfo::clear_has_targetrange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GL_DesignerConfigInfo::clear_targetrange() {
  targetrange_ = 0;
  clear_has_targetrange();
}
inline ::google::protobuf::int32 GL_DesignerConfigInfo::targetrange() const {
  return targetrange_;
}
inline void GL_DesignerConfigInfo::set_targetrange(::google::protobuf::int32 value) {
  set_has_targetrange();
  targetrange_ = value;
}

// optional int32 DesignBGID = 9;
inline bool GL_DesignerConfigInfo::has_designbgid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_designbgid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GL_DesignerConfigInfo::clear_has_designbgid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GL_DesignerConfigInfo::clear_designbgid() {
  designbgid_ = 0;
  clear_has_designbgid();
}
inline ::google::protobuf::int32 GL_DesignerConfigInfo::designbgid() const {
  return designbgid_;
}
inline void GL_DesignerConfigInfo::set_designbgid(::google::protobuf::int32 value) {
  set_has_designbgid();
  designbgid_ = value;
}

// optional int32 PrintBGID = 10;
inline bool GL_DesignerConfigInfo::has_printbgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_printbgid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GL_DesignerConfigInfo::clear_has_printbgid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GL_DesignerConfigInfo::clear_printbgid() {
  printbgid_ = 0;
  clear_has_printbgid();
}
inline ::google::protobuf::int32 GL_DesignerConfigInfo::printbgid() const {
  return printbgid_;
}
inline void GL_DesignerConfigInfo::set_printbgid(::google::protobuf::int32 value) {
  set_has_printbgid();
  printbgid_ = value;
}

// optional int32 GridBigID = 11;
inline bool GL_DesignerConfigInfo::has_gridbigid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_gridbigid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GL_DesignerConfigInfo::clear_has_gridbigid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GL_DesignerConfigInfo::clear_gridbigid() {
  gridbigid_ = 0;
  clear_has_gridbigid();
}
inline ::google::protobuf::int32 GL_DesignerConfigInfo::gridbigid() const {
  return gridbigid_;
}
inline void GL_DesignerConfigInfo::set_gridbigid(::google::protobuf::int32 value) {
  set_has_gridbigid();
  gridbigid_ = value;
}

// optional int32 GridSmallID = 12;
inline bool GL_DesignerConfigInfo::has_gridsmallid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_gridsmallid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GL_DesignerConfigInfo::clear_has_gridsmallid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GL_DesignerConfigInfo::clear_gridsmallid() {
  gridsmallid_ = 0;
  clear_has_gridsmallid();
}
inline ::google::protobuf::int32 GL_DesignerConfigInfo::gridsmallid() const {
  return gridsmallid_;
}
inline void GL_DesignerConfigInfo::set_gridsmallid(::google::protobuf::int32 value) {
  set_has_gridsmallid();
  gridsmallid_ = value;
}

// optional int32 HotspotRotateID = 13;
inline bool GL_DesignerConfigInfo::has_hotspotrotateid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_hotspotrotateid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GL_DesignerConfigInfo::clear_has_hotspotrotateid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GL_DesignerConfigInfo::clear_hotspotrotateid() {
  hotspotrotateid_ = 0;
  clear_has_hotspotrotateid();
}
inline ::google::protobuf::int32 GL_DesignerConfigInfo::hotspotrotateid() const {
  return hotspotrotateid_;
}
inline void GL_DesignerConfigInfo::set_hotspotrotateid(::google::protobuf::int32 value) {
  set_has_hotspotrotateid();
  hotspotrotateid_ = value;
}

// optional int32 HotspotNormalID = 14;
inline bool GL_DesignerConfigInfo::has_hotspotnormalid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_hotspotnormalid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GL_DesignerConfigInfo::clear_has_hotspotnormalid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GL_DesignerConfigInfo::clear_hotspotnormalid() {
  hotspotnormalid_ = 0;
  clear_has_hotspotnormalid();
}
inline ::google::protobuf::int32 GL_DesignerConfigInfo::hotspotnormalid() const {
  return hotspotnormalid_;
}
inline void GL_DesignerConfigInfo::set_hotspotnormalid(::google::protobuf::int32 value) {
  set_has_hotspotnormalid();
  hotspotnormalid_ = value;
}

// optional int32 HotspotSelectID = 15;
inline bool GL_DesignerConfigInfo::has_hotspotselectid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_hotspotselectid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GL_DesignerConfigInfo::clear_has_hotspotselectid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GL_DesignerConfigInfo::clear_hotspotselectid() {
  hotspotselectid_ = 0;
  clear_has_hotspotselectid();
}
inline ::google::protobuf::int32 GL_DesignerConfigInfo::hotspotselectid() const {
  return hotspotselectid_;
}
inline void GL_DesignerConfigInfo::set_hotspotselectid(::google::protobuf::int32 value) {
  set_has_hotspotselectid();
  hotspotselectid_ = value;
}

// optional int32 CreatePointID = 16;
inline bool GL_DesignerConfigInfo::has_createpointid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_createpointid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GL_DesignerConfigInfo::clear_has_createpointid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GL_DesignerConfigInfo::clear_createpointid() {
  createpointid_ = 0;
  clear_has_createpointid();
}
inline ::google::protobuf::int32 GL_DesignerConfigInfo::createpointid() const {
  return createpointid_;
}
inline void GL_DesignerConfigInfo::set_createpointid(::google::protobuf::int32 value) {
  set_has_createpointid();
  createpointid_ = value;
}

// optional int64 DesignBGColor = 17;
inline bool GL_DesignerConfigInfo::has_designbgcolor() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_designbgcolor() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GL_DesignerConfigInfo::clear_has_designbgcolor() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GL_DesignerConfigInfo::clear_designbgcolor() {
  designbgcolor_ = GOOGLE_LONGLONG(0);
  clear_has_designbgcolor();
}
inline ::google::protobuf::int64 GL_DesignerConfigInfo::designbgcolor() const {
  return designbgcolor_;
}
inline void GL_DesignerConfigInfo::set_designbgcolor(::google::protobuf::int64 value) {
  set_has_designbgcolor();
  designbgcolor_ = value;
}

// optional int64 PrintBGColor = 18;
inline bool GL_DesignerConfigInfo::has_printbgcolor() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_printbgcolor() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GL_DesignerConfigInfo::clear_has_printbgcolor() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GL_DesignerConfigInfo::clear_printbgcolor() {
  printbgcolor_ = GOOGLE_LONGLONG(0);
  clear_has_printbgcolor();
}
inline ::google::protobuf::int64 GL_DesignerConfigInfo::printbgcolor() const {
  return printbgcolor_;
}
inline void GL_DesignerConfigInfo::set_printbgcolor(::google::protobuf::int64 value) {
  set_has_printbgcolor();
  printbgcolor_ = value;
}

// optional int64 GridBigColor = 19;
inline bool GL_DesignerConfigInfo::has_gridbigcolor() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_gridbigcolor() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GL_DesignerConfigInfo::clear_has_gridbigcolor() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GL_DesignerConfigInfo::clear_gridbigcolor() {
  gridbigcolor_ = GOOGLE_LONGLONG(0);
  clear_has_gridbigcolor();
}
inline ::google::protobuf::int64 GL_DesignerConfigInfo::gridbigcolor() const {
  return gridbigcolor_;
}
inline void GL_DesignerConfigInfo::set_gridbigcolor(::google::protobuf::int64 value) {
  set_has_gridbigcolor();
  gridbigcolor_ = value;
}

// optional int64 GridSmallColor = 20;
inline bool GL_DesignerConfigInfo::has_gridsmallcolor() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_gridsmallcolor() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GL_DesignerConfigInfo::clear_has_gridsmallcolor() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GL_DesignerConfigInfo::clear_gridsmallcolor() {
  gridsmallcolor_ = GOOGLE_LONGLONG(0);
  clear_has_gridsmallcolor();
}
inline ::google::protobuf::int64 GL_DesignerConfigInfo::gridsmallcolor() const {
  return gridsmallcolor_;
}
inline void GL_DesignerConfigInfo::set_gridsmallcolor(::google::protobuf::int64 value) {
  set_has_gridsmallcolor();
  gridsmallcolor_ = value;
}

// optional int64 HotspotRotateColor = 21;
inline bool GL_DesignerConfigInfo::has_hotspotrotatecolor() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_hotspotrotatecolor() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GL_DesignerConfigInfo::clear_has_hotspotrotatecolor() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GL_DesignerConfigInfo::clear_hotspotrotatecolor() {
  hotspotrotatecolor_ = GOOGLE_LONGLONG(0);
  clear_has_hotspotrotatecolor();
}
inline ::google::protobuf::int64 GL_DesignerConfigInfo::hotspotrotatecolor() const {
  return hotspotrotatecolor_;
}
inline void GL_DesignerConfigInfo::set_hotspotrotatecolor(::google::protobuf::int64 value) {
  set_has_hotspotrotatecolor();
  hotspotrotatecolor_ = value;
}

// optional int64 HotspotNormalColor = 22;
inline bool GL_DesignerConfigInfo::has_hotspotnormalcolor() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_hotspotnormalcolor() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GL_DesignerConfigInfo::clear_has_hotspotnormalcolor() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GL_DesignerConfigInfo::clear_hotspotnormalcolor() {
  hotspotnormalcolor_ = GOOGLE_LONGLONG(0);
  clear_has_hotspotnormalcolor();
}
inline ::google::protobuf::int64 GL_DesignerConfigInfo::hotspotnormalcolor() const {
  return hotspotnormalcolor_;
}
inline void GL_DesignerConfigInfo::set_hotspotnormalcolor(::google::protobuf::int64 value) {
  set_has_hotspotnormalcolor();
  hotspotnormalcolor_ = value;
}

// optional int64 HotspotSelectColor = 23;
inline bool GL_DesignerConfigInfo::has_hotspotselectcolor() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_hotspotselectcolor() {
  _has_bits_[0] |= 0x00400000u;
}
inline void GL_DesignerConfigInfo::clear_has_hotspotselectcolor() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void GL_DesignerConfigInfo::clear_hotspotselectcolor() {
  hotspotselectcolor_ = GOOGLE_LONGLONG(0);
  clear_has_hotspotselectcolor();
}
inline ::google::protobuf::int64 GL_DesignerConfigInfo::hotspotselectcolor() const {
  return hotspotselectcolor_;
}
inline void GL_DesignerConfigInfo::set_hotspotselectcolor(::google::protobuf::int64 value) {
  set_has_hotspotselectcolor();
  hotspotselectcolor_ = value;
}

// optional int64 CreatePointColor = 24;
inline bool GL_DesignerConfigInfo::has_createpointcolor() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_createpointcolor() {
  _has_bits_[0] |= 0x00800000u;
}
inline void GL_DesignerConfigInfo::clear_has_createpointcolor() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void GL_DesignerConfigInfo::clear_createpointcolor() {
  createpointcolor_ = GOOGLE_LONGLONG(0);
  clear_has_createpointcolor();
}
inline ::google::protobuf::int64 GL_DesignerConfigInfo::createpointcolor() const {
  return createpointcolor_;
}
inline void GL_DesignerConfigInfo::set_createpointcolor(::google::protobuf::int64 value) {
  set_has_createpointcolor();
  createpointcolor_ = value;
}

// optional int32 UserID = 25;
inline bool GL_DesignerConfigInfo::has_userid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_userid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void GL_DesignerConfigInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void GL_DesignerConfigInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 GL_DesignerConfigInfo::userid() const {
  return userid_;
}
inline void GL_DesignerConfigInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional double WallThickness = 26;
inline bool GL_DesignerConfigInfo::has_wallthickness() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_wallthickness() {
  _has_bits_[0] |= 0x02000000u;
}
inline void GL_DesignerConfigInfo::clear_has_wallthickness() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void GL_DesignerConfigInfo::clear_wallthickness() {
  wallthickness_ = 0;
  clear_has_wallthickness();
}
inline double GL_DesignerConfigInfo::wallthickness() const {
  return wallthickness_;
}
inline void GL_DesignerConfigInfo::set_wallthickness(double value) {
  set_has_wallthickness();
  wallthickness_ = value;
}

// optional double WallHeight = 27;
inline bool GL_DesignerConfigInfo::has_wallheight() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_wallheight() {
  _has_bits_[0] |= 0x04000000u;
}
inline void GL_DesignerConfigInfo::clear_has_wallheight() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void GL_DesignerConfigInfo::clear_wallheight() {
  wallheight_ = 0;
  clear_has_wallheight();
}
inline double GL_DesignerConfigInfo::wallheight() const {
  return wallheight_;
}
inline void GL_DesignerConfigInfo::set_wallheight(double value) {
  set_has_wallheight();
  wallheight_ = value;
}

// optional double BaseLineLen = 28;
inline bool GL_DesignerConfigInfo::has_baselinelen() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_baselinelen() {
  _has_bits_[0] |= 0x08000000u;
}
inline void GL_DesignerConfigInfo::clear_has_baselinelen() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void GL_DesignerConfigInfo::clear_baselinelen() {
  baselinelen_ = 0;
  clear_has_baselinelen();
}
inline double GL_DesignerConfigInfo::baselinelen() const {
  return baselinelen_;
}
inline void GL_DesignerConfigInfo::set_baselinelen(double value) {
  set_has_baselinelen();
  baselinelen_ = value;
}

// optional double GridWidth = 29;
inline bool GL_DesignerConfigInfo::has_gridwidth() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_gridwidth() {
  _has_bits_[0] |= 0x10000000u;
}
inline void GL_DesignerConfigInfo::clear_has_gridwidth() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void GL_DesignerConfigInfo::clear_gridwidth() {
  gridwidth_ = 0;
  clear_has_gridwidth();
}
inline double GL_DesignerConfigInfo::gridwidth() const {
  return gridwidth_;
}
inline void GL_DesignerConfigInfo::set_gridwidth(double value) {
  set_has_gridwidth();
  gridwidth_ = value;
}

// optional double SnapRange = 30;
inline bool GL_DesignerConfigInfo::has_snaprange() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_snaprange() {
  _has_bits_[0] |= 0x20000000u;
}
inline void GL_DesignerConfigInfo::clear_has_snaprange() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void GL_DesignerConfigInfo::clear_snaprange() {
  snaprange_ = 0;
  clear_has_snaprange();
}
inline double GL_DesignerConfigInfo::snaprange() const {
  return snaprange_;
}
inline void GL_DesignerConfigInfo::set_snaprange(double value) {
  set_has_snaprange();
  snaprange_ = value;
}

// optional double SkirtLineOffsetLen = 31;
inline bool GL_DesignerConfigInfo::has_skirtlineoffsetlen() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_skirtlineoffsetlen() {
  _has_bits_[0] |= 0x40000000u;
}
inline void GL_DesignerConfigInfo::clear_has_skirtlineoffsetlen() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void GL_DesignerConfigInfo::clear_skirtlineoffsetlen() {
  skirtlineoffsetlen_ = 0;
  clear_has_skirtlineoffsetlen();
}
inline double GL_DesignerConfigInfo::skirtlineoffsetlen() const {
  return skirtlineoffsetlen_;
}
inline void GL_DesignerConfigInfo::set_skirtlineoffsetlen(double value) {
  set_has_skirtlineoffsetlen();
  skirtlineoffsetlen_ = value;
}

// optional double BottomLineOffsetLen = 32;
inline bool GL_DesignerConfigInfo::has_bottomlineoffsetlen() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_bottomlineoffsetlen() {
  _has_bits_[0] |= 0x80000000u;
}
inline void GL_DesignerConfigInfo::clear_has_bottomlineoffsetlen() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void GL_DesignerConfigInfo::clear_bottomlineoffsetlen() {
  bottomlineoffsetlen_ = 0;
  clear_has_bottomlineoffsetlen();
}
inline double GL_DesignerConfigInfo::bottomlineoffsetlen() const {
  return bottomlineoffsetlen_;
}
inline void GL_DesignerConfigInfo::set_bottomlineoffsetlen(double value) {
  set_has_bottomlineoffsetlen();
  bottomlineoffsetlen_ = value;
}

// optional double TopLineOffsetLen = 33;
inline bool GL_DesignerConfigInfo::has_toplineoffsetlen() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void GL_DesignerConfigInfo::set_has_toplineoffsetlen() {
  _has_bits_[1] |= 0x00000001u;
}
inline void GL_DesignerConfigInfo::clear_has_toplineoffsetlen() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void GL_DesignerConfigInfo::clear_toplineoffsetlen() {
  toplineoffsetlen_ = 0;
  clear_has_toplineoffsetlen();
}
inline double GL_DesignerConfigInfo::toplineoffsetlen() const {
  return toplineoffsetlen_;
}
inline void GL_DesignerConfigInfo::set_toplineoffsetlen(double value) {
  set_has_toplineoffsetlen();
  toplineoffsetlen_ = value;
}

// -------------------------------------------------------------------

// GL_GTypeInfo

// optional int32 GTypeID = 1;
inline bool GL_GTypeInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_GTypeInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_GTypeInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_GTypeInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 GL_GTypeInfo::gtypeid() const {
  return gtypeid_;
}
inline void GL_GTypeInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// optional string GTypeName = 2;
inline bool GL_GTypeInfo::has_gtypename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_GTypeInfo::set_has_gtypename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_GTypeInfo::clear_has_gtypename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_GTypeInfo::clear_gtypename() {
  if (gtypename_ != &::google::protobuf::internal::kEmptyString) {
    gtypename_->clear();
  }
  clear_has_gtypename();
}
inline const ::std::string& GL_GTypeInfo::gtypename() const {
  return *gtypename_;
}
inline void GL_GTypeInfo::set_gtypename(const ::std::string& value) {
  set_has_gtypename();
  if (gtypename_ == &::google::protobuf::internal::kEmptyString) {
    gtypename_ = new ::std::string;
  }
  gtypename_->assign(value);
}
inline void GL_GTypeInfo::set_gtypename(const char* value) {
  set_has_gtypename();
  if (gtypename_ == &::google::protobuf::internal::kEmptyString) {
    gtypename_ = new ::std::string;
  }
  gtypename_->assign(value);
}
inline void GL_GTypeInfo::set_gtypename(const char* value, size_t size) {
  set_has_gtypename();
  if (gtypename_ == &::google::protobuf::internal::kEmptyString) {
    gtypename_ = new ::std::string;
  }
  gtypename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_GTypeInfo::mutable_gtypename() {
  set_has_gtypename();
  if (gtypename_ == &::google::protobuf::internal::kEmptyString) {
    gtypename_ = new ::std::string;
  }
  return gtypename_;
}
inline ::std::string* GL_GTypeInfo::release_gtypename() {
  clear_has_gtypename();
  if (gtypename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gtypename_;
    gtypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_GTypeInfo::set_allocated_gtypename(::std::string* gtypename) {
  if (gtypename_ != &::google::protobuf::internal::kEmptyString) {
    delete gtypename_;
  }
  if (gtypename) {
    set_has_gtypename();
    gtypename_ = gtypename;
  } else {
    clear_has_gtypename();
    gtypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_GeoCodeInfo

// optional string GeoCode = 1;
inline bool GL_GeoCodeInfo::has_geocode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_GeoCodeInfo::set_has_geocode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_GeoCodeInfo::clear_has_geocode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_GeoCodeInfo::clear_geocode() {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    geocode_->clear();
  }
  clear_has_geocode();
}
inline const ::std::string& GL_GeoCodeInfo::geocode() const {
  return *geocode_;
}
inline void GL_GeoCodeInfo::set_geocode(const ::std::string& value) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(value);
}
inline void GL_GeoCodeInfo::set_geocode(const char* value) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(value);
}
inline void GL_GeoCodeInfo::set_geocode(const char* value, size_t size) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_GeoCodeInfo::mutable_geocode() {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  return geocode_;
}
inline ::std::string* GL_GeoCodeInfo::release_geocode() {
  clear_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = geocode_;
    geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_GeoCodeInfo::set_allocated_geocode(::std::string* geocode) {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    delete geocode_;
  }
  if (geocode) {
    set_has_geocode();
    geocode_ = geocode;
  } else {
    clear_has_geocode();
    geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string GeoName = 2;
inline bool GL_GeoCodeInfo::has_geoname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_GeoCodeInfo::set_has_geoname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_GeoCodeInfo::clear_has_geoname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_GeoCodeInfo::clear_geoname() {
  if (geoname_ != &::google::protobuf::internal::kEmptyString) {
    geoname_->clear();
  }
  clear_has_geoname();
}
inline const ::std::string& GL_GeoCodeInfo::geoname() const {
  return *geoname_;
}
inline void GL_GeoCodeInfo::set_geoname(const ::std::string& value) {
  set_has_geoname();
  if (geoname_ == &::google::protobuf::internal::kEmptyString) {
    geoname_ = new ::std::string;
  }
  geoname_->assign(value);
}
inline void GL_GeoCodeInfo::set_geoname(const char* value) {
  set_has_geoname();
  if (geoname_ == &::google::protobuf::internal::kEmptyString) {
    geoname_ = new ::std::string;
  }
  geoname_->assign(value);
}
inline void GL_GeoCodeInfo::set_geoname(const char* value, size_t size) {
  set_has_geoname();
  if (geoname_ == &::google::protobuf::internal::kEmptyString) {
    geoname_ = new ::std::string;
  }
  geoname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_GeoCodeInfo::mutable_geoname() {
  set_has_geoname();
  if (geoname_ == &::google::protobuf::internal::kEmptyString) {
    geoname_ = new ::std::string;
  }
  return geoname_;
}
inline ::std::string* GL_GeoCodeInfo::release_geoname() {
  clear_has_geoname();
  if (geoname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = geoname_;
    geoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_GeoCodeInfo::set_allocated_geoname(::std::string* geoname) {
  if (geoname_ != &::google::protobuf::internal::kEmptyString) {
    delete geoname_;
  }
  if (geoname) {
    set_has_geoname();
    geoname_ = geoname;
  } else {
    clear_has_geoname();
    geoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_MajorCateInfo

// optional int32 MajorCateID = 1;
inline bool GL_MajorCateInfo::has_majorcateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_MajorCateInfo::set_has_majorcateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_MajorCateInfo::clear_has_majorcateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_MajorCateInfo::clear_majorcateid() {
  majorcateid_ = 0;
  clear_has_majorcateid();
}
inline ::google::protobuf::int32 GL_MajorCateInfo::majorcateid() const {
  return majorcateid_;
}
inline void GL_MajorCateInfo::set_majorcateid(::google::protobuf::int32 value) {
  set_has_majorcateid();
  majorcateid_ = value;
}

// optional string MajorCateName = 2;
inline bool GL_MajorCateInfo::has_majorcatename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_MajorCateInfo::set_has_majorcatename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_MajorCateInfo::clear_has_majorcatename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_MajorCateInfo::clear_majorcatename() {
  if (majorcatename_ != &::google::protobuf::internal::kEmptyString) {
    majorcatename_->clear();
  }
  clear_has_majorcatename();
}
inline const ::std::string& GL_MajorCateInfo::majorcatename() const {
  return *majorcatename_;
}
inline void GL_MajorCateInfo::set_majorcatename(const ::std::string& value) {
  set_has_majorcatename();
  if (majorcatename_ == &::google::protobuf::internal::kEmptyString) {
    majorcatename_ = new ::std::string;
  }
  majorcatename_->assign(value);
}
inline void GL_MajorCateInfo::set_majorcatename(const char* value) {
  set_has_majorcatename();
  if (majorcatename_ == &::google::protobuf::internal::kEmptyString) {
    majorcatename_ = new ::std::string;
  }
  majorcatename_->assign(value);
}
inline void GL_MajorCateInfo::set_majorcatename(const char* value, size_t size) {
  set_has_majorcatename();
  if (majorcatename_ == &::google::protobuf::internal::kEmptyString) {
    majorcatename_ = new ::std::string;
  }
  majorcatename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_MajorCateInfo::mutable_majorcatename() {
  set_has_majorcatename();
  if (majorcatename_ == &::google::protobuf::internal::kEmptyString) {
    majorcatename_ = new ::std::string;
  }
  return majorcatename_;
}
inline ::std::string* GL_MajorCateInfo::release_majorcatename() {
  clear_has_majorcatename();
  if (majorcatename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = majorcatename_;
    majorcatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_MajorCateInfo::set_allocated_majorcatename(::std::string* majorcatename) {
  if (majorcatename_ != &::google::protobuf::internal::kEmptyString) {
    delete majorcatename_;
  }
  if (majorcatename) {
    set_has_majorcatename();
    majorcatename_ = majorcatename;
  } else {
    clear_has_majorcatename();
    majorcatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_MinorCateInfo

// optional int32 MajorCateID = 1;
inline bool GL_MinorCateInfo::has_majorcateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_MinorCateInfo::set_has_majorcateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_MinorCateInfo::clear_has_majorcateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_MinorCateInfo::clear_majorcateid() {
  majorcateid_ = 0;
  clear_has_majorcateid();
}
inline ::google::protobuf::int32 GL_MinorCateInfo::majorcateid() const {
  return majorcateid_;
}
inline void GL_MinorCateInfo::set_majorcateid(::google::protobuf::int32 value) {
  set_has_majorcateid();
  majorcateid_ = value;
}

// optional int32 MinorCateID = 2;
inline bool GL_MinorCateInfo::has_minorcateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_MinorCateInfo::set_has_minorcateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_MinorCateInfo::clear_has_minorcateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_MinorCateInfo::clear_minorcateid() {
  minorcateid_ = 0;
  clear_has_minorcateid();
}
inline ::google::protobuf::int32 GL_MinorCateInfo::minorcateid() const {
  return minorcateid_;
}
inline void GL_MinorCateInfo::set_minorcateid(::google::protobuf::int32 value) {
  set_has_minorcateid();
  minorcateid_ = value;
}

// optional string MinorCateName = 3;
inline bool GL_MinorCateInfo::has_minorcatename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_MinorCateInfo::set_has_minorcatename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_MinorCateInfo::clear_has_minorcatename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_MinorCateInfo::clear_minorcatename() {
  if (minorcatename_ != &::google::protobuf::internal::kEmptyString) {
    minorcatename_->clear();
  }
  clear_has_minorcatename();
}
inline const ::std::string& GL_MinorCateInfo::minorcatename() const {
  return *minorcatename_;
}
inline void GL_MinorCateInfo::set_minorcatename(const ::std::string& value) {
  set_has_minorcatename();
  if (minorcatename_ == &::google::protobuf::internal::kEmptyString) {
    minorcatename_ = new ::std::string;
  }
  minorcatename_->assign(value);
}
inline void GL_MinorCateInfo::set_minorcatename(const char* value) {
  set_has_minorcatename();
  if (minorcatename_ == &::google::protobuf::internal::kEmptyString) {
    minorcatename_ = new ::std::string;
  }
  minorcatename_->assign(value);
}
inline void GL_MinorCateInfo::set_minorcatename(const char* value, size_t size) {
  set_has_minorcatename();
  if (minorcatename_ == &::google::protobuf::internal::kEmptyString) {
    minorcatename_ = new ::std::string;
  }
  minorcatename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_MinorCateInfo::mutable_minorcatename() {
  set_has_minorcatename();
  if (minorcatename_ == &::google::protobuf::internal::kEmptyString) {
    minorcatename_ = new ::std::string;
  }
  return minorcatename_;
}
inline ::std::string* GL_MinorCateInfo::release_minorcatename() {
  clear_has_minorcatename();
  if (minorcatename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = minorcatename_;
    minorcatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_MinorCateInfo::set_allocated_minorcatename(::std::string* minorcatename) {
  if (minorcatename_ != &::google::protobuf::internal::kEmptyString) {
    delete minorcatename_;
  }
  if (minorcatename) {
    set_has_minorcatename();
    minorcatename_ = minorcatename;
  } else {
    clear_has_minorcatename();
    minorcatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_MinorGTypeMapInfo

// optional int32 MajorCateID = 1;
inline bool GL_MinorGTypeMapInfo::has_majorcateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_MinorGTypeMapInfo::set_has_majorcateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_MinorGTypeMapInfo::clear_has_majorcateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_MinorGTypeMapInfo::clear_majorcateid() {
  majorcateid_ = 0;
  clear_has_majorcateid();
}
inline ::google::protobuf::int32 GL_MinorGTypeMapInfo::majorcateid() const {
  return majorcateid_;
}
inline void GL_MinorGTypeMapInfo::set_majorcateid(::google::protobuf::int32 value) {
  set_has_majorcateid();
  majorcateid_ = value;
}

// optional int32 MinorCateID = 2;
inline bool GL_MinorGTypeMapInfo::has_minorcateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_MinorGTypeMapInfo::set_has_minorcateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_MinorGTypeMapInfo::clear_has_minorcateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_MinorGTypeMapInfo::clear_minorcateid() {
  minorcateid_ = 0;
  clear_has_minorcateid();
}
inline ::google::protobuf::int32 GL_MinorGTypeMapInfo::minorcateid() const {
  return minorcateid_;
}
inline void GL_MinorGTypeMapInfo::set_minorcateid(::google::protobuf::int32 value) {
  set_has_minorcateid();
  minorcateid_ = value;
}

// optional int32 CreateType = 3;
inline bool GL_MinorGTypeMapInfo::has_createtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_MinorGTypeMapInfo::set_has_createtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_MinorGTypeMapInfo::clear_has_createtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_MinorGTypeMapInfo::clear_createtype() {
  createtype_ = 0;
  clear_has_createtype();
}
inline ::google::protobuf::int32 GL_MinorGTypeMapInfo::createtype() const {
  return createtype_;
}
inline void GL_MinorGTypeMapInfo::set_createtype(::google::protobuf::int32 value) {
  set_has_createtype();
  createtype_ = value;
}

// optional int32 GTypeID = 4;
inline bool GL_MinorGTypeMapInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_MinorGTypeMapInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_MinorGTypeMapInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_MinorGTypeMapInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 GL_MinorGTypeMapInfo::gtypeid() const {
  return gtypeid_;
}
inline void GL_MinorGTypeMapInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// -------------------------------------------------------------------

// GL_OrderInfo

// optional int64 OrderID = 1;
inline bool GL_OrderInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_OrderInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_OrderInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_OrderInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 GL_OrderInfo::orderid() const {
  return orderid_;
}
inline void GL_OrderInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// optional int64 ClientOrderID = 2;
inline bool GL_OrderInfo::has_clientorderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_OrderInfo::set_has_clientorderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_OrderInfo::clear_has_clientorderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_OrderInfo::clear_clientorderid() {
  clientorderid_ = GOOGLE_LONGLONG(0);
  clear_has_clientorderid();
}
inline ::google::protobuf::int64 GL_OrderInfo::clientorderid() const {
  return clientorderid_;
}
inline void GL_OrderInfo::set_clientorderid(::google::protobuf::int64 value) {
  set_has_clientorderid();
  clientorderid_ = value;
}

// optional int32 OrderIndex = 3;
inline bool GL_OrderInfo::has_orderindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_OrderInfo::set_has_orderindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_OrderInfo::clear_has_orderindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_OrderInfo::clear_orderindex() {
  orderindex_ = 0;
  clear_has_orderindex();
}
inline ::google::protobuf::int32 GL_OrderInfo::orderindex() const {
  return orderindex_;
}
inline void GL_OrderInfo::set_orderindex(::google::protobuf::int32 value) {
  set_has_orderindex();
  orderindex_ = value;
}

// optional int32 OrderType = 4;
inline bool GL_OrderInfo::has_ordertype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_OrderInfo::set_has_ordertype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_OrderInfo::clear_has_ordertype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_OrderInfo::clear_ordertype() {
  ordertype_ = 0;
  clear_has_ordertype();
}
inline ::google::protobuf::int32 GL_OrderInfo::ordertype() const {
  return ordertype_;
}
inline void GL_OrderInfo::set_ordertype(::google::protobuf::int32 value) {
  set_has_ordertype();
  ordertype_ = value;
}

// optional int32 FactoryID = 5;
inline bool GL_OrderInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GL_OrderInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GL_OrderInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GL_OrderInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 GL_OrderInfo::factoryid() const {
  return factoryid_;
}
inline void GL_OrderInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// optional int32 ShopID = 6;
inline bool GL_OrderInfo::has_shopid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GL_OrderInfo::set_has_shopid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GL_OrderInfo::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GL_OrderInfo::clear_shopid() {
  shopid_ = 0;
  clear_has_shopid();
}
inline ::google::protobuf::int32 GL_OrderInfo::shopid() const {
  return shopid_;
}
inline void GL_OrderInfo::set_shopid(::google::protobuf::int32 value) {
  set_has_shopid();
  shopid_ = value;
}

// optional int32 OrderStatus = 7;
inline bool GL_OrderInfo::has_orderstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GL_OrderInfo::set_has_orderstatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GL_OrderInfo::clear_has_orderstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GL_OrderInfo::clear_orderstatus() {
  orderstatus_ = 0;
  clear_has_orderstatus();
}
inline ::google::protobuf::int32 GL_OrderInfo::orderstatus() const {
  return orderstatus_;
}
inline void GL_OrderInfo::set_orderstatus(::google::protobuf::int32 value) {
  set_has_orderstatus();
  orderstatus_ = value;
}

// optional bool IsDel = 8;
inline bool GL_OrderInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GL_OrderInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GL_OrderInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GL_OrderInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool GL_OrderInfo::isdel() const {
  return isdel_;
}
inline void GL_OrderInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// optional int32 DesignerID = 9;
inline bool GL_OrderInfo::has_designerid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GL_OrderInfo::set_has_designerid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GL_OrderInfo::clear_has_designerid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GL_OrderInfo::clear_designerid() {
  designerid_ = 0;
  clear_has_designerid();
}
inline ::google::protobuf::int32 GL_OrderInfo::designerid() const {
  return designerid_;
}
inline void GL_OrderInfo::set_designerid(::google::protobuf::int32 value) {
  set_has_designerid();
  designerid_ = value;
}

// optional int32 ShopAuditorID = 10;
inline bool GL_OrderInfo::has_shopauditorid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GL_OrderInfo::set_has_shopauditorid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GL_OrderInfo::clear_has_shopauditorid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GL_OrderInfo::clear_shopauditorid() {
  shopauditorid_ = 0;
  clear_has_shopauditorid();
}
inline ::google::protobuf::int32 GL_OrderInfo::shopauditorid() const {
  return shopauditorid_;
}
inline void GL_OrderInfo::set_shopauditorid(::google::protobuf::int32 value) {
  set_has_shopauditorid();
  shopauditorid_ = value;
}

// optional int32 ShopCommitorID = 11;
inline bool GL_OrderInfo::has_shopcommitorid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GL_OrderInfo::set_has_shopcommitorid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GL_OrderInfo::clear_has_shopcommitorid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GL_OrderInfo::clear_shopcommitorid() {
  shopcommitorid_ = 0;
  clear_has_shopcommitorid();
}
inline ::google::protobuf::int32 GL_OrderInfo::shopcommitorid() const {
  return shopcommitorid_;
}
inline void GL_OrderInfo::set_shopcommitorid(::google::protobuf::int32 value) {
  set_has_shopcommitorid();
  shopcommitorid_ = value;
}

// optional int32 FactoryGraphAuditorID = 12;
inline bool GL_OrderInfo::has_factorygraphauditorid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GL_OrderInfo::set_has_factorygraphauditorid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GL_OrderInfo::clear_has_factorygraphauditorid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GL_OrderInfo::clear_factorygraphauditorid() {
  factorygraphauditorid_ = 0;
  clear_has_factorygraphauditorid();
}
inline ::google::protobuf::int32 GL_OrderInfo::factorygraphauditorid() const {
  return factorygraphauditorid_;
}
inline void GL_OrderInfo::set_factorygraphauditorid(::google::protobuf::int32 value) {
  set_has_factorygraphauditorid();
  factorygraphauditorid_ = value;
}

// optional int32 FactoryListAuditorID = 13;
inline bool GL_OrderInfo::has_factorylistauditorid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GL_OrderInfo::set_has_factorylistauditorid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GL_OrderInfo::clear_has_factorylistauditorid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GL_OrderInfo::clear_factorylistauditorid() {
  factorylistauditorid_ = 0;
  clear_has_factorylistauditorid();
}
inline ::google::protobuf::int32 GL_OrderInfo::factorylistauditorid() const {
  return factorylistauditorid_;
}
inline void GL_OrderInfo::set_factorylistauditorid(::google::protobuf::int32 value) {
  set_has_factorylistauditorid();
  factorylistauditorid_ = value;
}

// optional int32 FactoryFinanceAuditorID = 14;
inline bool GL_OrderInfo::has_factoryfinanceauditorid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GL_OrderInfo::set_has_factoryfinanceauditorid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GL_OrderInfo::clear_has_factoryfinanceauditorid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GL_OrderInfo::clear_factoryfinanceauditorid() {
  factoryfinanceauditorid_ = 0;
  clear_has_factoryfinanceauditorid();
}
inline ::google::protobuf::int32 GL_OrderInfo::factoryfinanceauditorid() const {
  return factoryfinanceauditorid_;
}
inline void GL_OrderInfo::set_factoryfinanceauditorid(::google::protobuf::int32 value) {
  set_has_factoryfinanceauditorid();
  factoryfinanceauditorid_ = value;
}

// optional int64 ShopAuditTime = 15;
inline bool GL_OrderInfo::has_shopaudittime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GL_OrderInfo::set_has_shopaudittime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GL_OrderInfo::clear_has_shopaudittime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GL_OrderInfo::clear_shopaudittime() {
  shopaudittime_ = GOOGLE_LONGLONG(0);
  clear_has_shopaudittime();
}
inline ::google::protobuf::int64 GL_OrderInfo::shopaudittime() const {
  return shopaudittime_;
}
inline void GL_OrderInfo::set_shopaudittime(::google::protobuf::int64 value) {
  set_has_shopaudittime();
  shopaudittime_ = value;
}

// optional int64 ShopCommitTime = 16;
inline bool GL_OrderInfo::has_shopcommittime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GL_OrderInfo::set_has_shopcommittime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GL_OrderInfo::clear_has_shopcommittime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GL_OrderInfo::clear_shopcommittime() {
  shopcommittime_ = GOOGLE_LONGLONG(0);
  clear_has_shopcommittime();
}
inline ::google::protobuf::int64 GL_OrderInfo::shopcommittime() const {
  return shopcommittime_;
}
inline void GL_OrderInfo::set_shopcommittime(::google::protobuf::int64 value) {
  set_has_shopcommittime();
  shopcommittime_ = value;
}

// optional int64 GraphAuditTime = 17;
inline bool GL_OrderInfo::has_graphaudittime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GL_OrderInfo::set_has_graphaudittime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GL_OrderInfo::clear_has_graphaudittime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GL_OrderInfo::clear_graphaudittime() {
  graphaudittime_ = GOOGLE_LONGLONG(0);
  clear_has_graphaudittime();
}
inline ::google::protobuf::int64 GL_OrderInfo::graphaudittime() const {
  return graphaudittime_;
}
inline void GL_OrderInfo::set_graphaudittime(::google::protobuf::int64 value) {
  set_has_graphaudittime();
  graphaudittime_ = value;
}

// optional int64 ListAuditTime = 18;
inline bool GL_OrderInfo::has_listaudittime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GL_OrderInfo::set_has_listaudittime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GL_OrderInfo::clear_has_listaudittime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GL_OrderInfo::clear_listaudittime() {
  listaudittime_ = GOOGLE_LONGLONG(0);
  clear_has_listaudittime();
}
inline ::google::protobuf::int64 GL_OrderInfo::listaudittime() const {
  return listaudittime_;
}
inline void GL_OrderInfo::set_listaudittime(::google::protobuf::int64 value) {
  set_has_listaudittime();
  listaudittime_ = value;
}

// optional int64 FinanceAuditTime = 19;
inline bool GL_OrderInfo::has_financeaudittime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GL_OrderInfo::set_has_financeaudittime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GL_OrderInfo::clear_has_financeaudittime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GL_OrderInfo::clear_financeaudittime() {
  financeaudittime_ = GOOGLE_LONGLONG(0);
  clear_has_financeaudittime();
}
inline ::google::protobuf::int64 GL_OrderInfo::financeaudittime() const {
  return financeaudittime_;
}
inline void GL_OrderInfo::set_financeaudittime(::google::protobuf::int64 value) {
  set_has_financeaudittime();
  financeaudittime_ = value;
}

// optional string OrderCode = 20;
inline bool GL_OrderInfo::has_ordercode() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GL_OrderInfo::set_has_ordercode() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GL_OrderInfo::clear_has_ordercode() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GL_OrderInfo::clear_ordercode() {
  if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
    ordercode_->clear();
  }
  clear_has_ordercode();
}
inline const ::std::string& GL_OrderInfo::ordercode() const {
  return *ordercode_;
}
inline void GL_OrderInfo::set_ordercode(const ::std::string& value) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(value);
}
inline void GL_OrderInfo::set_ordercode(const char* value) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(value);
}
inline void GL_OrderInfo::set_ordercode(const char* value, size_t size) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_OrderInfo::mutable_ordercode() {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  return ordercode_;
}
inline ::std::string* GL_OrderInfo::release_ordercode() {
  clear_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ordercode_;
    ordercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_OrderInfo::set_allocated_ordercode(::std::string* ordercode) {
  if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
    delete ordercode_;
  }
  if (ordercode) {
    set_has_ordercode();
    ordercode_ = ordercode;
  } else {
    clear_has_ordercode();
    ordercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ShopAuditContent = 21;
inline bool GL_OrderInfo::has_shopauditcontent() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GL_OrderInfo::set_has_shopauditcontent() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GL_OrderInfo::clear_has_shopauditcontent() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GL_OrderInfo::clear_shopauditcontent() {
  if (shopauditcontent_ != &::google::protobuf::internal::kEmptyString) {
    shopauditcontent_->clear();
  }
  clear_has_shopauditcontent();
}
inline const ::std::string& GL_OrderInfo::shopauditcontent() const {
  return *shopauditcontent_;
}
inline void GL_OrderInfo::set_shopauditcontent(const ::std::string& value) {
  set_has_shopauditcontent();
  if (shopauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    shopauditcontent_ = new ::std::string;
  }
  shopauditcontent_->assign(value);
}
inline void GL_OrderInfo::set_shopauditcontent(const char* value) {
  set_has_shopauditcontent();
  if (shopauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    shopauditcontent_ = new ::std::string;
  }
  shopauditcontent_->assign(value);
}
inline void GL_OrderInfo::set_shopauditcontent(const char* value, size_t size) {
  set_has_shopauditcontent();
  if (shopauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    shopauditcontent_ = new ::std::string;
  }
  shopauditcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_OrderInfo::mutable_shopauditcontent() {
  set_has_shopauditcontent();
  if (shopauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    shopauditcontent_ = new ::std::string;
  }
  return shopauditcontent_;
}
inline ::std::string* GL_OrderInfo::release_shopauditcontent() {
  clear_has_shopauditcontent();
  if (shopauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shopauditcontent_;
    shopauditcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_OrderInfo::set_allocated_shopauditcontent(::std::string* shopauditcontent) {
  if (shopauditcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete shopauditcontent_;
  }
  if (shopauditcontent) {
    set_has_shopauditcontent();
    shopauditcontent_ = shopauditcontent;
  } else {
    clear_has_shopauditcontent();
    shopauditcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ShopCommitContent = 22;
inline bool GL_OrderInfo::has_shopcommitcontent() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GL_OrderInfo::set_has_shopcommitcontent() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GL_OrderInfo::clear_has_shopcommitcontent() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GL_OrderInfo::clear_shopcommitcontent() {
  if (shopcommitcontent_ != &::google::protobuf::internal::kEmptyString) {
    shopcommitcontent_->clear();
  }
  clear_has_shopcommitcontent();
}
inline const ::std::string& GL_OrderInfo::shopcommitcontent() const {
  return *shopcommitcontent_;
}
inline void GL_OrderInfo::set_shopcommitcontent(const ::std::string& value) {
  set_has_shopcommitcontent();
  if (shopcommitcontent_ == &::google::protobuf::internal::kEmptyString) {
    shopcommitcontent_ = new ::std::string;
  }
  shopcommitcontent_->assign(value);
}
inline void GL_OrderInfo::set_shopcommitcontent(const char* value) {
  set_has_shopcommitcontent();
  if (shopcommitcontent_ == &::google::protobuf::internal::kEmptyString) {
    shopcommitcontent_ = new ::std::string;
  }
  shopcommitcontent_->assign(value);
}
inline void GL_OrderInfo::set_shopcommitcontent(const char* value, size_t size) {
  set_has_shopcommitcontent();
  if (shopcommitcontent_ == &::google::protobuf::internal::kEmptyString) {
    shopcommitcontent_ = new ::std::string;
  }
  shopcommitcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_OrderInfo::mutable_shopcommitcontent() {
  set_has_shopcommitcontent();
  if (shopcommitcontent_ == &::google::protobuf::internal::kEmptyString) {
    shopcommitcontent_ = new ::std::string;
  }
  return shopcommitcontent_;
}
inline ::std::string* GL_OrderInfo::release_shopcommitcontent() {
  clear_has_shopcommitcontent();
  if (shopcommitcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shopcommitcontent_;
    shopcommitcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_OrderInfo::set_allocated_shopcommitcontent(::std::string* shopcommitcontent) {
  if (shopcommitcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete shopcommitcontent_;
  }
  if (shopcommitcontent) {
    set_has_shopcommitcontent();
    shopcommitcontent_ = shopcommitcontent;
  } else {
    clear_has_shopcommitcontent();
    shopcommitcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string GraphAuditContent = 23;
inline bool GL_OrderInfo::has_graphauditcontent() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GL_OrderInfo::set_has_graphauditcontent() {
  _has_bits_[0] |= 0x00400000u;
}
inline void GL_OrderInfo::clear_has_graphauditcontent() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void GL_OrderInfo::clear_graphauditcontent() {
  if (graphauditcontent_ != &::google::protobuf::internal::kEmptyString) {
    graphauditcontent_->clear();
  }
  clear_has_graphauditcontent();
}
inline const ::std::string& GL_OrderInfo::graphauditcontent() const {
  return *graphauditcontent_;
}
inline void GL_OrderInfo::set_graphauditcontent(const ::std::string& value) {
  set_has_graphauditcontent();
  if (graphauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    graphauditcontent_ = new ::std::string;
  }
  graphauditcontent_->assign(value);
}
inline void GL_OrderInfo::set_graphauditcontent(const char* value) {
  set_has_graphauditcontent();
  if (graphauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    graphauditcontent_ = new ::std::string;
  }
  graphauditcontent_->assign(value);
}
inline void GL_OrderInfo::set_graphauditcontent(const char* value, size_t size) {
  set_has_graphauditcontent();
  if (graphauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    graphauditcontent_ = new ::std::string;
  }
  graphauditcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_OrderInfo::mutable_graphauditcontent() {
  set_has_graphauditcontent();
  if (graphauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    graphauditcontent_ = new ::std::string;
  }
  return graphauditcontent_;
}
inline ::std::string* GL_OrderInfo::release_graphauditcontent() {
  clear_has_graphauditcontent();
  if (graphauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = graphauditcontent_;
    graphauditcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_OrderInfo::set_allocated_graphauditcontent(::std::string* graphauditcontent) {
  if (graphauditcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete graphauditcontent_;
  }
  if (graphauditcontent) {
    set_has_graphauditcontent();
    graphauditcontent_ = graphauditcontent;
  } else {
    clear_has_graphauditcontent();
    graphauditcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ListAuditContent = 24;
inline bool GL_OrderInfo::has_listauditcontent() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void GL_OrderInfo::set_has_listauditcontent() {
  _has_bits_[0] |= 0x00800000u;
}
inline void GL_OrderInfo::clear_has_listauditcontent() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void GL_OrderInfo::clear_listauditcontent() {
  if (listauditcontent_ != &::google::protobuf::internal::kEmptyString) {
    listauditcontent_->clear();
  }
  clear_has_listauditcontent();
}
inline const ::std::string& GL_OrderInfo::listauditcontent() const {
  return *listauditcontent_;
}
inline void GL_OrderInfo::set_listauditcontent(const ::std::string& value) {
  set_has_listauditcontent();
  if (listauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    listauditcontent_ = new ::std::string;
  }
  listauditcontent_->assign(value);
}
inline void GL_OrderInfo::set_listauditcontent(const char* value) {
  set_has_listauditcontent();
  if (listauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    listauditcontent_ = new ::std::string;
  }
  listauditcontent_->assign(value);
}
inline void GL_OrderInfo::set_listauditcontent(const char* value, size_t size) {
  set_has_listauditcontent();
  if (listauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    listauditcontent_ = new ::std::string;
  }
  listauditcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_OrderInfo::mutable_listauditcontent() {
  set_has_listauditcontent();
  if (listauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    listauditcontent_ = new ::std::string;
  }
  return listauditcontent_;
}
inline ::std::string* GL_OrderInfo::release_listauditcontent() {
  clear_has_listauditcontent();
  if (listauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = listauditcontent_;
    listauditcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_OrderInfo::set_allocated_listauditcontent(::std::string* listauditcontent) {
  if (listauditcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete listauditcontent_;
  }
  if (listauditcontent) {
    set_has_listauditcontent();
    listauditcontent_ = listauditcontent;
  } else {
    clear_has_listauditcontent();
    listauditcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FinanceAuditContent = 25;
inline bool GL_OrderInfo::has_financeauditcontent() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void GL_OrderInfo::set_has_financeauditcontent() {
  _has_bits_[0] |= 0x01000000u;
}
inline void GL_OrderInfo::clear_has_financeauditcontent() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void GL_OrderInfo::clear_financeauditcontent() {
  if (financeauditcontent_ != &::google::protobuf::internal::kEmptyString) {
    financeauditcontent_->clear();
  }
  clear_has_financeauditcontent();
}
inline const ::std::string& GL_OrderInfo::financeauditcontent() const {
  return *financeauditcontent_;
}
inline void GL_OrderInfo::set_financeauditcontent(const ::std::string& value) {
  set_has_financeauditcontent();
  if (financeauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    financeauditcontent_ = new ::std::string;
  }
  financeauditcontent_->assign(value);
}
inline void GL_OrderInfo::set_financeauditcontent(const char* value) {
  set_has_financeauditcontent();
  if (financeauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    financeauditcontent_ = new ::std::string;
  }
  financeauditcontent_->assign(value);
}
inline void GL_OrderInfo::set_financeauditcontent(const char* value, size_t size) {
  set_has_financeauditcontent();
  if (financeauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    financeauditcontent_ = new ::std::string;
  }
  financeauditcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_OrderInfo::mutable_financeauditcontent() {
  set_has_financeauditcontent();
  if (financeauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    financeauditcontent_ = new ::std::string;
  }
  return financeauditcontent_;
}
inline ::std::string* GL_OrderInfo::release_financeauditcontent() {
  clear_has_financeauditcontent();
  if (financeauditcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = financeauditcontent_;
    financeauditcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_OrderInfo::set_allocated_financeauditcontent(::std::string* financeauditcontent) {
  if (financeauditcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete financeauditcontent_;
  }
  if (financeauditcontent) {
    set_has_financeauditcontent();
    financeauditcontent_ = financeauditcontent;
  } else {
    clear_has_financeauditcontent();
    financeauditcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_PinYin

// optional string PYCode = 1;
inline bool GL_PinYin::has_pycode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_PinYin::set_has_pycode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_PinYin::clear_has_pycode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_PinYin::clear_pycode() {
  if (pycode_ != &::google::protobuf::internal::kEmptyString) {
    pycode_->clear();
  }
  clear_has_pycode();
}
inline const ::std::string& GL_PinYin::pycode() const {
  return *pycode_;
}
inline void GL_PinYin::set_pycode(const ::std::string& value) {
  set_has_pycode();
  if (pycode_ == &::google::protobuf::internal::kEmptyString) {
    pycode_ = new ::std::string;
  }
  pycode_->assign(value);
}
inline void GL_PinYin::set_pycode(const char* value) {
  set_has_pycode();
  if (pycode_ == &::google::protobuf::internal::kEmptyString) {
    pycode_ = new ::std::string;
  }
  pycode_->assign(value);
}
inline void GL_PinYin::set_pycode(const char* value, size_t size) {
  set_has_pycode();
  if (pycode_ == &::google::protobuf::internal::kEmptyString) {
    pycode_ = new ::std::string;
  }
  pycode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_PinYin::mutable_pycode() {
  set_has_pycode();
  if (pycode_ == &::google::protobuf::internal::kEmptyString) {
    pycode_ = new ::std::string;
  }
  return pycode_;
}
inline ::std::string* GL_PinYin::release_pycode() {
  clear_has_pycode();
  if (pycode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pycode_;
    pycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_PinYin::set_allocated_pycode(::std::string* pycode) {
  if (pycode_ != &::google::protobuf::internal::kEmptyString) {
    delete pycode_;
  }
  if (pycode) {
    set_has_pycode();
    pycode_ = pycode;
  } else {
    clear_has_pycode();
    pycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string PYName = 2;
inline bool GL_PinYin::has_pyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_PinYin::set_has_pyname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_PinYin::clear_has_pyname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_PinYin::clear_pyname() {
  if (pyname_ != &::google::protobuf::internal::kEmptyString) {
    pyname_->clear();
  }
  clear_has_pyname();
}
inline const ::std::string& GL_PinYin::pyname() const {
  return *pyname_;
}
inline void GL_PinYin::set_pyname(const ::std::string& value) {
  set_has_pyname();
  if (pyname_ == &::google::protobuf::internal::kEmptyString) {
    pyname_ = new ::std::string;
  }
  pyname_->assign(value);
}
inline void GL_PinYin::set_pyname(const char* value) {
  set_has_pyname();
  if (pyname_ == &::google::protobuf::internal::kEmptyString) {
    pyname_ = new ::std::string;
  }
  pyname_->assign(value);
}
inline void GL_PinYin::set_pyname(const char* value, size_t size) {
  set_has_pyname();
  if (pyname_ == &::google::protobuf::internal::kEmptyString) {
    pyname_ = new ::std::string;
  }
  pyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_PinYin::mutable_pyname() {
  set_has_pyname();
  if (pyname_ == &::google::protobuf::internal::kEmptyString) {
    pyname_ = new ::std::string;
  }
  return pyname_;
}
inline ::std::string* GL_PinYin::release_pyname() {
  clear_has_pyname();
  if (pyname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pyname_;
    pyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_PinYin::set_allocated_pyname(::std::string* pyname) {
  if (pyname_ != &::google::protobuf::internal::kEmptyString) {
    delete pyname_;
  }
  if (pyname) {
    set_has_pyname();
    pyname_ = pyname;
  } else {
    clear_has_pyname();
    pyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_PrepaidCardInfo

// optional int32 CardID = 1;
inline bool GL_PrepaidCardInfo::has_cardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_PrepaidCardInfo::set_has_cardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_PrepaidCardInfo::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_PrepaidCardInfo::clear_cardid() {
  cardid_ = 0;
  clear_has_cardid();
}
inline ::google::protobuf::int32 GL_PrepaidCardInfo::cardid() const {
  return cardid_;
}
inline void GL_PrepaidCardInfo::set_cardid(::google::protobuf::int32 value) {
  set_has_cardid();
  cardid_ = value;
}

// optional int32 CardCategory = 2;
inline bool GL_PrepaidCardInfo::has_cardcategory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_PrepaidCardInfo::set_has_cardcategory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_PrepaidCardInfo::clear_has_cardcategory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_PrepaidCardInfo::clear_cardcategory() {
  cardcategory_ = 0;
  clear_has_cardcategory();
}
inline ::google::protobuf::int32 GL_PrepaidCardInfo::cardcategory() const {
  return cardcategory_;
}
inline void GL_PrepaidCardInfo::set_cardcategory(::google::protobuf::int32 value) {
  set_has_cardcategory();
  cardcategory_ = value;
}

// optional int32 CardType = 3;
inline bool GL_PrepaidCardInfo::has_cardtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_PrepaidCardInfo::set_has_cardtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_PrepaidCardInfo::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_PrepaidCardInfo::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 GL_PrepaidCardInfo::cardtype() const {
  return cardtype_;
}
inline void GL_PrepaidCardInfo::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
}

// optional int32 Period = 4;
inline bool GL_PrepaidCardInfo::has_period() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_PrepaidCardInfo::set_has_period() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_PrepaidCardInfo::clear_has_period() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_PrepaidCardInfo::clear_period() {
  period_ = 0;
  clear_has_period();
}
inline ::google::protobuf::int32 GL_PrepaidCardInfo::period() const {
  return period_;
}
inline void GL_PrepaidCardInfo::set_period(::google::protobuf::int32 value) {
  set_has_period();
  period_ = value;
}

// optional string SecureCode = 5;
inline bool GL_PrepaidCardInfo::has_securecode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GL_PrepaidCardInfo::set_has_securecode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GL_PrepaidCardInfo::clear_has_securecode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GL_PrepaidCardInfo::clear_securecode() {
  if (securecode_ != &::google::protobuf::internal::kEmptyString) {
    securecode_->clear();
  }
  clear_has_securecode();
}
inline const ::std::string& GL_PrepaidCardInfo::securecode() const {
  return *securecode_;
}
inline void GL_PrepaidCardInfo::set_securecode(const ::std::string& value) {
  set_has_securecode();
  if (securecode_ == &::google::protobuf::internal::kEmptyString) {
    securecode_ = new ::std::string;
  }
  securecode_->assign(value);
}
inline void GL_PrepaidCardInfo::set_securecode(const char* value) {
  set_has_securecode();
  if (securecode_ == &::google::protobuf::internal::kEmptyString) {
    securecode_ = new ::std::string;
  }
  securecode_->assign(value);
}
inline void GL_PrepaidCardInfo::set_securecode(const char* value, size_t size) {
  set_has_securecode();
  if (securecode_ == &::google::protobuf::internal::kEmptyString) {
    securecode_ = new ::std::string;
  }
  securecode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_PrepaidCardInfo::mutable_securecode() {
  set_has_securecode();
  if (securecode_ == &::google::protobuf::internal::kEmptyString) {
    securecode_ = new ::std::string;
  }
  return securecode_;
}
inline ::std::string* GL_PrepaidCardInfo::release_securecode() {
  clear_has_securecode();
  if (securecode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = securecode_;
    securecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_PrepaidCardInfo::set_allocated_securecode(::std::string* securecode) {
  if (securecode_ != &::google::protobuf::internal::kEmptyString) {
    delete securecode_;
  }
  if (securecode) {
    set_has_securecode();
    securecode_ = securecode;
  } else {
    clear_has_securecode();
    securecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string CardPwd = 6;
inline bool GL_PrepaidCardInfo::has_cardpwd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GL_PrepaidCardInfo::set_has_cardpwd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GL_PrepaidCardInfo::clear_has_cardpwd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GL_PrepaidCardInfo::clear_cardpwd() {
  if (cardpwd_ != &::google::protobuf::internal::kEmptyString) {
    cardpwd_->clear();
  }
  clear_has_cardpwd();
}
inline const ::std::string& GL_PrepaidCardInfo::cardpwd() const {
  return *cardpwd_;
}
inline void GL_PrepaidCardInfo::set_cardpwd(const ::std::string& value) {
  set_has_cardpwd();
  if (cardpwd_ == &::google::protobuf::internal::kEmptyString) {
    cardpwd_ = new ::std::string;
  }
  cardpwd_->assign(value);
}
inline void GL_PrepaidCardInfo::set_cardpwd(const char* value) {
  set_has_cardpwd();
  if (cardpwd_ == &::google::protobuf::internal::kEmptyString) {
    cardpwd_ = new ::std::string;
  }
  cardpwd_->assign(value);
}
inline void GL_PrepaidCardInfo::set_cardpwd(const char* value, size_t size) {
  set_has_cardpwd();
  if (cardpwd_ == &::google::protobuf::internal::kEmptyString) {
    cardpwd_ = new ::std::string;
  }
  cardpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_PrepaidCardInfo::mutable_cardpwd() {
  set_has_cardpwd();
  if (cardpwd_ == &::google::protobuf::internal::kEmptyString) {
    cardpwd_ = new ::std::string;
  }
  return cardpwd_;
}
inline ::std::string* GL_PrepaidCardInfo::release_cardpwd() {
  clear_has_cardpwd();
  if (cardpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardpwd_;
    cardpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_PrepaidCardInfo::set_allocated_cardpwd(::std::string* cardpwd) {
  if (cardpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete cardpwd_;
  }
  if (cardpwd) {
    set_has_cardpwd();
    cardpwd_ = cardpwd;
  } else {
    clear_has_cardpwd();
    cardpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string SerialNo = 7;
inline bool GL_PrepaidCardInfo::has_serialno() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GL_PrepaidCardInfo::set_has_serialno() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GL_PrepaidCardInfo::clear_has_serialno() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GL_PrepaidCardInfo::clear_serialno() {
  if (serialno_ != &::google::protobuf::internal::kEmptyString) {
    serialno_->clear();
  }
  clear_has_serialno();
}
inline const ::std::string& GL_PrepaidCardInfo::serialno() const {
  return *serialno_;
}
inline void GL_PrepaidCardInfo::set_serialno(const ::std::string& value) {
  set_has_serialno();
  if (serialno_ == &::google::protobuf::internal::kEmptyString) {
    serialno_ = new ::std::string;
  }
  serialno_->assign(value);
}
inline void GL_PrepaidCardInfo::set_serialno(const char* value) {
  set_has_serialno();
  if (serialno_ == &::google::protobuf::internal::kEmptyString) {
    serialno_ = new ::std::string;
  }
  serialno_->assign(value);
}
inline void GL_PrepaidCardInfo::set_serialno(const char* value, size_t size) {
  set_has_serialno();
  if (serialno_ == &::google::protobuf::internal::kEmptyString) {
    serialno_ = new ::std::string;
  }
  serialno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_PrepaidCardInfo::mutable_serialno() {
  set_has_serialno();
  if (serialno_ == &::google::protobuf::internal::kEmptyString) {
    serialno_ = new ::std::string;
  }
  return serialno_;
}
inline ::std::string* GL_PrepaidCardInfo::release_serialno() {
  clear_has_serialno();
  if (serialno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialno_;
    serialno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_PrepaidCardInfo::set_allocated_serialno(::std::string* serialno) {
  if (serialno_ != &::google::protobuf::internal::kEmptyString) {
    delete serialno_;
  }
  if (serialno) {
    set_has_serialno();
    serialno_ = serialno;
  } else {
    clear_has_serialno();
    serialno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string CardNo = 8;
inline bool GL_PrepaidCardInfo::has_cardno() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GL_PrepaidCardInfo::set_has_cardno() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GL_PrepaidCardInfo::clear_has_cardno() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GL_PrepaidCardInfo::clear_cardno() {
  if (cardno_ != &::google::protobuf::internal::kEmptyString) {
    cardno_->clear();
  }
  clear_has_cardno();
}
inline const ::std::string& GL_PrepaidCardInfo::cardno() const {
  return *cardno_;
}
inline void GL_PrepaidCardInfo::set_cardno(const ::std::string& value) {
  set_has_cardno();
  if (cardno_ == &::google::protobuf::internal::kEmptyString) {
    cardno_ = new ::std::string;
  }
  cardno_->assign(value);
}
inline void GL_PrepaidCardInfo::set_cardno(const char* value) {
  set_has_cardno();
  if (cardno_ == &::google::protobuf::internal::kEmptyString) {
    cardno_ = new ::std::string;
  }
  cardno_->assign(value);
}
inline void GL_PrepaidCardInfo::set_cardno(const char* value, size_t size) {
  set_has_cardno();
  if (cardno_ == &::google::protobuf::internal::kEmptyString) {
    cardno_ = new ::std::string;
  }
  cardno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_PrepaidCardInfo::mutable_cardno() {
  set_has_cardno();
  if (cardno_ == &::google::protobuf::internal::kEmptyString) {
    cardno_ = new ::std::string;
  }
  return cardno_;
}
inline ::std::string* GL_PrepaidCardInfo::release_cardno() {
  clear_has_cardno();
  if (cardno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardno_;
    cardno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_PrepaidCardInfo::set_allocated_cardno(::std::string* cardno) {
  if (cardno_ != &::google::protobuf::internal::kEmptyString) {
    delete cardno_;
  }
  if (cardno) {
    set_has_cardno();
    cardno_ = cardno;
  } else {
    clear_has_cardno();
    cardno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_PrintTemplateInfo

// optional int32 TemplateID = 1;
inline bool GL_PrintTemplateInfo::has_templateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_PrintTemplateInfo::set_has_templateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_PrintTemplateInfo::clear_has_templateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_PrintTemplateInfo::clear_templateid() {
  templateid_ = 0;
  clear_has_templateid();
}
inline ::google::protobuf::int32 GL_PrintTemplateInfo::templateid() const {
  return templateid_;
}
inline void GL_PrintTemplateInfo::set_templateid(::google::protobuf::int32 value) {
  set_has_templateid();
  templateid_ = value;
}

// optional int32 FactoryID = 2;
inline bool GL_PrintTemplateInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_PrintTemplateInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_PrintTemplateInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_PrintTemplateInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 GL_PrintTemplateInfo::factoryid() const {
  return factoryid_;
}
inline void GL_PrintTemplateInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// optional bool IsActive = 3;
inline bool GL_PrintTemplateInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_PrintTemplateInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_PrintTemplateInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_PrintTemplateInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool GL_PrintTemplateInfo::isactive() const {
  return isactive_;
}
inline void GL_PrintTemplateInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// optional string RelativePath = 4;
inline bool GL_PrintTemplateInfo::has_relativepath() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_PrintTemplateInfo::set_has_relativepath() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_PrintTemplateInfo::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_PrintTemplateInfo::clear_relativepath() {
  if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
    relativepath_->clear();
  }
  clear_has_relativepath();
}
inline const ::std::string& GL_PrintTemplateInfo::relativepath() const {
  return *relativepath_;
}
inline void GL_PrintTemplateInfo::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
}
inline void GL_PrintTemplateInfo::set_relativepath(const char* value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
}
inline void GL_PrintTemplateInfo::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_PrintTemplateInfo::mutable_relativepath() {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  return relativepath_;
}
inline ::std::string* GL_PrintTemplateInfo::release_relativepath() {
  clear_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = relativepath_;
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_PrintTemplateInfo::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
    delete relativepath_;
  }
  if (relativepath) {
    set_has_relativepath();
    relativepath_ = relativepath;
  } else {
    clear_has_relativepath();
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string TemplateName = 5;
inline bool GL_PrintTemplateInfo::has_templatename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GL_PrintTemplateInfo::set_has_templatename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GL_PrintTemplateInfo::clear_has_templatename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GL_PrintTemplateInfo::clear_templatename() {
  if (templatename_ != &::google::protobuf::internal::kEmptyString) {
    templatename_->clear();
  }
  clear_has_templatename();
}
inline const ::std::string& GL_PrintTemplateInfo::templatename() const {
  return *templatename_;
}
inline void GL_PrintTemplateInfo::set_templatename(const ::std::string& value) {
  set_has_templatename();
  if (templatename_ == &::google::protobuf::internal::kEmptyString) {
    templatename_ = new ::std::string;
  }
  templatename_->assign(value);
}
inline void GL_PrintTemplateInfo::set_templatename(const char* value) {
  set_has_templatename();
  if (templatename_ == &::google::protobuf::internal::kEmptyString) {
    templatename_ = new ::std::string;
  }
  templatename_->assign(value);
}
inline void GL_PrintTemplateInfo::set_templatename(const char* value, size_t size) {
  set_has_templatename();
  if (templatename_ == &::google::protobuf::internal::kEmptyString) {
    templatename_ = new ::std::string;
  }
  templatename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_PrintTemplateInfo::mutable_templatename() {
  set_has_templatename();
  if (templatename_ == &::google::protobuf::internal::kEmptyString) {
    templatename_ = new ::std::string;
  }
  return templatename_;
}
inline ::std::string* GL_PrintTemplateInfo::release_templatename() {
  clear_has_templatename();
  if (templatename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = templatename_;
    templatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_PrintTemplateInfo::set_allocated_templatename(::std::string* templatename) {
  if (templatename_ != &::google::protobuf::internal::kEmptyString) {
    delete templatename_;
  }
  if (templatename) {
    set_has_templatename();
    templatename_ = templatename;
  } else {
    clear_has_templatename();
    templatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string TemplateMemo = 6;
inline bool GL_PrintTemplateInfo::has_templatememo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GL_PrintTemplateInfo::set_has_templatememo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GL_PrintTemplateInfo::clear_has_templatememo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GL_PrintTemplateInfo::clear_templatememo() {
  if (templatememo_ != &::google::protobuf::internal::kEmptyString) {
    templatememo_->clear();
  }
  clear_has_templatememo();
}
inline const ::std::string& GL_PrintTemplateInfo::templatememo() const {
  return *templatememo_;
}
inline void GL_PrintTemplateInfo::set_templatememo(const ::std::string& value) {
  set_has_templatememo();
  if (templatememo_ == &::google::protobuf::internal::kEmptyString) {
    templatememo_ = new ::std::string;
  }
  templatememo_->assign(value);
}
inline void GL_PrintTemplateInfo::set_templatememo(const char* value) {
  set_has_templatememo();
  if (templatememo_ == &::google::protobuf::internal::kEmptyString) {
    templatememo_ = new ::std::string;
  }
  templatememo_->assign(value);
}
inline void GL_PrintTemplateInfo::set_templatememo(const char* value, size_t size) {
  set_has_templatememo();
  if (templatememo_ == &::google::protobuf::internal::kEmptyString) {
    templatememo_ = new ::std::string;
  }
  templatememo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_PrintTemplateInfo::mutable_templatememo() {
  set_has_templatememo();
  if (templatememo_ == &::google::protobuf::internal::kEmptyString) {
    templatememo_ = new ::std::string;
  }
  return templatememo_;
}
inline ::std::string* GL_PrintTemplateInfo::release_templatememo() {
  clear_has_templatememo();
  if (templatememo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = templatememo_;
    templatememo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_PrintTemplateInfo::set_allocated_templatememo(::std::string* templatememo) {
  if (templatememo_ != &::google::protobuf::internal::kEmptyString) {
    delete templatememo_;
  }
  if (templatememo) {
    set_has_templatememo();
    templatememo_ = templatememo;
  } else {
    clear_has_templatememo();
    templatememo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string HashCode = 7;
inline bool GL_PrintTemplateInfo::has_hashcode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GL_PrintTemplateInfo::set_has_hashcode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GL_PrintTemplateInfo::clear_has_hashcode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GL_PrintTemplateInfo::clear_hashcode() {
  if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
    hashcode_->clear();
  }
  clear_has_hashcode();
}
inline const ::std::string& GL_PrintTemplateInfo::hashcode() const {
  return *hashcode_;
}
inline void GL_PrintTemplateInfo::set_hashcode(const ::std::string& value) {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  hashcode_->assign(value);
}
inline void GL_PrintTemplateInfo::set_hashcode(const char* value) {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  hashcode_->assign(value);
}
inline void GL_PrintTemplateInfo::set_hashcode(const char* value, size_t size) {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  hashcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_PrintTemplateInfo::mutable_hashcode() {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  return hashcode_;
}
inline ::std::string* GL_PrintTemplateInfo::release_hashcode() {
  clear_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hashcode_;
    hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_PrintTemplateInfo::set_allocated_hashcode(::std::string* hashcode) {
  if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
    delete hashcode_;
  }
  if (hashcode) {
    set_has_hashcode();
    hashcode_ = hashcode;
  } else {
    clear_has_hashcode();
    hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_RoleInfo

// optional int32 RoleID = 1;
inline bool GL_RoleInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_RoleInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_RoleInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_RoleInfo::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GL_RoleInfo::roleid() const {
  return roleid_;
}
inline void GL_RoleInfo::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 DeptID = 2;
inline bool GL_RoleInfo::has_deptid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_RoleInfo::set_has_deptid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_RoleInfo::clear_has_deptid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_RoleInfo::clear_deptid() {
  deptid_ = 0;
  clear_has_deptid();
}
inline ::google::protobuf::int32 GL_RoleInfo::deptid() const {
  return deptid_;
}
inline void GL_RoleInfo::set_deptid(::google::protobuf::int32 value) {
  set_has_deptid();
  deptid_ = value;
}

// optional int32 DTypeID = 3;
inline bool GL_RoleInfo::has_dtypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_RoleInfo::set_has_dtypeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_RoleInfo::clear_has_dtypeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_RoleInfo::clear_dtypeid() {
  dtypeid_ = 0;
  clear_has_dtypeid();
}
inline ::google::protobuf::int32 GL_RoleInfo::dtypeid() const {
  return dtypeid_;
}
inline void GL_RoleInfo::set_dtypeid(::google::protobuf::int32 value) {
  set_has_dtypeid();
  dtypeid_ = value;
}

// optional int32 CreatorID = 4;
inline bool GL_RoleInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_RoleInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_RoleInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_RoleInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 GL_RoleInfo::creatorid() const {
  return creatorid_;
}
inline void GL_RoleInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// optional int32 UpdaterID = 5;
inline bool GL_RoleInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GL_RoleInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GL_RoleInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GL_RoleInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 GL_RoleInfo::updaterid() const {
  return updaterid_;
}
inline void GL_RoleInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// optional int64 CreateTime = 6;
inline bool GL_RoleInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GL_RoleInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GL_RoleInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GL_RoleInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 GL_RoleInfo::createtime() const {
  return createtime_;
}
inline void GL_RoleInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional int64 UpdateTime = 7;
inline bool GL_RoleInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GL_RoleInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GL_RoleInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GL_RoleInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 GL_RoleInfo::updatetime() const {
  return updatetime_;
}
inline void GL_RoleInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// optional string RoleName = 8;
inline bool GL_RoleInfo::has_rolename() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GL_RoleInfo::set_has_rolename() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GL_RoleInfo::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GL_RoleInfo::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& GL_RoleInfo::rolename() const {
  return *rolename_;
}
inline void GL_RoleInfo::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void GL_RoleInfo::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void GL_RoleInfo::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_RoleInfo::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* GL_RoleInfo::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_RoleInfo::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_RoleRightInfo

// optional int32 RightID = 1;
inline bool GL_RoleRightInfo::has_rightid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_RoleRightInfo::set_has_rightid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_RoleRightInfo::clear_has_rightid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_RoleRightInfo::clear_rightid() {
  rightid_ = 0;
  clear_has_rightid();
}
inline ::google::protobuf::int32 GL_RoleRightInfo::rightid() const {
  return rightid_;
}
inline void GL_RoleRightInfo::set_rightid(::google::protobuf::int32 value) {
  set_has_rightid();
  rightid_ = value;
}

// optional int32 RightType = 2;
inline bool GL_RoleRightInfo::has_righttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_RoleRightInfo::set_has_righttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_RoleRightInfo::clear_has_righttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_RoleRightInfo::clear_righttype() {
  righttype_ = 0;
  clear_has_righttype();
}
inline ::google::protobuf::int32 GL_RoleRightInfo::righttype() const {
  return righttype_;
}
inline void GL_RoleRightInfo::set_righttype(::google::protobuf::int32 value) {
  set_has_righttype();
  righttype_ = value;
}

// optional int32 RoleID = 3;
inline bool GL_RoleRightInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_RoleRightInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_RoleRightInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_RoleRightInfo::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GL_RoleRightInfo::roleid() const {
  return roleid_;
}
inline void GL_RoleRightInfo::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// GL_SugarVerInfo

// optional int64 VerCode = 1;
inline bool GL_SugarVerInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_SugarVerInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_SugarVerInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_SugarVerInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 GL_SugarVerInfo::vercode() const {
  return vercode_;
}
inline void GL_SugarVerInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// optional int32 DeptID = 2;
inline bool GL_SugarVerInfo::has_deptid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_SugarVerInfo::set_has_deptid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_SugarVerInfo::clear_has_deptid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_SugarVerInfo::clear_deptid() {
  deptid_ = 0;
  clear_has_deptid();
}
inline ::google::protobuf::int32 GL_SugarVerInfo::deptid() const {
  return deptid_;
}
inline void GL_SugarVerInfo::set_deptid(::google::protobuf::int32 value) {
  set_has_deptid();
  deptid_ = value;
}

// optional int32 VerType = 3;
inline bool GL_SugarVerInfo::has_vertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_SugarVerInfo::set_has_vertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_SugarVerInfo::clear_has_vertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_SugarVerInfo::clear_vertype() {
  vertype_ = 0;
  clear_has_vertype();
}
inline ::google::protobuf::int32 GL_SugarVerInfo::vertype() const {
  return vertype_;
}
inline void GL_SugarVerInfo::set_vertype(::google::protobuf::int32 value) {
  set_has_vertype();
  vertype_ = value;
}

// optional int32 VerIndex = 4;
inline bool GL_SugarVerInfo::has_verindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_SugarVerInfo::set_has_verindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_SugarVerInfo::clear_has_verindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_SugarVerInfo::clear_verindex() {
  verindex_ = 0;
  clear_has_verindex();
}
inline ::google::protobuf::int32 GL_SugarVerInfo::verindex() const {
  return verindex_;
}
inline void GL_SugarVerInfo::set_verindex(::google::protobuf::int32 value) {
  set_has_verindex();
  verindex_ = value;
}

// optional int32 UploadStatus = 5;
inline bool GL_SugarVerInfo::has_uploadstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GL_SugarVerInfo::set_has_uploadstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GL_SugarVerInfo::clear_has_uploadstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GL_SugarVerInfo::clear_uploadstatus() {
  uploadstatus_ = 0;
  clear_has_uploadstatus();
}
inline ::google::protobuf::int32 GL_SugarVerInfo::uploadstatus() const {
  return uploadstatus_;
}
inline void GL_SugarVerInfo::set_uploadstatus(::google::protobuf::int32 value) {
  set_has_uploadstatus();
  uploadstatus_ = value;
}

// optional int32 FileCount = 6;
inline bool GL_SugarVerInfo::has_filecount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GL_SugarVerInfo::set_has_filecount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GL_SugarVerInfo::clear_has_filecount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GL_SugarVerInfo::clear_filecount() {
  filecount_ = 0;
  clear_has_filecount();
}
inline ::google::protobuf::int32 GL_SugarVerInfo::filecount() const {
  return filecount_;
}
inline void GL_SugarVerInfo::set_filecount(::google::protobuf::int32 value) {
  set_has_filecount();
  filecount_ = value;
}

// optional int32 VerDBState = 7;
inline bool GL_SugarVerInfo::has_verdbstate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GL_SugarVerInfo::set_has_verdbstate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GL_SugarVerInfo::clear_has_verdbstate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GL_SugarVerInfo::clear_verdbstate() {
  verdbstate_ = 0;
  clear_has_verdbstate();
}
inline ::google::protobuf::int32 GL_SugarVerInfo::verdbstate() const {
  return verdbstate_;
}
inline void GL_SugarVerInfo::set_verdbstate(::google::protobuf::int32 value) {
  set_has_verdbstate();
  verdbstate_ = value;
}

// optional int32 CreatorID = 8;
inline bool GL_SugarVerInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GL_SugarVerInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GL_SugarVerInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GL_SugarVerInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 GL_SugarVerInfo::creatorid() const {
  return creatorid_;
}
inline void GL_SugarVerInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// optional int64 StartTime = 9;
inline bool GL_SugarVerInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GL_SugarVerInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GL_SugarVerInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GL_SugarVerInfo::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 GL_SugarVerInfo::starttime() const {
  return starttime_;
}
inline void GL_SugarVerInfo::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
}

// optional int64 StopTime = 10;
inline bool GL_SugarVerInfo::has_stoptime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GL_SugarVerInfo::set_has_stoptime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GL_SugarVerInfo::clear_has_stoptime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GL_SugarVerInfo::clear_stoptime() {
  stoptime_ = GOOGLE_LONGLONG(0);
  clear_has_stoptime();
}
inline ::google::protobuf::int64 GL_SugarVerInfo::stoptime() const {
  return stoptime_;
}
inline void GL_SugarVerInfo::set_stoptime(::google::protobuf::int64 value) {
  set_has_stoptime();
  stoptime_ = value;
}

// optional int64 CreateTime = 11;
inline bool GL_SugarVerInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GL_SugarVerInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GL_SugarVerInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GL_SugarVerInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 GL_SugarVerInfo::createtime() const {
  return createtime_;
}
inline void GL_SugarVerInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional string VerMemo = 12;
inline bool GL_SugarVerInfo::has_vermemo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GL_SugarVerInfo::set_has_vermemo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GL_SugarVerInfo::clear_has_vermemo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GL_SugarVerInfo::clear_vermemo() {
  if (vermemo_ != &::google::protobuf::internal::kEmptyString) {
    vermemo_->clear();
  }
  clear_has_vermemo();
}
inline const ::std::string& GL_SugarVerInfo::vermemo() const {
  return *vermemo_;
}
inline void GL_SugarVerInfo::set_vermemo(const ::std::string& value) {
  set_has_vermemo();
  if (vermemo_ == &::google::protobuf::internal::kEmptyString) {
    vermemo_ = new ::std::string;
  }
  vermemo_->assign(value);
}
inline void GL_SugarVerInfo::set_vermemo(const char* value) {
  set_has_vermemo();
  if (vermemo_ == &::google::protobuf::internal::kEmptyString) {
    vermemo_ = new ::std::string;
  }
  vermemo_->assign(value);
}
inline void GL_SugarVerInfo::set_vermemo(const char* value, size_t size) {
  set_has_vermemo();
  if (vermemo_ == &::google::protobuf::internal::kEmptyString) {
    vermemo_ = new ::std::string;
  }
  vermemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_SugarVerInfo::mutable_vermemo() {
  set_has_vermemo();
  if (vermemo_ == &::google::protobuf::internal::kEmptyString) {
    vermemo_ = new ::std::string;
  }
  return vermemo_;
}
inline ::std::string* GL_SugarVerInfo::release_vermemo() {
  clear_has_vermemo();
  if (vermemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vermemo_;
    vermemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_SugarVerInfo::set_allocated_vermemo(::std::string* vermemo) {
  if (vermemo_ != &::google::protobuf::internal::kEmptyString) {
    delete vermemo_;
  }
  if (vermemo) {
    set_has_vermemo();
    vermemo_ = vermemo;
  } else {
    clear_has_vermemo();
    vermemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GL_TransferOrderInfo

// optional int64 RecordID = 1;
inline bool GL_TransferOrderInfo::has_recordid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_TransferOrderInfo::set_has_recordid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_TransferOrderInfo::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_TransferOrderInfo::clear_recordid() {
  recordid_ = GOOGLE_LONGLONG(0);
  clear_has_recordid();
}
inline ::google::protobuf::int64 GL_TransferOrderInfo::recordid() const {
  return recordid_;
}
inline void GL_TransferOrderInfo::set_recordid(::google::protobuf::int64 value) {
  set_has_recordid();
  recordid_ = value;
}

// optional int32 TransferByUserID = 2;
inline bool GL_TransferOrderInfo::has_transferbyuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_TransferOrderInfo::set_has_transferbyuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_TransferOrderInfo::clear_has_transferbyuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_TransferOrderInfo::clear_transferbyuserid() {
  transferbyuserid_ = 0;
  clear_has_transferbyuserid();
}
inline ::google::protobuf::int32 GL_TransferOrderInfo::transferbyuserid() const {
  return transferbyuserid_;
}
inline void GL_TransferOrderInfo::set_transferbyuserid(::google::protobuf::int32 value) {
  set_has_transferbyuserid();
  transferbyuserid_ = value;
}

// optional int32 TransferToUserID = 3;
inline bool GL_TransferOrderInfo::has_transfertouserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_TransferOrderInfo::set_has_transfertouserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_TransferOrderInfo::clear_has_transfertouserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_TransferOrderInfo::clear_transfertouserid() {
  transfertouserid_ = 0;
  clear_has_transfertouserid();
}
inline ::google::protobuf::int32 GL_TransferOrderInfo::transfertouserid() const {
  return transfertouserid_;
}
inline void GL_TransferOrderInfo::set_transfertouserid(::google::protobuf::int32 value) {
  set_has_transfertouserid();
  transfertouserid_ = value;
}

// -------------------------------------------------------------------

// GL_UnitInfo

// optional int32 UnitID = 1;
inline bool GL_UnitInfo::has_unitid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_UnitInfo::set_has_unitid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_UnitInfo::clear_has_unitid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_UnitInfo::clear_unitid() {
  unitid_ = 0;
  clear_has_unitid();
}
inline ::google::protobuf::int32 GL_UnitInfo::unitid() const {
  return unitid_;
}
inline void GL_UnitInfo::set_unitid(::google::protobuf::int32 value) {
  set_has_unitid();
  unitid_ = value;
}

// optional int32 GTypeID = 2;
inline bool GL_UnitInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_UnitInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_UnitInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_UnitInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 GL_UnitInfo::gtypeid() const {
  return gtypeid_;
}
inline void GL_UnitInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// optional string UnitName = 3;
inline bool GL_UnitInfo::has_unitname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_UnitInfo::set_has_unitname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_UnitInfo::clear_has_unitname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_UnitInfo::clear_unitname() {
  if (unitname_ != &::google::protobuf::internal::kEmptyString) {
    unitname_->clear();
  }
  clear_has_unitname();
}
inline const ::std::string& GL_UnitInfo::unitname() const {
  return *unitname_;
}
inline void GL_UnitInfo::set_unitname(const ::std::string& value) {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void GL_UnitInfo::set_unitname(const char* value) {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void GL_UnitInfo::set_unitname(const char* value, size_t size) {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_UnitInfo::mutable_unitname() {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    unitname_ = new ::std::string;
  }
  return unitname_;
}
inline ::std::string* GL_UnitInfo::release_unitname() {
  clear_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitname_;
    unitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_UnitInfo::set_allocated_unitname(::std::string* unitname) {
  if (unitname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitname_;
  }
  if (unitname) {
    set_has_unitname();
    unitname_ = unitname;
  } else {
    clear_has_unitname();
    unitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 CreatorID = 4;
inline bool GL_UnitInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_UnitInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_UnitInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_UnitInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 GL_UnitInfo::creatorid() const {
  return creatorid_;
}
inline void GL_UnitInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// optional int32 UpdaterID = 5;
inline bool GL_UnitInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GL_UnitInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GL_UnitInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GL_UnitInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 GL_UnitInfo::updaterid() const {
  return updaterid_;
}
inline void GL_UnitInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// optional int64 CreateTime = 6;
inline bool GL_UnitInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GL_UnitInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GL_UnitInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GL_UnitInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 GL_UnitInfo::createtime() const {
  return createtime_;
}
inline void GL_UnitInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional int64 UpdateTime = 7;
inline bool GL_UnitInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GL_UnitInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GL_UnitInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GL_UnitInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 GL_UnitInfo::updatetime() const {
  return updatetime_;
}
inline void GL_UnitInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// GL_UserActivationInfo

// optional int32 UserID = 1;
inline bool GL_UserActivationInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_UserActivationInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_UserActivationInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_UserActivationInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 GL_UserActivationInfo::userid() const {
  return userid_;
}
inline void GL_UserActivationInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string ActivationCode = 2;
inline bool GL_UserActivationInfo::has_activationcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_UserActivationInfo::set_has_activationcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_UserActivationInfo::clear_has_activationcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_UserActivationInfo::clear_activationcode() {
  if (activationcode_ != &::google::protobuf::internal::kEmptyString) {
    activationcode_->clear();
  }
  clear_has_activationcode();
}
inline const ::std::string& GL_UserActivationInfo::activationcode() const {
  return *activationcode_;
}
inline void GL_UserActivationInfo::set_activationcode(const ::std::string& value) {
  set_has_activationcode();
  if (activationcode_ == &::google::protobuf::internal::kEmptyString) {
    activationcode_ = new ::std::string;
  }
  activationcode_->assign(value);
}
inline void GL_UserActivationInfo::set_activationcode(const char* value) {
  set_has_activationcode();
  if (activationcode_ == &::google::protobuf::internal::kEmptyString) {
    activationcode_ = new ::std::string;
  }
  activationcode_->assign(value);
}
inline void GL_UserActivationInfo::set_activationcode(const char* value, size_t size) {
  set_has_activationcode();
  if (activationcode_ == &::google::protobuf::internal::kEmptyString) {
    activationcode_ = new ::std::string;
  }
  activationcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_UserActivationInfo::mutable_activationcode() {
  set_has_activationcode();
  if (activationcode_ == &::google::protobuf::internal::kEmptyString) {
    activationcode_ = new ::std::string;
  }
  return activationcode_;
}
inline ::std::string* GL_UserActivationInfo::release_activationcode() {
  clear_has_activationcode();
  if (activationcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activationcode_;
    activationcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_UserActivationInfo::set_allocated_activationcode(::std::string* activationcode) {
  if (activationcode_ != &::google::protobuf::internal::kEmptyString) {
    delete activationcode_;
  }
  if (activationcode) {
    set_has_activationcode();
    activationcode_ = activationcode;
  } else {
    clear_has_activationcode();
    activationcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 TryCount = 3;
inline bool GL_UserActivationInfo::has_trycount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_UserActivationInfo::set_has_trycount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_UserActivationInfo::clear_has_trycount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_UserActivationInfo::clear_trycount() {
  trycount_ = 0;
  clear_has_trycount();
}
inline ::google::protobuf::int32 GL_UserActivationInfo::trycount() const {
  return trycount_;
}
inline void GL_UserActivationInfo::set_trycount(::google::protobuf::int32 value) {
  set_has_trycount();
  trycount_ = value;
}

// optional int64 LastTryTime = 4;
inline bool GL_UserActivationInfo::has_lasttrytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_UserActivationInfo::set_has_lasttrytime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_UserActivationInfo::clear_has_lasttrytime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_UserActivationInfo::clear_lasttrytime() {
  lasttrytime_ = GOOGLE_LONGLONG(0);
  clear_has_lasttrytime();
}
inline ::google::protobuf::int64 GL_UserActivationInfo::lasttrytime() const {
  return lasttrytime_;
}
inline void GL_UserActivationInfo::set_lasttrytime(::google::protobuf::int64 value) {
  set_has_lasttrytime();
  lasttrytime_ = value;
}

// -------------------------------------------------------------------

// GL_UserInfo

// optional int32 UserID = 1;
inline bool GL_UserInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GL_UserInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GL_UserInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GL_UserInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 GL_UserInfo::userid() const {
  return userid_;
}
inline void GL_UserInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 FactoryID = 2;
inline bool GL_UserInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GL_UserInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GL_UserInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GL_UserInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 GL_UserInfo::factoryid() const {
  return factoryid_;
}
inline void GL_UserInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// optional int32 ShopID = 3;
inline bool GL_UserInfo::has_shopid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GL_UserInfo::set_has_shopid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GL_UserInfo::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GL_UserInfo::clear_shopid() {
  shopid_ = 0;
  clear_has_shopid();
}
inline ::google::protobuf::int32 GL_UserInfo::shopid() const {
  return shopid_;
}
inline void GL_UserInfo::set_shopid(::google::protobuf::int32 value) {
  set_has_shopid();
  shopid_ = value;
}

// optional int32 DeptID = 4;
inline bool GL_UserInfo::has_deptid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GL_UserInfo::set_has_deptid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GL_UserInfo::clear_has_deptid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GL_UserInfo::clear_deptid() {
  deptid_ = 0;
  clear_has_deptid();
}
inline ::google::protobuf::int32 GL_UserInfo::deptid() const {
  return deptid_;
}
inline void GL_UserInfo::set_deptid(::google::protobuf::int32 value) {
  set_has_deptid();
  deptid_ = value;
}

// optional bool IsDel = 5;
inline bool GL_UserInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GL_UserInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GL_UserInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GL_UserInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool GL_UserInfo::isdel() const {
  return isdel_;
}
inline void GL_UserInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// optional int32 RoleID = 6;
inline bool GL_UserInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GL_UserInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GL_UserInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GL_UserInfo::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GL_UserInfo::roleid() const {
  return roleid_;
}
inline void GL_UserInfo::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 CreatorID = 7;
inline bool GL_UserInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GL_UserInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GL_UserInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GL_UserInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 GL_UserInfo::creatorid() const {
  return creatorid_;
}
inline void GL_UserInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// optional int32 UpdaterID = 8;
inline bool GL_UserInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GL_UserInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GL_UserInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GL_UserInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 GL_UserInfo::updaterid() const {
  return updaterid_;
}
inline void GL_UserInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// optional int64 CreateTime = 9;
inline bool GL_UserInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GL_UserInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GL_UserInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GL_UserInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 GL_UserInfo::createtime() const {
  return createtime_;
}
inline void GL_UserInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional int64 UpdateTime = 10;
inline bool GL_UserInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GL_UserInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GL_UserInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GL_UserInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 GL_UserInfo::updatetime() const {
  return updatetime_;
}
inline void GL_UserInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// optional string UserPwd = 11;
inline bool GL_UserInfo::has_userpwd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GL_UserInfo::set_has_userpwd() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GL_UserInfo::clear_has_userpwd() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GL_UserInfo::clear_userpwd() {
  if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
    userpwd_->clear();
  }
  clear_has_userpwd();
}
inline const ::std::string& GL_UserInfo::userpwd() const {
  return *userpwd_;
}
inline void GL_UserInfo::set_userpwd(const ::std::string& value) {
  set_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    userpwd_ = new ::std::string;
  }
  userpwd_->assign(value);
}
inline void GL_UserInfo::set_userpwd(const char* value) {
  set_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    userpwd_ = new ::std::string;
  }
  userpwd_->assign(value);
}
inline void GL_UserInfo::set_userpwd(const char* value, size_t size) {
  set_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    userpwd_ = new ::std::string;
  }
  userpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_UserInfo::mutable_userpwd() {
  set_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    userpwd_ = new ::std::string;
  }
  return userpwd_;
}
inline ::std::string* GL_UserInfo::release_userpwd() {
  clear_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userpwd_;
    userpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_UserInfo::set_allocated_userpwd(::std::string* userpwd) {
  if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpwd_;
  }
  if (userpwd) {
    set_has_userpwd();
    userpwd_ = userpwd;
  } else {
    clear_has_userpwd();
    userpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string UserCode = 12;
inline bool GL_UserInfo::has_usercode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GL_UserInfo::set_has_usercode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GL_UserInfo::clear_has_usercode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GL_UserInfo::clear_usercode() {
  if (usercode_ != &::google::protobuf::internal::kEmptyString) {
    usercode_->clear();
  }
  clear_has_usercode();
}
inline const ::std::string& GL_UserInfo::usercode() const {
  return *usercode_;
}
inline void GL_UserInfo::set_usercode(const ::std::string& value) {
  set_has_usercode();
  if (usercode_ == &::google::protobuf::internal::kEmptyString) {
    usercode_ = new ::std::string;
  }
  usercode_->assign(value);
}
inline void GL_UserInfo::set_usercode(const char* value) {
  set_has_usercode();
  if (usercode_ == &::google::protobuf::internal::kEmptyString) {
    usercode_ = new ::std::string;
  }
  usercode_->assign(value);
}
inline void GL_UserInfo::set_usercode(const char* value, size_t size) {
  set_has_usercode();
  if (usercode_ == &::google::protobuf::internal::kEmptyString) {
    usercode_ = new ::std::string;
  }
  usercode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_UserInfo::mutable_usercode() {
  set_has_usercode();
  if (usercode_ == &::google::protobuf::internal::kEmptyString) {
    usercode_ = new ::std::string;
  }
  return usercode_;
}
inline ::std::string* GL_UserInfo::release_usercode() {
  clear_has_usercode();
  if (usercode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usercode_;
    usercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_UserInfo::set_allocated_usercode(::std::string* usercode) {
  if (usercode_ != &::google::protobuf::internal::kEmptyString) {
    delete usercode_;
  }
  if (usercode) {
    set_has_usercode();
    usercode_ = usercode;
  } else {
    clear_has_usercode();
    usercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string EncodeStr = 13;
inline bool GL_UserInfo::has_encodestr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GL_UserInfo::set_has_encodestr() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GL_UserInfo::clear_has_encodestr() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GL_UserInfo::clear_encodestr() {
  if (encodestr_ != &::google::protobuf::internal::kEmptyString) {
    encodestr_->clear();
  }
  clear_has_encodestr();
}
inline const ::std::string& GL_UserInfo::encodestr() const {
  return *encodestr_;
}
inline void GL_UserInfo::set_encodestr(const ::std::string& value) {
  set_has_encodestr();
  if (encodestr_ == &::google::protobuf::internal::kEmptyString) {
    encodestr_ = new ::std::string;
  }
  encodestr_->assign(value);
}
inline void GL_UserInfo::set_encodestr(const char* value) {
  set_has_encodestr();
  if (encodestr_ == &::google::protobuf::internal::kEmptyString) {
    encodestr_ = new ::std::string;
  }
  encodestr_->assign(value);
}
inline void GL_UserInfo::set_encodestr(const char* value, size_t size) {
  set_has_encodestr();
  if (encodestr_ == &::google::protobuf::internal::kEmptyString) {
    encodestr_ = new ::std::string;
  }
  encodestr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_UserInfo::mutable_encodestr() {
  set_has_encodestr();
  if (encodestr_ == &::google::protobuf::internal::kEmptyString) {
    encodestr_ = new ::std::string;
  }
  return encodestr_;
}
inline ::std::string* GL_UserInfo::release_encodestr() {
  clear_has_encodestr();
  if (encodestr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = encodestr_;
    encodestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_UserInfo::set_allocated_encodestr(::std::string* encodestr) {
  if (encodestr_ != &::google::protobuf::internal::kEmptyString) {
    delete encodestr_;
  }
  if (encodestr) {
    set_has_encodestr();
    encodestr_ = encodestr;
  } else {
    clear_has_encodestr();
    encodestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string TrueName = 14;
inline bool GL_UserInfo::has_truename() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GL_UserInfo::set_has_truename() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GL_UserInfo::clear_has_truename() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GL_UserInfo::clear_truename() {
  if (truename_ != &::google::protobuf::internal::kEmptyString) {
    truename_->clear();
  }
  clear_has_truename();
}
inline const ::std::string& GL_UserInfo::truename() const {
  return *truename_;
}
inline void GL_UserInfo::set_truename(const ::std::string& value) {
  set_has_truename();
  if (truename_ == &::google::protobuf::internal::kEmptyString) {
    truename_ = new ::std::string;
  }
  truename_->assign(value);
}
inline void GL_UserInfo::set_truename(const char* value) {
  set_has_truename();
  if (truename_ == &::google::protobuf::internal::kEmptyString) {
    truename_ = new ::std::string;
  }
  truename_->assign(value);
}
inline void GL_UserInfo::set_truename(const char* value, size_t size) {
  set_has_truename();
  if (truename_ == &::google::protobuf::internal::kEmptyString) {
    truename_ = new ::std::string;
  }
  truename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_UserInfo::mutable_truename() {
  set_has_truename();
  if (truename_ == &::google::protobuf::internal::kEmptyString) {
    truename_ = new ::std::string;
  }
  return truename_;
}
inline ::std::string* GL_UserInfo::release_truename() {
  clear_has_truename();
  if (truename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = truename_;
    truename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_UserInfo::set_allocated_truename(::std::string* truename) {
  if (truename_ != &::google::protobuf::internal::kEmptyString) {
    delete truename_;
  }
  if (truename) {
    set_has_truename();
    truename_ = truename;
  } else {
    clear_has_truename();
    truename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string IDCode = 15;
inline bool GL_UserInfo::has_idcode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GL_UserInfo::set_has_idcode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GL_UserInfo::clear_has_idcode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GL_UserInfo::clear_idcode() {
  if (idcode_ != &::google::protobuf::internal::kEmptyString) {
    idcode_->clear();
  }
  clear_has_idcode();
}
inline const ::std::string& GL_UserInfo::idcode() const {
  return *idcode_;
}
inline void GL_UserInfo::set_idcode(const ::std::string& value) {
  set_has_idcode();
  if (idcode_ == &::google::protobuf::internal::kEmptyString) {
    idcode_ = new ::std::string;
  }
  idcode_->assign(value);
}
inline void GL_UserInfo::set_idcode(const char* value) {
  set_has_idcode();
  if (idcode_ == &::google::protobuf::internal::kEmptyString) {
    idcode_ = new ::std::string;
  }
  idcode_->assign(value);
}
inline void GL_UserInfo::set_idcode(const char* value, size_t size) {
  set_has_idcode();
  if (idcode_ == &::google::protobuf::internal::kEmptyString) {
    idcode_ = new ::std::string;
  }
  idcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_UserInfo::mutable_idcode() {
  set_has_idcode();
  if (idcode_ == &::google::protobuf::internal::kEmptyString) {
    idcode_ = new ::std::string;
  }
  return idcode_;
}
inline ::std::string* GL_UserInfo::release_idcode() {
  clear_has_idcode();
  if (idcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idcode_;
    idcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_UserInfo::set_allocated_idcode(::std::string* idcode) {
  if (idcode_ != &::google::protobuf::internal::kEmptyString) {
    delete idcode_;
  }
  if (idcode) {
    set_has_idcode();
    idcode_ = idcode;
  } else {
    clear_has_idcode();
    idcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string QQNum = 16;
inline bool GL_UserInfo::has_qqnum() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GL_UserInfo::set_has_qqnum() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GL_UserInfo::clear_has_qqnum() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GL_UserInfo::clear_qqnum() {
  if (qqnum_ != &::google::protobuf::internal::kEmptyString) {
    qqnum_->clear();
  }
  clear_has_qqnum();
}
inline const ::std::string& GL_UserInfo::qqnum() const {
  return *qqnum_;
}
inline void GL_UserInfo::set_qqnum(const ::std::string& value) {
  set_has_qqnum();
  if (qqnum_ == &::google::protobuf::internal::kEmptyString) {
    qqnum_ = new ::std::string;
  }
  qqnum_->assign(value);
}
inline void GL_UserInfo::set_qqnum(const char* value) {
  set_has_qqnum();
  if (qqnum_ == &::google::protobuf::internal::kEmptyString) {
    qqnum_ = new ::std::string;
  }
  qqnum_->assign(value);
}
inline void GL_UserInfo::set_qqnum(const char* value, size_t size) {
  set_has_qqnum();
  if (qqnum_ == &::google::protobuf::internal::kEmptyString) {
    qqnum_ = new ::std::string;
  }
  qqnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_UserInfo::mutable_qqnum() {
  set_has_qqnum();
  if (qqnum_ == &::google::protobuf::internal::kEmptyString) {
    qqnum_ = new ::std::string;
  }
  return qqnum_;
}
inline ::std::string* GL_UserInfo::release_qqnum() {
  clear_has_qqnum();
  if (qqnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qqnum_;
    qqnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_UserInfo::set_allocated_qqnum(::std::string* qqnum) {
  if (qqnum_ != &::google::protobuf::internal::kEmptyString) {
    delete qqnum_;
  }
  if (qqnum) {
    set_has_qqnum();
    qqnum_ = qqnum;
  } else {
    clear_has_qqnum();
    qqnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Email = 17;
inline bool GL_UserInfo::has_email() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GL_UserInfo::set_has_email() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GL_UserInfo::clear_has_email() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GL_UserInfo::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& GL_UserInfo::email() const {
  return *email_;
}
inline void GL_UserInfo::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void GL_UserInfo::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void GL_UserInfo::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_UserInfo::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* GL_UserInfo::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_UserInfo::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Tel = 18;
inline bool GL_UserInfo::has_tel() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GL_UserInfo::set_has_tel() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GL_UserInfo::clear_has_tel() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GL_UserInfo::clear_tel() {
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    tel_->clear();
  }
  clear_has_tel();
}
inline const ::std::string& GL_UserInfo::tel() const {
  return *tel_;
}
inline void GL_UserInfo::set_tel(const ::std::string& value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
}
inline void GL_UserInfo::set_tel(const char* value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
}
inline void GL_UserInfo::set_tel(const char* value, size_t size) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_UserInfo::mutable_tel() {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  return tel_;
}
inline ::std::string* GL_UserInfo::release_tel() {
  clear_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tel_;
    tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_UserInfo::set_allocated_tel(::std::string* tel) {
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    delete tel_;
  }
  if (tel) {
    set_has_tel();
    tel_ = tel;
  } else {
    clear_has_tel();
    tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string CellPhone = 19;
inline bool GL_UserInfo::has_cellphone() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GL_UserInfo::set_has_cellphone() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GL_UserInfo::clear_has_cellphone() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GL_UserInfo::clear_cellphone() {
  if (cellphone_ != &::google::protobuf::internal::kEmptyString) {
    cellphone_->clear();
  }
  clear_has_cellphone();
}
inline const ::std::string& GL_UserInfo::cellphone() const {
  return *cellphone_;
}
inline void GL_UserInfo::set_cellphone(const ::std::string& value) {
  set_has_cellphone();
  if (cellphone_ == &::google::protobuf::internal::kEmptyString) {
    cellphone_ = new ::std::string;
  }
  cellphone_->assign(value);
}
inline void GL_UserInfo::set_cellphone(const char* value) {
  set_has_cellphone();
  if (cellphone_ == &::google::protobuf::internal::kEmptyString) {
    cellphone_ = new ::std::string;
  }
  cellphone_->assign(value);
}
inline void GL_UserInfo::set_cellphone(const char* value, size_t size) {
  set_has_cellphone();
  if (cellphone_ == &::google::protobuf::internal::kEmptyString) {
    cellphone_ = new ::std::string;
  }
  cellphone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_UserInfo::mutable_cellphone() {
  set_has_cellphone();
  if (cellphone_ == &::google::protobuf::internal::kEmptyString) {
    cellphone_ = new ::std::string;
  }
  return cellphone_;
}
inline ::std::string* GL_UserInfo::release_cellphone() {
  clear_has_cellphone();
  if (cellphone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cellphone_;
    cellphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_UserInfo::set_allocated_cellphone(::std::string* cellphone) {
  if (cellphone_ != &::google::protobuf::internal::kEmptyString) {
    delete cellphone_;
  }
  if (cellphone) {
    set_has_cellphone();
    cellphone_ = cellphone;
  } else {
    clear_has_cellphone();
    cellphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string PostCode = 20;
inline bool GL_UserInfo::has_postcode() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GL_UserInfo::set_has_postcode() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GL_UserInfo::clear_has_postcode() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GL_UserInfo::clear_postcode() {
  if (postcode_ != &::google::protobuf::internal::kEmptyString) {
    postcode_->clear();
  }
  clear_has_postcode();
}
inline const ::std::string& GL_UserInfo::postcode() const {
  return *postcode_;
}
inline void GL_UserInfo::set_postcode(const ::std::string& value) {
  set_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    postcode_ = new ::std::string;
  }
  postcode_->assign(value);
}
inline void GL_UserInfo::set_postcode(const char* value) {
  set_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    postcode_ = new ::std::string;
  }
  postcode_->assign(value);
}
inline void GL_UserInfo::set_postcode(const char* value, size_t size) {
  set_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    postcode_ = new ::std::string;
  }
  postcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_UserInfo::mutable_postcode() {
  set_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    postcode_ = new ::std::string;
  }
  return postcode_;
}
inline ::std::string* GL_UserInfo::release_postcode() {
  clear_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = postcode_;
    postcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_UserInfo::set_allocated_postcode(::std::string* postcode) {
  if (postcode_ != &::google::protobuf::internal::kEmptyString) {
    delete postcode_;
  }
  if (postcode) {
    set_has_postcode();
    postcode_ = postcode;
  } else {
    clear_has_postcode();
    postcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ContactAddress = 21;
inline bool GL_UserInfo::has_contactaddress() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GL_UserInfo::set_has_contactaddress() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GL_UserInfo::clear_has_contactaddress() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GL_UserInfo::clear_contactaddress() {
  if (contactaddress_ != &::google::protobuf::internal::kEmptyString) {
    contactaddress_->clear();
  }
  clear_has_contactaddress();
}
inline const ::std::string& GL_UserInfo::contactaddress() const {
  return *contactaddress_;
}
inline void GL_UserInfo::set_contactaddress(const ::std::string& value) {
  set_has_contactaddress();
  if (contactaddress_ == &::google::protobuf::internal::kEmptyString) {
    contactaddress_ = new ::std::string;
  }
  contactaddress_->assign(value);
}
inline void GL_UserInfo::set_contactaddress(const char* value) {
  set_has_contactaddress();
  if (contactaddress_ == &::google::protobuf::internal::kEmptyString) {
    contactaddress_ = new ::std::string;
  }
  contactaddress_->assign(value);
}
inline void GL_UserInfo::set_contactaddress(const char* value, size_t size) {
  set_has_contactaddress();
  if (contactaddress_ == &::google::protobuf::internal::kEmptyString) {
    contactaddress_ = new ::std::string;
  }
  contactaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GL_UserInfo::mutable_contactaddress() {
  set_has_contactaddress();
  if (contactaddress_ == &::google::protobuf::internal::kEmptyString) {
    contactaddress_ = new ::std::string;
  }
  return contactaddress_;
}
inline ::std::string* GL_UserInfo::release_contactaddress() {
  clear_has_contactaddress();
  if (contactaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contactaddress_;
    contactaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GL_UserInfo::set_allocated_contactaddress(::std::string* contactaddress) {
  if (contactaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete contactaddress_;
  }
  if (contactaddress) {
    set_has_contactaddress();
    contactaddress_ = contactaddress;
  } else {
    clear_has_contactaddress();
    contactaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool IsActived = 22;
inline bool GL_UserInfo::has_isactived() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GL_UserInfo::set_has_isactived() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GL_UserInfo::clear_has_isactived() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GL_UserInfo::clear_isactived() {
  isactived_ = false;
  clear_has_isactived();
}
inline bool GL_UserInfo::isactived() const {
  return isactived_;
}
inline void GL_UserInfo::set_isactived(bool value) {
  set_has_isactived();
  isactived_ = value;
}

// optional bool IsLocked = 23;
inline bool GL_UserInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GL_UserInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00400000u;
}
inline void GL_UserInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void GL_UserInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool GL_UserInfo::islocked() const {
  return islocked_;
}
inline void GL_UserInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// -------------------------------------------------------------------

// GL_Table

// repeated .transMsg.GL_AppVerInfo GL_AppVerInfo = 1;
inline int GL_Table::gl_appverinfo_size() const {
  return gl_appverinfo_.size();
}
inline void GL_Table::clear_gl_appverinfo() {
  gl_appverinfo_.Clear();
}
inline const ::transMsg::GL_AppVerInfo& GL_Table::gl_appverinfo(int index) const {
  return gl_appverinfo_.Get(index);
}
inline ::transMsg::GL_AppVerInfo* GL_Table::mutable_gl_appverinfo(int index) {
  return gl_appverinfo_.Mutable(index);
}
inline ::transMsg::GL_AppVerInfo* GL_Table::add_gl_appverinfo() {
  return gl_appverinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AppVerInfo >&
GL_Table::gl_appverinfo() const {
  return gl_appverinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AppVerInfo >*
GL_Table::mutable_gl_appverinfo() {
  return &gl_appverinfo_;
}

// repeated .transMsg.GL_AppleseedInfo GL_AppleseedInfo = 2;
inline int GL_Table::gl_appleseedinfo_size() const {
  return gl_appleseedinfo_.size();
}
inline void GL_Table::clear_gl_appleseedinfo() {
  gl_appleseedinfo_.Clear();
}
inline const ::transMsg::GL_AppleseedInfo& GL_Table::gl_appleseedinfo(int index) const {
  return gl_appleseedinfo_.Get(index);
}
inline ::transMsg::GL_AppleseedInfo* GL_Table::mutable_gl_appleseedinfo(int index) {
  return gl_appleseedinfo_.Mutable(index);
}
inline ::transMsg::GL_AppleseedInfo* GL_Table::add_gl_appleseedinfo() {
  return gl_appleseedinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AppleseedInfo >&
GL_Table::gl_appleseedinfo() const {
  return gl_appleseedinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AppleseedInfo >*
GL_Table::mutable_gl_appleseedinfo() {
  return &gl_appleseedinfo_;
}

// repeated .transMsg.GL_AreaGeoMapInfo GL_AreaGeoMapInfo = 3;
inline int GL_Table::gl_areageomapinfo_size() const {
  return gl_areageomapinfo_.size();
}
inline void GL_Table::clear_gl_areageomapinfo() {
  gl_areageomapinfo_.Clear();
}
inline const ::transMsg::GL_AreaGeoMapInfo& GL_Table::gl_areageomapinfo(int index) const {
  return gl_areageomapinfo_.Get(index);
}
inline ::transMsg::GL_AreaGeoMapInfo* GL_Table::mutable_gl_areageomapinfo(int index) {
  return gl_areageomapinfo_.Mutable(index);
}
inline ::transMsg::GL_AreaGeoMapInfo* GL_Table::add_gl_areageomapinfo() {
  return gl_areageomapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AreaGeoMapInfo >&
GL_Table::gl_areageomapinfo() const {
  return gl_areageomapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AreaGeoMapInfo >*
GL_Table::mutable_gl_areageomapinfo() {
  return &gl_areageomapinfo_;
}

// repeated .transMsg.GL_AreaInfo GL_AreaInfo = 4;
inline int GL_Table::gl_areainfo_size() const {
  return gl_areainfo_.size();
}
inline void GL_Table::clear_gl_areainfo() {
  gl_areainfo_.Clear();
}
inline const ::transMsg::GL_AreaInfo& GL_Table::gl_areainfo(int index) const {
  return gl_areainfo_.Get(index);
}
inline ::transMsg::GL_AreaInfo* GL_Table::mutable_gl_areainfo(int index) {
  return gl_areainfo_.Mutable(index);
}
inline ::transMsg::GL_AreaInfo* GL_Table::add_gl_areainfo() {
  return gl_areainfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AreaInfo >&
GL_Table::gl_areainfo() const {
  return gl_areainfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_AreaInfo >*
GL_Table::mutable_gl_areainfo() {
  return &gl_areainfo_;
}

// repeated .transMsg.GL_BaseBoardInfo GL_BaseBoardInfo = 5;
inline int GL_Table::gl_baseboardinfo_size() const {
  return gl_baseboardinfo_.size();
}
inline void GL_Table::clear_gl_baseboardinfo() {
  gl_baseboardinfo_.Clear();
}
inline const ::transMsg::GL_BaseBoardInfo& GL_Table::gl_baseboardinfo(int index) const {
  return gl_baseboardinfo_.Get(index);
}
inline ::transMsg::GL_BaseBoardInfo* GL_Table::mutable_gl_baseboardinfo(int index) {
  return gl_baseboardinfo_.Mutable(index);
}
inline ::transMsg::GL_BaseBoardInfo* GL_Table::add_gl_baseboardinfo() {
  return gl_baseboardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_BaseBoardInfo >&
GL_Table::gl_baseboardinfo() const {
  return gl_baseboardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_BaseBoardInfo >*
GL_Table::mutable_gl_baseboardinfo() {
  return &gl_baseboardinfo_;
}

// repeated .transMsg.GL_ChargeLogInfo GL_ChargeLogInfo = 6;
inline int GL_Table::gl_chargeloginfo_size() const {
  return gl_chargeloginfo_.size();
}
inline void GL_Table::clear_gl_chargeloginfo() {
  gl_chargeloginfo_.Clear();
}
inline const ::transMsg::GL_ChargeLogInfo& GL_Table::gl_chargeloginfo(int index) const {
  return gl_chargeloginfo_.Get(index);
}
inline ::transMsg::GL_ChargeLogInfo* GL_Table::mutable_gl_chargeloginfo(int index) {
  return gl_chargeloginfo_.Mutable(index);
}
inline ::transMsg::GL_ChargeLogInfo* GL_Table::add_gl_chargeloginfo() {
  return gl_chargeloginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_ChargeLogInfo >&
GL_Table::gl_chargeloginfo() const {
  return gl_chargeloginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_ChargeLogInfo >*
GL_Table::mutable_gl_chargeloginfo() {
  return &gl_chargeloginfo_;
}

// repeated .transMsg.GL_DeptInfo GL_DeptInfo = 7;
inline int GL_Table::gl_deptinfo_size() const {
  return gl_deptinfo_.size();
}
inline void GL_Table::clear_gl_deptinfo() {
  gl_deptinfo_.Clear();
}
inline const ::transMsg::GL_DeptInfo& GL_Table::gl_deptinfo(int index) const {
  return gl_deptinfo_.Get(index);
}
inline ::transMsg::GL_DeptInfo* GL_Table::mutable_gl_deptinfo(int index) {
  return gl_deptinfo_.Mutable(index);
}
inline ::transMsg::GL_DeptInfo* GL_Table::add_gl_deptinfo() {
  return gl_deptinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_DeptInfo >&
GL_Table::gl_deptinfo() const {
  return gl_deptinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_DeptInfo >*
GL_Table::mutable_gl_deptinfo() {
  return &gl_deptinfo_;
}

// repeated .transMsg.GL_DesignerConfigInfo GL_DesignerConfigInfo = 8;
inline int GL_Table::gl_designerconfiginfo_size() const {
  return gl_designerconfiginfo_.size();
}
inline void GL_Table::clear_gl_designerconfiginfo() {
  gl_designerconfiginfo_.Clear();
}
inline const ::transMsg::GL_DesignerConfigInfo& GL_Table::gl_designerconfiginfo(int index) const {
  return gl_designerconfiginfo_.Get(index);
}
inline ::transMsg::GL_DesignerConfigInfo* GL_Table::mutable_gl_designerconfiginfo(int index) {
  return gl_designerconfiginfo_.Mutable(index);
}
inline ::transMsg::GL_DesignerConfigInfo* GL_Table::add_gl_designerconfiginfo() {
  return gl_designerconfiginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_DesignerConfigInfo >&
GL_Table::gl_designerconfiginfo() const {
  return gl_designerconfiginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_DesignerConfigInfo >*
GL_Table::mutable_gl_designerconfiginfo() {
  return &gl_designerconfiginfo_;
}

// repeated .transMsg.GL_GTypeInfo GL_GTypeInfo = 9;
inline int GL_Table::gl_gtypeinfo_size() const {
  return gl_gtypeinfo_.size();
}
inline void GL_Table::clear_gl_gtypeinfo() {
  gl_gtypeinfo_.Clear();
}
inline const ::transMsg::GL_GTypeInfo& GL_Table::gl_gtypeinfo(int index) const {
  return gl_gtypeinfo_.Get(index);
}
inline ::transMsg::GL_GTypeInfo* GL_Table::mutable_gl_gtypeinfo(int index) {
  return gl_gtypeinfo_.Mutable(index);
}
inline ::transMsg::GL_GTypeInfo* GL_Table::add_gl_gtypeinfo() {
  return gl_gtypeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_GTypeInfo >&
GL_Table::gl_gtypeinfo() const {
  return gl_gtypeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_GTypeInfo >*
GL_Table::mutable_gl_gtypeinfo() {
  return &gl_gtypeinfo_;
}

// repeated .transMsg.GL_GeoCodeInfo GL_GeoCodeInfo = 10;
inline int GL_Table::gl_geocodeinfo_size() const {
  return gl_geocodeinfo_.size();
}
inline void GL_Table::clear_gl_geocodeinfo() {
  gl_geocodeinfo_.Clear();
}
inline const ::transMsg::GL_GeoCodeInfo& GL_Table::gl_geocodeinfo(int index) const {
  return gl_geocodeinfo_.Get(index);
}
inline ::transMsg::GL_GeoCodeInfo* GL_Table::mutable_gl_geocodeinfo(int index) {
  return gl_geocodeinfo_.Mutable(index);
}
inline ::transMsg::GL_GeoCodeInfo* GL_Table::add_gl_geocodeinfo() {
  return gl_geocodeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_GeoCodeInfo >&
GL_Table::gl_geocodeinfo() const {
  return gl_geocodeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_GeoCodeInfo >*
GL_Table::mutable_gl_geocodeinfo() {
  return &gl_geocodeinfo_;
}

// repeated .transMsg.GL_MajorCateInfo GL_MajorCateInfo = 11;
inline int GL_Table::gl_majorcateinfo_size() const {
  return gl_majorcateinfo_.size();
}
inline void GL_Table::clear_gl_majorcateinfo() {
  gl_majorcateinfo_.Clear();
}
inline const ::transMsg::GL_MajorCateInfo& GL_Table::gl_majorcateinfo(int index) const {
  return gl_majorcateinfo_.Get(index);
}
inline ::transMsg::GL_MajorCateInfo* GL_Table::mutable_gl_majorcateinfo(int index) {
  return gl_majorcateinfo_.Mutable(index);
}
inline ::transMsg::GL_MajorCateInfo* GL_Table::add_gl_majorcateinfo() {
  return gl_majorcateinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MajorCateInfo >&
GL_Table::gl_majorcateinfo() const {
  return gl_majorcateinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MajorCateInfo >*
GL_Table::mutable_gl_majorcateinfo() {
  return &gl_majorcateinfo_;
}

// repeated .transMsg.GL_MinorCateInfo GL_MinorCateInfo = 12;
inline int GL_Table::gl_minorcateinfo_size() const {
  return gl_minorcateinfo_.size();
}
inline void GL_Table::clear_gl_minorcateinfo() {
  gl_minorcateinfo_.Clear();
}
inline const ::transMsg::GL_MinorCateInfo& GL_Table::gl_minorcateinfo(int index) const {
  return gl_minorcateinfo_.Get(index);
}
inline ::transMsg::GL_MinorCateInfo* GL_Table::mutable_gl_minorcateinfo(int index) {
  return gl_minorcateinfo_.Mutable(index);
}
inline ::transMsg::GL_MinorCateInfo* GL_Table::add_gl_minorcateinfo() {
  return gl_minorcateinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MinorCateInfo >&
GL_Table::gl_minorcateinfo() const {
  return gl_minorcateinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MinorCateInfo >*
GL_Table::mutable_gl_minorcateinfo() {
  return &gl_minorcateinfo_;
}

// repeated .transMsg.GL_MinorGTypeMapInfo GL_MinorGTypeMapInfo = 13;
inline int GL_Table::gl_minorgtypemapinfo_size() const {
  return gl_minorgtypemapinfo_.size();
}
inline void GL_Table::clear_gl_minorgtypemapinfo() {
  gl_minorgtypemapinfo_.Clear();
}
inline const ::transMsg::GL_MinorGTypeMapInfo& GL_Table::gl_minorgtypemapinfo(int index) const {
  return gl_minorgtypemapinfo_.Get(index);
}
inline ::transMsg::GL_MinorGTypeMapInfo* GL_Table::mutable_gl_minorgtypemapinfo(int index) {
  return gl_minorgtypemapinfo_.Mutable(index);
}
inline ::transMsg::GL_MinorGTypeMapInfo* GL_Table::add_gl_minorgtypemapinfo() {
  return gl_minorgtypemapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MinorGTypeMapInfo >&
GL_Table::gl_minorgtypemapinfo() const {
  return gl_minorgtypemapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_MinorGTypeMapInfo >*
GL_Table::mutable_gl_minorgtypemapinfo() {
  return &gl_minorgtypemapinfo_;
}

// repeated .transMsg.GL_OrderInfo GL_OrderInfo = 14;
inline int GL_Table::gl_orderinfo_size() const {
  return gl_orderinfo_.size();
}
inline void GL_Table::clear_gl_orderinfo() {
  gl_orderinfo_.Clear();
}
inline const ::transMsg::GL_OrderInfo& GL_Table::gl_orderinfo(int index) const {
  return gl_orderinfo_.Get(index);
}
inline ::transMsg::GL_OrderInfo* GL_Table::mutable_gl_orderinfo(int index) {
  return gl_orderinfo_.Mutable(index);
}
inline ::transMsg::GL_OrderInfo* GL_Table::add_gl_orderinfo() {
  return gl_orderinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_OrderInfo >&
GL_Table::gl_orderinfo() const {
  return gl_orderinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_OrderInfo >*
GL_Table::mutable_gl_orderinfo() {
  return &gl_orderinfo_;
}

// repeated .transMsg.GL_PinYin GL_PinYin = 15;
inline int GL_Table::gl_pinyin_size() const {
  return gl_pinyin_.size();
}
inline void GL_Table::clear_gl_pinyin() {
  gl_pinyin_.Clear();
}
inline const ::transMsg::GL_PinYin& GL_Table::gl_pinyin(int index) const {
  return gl_pinyin_.Get(index);
}
inline ::transMsg::GL_PinYin* GL_Table::mutable_gl_pinyin(int index) {
  return gl_pinyin_.Mutable(index);
}
inline ::transMsg::GL_PinYin* GL_Table::add_gl_pinyin() {
  return gl_pinyin_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PinYin >&
GL_Table::gl_pinyin() const {
  return gl_pinyin_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PinYin >*
GL_Table::mutable_gl_pinyin() {
  return &gl_pinyin_;
}

// repeated .transMsg.GL_PrepaidCardInfo GL_PrepaidCardInfo = 16;
inline int GL_Table::gl_prepaidcardinfo_size() const {
  return gl_prepaidcardinfo_.size();
}
inline void GL_Table::clear_gl_prepaidcardinfo() {
  gl_prepaidcardinfo_.Clear();
}
inline const ::transMsg::GL_PrepaidCardInfo& GL_Table::gl_prepaidcardinfo(int index) const {
  return gl_prepaidcardinfo_.Get(index);
}
inline ::transMsg::GL_PrepaidCardInfo* GL_Table::mutable_gl_prepaidcardinfo(int index) {
  return gl_prepaidcardinfo_.Mutable(index);
}
inline ::transMsg::GL_PrepaidCardInfo* GL_Table::add_gl_prepaidcardinfo() {
  return gl_prepaidcardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PrepaidCardInfo >&
GL_Table::gl_prepaidcardinfo() const {
  return gl_prepaidcardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PrepaidCardInfo >*
GL_Table::mutable_gl_prepaidcardinfo() {
  return &gl_prepaidcardinfo_;
}

// repeated .transMsg.GL_PrintTemplateInfo GL_PrintTemplateInfo = 17;
inline int GL_Table::gl_printtemplateinfo_size() const {
  return gl_printtemplateinfo_.size();
}
inline void GL_Table::clear_gl_printtemplateinfo() {
  gl_printtemplateinfo_.Clear();
}
inline const ::transMsg::GL_PrintTemplateInfo& GL_Table::gl_printtemplateinfo(int index) const {
  return gl_printtemplateinfo_.Get(index);
}
inline ::transMsg::GL_PrintTemplateInfo* GL_Table::mutable_gl_printtemplateinfo(int index) {
  return gl_printtemplateinfo_.Mutable(index);
}
inline ::transMsg::GL_PrintTemplateInfo* GL_Table::add_gl_printtemplateinfo() {
  return gl_printtemplateinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PrintTemplateInfo >&
GL_Table::gl_printtemplateinfo() const {
  return gl_printtemplateinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_PrintTemplateInfo >*
GL_Table::mutable_gl_printtemplateinfo() {
  return &gl_printtemplateinfo_;
}

// repeated .transMsg.GL_RoleInfo GL_RoleInfo = 18;
inline int GL_Table::gl_roleinfo_size() const {
  return gl_roleinfo_.size();
}
inline void GL_Table::clear_gl_roleinfo() {
  gl_roleinfo_.Clear();
}
inline const ::transMsg::GL_RoleInfo& GL_Table::gl_roleinfo(int index) const {
  return gl_roleinfo_.Get(index);
}
inline ::transMsg::GL_RoleInfo* GL_Table::mutable_gl_roleinfo(int index) {
  return gl_roleinfo_.Mutable(index);
}
inline ::transMsg::GL_RoleInfo* GL_Table::add_gl_roleinfo() {
  return gl_roleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_RoleInfo >&
GL_Table::gl_roleinfo() const {
  return gl_roleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_RoleInfo >*
GL_Table::mutable_gl_roleinfo() {
  return &gl_roleinfo_;
}

// repeated .transMsg.GL_RoleRightInfo GL_RoleRightInfo = 19;
inline int GL_Table::gl_rolerightinfo_size() const {
  return gl_rolerightinfo_.size();
}
inline void GL_Table::clear_gl_rolerightinfo() {
  gl_rolerightinfo_.Clear();
}
inline const ::transMsg::GL_RoleRightInfo& GL_Table::gl_rolerightinfo(int index) const {
  return gl_rolerightinfo_.Get(index);
}
inline ::transMsg::GL_RoleRightInfo* GL_Table::mutable_gl_rolerightinfo(int index) {
  return gl_rolerightinfo_.Mutable(index);
}
inline ::transMsg::GL_RoleRightInfo* GL_Table::add_gl_rolerightinfo() {
  return gl_rolerightinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_RoleRightInfo >&
GL_Table::gl_rolerightinfo() const {
  return gl_rolerightinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_RoleRightInfo >*
GL_Table::mutable_gl_rolerightinfo() {
  return &gl_rolerightinfo_;
}

// repeated .transMsg.GL_SugarVerInfo GL_SugarVerInfo = 20;
inline int GL_Table::gl_sugarverinfo_size() const {
  return gl_sugarverinfo_.size();
}
inline void GL_Table::clear_gl_sugarverinfo() {
  gl_sugarverinfo_.Clear();
}
inline const ::transMsg::GL_SugarVerInfo& GL_Table::gl_sugarverinfo(int index) const {
  return gl_sugarverinfo_.Get(index);
}
inline ::transMsg::GL_SugarVerInfo* GL_Table::mutable_gl_sugarverinfo(int index) {
  return gl_sugarverinfo_.Mutable(index);
}
inline ::transMsg::GL_SugarVerInfo* GL_Table::add_gl_sugarverinfo() {
  return gl_sugarverinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_SugarVerInfo >&
GL_Table::gl_sugarverinfo() const {
  return gl_sugarverinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_SugarVerInfo >*
GL_Table::mutable_gl_sugarverinfo() {
  return &gl_sugarverinfo_;
}

// repeated .transMsg.GL_TransferOrderInfo GL_TransferOrderInfo = 21;
inline int GL_Table::gl_transferorderinfo_size() const {
  return gl_transferorderinfo_.size();
}
inline void GL_Table::clear_gl_transferorderinfo() {
  gl_transferorderinfo_.Clear();
}
inline const ::transMsg::GL_TransferOrderInfo& GL_Table::gl_transferorderinfo(int index) const {
  return gl_transferorderinfo_.Get(index);
}
inline ::transMsg::GL_TransferOrderInfo* GL_Table::mutable_gl_transferorderinfo(int index) {
  return gl_transferorderinfo_.Mutable(index);
}
inline ::transMsg::GL_TransferOrderInfo* GL_Table::add_gl_transferorderinfo() {
  return gl_transferorderinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_TransferOrderInfo >&
GL_Table::gl_transferorderinfo() const {
  return gl_transferorderinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_TransferOrderInfo >*
GL_Table::mutable_gl_transferorderinfo() {
  return &gl_transferorderinfo_;
}

// repeated .transMsg.GL_UnitInfo GL_UnitInfo = 22;
inline int GL_Table::gl_unitinfo_size() const {
  return gl_unitinfo_.size();
}
inline void GL_Table::clear_gl_unitinfo() {
  gl_unitinfo_.Clear();
}
inline const ::transMsg::GL_UnitInfo& GL_Table::gl_unitinfo(int index) const {
  return gl_unitinfo_.Get(index);
}
inline ::transMsg::GL_UnitInfo* GL_Table::mutable_gl_unitinfo(int index) {
  return gl_unitinfo_.Mutable(index);
}
inline ::transMsg::GL_UnitInfo* GL_Table::add_gl_unitinfo() {
  return gl_unitinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UnitInfo >&
GL_Table::gl_unitinfo() const {
  return gl_unitinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UnitInfo >*
GL_Table::mutable_gl_unitinfo() {
  return &gl_unitinfo_;
}

// repeated .transMsg.GL_UserActivationInfo GL_UserActivationInfo = 23;
inline int GL_Table::gl_useractivationinfo_size() const {
  return gl_useractivationinfo_.size();
}
inline void GL_Table::clear_gl_useractivationinfo() {
  gl_useractivationinfo_.Clear();
}
inline const ::transMsg::GL_UserActivationInfo& GL_Table::gl_useractivationinfo(int index) const {
  return gl_useractivationinfo_.Get(index);
}
inline ::transMsg::GL_UserActivationInfo* GL_Table::mutable_gl_useractivationinfo(int index) {
  return gl_useractivationinfo_.Mutable(index);
}
inline ::transMsg::GL_UserActivationInfo* GL_Table::add_gl_useractivationinfo() {
  return gl_useractivationinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UserActivationInfo >&
GL_Table::gl_useractivationinfo() const {
  return gl_useractivationinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UserActivationInfo >*
GL_Table::mutable_gl_useractivationinfo() {
  return &gl_useractivationinfo_;
}

// repeated .transMsg.GL_UserInfo GL_UserInfo = 24;
inline int GL_Table::gl_userinfo_size() const {
  return gl_userinfo_.size();
}
inline void GL_Table::clear_gl_userinfo() {
  gl_userinfo_.Clear();
}
inline const ::transMsg::GL_UserInfo& GL_Table::gl_userinfo(int index) const {
  return gl_userinfo_.Get(index);
}
inline ::transMsg::GL_UserInfo* GL_Table::mutable_gl_userinfo(int index) {
  return gl_userinfo_.Mutable(index);
}
inline ::transMsg::GL_UserInfo* GL_Table::add_gl_userinfo() {
  return gl_userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UserInfo >&
GL_Table::gl_userinfo() const {
  return gl_userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::GL_UserInfo >*
GL_Table::mutable_gl_userinfo() {
  return &gl_userinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2dGL_2eproto__INCLUDED
