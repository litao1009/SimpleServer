// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg-GC.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg-GC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

namespace {

const ::google::protobuf::Descriptor* GC_CabBoardGapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabBoardGapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabBoardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabBoardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabBoardSealInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabBoardSealInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabDoorBoardGapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabDoorBoardGapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabDoorBoardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabDoorBoardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabDoorBoardSealInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabDoorBoardSealInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabDoorHWFInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabDoorHWFInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabDoorHandleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabDoorHandleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabDoorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabDoorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabDoorRegionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabDoorRegionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabDoorSlideInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabDoorSlideInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabDoorSystemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabDoorSystemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabFNFHWFInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabFNFHWFInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabFNFHoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabFNFHoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabFNFInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabFNFInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabFNFPartInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabFNFPartInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabFNFPartSealInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabFNFPartSealInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CabInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CabInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_DecorBoardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_DecorBoardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_DecorBoardUnitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_DecorBoardUnitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_DecorBoardUnitSealInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_DecorBoardUnitSealInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_DecorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_DecorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_DecorLineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_DecorLineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_DesignPlanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_DesignPlanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_FittingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_FittingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_HWFInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_HWFInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_MarkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_MarkInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_MatrixInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_MatrixInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_OrderAddedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_OrderAddedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_OrderDataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_OrderDataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_PackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_PackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_PointInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_PointInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_PrintElementInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_PrintElementInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_PrintGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_PrintGroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_PrintInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_PrintInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_PrintTableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_PrintTableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_PrintTableRowColInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_PrintTableRowColInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_PrintTableRowInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_PrintTableRowInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_ProductInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_ProductInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_RemarkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_RemarkInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_ShapeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_ShapeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_SkinInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_SkinInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_TableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_TableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_TablePartInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_TablePartInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_TableSideInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_TableSideInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_WallDecorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_WallDecorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_WallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_WallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_Table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_Table_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2dGC_2eproto() {
  protobuf_AddDesc_msg_2dGC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg-GC.proto");
  GOOGLE_CHECK(file != NULL);
  GC_CabBoardGapInfo_descriptor_ = file->message_type(0);
  static const int GC_CabBoardGapInfo_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, cabboardgapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, cabboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, cabstructboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, cabstructboardgapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, gappos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, gapindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, gaptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, gapshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, xoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, yoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, zoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, updatetime_),
  };
  GC_CabBoardGapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabBoardGapInfo_descriptor_,
      GC_CabBoardGapInfo::default_instance_,
      GC_CabBoardGapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardGapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabBoardGapInfo));
  GC_CabBoardInfo_descriptor_ = file->message_type(1);
  static const int GC_CabBoardInfo_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, cabboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, cabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, cabinetsizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, cabstructboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, cabinetsizeboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, cabmatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, matid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, matgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, skindirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, sealruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, xoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, yoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, zoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, ischangedoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, isfakedel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, cabboardname_),
  };
  GC_CabBoardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabBoardInfo_descriptor_,
      GC_CabBoardInfo::default_instance_,
      GC_CabBoardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabBoardInfo));
  GC_CabBoardSealInfo_descriptor_ = file->message_type(2);
  static const int GC_CabBoardSealInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, cabboardsealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, cabboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, cabstructboardsealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, cabstructboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, sealtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, sealindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, premill_),
  };
  GC_CabBoardSealInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabBoardSealInfo_descriptor_,
      GC_CabBoardSealInfo::default_instance_,
      GC_CabBoardSealInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabBoardSealInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabBoardSealInfo));
  GC_CabDoorBoardGapInfo_descriptor_ = file->message_type(3);
  static const int GC_CabDoorBoardGapInfo_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, cabdoorboardgapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, cabdoorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, doorboardgapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, doorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, gappos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, gapindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, gaptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, gapshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, xoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, yoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, zoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, updatetime_),
  };
  GC_CabDoorBoardGapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabDoorBoardGapInfo_descriptor_,
      GC_CabDoorBoardGapInfo::default_instance_,
      GC_CabDoorBoardGapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardGapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabDoorBoardGapInfo));
  GC_CabDoorBoardInfo_descriptor_ = file->message_type(4);
  static const int GC_CabDoorBoardInfo_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, cabdoorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, cabdoorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, doorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, doorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, doorboardindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, doormatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, matid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, matgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, skindirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, sealruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, xoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, yoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, zoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, updatetime_),
  };
  GC_CabDoorBoardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabDoorBoardInfo_descriptor_,
      GC_CabDoorBoardInfo::default_instance_,
      GC_CabDoorBoardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabDoorBoardInfo));
  GC_CabDoorBoardSealInfo_descriptor_ = file->message_type(5);
  static const int GC_CabDoorBoardSealInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, cabdoorboardsealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, cabdoorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, doorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, sealindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, sealtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, premill_),
  };
  GC_CabDoorBoardSealInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabDoorBoardSealInfo_descriptor_,
      GC_CabDoorBoardSealInfo::default_instance_,
      GC_CabDoorBoardSealInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorBoardSealInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabDoorBoardSealInfo));
  GC_CabDoorHWFInfo_descriptor_ = file->message_type(6);
  static const int GC_CabDoorHWFInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, cabdoorhwfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, cabdoorregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, hwfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, settingcountruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, usecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, updatetime_),
  };
  GC_CabDoorHWFInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabDoorHWFInfo_descriptor_,
      GC_CabDoorHWFInfo::default_instance_,
      GC_CabDoorHWFInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHWFInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabDoorHWFInfo));
  GC_CabDoorHandleInfo_descriptor_ = file->message_type(7);
  static const int GC_CabDoorHandleInfo_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, cabdoorhandleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, cabparentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, parenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, cabdesigndoorregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, cabdesigndoorregionhandleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, doormatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, handleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, matchtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, ischangedoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, realxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, realylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, realzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, xoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, yoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, zoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, arcz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, updatetime_),
  };
  GC_CabDoorHandleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabDoorHandleInfo_descriptor_,
      GC_CabDoorHandleInfo::default_instance_,
      GC_CabDoorHandleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorHandleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabDoorHandleInfo));
  GC_CabDoorInfo_descriptor_ = file->message_type(8);
  static const int GC_CabDoorInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, cabdoorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, cabparentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, parenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, doormatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, doorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, updatetime_),
  };
  GC_CabDoorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabDoorInfo_descriptor_,
      GC_CabDoorInfo::default_instance_,
      GC_CabDoorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabDoorInfo));
  GC_CabDoorRegionInfo_descriptor_ = file->message_type(9);
  static const int GC_CabDoorRegionInfo_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, cabdoorregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, cabdoorsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, parentcabregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, doorsystemregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, doorsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, cabdesigndoorregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, cabdesigndoorsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, cabdesignid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, isuserdefinesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, isuserdefinepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, xadjustlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, yadjustlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, realxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, realylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, realzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, cutxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, cutylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, xoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, yoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, zoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, realxoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, realyoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, realzoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, updatetime_),
  };
  GC_CabDoorRegionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabDoorRegionInfo_descriptor_,
      GC_CabDoorRegionInfo::default_instance_,
      GC_CabDoorRegionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorRegionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabDoorRegionInfo));
  GC_CabDoorSlideInfo_descriptor_ = file->message_type(10);
  static const int GC_CabDoorSlideInfo_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, cabdoorslideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, cabdoorregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, doorsystemregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, slideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, slideposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, realxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, realylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, realzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, xoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, yoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, zoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, updatetime_),
  };
  GC_CabDoorSlideInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabDoorSlideInfo_descriptor_,
      GC_CabDoorSlideInfo::default_instance_,
      GC_CabDoorSlideInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSlideInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabDoorSlideInfo));
  GC_CabDoorSystemInfo_descriptor_ = file->message_type(11);
  static const int GC_CabDoorSystemInfo_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, cabdoorsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, cabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, cabdesigndoorsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, cabdesignid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, doorsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, doormatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, isfakedel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, xadjustlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, yadjustlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, realxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, realylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, realzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, xoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, yoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, zoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, realxoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, realyoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, realzoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, updatetime_),
  };
  GC_CabDoorSystemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabDoorSystemInfo_descriptor_,
      GC_CabDoorSystemInfo::default_instance_,
      GC_CabDoorSystemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabDoorSystemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabDoorSystemInfo));
  GC_CabFNFHWFInfo_descriptor_ = file->message_type(12);
  static const int GC_CabFNFHWFInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, cabfnfhwfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, cabfnfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, fnfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, hwfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, fittingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, isfakedel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, usecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, updatetime_),
  };
  GC_CabFNFHWFInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabFNFHWFInfo_descriptor_,
      GC_CabFNFHWFInfo::default_instance_,
      GC_CabFNFHWFInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHWFInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabFNFHWFInfo));
  GC_CabFNFHoleInfo_descriptor_ = file->message_type(13);
  static const int GC_CabFNFHoleInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, cabfnfholeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, cabfnfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, holeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, fnfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, holetypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, holepicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, overheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, minxdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, minzdistance_),
  };
  GC_CabFNFHoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabFNFHoleInfo_descriptor_,
      GC_CabFNFHoleInfo::default_instance_,
      GC_CabFNFHoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFHoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabFNFHoleInfo));
  GC_CabFNFInfo_descriptor_ = file->message_type(14);
  static const int GC_CabFNFInfo_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, cabfnfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, designownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, designownergtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, containerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, containergtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, cabdesignfnfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, fnfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, dockobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, dockobjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, dockxpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, dockypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, hasmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, isfakedel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, realxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, realylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, realzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, xoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, yoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, zoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, usermemo_),
  };
  GC_CabFNFInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabFNFInfo_descriptor_,
      GC_CabFNFInfo::default_instance_,
      GC_CabFNFInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabFNFInfo));
  GC_CabFNFPartInfo_descriptor_ = file->message_type(15);
  static const int GC_CabFNFPartInfo_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, cabfnfpartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, cabfnfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, fnfittingpartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, fnfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, hwfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, sealruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, parttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, realxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, realylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, realzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, xoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, yoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, zoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, updatetime_),
  };
  GC_CabFNFPartInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabFNFPartInfo_descriptor_,
      GC_CabFNFPartInfo::default_instance_,
      GC_CabFNFPartInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabFNFPartInfo));
  GC_CabFNFPartSealInfo_descriptor_ = file->message_type(16);
  static const int GC_CabFNFPartSealInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, cabfnfpartsealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, cabfnfpartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, fnfittingpartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, sealtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, sealindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, premill_),
  };
  GC_CabFNFPartSealInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabFNFPartSealInfo_descriptor_,
      GC_CabFNFPartSealInfo::default_instance_,
      GC_CabFNFPartSealInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabFNFPartSealInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabFNFPartSealInfo));
  GC_CabInfo_descriptor_ = file->message_type(17);
  static const int GC_CabInfo_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, cabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, cabdesignid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, cabinetsizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, cabstructid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, cabmatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, sealruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, dockobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, dockobjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, dockxpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, dockypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, shapexlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, shapezlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, gapxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, gapylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, gapzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, footid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, footcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, footylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, isstandard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, hasmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, updatetime_),
  };
  GC_CabInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CabInfo_descriptor_,
      GC_CabInfo::default_instance_,
      GC_CabInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CabInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CabInfo));
  GC_DecorBoardInfo_descriptor_ = file->message_type(18);
  static const int GC_DecorBoardInfo_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, designdecorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, designparentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, decorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, decorparentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, groupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, isautofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, hasmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, ischangedsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, isdragin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, doormatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, cabmatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, doorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, targettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, dockobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, dockobjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, dockxpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, dockypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, matid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, matgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, xoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, yoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, zoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, updatetime_),
  };
  GC_DecorBoardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_DecorBoardInfo_descriptor_,
      GC_DecorBoardInfo::default_instance_,
      GC_DecorBoardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_DecorBoardInfo));
  GC_DecorBoardUnitInfo_descriptor_ = file->message_type(19);
  static const int GC_DecorBoardUnitInfo_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, designdecorboardunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, designdecorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, decorboardunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, decorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, decorboardunitindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, isusedoor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, doormatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, cabmatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, doorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, targettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, matid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, matgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, sealruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, xoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, yoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, zoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, updatetime_),
  };
  GC_DecorBoardUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_DecorBoardUnitInfo_descriptor_,
      GC_DecorBoardUnitInfo::default_instance_,
      GC_DecorBoardUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_DecorBoardUnitInfo));
  GC_DecorBoardUnitSealInfo_descriptor_ = file->message_type(20);
  static const int GC_DecorBoardUnitSealInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, designdecorboardunitsealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, designdecorboardunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, decorboardunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, decorboardunitsealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, sealindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, sealtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, premill_),
  };
  GC_DecorBoardUnitSealInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_DecorBoardUnitSealInfo_descriptor_,
      GC_DecorBoardUnitSealInfo::default_instance_,
      GC_DecorBoardUnitSealInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorBoardUnitSealInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_DecorBoardUnitSealInfo));
  GC_DecorInfo_descriptor_ = file->message_type(21);
  static const int GC_DecorInfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, designdecorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, decorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, hasmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, dockobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, dockobjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, dockxpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, dockypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, updatetime_),
  };
  GC_DecorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_DecorInfo_descriptor_,
      GC_DecorInfo::default_instance_,
      GC_DecorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_DecorInfo));
  GC_DecorLineInfo_descriptor_ = file->message_type(22);
  static const int GC_DecorLineInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, designdecorlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, decorlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, dockobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, dockobjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, dockxpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, dockypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, hasmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, updatetime_),
  };
  GC_DecorLineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_DecorLineInfo_descriptor_,
      GC_DecorLineInfo::default_instance_,
      GC_DecorLineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DecorLineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_DecorLineInfo));
  GC_DesignPlanInfo_descriptor_ = file->message_type(23);
  static const int GC_DesignPlanInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, curscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, skydecorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, floordecorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, walldecorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, designerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, designplanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, designplanmemo_),
  };
  GC_DesignPlanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_DesignPlanInfo_descriptor_,
      GC_DesignPlanInfo::default_instance_,
      GC_DesignPlanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DesignPlanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_DesignPlanInfo));
  GC_FittingInfo_descriptor_ = file->message_type(24);
  static const int GC_FittingInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, designfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, fittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, fittingcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, updatetime_),
  };
  GC_FittingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_FittingInfo_descriptor_,
      GC_FittingInfo::default_instance_,
      GC_FittingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_FittingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_FittingInfo));
  GC_HWFInfo_descriptor_ = file->message_type(25);
  static const int GC_HWFInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, designhwfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, hwfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, usecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, updatetime_),
  };
  GC_HWFInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_HWFInfo_descriptor_,
      GC_HWFInfo::default_instance_,
      GC_HWFInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_HWFInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_HWFInfo));
  GC_MarkInfo_descriptor_ = file->message_type(26);
  static const int GC_MarkInfo_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, designmarkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, designprintid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, printid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, viewtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, dockobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, dockobjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, marktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, fontsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, startx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, starty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, offsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, offsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, stopx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, stopy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, topleftx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, toplefty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, editsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, strickout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, underline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, italic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, bold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, bgcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, fontcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, facename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, remarktext_),
  };
  GC_MarkInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_MarkInfo_descriptor_,
      GC_MarkInfo::default_instance_,
      GC_MarkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MarkInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_MarkInfo));
  GC_MatrixInfo_descriptor_ = file->message_type(27);
  static const int GC_MatrixInfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, transobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, transobjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, majorcursel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, minorcursel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, matcurindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, cabmatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, m11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, m12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, m13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, m21_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, m22_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, m23_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, m31_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, m32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, m33_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, m41_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, m42_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, m43_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, m44_),
  };
  GC_MatrixInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_MatrixInfo_descriptor_,
      GC_MatrixInfo::default_instance_,
      GC_MatrixInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MatrixInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_MatrixInfo));
  GC_OrderAddedInfo_descriptor_ = file->message_type(28);
  static const int GC_OrderAddedInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, orderaddedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, usecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, unitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, addedname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, matname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, unitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, specname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, attachfilename_),
  };
  GC_OrderAddedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_OrderAddedInfo_descriptor_,
      GC_OrderAddedInfo::default_instance_,
      GC_OrderAddedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderAddedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_OrderAddedInfo));
  GC_OrderDataInfo_descriptor_ = file->message_type(29);
  static const int GC_OrderDataInfo_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, maxmetaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, designerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, sellerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, presurveyorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, resurveyorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, isnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, isshare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, isupload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, presurveytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, resurveytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, ordertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, deliverytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, installtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, geocode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, ordertitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, customername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, customertel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, customerpostcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, customerqq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, customeremail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, installaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, ordermemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, attachfilepath_),
  };
  GC_OrderDataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_OrderDataInfo_descriptor_,
      GC_OrderDataInfo::default_instance_,
      GC_OrderDataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_OrderDataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_OrderDataInfo));
  GC_PackInfo_descriptor_ = file->message_type(30);
  static const int GC_PackInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, designpackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, fittingpackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, isseparate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, usecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, updatetime_),
  };
  GC_PackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_PackInfo_descriptor_,
      GC_PackInfo::default_instance_,
      GC_PackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_PackInfo));
  GC_PointInfo_descriptor_ = file->message_type(31);
  static const int GC_PointInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PointInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PointInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PointInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PointInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PointInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PointInfo, transobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PointInfo, transobjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PointInfo, pointindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PointInfo, coordx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PointInfo, coordy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PointInfo, coordz_),
  };
  GC_PointInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_PointInfo_descriptor_,
      GC_PointInfo::default_instance_,
      GC_PointInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PointInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PointInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_PointInfo));
  GC_PrintElementInfo_descriptor_ = file->message_type(32);
  static const int GC_PrintElementInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, designprintelementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, designprintgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, designprintid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, objtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, printgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, viewtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, updatetime_),
  };
  GC_PrintElementInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_PrintElementInfo_descriptor_,
      GC_PrintElementInfo::default_instance_,
      GC_PrintElementInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintElementInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_PrintElementInfo));
  GC_PrintGroupInfo_descriptor_ = file->message_type(33);
  static const int GC_PrintGroupInfo_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, designprintgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, designprintid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, printid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, printgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, manyviewport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, framestyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, framecolorr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, framecolorg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, framecolorb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, framecolora_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, framewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, leftx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, righty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, scalex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, scaley_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, scaleoffsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, scaleoffsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, scalefactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, updatetime_),
  };
  GC_PrintGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_PrintGroupInfo_descriptor_,
      GC_PrintGroupInfo::default_instance_,
      GC_PrintGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_PrintGroupInfo));
  GC_PrintInfo_descriptor_ = file->message_type(34);
  static const int GC_PrintInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, designprintid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, printid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, pageborderstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, pagebordercolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, pageborderwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, shaderpictopx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, shaderpictopy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, shaderpicheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, shaderpicwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, printname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, shaderpicpath_),
  };
  GC_PrintInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_PrintInfo_descriptor_,
      GC_PrintInfo::default_instance_,
      GC_PrintInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_PrintInfo));
  GC_PrintTableInfo_descriptor_ = file->message_type(35);
  static const int GC_PrintTableInfo_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, designprinttableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, designprintid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, tablesign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, whichline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, align_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, logosign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, textpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, setline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, haslogo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, isselected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, linedown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, lineleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, lineright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, lineupsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, linedownsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, lineleftsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, linerightsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, linewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, lefttopx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, lefttopy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, lineupwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, linedownwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, linerightwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, lineleftwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, facename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, logopath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, serialpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, textvalue_),
  };
  GC_PrintTableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_PrintTableInfo_descriptor_,
      GC_PrintTableInfo::default_instance_,
      GC_PrintTableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_PrintTableInfo));
  GC_PrintTableRowColInfo_descriptor_ = file->message_type(36);
  static const int GC_PrintTableRowColInfo_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, designprinttablerowcolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, designprinttablerowid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, tablesign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, rownumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, colnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, whichline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, align_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, logosign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, textpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, setline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, haslogo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, isselected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, linedown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, lineleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, lineright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, lineupsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, linedownsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, lineleftsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, linerightsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, linewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, lefttopx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, lefttopy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, lineupwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, linedownwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, linerightwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, lineleftwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, facename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, logopath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, serialpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, textvalue_),
  };
  GC_PrintTableRowColInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_PrintTableRowColInfo_descriptor_,
      GC_PrintTableRowColInfo::default_instance_,
      GC_PrintTableRowColInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowColInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_PrintTableRowColInfo));
  GC_PrintTableRowInfo_descriptor_ = file->message_type(37);
  static const int GC_PrintTableRowInfo_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, designprinttablerowid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, designprinttableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, tablesign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, rownumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, whichline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, align_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, logosign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, textpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, setline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, haslogo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, isselected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, linedown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, lineleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, lineright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, lineupsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, linedownsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, lineleftsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, linerightsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, linewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, lefttopx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, lefttopy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, lineupwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, linedownwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, linerightwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, lineleftwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, facename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, logopath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, serialpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, textvalue_),
  };
  GC_PrintTableRowInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_PrintTableRowInfo_descriptor_,
      GC_PrintTableRowInfo::default_instance_,
      GC_PrintTableRowInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_PrintTableRowInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_PrintTableRowInfo));
  GC_ProductInfo_descriptor_ = file->message_type(38);
  static const int GC_ProductInfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, designproductid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, hasmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, dockobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, dockobjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, dockxpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, dockypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, updatetime_),
  };
  GC_ProductInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_ProductInfo_descriptor_,
      GC_ProductInfo::default_instance_,
      GC_ProductInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ProductInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_ProductInfo));
  GC_RemarkInfo_descriptor_ = file->message_type(39);
  static const int GC_RemarkInfo_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, designremarkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, designprintid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, printid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, viewtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, bgcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, forecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, fontsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, fontstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, linespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, arrowid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, arrowstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, framestyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, framecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, directline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, directstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, directlinestyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, commentframestyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, issinglemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, strickout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, underline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, italic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, bold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, framewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, arrowx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, arrowy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, startx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, starty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, facename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, remarktext_),
  };
  GC_RemarkInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_RemarkInfo_descriptor_,
      GC_RemarkInfo::default_instance_,
      GC_RemarkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RemarkInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_RemarkInfo));
  GC_ShapeInfo_descriptor_ = file->message_type(40);
  static const int GC_ShapeInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, designshapeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, designprintid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, printid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, viewtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, shapetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, linewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, linestyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, startx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, starty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, stopx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, stopy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, attachfilepath_),
  };
  GC_ShapeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_ShapeInfo_descriptor_,
      GC_ShapeInfo::default_instance_,
      GC_ShapeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ShapeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_ShapeInfo));
  GC_SkinInfo_descriptor_ = file->message_type(41);
  static const int GC_SkinInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, designskinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, decorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, hasmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, groundlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, updatetime_),
  };
  GC_SkinInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_SkinInfo_descriptor_,
      GC_SkinInfo::default_instance_,
      GC_SkinInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SkinInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_SkinInfo));
  GC_TableInfo_descriptor_ = file->message_type(42);
  static const int GC_TableInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, designtableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, tableindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, hasmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, updatetime_),
  };
  GC_TableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_TableInfo_descriptor_,
      GC_TableInfo::default_instance_,
      GC_TableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_TableInfo));
  GC_TablePartInfo_descriptor_ = file->message_type(43);
  static const int GC_TablePartInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, designtablepartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, designtableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, decorlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, tablesideindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, isusersetylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, defaultylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, updatetime_),
  };
  GC_TablePartInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_TablePartInfo_descriptor_,
      GC_TablePartInfo::default_instance_,
      GC_TablePartInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TablePartInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_TablePartInfo));
  GC_TableSideInfo_descriptor_ = file->message_type(44);
  static const int GC_TableSideInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, designtablesideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, designtableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, tabletopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, tabletopsideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, tablesideindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, isusetablemat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, updatetime_),
  };
  GC_TableSideInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_TableSideInfo_descriptor_,
      GC_TableSideInfo::default_instance_,
      GC_TableSideInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_TableSideInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_TableSideInfo));
  GC_WallDecorInfo_descriptor_ = file->message_type(45);
  static const int GC_WallDecorInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, designwalldecorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, designwallid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, decorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, ismodelrevers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, offsetxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, offsetylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, offsetzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, updatetime_),
  };
  GC_WallDecorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_WallDecorInfo_descriptor_,
      GC_WallDecorInfo::default_instance_,
      GC_WallDecorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallDecorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_WallDecorInfo));
  GC_WallInfo_descriptor_ = file->message_type(46);
  static const int GC_WallInfo_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, designwallid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, designplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, ordercate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, walltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, wallindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, dockobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, dockxpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, dockypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, decorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, gridstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, hasmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, startx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, starty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, endx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, endy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, groundlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, updatetime_),
  };
  GC_WallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_WallInfo_descriptor_,
      GC_WallInfo::default_instance_,
      GC_WallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_WallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_WallInfo));
  GC_Table_descriptor_ = file->message_type(47);
  static const int GC_Table_offsets_[47] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabboardgapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabboardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabboardsealinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabdoorboardgapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabdoorboardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabdoorboardsealinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabdoorhwfinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabdoorhandleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabdoorinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabdoorregioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabdoorslideinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabdoorsysteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabfnfhwfinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabfnfholeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabfnfinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabfnfpartinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabfnfpartsealinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_cabinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_decorboardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_decorboardunitinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_decorboardunitsealinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_decorinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_decorlineinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_designplaninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_fittinginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_hwfinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_markinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_matrixinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_orderaddedinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_orderdatainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_packinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_pointinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_printelementinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_printgroupinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_printinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_printtableinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_printtablerowcolinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_printtablerowinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_productinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_remarkinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_shapeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_skininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_tableinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_tablepartinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_tablesideinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_walldecorinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, gc_wallinfo_),
  };
  GC_Table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_Table_descriptor_,
      GC_Table::default_instance_,
      GC_Table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_Table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_Table));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2dGC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabBoardGapInfo_descriptor_, &GC_CabBoardGapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabBoardInfo_descriptor_, &GC_CabBoardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabBoardSealInfo_descriptor_, &GC_CabBoardSealInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabDoorBoardGapInfo_descriptor_, &GC_CabDoorBoardGapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabDoorBoardInfo_descriptor_, &GC_CabDoorBoardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabDoorBoardSealInfo_descriptor_, &GC_CabDoorBoardSealInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabDoorHWFInfo_descriptor_, &GC_CabDoorHWFInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabDoorHandleInfo_descriptor_, &GC_CabDoorHandleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabDoorInfo_descriptor_, &GC_CabDoorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabDoorRegionInfo_descriptor_, &GC_CabDoorRegionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabDoorSlideInfo_descriptor_, &GC_CabDoorSlideInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabDoorSystemInfo_descriptor_, &GC_CabDoorSystemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabFNFHWFInfo_descriptor_, &GC_CabFNFHWFInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabFNFHoleInfo_descriptor_, &GC_CabFNFHoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabFNFInfo_descriptor_, &GC_CabFNFInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabFNFPartInfo_descriptor_, &GC_CabFNFPartInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabFNFPartSealInfo_descriptor_, &GC_CabFNFPartSealInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CabInfo_descriptor_, &GC_CabInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_DecorBoardInfo_descriptor_, &GC_DecorBoardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_DecorBoardUnitInfo_descriptor_, &GC_DecorBoardUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_DecorBoardUnitSealInfo_descriptor_, &GC_DecorBoardUnitSealInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_DecorInfo_descriptor_, &GC_DecorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_DecorLineInfo_descriptor_, &GC_DecorLineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_DesignPlanInfo_descriptor_, &GC_DesignPlanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_FittingInfo_descriptor_, &GC_FittingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_HWFInfo_descriptor_, &GC_HWFInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_MarkInfo_descriptor_, &GC_MarkInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_MatrixInfo_descriptor_, &GC_MatrixInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_OrderAddedInfo_descriptor_, &GC_OrderAddedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_OrderDataInfo_descriptor_, &GC_OrderDataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_PackInfo_descriptor_, &GC_PackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_PointInfo_descriptor_, &GC_PointInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_PrintElementInfo_descriptor_, &GC_PrintElementInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_PrintGroupInfo_descriptor_, &GC_PrintGroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_PrintInfo_descriptor_, &GC_PrintInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_PrintTableInfo_descriptor_, &GC_PrintTableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_PrintTableRowColInfo_descriptor_, &GC_PrintTableRowColInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_PrintTableRowInfo_descriptor_, &GC_PrintTableRowInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_ProductInfo_descriptor_, &GC_ProductInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_RemarkInfo_descriptor_, &GC_RemarkInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_ShapeInfo_descriptor_, &GC_ShapeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_SkinInfo_descriptor_, &GC_SkinInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_TableInfo_descriptor_, &GC_TableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_TablePartInfo_descriptor_, &GC_TablePartInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_TableSideInfo_descriptor_, &GC_TableSideInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_WallDecorInfo_descriptor_, &GC_WallDecorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_WallInfo_descriptor_, &GC_WallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_Table_descriptor_, &GC_Table::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2dGC_2eproto() {
  delete GC_CabBoardGapInfo::default_instance_;
  delete GC_CabBoardGapInfo_reflection_;
  delete GC_CabBoardInfo::default_instance_;
  delete GC_CabBoardInfo_reflection_;
  delete GC_CabBoardSealInfo::default_instance_;
  delete GC_CabBoardSealInfo_reflection_;
  delete GC_CabDoorBoardGapInfo::default_instance_;
  delete GC_CabDoorBoardGapInfo_reflection_;
  delete GC_CabDoorBoardInfo::default_instance_;
  delete GC_CabDoorBoardInfo_reflection_;
  delete GC_CabDoorBoardSealInfo::default_instance_;
  delete GC_CabDoorBoardSealInfo_reflection_;
  delete GC_CabDoorHWFInfo::default_instance_;
  delete GC_CabDoorHWFInfo_reflection_;
  delete GC_CabDoorHandleInfo::default_instance_;
  delete GC_CabDoorHandleInfo_reflection_;
  delete GC_CabDoorInfo::default_instance_;
  delete GC_CabDoorInfo_reflection_;
  delete GC_CabDoorRegionInfo::default_instance_;
  delete GC_CabDoorRegionInfo_reflection_;
  delete GC_CabDoorSlideInfo::default_instance_;
  delete GC_CabDoorSlideInfo_reflection_;
  delete GC_CabDoorSystemInfo::default_instance_;
  delete GC_CabDoorSystemInfo_reflection_;
  delete GC_CabFNFHWFInfo::default_instance_;
  delete GC_CabFNFHWFInfo_reflection_;
  delete GC_CabFNFHoleInfo::default_instance_;
  delete GC_CabFNFHoleInfo_reflection_;
  delete GC_CabFNFInfo::default_instance_;
  delete GC_CabFNFInfo_reflection_;
  delete GC_CabFNFPartInfo::default_instance_;
  delete GC_CabFNFPartInfo_reflection_;
  delete GC_CabFNFPartSealInfo::default_instance_;
  delete GC_CabFNFPartSealInfo_reflection_;
  delete GC_CabInfo::default_instance_;
  delete GC_CabInfo_reflection_;
  delete GC_DecorBoardInfo::default_instance_;
  delete GC_DecorBoardInfo_reflection_;
  delete GC_DecorBoardUnitInfo::default_instance_;
  delete GC_DecorBoardUnitInfo_reflection_;
  delete GC_DecorBoardUnitSealInfo::default_instance_;
  delete GC_DecorBoardUnitSealInfo_reflection_;
  delete GC_DecorInfo::default_instance_;
  delete GC_DecorInfo_reflection_;
  delete GC_DecorLineInfo::default_instance_;
  delete GC_DecorLineInfo_reflection_;
  delete GC_DesignPlanInfo::default_instance_;
  delete GC_DesignPlanInfo_reflection_;
  delete GC_FittingInfo::default_instance_;
  delete GC_FittingInfo_reflection_;
  delete GC_HWFInfo::default_instance_;
  delete GC_HWFInfo_reflection_;
  delete GC_MarkInfo::default_instance_;
  delete GC_MarkInfo_reflection_;
  delete GC_MatrixInfo::default_instance_;
  delete GC_MatrixInfo_reflection_;
  delete GC_OrderAddedInfo::default_instance_;
  delete GC_OrderAddedInfo_reflection_;
  delete GC_OrderDataInfo::default_instance_;
  delete GC_OrderDataInfo_reflection_;
  delete GC_PackInfo::default_instance_;
  delete GC_PackInfo_reflection_;
  delete GC_PointInfo::default_instance_;
  delete GC_PointInfo_reflection_;
  delete GC_PrintElementInfo::default_instance_;
  delete GC_PrintElementInfo_reflection_;
  delete GC_PrintGroupInfo::default_instance_;
  delete GC_PrintGroupInfo_reflection_;
  delete GC_PrintInfo::default_instance_;
  delete GC_PrintInfo_reflection_;
  delete GC_PrintTableInfo::default_instance_;
  delete GC_PrintTableInfo_reflection_;
  delete GC_PrintTableRowColInfo::default_instance_;
  delete GC_PrintTableRowColInfo_reflection_;
  delete GC_PrintTableRowInfo::default_instance_;
  delete GC_PrintTableRowInfo_reflection_;
  delete GC_ProductInfo::default_instance_;
  delete GC_ProductInfo_reflection_;
  delete GC_RemarkInfo::default_instance_;
  delete GC_RemarkInfo_reflection_;
  delete GC_ShapeInfo::default_instance_;
  delete GC_ShapeInfo_reflection_;
  delete GC_SkinInfo::default_instance_;
  delete GC_SkinInfo_reflection_;
  delete GC_TableInfo::default_instance_;
  delete GC_TableInfo_reflection_;
  delete GC_TablePartInfo::default_instance_;
  delete GC_TablePartInfo_reflection_;
  delete GC_TableSideInfo::default_instance_;
  delete GC_TableSideInfo_reflection_;
  delete GC_WallDecorInfo::default_instance_;
  delete GC_WallDecorInfo_reflection_;
  delete GC_WallInfo::default_instance_;
  delete GC_WallInfo_reflection_;
  delete GC_Table::default_instance_;
  delete GC_Table_reflection_;
}

void protobuf_AddDesc_msg_2dGC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014msg-GC.proto\022\010transMsg\"\277\003\n\022GC_CabBoard"
    "GapInfo\022\025\n\rCabBoardGapID\030\001 \002(\005\022\022\n\nCabBoa"
    "rdID\030\002 \002(\005\022\021\n\tOrderCate\030\003 \002(\005\022\017\n\007OrderID"
    "\030\004 \002(\003\022\024\n\014DesignPlanID\030\005 \002(\005\022\021\n\tFactoryI"
    "D\030\006 \002(\005\022\017\n\007VerCode\030\007 \002(\003\022\030\n\020CabStructBoa"
    "rdID\030\010 \002(\005\022\033\n\023CabStructBoardGapID\030\t \002(\005\022"
    "\016\n\006GapPos\030\n \002(\005\022\020\n\010GapIndex\030\013 \002(\005\022\017\n\007Gap"
    "Type\030\014 \002(\005\022\020\n\010GapShape\030\r \002(\005\022\014\n\004XLen\030\016 \002"
    "(\001\022\014\n\004YLen\030\017 \002(\001\022\022\n\nXOffsetLen\030\020 \002(\001\022\022\n\n"
    "YOffsetLen\030\021 \002(\001\022\022\n\nZOffsetLen\030\022 \002(\001\022\021\n\t"
    "CreatorID\030\023 \002(\005\022\021\n\tUpdaterID\030\024 \002(\005\022\022\n\nCr"
    "eateTime\030\025 \002(\003\022\022\n\nUpdateTime\030\026 \002(\003\"\344\004\n\017G"
    "C_CabBoardInfo\022\022\n\nCabBoardID\030\001 \002(\005\022\r\n\005Ca"
    "bID\030\002 \002(\005\022\021\n\tOrderCate\030\003 \002(\005\022\017\n\007OrderID\030"
    "\004 \002(\003\022\024\n\014DesignPlanID\030\005 \002(\005\022\021\n\tFactoryID"
    "\030\006 \002(\005\022\017\n\007VerCode\030\007 \002(\003\022\025\n\rCabinetSizeID"
    "\030\010 \002(\005\022\030\n\020CabStructBoardID\030\t \002(\005\022\032\n\022Cabi"
    "netSizeBoardID\030\n \002(\005\022\024\n\014CabMatPlanID\030\013 \002"
    "(\005\022\r\n\005MatID\030\014 \002(\005\022\020\n\010MatGType\030\r \002(\005\022\025\n\rS"
    "kinDirection\030\016 \002(\005\022\022\n\nSealRuleID\030\017 \002(\005\022\014"
    "\n\004XLen\030\020 \002(\001\022\014\n\004YLen\030\021 \002(\001\022\014\n\004ZLen\030\022 \002(\001"
    "\022\022\n\nXOffsetLen\030\023 \002(\001\022\022\n\nYOffsetLen\030\024 \002(\001"
    "\022\022\n\nZOffsetLen\030\025 \002(\001\022\r\n\005XDock\030\026 \002(\005\022\r\n\005Y"
    "Dock\030\027 \002(\005\022\r\n\005ZDock\030\030 \002(\005\022\027\n\017IsChangedOf"
    "fset\030\031 \002(\010\022\021\n\tIsFakeDel\030\032 \002(\010\022\021\n\tCreator"
    "ID\030\033 \002(\005\022\021\n\tUpdaterID\030\034 \002(\005\022\022\n\nCreateTim"
    "e\030\035 \002(\003\022\022\n\nUpdateTime\030\036 \002(\003\022\024\n\014CabBoardN"
    "ame\030\037 \002(\t\"\241\002\n\023GC_CabBoardSealInfo\022\026\n\016Cab"
    "BoardSealID\030\001 \002(\005\022\022\n\nCabBoardID\030\002 \002(\005\022\021\n"
    "\tOrderCate\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\024\n\014Des"
    "ignPlanID\030\005 \002(\005\022\034\n\024CabStructBoardSealID\030"
    "\006 \002(\005\022\030\n\020CabStructBoardID\030\007 \002(\005\022\021\n\tFacto"
    "ryID\030\010 \002(\005\022\017\n\007VerCode\030\t \002(\003\022\020\n\010SealType\030"
    "\n \002(\005\022\021\n\tSealIndex\030\013 \002(\005\022\022\n\nMaterialID\030\014"
    " \002(\005\022\017\n\007PreMill\030\r \002(\001\"\301\003\n\026GC_CabDoorBoar"
    "dGapInfo\022\031\n\021CabDoorBoardGapID\030\001 \002(\005\022\026\n\016C"
    "abDoorBoardID\030\002 \002(\005\022\021\n\tOrderCate\030\003 \002(\005\022\017"
    "\n\007OrderID\030\004 \002(\003\022\024\n\014DesignPlanID\030\005 \002(\005\022\026\n"
    "\016DoorBoardGapID\030\006 \002(\005\022\023\n\013DoorBoardID\030\007 \002"
    "(\005\022\021\n\tFactoryID\030\010 \002(\005\022\017\n\007VerCode\030\t \002(\003\022\016"
    "\n\006GapPos\030\n \002(\005\022\020\n\010GapIndex\030\013 \002(\005\022\017\n\007GapT"
    "ype\030\014 \002(\005\022\020\n\010GapShape\030\r \002(\005\022\014\n\004XLen\030\016 \002("
    "\001\022\014\n\004YLen\030\017 \002(\001\022\022\n\nXOffsetLen\030\020 \002(\001\022\022\n\nY"
    "OffsetLen\030\021 \002(\001\022\022\n\nZOffsetLen\030\022 \002(\001\022\021\n\tC"
    "reatorID\030\023 \002(\005\022\021\n\tUpdaterID\030\024 \002(\005\022\022\n\nCre"
    "ateTime\030\025 \002(\003\022\022\n\nUpdateTime\030\026 \002(\003\"\260\004\n\023GC"
    "_CabDoorBoardInfo\022\026\n\016CabDoorBoardID\030\001 \002("
    "\005\022\021\n\tCabDoorID\030\002 \002(\005\022\021\n\tOrderCate\030\003 \002(\005\022"
    "\017\n\007OrderID\030\004 \002(\003\022\024\n\014DesignPlanID\030\005 \002(\005\022\023"
    "\n\013DoorBoardID\030\006 \002(\005\022\016\n\006DoorID\030\007 \002(\005\022\026\n\016D"
    "oorBoardIndex\030\010 \002(\005\022\021\n\tFactoryID\030\t \002(\005\022\017"
    "\n\007VerCode\030\n \002(\003\022\025\n\rDoorMatPlanID\030\013 \002(\005\022\r"
    "\n\005MatID\030\014 \002(\005\022\020\n\010MatGType\030\r \002(\005\022\025\n\rSkinD"
    "irection\030\016 \002(\005\022\022\n\nSealRuleID\030\017 \002(\005\022\017\n\007Mo"
    "delID\030\020 \002(\005\022\r\n\005XDock\030\021 \002(\005\022\r\n\005YDock\030\022 \002("
    "\005\022\r\n\005ZDock\030\023 \002(\005\022\014\n\004XLen\030\024 \002(\001\022\014\n\004YLen\030\025"
    " \002(\001\022\014\n\004ZLen\030\026 \002(\001\022\022\n\nXOffsetLen\030\027 \002(\001\022\022"
    "\n\nYOffsetLen\030\030 \002(\001\022\022\n\nZOffsetLen\030\031 \002(\001\022\021"
    "\n\tCreatorID\030\032 \002(\005\022\021\n\tUpdaterID\030\033 \002(\005\022\022\n\n"
    "CreateTime\030\034 \002(\003\022\022\n\nUpdateTime\030\035 \002(\003\"\212\002\n"
    "\027GC_CabDoorBoardSealInfo\022\032\n\022CabDoorBoard"
    "SealID\030\001 \002(\005\022\026\n\016CabDoorBoardID\030\002 \002(\005\022\021\n\t"
    "OrderCate\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\024\n\014Desi"
    "gnPlanID\030\005 \002(\005\022\023\n\013DoorBoardID\030\006 \002(\005\022\021\n\tS"
    "ealIndex\030\007 \002(\005\022\021\n\tFactoryID\030\010 \002(\005\022\017\n\007Ver"
    "Code\030\t \002(\003\022\020\n\010SealType\030\n \002(\005\022\022\n\nMaterial"
    "ID\030\013 \002(\005\022\017\n\007PreMill\030\014 \002(\001\"\326\002\n\021GC_CabDoor"
    "HWFInfo\022\024\n\014CabDoorHWFID\030\001 \002(\005\022\027\n\017CabDoor"
    "RegionID\030\002 \002(\005\022\021\n\tOrderCate\030\003 \002(\005\022\017\n\007Ord"
    "erID\030\004 \002(\003\022\024\n\014DesignPlanID\030\005 \002(\005\022\023\n\013HWFi"
    "ttingID\030\006 \002(\005\022\021\n\tFactoryID\030\007 \002(\005\022\017\n\007VerC"
    "ode\030\010 \002(\003\022\022\n\nSupplyType\030\t \002(\005\022\017\n\007GTypeID"
    "\030\n \002(\005\022\032\n\022SettingCountRuleID\030\013 \002(\005\022\020\n\010Us"
    "eCount\030\014 \002(\005\022\021\n\tCreatorID\030\r \002(\005\022\021\n\tUpdat"
    "erID\030\016 \002(\005\022\022\n\nCreateTime\030\017 \002(\003\022\022\n\nUpdate"
    "Time\030\020 \002(\003\"\252\005\n\024GC_CabDoorHandleInfo\022\027\n\017C"
    "abDoorHandleID\030\001 \002(\005\022\023\n\013CabParentID\030\002 \002("
    "\005\022\022\n\nParentType\030\003 \002(\005\022\021\n\tOrderCate\030\004 \002(\005"
    "\022\017\n\007OrderID\030\005 \002(\003\022\024\n\014DesignPlanID\030\006 \002(\005\022"
    "\035\n\025CabDesignDoorRegionID\030\007 \002(\005\022#\n\033CabDes"
    "ignDoorRegionHandleID\030\010 \002(\005\022\017\n\007OwnerID\030\t"
    " \002(\005\022\025\n\rDoorMatPlanID\030\n \002(\005\022\020\n\010HandleID\030"
    "\013 \002(\005\022\021\n\tFactoryID\030\014 \002(\005\022\017\n\007VerCode\030\r \002("
    "\003\022\021\n\tMatchType\030\016 \002(\005\022\027\n\017IsChangedOffset\030"
    "\017 \002(\010\022\022\n\nSupplyType\030\020 \002(\005\022\017\n\007GTypeID\030\021 \002"
    "(\005\022\r\n\005XDock\030\022 \002(\005\022\r\n\005YDock\030\023 \002(\005\022\r\n\005ZDoc"
    "k\030\024 \002(\005\022\014\n\004XLen\030\025 \002(\001\022\014\n\004YLen\030\026 \002(\001\022\014\n\004Z"
    "Len\030\027 \002(\001\022\020\n\010RealXLen\030\030 \002(\001\022\020\n\010RealYLen\030"
    "\031 \002(\001\022\020\n\010RealZLen\030\032 \002(\001\022\022\n\nXOffsetLen\030\033 "
    "\002(\001\022\022\n\nYOffsetLen\030\034 \002(\001\022\022\n\nZOffsetLen\030\035 "
    "\002(\001\022\014\n\004ArcZ\030\036 \002(\001\022\021\n\tCreatorID\030\037 \002(\005\022\021\n\t"
    "UpdaterID\030  \002(\005\022\022\n\nCreateTime\030! \002(\003\022\022\n\nU"
    "pdateTime\030\" \002(\003\"\332\002\n\016GC_CabDoorInfo\022\021\n\tCa"
    "bDoorID\030\001 \002(\005\022\023\n\013CabParentID\030\002 \002(\005\022\022\n\nPa"
    "rentType\030\003 \002(\005\022\021\n\tOrderCate\030\004 \002(\005\022\017\n\007Ord"
    "erID\030\005 \002(\003\022\024\n\014DesignPlanID\030\006 \002(\005\022\017\n\007Owne"
    "rID\030\007 \002(\005\022\025\n\rDoorMatPlanID\030\010 \002(\005\022\016\n\006Door"
    "ID\030\t \002(\005\022\021\n\tFactoryID\030\n \002(\005\022\017\n\007VerCode\030\013"
    " \002(\003\022\014\n\004XLen\030\014 \002(\001\022\014\n\004YLen\030\r \002(\001\022\014\n\004ZLen"
    "\030\016 \002(\001\022\021\n\tCreatorID\030\017 \002(\005\022\021\n\tUpdaterID\030\020"
    " \002(\005\022\022\n\nCreateTime\030\021 \002(\003\022\022\n\nUpdateTime\030\022"
    " \002(\003\"\242\006\n\024GC_CabDoorRegionInfo\022\027\n\017CabDoor"
    "RegionID\030\001 \002(\005\022\027\n\017CabDoorSystemID\030\002 \002(\005\022"
    "\031\n\021ParentCabRegionID\030\003 \002(\005\022\021\n\tOrderCate\030"
    "\004 \002(\005\022\017\n\007OrderID\030\005 \002(\003\022\024\n\014DesignPlanID\030\006"
    " \002(\005\022\032\n\022DoorSystemRegionID\030\007 \002(\005\022\024\n\014Door"
    "SystemID\030\010 \002(\005\022\035\n\025CabDesignDoorRegionID\030"
    "\t \002(\005\022\035\n\025CabDesignDoorSystemID\030\n \002(\005\022\023\n\013"
    "CabDesignID\030\013 \002(\005\022\021\n\tFactoryID\030\014 \002(\005\022\017\n\007"
    "VerCode\030\r \002(\003\022\030\n\020IsUserDefineSize\030\016 \002(\010\022"
    "\027\n\017IsUserDefinePos\030\017 \002(\010\022\r\n\005XDock\030\020 \002(\005\022"
    "\r\n\005YDock\030\021 \002(\005\022\r\n\005ZDock\030\022 \002(\005\022\014\n\004XLen\030\023 "
    "\002(\001\022\014\n\004YLen\030\024 \002(\001\022\014\n\004ZLen\030\025 \002(\001\022\022\n\nXAdju"
    "stLen\030\026 \002(\001\022\022\n\nYAdjustLen\030\027 \002(\001\022\020\n\010RealX"
    "Len\030\030 \002(\001\022\020\n\010RealYLen\030\031 \002(\001\022\020\n\010RealZLen\030"
    "\032 \002(\001\022\017\n\007CutXLen\030\033 \002(\001\022\017\n\007CutYLen\030\034 \002(\001\022"
    "\022\n\nXOffsetLen\030\035 \002(\001\022\022\n\nYOffsetLen\030\036 \002(\001\022"
    "\022\n\nZOffsetLen\030\037 \002(\001\022\026\n\016RealXOffsetLen\030  "
    "\002(\001\022\026\n\016RealYOffsetLen\030! \002(\001\022\026\n\016RealZOffs"
    "etLen\030\" \002(\001\022\021\n\tCreatorID\030# \002(\005\022\021\n\tUpdate"
    "rID\030$ \002(\005\022\022\n\nCreateTime\030% \002(\003\022\022\n\nUpdateT"
    "ime\030& \002(\003\"\367\003\n\023GC_CabDoorSlideInfo\022\026\n\016Cab"
    "DoorSlideID\030\001 \002(\005\022\027\n\017CabDoorRegionID\030\002 \002"
    "(\005\022\021\n\tOrderCate\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\024"
    "\n\014DesignPlanID\030\005 \002(\005\022\032\n\022DoorSystemRegion"
    "ID\030\006 \002(\005\022\017\n\007SlideID\030\007 \002(\005\022\017\n\007GTypeID\030\010 \002"
    "(\005\022\021\n\tFactoryID\030\t \002(\005\022\017\n\007VerCode\030\n \002(\003\022\025"
    "\n\rSlidePosition\030\013 \002(\005\022\022\n\nSupplyType\030\014 \002("
    "\005\022\014\n\004XLen\030\r \002(\001\022\014\n\004YLen\030\016 \002(\001\022\014\n\004ZLen\030\017 "
    "\002(\001\022\020\n\010RealXLen\030\020 \002(\001\022\020\n\010RealYLen\030\021 \002(\001\022"
    "\020\n\010RealZLen\030\022 \002(\001\022\022\n\nXOffsetLen\030\023 \002(\001\022\022\n"
    "\nYOffsetLen\030\024 \002(\001\022\022\n\nZOffsetLen\030\025 \002(\001\022\021\n"
    "\tCreatorID\030\026 \002(\005\022\021\n\tUpdaterID\030\027 \002(\005\022\022\n\nC"
    "reateTime\030\030 \002(\003\022\022\n\nUpdateTime\030\031 \002(\003\"\253\005\n\024"
    "GC_CabDoorSystemInfo\022\027\n\017CabDoorSystemID\030"
    "\001 \002(\005\022\r\n\005CabID\030\002 \002(\005\022\021\n\tOrderCate\030\003 \002(\005\022"
    "\017\n\007OrderID\030\004 \002(\003\022\024\n\014DesignPlanID\030\005 \002(\005\022\035"
    "\n\025CabDesignDoorSystemID\030\006 \002(\005\022\023\n\013CabDesi"
    "gnID\030\007 \002(\005\022\021\n\tFactoryID\030\010 \002(\005\022\017\n\007VerCode"
    "\030\t \002(\003\022\024\n\014DoorSystemID\030\n \002(\005\022\025\n\rDoorMatP"
    "lanID\030\013 \002(\005\022\022\n\nSupplyType\030\014 \002(\005\022\021\n\tIsFak"
    "eDel\030\r \002(\010\022\r\n\005XDock\030\016 \002(\005\022\r\n\005YDock\030\017 \002(\005"
    "\022\r\n\005ZDock\030\020 \002(\005\022\014\n\004XLen\030\021 \002(\001\022\014\n\004YLen\030\022 "
    "\002(\001\022\014\n\004ZLen\030\023 \002(\001\022\022\n\nXAdjustLen\030\024 \002(\001\022\022\n"
    "\nYAdjustLen\030\025 \002(\001\022\020\n\010RealXLen\030\026 \002(\001\022\020\n\010R"
    "ealYLen\030\027 \002(\001\022\020\n\010RealZLen\030\030 \002(\001\022\022\n\nXOffs"
    "etLen\030\031 \002(\001\022\022\n\nYOffsetLen\030\032 \002(\001\022\022\n\nZOffs"
    "etLen\030\033 \002(\001\022\026\n\016RealXOffsetLen\030\034 \002(\001\022\026\n\016R"
    "ealYOffsetLen\030\035 \002(\001\022\026\n\016RealZOffsetLen\030\036 "
    "\002(\001\022\021\n\tCreatorID\030\037 \002(\005\022\021\n\tUpdaterID\030  \002("
    "\005\022\022\n\nCreateTime\030! \002(\003\022\022\n\nUpdateTime\030\" \002("
    "\003\"\311\002\n\020GC_CabFNFHWFInfo\022\023\n\013CabFNFHWFID\030\001 "
    "\002(\005\022\020\n\010CabFNFID\030\002 \002(\005\022\021\n\tOrderCate\030\003 \002(\005"
    "\022\017\n\007OrderID\030\004 \002(\003\022\024\n\014DesignPlanID\030\005 \002(\005\022"
    "\023\n\013FNFittingID\030\006 \002(\005\022\023\n\013HWFittingID\030\007 \002("
    "\005\022\023\n\013FittingType\030\010 \002(\005\022\021\n\tFactoryID\030\t \002("
    "\005\022\017\n\007VerCode\030\n \002(\003\022\021\n\tIsFakeDel\030\013 \002(\005\022\020\n"
    "\010UseCount\030\014 \002(\005\022\021\n\tCreatorID\030\r \002(\005\022\021\n\tUp"
    "daterID\030\016 \002(\005\022\022\n\nCreateTime\030\017 \002(\003\022\022\n\nUpd"
    "ateTime\030\020 \002(\003\"\301\002\n\021GC_CabFNFHoleInfo\022\024\n\014C"
    "abFNFHoleID\030\001 \002(\005\022\020\n\010CabFNFID\030\002 \002(\005\022\021\n\tO"
    "rderCate\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\024\n\014Desig"
    "nPlanID\030\005 \002(\005\022\016\n\006HoleID\030\006 \002(\005\022\023\n\013FNFitti"
    "ngID\030\007 \002(\005\022\021\n\tFactoryID\030\010 \002(\005\022\017\n\007VerCode"
    "\030\t \002(\003\022\022\n\nHoleTypeID\030\n \002(\005\022\021\n\tHolePicID\030"
    "\013 \002(\005\022\014\n\004XLen\030\014 \002(\001\022\014\n\004YLen\030\r \002(\001\022\022\n\nOve"
    "rHeight\030\016 \002(\001\022\024\n\014MinXDistance\030\017 \002(\001\022\024\n\014M"
    "inZDistance\030\020 \002(\001\"\231\006\n\rGC_CabFNFInfo\022\020\n\010C"
    "abFNFID\030\001 \002(\005\022\025\n\rDesignOwnerID\030\002 \002(\005\022\032\n\022"
    "DesignOwnerGTypeID\030\003 \002(\005\022\021\n\tOrderCate\030\004 "
    "\002(\005\022\024\n\014DesignPlanID\030\005 \002(\005\022\017\n\007OrderID\030\006 \002"
    "(\003\022\023\n\013ContainerID\030\007 \002(\005\022\030\n\020ContainerGTyp"
    "eID\030\010 \002(\005\022\034\n\024CabDesignFNFittingID\030\t \002(\005\022"
    "\023\n\013FNFittingID\030\n \002(\005\022\021\n\tFactoryID\030\013 \002(\005\022"
    "\017\n\007VerCode\030\014 \002(\003\022\021\n\tDockObjID\030\r \002(\005\022\023\n\013D"
    "ockObjType\030\016 \002(\005\022\020\n\010DockXPos\030\017 \002(\001\022\020\n\010Do"
    "ckYPos\030\020 \002(\001\022\017\n\007HasMark\030\021 \002(\010\022\021\n\tIsFakeD"
    "el\030\022 \002(\010\022\021\n\tIsVisible\030\023 \002(\010\022\020\n\010IsLocked\030"
    "\024 \002(\010\022\022\n\nMaterialID\030\025 \002(\005\022\022\n\nSupplyType\030"
    "\026 \002(\005\022\017\n\007GTypeID\030\027 \002(\005\022\r\n\005XDock\030\030 \002(\005\022\r\n"
    "\005YDock\030\031 \002(\005\022\r\n\005ZDock\030\032 \002(\005\022\014\n\004XLen\030\033 \002("
    "\001\022\014\n\004YLen\030\034 \002(\001\022\014\n\004ZLen\030\035 \002(\001\022\020\n\010RealXLe"
    "n\030\036 \002(\001\022\020\n\010RealYLen\030\037 \002(\001\022\020\n\010RealZLen\030  "
    "\002(\001\022\022\n\nXOffsetLen\030! \002(\001\022\022\n\nYOffsetLen\030\" "
    "\002(\001\022\022\n\nZOffsetLen\030# \002(\001\022\014\n\004YPos\030$ \002(\001\022\021\n"
    "\tCreatorID\030% \002(\005\022\021\n\tUpdaterID\030& \002(\005\022\022\n\nC"
    "reateTime\030\' \002(\003\022\022\n\nUpdateTime\030( \002(\003\022\020\n\010U"
    "serMemo\030) \002(\t\"\266\004\n\021GC_CabFNFPartInfo\022\024\n\014C"
    "abFNFPartID\030\001 \002(\005\022\020\n\010CabFNFID\030\002 \002(\005\022\021\n\tO"
    "rderCate\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\024\n\014Desig"
    "nPlanID\030\005 \002(\005\022\027\n\017FNFittingPartID\030\006 \002(\005\022\023"
    "\n\013FNFittingID\030\007 \002(\005\022\021\n\tFactoryID\030\010 \002(\005\022\017"
    "\n\007VerCode\030\t \002(\003\022\023\n\013HWFittingID\030\n \002(\005\022\022\n\n"
    "MaterialID\030\013 \002(\005\022\022\n\nSealRuleID\030\014 \002(\005\022\020\n\010"
    "PartType\030\r \002(\005\022\022\n\nSupplyType\030\016 \002(\005\022\017\n\007GT"
    "ypeID\030\017 \002(\005\022\017\n\007ModelID\030\020 \002(\005\022\014\n\004XLen\030\021 \002"
    "(\001\022\014\n\004YLen\030\022 \002(\001\022\014\n\004ZLen\030\023 \002(\001\022\020\n\010RealXL"
    "en\030\024 \002(\001\022\020\n\010RealYLen\030\025 \002(\001\022\020\n\010RealZLen\030\026"
    " \002(\001\022\022\n\nXOffsetLen\030\027 \002(\001\022\022\n\nYOffsetLen\030\030"
    " \002(\001\022\022\n\nZOffsetLen\030\031 \002(\001\022\021\n\tCreatorID\030\032 "
    "\002(\005\022\021\n\tUpdaterID\030\033 \002(\005\022\022\n\nCreateTime\030\034 \002"
    "(\003\022\022\n\nUpdateTime\030\035 \002(\003\"\210\002\n\025GC_CabFNFPart"
    "SealInfo\022\030\n\020CabFNFPartSealID\030\001 \002(\005\022\024\n\014Ca"
    "bFNFPartID\030\002 \002(\005\022\021\n\tOrderCate\030\003 \002(\005\022\017\n\007O"
    "rderID\030\004 \002(\003\022\024\n\014DesignPlanID\030\005 \002(\005\022\021\n\tFa"
    "ctoryID\030\006 \002(\005\022\017\n\007VerCode\030\007 \002(\003\022\027\n\017FNFitt"
    "ingPartID\030\010 \002(\005\022\020\n\010SealType\030\t \002(\005\022\021\n\tSea"
    "lIndex\030\n \002(\005\022\022\n\nMaterialID\030\013 \002(\005\022\017\n\007PreM"
    "ill\030\014 \002(\001\"\216\005\n\nGC_CabInfo\022\r\n\005CabID\030\001 \002(\005\022"
    "\021\n\tOrderCate\030\002 \002(\005\022\024\n\014DesignPlanID\030\003 \002(\005"
    "\022\017\n\007OrderID\030\004 \002(\003\022\023\n\013CabDesignID\030\005 \002(\005\022\025"
    "\n\rCabinetSizeID\030\006 \002(\005\022\023\n\013CabStructID\030\007 \002"
    "(\005\022\021\n\tFactoryID\030\010 \002(\005\022\017\n\007VerCode\030\t \002(\003\022\024"
    "\n\014CabMatPlanID\030\n \002(\005\022\022\n\nSealRuleID\030\013 \002(\005"
    "\022\021\n\tDockObjID\030\014 \002(\005\022\023\n\013DockObjType\030\r \002(\005"
    "\022\020\n\010DockXPos\030\016 \002(\001\022\020\n\010DockYPos\030\017 \002(\001\022\014\n\004"
    "XLen\030\020 \002(\001\022\014\n\004YLen\030\021 \002(\001\022\014\n\004ZLen\030\022 \002(\001\022\021"
    "\n\tShapeXLen\030\023 \002(\001\022\021\n\tShapeZLen\030\024 \002(\001\022\017\n\007"
    "GapXLen\030\025 \002(\001\022\017\n\007GapYLen\030\026 \002(\001\022\017\n\007GapZLe"
    "n\030\027 \002(\001\022\014\n\004YPos\030\030 \002(\001\022\016\n\006FootID\030\031 \002(\005\022\021\n"
    "\tFootCount\030\032 \002(\005\022\020\n\010FootYLen\030\033 \002(\001\022\022\n\nIs"
    "Standard\030\034 \002(\010\022\017\n\007HasMark\030\035 \002(\010\022\021\n\tIsVis"
    "ible\030\036 \002(\010\022\020\n\010IsLocked\030\037 \002(\010\022\021\n\tCreatorI"
    "D\030  \002(\005\022\021\n\tUpdaterID\030! \002(\005\022\022\n\nCreateTime"
    "\030\" \002(\003\022\022\n\nUpdateTime\030# \002(\003\"\237\006\n\021GC_DecorB"
    "oardInfo\022\032\n\022DesignDecorBoardID\030\001 \002(\005\022\024\n\014"
    "DesignPlanID\030\002 \002(\005\022\026\n\016DesignParentID\030\003 \002"
    "(\005\022\021\n\tOrderCate\030\004 \002(\005\022\017\n\007OrderID\030\005 \002(\003\022\024"
    "\n\014DecorBoardID\030\006 \002(\005\022\025\n\rDecorParentID\030\007 "
    "\002(\005\022\021\n\tFactoryID\030\010 \002(\005\022\017\n\007VerCode\030\t \002(\003\022"
    "\017\n\007GroupID\030\n \002(\005\022\022\n\nGroupIndex\030\013 \002(\005\022\017\n\007"
    "GTypeID\030\014 \002(\005\022\021\n\tIsAutoFit\030\r \002(\010\022\017\n\007HasM"
    "ark\030\016 \002(\010\022\021\n\tIsVisible\030\017 \002(\010\022\020\n\010IsLocked"
    "\030\020 \002(\010\022\025\n\rIsChangedSize\030\021 \002(\010\022\020\n\010IsDragI"
    "n\030\022 \002(\010\022\025\n\rDoorMatPlanID\030\023 \002(\005\022\024\n\014CabMat"
    "PlanID\030\024 \002(\005\022\016\n\006DoorID\030\025 \002(\005\022\022\n\nTargetTy"
    "pe\030\026 \002(\005\022\021\n\tDockObjID\030\027 \002(\005\022\023\n\013DockObjTy"
    "pe\030\030 \002(\005\022\020\n\010DockXPos\030\031 \002(\001\022\020\n\010DockYPos\030\032"
    " \002(\001\022\r\n\005MatID\030\033 \002(\005\022\020\n\010MatGType\030\034 \002(\005\022\022\n"
    "\nSupplyType\030\035 \002(\005\022\017\n\007ModelID\030\036 \002(\005\022\014\n\004YP"
    "os\030\037 \002(\001\022\014\n\004XLen\030  \002(\001\022\014\n\004YLen\030! \002(\001\022\014\n\004"
    "ZLen\030\" \002(\001\022\022\n\nXOffsetLen\030# \002(\001\022\022\n\nYOffse"
    "tLen\030$ \002(\001\022\022\n\nZOffsetLen\030% \002(\001\022\021\n\tCreato"
    "rID\030& \002(\005\022\021\n\tUpdaterID\030\' \002(\005\022\022\n\nCreateTi"
    "me\030( \002(\003\022\022\n\nUpdateTime\030) \002(\003\"\360\004\n\025GC_Deco"
    "rBoardUnitInfo\022\036\n\026DesignDecorBoardUnitID"
    "\030\001 \002(\005\022\032\n\022DesignDecorBoardID\030\002 \002(\005\022\021\n\tOr"
    "derCate\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\024\n\014Design"
    "PlanID\030\005 \002(\005\022\030\n\020DecorBoardUnitID\030\006 \002(\005\022\024"
    "\n\014DecorBoardID\030\007 \002(\005\022\033\n\023DecorBoardUnitIn"
    "dex\030\010 \002(\005\022\021\n\tFactoryID\030\t \002(\005\022\017\n\007VerCode\030"
    "\n \002(\003\022\021\n\tIsUseDoor\030\013 \002(\010\022\025\n\rDoorMatPlanI"
    "D\030\014 \002(\005\022\024\n\014CabMatPlanID\030\r \002(\005\022\016\n\006DoorID\030"
    "\016 \002(\005\022\022\n\nTargetType\030\017 \002(\005\022\r\n\005MatID\030\020 \002(\005"
    "\022\020\n\010MatGType\030\021 \002(\005\022\022\n\nSupplyType\030\022 \002(\005\022\022"
    "\n\nSealRuleID\030\023 \002(\005\022\017\n\007ModelID\030\024 \002(\005\022\014\n\004X"
    "Len\030\025 \002(\001\022\014\n\004YLen\030\026 \002(\001\022\014\n\004ZLen\030\027 \002(\001\022\022\n"
    "\nXOffsetLen\030\030 \002(\001\022\022\n\nYOffsetLen\030\031 \002(\001\022\022\n"
    "\nZOffsetLen\030\032 \002(\001\022\021\n\tCreatorID\030\033 \002(\005\022\021\n\t"
    "UpdaterID\030\034 \002(\005\022\022\n\nCreateTime\030\035 \002(\003\022\022\n\nU"
    "pdateTime\030\036 \002(\003\"\277\002\n\031GC_DecorBoardUnitSea"
    "lInfo\022\"\n\032DesignDecorBoardUnitSealID\030\001 \002("
    "\005\022\036\n\026DesignDecorBoardUnitID\030\002 \002(\005\022\021\n\tOrd"
    "erCate\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\024\n\014DesignP"
    "lanID\030\005 \002(\005\022\021\n\tFactoryID\030\006 \002(\005\022\017\n\007VerCod"
    "e\030\007 \002(\003\022\030\n\020DecorBoardUnitID\030\010 \002(\005\022\034\n\024Dec"
    "orBoardUnitSealID\030\t \002(\005\022\021\n\tSealIndex\030\n \002"
    "(\005\022\020\n\010SealType\030\013 \002(\005\022\022\n\nMaterialID\030\014 \002(\005"
    "\022\017\n\007PreMill\030\r \002(\001\"\301\003\n\014GC_DecorInfo\022\025\n\rDe"
    "signDecorID\030\001 \002(\005\022\021\n\tOrderCate\030\002 \002(\005\022\024\n\014"
    "DesignPlanID\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\017\n\007D"
    "ecorID\030\005 \002(\005\022\021\n\tFactoryID\030\006 \002(\005\022\017\n\007VerCo"
    "de\030\007 \002(\003\022\017\n\007HasMark\030\010 \002(\010\022\021\n\tIsVisible\030\t"
    " \002(\010\022\020\n\010IsLocked\030\n \002(\010\022\022\n\nSupplyType\030\013 \002"
    "(\005\022\017\n\007GTypeID\030\014 \002(\005\022\021\n\tDockObjID\030\r \002(\005\022\023"
    "\n\013DockObjType\030\016 \002(\005\022\020\n\010DockXPos\030\017 \002(\001\022\020\n"
    "\010DockYPos\030\020 \002(\001\022\014\n\004XLen\030\021 \002(\001\022\014\n\004YLen\030\022 "
    "\002(\001\022\014\n\004ZLen\030\023 \002(\001\022\014\n\004YPos\030\024 \002(\001\022\021\n\tCreat"
    "orID\030\025 \002(\005\022\021\n\tUpdaterID\030\026 \002(\005\022\022\n\nCreateT"
    "ime\030\027 \002(\003\022\022\n\nUpdateTime\030\030 \002(\003\"\277\003\n\020GC_Dec"
    "orLineInfo\022\031\n\021DesignDecorLineID\030\001 \002(\005\022\021\n"
    "\tOrderCate\030\002 \002(\005\022\024\n\014DesignPlanID\030\003 \002(\005\022\017"
    "\n\007OrderID\030\004 \002(\003\022\023\n\013DecorLineID\030\005 \002(\005\022\021\n\t"
    "FactoryID\030\006 \002(\005\022\017\n\007VerCode\030\007 \002(\003\022\017\n\007GTyp"
    "eID\030\010 \002(\005\022\021\n\tDockObjID\030\t \002(\005\022\023\n\013DockObjT"
    "ype\030\n \002(\005\022\020\n\010DockXPos\030\013 \002(\001\022\020\n\010DockYPos\030"
    "\014 \002(\001\022\022\n\nMaterialID\030\r \002(\005\022\017\n\007HasMark\030\016 \002"
    "(\010\022\021\n\tIsVisible\030\017 \002(\010\022\020\n\010IsLocked\030\020 \002(\010\022"
    "\014\n\004XLen\030\021 \002(\001\022\014\n\004YLen\030\022 \002(\001\022\014\n\004ZLen\030\023 \002("
    "\001\022\021\n\tCreatorID\030\024 \002(\005\022\021\n\tUpdaterID\030\025 \002(\005\022"
    "\022\n\nCreateTime\030\026 \002(\003\022\022\n\nUpdateTime\030\027 \002(\003\""
    "\323\002\n\021GC_DesignPlanInfo\022\024\n\014DesignPlanID\030\001 "
    "\002(\005\022\021\n\tOrderCate\030\002 \002(\005\022\017\n\007OrderID\030\003 \002(\003\022"
    "\021\n\tFactoryID\030\004 \002(\005\022\017\n\007VerCode\030\005 \002(\003\022\020\n\010C"
    "urScale\030\006 \002(\001\022\020\n\010IsActive\030\007 \002(\010\022\022\n\nSkyDe"
    "corID\030\010 \002(\005\022\024\n\014FloorDecorID\030\t \002(\005\022\023\n\013Wal"
    "lDecorID\030\n \002(\005\022\022\n\nDesignerID\030\013 \002(\005\022\021\n\tUp"
    "daterID\030\014 \002(\005\022\022\n\nCreateTime\030\r \002(\003\022\022\n\nUpd"
    "ateTime\030\016 \002(\003\022\026\n\016DesignPlanName\030\017 \002(\t\022\026\n"
    "\016DesignPlanMemo\030\020 \002(\t\"\243\002\n\016GC_FittingInfo"
    "\022\027\n\017DesignFittingID\030\001 \002(\005\022\021\n\tOrderCate\030\002"
    " \002(\005\022\024\n\014DesignPlanID\030\003 \002(\005\022\017\n\007OrderID\030\004 "
    "\002(\003\022\021\n\tFactoryID\030\005 \002(\005\022\017\n\007VerCode\030\006 \002(\003\022"
    "\021\n\tFittingID\030\007 \002(\005\022\017\n\007GTypeID\030\010 \002(\005\022\022\n\nS"
    "upplyType\030\t \002(\005\022\024\n\014FittingCount\030\n \002(\005\022\021\n"
    "\tCreatorID\030\013 \002(\005\022\021\n\tUpdaterID\030\014 \002(\005\022\022\n\nC"
    "reateTime\030\r \002(\003\022\022\n\nUpdateTime\030\016 \002(\003\"\231\002\n\n"
    "GC_HWFInfo\022\023\n\013DesignHWFID\030\001 \002(\005\022\021\n\tOrder"
    "Cate\030\002 \002(\005\022\024\n\014DesignPlanID\030\003 \002(\005\022\017\n\007Orde"
    "rID\030\004 \002(\003\022\023\n\013HWFittingID\030\005 \002(\005\022\021\n\tFactor"
    "yID\030\006 \002(\005\022\017\n\007VerCode\030\007 \002(\003\022\022\n\nSupplyType"
    "\030\010 \002(\005\022\017\n\007GTypeID\030\t \002(\005\022\020\n\010UseCount\030\n \002("
    "\005\022\021\n\tCreatorID\030\013 \002(\005\022\021\n\tUpdaterID\030\014 \002(\005\022"
    "\022\n\nCreateTime\030\r \002(\003\022\022\n\nUpdateTime\030\016 \002(\003\""
    "\231\005\n\013GC_MarkInfo\022\024\n\014DesignMarkID\030\001 \002(\005\022\021\n"
    "\tOrderCate\030\002 \002(\005\022\024\n\014DesignPlanID\030\003 \002(\005\022\017"
    "\n\007OrderID\030\004 \002(\003\022\025\n\rDesignPrintID\030\005 \002(\005\022\017"
    "\n\007PrintID\030\006 \002(\005\022\020\n\010ViewType\030\007 \002(\005\022\021\n\tDoc"
    "kObjID\030\010 \002(\005\022\023\n\013DockObjType\030\t \002(\005\022\020\n\010Mar"
    "kType\030\n \002(\005\022\020\n\010FontSize\030\013 \002(\005\022\016\n\006StartX\030"
    "\014 \002(\001\022\016\n\006StartY\030\r \002(\001\022\017\n\007OffsetX\030\016 \002(\001\022\017"
    "\n\007OffsetY\030\017 \002(\001\022\r\n\005StopX\030\020 \002(\001\022\r\n\005StopY\030"
    "\021 \002(\001\022\020\n\010TopLeftX\030\022 \002(\001\022\020\n\010TopLeftY\030\023 \002("
    "\001\022\r\n\005Width\030\024 \002(\001\022\016\n\006Height\030\025 \002(\001\022\021\n\tIsVi"
    "sible\030\026 \002(\010\022\020\n\010IsLocked\030\027 \002(\010\022\020\n\010EditSig"
    "n\030\030 \002(\010\022\021\n\tStrickOut\030\031 \002(\010\022\021\n\tUnderLine\030"
    "\032 \002(\010\022\016\n\006Italic\030\033 \002(\010\022\014\n\004Bold\030\034 \002(\010\022\017\n\007B"
    "GColor\030\035 \002(\003\022\021\n\tFontColor\030\036 \002(\003\022\021\n\tCreat"
    "orID\030\037 \002(\005\022\021\n\tUpdaterID\030  \002(\005\022\022\n\nCreateT"
    "ime\030! \002(\003\022\022\n\nUpdateTime\030\" \002(\003\022\020\n\010FaceNam"
    "e\030# \002(\t\022\022\n\nRemarkText\030$ \002(\t\"\225\003\n\rGC_Matri"
    "xInfo\022\017\n\007OrderID\030\001 \002(\003\022\021\n\tOrderCate\030\002 \002("
    "\005\022\024\n\014DesignPlanID\030\003 \002(\005\022\021\n\tFactoryID\030\004 \002"
    "(\005\022\017\n\007VerCode\030\005 \002(\003\022\022\n\nTransObjID\030\006 \002(\003\022"
    "\024\n\014TransObjType\030\007 \002(\005\022\023\n\013MajorCurSel\030\010 \002"
    "(\005\022\023\n\013MinorCurSel\030\t \002(\005\022\023\n\013MatCurIndex\030\n"
    " \002(\005\022\024\n\014CabMatPlanID\030\013 \002(\005\022\013\n\003M11\030\014 \002(\001\022"
    "\013\n\003M12\030\r \002(\001\022\013\n\003M13\030\016 \002(\001\022\013\n\003M21\030\017 \002(\001\022\013"
    "\n\003M22\030\020 \002(\001\022\013\n\003M23\030\021 \002(\001\022\013\n\003M31\030\022 \002(\001\022\013\n"
    "\003M32\030\023 \002(\001\022\013\n\003M33\030\024 \002(\001\022\013\n\003M41\030\025 \002(\001\022\013\n\003"
    "M42\030\026 \002(\001\022\013\n\003M43\030\027 \002(\001\022\013\n\003M44\030\030 \002(\001\"\215\002\n\021"
    "GC_OrderAddedInfo\022\024\n\014OrderAddedID\030\001 \002(\005\022"
    "\017\n\007OrderID\030\002 \002(\003\022\021\n\tOrderCate\030\003 \002(\005\022\021\n\tF"
    "actoryID\030\004 \002(\005\022\020\n\010UseCount\030\005 \002(\005\022\021\n\tUnit"
    "Price\030\006 \002(\001\022\022\n\nCreateTime\030\007 \002(\003\022\022\n\nUpdat"
    "eTime\030\010 \002(\003\022\021\n\tAddedName\030\t \002(\t\022\017\n\007MatNam"
    "e\030\n \002(\t\022\020\n\010UnitName\030\013 \002(\t\022\020\n\010SpecName\030\014 "
    "\002(\t\022\026\n\016AttachFileName\030\r \002(\t\"\310\004\n\020GC_Order"
    "DataInfo\022\017\n\007OrderID\030\001 \002(\003\022\021\n\tOrderCate\030\002"
    " \002(\005\022\021\n\tFactoryID\030\003 \002(\005\022\016\n\006ShopID\030\004 \002(\005\022"
    "\021\n\tMaxMetaID\030\005 \002(\005\022\022\n\nDesignerID\030\006 \002(\005\022\020"
    "\n\010SellerID\030\007 \002(\005\022\025\n\rPreSurveyorID\030\010 \002(\005\022"
    "\024\n\014ReSurveyorID\030\t \002(\005\022\r\n\005IsNew\030\n \002(\010\022\017\n\007"
    "IsShare\030\013 \002(\010\022\020\n\010IsUpload\030\014 \002(\010\022\022\n\nCreat"
    "eTime\030\r \002(\003\022\025\n\rPreSurveyTime\030\016 \002(\003\022\024\n\014Re"
    "SurveyTime\030\017 \002(\003\022\021\n\tOrderTime\030\020 \002(\003\022\024\n\014D"
    "eliveryTime\030\021 \002(\003\022\023\n\013InstallTime\030\022 \002(\003\022\017"
    "\n\007GeoCode\030\023 \002(\t\022\022\n\nOrderTitle\030\024 \002(\t\022\024\n\014C"
    "ustomerName\030\025 \002(\t\022\023\n\013CustomerTel\030\026 \002(\t\022\030"
    "\n\020CustomerPostcode\030\027 \002(\t\022\022\n\nCustomerQQ\030\030"
    " \002(\t\022\025\n\rCustomerEmail\030\031 \002(\t\022\026\n\016InstallAd"
    "dress\030\032 \002(\t\022\021\n\tOrderMemo\030\033 \002(\t\022\026\n\016Attach"
    "FilePath\030\034 \002(\t\"\214\002\n\013GC_PackInfo\022\024\n\014Design"
    "PackID\030\001 \002(\005\022\021\n\tOrderCate\030\002 \002(\005\022\024\n\014Desig"
    "nPlanID\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\025\n\rFittin"
    "gPackID\030\005 \002(\005\022\021\n\tFactoryID\030\006 \002(\005\022\017\n\007VerC"
    "ode\030\007 \002(\003\022\022\n\nIsSeparate\030\010 \002(\010\022\020\n\010UseCoun"
    "t\030\t \002(\005\022\021\n\tCreatorID\030\n \002(\005\022\021\n\tUpdaterID\030"
    "\013 \002(\005\022\022\n\nCreateTime\030\014 \002(\003\022\022\n\nUpdateTime\030"
    "\r \002(\003\"\332\001\n\014GC_PointInfo\022\024\n\014DesignPlanID\030\001"
    " \002(\005\022\021\n\tOrderCate\030\002 \002(\005\022\017\n\007OrderID\030\003 \002(\003"
    "\022\021\n\tFactoryID\030\004 \002(\005\022\017\n\007VerCode\030\005 \002(\003\022\022\n\n"
    "TransObjID\030\006 \002(\005\022\024\n\014TransObjType\030\007 \002(\005\022\022"
    "\n\nPointIndex\030\010 \002(\005\022\016\n\006CoordX\030\t \002(\001\022\016\n\006Co"
    "ordY\030\n \002(\001\022\016\n\006CoordZ\030\013 \002(\001\"\333\002\n\023GC_PrintE"
    "lementInfo\022\034\n\024DesignPrintElementID\030\001 \002(\005"
    "\022\032\n\022DesignPrintGroupID\030\002 \002(\005\022\025\n\rDesignPr"
    "intID\030\003 \002(\005\022\021\n\tOrderCate\030\004 \002(\005\022\024\n\014Design"
    "PlanID\030\005 \002(\005\022\017\n\007OrderID\030\006 \002(\003\022\017\n\007ObjType"
    "\030\007 \002(\005\022\r\n\005ObjID\030\010 \002(\005\022\024\n\014PrintGroupID\030\t "
    "\002(\005\022\020\n\010ViewType\030\n \002(\005\022\021\n\tIsVisible\030\013 \002(\010"
    "\022\020\n\010IsLocked\030\014 \002(\010\022\021\n\tCreatorID\030\r \002(\005\022\021\n"
    "\tUpdaterID\030\016 \002(\005\022\022\n\nCreateTime\030\017 \002(\003\022\022\n\n"
    "UpdateTime\030\020 \002(\003\"\254\004\n\021GC_PrintGroupInfo\022\032"
    "\n\022DesignPrintGroupID\030\001 \002(\005\022\025\n\rDesignPrin"
    "tID\030\002 \002(\005\022\021\n\tOrderCate\030\003 \002(\005\022\024\n\014DesignPl"
    "anID\030\004 \002(\005\022\017\n\007OrderID\030\005 \002(\003\022\017\n\007PrintID\030\006"
    " \002(\005\022\024\n\014PrintGroupID\030\007 \002(\005\022\024\n\014ManyViewPo"
    "rt\030\010 \002(\010\022\022\n\nFrameStyle\030\t \002(\005\022\023\n\013FrameCol"
    "orR\030\n \002(\005\022\023\n\013FrameColorG\030\013 \002(\005\022\023\n\013FrameC"
    "olorB\030\014 \002(\005\022\023\n\013FrameColorA\030\r \002(\005\022\022\n\nFram"
    "eWidth\030\016 \002(\001\022\r\n\005LeftX\030\017 \002(\001\022\016\n\006RightY\030\020 "
    "\002(\001\022\016\n\006ScaleX\030\021 \002(\001\022\016\n\006ScaleY\030\022 \002(\001\022\024\n\014S"
    "caleOffsetX\030\023 \002(\001\022\024\n\014ScaleOffsetY\030\024 \002(\001\022"
    "\023\n\013ScaleFactor\030\025 \002(\001\022\021\n\tIsVisible\030\026 \002(\010\022"
    "\020\n\010IsLocked\030\027 \002(\010\022\021\n\tCreatorID\030\030 \002(\005\022\021\n\t"
    "UpdaterID\030\031 \002(\005\022\022\n\nCreateTime\030\032 \002(\003\022\022\n\nU"
    "pdateTime\030\033 \002(\003\"\222\003\n\014GC_PrintInfo\022\025\n\rDesi"
    "gnPrintID\030\001 \002(\005\022\021\n\tOrderCate\030\002 \002(\005\022\024\n\014De"
    "signPlanID\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\017\n\007Pri"
    "ntID\030\005 \002(\005\022\027\n\017PageBorderStyle\030\006 \002(\005\022\027\n\017P"
    "ageBorderColor\030\007 \002(\003\022\027\n\017PageBorderWidth\030"
    "\010 \002(\001\022\025\n\rShaderPicTopX\030\t \002(\001\022\025\n\rShaderPi"
    "cTopY\030\n \002(\001\022\027\n\017ShaderPicHeight\030\013 \002(\001\022\026\n\016"
    "ShaderPicWidth\030\014 \002(\001\022\021\n\tCreatorID\030\r \002(\005\022"
    "\021\n\tUpdaterID\030\016 \002(\005\022\022\n\nCreateTime\030\017 \002(\003\022\022"
    "\n\nUpdateTime\030\020 \002(\003\022\021\n\tPrintName\030\021 \002(\t\022\025\n"
    "\rShaderPicPath\030\022 \002(\t\"\245\005\n\021GC_PrintTableIn"
    "fo\022\032\n\022DesignPrintTableID\030\001 \002(\005\022\025\n\rDesign"
    "PrintID\030\002 \002(\005\022\021\n\tOrderCate\030\003 \002(\005\022\017\n\007Orde"
    "rID\030\004 \002(\003\022\024\n\014DesignPlanID\030\005 \002(\005\022\021\n\tTable"
    "Sign\030\006 \002(\005\022\021\n\tWhichLine\030\007 \002(\005\022\r\n\005Align\030\010"
    " \002(\005\022\020\n\010LogoSign\030\t \002(\005\022\017\n\007TextPos\030\n \002(\005\022"
    "\017\n\007SetLine\030\013 \002(\010\022\017\n\007HasLogo\030\014 \002(\010\022\022\n\nIsS"
    "elected\030\r \002(\010\022\016\n\006LineUp\030\016 \002(\010\022\020\n\010LineDow"
    "n\030\017 \002(\010\022\020\n\010LineLeft\030\020 \002(\010\022\021\n\tLineRight\030\021"
    " \002(\010\022\022\n\nLineUpSign\030\022 \002(\005\022\024\n\014LineDownSign"
    "\030\023 \002(\005\022\024\n\014LineLeftSign\030\024 \002(\005\022\025\n\rLineRigh"
    "tSign\030\025 \002(\005\022\021\n\tLineWidth\030\026 \002(\001\022\020\n\010LeftTo"
    "pX\030\027 \002(\001\022\020\n\010LeftTopY\030\030 \002(\001\022\014\n\004XLen\030\031 \002(\001"
    "\022\014\n\004YLen\030\032 \002(\001\022\023\n\013LineUpWidth\030\033 \002(\001\022\025\n\rL"
    "ineDownWidth\030\034 \002(\001\022\026\n\016LineRightWidth\030\035 \002"
    "(\001\022\025\n\rLineLeftWidth\030\036 \002(\001\022\020\n\010FaceName\030\037 "
    "\002(\t\022\020\n\010LogoPath\030  \002(\t\022\022\n\nSerialPath\030! \002("
    "\t\022\021\n\tTextValue\030\" \002(\t\"\337\005\n\027GC_PrintTableRo"
    "wColInfo\022 \n\030DesignPrintTableRowColID\030\001 \002"
    "(\005\022\035\n\025DesignPrintTableRowID\030\002 \002(\005\022\021\n\tOrd"
    "erCate\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\024\n\014DesignP"
    "lanID\030\005 \002(\005\022\021\n\tTableSign\030\006 \002(\005\022\021\n\tRowNum"
    "ber\030\007 \002(\005\022\021\n\tColNumber\030\010 \002(\005\022\021\n\tWhichLin"
    "e\030\t \002(\005\022\r\n\005Align\030\n \002(\005\022\020\n\010LogoSign\030\013 \002(\005"
    "\022\017\n\007TextPos\030\014 \002(\005\022\017\n\007SetLine\030\r \002(\010\022\017\n\007Ha"
    "sLogo\030\016 \002(\010\022\022\n\nIsSelected\030\017 \002(\010\022\016\n\006LineU"
    "p\030\020 \002(\010\022\020\n\010LineDown\030\021 \002(\010\022\020\n\010LineLeft\030\022 "
    "\002(\010\022\021\n\tLineRight\030\023 \002(\010\022\022\n\nLineUpSign\030\024 \002"
    "(\005\022\024\n\014LineDownSign\030\025 \002(\005\022\024\n\014LineLeftSign"
    "\030\026 \002(\005\022\025\n\rLineRightSign\030\027 \002(\005\022\021\n\tLineWid"
    "th\030\030 \002(\001\022\020\n\010LeftTopX\030\031 \002(\001\022\020\n\010LeftTopY\030\032"
    " \002(\001\022\014\n\004XLen\030\033 \002(\001\022\014\n\004YLen\030\034 \002(\001\022\023\n\013Line"
    "UpWidth\030\035 \002(\001\022\025\n\rLineDownWidth\030\036 \002(\001\022\026\n\016"
    "LineRightWidth\030\037 \002(\001\022\025\n\rLineLeftWidth\030  "
    "\002(\001\022\020\n\010FaceName\030! \002(\t\022\020\n\010LogoPath\030\" \002(\t\022"
    "\022\n\nSerialPath\030# \002(\t\022\021\n\tTextValue\030$ \002(\t\"\303"
    "\005\n\024GC_PrintTableRowInfo\022\035\n\025DesignPrintTa"
    "bleRowID\030\001 \002(\005\022\032\n\022DesignPrintTableID\030\002 \002"
    "(\005\022\021\n\tOrderCate\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\024"
    "\n\014DesignPlanID\030\005 \002(\005\022\021\n\tTableSign\030\006 \002(\005\022"
    "\021\n\tRowNumber\030\007 \002(\005\022\021\n\tWhichLine\030\010 \002(\005\022\r\n"
    "\005Align\030\t \002(\005\022\020\n\010LogoSign\030\n \002(\005\022\017\n\007TextPo"
    "s\030\013 \002(\005\022\017\n\007SetLine\030\014 \002(\010\022\017\n\007HasLogo\030\r \002("
    "\010\022\022\n\nIsSelected\030\016 \002(\010\022\016\n\006LineUp\030\017 \002(\010\022\020\n"
    "\010LineDown\030\020 \002(\010\022\020\n\010LineLeft\030\021 \002(\010\022\021\n\tLin"
    "eRight\030\022 \002(\010\022\022\n\nLineUpSign\030\023 \002(\005\022\024\n\014Line"
    "DownSign\030\024 \002(\005\022\024\n\014LineLeftSign\030\025 \002(\005\022\025\n\r"
    "LineRightSign\030\026 \002(\005\022\021\n\tLineWidth\030\027 \002(\001\022\020"
    "\n\010LeftTopX\030\030 \002(\001\022\020\n\010LeftTopY\030\031 \002(\001\022\014\n\004XL"
    "en\030\032 \002(\001\022\014\n\004YLen\030\033 \002(\001\022\023\n\013LineUpWidth\030\034 "
    "\002(\001\022\025\n\rLineDownWidth\030\035 \002(\001\022\026\n\016LineRightW"
    "idth\030\036 \002(\001\022\025\n\rLineLeftWidth\030\037 \002(\001\022\020\n\010Fac"
    "eName\030  \002(\t\022\020\n\010LogoPath\030! \002(\t\022\022\n\nSerialP"
    "ath\030\" \002(\t\022\021\n\tTextValue\030# \002(\t\"\307\003\n\016GC_Prod"
    "uctInfo\022\027\n\017DesignProductID\030\001 \002(\005\022\021\n\tOrde"
    "rCate\030\002 \002(\005\022\024\n\014DesignPlanID\030\003 \002(\005\022\017\n\007Ord"
    "erID\030\004 \002(\003\022\021\n\tProductID\030\005 \002(\005\022\021\n\tFactory"
    "ID\030\006 \002(\005\022\017\n\007VerCode\030\007 \002(\003\022\017\n\007HasMark\030\010 \002"
    "(\010\022\021\n\tIsVisible\030\t \002(\010\022\020\n\010IsLocked\030\n \002(\010\022"
    "\022\n\nSupplyType\030\013 \002(\005\022\017\n\007GTypeID\030\014 \002(\005\022\021\n\t"
    "DockObjID\030\r \002(\005\022\023\n\013DockObjType\030\016 \002(\005\022\020\n\010"
    "DockXPos\030\017 \002(\001\022\020\n\010DockYPos\030\020 \002(\001\022\014\n\004XLen"
    "\030\021 \002(\001\022\014\n\004YLen\030\022 \002(\001\022\014\n\004ZLen\030\023 \002(\001\022\014\n\004YP"
    "os\030\024 \002(\001\022\021\n\tCreatorID\030\025 \002(\005\022\021\n\tUpdaterID"
    "\030\026 \002(\005\022\022\n\nCreateTime\030\027 \002(\003\022\022\n\nUpdateTime"
    "\030\030 \002(\003\"\350\005\n\rGC_RemarkInfo\022\026\n\016DesignRemark"
    "ID\030\001 \002(\005\022\021\n\tOrderCate\030\002 \002(\005\022\024\n\014DesignPla"
    "nID\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\025\n\rDesignPrin"
    "tID\030\005 \002(\005\022\017\n\007PrintID\030\006 \002(\005\022\020\n\010ViewType\030\007"
    " \002(\005\022\017\n\007BGColor\030\010 \002(\003\022\021\n\tForeColor\030\t \002(\003"
    "\022\020\n\010FontSize\030\n \002(\005\022\021\n\tFontStyle\030\013 \002(\005\022\021\n"
    "\tLineSpace\030\014 \002(\005\022\017\n\007ArrowID\030\r \002(\005\022\022\n\nArr"
    "owStyle\030\016 \002(\005\022\022\n\nFrameStyle\030\017 \002(\005\022\022\n\nFra"
    "meColor\030\020 \002(\003\022\022\n\nDirectLine\030\021 \002(\005\022\023\n\013Dir"
    "ectStyle\030\022 \002(\005\022\027\n\017DirectLineStyle\030\023 \002(\005\022"
    "\031\n\021CommentFrameStyle\030\024 \002(\005\022\024\n\014IsSingleMo"
    "de\030\025 \002(\010\022\021\n\tIsVisible\030\026 \002(\010\022\020\n\010IsLocked\030"
    "\027 \002(\010\022\021\n\tStrickOut\030\030 \002(\010\022\021\n\tUnderLine\030\031 "
    "\002(\010\022\016\n\006Italic\030\032 \002(\010\022\014\n\004Bold\030\033 \002(\010\022\022\n\nFra"
    "meWidth\030\034 \002(\001\022\016\n\006ArrowX\030\035 \002(\001\022\016\n\006ArrowY\030"
    "\036 \002(\001\022\016\n\006StartX\030\037 \002(\001\022\016\n\006StartY\030  \002(\001\022\021\n"
    "\tCreatorID\030! \002(\005\022\021\n\tUpdaterID\030\" \002(\005\022\022\n\nC"
    "reateTime\030# \002(\003\022\022\n\nUpdateTime\030$ \002(\003\022\020\n\010F"
    "aceName\030% \002(\t\022\022\n\nRemarkText\030& \002(\t\"\233\003\n\014GC"
    "_ShapeInfo\022\025\n\rDesignShapeID\030\001 \002(\005\022\021\n\tOrd"
    "erCate\030\002 \002(\005\022\024\n\014DesignPlanID\030\003 \002(\005\022\017\n\007Or"
    "derID\030\004 \002(\003\022\025\n\rDesignPrintID\030\005 \002(\005\022\017\n\007Pr"
    "intID\030\006 \002(\005\022\020\n\010ViewType\030\007 \002(\005\022\021\n\tShapeTy"
    "pe\030\010 \002(\005\022\021\n\tLineWidth\030\t \002(\005\022\021\n\tLineStyle"
    "\030\n \002(\005\022\016\n\006StartX\030\013 \002(\001\022\016\n\006StartY\030\014 \002(\001\022\r"
    "\n\005StopX\030\r \002(\001\022\r\n\005StopY\030\016 \002(\001\022\021\n\tIsVisibl"
    "e\030\017 \002(\010\022\020\n\010IsLocked\030\020 \002(\010\022\021\n\tCreatorID\030\021"
    " \002(\005\022\021\n\tUpdaterID\030\022 \002(\005\022\022\n\nCreateTime\030\023 "
    "\002(\003\022\022\n\nUpdateTime\030\024 \002(\003\022\026\n\016AttachFilePat"
    "h\030\025 \002(\t\"\344\002\n\013GC_SkinInfo\022\024\n\014DesignSkinID\030"
    "\001 \002(\005\022\021\n\tOrderCate\030\002 \002(\005\022\024\n\014DesignPlanID"
    "\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\017\n\007DecorID\030\005 \002(\005"
    "\022\021\n\tFactoryID\030\006 \002(\005\022\017\n\007VerCode\030\007 \002(\003\022\017\n\007"
    "GTypeID\030\010 \002(\005\022\017\n\007HasMark\030\t \002(\010\022\021\n\tIsVisi"
    "ble\030\n \002(\010\022\020\n\010IsLocked\030\013 \002(\010\022\014\n\004XLen\030\014 \002("
    "\001\022\014\n\004YLen\030\r \002(\001\022\014\n\004ZLen\030\016 \002(\001\022\021\n\tGroundL"
    "en\030\017 \002(\001\022\021\n\tCreatorID\030\020 \002(\005\022\021\n\tUpdaterID"
    "\030\021 \002(\005\022\022\n\nCreateTime\030\022 \002(\003\022\022\n\nUpdateTime"
    "\030\023 \002(\003\"\355\002\n\014GC_TableInfo\022\025\n\rDesignTableID"
    "\030\001 \002(\005\022\021\n\tOrderCate\030\002 \002(\005\022\024\n\014DesignPlanI"
    "D\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\017\n\007TableID\030\005 \002("
    "\005\022\021\n\tFactoryID\030\006 \002(\005\022\017\n\007VerCode\030\007 \002(\003\022\022\n"
    "\nTableIndex\030\010 \002(\005\022\017\n\007HasMark\030\t \002(\010\022\021\n\tIs"
    "Visible\030\n \002(\010\022\020\n\010IsLocked\030\013 \002(\010\022\022\n\nSuppl"
    "yType\030\014 \002(\005\022\017\n\007GTypeID\030\r \002(\005\022\014\n\004ZLen\030\016 \002"
    "(\001\022\014\n\004YPos\030\017 \002(\001\022\021\n\tCreatorID\030\020 \002(\005\022\021\n\tU"
    "pdaterID\030\021 \002(\005\022\022\n\nCreateTime\030\022 \002(\003\022\022\n\nUp"
    "dateTime\030\023 \002(\003\"\251\003\n\020GC_TablePartInfo\022\031\n\021D"
    "esignTablePartID\030\001 \002(\005\022\025\n\rDesignTableID\030"
    "\002 \002(\005\022\021\n\tOrderCate\030\003 \002(\005\022\017\n\007OrderID\030\004 \002("
    "\003\022\024\n\014DesignPlanID\030\005 \002(\005\022\023\n\013DecorLineID\030\006"
    " \002(\005\022\021\n\tFactoryID\030\007 \002(\005\022\017\n\007VerCode\030\010 \002(\003"
    "\022\026\n\016TableSideIndex\030\t \002(\005\022\025\n\rIsUserSetYLe"
    "n\030\n \002(\010\022\017\n\007GTypeID\030\013 \002(\005\022\022\n\nMaterialID\030\014"
    " \002(\005\022\017\n\007ModelID\030\r \002(\005\022\014\n\004XLen\030\016 \002(\001\022\014\n\004Y"
    "Len\030\017 \002(\001\022\014\n\004ZLen\030\020 \002(\001\022\023\n\013DefaultYLen\030\021"
    " \002(\005\022\021\n\tCreatorID\030\022 \002(\005\022\021\n\tUpdaterID\030\023 \002"
    "(\005\022\022\n\nCreateTime\030\024 \002(\003\022\022\n\nUpdateTime\030\025 \002"
    "(\003\"\337\002\n\020GC_TableSideInfo\022\031\n\021DesignTableSi"
    "deID\030\001 \002(\005\022\025\n\rDesignTableID\030\002 \002(\005\022\021\n\tOrd"
    "erCate\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\024\n\014DesignP"
    "lanID\030\005 \002(\005\022\022\n\nTableTopID\030\006 \002(\005\022\026\n\016Table"
    "TopSideID\030\007 \002(\005\022\021\n\tFactoryID\030\010 \002(\005\022\017\n\007Ve"
    "rCode\030\t \002(\003\022\026\n\016TableSideIndex\030\n \002(\005\022\025\n\rI"
    "sUseTableMat\030\013 \002(\010\022\022\n\nMaterialID\030\014 \002(\005\022\021"
    "\n\tCreatorID\030\r \002(\005\022\021\n\tUpdaterID\030\016 \002(\005\022\022\n\n"
    "CreateTime\030\017 \002(\003\022\022\n\nUpdateTime\030\020 \002(\003\"\307\003\n"
    "\020GC_WallDecorInfo\022\031\n\021DesignWallDecorID\030\001"
    " \002(\005\022\024\n\014DesignWallID\030\002 \002(\005\022\021\n\tOrderCate\030"
    "\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\024\n\014DesignPlanID\030\005"
    " \002(\005\022\017\n\007DecorID\030\006 \002(\005\022\021\n\tFactoryID\030\007 \002(\005"
    "\022\017\n\007VerCode\030\010 \002(\003\022\025\n\rIsModelRevers\030\t \002(\010"
    "\022\021\n\tIsVisible\030\n \002(\010\022\020\n\010IsLocked\030\013 \002(\010\022\022\n"
    "\nSupplyType\030\014 \002(\005\022\017\n\007GTypeID\030\r \002(\005\022\014\n\004XL"
    "en\030\016 \002(\001\022\014\n\004YLen\030\017 \002(\001\022\014\n\004ZLen\030\020 \002(\001\022\022\n\n"
    "OffsetXLen\030\021 \002(\001\022\022\n\nOffsetYLen\030\022 \002(\001\022\022\n\n"
    "OffsetZLen\030\023 \002(\001\022\021\n\tCreatorID\030\024 \002(\005\022\021\n\tU"
    "pdaterID\030\025 \002(\005\022\022\n\nCreateTime\030\026 \002(\003\022\022\n\nUp"
    "dateTime\030\027 \002(\003\"\217\004\n\013GC_WallInfo\022\024\n\014Design"
    "WallID\030\001 \002(\005\022\024\n\014DesignPlanID\030\002 \002(\005\022\021\n\tOr"
    "derCate\030\003 \002(\005\022\017\n\007OrderID\030\004 \002(\003\022\021\n\tFactor"
    "yID\030\005 \002(\005\022\017\n\007VerCode\030\006 \002(\003\022\020\n\010WallType\030\007"
    " \002(\005\022\021\n\tWallIndex\030\010 \002(\005\022\017\n\007GroupID\030\t \002(\005"
    "\022\021\n\tDockObjID\030\n \002(\005\022\020\n\010DockXPos\030\013 \002(\001\022\020\n"
    "\010DockYPos\030\014 \002(\001\022\017\n\007DecorID\030\r \002(\005\022\021\n\tGrid"
    "Style\030\016 \002(\005\022\017\n\007HasMark\030\017 \002(\010\022\021\n\tIsVisibl"
    "e\030\020 \002(\010\022\020\n\010IsLocked\030\021 \002(\010\022\016\n\006StartX\030\022 \002("
    "\001\022\016\n\006StartY\030\023 \002(\001\022\014\n\004EndX\030\024 \002(\001\022\014\n\004EndY\030"
    "\025 \002(\001\022\014\n\004XLen\030\026 \002(\001\022\014\n\004YLen\030\027 \002(\001\022\014\n\004ZLe"
    "n\030\030 \002(\001\022\021\n\tGroundLen\030\031 \002(\001\022\021\n\tCreatorID\030"
    "\032 \002(\005\022\021\n\tUpdaterID\030\033 \002(\005\022\022\n\nCreateTime\030\034"
    " \002(\003\022\022\n\nUpdateTime\030\035 \002(\003\"\206\024\n\010GC_Table\0228\n"
    "\022GC_CabBoardGapInfo\030\001 \003(\0132\034.transMsg.GC_"
    "CabBoardGapInfo\0222\n\017GC_CabBoardInfo\030\002 \003(\013"
    "2\031.transMsg.GC_CabBoardInfo\022:\n\023GC_CabBoa"
    "rdSealInfo\030\003 \003(\0132\035.transMsg.GC_CabBoardS"
    "ealInfo\022@\n\026GC_CabDoorBoardGapInfo\030\004 \003(\0132"
    " .transMsg.GC_CabDoorBoardGapInfo\022:\n\023GC_"
    "CabDoorBoardInfo\030\005 \003(\0132\035.transMsg.GC_Cab"
    "DoorBoardInfo\022B\n\027GC_CabDoorBoardSealInfo"
    "\030\006 \003(\0132!.transMsg.GC_CabDoorBoardSealInf"
    "o\0226\n\021GC_CabDoorHWFInfo\030\007 \003(\0132\033.transMsg."
    "GC_CabDoorHWFInfo\022<\n\024GC_CabDoorHandleInf"
    "o\030\010 \003(\0132\036.transMsg.GC_CabDoorHandleInfo\022"
    "0\n\016GC_CabDoorInfo\030\t \003(\0132\030.transMsg.GC_Ca"
    "bDoorInfo\022<\n\024GC_CabDoorRegionInfo\030\n \003(\0132"
    "\036.transMsg.GC_CabDoorRegionInfo\022:\n\023GC_Ca"
    "bDoorSlideInfo\030\013 \003(\0132\035.transMsg.GC_CabDo"
    "orSlideInfo\022<\n\024GC_CabDoorSystemInfo\030\014 \003("
    "\0132\036.transMsg.GC_CabDoorSystemInfo\0224\n\020GC_"
    "CabFNFHWFInfo\030\r \003(\0132\032.transMsg.GC_CabFNF"
    "HWFInfo\0226\n\021GC_CabFNFHoleInfo\030\016 \003(\0132\033.tra"
    "nsMsg.GC_CabFNFHoleInfo\022.\n\rGC_CabFNFInfo"
    "\030\017 \003(\0132\027.transMsg.GC_CabFNFInfo\0226\n\021GC_Ca"
    "bFNFPartInfo\030\020 \003(\0132\033.transMsg.GC_CabFNFP"
    "artInfo\022>\n\025GC_CabFNFPartSealInfo\030\021 \003(\0132\037"
    ".transMsg.GC_CabFNFPartSealInfo\022(\n\nGC_Ca"
    "bInfo\030\022 \003(\0132\024.transMsg.GC_CabInfo\0226\n\021GC_"
    "DecorBoardInfo\030\023 \003(\0132\033.transMsg.GC_Decor"
    "BoardInfo\022>\n\025GC_DecorBoardUnitInfo\030\024 \003(\013"
    "2\037.transMsg.GC_DecorBoardUnitInfo\022F\n\031GC_"
    "DecorBoardUnitSealInfo\030\025 \003(\0132#.transMsg."
    "GC_DecorBoardUnitSealInfo\022,\n\014GC_DecorInf"
    "o\030\026 \003(\0132\026.transMsg.GC_DecorInfo\0224\n\020GC_De"
    "corLineInfo\030\027 \003(\0132\032.transMsg.GC_DecorLin"
    "eInfo\0226\n\021GC_DesignPlanInfo\030\030 \003(\0132\033.trans"
    "Msg.GC_DesignPlanInfo\0220\n\016GC_FittingInfo\030"
    "\031 \003(\0132\030.transMsg.GC_FittingInfo\022(\n\nGC_HW"
    "FInfo\030\032 \003(\0132\024.transMsg.GC_HWFInfo\022*\n\013GC_"
    "MarkInfo\030\033 \003(\0132\025.transMsg.GC_MarkInfo\022.\n"
    "\rGC_MatrixInfo\030\034 \003(\0132\027.transMsg.GC_Matri"
    "xInfo\0226\n\021GC_OrderAddedInfo\030\035 \003(\0132\033.trans"
    "Msg.GC_OrderAddedInfo\0224\n\020GC_OrderDataInf"
    "o\030\036 \003(\0132\032.transMsg.GC_OrderDataInfo\022*\n\013G"
    "C_PackInfo\030\037 \003(\0132\025.transMsg.GC_PackInfo\022"
    ",\n\014GC_PointInfo\030  \003(\0132\026.transMsg.GC_Poin"
    "tInfo\022:\n\023GC_PrintElementInfo\030! \003(\0132\035.tra"
    "nsMsg.GC_PrintElementInfo\0226\n\021GC_PrintGro"
    "upInfo\030\" \003(\0132\033.transMsg.GC_PrintGroupInf"
    "o\022,\n\014GC_PrintInfo\030# \003(\0132\026.transMsg.GC_Pr"
    "intInfo\0226\n\021GC_PrintTableInfo\030$ \003(\0132\033.tra"
    "nsMsg.GC_PrintTableInfo\022B\n\027GC_PrintTable"
    "RowColInfo\030% \003(\0132!.transMsg.GC_PrintTabl"
    "eRowColInfo\022<\n\024GC_PrintTableRowInfo\030& \003("
    "\0132\036.transMsg.GC_PrintTableRowInfo\0220\n\016GC_"
    "ProductInfo\030\' \003(\0132\030.transMsg.GC_ProductI"
    "nfo\022.\n\rGC_RemarkInfo\030( \003(\0132\027.transMsg.GC"
    "_RemarkInfo\022,\n\014GC_ShapeInfo\030) \003(\0132\026.tran"
    "sMsg.GC_ShapeInfo\022*\n\013GC_SkinInfo\030* \003(\0132\025"
    ".transMsg.GC_SkinInfo\022,\n\014GC_TableInfo\030+ "
    "\003(\0132\026.transMsg.GC_TableInfo\0224\n\020GC_TableP"
    "artInfo\030, \003(\0132\032.transMsg.GC_TablePartInf"
    "o\0224\n\020GC_TableSideInfo\030- \003(\0132\032.transMsg.G"
    "C_TableSideInfo\0224\n\020GC_WallDecorInfo\030. \003("
    "\0132\032.transMsg.GC_WallDecorInfo\022*\n\013GC_Wall"
    "Info\030/ \003(\0132\025.transMsg.GC_WallInfo", 25113);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg-GC.proto", &protobuf_RegisterTypes);
  GC_CabBoardGapInfo::default_instance_ = new GC_CabBoardGapInfo();
  GC_CabBoardInfo::default_instance_ = new GC_CabBoardInfo();
  GC_CabBoardSealInfo::default_instance_ = new GC_CabBoardSealInfo();
  GC_CabDoorBoardGapInfo::default_instance_ = new GC_CabDoorBoardGapInfo();
  GC_CabDoorBoardInfo::default_instance_ = new GC_CabDoorBoardInfo();
  GC_CabDoorBoardSealInfo::default_instance_ = new GC_CabDoorBoardSealInfo();
  GC_CabDoorHWFInfo::default_instance_ = new GC_CabDoorHWFInfo();
  GC_CabDoorHandleInfo::default_instance_ = new GC_CabDoorHandleInfo();
  GC_CabDoorInfo::default_instance_ = new GC_CabDoorInfo();
  GC_CabDoorRegionInfo::default_instance_ = new GC_CabDoorRegionInfo();
  GC_CabDoorSlideInfo::default_instance_ = new GC_CabDoorSlideInfo();
  GC_CabDoorSystemInfo::default_instance_ = new GC_CabDoorSystemInfo();
  GC_CabFNFHWFInfo::default_instance_ = new GC_CabFNFHWFInfo();
  GC_CabFNFHoleInfo::default_instance_ = new GC_CabFNFHoleInfo();
  GC_CabFNFInfo::default_instance_ = new GC_CabFNFInfo();
  GC_CabFNFPartInfo::default_instance_ = new GC_CabFNFPartInfo();
  GC_CabFNFPartSealInfo::default_instance_ = new GC_CabFNFPartSealInfo();
  GC_CabInfo::default_instance_ = new GC_CabInfo();
  GC_DecorBoardInfo::default_instance_ = new GC_DecorBoardInfo();
  GC_DecorBoardUnitInfo::default_instance_ = new GC_DecorBoardUnitInfo();
  GC_DecorBoardUnitSealInfo::default_instance_ = new GC_DecorBoardUnitSealInfo();
  GC_DecorInfo::default_instance_ = new GC_DecorInfo();
  GC_DecorLineInfo::default_instance_ = new GC_DecorLineInfo();
  GC_DesignPlanInfo::default_instance_ = new GC_DesignPlanInfo();
  GC_FittingInfo::default_instance_ = new GC_FittingInfo();
  GC_HWFInfo::default_instance_ = new GC_HWFInfo();
  GC_MarkInfo::default_instance_ = new GC_MarkInfo();
  GC_MatrixInfo::default_instance_ = new GC_MatrixInfo();
  GC_OrderAddedInfo::default_instance_ = new GC_OrderAddedInfo();
  GC_OrderDataInfo::default_instance_ = new GC_OrderDataInfo();
  GC_PackInfo::default_instance_ = new GC_PackInfo();
  GC_PointInfo::default_instance_ = new GC_PointInfo();
  GC_PrintElementInfo::default_instance_ = new GC_PrintElementInfo();
  GC_PrintGroupInfo::default_instance_ = new GC_PrintGroupInfo();
  GC_PrintInfo::default_instance_ = new GC_PrintInfo();
  GC_PrintTableInfo::default_instance_ = new GC_PrintTableInfo();
  GC_PrintTableRowColInfo::default_instance_ = new GC_PrintTableRowColInfo();
  GC_PrintTableRowInfo::default_instance_ = new GC_PrintTableRowInfo();
  GC_ProductInfo::default_instance_ = new GC_ProductInfo();
  GC_RemarkInfo::default_instance_ = new GC_RemarkInfo();
  GC_ShapeInfo::default_instance_ = new GC_ShapeInfo();
  GC_SkinInfo::default_instance_ = new GC_SkinInfo();
  GC_TableInfo::default_instance_ = new GC_TableInfo();
  GC_TablePartInfo::default_instance_ = new GC_TablePartInfo();
  GC_TableSideInfo::default_instance_ = new GC_TableSideInfo();
  GC_WallDecorInfo::default_instance_ = new GC_WallDecorInfo();
  GC_WallInfo::default_instance_ = new GC_WallInfo();
  GC_Table::default_instance_ = new GC_Table();
  GC_CabBoardGapInfo::default_instance_->InitAsDefaultInstance();
  GC_CabBoardInfo::default_instance_->InitAsDefaultInstance();
  GC_CabBoardSealInfo::default_instance_->InitAsDefaultInstance();
  GC_CabDoorBoardGapInfo::default_instance_->InitAsDefaultInstance();
  GC_CabDoorBoardInfo::default_instance_->InitAsDefaultInstance();
  GC_CabDoorBoardSealInfo::default_instance_->InitAsDefaultInstance();
  GC_CabDoorHWFInfo::default_instance_->InitAsDefaultInstance();
  GC_CabDoorHandleInfo::default_instance_->InitAsDefaultInstance();
  GC_CabDoorInfo::default_instance_->InitAsDefaultInstance();
  GC_CabDoorRegionInfo::default_instance_->InitAsDefaultInstance();
  GC_CabDoorSlideInfo::default_instance_->InitAsDefaultInstance();
  GC_CabDoorSystemInfo::default_instance_->InitAsDefaultInstance();
  GC_CabFNFHWFInfo::default_instance_->InitAsDefaultInstance();
  GC_CabFNFHoleInfo::default_instance_->InitAsDefaultInstance();
  GC_CabFNFInfo::default_instance_->InitAsDefaultInstance();
  GC_CabFNFPartInfo::default_instance_->InitAsDefaultInstance();
  GC_CabFNFPartSealInfo::default_instance_->InitAsDefaultInstance();
  GC_CabInfo::default_instance_->InitAsDefaultInstance();
  GC_DecorBoardInfo::default_instance_->InitAsDefaultInstance();
  GC_DecorBoardUnitInfo::default_instance_->InitAsDefaultInstance();
  GC_DecorBoardUnitSealInfo::default_instance_->InitAsDefaultInstance();
  GC_DecorInfo::default_instance_->InitAsDefaultInstance();
  GC_DecorLineInfo::default_instance_->InitAsDefaultInstance();
  GC_DesignPlanInfo::default_instance_->InitAsDefaultInstance();
  GC_FittingInfo::default_instance_->InitAsDefaultInstance();
  GC_HWFInfo::default_instance_->InitAsDefaultInstance();
  GC_MarkInfo::default_instance_->InitAsDefaultInstance();
  GC_MatrixInfo::default_instance_->InitAsDefaultInstance();
  GC_OrderAddedInfo::default_instance_->InitAsDefaultInstance();
  GC_OrderDataInfo::default_instance_->InitAsDefaultInstance();
  GC_PackInfo::default_instance_->InitAsDefaultInstance();
  GC_PointInfo::default_instance_->InitAsDefaultInstance();
  GC_PrintElementInfo::default_instance_->InitAsDefaultInstance();
  GC_PrintGroupInfo::default_instance_->InitAsDefaultInstance();
  GC_PrintInfo::default_instance_->InitAsDefaultInstance();
  GC_PrintTableInfo::default_instance_->InitAsDefaultInstance();
  GC_PrintTableRowColInfo::default_instance_->InitAsDefaultInstance();
  GC_PrintTableRowInfo::default_instance_->InitAsDefaultInstance();
  GC_ProductInfo::default_instance_->InitAsDefaultInstance();
  GC_RemarkInfo::default_instance_->InitAsDefaultInstance();
  GC_ShapeInfo::default_instance_->InitAsDefaultInstance();
  GC_SkinInfo::default_instance_->InitAsDefaultInstance();
  GC_TableInfo::default_instance_->InitAsDefaultInstance();
  GC_TablePartInfo::default_instance_->InitAsDefaultInstance();
  GC_TableSideInfo::default_instance_->InitAsDefaultInstance();
  GC_WallDecorInfo::default_instance_->InitAsDefaultInstance();
  GC_WallInfo::default_instance_->InitAsDefaultInstance();
  GC_Table::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2dGC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2dGC_2eproto {
  StaticDescriptorInitializer_msg_2dGC_2eproto() {
    protobuf_AddDesc_msg_2dGC_2eproto();
  }
} static_descriptor_initializer_msg_2dGC_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GC_CabBoardGapInfo::kCabBoardGapIDFieldNumber;
const int GC_CabBoardGapInfo::kCabBoardIDFieldNumber;
const int GC_CabBoardGapInfo::kOrderCateFieldNumber;
const int GC_CabBoardGapInfo::kOrderIDFieldNumber;
const int GC_CabBoardGapInfo::kDesignPlanIDFieldNumber;
const int GC_CabBoardGapInfo::kFactoryIDFieldNumber;
const int GC_CabBoardGapInfo::kVerCodeFieldNumber;
const int GC_CabBoardGapInfo::kCabStructBoardIDFieldNumber;
const int GC_CabBoardGapInfo::kCabStructBoardGapIDFieldNumber;
const int GC_CabBoardGapInfo::kGapPosFieldNumber;
const int GC_CabBoardGapInfo::kGapIndexFieldNumber;
const int GC_CabBoardGapInfo::kGapTypeFieldNumber;
const int GC_CabBoardGapInfo::kGapShapeFieldNumber;
const int GC_CabBoardGapInfo::kXLenFieldNumber;
const int GC_CabBoardGapInfo::kYLenFieldNumber;
const int GC_CabBoardGapInfo::kXOffsetLenFieldNumber;
const int GC_CabBoardGapInfo::kYOffsetLenFieldNumber;
const int GC_CabBoardGapInfo::kZOffsetLenFieldNumber;
const int GC_CabBoardGapInfo::kCreatorIDFieldNumber;
const int GC_CabBoardGapInfo::kUpdaterIDFieldNumber;
const int GC_CabBoardGapInfo::kCreateTimeFieldNumber;
const int GC_CabBoardGapInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_CabBoardGapInfo::GC_CabBoardGapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabBoardGapInfo::InitAsDefaultInstance() {
}

GC_CabBoardGapInfo::GC_CabBoardGapInfo(const GC_CabBoardGapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabBoardGapInfo::SharedCtor() {
  _cached_size_ = 0;
  cabboardgapid_ = 0;
  cabboardid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  cabstructboardid_ = 0;
  cabstructboardgapid_ = 0;
  gappos_ = 0;
  gapindex_ = 0;
  gaptype_ = 0;
  gapshape_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  xoffsetlen_ = 0;
  yoffsetlen_ = 0;
  zoffsetlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabBoardGapInfo::~GC_CabBoardGapInfo() {
  SharedDtor();
}

void GC_CabBoardGapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabBoardGapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabBoardGapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabBoardGapInfo_descriptor_;
}

const GC_CabBoardGapInfo& GC_CabBoardGapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabBoardGapInfo* GC_CabBoardGapInfo::default_instance_ = NULL;

GC_CabBoardGapInfo* GC_CabBoardGapInfo::New() const {
  return new GC_CabBoardGapInfo;
}

void GC_CabBoardGapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabboardgapid_ = 0;
    cabboardid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    cabstructboardid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cabstructboardgapid_ = 0;
    gappos_ = 0;
    gapindex_ = 0;
    gaptype_ = 0;
    gapshape_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    xoffsetlen_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    yoffsetlen_ = 0;
    zoffsetlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabBoardGapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabBoardGapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabboardgapid_)));
          set_has_cabboardgapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabBoardID;
        break;
      }

      // required int32 CabBoardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabboardid_)));
          set_has_cabboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CabStructBoardID;
        break;
      }

      // required int32 CabStructBoardID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardid_)));
          set_has_cabstructboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CabStructBoardGapID;
        break;
      }

      // required int32 CabStructBoardGapID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructBoardGapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardgapid_)));
          set_has_cabstructboardgapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_GapPos;
        break;
      }

      // required int32 GapPos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gappos_)));
          set_has_gappos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_GapIndex;
        break;
      }

      // required int32 GapIndex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gapindex_)));
          set_has_gapindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_GapType;
        break;
      }

      // required int32 GapType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaptype_)));
          set_has_gaptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_GapShape;
        break;
      }

      // required int32 GapShape = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapShape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gapshape_)));
          set_has_gapshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_XLen;
        break;
      }

      // required double XLen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_YLen;
        break;
      }

      // required double YLen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_XOffsetLen;
        break;
      }

      // required double XOffsetLen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffsetlen_)));
          set_has_xoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_YOffsetLen;
        break;
      }

      // required double YOffsetLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yoffsetlen_)));
          set_has_yoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_ZOffsetLen;
        break;
      }

      // required double ZOffsetLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoffsetlen_)));
          set_has_zoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabBoardGapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabBoardGapID = 1;
  if (has_cabboardgapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabboardgapid(), output);
  }

  // required int32 CabBoardID = 2;
  if (has_cabboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabboardid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vercode(), output);
  }

  // required int32 CabStructBoardID = 8;
  if (has_cabstructboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cabstructboardid(), output);
  }

  // required int32 CabStructBoardGapID = 9;
  if (has_cabstructboardgapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cabstructboardgapid(), output);
  }

  // required int32 GapPos = 10;
  if (has_gappos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gappos(), output);
  }

  // required int32 GapIndex = 11;
  if (has_gapindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gapindex(), output);
  }

  // required int32 GapType = 12;
  if (has_gaptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gaptype(), output);
  }

  // required int32 GapShape = 13;
  if (has_gapshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gapshape(), output);
  }

  // required double XLen = 14;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->xlen(), output);
  }

  // required double YLen = 15;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->ylen(), output);
  }

  // required double XOffsetLen = 16;
  if (has_xoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->xoffsetlen(), output);
  }

  // required double YOffsetLen = 17;
  if (has_yoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->yoffsetlen(), output);
  }

  // required double ZOffsetLen = 18;
  if (has_zoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->zoffsetlen(), output);
  }

  // required int32 CreatorID = 19;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->creatorid(), output);
  }

  // required int32 UpdaterID = 20;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->updaterid(), output);
  }

  // required int64 CreateTime = 21;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->createtime(), output);
  }

  // required int64 UpdateTime = 22;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabBoardGapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabBoardGapID = 1;
  if (has_cabboardgapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabboardgapid(), target);
  }

  // required int32 CabBoardID = 2;
  if (has_cabboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabboardid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vercode(), target);
  }

  // required int32 CabStructBoardID = 8;
  if (has_cabstructboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cabstructboardid(), target);
  }

  // required int32 CabStructBoardGapID = 9;
  if (has_cabstructboardgapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cabstructboardgapid(), target);
  }

  // required int32 GapPos = 10;
  if (has_gappos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gappos(), target);
  }

  // required int32 GapIndex = 11;
  if (has_gapindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gapindex(), target);
  }

  // required int32 GapType = 12;
  if (has_gaptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gaptype(), target);
  }

  // required int32 GapShape = 13;
  if (has_gapshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gapshape(), target);
  }

  // required double XLen = 14;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->xlen(), target);
  }

  // required double YLen = 15;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->ylen(), target);
  }

  // required double XOffsetLen = 16;
  if (has_xoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->xoffsetlen(), target);
  }

  // required double YOffsetLen = 17;
  if (has_yoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->yoffsetlen(), target);
  }

  // required double ZOffsetLen = 18;
  if (has_zoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->zoffsetlen(), target);
  }

  // required int32 CreatorID = 19;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->creatorid(), target);
  }

  // required int32 UpdaterID = 20;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->updaterid(), target);
  }

  // required int64 CreateTime = 21;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->createtime(), target);
  }

  // required int64 UpdateTime = 22;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabBoardGapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabBoardGapID = 1;
    if (has_cabboardgapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabboardgapid());
    }

    // required int32 CabBoardID = 2;
    if (has_cabboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabboardid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 7;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 CabStructBoardID = 8;
    if (has_cabstructboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 CabStructBoardGapID = 9;
    if (has_cabstructboardgapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardgapid());
    }

    // required int32 GapPos = 10;
    if (has_gappos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gappos());
    }

    // required int32 GapIndex = 11;
    if (has_gapindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gapindex());
    }

    // required int32 GapType = 12;
    if (has_gaptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaptype());
    }

    // required int32 GapShape = 13;
    if (has_gapshape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gapshape());
    }

    // required double XLen = 14;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 15;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double XOffsetLen = 16;
    if (has_xoffsetlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double YOffsetLen = 17;
    if (has_yoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double ZOffsetLen = 18;
    if (has_zoffsetlen()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 19;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 20;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 21;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 22;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabBoardGapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabBoardGapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabBoardGapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabBoardGapInfo::MergeFrom(const GC_CabBoardGapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabboardgapid()) {
      set_cabboardgapid(from.cabboardgapid());
    }
    if (from.has_cabboardid()) {
      set_cabboardid(from.cabboardid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_cabstructboardid()) {
      set_cabstructboardid(from.cabstructboardid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cabstructboardgapid()) {
      set_cabstructboardgapid(from.cabstructboardgapid());
    }
    if (from.has_gappos()) {
      set_gappos(from.gappos());
    }
    if (from.has_gapindex()) {
      set_gapindex(from.gapindex());
    }
    if (from.has_gaptype()) {
      set_gaptype(from.gaptype());
    }
    if (from.has_gapshape()) {
      set_gapshape(from.gapshape());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_xoffsetlen()) {
      set_xoffsetlen(from.xoffsetlen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_yoffsetlen()) {
      set_yoffsetlen(from.yoffsetlen());
    }
    if (from.has_zoffsetlen()) {
      set_zoffsetlen(from.zoffsetlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabBoardGapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabBoardGapInfo::CopyFrom(const GC_CabBoardGapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabBoardGapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;

  return true;
}

void GC_CabBoardGapInfo::Swap(GC_CabBoardGapInfo* other) {
  if (other != this) {
    std::swap(cabboardgapid_, other->cabboardgapid_);
    std::swap(cabboardid_, other->cabboardid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(cabstructboardid_, other->cabstructboardid_);
    std::swap(cabstructboardgapid_, other->cabstructboardgapid_);
    std::swap(gappos_, other->gappos_);
    std::swap(gapindex_, other->gapindex_);
    std::swap(gaptype_, other->gaptype_);
    std::swap(gapshape_, other->gapshape_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(xoffsetlen_, other->xoffsetlen_);
    std::swap(yoffsetlen_, other->yoffsetlen_);
    std::swap(zoffsetlen_, other->zoffsetlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabBoardGapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabBoardGapInfo_descriptor_;
  metadata.reflection = GC_CabBoardGapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabBoardInfo::kCabBoardIDFieldNumber;
const int GC_CabBoardInfo::kCabIDFieldNumber;
const int GC_CabBoardInfo::kOrderCateFieldNumber;
const int GC_CabBoardInfo::kOrderIDFieldNumber;
const int GC_CabBoardInfo::kDesignPlanIDFieldNumber;
const int GC_CabBoardInfo::kFactoryIDFieldNumber;
const int GC_CabBoardInfo::kVerCodeFieldNumber;
const int GC_CabBoardInfo::kCabinetSizeIDFieldNumber;
const int GC_CabBoardInfo::kCabStructBoardIDFieldNumber;
const int GC_CabBoardInfo::kCabinetSizeBoardIDFieldNumber;
const int GC_CabBoardInfo::kCabMatPlanIDFieldNumber;
const int GC_CabBoardInfo::kMatIDFieldNumber;
const int GC_CabBoardInfo::kMatGTypeFieldNumber;
const int GC_CabBoardInfo::kSkinDirectionFieldNumber;
const int GC_CabBoardInfo::kSealRuleIDFieldNumber;
const int GC_CabBoardInfo::kXLenFieldNumber;
const int GC_CabBoardInfo::kYLenFieldNumber;
const int GC_CabBoardInfo::kZLenFieldNumber;
const int GC_CabBoardInfo::kXOffsetLenFieldNumber;
const int GC_CabBoardInfo::kYOffsetLenFieldNumber;
const int GC_CabBoardInfo::kZOffsetLenFieldNumber;
const int GC_CabBoardInfo::kXDockFieldNumber;
const int GC_CabBoardInfo::kYDockFieldNumber;
const int GC_CabBoardInfo::kZDockFieldNumber;
const int GC_CabBoardInfo::kIsChangedOffsetFieldNumber;
const int GC_CabBoardInfo::kIsFakeDelFieldNumber;
const int GC_CabBoardInfo::kCreatorIDFieldNumber;
const int GC_CabBoardInfo::kUpdaterIDFieldNumber;
const int GC_CabBoardInfo::kCreateTimeFieldNumber;
const int GC_CabBoardInfo::kUpdateTimeFieldNumber;
const int GC_CabBoardInfo::kCabBoardNameFieldNumber;
#endif  // !_MSC_VER

GC_CabBoardInfo::GC_CabBoardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabBoardInfo::InitAsDefaultInstance() {
}

GC_CabBoardInfo::GC_CabBoardInfo(const GC_CabBoardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabBoardInfo::SharedCtor() {
  _cached_size_ = 0;
  cabboardid_ = 0;
  cabid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  cabinetsizeid_ = 0;
  cabstructboardid_ = 0;
  cabinetsizeboardid_ = 0;
  cabmatplanid_ = 0;
  matid_ = 0;
  matgtype_ = 0;
  skindirection_ = 0;
  sealruleid_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  xoffsetlen_ = 0;
  yoffsetlen_ = 0;
  zoffsetlen_ = 0;
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  ischangedoffset_ = false;
  isfakedel_ = false;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  cabboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabBoardInfo::~GC_CabBoardInfo() {
  SharedDtor();
}

void GC_CabBoardInfo::SharedDtor() {
  if (cabboardname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabboardname_;
  }
  if (this != default_instance_) {
  }
}

void GC_CabBoardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabBoardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabBoardInfo_descriptor_;
}

const GC_CabBoardInfo& GC_CabBoardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabBoardInfo* GC_CabBoardInfo::default_instance_ = NULL;

GC_CabBoardInfo* GC_CabBoardInfo::New() const {
  return new GC_CabBoardInfo;
}

void GC_CabBoardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabboardid_ = 0;
    cabid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    cabinetsizeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cabstructboardid_ = 0;
    cabinetsizeboardid_ = 0;
    cabmatplanid_ = 0;
    matid_ = 0;
    matgtype_ = 0;
    skindirection_ = 0;
    sealruleid_ = 0;
    xlen_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    ylen_ = 0;
    zlen_ = 0;
    xoffsetlen_ = 0;
    yoffsetlen_ = 0;
    zoffsetlen_ = 0;
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ischangedoffset_ = false;
    isfakedel_ = false;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_cabboardname()) {
      if (cabboardname_ != &::google::protobuf::internal::kEmptyString) {
        cabboardname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabBoardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabBoardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabboardid_)));
          set_has_cabboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabID;
        break;
      }

      // required int32 CabID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabid_)));
          set_has_cabid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CabinetSizeID;
        break;
      }

      // required int32 CabinetSizeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabinetSizeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabinetsizeid_)));
          set_has_cabinetsizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CabStructBoardID;
        break;
      }

      // required int32 CabStructBoardID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardid_)));
          set_has_cabstructboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CabinetSizeBoardID;
        break;
      }

      // required int32 CabinetSizeBoardID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabinetSizeBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabinetsizeboardid_)));
          set_has_cabinetsizeboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CabMatPlanID;
        break;
      }

      // required int32 CabMatPlanID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabmatplanid_)));
          set_has_cabmatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_MatID;
        break;
      }

      // required int32 MatID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matid_)));
          set_has_matid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_MatGType;
        break;
      }

      // required int32 MatGType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatGType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matgtype_)));
          set_has_matgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_SkinDirection;
        break;
      }

      // required int32 SkinDirection = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkinDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skindirection_)));
          set_has_skindirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_SealRuleID;
        break;
      }

      // required int32 SealRuleID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealRuleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealruleid_)));
          set_has_sealruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_XLen;
        break;
      }

      // required double XLen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_YLen;
        break;
      }

      // required double YLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_XOffsetLen;
        break;
      }

      // required double XOffsetLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffsetlen_)));
          set_has_xoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_YOffsetLen;
        break;
      }

      // required double YOffsetLen = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yoffsetlen_)));
          set_has_yoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_ZOffsetLen;
        break;
      }

      // required double ZOffsetLen = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoffsetlen_)));
          set_has_zoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_IsChangedOffset;
        break;
      }

      // required bool IsChangedOffset = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsChangedOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischangedoffset_)));
          set_has_ischangedoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_IsFakeDel;
        break;
      }

      // required bool IsFakeDel = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFakeDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfakedel_)));
          set_has_isfakedel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_CabBoardName;
        break;
      }

      // required string CabBoardName = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabBoardName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabboardname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabboardname().data(), this->cabboardname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabBoardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabBoardID = 1;
  if (has_cabboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabboardid(), output);
  }

  // required int32 CabID = 2;
  if (has_cabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vercode(), output);
  }

  // required int32 CabinetSizeID = 8;
  if (has_cabinetsizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cabinetsizeid(), output);
  }

  // required int32 CabStructBoardID = 9;
  if (has_cabstructboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cabstructboardid(), output);
  }

  // required int32 CabinetSizeBoardID = 10;
  if (has_cabinetsizeboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cabinetsizeboardid(), output);
  }

  // required int32 CabMatPlanID = 11;
  if (has_cabmatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cabmatplanid(), output);
  }

  // required int32 MatID = 12;
  if (has_matid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->matid(), output);
  }

  // required int32 MatGType = 13;
  if (has_matgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->matgtype(), output);
  }

  // required int32 SkinDirection = 14;
  if (has_skindirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->skindirection(), output);
  }

  // required int32 SealRuleID = 15;
  if (has_sealruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->sealruleid(), output);
  }

  // required double XLen = 16;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->xlen(), output);
  }

  // required double YLen = 17;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->ylen(), output);
  }

  // required double ZLen = 18;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->zlen(), output);
  }

  // required double XOffsetLen = 19;
  if (has_xoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->xoffsetlen(), output);
  }

  // required double YOffsetLen = 20;
  if (has_yoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->yoffsetlen(), output);
  }

  // required double ZOffsetLen = 21;
  if (has_zoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->zoffsetlen(), output);
  }

  // required int32 XDock = 22;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->xdock(), output);
  }

  // required int32 YDock = 23;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->ydock(), output);
  }

  // required int32 ZDock = 24;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->zdock(), output);
  }

  // required bool IsChangedOffset = 25;
  if (has_ischangedoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->ischangedoffset(), output);
  }

  // required bool IsFakeDel = 26;
  if (has_isfakedel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->isfakedel(), output);
  }

  // required int32 CreatorID = 27;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->creatorid(), output);
  }

  // required int32 UpdaterID = 28;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->updaterid(), output);
  }

  // required int64 CreateTime = 29;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->createtime(), output);
  }

  // required int64 UpdateTime = 30;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->updatetime(), output);
  }

  // required string CabBoardName = 31;
  if (has_cabboardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabboardname().data(), this->cabboardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->cabboardname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabBoardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabBoardID = 1;
  if (has_cabboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabboardid(), target);
  }

  // required int32 CabID = 2;
  if (has_cabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vercode(), target);
  }

  // required int32 CabinetSizeID = 8;
  if (has_cabinetsizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cabinetsizeid(), target);
  }

  // required int32 CabStructBoardID = 9;
  if (has_cabstructboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cabstructboardid(), target);
  }

  // required int32 CabinetSizeBoardID = 10;
  if (has_cabinetsizeboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cabinetsizeboardid(), target);
  }

  // required int32 CabMatPlanID = 11;
  if (has_cabmatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cabmatplanid(), target);
  }

  // required int32 MatID = 12;
  if (has_matid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->matid(), target);
  }

  // required int32 MatGType = 13;
  if (has_matgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->matgtype(), target);
  }

  // required int32 SkinDirection = 14;
  if (has_skindirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->skindirection(), target);
  }

  // required int32 SealRuleID = 15;
  if (has_sealruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->sealruleid(), target);
  }

  // required double XLen = 16;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->xlen(), target);
  }

  // required double YLen = 17;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->ylen(), target);
  }

  // required double ZLen = 18;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->zlen(), target);
  }

  // required double XOffsetLen = 19;
  if (has_xoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->xoffsetlen(), target);
  }

  // required double YOffsetLen = 20;
  if (has_yoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->yoffsetlen(), target);
  }

  // required double ZOffsetLen = 21;
  if (has_zoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->zoffsetlen(), target);
  }

  // required int32 XDock = 22;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->xdock(), target);
  }

  // required int32 YDock = 23;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->ydock(), target);
  }

  // required int32 ZDock = 24;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->zdock(), target);
  }

  // required bool IsChangedOffset = 25;
  if (has_ischangedoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->ischangedoffset(), target);
  }

  // required bool IsFakeDel = 26;
  if (has_isfakedel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->isfakedel(), target);
  }

  // required int32 CreatorID = 27;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->creatorid(), target);
  }

  // required int32 UpdaterID = 28;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->updaterid(), target);
  }

  // required int64 CreateTime = 29;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->createtime(), target);
  }

  // required int64 UpdateTime = 30;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->updatetime(), target);
  }

  // required string CabBoardName = 31;
  if (has_cabboardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabboardname().data(), this->cabboardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->cabboardname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabBoardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabBoardID = 1;
    if (has_cabboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabboardid());
    }

    // required int32 CabID = 2;
    if (has_cabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 7;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 CabinetSizeID = 8;
    if (has_cabinetsizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabinetsizeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 CabStructBoardID = 9;
    if (has_cabstructboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardid());
    }

    // required int32 CabinetSizeBoardID = 10;
    if (has_cabinetsizeboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabinetsizeboardid());
    }

    // required int32 CabMatPlanID = 11;
    if (has_cabmatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabmatplanid());
    }

    // required int32 MatID = 12;
    if (has_matid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matid());
    }

    // required int32 MatGType = 13;
    if (has_matgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matgtype());
    }

    // required int32 SkinDirection = 14;
    if (has_skindirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skindirection());
    }

    // required int32 SealRuleID = 15;
    if (has_sealruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealruleid());
    }

    // required double XLen = 16;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double YLen = 17;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 18;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required double XOffsetLen = 19;
    if (has_xoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double YOffsetLen = 20;
    if (has_yoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double ZOffsetLen = 21;
    if (has_zoffsetlen()) {
      total_size += 2 + 8;
    }

    // required int32 XDock = 22;
    if (has_xdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 23;
    if (has_ydock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 24;
    if (has_zdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required bool IsChangedOffset = 25;
    if (has_ischangedoffset()) {
      total_size += 2 + 1;
    }

    // required bool IsFakeDel = 26;
    if (has_isfakedel()) {
      total_size += 2 + 1;
    }

    // required int32 CreatorID = 27;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 28;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 29;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 30;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string CabBoardName = 31;
    if (has_cabboardname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabboardname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabBoardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabBoardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabBoardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabBoardInfo::MergeFrom(const GC_CabBoardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabboardid()) {
      set_cabboardid(from.cabboardid());
    }
    if (from.has_cabid()) {
      set_cabid(from.cabid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_cabinetsizeid()) {
      set_cabinetsizeid(from.cabinetsizeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cabstructboardid()) {
      set_cabstructboardid(from.cabstructboardid());
    }
    if (from.has_cabinetsizeboardid()) {
      set_cabinetsizeboardid(from.cabinetsizeboardid());
    }
    if (from.has_cabmatplanid()) {
      set_cabmatplanid(from.cabmatplanid());
    }
    if (from.has_matid()) {
      set_matid(from.matid());
    }
    if (from.has_matgtype()) {
      set_matgtype(from.matgtype());
    }
    if (from.has_skindirection()) {
      set_skindirection(from.skindirection());
    }
    if (from.has_sealruleid()) {
      set_sealruleid(from.sealruleid());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_xoffsetlen()) {
      set_xoffsetlen(from.xoffsetlen());
    }
    if (from.has_yoffsetlen()) {
      set_yoffsetlen(from.yoffsetlen());
    }
    if (from.has_zoffsetlen()) {
      set_zoffsetlen(from.zoffsetlen());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ischangedoffset()) {
      set_ischangedoffset(from.ischangedoffset());
    }
    if (from.has_isfakedel()) {
      set_isfakedel(from.isfakedel());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_cabboardname()) {
      set_cabboardname(from.cabboardname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabBoardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabBoardInfo::CopyFrom(const GC_CabBoardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabBoardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x7fffffff) != 0x7fffffff) return false;

  return true;
}

void GC_CabBoardInfo::Swap(GC_CabBoardInfo* other) {
  if (other != this) {
    std::swap(cabboardid_, other->cabboardid_);
    std::swap(cabid_, other->cabid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(cabinetsizeid_, other->cabinetsizeid_);
    std::swap(cabstructboardid_, other->cabstructboardid_);
    std::swap(cabinetsizeboardid_, other->cabinetsizeboardid_);
    std::swap(cabmatplanid_, other->cabmatplanid_);
    std::swap(matid_, other->matid_);
    std::swap(matgtype_, other->matgtype_);
    std::swap(skindirection_, other->skindirection_);
    std::swap(sealruleid_, other->sealruleid_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(xoffsetlen_, other->xoffsetlen_);
    std::swap(yoffsetlen_, other->yoffsetlen_);
    std::swap(zoffsetlen_, other->zoffsetlen_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(ischangedoffset_, other->ischangedoffset_);
    std::swap(isfakedel_, other->isfakedel_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(cabboardname_, other->cabboardname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabBoardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabBoardInfo_descriptor_;
  metadata.reflection = GC_CabBoardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabBoardSealInfo::kCabBoardSealIDFieldNumber;
const int GC_CabBoardSealInfo::kCabBoardIDFieldNumber;
const int GC_CabBoardSealInfo::kOrderCateFieldNumber;
const int GC_CabBoardSealInfo::kOrderIDFieldNumber;
const int GC_CabBoardSealInfo::kDesignPlanIDFieldNumber;
const int GC_CabBoardSealInfo::kCabStructBoardSealIDFieldNumber;
const int GC_CabBoardSealInfo::kCabStructBoardIDFieldNumber;
const int GC_CabBoardSealInfo::kFactoryIDFieldNumber;
const int GC_CabBoardSealInfo::kVerCodeFieldNumber;
const int GC_CabBoardSealInfo::kSealTypeFieldNumber;
const int GC_CabBoardSealInfo::kSealIndexFieldNumber;
const int GC_CabBoardSealInfo::kMaterialIDFieldNumber;
const int GC_CabBoardSealInfo::kPreMillFieldNumber;
#endif  // !_MSC_VER

GC_CabBoardSealInfo::GC_CabBoardSealInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabBoardSealInfo::InitAsDefaultInstance() {
}

GC_CabBoardSealInfo::GC_CabBoardSealInfo(const GC_CabBoardSealInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabBoardSealInfo::SharedCtor() {
  _cached_size_ = 0;
  cabboardsealid_ = 0;
  cabboardid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  cabstructboardsealid_ = 0;
  cabstructboardid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  sealtype_ = 0;
  sealindex_ = 0;
  materialid_ = 0;
  premill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabBoardSealInfo::~GC_CabBoardSealInfo() {
  SharedDtor();
}

void GC_CabBoardSealInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabBoardSealInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabBoardSealInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabBoardSealInfo_descriptor_;
}

const GC_CabBoardSealInfo& GC_CabBoardSealInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabBoardSealInfo* GC_CabBoardSealInfo::default_instance_ = NULL;

GC_CabBoardSealInfo* GC_CabBoardSealInfo::New() const {
  return new GC_CabBoardSealInfo;
}

void GC_CabBoardSealInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabboardsealid_ = 0;
    cabboardid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    cabstructboardsealid_ = 0;
    cabstructboardid_ = 0;
    factoryid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    sealtype_ = 0;
    sealindex_ = 0;
    materialid_ = 0;
    premill_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabBoardSealInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabBoardSealID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabboardsealid_)));
          set_has_cabboardsealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabBoardID;
        break;
      }

      // required int32 CabBoardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabboardid_)));
          set_has_cabboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CabStructBoardSealID;
        break;
      }

      // required int32 CabStructBoardSealID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructBoardSealID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardsealid_)));
          set_has_cabstructboardsealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CabStructBoardID;
        break;
      }

      // required int32 CabStructBoardID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardid_)));
          set_has_cabstructboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_SealType;
        break;
      }

      // required int32 SealType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealtype_)));
          set_has_sealtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SealIndex;
        break;
      }

      // required int32 SealIndex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealindex_)));
          set_has_sealindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_PreMill;
        break;
      }

      // required double PreMill = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreMill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premill_)));
          set_has_premill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabBoardSealInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabBoardSealID = 1;
  if (has_cabboardsealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabboardsealid(), output);
  }

  // required int32 CabBoardID = 2;
  if (has_cabboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabboardid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 CabStructBoardSealID = 6;
  if (has_cabstructboardsealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cabstructboardsealid(), output);
  }

  // required int32 CabStructBoardID = 7;
  if (has_cabstructboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cabstructboardid(), output);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->factoryid(), output);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vercode(), output);
  }

  // required int32 SealType = 10;
  if (has_sealtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sealtype(), output);
  }

  // required int32 SealIndex = 11;
  if (has_sealindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sealindex(), output);
  }

  // required int32 MaterialID = 12;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->materialid(), output);
  }

  // required double PreMill = 13;
  if (has_premill()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->premill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabBoardSealInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabBoardSealID = 1;
  if (has_cabboardsealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabboardsealid(), target);
  }

  // required int32 CabBoardID = 2;
  if (has_cabboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabboardid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 CabStructBoardSealID = 6;
  if (has_cabstructboardsealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cabstructboardsealid(), target);
  }

  // required int32 CabStructBoardID = 7;
  if (has_cabstructboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cabstructboardid(), target);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->factoryid(), target);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vercode(), target);
  }

  // required int32 SealType = 10;
  if (has_sealtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sealtype(), target);
  }

  // required int32 SealIndex = 11;
  if (has_sealindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sealindex(), target);
  }

  // required int32 MaterialID = 12;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->materialid(), target);
  }

  // required double PreMill = 13;
  if (has_premill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->premill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabBoardSealInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabBoardSealID = 1;
    if (has_cabboardsealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabboardsealid());
    }

    // required int32 CabBoardID = 2;
    if (has_cabboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabboardid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 CabStructBoardSealID = 6;
    if (has_cabstructboardsealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardsealid());
    }

    // required int32 CabStructBoardID = 7;
    if (has_cabstructboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardid());
    }

    // required int32 FactoryID = 8;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 VerCode = 9;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 SealType = 10;
    if (has_sealtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealtype());
    }

    // required int32 SealIndex = 11;
    if (has_sealindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealindex());
    }

    // required int32 MaterialID = 12;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required double PreMill = 13;
    if (has_premill()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabBoardSealInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabBoardSealInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabBoardSealInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabBoardSealInfo::MergeFrom(const GC_CabBoardSealInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabboardsealid()) {
      set_cabboardsealid(from.cabboardsealid());
    }
    if (from.has_cabboardid()) {
      set_cabboardid(from.cabboardid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_cabstructboardsealid()) {
      set_cabstructboardsealid(from.cabstructboardsealid());
    }
    if (from.has_cabstructboardid()) {
      set_cabstructboardid(from.cabstructboardid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_sealtype()) {
      set_sealtype(from.sealtype());
    }
    if (from.has_sealindex()) {
      set_sealindex(from.sealindex());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_premill()) {
      set_premill(from.premill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabBoardSealInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabBoardSealInfo::CopyFrom(const GC_CabBoardSealInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabBoardSealInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void GC_CabBoardSealInfo::Swap(GC_CabBoardSealInfo* other) {
  if (other != this) {
    std::swap(cabboardsealid_, other->cabboardsealid_);
    std::swap(cabboardid_, other->cabboardid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(cabstructboardsealid_, other->cabstructboardsealid_);
    std::swap(cabstructboardid_, other->cabstructboardid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(sealtype_, other->sealtype_);
    std::swap(sealindex_, other->sealindex_);
    std::swap(materialid_, other->materialid_);
    std::swap(premill_, other->premill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabBoardSealInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabBoardSealInfo_descriptor_;
  metadata.reflection = GC_CabBoardSealInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabDoorBoardGapInfo::kCabDoorBoardGapIDFieldNumber;
const int GC_CabDoorBoardGapInfo::kCabDoorBoardIDFieldNumber;
const int GC_CabDoorBoardGapInfo::kOrderCateFieldNumber;
const int GC_CabDoorBoardGapInfo::kOrderIDFieldNumber;
const int GC_CabDoorBoardGapInfo::kDesignPlanIDFieldNumber;
const int GC_CabDoorBoardGapInfo::kDoorBoardGapIDFieldNumber;
const int GC_CabDoorBoardGapInfo::kDoorBoardIDFieldNumber;
const int GC_CabDoorBoardGapInfo::kFactoryIDFieldNumber;
const int GC_CabDoorBoardGapInfo::kVerCodeFieldNumber;
const int GC_CabDoorBoardGapInfo::kGapPosFieldNumber;
const int GC_CabDoorBoardGapInfo::kGapIndexFieldNumber;
const int GC_CabDoorBoardGapInfo::kGapTypeFieldNumber;
const int GC_CabDoorBoardGapInfo::kGapShapeFieldNumber;
const int GC_CabDoorBoardGapInfo::kXLenFieldNumber;
const int GC_CabDoorBoardGapInfo::kYLenFieldNumber;
const int GC_CabDoorBoardGapInfo::kXOffsetLenFieldNumber;
const int GC_CabDoorBoardGapInfo::kYOffsetLenFieldNumber;
const int GC_CabDoorBoardGapInfo::kZOffsetLenFieldNumber;
const int GC_CabDoorBoardGapInfo::kCreatorIDFieldNumber;
const int GC_CabDoorBoardGapInfo::kUpdaterIDFieldNumber;
const int GC_CabDoorBoardGapInfo::kCreateTimeFieldNumber;
const int GC_CabDoorBoardGapInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_CabDoorBoardGapInfo::GC_CabDoorBoardGapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabDoorBoardGapInfo::InitAsDefaultInstance() {
}

GC_CabDoorBoardGapInfo::GC_CabDoorBoardGapInfo(const GC_CabDoorBoardGapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabDoorBoardGapInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdoorboardgapid_ = 0;
  cabdoorboardid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  doorboardgapid_ = 0;
  doorboardid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  gappos_ = 0;
  gapindex_ = 0;
  gaptype_ = 0;
  gapshape_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  xoffsetlen_ = 0;
  yoffsetlen_ = 0;
  zoffsetlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabDoorBoardGapInfo::~GC_CabDoorBoardGapInfo() {
  SharedDtor();
}

void GC_CabDoorBoardGapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabDoorBoardGapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabDoorBoardGapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabDoorBoardGapInfo_descriptor_;
}

const GC_CabDoorBoardGapInfo& GC_CabDoorBoardGapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabDoorBoardGapInfo* GC_CabDoorBoardGapInfo::default_instance_ = NULL;

GC_CabDoorBoardGapInfo* GC_CabDoorBoardGapInfo::New() const {
  return new GC_CabDoorBoardGapInfo;
}

void GC_CabDoorBoardGapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdoorboardgapid_ = 0;
    cabdoorboardid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    doorboardgapid_ = 0;
    doorboardid_ = 0;
    factoryid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    gappos_ = 0;
    gapindex_ = 0;
    gaptype_ = 0;
    gapshape_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    xoffsetlen_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    yoffsetlen_ = 0;
    zoffsetlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabDoorBoardGapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDoorBoardGapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorboardgapid_)));
          set_has_cabdoorboardgapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabDoorBoardID;
        break;
      }

      // required int32 CabDoorBoardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDoorBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorboardid_)));
          set_has_cabdoorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DoorBoardGapID;
        break;
      }

      // required int32 DoorBoardGapID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorBoardGapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorboardgapid_)));
          set_has_doorboardgapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_DoorBoardID;
        break;
      }

      // required int32 DoorBoardID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorboardid_)));
          set_has_doorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_GapPos;
        break;
      }

      // required int32 GapPos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gappos_)));
          set_has_gappos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_GapIndex;
        break;
      }

      // required int32 GapIndex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gapindex_)));
          set_has_gapindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_GapType;
        break;
      }

      // required int32 GapType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaptype_)));
          set_has_gaptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_GapShape;
        break;
      }

      // required int32 GapShape = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapShape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gapshape_)));
          set_has_gapshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_XLen;
        break;
      }

      // required double XLen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_YLen;
        break;
      }

      // required double YLen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_XOffsetLen;
        break;
      }

      // required double XOffsetLen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffsetlen_)));
          set_has_xoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_YOffsetLen;
        break;
      }

      // required double YOffsetLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yoffsetlen_)));
          set_has_yoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_ZOffsetLen;
        break;
      }

      // required double ZOffsetLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoffsetlen_)));
          set_has_zoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabDoorBoardGapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDoorBoardGapID = 1;
  if (has_cabdoorboardgapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdoorboardgapid(), output);
  }

  // required int32 CabDoorBoardID = 2;
  if (has_cabdoorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabdoorboardid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 DoorBoardGapID = 6;
  if (has_doorboardgapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->doorboardgapid(), output);
  }

  // required int32 DoorBoardID = 7;
  if (has_doorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->doorboardid(), output);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->factoryid(), output);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vercode(), output);
  }

  // required int32 GapPos = 10;
  if (has_gappos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gappos(), output);
  }

  // required int32 GapIndex = 11;
  if (has_gapindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gapindex(), output);
  }

  // required int32 GapType = 12;
  if (has_gaptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gaptype(), output);
  }

  // required int32 GapShape = 13;
  if (has_gapshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gapshape(), output);
  }

  // required double XLen = 14;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->xlen(), output);
  }

  // required double YLen = 15;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->ylen(), output);
  }

  // required double XOffsetLen = 16;
  if (has_xoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->xoffsetlen(), output);
  }

  // required double YOffsetLen = 17;
  if (has_yoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->yoffsetlen(), output);
  }

  // required double ZOffsetLen = 18;
  if (has_zoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->zoffsetlen(), output);
  }

  // required int32 CreatorID = 19;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->creatorid(), output);
  }

  // required int32 UpdaterID = 20;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->updaterid(), output);
  }

  // required int64 CreateTime = 21;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->createtime(), output);
  }

  // required int64 UpdateTime = 22;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabDoorBoardGapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDoorBoardGapID = 1;
  if (has_cabdoorboardgapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdoorboardgapid(), target);
  }

  // required int32 CabDoorBoardID = 2;
  if (has_cabdoorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabdoorboardid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 DoorBoardGapID = 6;
  if (has_doorboardgapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->doorboardgapid(), target);
  }

  // required int32 DoorBoardID = 7;
  if (has_doorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->doorboardid(), target);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->factoryid(), target);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vercode(), target);
  }

  // required int32 GapPos = 10;
  if (has_gappos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gappos(), target);
  }

  // required int32 GapIndex = 11;
  if (has_gapindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gapindex(), target);
  }

  // required int32 GapType = 12;
  if (has_gaptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gaptype(), target);
  }

  // required int32 GapShape = 13;
  if (has_gapshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gapshape(), target);
  }

  // required double XLen = 14;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->xlen(), target);
  }

  // required double YLen = 15;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->ylen(), target);
  }

  // required double XOffsetLen = 16;
  if (has_xoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->xoffsetlen(), target);
  }

  // required double YOffsetLen = 17;
  if (has_yoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->yoffsetlen(), target);
  }

  // required double ZOffsetLen = 18;
  if (has_zoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->zoffsetlen(), target);
  }

  // required int32 CreatorID = 19;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->creatorid(), target);
  }

  // required int32 UpdaterID = 20;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->updaterid(), target);
  }

  // required int64 CreateTime = 21;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->createtime(), target);
  }

  // required int64 UpdateTime = 22;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabDoorBoardGapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDoorBoardGapID = 1;
    if (has_cabdoorboardgapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorboardgapid());
    }

    // required int32 CabDoorBoardID = 2;
    if (has_cabdoorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorboardid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 DoorBoardGapID = 6;
    if (has_doorboardgapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorboardgapid());
    }

    // required int32 DoorBoardID = 7;
    if (has_doorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorboardid());
    }

    // required int32 FactoryID = 8;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 VerCode = 9;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 GapPos = 10;
    if (has_gappos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gappos());
    }

    // required int32 GapIndex = 11;
    if (has_gapindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gapindex());
    }

    // required int32 GapType = 12;
    if (has_gaptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaptype());
    }

    // required int32 GapShape = 13;
    if (has_gapshape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gapshape());
    }

    // required double XLen = 14;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 15;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double XOffsetLen = 16;
    if (has_xoffsetlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double YOffsetLen = 17;
    if (has_yoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double ZOffsetLen = 18;
    if (has_zoffsetlen()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 19;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 20;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 21;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 22;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabDoorBoardGapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabDoorBoardGapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabDoorBoardGapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabDoorBoardGapInfo::MergeFrom(const GC_CabDoorBoardGapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdoorboardgapid()) {
      set_cabdoorboardgapid(from.cabdoorboardgapid());
    }
    if (from.has_cabdoorboardid()) {
      set_cabdoorboardid(from.cabdoorboardid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_doorboardgapid()) {
      set_doorboardgapid(from.doorboardgapid());
    }
    if (from.has_doorboardid()) {
      set_doorboardid(from.doorboardid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_gappos()) {
      set_gappos(from.gappos());
    }
    if (from.has_gapindex()) {
      set_gapindex(from.gapindex());
    }
    if (from.has_gaptype()) {
      set_gaptype(from.gaptype());
    }
    if (from.has_gapshape()) {
      set_gapshape(from.gapshape());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_xoffsetlen()) {
      set_xoffsetlen(from.xoffsetlen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_yoffsetlen()) {
      set_yoffsetlen(from.yoffsetlen());
    }
    if (from.has_zoffsetlen()) {
      set_zoffsetlen(from.zoffsetlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabDoorBoardGapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabDoorBoardGapInfo::CopyFrom(const GC_CabDoorBoardGapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabDoorBoardGapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;

  return true;
}

void GC_CabDoorBoardGapInfo::Swap(GC_CabDoorBoardGapInfo* other) {
  if (other != this) {
    std::swap(cabdoorboardgapid_, other->cabdoorboardgapid_);
    std::swap(cabdoorboardid_, other->cabdoorboardid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(doorboardgapid_, other->doorboardgapid_);
    std::swap(doorboardid_, other->doorboardid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(gappos_, other->gappos_);
    std::swap(gapindex_, other->gapindex_);
    std::swap(gaptype_, other->gaptype_);
    std::swap(gapshape_, other->gapshape_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(xoffsetlen_, other->xoffsetlen_);
    std::swap(yoffsetlen_, other->yoffsetlen_);
    std::swap(zoffsetlen_, other->zoffsetlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabDoorBoardGapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabDoorBoardGapInfo_descriptor_;
  metadata.reflection = GC_CabDoorBoardGapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabDoorBoardInfo::kCabDoorBoardIDFieldNumber;
const int GC_CabDoorBoardInfo::kCabDoorIDFieldNumber;
const int GC_CabDoorBoardInfo::kOrderCateFieldNumber;
const int GC_CabDoorBoardInfo::kOrderIDFieldNumber;
const int GC_CabDoorBoardInfo::kDesignPlanIDFieldNumber;
const int GC_CabDoorBoardInfo::kDoorBoardIDFieldNumber;
const int GC_CabDoorBoardInfo::kDoorIDFieldNumber;
const int GC_CabDoorBoardInfo::kDoorBoardIndexFieldNumber;
const int GC_CabDoorBoardInfo::kFactoryIDFieldNumber;
const int GC_CabDoorBoardInfo::kVerCodeFieldNumber;
const int GC_CabDoorBoardInfo::kDoorMatPlanIDFieldNumber;
const int GC_CabDoorBoardInfo::kMatIDFieldNumber;
const int GC_CabDoorBoardInfo::kMatGTypeFieldNumber;
const int GC_CabDoorBoardInfo::kSkinDirectionFieldNumber;
const int GC_CabDoorBoardInfo::kSealRuleIDFieldNumber;
const int GC_CabDoorBoardInfo::kModelIDFieldNumber;
const int GC_CabDoorBoardInfo::kXDockFieldNumber;
const int GC_CabDoorBoardInfo::kYDockFieldNumber;
const int GC_CabDoorBoardInfo::kZDockFieldNumber;
const int GC_CabDoorBoardInfo::kXLenFieldNumber;
const int GC_CabDoorBoardInfo::kYLenFieldNumber;
const int GC_CabDoorBoardInfo::kZLenFieldNumber;
const int GC_CabDoorBoardInfo::kXOffsetLenFieldNumber;
const int GC_CabDoorBoardInfo::kYOffsetLenFieldNumber;
const int GC_CabDoorBoardInfo::kZOffsetLenFieldNumber;
const int GC_CabDoorBoardInfo::kCreatorIDFieldNumber;
const int GC_CabDoorBoardInfo::kUpdaterIDFieldNumber;
const int GC_CabDoorBoardInfo::kCreateTimeFieldNumber;
const int GC_CabDoorBoardInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_CabDoorBoardInfo::GC_CabDoorBoardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabDoorBoardInfo::InitAsDefaultInstance() {
}

GC_CabDoorBoardInfo::GC_CabDoorBoardInfo(const GC_CabDoorBoardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabDoorBoardInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdoorboardid_ = 0;
  cabdoorid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  doorboardid_ = 0;
  doorid_ = 0;
  doorboardindex_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  doormatplanid_ = 0;
  matid_ = 0;
  matgtype_ = 0;
  skindirection_ = 0;
  sealruleid_ = 0;
  modelid_ = 0;
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  xoffsetlen_ = 0;
  yoffsetlen_ = 0;
  zoffsetlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabDoorBoardInfo::~GC_CabDoorBoardInfo() {
  SharedDtor();
}

void GC_CabDoorBoardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabDoorBoardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabDoorBoardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabDoorBoardInfo_descriptor_;
}

const GC_CabDoorBoardInfo& GC_CabDoorBoardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabDoorBoardInfo* GC_CabDoorBoardInfo::default_instance_ = NULL;

GC_CabDoorBoardInfo* GC_CabDoorBoardInfo::New() const {
  return new GC_CabDoorBoardInfo;
}

void GC_CabDoorBoardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdoorboardid_ = 0;
    cabdoorid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    doorboardid_ = 0;
    doorid_ = 0;
    doorboardindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    doormatplanid_ = 0;
    matid_ = 0;
    matgtype_ = 0;
    skindirection_ = 0;
    sealruleid_ = 0;
    modelid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    xoffsetlen_ = 0;
    yoffsetlen_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    zoffsetlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabDoorBoardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDoorBoardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorboardid_)));
          set_has_cabdoorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabDoorID;
        break;
      }

      // required int32 CabDoorID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDoorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorid_)));
          set_has_cabdoorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DoorBoardID;
        break;
      }

      // required int32 DoorBoardID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorboardid_)));
          set_has_doorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_DoorID;
        break;
      }

      // required int32 DoorID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorid_)));
          set_has_doorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DoorBoardIndex;
        break;
      }

      // required int32 DoorBoardIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorBoardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorboardindex_)));
          set_has_doorboardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_DoorMatPlanID;
        break;
      }

      // required int32 DoorMatPlanID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doormatplanid_)));
          set_has_doormatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_MatID;
        break;
      }

      // required int32 MatID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matid_)));
          set_has_matid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_MatGType;
        break;
      }

      // required int32 MatGType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatGType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matgtype_)));
          set_has_matgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_SkinDirection;
        break;
      }

      // required int32 SkinDirection = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkinDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skindirection_)));
          set_has_skindirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_SealRuleID;
        break;
      }

      // required int32 SealRuleID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealRuleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealruleid_)));
          set_has_sealruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ModelID;
        break;
      }

      // required int32 ModelID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_XLen;
        break;
      }

      // required double XLen = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_YLen;
        break;
      }

      // required double YLen = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_XOffsetLen;
        break;
      }

      // required double XOffsetLen = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffsetlen_)));
          set_has_xoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_YOffsetLen;
        break;
      }

      // required double YOffsetLen = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yoffsetlen_)));
          set_has_yoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_ZOffsetLen;
        break;
      }

      // required double ZOffsetLen = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoffsetlen_)));
          set_has_zoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabDoorBoardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDoorBoardID = 1;
  if (has_cabdoorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdoorboardid(), output);
  }

  // required int32 CabDoorID = 2;
  if (has_cabdoorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabdoorid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 DoorBoardID = 6;
  if (has_doorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->doorboardid(), output);
  }

  // required int32 DoorID = 7;
  if (has_doorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->doorid(), output);
  }

  // required int32 DoorBoardIndex = 8;
  if (has_doorboardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->doorboardindex(), output);
  }

  // required int32 FactoryID = 9;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->factoryid(), output);
  }

  // required int64 VerCode = 10;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->vercode(), output);
  }

  // required int32 DoorMatPlanID = 11;
  if (has_doormatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->doormatplanid(), output);
  }

  // required int32 MatID = 12;
  if (has_matid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->matid(), output);
  }

  // required int32 MatGType = 13;
  if (has_matgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->matgtype(), output);
  }

  // required int32 SkinDirection = 14;
  if (has_skindirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->skindirection(), output);
  }

  // required int32 SealRuleID = 15;
  if (has_sealruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->sealruleid(), output);
  }

  // required int32 ModelID = 16;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->modelid(), output);
  }

  // required int32 XDock = 17;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->xdock(), output);
  }

  // required int32 YDock = 18;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->ydock(), output);
  }

  // required int32 ZDock = 19;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->zdock(), output);
  }

  // required double XLen = 20;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->xlen(), output);
  }

  // required double YLen = 21;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->ylen(), output);
  }

  // required double ZLen = 22;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->zlen(), output);
  }

  // required double XOffsetLen = 23;
  if (has_xoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->xoffsetlen(), output);
  }

  // required double YOffsetLen = 24;
  if (has_yoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->yoffsetlen(), output);
  }

  // required double ZOffsetLen = 25;
  if (has_zoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->zoffsetlen(), output);
  }

  // required int32 CreatorID = 26;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->creatorid(), output);
  }

  // required int32 UpdaterID = 27;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->updaterid(), output);
  }

  // required int64 CreateTime = 28;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->createtime(), output);
  }

  // required int64 UpdateTime = 29;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabDoorBoardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDoorBoardID = 1;
  if (has_cabdoorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdoorboardid(), target);
  }

  // required int32 CabDoorID = 2;
  if (has_cabdoorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabdoorid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 DoorBoardID = 6;
  if (has_doorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->doorboardid(), target);
  }

  // required int32 DoorID = 7;
  if (has_doorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->doorid(), target);
  }

  // required int32 DoorBoardIndex = 8;
  if (has_doorboardindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->doorboardindex(), target);
  }

  // required int32 FactoryID = 9;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->factoryid(), target);
  }

  // required int64 VerCode = 10;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->vercode(), target);
  }

  // required int32 DoorMatPlanID = 11;
  if (has_doormatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->doormatplanid(), target);
  }

  // required int32 MatID = 12;
  if (has_matid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->matid(), target);
  }

  // required int32 MatGType = 13;
  if (has_matgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->matgtype(), target);
  }

  // required int32 SkinDirection = 14;
  if (has_skindirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->skindirection(), target);
  }

  // required int32 SealRuleID = 15;
  if (has_sealruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->sealruleid(), target);
  }

  // required int32 ModelID = 16;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->modelid(), target);
  }

  // required int32 XDock = 17;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->xdock(), target);
  }

  // required int32 YDock = 18;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->ydock(), target);
  }

  // required int32 ZDock = 19;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->zdock(), target);
  }

  // required double XLen = 20;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->xlen(), target);
  }

  // required double YLen = 21;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->ylen(), target);
  }

  // required double ZLen = 22;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->zlen(), target);
  }

  // required double XOffsetLen = 23;
  if (has_xoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->xoffsetlen(), target);
  }

  // required double YOffsetLen = 24;
  if (has_yoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->yoffsetlen(), target);
  }

  // required double ZOffsetLen = 25;
  if (has_zoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->zoffsetlen(), target);
  }

  // required int32 CreatorID = 26;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->creatorid(), target);
  }

  // required int32 UpdaterID = 27;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->updaterid(), target);
  }

  // required int64 CreateTime = 28;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->createtime(), target);
  }

  // required int64 UpdateTime = 29;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabDoorBoardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDoorBoardID = 1;
    if (has_cabdoorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorboardid());
    }

    // required int32 CabDoorID = 2;
    if (has_cabdoorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 DoorBoardID = 6;
    if (has_doorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorboardid());
    }

    // required int32 DoorID = 7;
    if (has_doorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorid());
    }

    // required int32 DoorBoardIndex = 8;
    if (has_doorboardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorboardindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 FactoryID = 9;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 10;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 DoorMatPlanID = 11;
    if (has_doormatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doormatplanid());
    }

    // required int32 MatID = 12;
    if (has_matid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matid());
    }

    // required int32 MatGType = 13;
    if (has_matgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matgtype());
    }

    // required int32 SkinDirection = 14;
    if (has_skindirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skindirection());
    }

    // required int32 SealRuleID = 15;
    if (has_sealruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealruleid());
    }

    // required int32 ModelID = 16;
    if (has_modelid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 XDock = 17;
    if (has_xdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 18;
    if (has_ydock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 19;
    if (has_zdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // required double XLen = 20;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 21;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 22;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required double XOffsetLen = 23;
    if (has_xoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double YOffsetLen = 24;
    if (has_yoffsetlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double ZOffsetLen = 25;
    if (has_zoffsetlen()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 26;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 27;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 28;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 29;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabDoorBoardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabDoorBoardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabDoorBoardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabDoorBoardInfo::MergeFrom(const GC_CabDoorBoardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdoorboardid()) {
      set_cabdoorboardid(from.cabdoorboardid());
    }
    if (from.has_cabdoorid()) {
      set_cabdoorid(from.cabdoorid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_doorboardid()) {
      set_doorboardid(from.doorboardid());
    }
    if (from.has_doorid()) {
      set_doorid(from.doorid());
    }
    if (from.has_doorboardindex()) {
      set_doorboardindex(from.doorboardindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_doormatplanid()) {
      set_doormatplanid(from.doormatplanid());
    }
    if (from.has_matid()) {
      set_matid(from.matid());
    }
    if (from.has_matgtype()) {
      set_matgtype(from.matgtype());
    }
    if (from.has_skindirection()) {
      set_skindirection(from.skindirection());
    }
    if (from.has_sealruleid()) {
      set_sealruleid(from.sealruleid());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_xoffsetlen()) {
      set_xoffsetlen(from.xoffsetlen());
    }
    if (from.has_yoffsetlen()) {
      set_yoffsetlen(from.yoffsetlen());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_zoffsetlen()) {
      set_zoffsetlen(from.zoffsetlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabDoorBoardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabDoorBoardInfo::CopyFrom(const GC_CabDoorBoardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabDoorBoardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x1fffffff) != 0x1fffffff) return false;

  return true;
}

void GC_CabDoorBoardInfo::Swap(GC_CabDoorBoardInfo* other) {
  if (other != this) {
    std::swap(cabdoorboardid_, other->cabdoorboardid_);
    std::swap(cabdoorid_, other->cabdoorid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(doorboardid_, other->doorboardid_);
    std::swap(doorid_, other->doorid_);
    std::swap(doorboardindex_, other->doorboardindex_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(doormatplanid_, other->doormatplanid_);
    std::swap(matid_, other->matid_);
    std::swap(matgtype_, other->matgtype_);
    std::swap(skindirection_, other->skindirection_);
    std::swap(sealruleid_, other->sealruleid_);
    std::swap(modelid_, other->modelid_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(xoffsetlen_, other->xoffsetlen_);
    std::swap(yoffsetlen_, other->yoffsetlen_);
    std::swap(zoffsetlen_, other->zoffsetlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabDoorBoardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabDoorBoardInfo_descriptor_;
  metadata.reflection = GC_CabDoorBoardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabDoorBoardSealInfo::kCabDoorBoardSealIDFieldNumber;
const int GC_CabDoorBoardSealInfo::kCabDoorBoardIDFieldNumber;
const int GC_CabDoorBoardSealInfo::kOrderCateFieldNumber;
const int GC_CabDoorBoardSealInfo::kOrderIDFieldNumber;
const int GC_CabDoorBoardSealInfo::kDesignPlanIDFieldNumber;
const int GC_CabDoorBoardSealInfo::kDoorBoardIDFieldNumber;
const int GC_CabDoorBoardSealInfo::kSealIndexFieldNumber;
const int GC_CabDoorBoardSealInfo::kFactoryIDFieldNumber;
const int GC_CabDoorBoardSealInfo::kVerCodeFieldNumber;
const int GC_CabDoorBoardSealInfo::kSealTypeFieldNumber;
const int GC_CabDoorBoardSealInfo::kMaterialIDFieldNumber;
const int GC_CabDoorBoardSealInfo::kPreMillFieldNumber;
#endif  // !_MSC_VER

GC_CabDoorBoardSealInfo::GC_CabDoorBoardSealInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabDoorBoardSealInfo::InitAsDefaultInstance() {
}

GC_CabDoorBoardSealInfo::GC_CabDoorBoardSealInfo(const GC_CabDoorBoardSealInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabDoorBoardSealInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdoorboardsealid_ = 0;
  cabdoorboardid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  doorboardid_ = 0;
  sealindex_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  sealtype_ = 0;
  materialid_ = 0;
  premill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabDoorBoardSealInfo::~GC_CabDoorBoardSealInfo() {
  SharedDtor();
}

void GC_CabDoorBoardSealInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabDoorBoardSealInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabDoorBoardSealInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabDoorBoardSealInfo_descriptor_;
}

const GC_CabDoorBoardSealInfo& GC_CabDoorBoardSealInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabDoorBoardSealInfo* GC_CabDoorBoardSealInfo::default_instance_ = NULL;

GC_CabDoorBoardSealInfo* GC_CabDoorBoardSealInfo::New() const {
  return new GC_CabDoorBoardSealInfo;
}

void GC_CabDoorBoardSealInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdoorboardsealid_ = 0;
    cabdoorboardid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    doorboardid_ = 0;
    sealindex_ = 0;
    factoryid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    sealtype_ = 0;
    materialid_ = 0;
    premill_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabDoorBoardSealInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDoorBoardSealID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorboardsealid_)));
          set_has_cabdoorboardsealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabDoorBoardID;
        break;
      }

      // required int32 CabDoorBoardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDoorBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorboardid_)));
          set_has_cabdoorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DoorBoardID;
        break;
      }

      // required int32 DoorBoardID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorboardid_)));
          set_has_doorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SealIndex;
        break;
      }

      // required int32 SealIndex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealindex_)));
          set_has_sealindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_SealType;
        break;
      }

      // required int32 SealType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealtype_)));
          set_has_sealtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_PreMill;
        break;
      }

      // required double PreMill = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreMill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premill_)));
          set_has_premill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabDoorBoardSealInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDoorBoardSealID = 1;
  if (has_cabdoorboardsealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdoorboardsealid(), output);
  }

  // required int32 CabDoorBoardID = 2;
  if (has_cabdoorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabdoorboardid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 DoorBoardID = 6;
  if (has_doorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->doorboardid(), output);
  }

  // required int32 SealIndex = 7;
  if (has_sealindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sealindex(), output);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->factoryid(), output);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vercode(), output);
  }

  // required int32 SealType = 10;
  if (has_sealtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sealtype(), output);
  }

  // required int32 MaterialID = 11;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->materialid(), output);
  }

  // required double PreMill = 12;
  if (has_premill()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->premill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabDoorBoardSealInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDoorBoardSealID = 1;
  if (has_cabdoorboardsealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdoorboardsealid(), target);
  }

  // required int32 CabDoorBoardID = 2;
  if (has_cabdoorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabdoorboardid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 DoorBoardID = 6;
  if (has_doorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->doorboardid(), target);
  }

  // required int32 SealIndex = 7;
  if (has_sealindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sealindex(), target);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->factoryid(), target);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vercode(), target);
  }

  // required int32 SealType = 10;
  if (has_sealtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sealtype(), target);
  }

  // required int32 MaterialID = 11;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->materialid(), target);
  }

  // required double PreMill = 12;
  if (has_premill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->premill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabDoorBoardSealInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDoorBoardSealID = 1;
    if (has_cabdoorboardsealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorboardsealid());
    }

    // required int32 CabDoorBoardID = 2;
    if (has_cabdoorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorboardid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 DoorBoardID = 6;
    if (has_doorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorboardid());
    }

    // required int32 SealIndex = 7;
    if (has_sealindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealindex());
    }

    // required int32 FactoryID = 8;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 VerCode = 9;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 SealType = 10;
    if (has_sealtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealtype());
    }

    // required int32 MaterialID = 11;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required double PreMill = 12;
    if (has_premill()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabDoorBoardSealInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabDoorBoardSealInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabDoorBoardSealInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabDoorBoardSealInfo::MergeFrom(const GC_CabDoorBoardSealInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdoorboardsealid()) {
      set_cabdoorboardsealid(from.cabdoorboardsealid());
    }
    if (from.has_cabdoorboardid()) {
      set_cabdoorboardid(from.cabdoorboardid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_doorboardid()) {
      set_doorboardid(from.doorboardid());
    }
    if (from.has_sealindex()) {
      set_sealindex(from.sealindex());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_sealtype()) {
      set_sealtype(from.sealtype());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_premill()) {
      set_premill(from.premill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabDoorBoardSealInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabDoorBoardSealInfo::CopyFrom(const GC_CabDoorBoardSealInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabDoorBoardSealInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void GC_CabDoorBoardSealInfo::Swap(GC_CabDoorBoardSealInfo* other) {
  if (other != this) {
    std::swap(cabdoorboardsealid_, other->cabdoorboardsealid_);
    std::swap(cabdoorboardid_, other->cabdoorboardid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(doorboardid_, other->doorboardid_);
    std::swap(sealindex_, other->sealindex_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(sealtype_, other->sealtype_);
    std::swap(materialid_, other->materialid_);
    std::swap(premill_, other->premill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabDoorBoardSealInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabDoorBoardSealInfo_descriptor_;
  metadata.reflection = GC_CabDoorBoardSealInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabDoorHWFInfo::kCabDoorHWFIDFieldNumber;
const int GC_CabDoorHWFInfo::kCabDoorRegionIDFieldNumber;
const int GC_CabDoorHWFInfo::kOrderCateFieldNumber;
const int GC_CabDoorHWFInfo::kOrderIDFieldNumber;
const int GC_CabDoorHWFInfo::kDesignPlanIDFieldNumber;
const int GC_CabDoorHWFInfo::kHWFittingIDFieldNumber;
const int GC_CabDoorHWFInfo::kFactoryIDFieldNumber;
const int GC_CabDoorHWFInfo::kVerCodeFieldNumber;
const int GC_CabDoorHWFInfo::kSupplyTypeFieldNumber;
const int GC_CabDoorHWFInfo::kGTypeIDFieldNumber;
const int GC_CabDoorHWFInfo::kSettingCountRuleIDFieldNumber;
const int GC_CabDoorHWFInfo::kUseCountFieldNumber;
const int GC_CabDoorHWFInfo::kCreatorIDFieldNumber;
const int GC_CabDoorHWFInfo::kUpdaterIDFieldNumber;
const int GC_CabDoorHWFInfo::kCreateTimeFieldNumber;
const int GC_CabDoorHWFInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_CabDoorHWFInfo::GC_CabDoorHWFInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabDoorHWFInfo::InitAsDefaultInstance() {
}

GC_CabDoorHWFInfo::GC_CabDoorHWFInfo(const GC_CabDoorHWFInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabDoorHWFInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdoorhwfid_ = 0;
  cabdoorregionid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  hwfittingid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  supplytype_ = 0;
  gtypeid_ = 0;
  settingcountruleid_ = 0;
  usecount_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabDoorHWFInfo::~GC_CabDoorHWFInfo() {
  SharedDtor();
}

void GC_CabDoorHWFInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabDoorHWFInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabDoorHWFInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabDoorHWFInfo_descriptor_;
}

const GC_CabDoorHWFInfo& GC_CabDoorHWFInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabDoorHWFInfo* GC_CabDoorHWFInfo::default_instance_ = NULL;

GC_CabDoorHWFInfo* GC_CabDoorHWFInfo::New() const {
  return new GC_CabDoorHWFInfo;
}

void GC_CabDoorHWFInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdoorhwfid_ = 0;
    cabdoorregionid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    hwfittingid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    supplytype_ = 0;
    gtypeid_ = 0;
    settingcountruleid_ = 0;
    usecount_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabDoorHWFInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDoorHWFID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorhwfid_)));
          set_has_cabdoorhwfid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabDoorRegionID;
        break;
      }

      // required int32 CabDoorRegionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDoorRegionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorregionid_)));
          set_has_cabdoorregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_HWFittingID;
        break;
      }

      // required int32 HWFittingID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HWFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hwfittingid_)));
          set_has_hwfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SettingCountRuleID;
        break;
      }

      // required int32 SettingCountRuleID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettingCountRuleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settingcountruleid_)));
          set_has_settingcountruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_UseCount;
        break;
      }

      // required int32 UseCount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usecount_)));
          set_has_usecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabDoorHWFInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDoorHWFID = 1;
  if (has_cabdoorhwfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdoorhwfid(), output);
  }

  // required int32 CabDoorRegionID = 2;
  if (has_cabdoorregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabdoorregionid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 HWFittingID = 6;
  if (has_hwfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hwfittingid(), output);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->factoryid(), output);
  }

  // required int64 VerCode = 8;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->vercode(), output);
  }

  // required int32 SupplyType = 9;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->supplytype(), output);
  }

  // required int32 GTypeID = 10;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gtypeid(), output);
  }

  // required int32 SettingCountRuleID = 11;
  if (has_settingcountruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->settingcountruleid(), output);
  }

  // required int32 UseCount = 12;
  if (has_usecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->usecount(), output);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->creatorid(), output);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->updaterid(), output);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->createtime(), output);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabDoorHWFInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDoorHWFID = 1;
  if (has_cabdoorhwfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdoorhwfid(), target);
  }

  // required int32 CabDoorRegionID = 2;
  if (has_cabdoorregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabdoorregionid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 HWFittingID = 6;
  if (has_hwfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hwfittingid(), target);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->factoryid(), target);
  }

  // required int64 VerCode = 8;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->vercode(), target);
  }

  // required int32 SupplyType = 9;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->supplytype(), target);
  }

  // required int32 GTypeID = 10;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gtypeid(), target);
  }

  // required int32 SettingCountRuleID = 11;
  if (has_settingcountruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->settingcountruleid(), target);
  }

  // required int32 UseCount = 12;
  if (has_usecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->usecount(), target);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->creatorid(), target);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->updaterid(), target);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->createtime(), target);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabDoorHWFInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDoorHWFID = 1;
    if (has_cabdoorhwfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorhwfid());
    }

    // required int32 CabDoorRegionID = 2;
    if (has_cabdoorregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorregionid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 HWFittingID = 6;
    if (has_hwfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hwfittingid());
    }

    // required int32 FactoryID = 7;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 8;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 SupplyType = 9;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 GTypeID = 10;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required int32 SettingCountRuleID = 11;
    if (has_settingcountruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settingcountruleid());
    }

    // required int32 UseCount = 12;
    if (has_usecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usecount());
    }

    // required int32 CreatorID = 13;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 14;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 15;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 16;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabDoorHWFInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabDoorHWFInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabDoorHWFInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabDoorHWFInfo::MergeFrom(const GC_CabDoorHWFInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdoorhwfid()) {
      set_cabdoorhwfid(from.cabdoorhwfid());
    }
    if (from.has_cabdoorregionid()) {
      set_cabdoorregionid(from.cabdoorregionid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_hwfittingid()) {
      set_hwfittingid(from.hwfittingid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_settingcountruleid()) {
      set_settingcountruleid(from.settingcountruleid());
    }
    if (from.has_usecount()) {
      set_usecount(from.usecount());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabDoorHWFInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabDoorHWFInfo::CopyFrom(const GC_CabDoorHWFInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabDoorHWFInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void GC_CabDoorHWFInfo::Swap(GC_CabDoorHWFInfo* other) {
  if (other != this) {
    std::swap(cabdoorhwfid_, other->cabdoorhwfid_);
    std::swap(cabdoorregionid_, other->cabdoorregionid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(hwfittingid_, other->hwfittingid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(settingcountruleid_, other->settingcountruleid_);
    std::swap(usecount_, other->usecount_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabDoorHWFInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabDoorHWFInfo_descriptor_;
  metadata.reflection = GC_CabDoorHWFInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabDoorHandleInfo::kCabDoorHandleIDFieldNumber;
const int GC_CabDoorHandleInfo::kCabParentIDFieldNumber;
const int GC_CabDoorHandleInfo::kParentTypeFieldNumber;
const int GC_CabDoorHandleInfo::kOrderCateFieldNumber;
const int GC_CabDoorHandleInfo::kOrderIDFieldNumber;
const int GC_CabDoorHandleInfo::kDesignPlanIDFieldNumber;
const int GC_CabDoorHandleInfo::kCabDesignDoorRegionIDFieldNumber;
const int GC_CabDoorHandleInfo::kCabDesignDoorRegionHandleIDFieldNumber;
const int GC_CabDoorHandleInfo::kOwnerIDFieldNumber;
const int GC_CabDoorHandleInfo::kDoorMatPlanIDFieldNumber;
const int GC_CabDoorHandleInfo::kHandleIDFieldNumber;
const int GC_CabDoorHandleInfo::kFactoryIDFieldNumber;
const int GC_CabDoorHandleInfo::kVerCodeFieldNumber;
const int GC_CabDoorHandleInfo::kMatchTypeFieldNumber;
const int GC_CabDoorHandleInfo::kIsChangedOffsetFieldNumber;
const int GC_CabDoorHandleInfo::kSupplyTypeFieldNumber;
const int GC_CabDoorHandleInfo::kGTypeIDFieldNumber;
const int GC_CabDoorHandleInfo::kXDockFieldNumber;
const int GC_CabDoorHandleInfo::kYDockFieldNumber;
const int GC_CabDoorHandleInfo::kZDockFieldNumber;
const int GC_CabDoorHandleInfo::kXLenFieldNumber;
const int GC_CabDoorHandleInfo::kYLenFieldNumber;
const int GC_CabDoorHandleInfo::kZLenFieldNumber;
const int GC_CabDoorHandleInfo::kRealXLenFieldNumber;
const int GC_CabDoorHandleInfo::kRealYLenFieldNumber;
const int GC_CabDoorHandleInfo::kRealZLenFieldNumber;
const int GC_CabDoorHandleInfo::kXOffsetLenFieldNumber;
const int GC_CabDoorHandleInfo::kYOffsetLenFieldNumber;
const int GC_CabDoorHandleInfo::kZOffsetLenFieldNumber;
const int GC_CabDoorHandleInfo::kArcZFieldNumber;
const int GC_CabDoorHandleInfo::kCreatorIDFieldNumber;
const int GC_CabDoorHandleInfo::kUpdaterIDFieldNumber;
const int GC_CabDoorHandleInfo::kCreateTimeFieldNumber;
const int GC_CabDoorHandleInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_CabDoorHandleInfo::GC_CabDoorHandleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabDoorHandleInfo::InitAsDefaultInstance() {
}

GC_CabDoorHandleInfo::GC_CabDoorHandleInfo(const GC_CabDoorHandleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabDoorHandleInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdoorhandleid_ = 0;
  cabparentid_ = 0;
  parenttype_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  cabdesigndoorregionid_ = 0;
  cabdesigndoorregionhandleid_ = 0;
  ownerid_ = 0;
  doormatplanid_ = 0;
  handleid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  matchtype_ = 0;
  ischangedoffset_ = false;
  supplytype_ = 0;
  gtypeid_ = 0;
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  realxlen_ = 0;
  realylen_ = 0;
  realzlen_ = 0;
  xoffsetlen_ = 0;
  yoffsetlen_ = 0;
  zoffsetlen_ = 0;
  arcz_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabDoorHandleInfo::~GC_CabDoorHandleInfo() {
  SharedDtor();
}

void GC_CabDoorHandleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabDoorHandleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabDoorHandleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabDoorHandleInfo_descriptor_;
}

const GC_CabDoorHandleInfo& GC_CabDoorHandleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabDoorHandleInfo* GC_CabDoorHandleInfo::default_instance_ = NULL;

GC_CabDoorHandleInfo* GC_CabDoorHandleInfo::New() const {
  return new GC_CabDoorHandleInfo;
}

void GC_CabDoorHandleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdoorhandleid_ = 0;
    cabparentid_ = 0;
    parenttype_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    cabdesigndoorregionid_ = 0;
    cabdesigndoorregionhandleid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ownerid_ = 0;
    doormatplanid_ = 0;
    handleid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    matchtype_ = 0;
    ischangedoffset_ = false;
    supplytype_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    gtypeid_ = 0;
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    realxlen_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    realylen_ = 0;
    realzlen_ = 0;
    xoffsetlen_ = 0;
    yoffsetlen_ = 0;
    zoffsetlen_ = 0;
    arcz_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabDoorHandleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDoorHandleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorhandleid_)));
          set_has_cabdoorhandleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabParentID;
        break;
      }

      // required int32 CabParentID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabParentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabparentid_)));
          set_has_cabparentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ParentType;
        break;
      }

      // required int32 ParentType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parenttype_)));
          set_has_parenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CabDesignDoorRegionID;
        break;
      }

      // required int32 CabDesignDoorRegionID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignDoorRegionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesigndoorregionid_)));
          set_has_cabdesigndoorregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CabDesignDoorRegionHandleID;
        break;
      }

      // required int32 CabDesignDoorRegionHandleID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignDoorRegionHandleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesigndoorregionhandleid_)));
          set_has_cabdesigndoorregionhandleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_OwnerID;
        break;
      }

      // required int32 OwnerID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OwnerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_DoorMatPlanID;
        break;
      }

      // required int32 DoorMatPlanID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doormatplanid_)));
          set_has_doormatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_HandleID;
        break;
      }

      // required int32 HandleID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HandleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handleid_)));
          set_has_handleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_MatchType;
        break;
      }

      // required int32 MatchType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatchType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchtype_)));
          set_has_matchtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_IsChangedOffset;
        break;
      }

      // required bool IsChangedOffset = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsChangedOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischangedoffset_)));
          set_has_ischangedoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_XLen;
        break;
      }

      // required double XLen = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_YLen;
        break;
      }

      // required double YLen = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_RealXLen;
        break;
      }

      // required double RealXLen = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realxlen_)));
          set_has_realxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_RealYLen;
        break;
      }

      // required double RealYLen = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realylen_)));
          set_has_realylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_RealZLen;
        break;
      }

      // required double RealZLen = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realzlen_)));
          set_has_realzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_XOffsetLen;
        break;
      }

      // required double XOffsetLen = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffsetlen_)));
          set_has_xoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_YOffsetLen;
        break;
      }

      // required double YOffsetLen = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yoffsetlen_)));
          set_has_yoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_ZOffsetLen;
        break;
      }

      // required double ZOffsetLen = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoffsetlen_)));
          set_has_zoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_ArcZ;
        break;
      }

      // required double ArcZ = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcz_)));
          set_has_arcz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabDoorHandleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDoorHandleID = 1;
  if (has_cabdoorhandleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdoorhandleid(), output);
  }

  // required int32 CabParentID = 2;
  if (has_cabparentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabparentid(), output);
  }

  // required int32 ParentType = 3;
  if (has_parenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parenttype(), output);
  }

  // required int32 OrderCate = 4;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ordercate(), output);
  }

  // required int64 OrderID = 5;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->orderid(), output);
  }

  // required int32 DesignPlanID = 6;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->designplanid(), output);
  }

  // required int32 CabDesignDoorRegionID = 7;
  if (has_cabdesigndoorregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cabdesigndoorregionid(), output);
  }

  // required int32 CabDesignDoorRegionHandleID = 8;
  if (has_cabdesigndoorregionhandleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cabdesigndoorregionhandleid(), output);
  }

  // required int32 OwnerID = 9;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ownerid(), output);
  }

  // required int32 DoorMatPlanID = 10;
  if (has_doormatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->doormatplanid(), output);
  }

  // required int32 HandleID = 11;
  if (has_handleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->handleid(), output);
  }

  // required int32 FactoryID = 12;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->factoryid(), output);
  }

  // required int64 VerCode = 13;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->vercode(), output);
  }

  // required int32 MatchType = 14;
  if (has_matchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->matchtype(), output);
  }

  // required bool IsChangedOffset = 15;
  if (has_ischangedoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->ischangedoffset(), output);
  }

  // required int32 SupplyType = 16;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->supplytype(), output);
  }

  // required int32 GTypeID = 17;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->gtypeid(), output);
  }

  // required int32 XDock = 18;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->xdock(), output);
  }

  // required int32 YDock = 19;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->ydock(), output);
  }

  // required int32 ZDock = 20;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->zdock(), output);
  }

  // required double XLen = 21;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->xlen(), output);
  }

  // required double YLen = 22;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->ylen(), output);
  }

  // required double ZLen = 23;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->zlen(), output);
  }

  // required double RealXLen = 24;
  if (has_realxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->realxlen(), output);
  }

  // required double RealYLen = 25;
  if (has_realylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->realylen(), output);
  }

  // required double RealZLen = 26;
  if (has_realzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->realzlen(), output);
  }

  // required double XOffsetLen = 27;
  if (has_xoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->xoffsetlen(), output);
  }

  // required double YOffsetLen = 28;
  if (has_yoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->yoffsetlen(), output);
  }

  // required double ZOffsetLen = 29;
  if (has_zoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->zoffsetlen(), output);
  }

  // required double ArcZ = 30;
  if (has_arcz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->arcz(), output);
  }

  // required int32 CreatorID = 31;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->creatorid(), output);
  }

  // required int32 UpdaterID = 32;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->updaterid(), output);
  }

  // required int64 CreateTime = 33;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->createtime(), output);
  }

  // required int64 UpdateTime = 34;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabDoorHandleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDoorHandleID = 1;
  if (has_cabdoorhandleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdoorhandleid(), target);
  }

  // required int32 CabParentID = 2;
  if (has_cabparentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabparentid(), target);
  }

  // required int32 ParentType = 3;
  if (has_parenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parenttype(), target);
  }

  // required int32 OrderCate = 4;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ordercate(), target);
  }

  // required int64 OrderID = 5;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->orderid(), target);
  }

  // required int32 DesignPlanID = 6;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->designplanid(), target);
  }

  // required int32 CabDesignDoorRegionID = 7;
  if (has_cabdesigndoorregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cabdesigndoorregionid(), target);
  }

  // required int32 CabDesignDoorRegionHandleID = 8;
  if (has_cabdesigndoorregionhandleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cabdesigndoorregionhandleid(), target);
  }

  // required int32 OwnerID = 9;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ownerid(), target);
  }

  // required int32 DoorMatPlanID = 10;
  if (has_doormatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->doormatplanid(), target);
  }

  // required int32 HandleID = 11;
  if (has_handleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->handleid(), target);
  }

  // required int32 FactoryID = 12;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->factoryid(), target);
  }

  // required int64 VerCode = 13;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->vercode(), target);
  }

  // required int32 MatchType = 14;
  if (has_matchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->matchtype(), target);
  }

  // required bool IsChangedOffset = 15;
  if (has_ischangedoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->ischangedoffset(), target);
  }

  // required int32 SupplyType = 16;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->supplytype(), target);
  }

  // required int32 GTypeID = 17;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->gtypeid(), target);
  }

  // required int32 XDock = 18;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->xdock(), target);
  }

  // required int32 YDock = 19;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->ydock(), target);
  }

  // required int32 ZDock = 20;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->zdock(), target);
  }

  // required double XLen = 21;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->xlen(), target);
  }

  // required double YLen = 22;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->ylen(), target);
  }

  // required double ZLen = 23;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->zlen(), target);
  }

  // required double RealXLen = 24;
  if (has_realxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->realxlen(), target);
  }

  // required double RealYLen = 25;
  if (has_realylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->realylen(), target);
  }

  // required double RealZLen = 26;
  if (has_realzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->realzlen(), target);
  }

  // required double XOffsetLen = 27;
  if (has_xoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->xoffsetlen(), target);
  }

  // required double YOffsetLen = 28;
  if (has_yoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->yoffsetlen(), target);
  }

  // required double ZOffsetLen = 29;
  if (has_zoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->zoffsetlen(), target);
  }

  // required double ArcZ = 30;
  if (has_arcz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->arcz(), target);
  }

  // required int32 CreatorID = 31;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->creatorid(), target);
  }

  // required int32 UpdaterID = 32;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->updaterid(), target);
  }

  // required int64 CreateTime = 33;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->createtime(), target);
  }

  // required int64 UpdateTime = 34;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabDoorHandleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDoorHandleID = 1;
    if (has_cabdoorhandleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorhandleid());
    }

    // required int32 CabParentID = 2;
    if (has_cabparentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabparentid());
    }

    // required int32 ParentType = 3;
    if (has_parenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parenttype());
    }

    // required int32 OrderCate = 4;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 5;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 6;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 CabDesignDoorRegionID = 7;
    if (has_cabdesigndoorregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesigndoorregionid());
    }

    // required int32 CabDesignDoorRegionHandleID = 8;
    if (has_cabdesigndoorregionhandleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesigndoorregionhandleid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 OwnerID = 9;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

    // required int32 DoorMatPlanID = 10;
    if (has_doormatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doormatplanid());
    }

    // required int32 HandleID = 11;
    if (has_handleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handleid());
    }

    // required int32 FactoryID = 12;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 13;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 MatchType = 14;
    if (has_matchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchtype());
    }

    // required bool IsChangedOffset = 15;
    if (has_ischangedoffset()) {
      total_size += 1 + 1;
    }

    // required int32 SupplyType = 16;
    if (has_supplytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 GTypeID = 17;
    if (has_gtypeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required int32 XDock = 18;
    if (has_xdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 19;
    if (has_ydock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 20;
    if (has_zdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // required double XLen = 21;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 22;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 23;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required double RealXLen = 24;
    if (has_realxlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double RealYLen = 25;
    if (has_realylen()) {
      total_size += 2 + 8;
    }

    // required double RealZLen = 26;
    if (has_realzlen()) {
      total_size += 2 + 8;
    }

    // required double XOffsetLen = 27;
    if (has_xoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double YOffsetLen = 28;
    if (has_yoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double ZOffsetLen = 29;
    if (has_zoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double ArcZ = 30;
    if (has_arcz()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 31;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 32;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int64 CreateTime = 33;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 34;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabDoorHandleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabDoorHandleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabDoorHandleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabDoorHandleInfo::MergeFrom(const GC_CabDoorHandleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdoorhandleid()) {
      set_cabdoorhandleid(from.cabdoorhandleid());
    }
    if (from.has_cabparentid()) {
      set_cabparentid(from.cabparentid());
    }
    if (from.has_parenttype()) {
      set_parenttype(from.parenttype());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_cabdesigndoorregionid()) {
      set_cabdesigndoorregionid(from.cabdesigndoorregionid());
    }
    if (from.has_cabdesigndoorregionhandleid()) {
      set_cabdesigndoorregionhandleid(from.cabdesigndoorregionhandleid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_doormatplanid()) {
      set_doormatplanid(from.doormatplanid());
    }
    if (from.has_handleid()) {
      set_handleid(from.handleid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_matchtype()) {
      set_matchtype(from.matchtype());
    }
    if (from.has_ischangedoffset()) {
      set_ischangedoffset(from.ischangedoffset());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_realxlen()) {
      set_realxlen(from.realxlen());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_realylen()) {
      set_realylen(from.realylen());
    }
    if (from.has_realzlen()) {
      set_realzlen(from.realzlen());
    }
    if (from.has_xoffsetlen()) {
      set_xoffsetlen(from.xoffsetlen());
    }
    if (from.has_yoffsetlen()) {
      set_yoffsetlen(from.yoffsetlen());
    }
    if (from.has_zoffsetlen()) {
      set_zoffsetlen(from.zoffsetlen());
    }
    if (from.has_arcz()) {
      set_arcz(from.arcz());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabDoorHandleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabDoorHandleInfo::CopyFrom(const GC_CabDoorHandleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabDoorHandleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_CabDoorHandleInfo::Swap(GC_CabDoorHandleInfo* other) {
  if (other != this) {
    std::swap(cabdoorhandleid_, other->cabdoorhandleid_);
    std::swap(cabparentid_, other->cabparentid_);
    std::swap(parenttype_, other->parenttype_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(cabdesigndoorregionid_, other->cabdesigndoorregionid_);
    std::swap(cabdesigndoorregionhandleid_, other->cabdesigndoorregionhandleid_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(doormatplanid_, other->doormatplanid_);
    std::swap(handleid_, other->handleid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(matchtype_, other->matchtype_);
    std::swap(ischangedoffset_, other->ischangedoffset_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(realxlen_, other->realxlen_);
    std::swap(realylen_, other->realylen_);
    std::swap(realzlen_, other->realzlen_);
    std::swap(xoffsetlen_, other->xoffsetlen_);
    std::swap(yoffsetlen_, other->yoffsetlen_);
    std::swap(zoffsetlen_, other->zoffsetlen_);
    std::swap(arcz_, other->arcz_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabDoorHandleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabDoorHandleInfo_descriptor_;
  metadata.reflection = GC_CabDoorHandleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabDoorInfo::kCabDoorIDFieldNumber;
const int GC_CabDoorInfo::kCabParentIDFieldNumber;
const int GC_CabDoorInfo::kParentTypeFieldNumber;
const int GC_CabDoorInfo::kOrderCateFieldNumber;
const int GC_CabDoorInfo::kOrderIDFieldNumber;
const int GC_CabDoorInfo::kDesignPlanIDFieldNumber;
const int GC_CabDoorInfo::kOwnerIDFieldNumber;
const int GC_CabDoorInfo::kDoorMatPlanIDFieldNumber;
const int GC_CabDoorInfo::kDoorIDFieldNumber;
const int GC_CabDoorInfo::kFactoryIDFieldNumber;
const int GC_CabDoorInfo::kVerCodeFieldNumber;
const int GC_CabDoorInfo::kXLenFieldNumber;
const int GC_CabDoorInfo::kYLenFieldNumber;
const int GC_CabDoorInfo::kZLenFieldNumber;
const int GC_CabDoorInfo::kCreatorIDFieldNumber;
const int GC_CabDoorInfo::kUpdaterIDFieldNumber;
const int GC_CabDoorInfo::kCreateTimeFieldNumber;
const int GC_CabDoorInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_CabDoorInfo::GC_CabDoorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabDoorInfo::InitAsDefaultInstance() {
}

GC_CabDoorInfo::GC_CabDoorInfo(const GC_CabDoorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabDoorInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdoorid_ = 0;
  cabparentid_ = 0;
  parenttype_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  ownerid_ = 0;
  doormatplanid_ = 0;
  doorid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabDoorInfo::~GC_CabDoorInfo() {
  SharedDtor();
}

void GC_CabDoorInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabDoorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabDoorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabDoorInfo_descriptor_;
}

const GC_CabDoorInfo& GC_CabDoorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabDoorInfo* GC_CabDoorInfo::default_instance_ = NULL;

GC_CabDoorInfo* GC_CabDoorInfo::New() const {
  return new GC_CabDoorInfo;
}

void GC_CabDoorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdoorid_ = 0;
    cabparentid_ = 0;
    parenttype_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    ownerid_ = 0;
    doormatplanid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    doorid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabDoorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDoorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorid_)));
          set_has_cabdoorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabParentID;
        break;
      }

      // required int32 CabParentID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabParentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabparentid_)));
          set_has_cabparentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ParentType;
        break;
      }

      // required int32 ParentType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parenttype_)));
          set_has_parenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_OwnerID;
        break;
      }

      // required int32 OwnerID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OwnerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DoorMatPlanID;
        break;
      }

      // required int32 DoorMatPlanID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doormatplanid_)));
          set_has_doormatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_DoorID;
        break;
      }

      // required int32 DoorID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorid_)));
          set_has_doorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_XLen;
        break;
      }

      // required double XLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_YLen;
        break;
      }

      // required double YLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabDoorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDoorID = 1;
  if (has_cabdoorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdoorid(), output);
  }

  // required int32 CabParentID = 2;
  if (has_cabparentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabparentid(), output);
  }

  // required int32 ParentType = 3;
  if (has_parenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parenttype(), output);
  }

  // required int32 OrderCate = 4;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ordercate(), output);
  }

  // required int64 OrderID = 5;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->orderid(), output);
  }

  // required int32 DesignPlanID = 6;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->designplanid(), output);
  }

  // required int32 OwnerID = 7;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ownerid(), output);
  }

  // required int32 DoorMatPlanID = 8;
  if (has_doormatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->doormatplanid(), output);
  }

  // required int32 DoorID = 9;
  if (has_doorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->doorid(), output);
  }

  // required int32 FactoryID = 10;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->factoryid(), output);
  }

  // required int64 VerCode = 11;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->vercode(), output);
  }

  // required double XLen = 12;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->xlen(), output);
  }

  // required double YLen = 13;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->ylen(), output);
  }

  // required double ZLen = 14;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->zlen(), output);
  }

  // required int32 CreatorID = 15;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->creatorid(), output);
  }

  // required int32 UpdaterID = 16;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->updaterid(), output);
  }

  // required int64 CreateTime = 17;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->createtime(), output);
  }

  // required int64 UpdateTime = 18;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabDoorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDoorID = 1;
  if (has_cabdoorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdoorid(), target);
  }

  // required int32 CabParentID = 2;
  if (has_cabparentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabparentid(), target);
  }

  // required int32 ParentType = 3;
  if (has_parenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parenttype(), target);
  }

  // required int32 OrderCate = 4;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ordercate(), target);
  }

  // required int64 OrderID = 5;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->orderid(), target);
  }

  // required int32 DesignPlanID = 6;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->designplanid(), target);
  }

  // required int32 OwnerID = 7;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ownerid(), target);
  }

  // required int32 DoorMatPlanID = 8;
  if (has_doormatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->doormatplanid(), target);
  }

  // required int32 DoorID = 9;
  if (has_doorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->doorid(), target);
  }

  // required int32 FactoryID = 10;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->factoryid(), target);
  }

  // required int64 VerCode = 11;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->vercode(), target);
  }

  // required double XLen = 12;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->xlen(), target);
  }

  // required double YLen = 13;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->ylen(), target);
  }

  // required double ZLen = 14;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->zlen(), target);
  }

  // required int32 CreatorID = 15;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->creatorid(), target);
  }

  // required int32 UpdaterID = 16;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->updaterid(), target);
  }

  // required int64 CreateTime = 17;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->createtime(), target);
  }

  // required int64 UpdateTime = 18;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabDoorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDoorID = 1;
    if (has_cabdoorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorid());
    }

    // required int32 CabParentID = 2;
    if (has_cabparentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabparentid());
    }

    // required int32 ParentType = 3;
    if (has_parenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parenttype());
    }

    // required int32 OrderCate = 4;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 5;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 6;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 OwnerID = 7;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

    // required int32 DoorMatPlanID = 8;
    if (has_doormatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doormatplanid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 DoorID = 9;
    if (has_doorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorid());
    }

    // required int32 FactoryID = 10;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 11;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required double XLen = 12;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 13;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double ZLen = 14;
    if (has_zlen()) {
      total_size += 1 + 8;
    }

    // required int32 CreatorID = 15;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 16;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 CreateTime = 17;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 18;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabDoorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabDoorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabDoorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabDoorInfo::MergeFrom(const GC_CabDoorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdoorid()) {
      set_cabdoorid(from.cabdoorid());
    }
    if (from.has_cabparentid()) {
      set_cabparentid(from.cabparentid());
    }
    if (from.has_parenttype()) {
      set_parenttype(from.parenttype());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_doormatplanid()) {
      set_doormatplanid(from.doormatplanid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_doorid()) {
      set_doorid(from.doorid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabDoorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabDoorInfo::CopyFrom(const GC_CabDoorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabDoorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;

  return true;
}

void GC_CabDoorInfo::Swap(GC_CabDoorInfo* other) {
  if (other != this) {
    std::swap(cabdoorid_, other->cabdoorid_);
    std::swap(cabparentid_, other->cabparentid_);
    std::swap(parenttype_, other->parenttype_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(doormatplanid_, other->doormatplanid_);
    std::swap(doorid_, other->doorid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabDoorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabDoorInfo_descriptor_;
  metadata.reflection = GC_CabDoorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabDoorRegionInfo::kCabDoorRegionIDFieldNumber;
const int GC_CabDoorRegionInfo::kCabDoorSystemIDFieldNumber;
const int GC_CabDoorRegionInfo::kParentCabRegionIDFieldNumber;
const int GC_CabDoorRegionInfo::kOrderCateFieldNumber;
const int GC_CabDoorRegionInfo::kOrderIDFieldNumber;
const int GC_CabDoorRegionInfo::kDesignPlanIDFieldNumber;
const int GC_CabDoorRegionInfo::kDoorSystemRegionIDFieldNumber;
const int GC_CabDoorRegionInfo::kDoorSystemIDFieldNumber;
const int GC_CabDoorRegionInfo::kCabDesignDoorRegionIDFieldNumber;
const int GC_CabDoorRegionInfo::kCabDesignDoorSystemIDFieldNumber;
const int GC_CabDoorRegionInfo::kCabDesignIDFieldNumber;
const int GC_CabDoorRegionInfo::kFactoryIDFieldNumber;
const int GC_CabDoorRegionInfo::kVerCodeFieldNumber;
const int GC_CabDoorRegionInfo::kIsUserDefineSizeFieldNumber;
const int GC_CabDoorRegionInfo::kIsUserDefinePosFieldNumber;
const int GC_CabDoorRegionInfo::kXDockFieldNumber;
const int GC_CabDoorRegionInfo::kYDockFieldNumber;
const int GC_CabDoorRegionInfo::kZDockFieldNumber;
const int GC_CabDoorRegionInfo::kXLenFieldNumber;
const int GC_CabDoorRegionInfo::kYLenFieldNumber;
const int GC_CabDoorRegionInfo::kZLenFieldNumber;
const int GC_CabDoorRegionInfo::kXAdjustLenFieldNumber;
const int GC_CabDoorRegionInfo::kYAdjustLenFieldNumber;
const int GC_CabDoorRegionInfo::kRealXLenFieldNumber;
const int GC_CabDoorRegionInfo::kRealYLenFieldNumber;
const int GC_CabDoorRegionInfo::kRealZLenFieldNumber;
const int GC_CabDoorRegionInfo::kCutXLenFieldNumber;
const int GC_CabDoorRegionInfo::kCutYLenFieldNumber;
const int GC_CabDoorRegionInfo::kXOffsetLenFieldNumber;
const int GC_CabDoorRegionInfo::kYOffsetLenFieldNumber;
const int GC_CabDoorRegionInfo::kZOffsetLenFieldNumber;
const int GC_CabDoorRegionInfo::kRealXOffsetLenFieldNumber;
const int GC_CabDoorRegionInfo::kRealYOffsetLenFieldNumber;
const int GC_CabDoorRegionInfo::kRealZOffsetLenFieldNumber;
const int GC_CabDoorRegionInfo::kCreatorIDFieldNumber;
const int GC_CabDoorRegionInfo::kUpdaterIDFieldNumber;
const int GC_CabDoorRegionInfo::kCreateTimeFieldNumber;
const int GC_CabDoorRegionInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_CabDoorRegionInfo::GC_CabDoorRegionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabDoorRegionInfo::InitAsDefaultInstance() {
}

GC_CabDoorRegionInfo::GC_CabDoorRegionInfo(const GC_CabDoorRegionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabDoorRegionInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdoorregionid_ = 0;
  cabdoorsystemid_ = 0;
  parentcabregionid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  doorsystemregionid_ = 0;
  doorsystemid_ = 0;
  cabdesigndoorregionid_ = 0;
  cabdesigndoorsystemid_ = 0;
  cabdesignid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  isuserdefinesize_ = false;
  isuserdefinepos_ = false;
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  xadjustlen_ = 0;
  yadjustlen_ = 0;
  realxlen_ = 0;
  realylen_ = 0;
  realzlen_ = 0;
  cutxlen_ = 0;
  cutylen_ = 0;
  xoffsetlen_ = 0;
  yoffsetlen_ = 0;
  zoffsetlen_ = 0;
  realxoffsetlen_ = 0;
  realyoffsetlen_ = 0;
  realzoffsetlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabDoorRegionInfo::~GC_CabDoorRegionInfo() {
  SharedDtor();
}

void GC_CabDoorRegionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabDoorRegionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabDoorRegionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabDoorRegionInfo_descriptor_;
}

const GC_CabDoorRegionInfo& GC_CabDoorRegionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabDoorRegionInfo* GC_CabDoorRegionInfo::default_instance_ = NULL;

GC_CabDoorRegionInfo* GC_CabDoorRegionInfo::New() const {
  return new GC_CabDoorRegionInfo;
}

void GC_CabDoorRegionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdoorregionid_ = 0;
    cabdoorsystemid_ = 0;
    parentcabregionid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    doorsystemregionid_ = 0;
    doorsystemid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cabdesigndoorregionid_ = 0;
    cabdesigndoorsystemid_ = 0;
    cabdesignid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    isuserdefinesize_ = false;
    isuserdefinepos_ = false;
    xdock_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    ydock_ = 0;
    zdock_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    xadjustlen_ = 0;
    yadjustlen_ = 0;
    realxlen_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    realylen_ = 0;
    realzlen_ = 0;
    cutxlen_ = 0;
    cutylen_ = 0;
    xoffsetlen_ = 0;
    yoffsetlen_ = 0;
    zoffsetlen_ = 0;
    realxoffsetlen_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    realyoffsetlen_ = 0;
    realzoffsetlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabDoorRegionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDoorRegionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorregionid_)));
          set_has_cabdoorregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabDoorSystemID;
        break;
      }

      // required int32 CabDoorSystemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDoorSystemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorsystemid_)));
          set_has_cabdoorsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ParentCabRegionID;
        break;
      }

      // required int32 ParentCabRegionID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParentCabRegionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentcabregionid_)));
          set_has_parentcabregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_DoorSystemRegionID;
        break;
      }

      // required int32 DoorSystemRegionID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorSystemRegionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemregionid_)));
          set_has_doorsystemregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DoorSystemID;
        break;
      }

      // required int32 DoorSystemID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorSystemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemid_)));
          set_has_doorsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CabDesignDoorRegionID;
        break;
      }

      // required int32 CabDesignDoorRegionID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignDoorRegionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesigndoorregionid_)));
          set_has_cabdesigndoorregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CabDesignDoorSystemID;
        break;
      }

      // required int32 CabDesignDoorSystemID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignDoorSystemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesigndoorsystemid_)));
          set_has_cabdesigndoorsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CabDesignID;
        break;
      }

      // required int32 CabDesignID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignid_)));
          set_has_cabdesignid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_IsUserDefineSize;
        break;
      }

      // required bool IsUserDefineSize = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUserDefineSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isuserdefinesize_)));
          set_has_isuserdefinesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_IsUserDefinePos;
        break;
      }

      // required bool IsUserDefinePos = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUserDefinePos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isuserdefinepos_)));
          set_has_isuserdefinepos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_XLen;
        break;
      }

      // required double XLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_YLen;
        break;
      }

      // required double YLen = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_XAdjustLen;
        break;
      }

      // required double XAdjustLen = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XAdjustLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xadjustlen_)));
          set_has_xadjustlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_YAdjustLen;
        break;
      }

      // required double YAdjustLen = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YAdjustLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yadjustlen_)));
          set_has_yadjustlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_RealXLen;
        break;
      }

      // required double RealXLen = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realxlen_)));
          set_has_realxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_RealYLen;
        break;
      }

      // required double RealYLen = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realylen_)));
          set_has_realylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_RealZLen;
        break;
      }

      // required double RealZLen = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realzlen_)));
          set_has_realzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_CutXLen;
        break;
      }

      // required double CutXLen = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CutXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cutxlen_)));
          set_has_cutxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_CutYLen;
        break;
      }

      // required double CutYLen = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CutYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cutylen_)));
          set_has_cutylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_XOffsetLen;
        break;
      }

      // required double XOffsetLen = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffsetlen_)));
          set_has_xoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_YOffsetLen;
        break;
      }

      // required double YOffsetLen = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yoffsetlen_)));
          set_has_yoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_ZOffsetLen;
        break;
      }

      // required double ZOffsetLen = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoffsetlen_)));
          set_has_zoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_RealXOffsetLen;
        break;
      }

      // required double RealXOffsetLen = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealXOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realxoffsetlen_)));
          set_has_realxoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_RealYOffsetLen;
        break;
      }

      // required double RealYOffsetLen = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealYOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realyoffsetlen_)));
          set_has_realyoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(273)) goto parse_RealZOffsetLen;
        break;
      }

      // required double RealZOffsetLen = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realzoffsetlen_)));
          set_has_realzoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabDoorRegionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDoorRegionID = 1;
  if (has_cabdoorregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdoorregionid(), output);
  }

  // required int32 CabDoorSystemID = 2;
  if (has_cabdoorsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabdoorsystemid(), output);
  }

  // required int32 ParentCabRegionID = 3;
  if (has_parentcabregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parentcabregionid(), output);
  }

  // required int32 OrderCate = 4;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ordercate(), output);
  }

  // required int64 OrderID = 5;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->orderid(), output);
  }

  // required int32 DesignPlanID = 6;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->designplanid(), output);
  }

  // required int32 DoorSystemRegionID = 7;
  if (has_doorsystemregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->doorsystemregionid(), output);
  }

  // required int32 DoorSystemID = 8;
  if (has_doorsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->doorsystemid(), output);
  }

  // required int32 CabDesignDoorRegionID = 9;
  if (has_cabdesigndoorregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cabdesigndoorregionid(), output);
  }

  // required int32 CabDesignDoorSystemID = 10;
  if (has_cabdesigndoorsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cabdesigndoorsystemid(), output);
  }

  // required int32 CabDesignID = 11;
  if (has_cabdesignid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cabdesignid(), output);
  }

  // required int32 FactoryID = 12;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->factoryid(), output);
  }

  // required int64 VerCode = 13;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->vercode(), output);
  }

  // required bool IsUserDefineSize = 14;
  if (has_isuserdefinesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isuserdefinesize(), output);
  }

  // required bool IsUserDefinePos = 15;
  if (has_isuserdefinepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isuserdefinepos(), output);
  }

  // required int32 XDock = 16;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->xdock(), output);
  }

  // required int32 YDock = 17;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->ydock(), output);
  }

  // required int32 ZDock = 18;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->zdock(), output);
  }

  // required double XLen = 19;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->xlen(), output);
  }

  // required double YLen = 20;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->ylen(), output);
  }

  // required double ZLen = 21;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->zlen(), output);
  }

  // required double XAdjustLen = 22;
  if (has_xadjustlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->xadjustlen(), output);
  }

  // required double YAdjustLen = 23;
  if (has_yadjustlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->yadjustlen(), output);
  }

  // required double RealXLen = 24;
  if (has_realxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->realxlen(), output);
  }

  // required double RealYLen = 25;
  if (has_realylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->realylen(), output);
  }

  // required double RealZLen = 26;
  if (has_realzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->realzlen(), output);
  }

  // required double CutXLen = 27;
  if (has_cutxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->cutxlen(), output);
  }

  // required double CutYLen = 28;
  if (has_cutylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->cutylen(), output);
  }

  // required double XOffsetLen = 29;
  if (has_xoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->xoffsetlen(), output);
  }

  // required double YOffsetLen = 30;
  if (has_yoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->yoffsetlen(), output);
  }

  // required double ZOffsetLen = 31;
  if (has_zoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->zoffsetlen(), output);
  }

  // required double RealXOffsetLen = 32;
  if (has_realxoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->realxoffsetlen(), output);
  }

  // required double RealYOffsetLen = 33;
  if (has_realyoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->realyoffsetlen(), output);
  }

  // required double RealZOffsetLen = 34;
  if (has_realzoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->realzoffsetlen(), output);
  }

  // required int32 CreatorID = 35;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->creatorid(), output);
  }

  // required int32 UpdaterID = 36;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->updaterid(), output);
  }

  // required int64 CreateTime = 37;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->createtime(), output);
  }

  // required int64 UpdateTime = 38;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabDoorRegionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDoorRegionID = 1;
  if (has_cabdoorregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdoorregionid(), target);
  }

  // required int32 CabDoorSystemID = 2;
  if (has_cabdoorsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabdoorsystemid(), target);
  }

  // required int32 ParentCabRegionID = 3;
  if (has_parentcabregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parentcabregionid(), target);
  }

  // required int32 OrderCate = 4;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ordercate(), target);
  }

  // required int64 OrderID = 5;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->orderid(), target);
  }

  // required int32 DesignPlanID = 6;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->designplanid(), target);
  }

  // required int32 DoorSystemRegionID = 7;
  if (has_doorsystemregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->doorsystemregionid(), target);
  }

  // required int32 DoorSystemID = 8;
  if (has_doorsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->doorsystemid(), target);
  }

  // required int32 CabDesignDoorRegionID = 9;
  if (has_cabdesigndoorregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cabdesigndoorregionid(), target);
  }

  // required int32 CabDesignDoorSystemID = 10;
  if (has_cabdesigndoorsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cabdesigndoorsystemid(), target);
  }

  // required int32 CabDesignID = 11;
  if (has_cabdesignid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cabdesignid(), target);
  }

  // required int32 FactoryID = 12;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->factoryid(), target);
  }

  // required int64 VerCode = 13;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->vercode(), target);
  }

  // required bool IsUserDefineSize = 14;
  if (has_isuserdefinesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isuserdefinesize(), target);
  }

  // required bool IsUserDefinePos = 15;
  if (has_isuserdefinepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isuserdefinepos(), target);
  }

  // required int32 XDock = 16;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->xdock(), target);
  }

  // required int32 YDock = 17;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->ydock(), target);
  }

  // required int32 ZDock = 18;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->zdock(), target);
  }

  // required double XLen = 19;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->xlen(), target);
  }

  // required double YLen = 20;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->ylen(), target);
  }

  // required double ZLen = 21;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->zlen(), target);
  }

  // required double XAdjustLen = 22;
  if (has_xadjustlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->xadjustlen(), target);
  }

  // required double YAdjustLen = 23;
  if (has_yadjustlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->yadjustlen(), target);
  }

  // required double RealXLen = 24;
  if (has_realxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->realxlen(), target);
  }

  // required double RealYLen = 25;
  if (has_realylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->realylen(), target);
  }

  // required double RealZLen = 26;
  if (has_realzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->realzlen(), target);
  }

  // required double CutXLen = 27;
  if (has_cutxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->cutxlen(), target);
  }

  // required double CutYLen = 28;
  if (has_cutylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->cutylen(), target);
  }

  // required double XOffsetLen = 29;
  if (has_xoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->xoffsetlen(), target);
  }

  // required double YOffsetLen = 30;
  if (has_yoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->yoffsetlen(), target);
  }

  // required double ZOffsetLen = 31;
  if (has_zoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->zoffsetlen(), target);
  }

  // required double RealXOffsetLen = 32;
  if (has_realxoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->realxoffsetlen(), target);
  }

  // required double RealYOffsetLen = 33;
  if (has_realyoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->realyoffsetlen(), target);
  }

  // required double RealZOffsetLen = 34;
  if (has_realzoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->realzoffsetlen(), target);
  }

  // required int32 CreatorID = 35;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->creatorid(), target);
  }

  // required int32 UpdaterID = 36;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->updaterid(), target);
  }

  // required int64 CreateTime = 37;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->createtime(), target);
  }

  // required int64 UpdateTime = 38;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabDoorRegionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDoorRegionID = 1;
    if (has_cabdoorregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorregionid());
    }

    // required int32 CabDoorSystemID = 2;
    if (has_cabdoorsystemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorsystemid());
    }

    // required int32 ParentCabRegionID = 3;
    if (has_parentcabregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parentcabregionid());
    }

    // required int32 OrderCate = 4;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 5;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 6;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 DoorSystemRegionID = 7;
    if (has_doorsystemregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemregionid());
    }

    // required int32 DoorSystemID = 8;
    if (has_doorsystemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 CabDesignDoorRegionID = 9;
    if (has_cabdesigndoorregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesigndoorregionid());
    }

    // required int32 CabDesignDoorSystemID = 10;
    if (has_cabdesigndoorsystemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesigndoorsystemid());
    }

    // required int32 CabDesignID = 11;
    if (has_cabdesignid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignid());
    }

    // required int32 FactoryID = 12;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 13;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required bool IsUserDefineSize = 14;
    if (has_isuserdefinesize()) {
      total_size += 1 + 1;
    }

    // required bool IsUserDefinePos = 15;
    if (has_isuserdefinepos()) {
      total_size += 1 + 1;
    }

    // required int32 XDock = 16;
    if (has_xdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 YDock = 17;
    if (has_ydock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 18;
    if (has_zdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // required double XLen = 19;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 20;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 21;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required double XAdjustLen = 22;
    if (has_xadjustlen()) {
      total_size += 2 + 8;
    }

    // required double YAdjustLen = 23;
    if (has_yadjustlen()) {
      total_size += 2 + 8;
    }

    // required double RealXLen = 24;
    if (has_realxlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double RealYLen = 25;
    if (has_realylen()) {
      total_size += 2 + 8;
    }

    // required double RealZLen = 26;
    if (has_realzlen()) {
      total_size += 2 + 8;
    }

    // required double CutXLen = 27;
    if (has_cutxlen()) {
      total_size += 2 + 8;
    }

    // required double CutYLen = 28;
    if (has_cutylen()) {
      total_size += 2 + 8;
    }

    // required double XOffsetLen = 29;
    if (has_xoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double YOffsetLen = 30;
    if (has_yoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double ZOffsetLen = 31;
    if (has_zoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double RealXOffsetLen = 32;
    if (has_realxoffsetlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required double RealYOffsetLen = 33;
    if (has_realyoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double RealZOffsetLen = 34;
    if (has_realzoffsetlen()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 35;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 36;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 37;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 38;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabDoorRegionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabDoorRegionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabDoorRegionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabDoorRegionInfo::MergeFrom(const GC_CabDoorRegionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdoorregionid()) {
      set_cabdoorregionid(from.cabdoorregionid());
    }
    if (from.has_cabdoorsystemid()) {
      set_cabdoorsystemid(from.cabdoorsystemid());
    }
    if (from.has_parentcabregionid()) {
      set_parentcabregionid(from.parentcabregionid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_doorsystemregionid()) {
      set_doorsystemregionid(from.doorsystemregionid());
    }
    if (from.has_doorsystemid()) {
      set_doorsystemid(from.doorsystemid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cabdesigndoorregionid()) {
      set_cabdesigndoorregionid(from.cabdesigndoorregionid());
    }
    if (from.has_cabdesigndoorsystemid()) {
      set_cabdesigndoorsystemid(from.cabdesigndoorsystemid());
    }
    if (from.has_cabdesignid()) {
      set_cabdesignid(from.cabdesignid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_isuserdefinesize()) {
      set_isuserdefinesize(from.isuserdefinesize());
    }
    if (from.has_isuserdefinepos()) {
      set_isuserdefinepos(from.isuserdefinepos());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_xadjustlen()) {
      set_xadjustlen(from.xadjustlen());
    }
    if (from.has_yadjustlen()) {
      set_yadjustlen(from.yadjustlen());
    }
    if (from.has_realxlen()) {
      set_realxlen(from.realxlen());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_realylen()) {
      set_realylen(from.realylen());
    }
    if (from.has_realzlen()) {
      set_realzlen(from.realzlen());
    }
    if (from.has_cutxlen()) {
      set_cutxlen(from.cutxlen());
    }
    if (from.has_cutylen()) {
      set_cutylen(from.cutylen());
    }
    if (from.has_xoffsetlen()) {
      set_xoffsetlen(from.xoffsetlen());
    }
    if (from.has_yoffsetlen()) {
      set_yoffsetlen(from.yoffsetlen());
    }
    if (from.has_zoffsetlen()) {
      set_zoffsetlen(from.zoffsetlen());
    }
    if (from.has_realxoffsetlen()) {
      set_realxoffsetlen(from.realxoffsetlen());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_realyoffsetlen()) {
      set_realyoffsetlen(from.realyoffsetlen());
    }
    if (from.has_realzoffsetlen()) {
      set_realzoffsetlen(from.realzoffsetlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabDoorRegionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabDoorRegionInfo::CopyFrom(const GC_CabDoorRegionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabDoorRegionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GC_CabDoorRegionInfo::Swap(GC_CabDoorRegionInfo* other) {
  if (other != this) {
    std::swap(cabdoorregionid_, other->cabdoorregionid_);
    std::swap(cabdoorsystemid_, other->cabdoorsystemid_);
    std::swap(parentcabregionid_, other->parentcabregionid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(doorsystemregionid_, other->doorsystemregionid_);
    std::swap(doorsystemid_, other->doorsystemid_);
    std::swap(cabdesigndoorregionid_, other->cabdesigndoorregionid_);
    std::swap(cabdesigndoorsystemid_, other->cabdesigndoorsystemid_);
    std::swap(cabdesignid_, other->cabdesignid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(isuserdefinesize_, other->isuserdefinesize_);
    std::swap(isuserdefinepos_, other->isuserdefinepos_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(xadjustlen_, other->xadjustlen_);
    std::swap(yadjustlen_, other->yadjustlen_);
    std::swap(realxlen_, other->realxlen_);
    std::swap(realylen_, other->realylen_);
    std::swap(realzlen_, other->realzlen_);
    std::swap(cutxlen_, other->cutxlen_);
    std::swap(cutylen_, other->cutylen_);
    std::swap(xoffsetlen_, other->xoffsetlen_);
    std::swap(yoffsetlen_, other->yoffsetlen_);
    std::swap(zoffsetlen_, other->zoffsetlen_);
    std::swap(realxoffsetlen_, other->realxoffsetlen_);
    std::swap(realyoffsetlen_, other->realyoffsetlen_);
    std::swap(realzoffsetlen_, other->realzoffsetlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabDoorRegionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabDoorRegionInfo_descriptor_;
  metadata.reflection = GC_CabDoorRegionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabDoorSlideInfo::kCabDoorSlideIDFieldNumber;
const int GC_CabDoorSlideInfo::kCabDoorRegionIDFieldNumber;
const int GC_CabDoorSlideInfo::kOrderCateFieldNumber;
const int GC_CabDoorSlideInfo::kOrderIDFieldNumber;
const int GC_CabDoorSlideInfo::kDesignPlanIDFieldNumber;
const int GC_CabDoorSlideInfo::kDoorSystemRegionIDFieldNumber;
const int GC_CabDoorSlideInfo::kSlideIDFieldNumber;
const int GC_CabDoorSlideInfo::kGTypeIDFieldNumber;
const int GC_CabDoorSlideInfo::kFactoryIDFieldNumber;
const int GC_CabDoorSlideInfo::kVerCodeFieldNumber;
const int GC_CabDoorSlideInfo::kSlidePositionFieldNumber;
const int GC_CabDoorSlideInfo::kSupplyTypeFieldNumber;
const int GC_CabDoorSlideInfo::kXLenFieldNumber;
const int GC_CabDoorSlideInfo::kYLenFieldNumber;
const int GC_CabDoorSlideInfo::kZLenFieldNumber;
const int GC_CabDoorSlideInfo::kRealXLenFieldNumber;
const int GC_CabDoorSlideInfo::kRealYLenFieldNumber;
const int GC_CabDoorSlideInfo::kRealZLenFieldNumber;
const int GC_CabDoorSlideInfo::kXOffsetLenFieldNumber;
const int GC_CabDoorSlideInfo::kYOffsetLenFieldNumber;
const int GC_CabDoorSlideInfo::kZOffsetLenFieldNumber;
const int GC_CabDoorSlideInfo::kCreatorIDFieldNumber;
const int GC_CabDoorSlideInfo::kUpdaterIDFieldNumber;
const int GC_CabDoorSlideInfo::kCreateTimeFieldNumber;
const int GC_CabDoorSlideInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_CabDoorSlideInfo::GC_CabDoorSlideInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabDoorSlideInfo::InitAsDefaultInstance() {
}

GC_CabDoorSlideInfo::GC_CabDoorSlideInfo(const GC_CabDoorSlideInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabDoorSlideInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdoorslideid_ = 0;
  cabdoorregionid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  doorsystemregionid_ = 0;
  slideid_ = 0;
  gtypeid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  slideposition_ = 0;
  supplytype_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  realxlen_ = 0;
  realylen_ = 0;
  realzlen_ = 0;
  xoffsetlen_ = 0;
  yoffsetlen_ = 0;
  zoffsetlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabDoorSlideInfo::~GC_CabDoorSlideInfo() {
  SharedDtor();
}

void GC_CabDoorSlideInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabDoorSlideInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabDoorSlideInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabDoorSlideInfo_descriptor_;
}

const GC_CabDoorSlideInfo& GC_CabDoorSlideInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabDoorSlideInfo* GC_CabDoorSlideInfo::default_instance_ = NULL;

GC_CabDoorSlideInfo* GC_CabDoorSlideInfo::New() const {
  return new GC_CabDoorSlideInfo;
}

void GC_CabDoorSlideInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdoorslideid_ = 0;
    cabdoorregionid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    doorsystemregionid_ = 0;
    slideid_ = 0;
    gtypeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    slideposition_ = 0;
    supplytype_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    realxlen_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    realylen_ = 0;
    realzlen_ = 0;
    xoffsetlen_ = 0;
    yoffsetlen_ = 0;
    zoffsetlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabDoorSlideInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDoorSlideID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorslideid_)));
          set_has_cabdoorslideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabDoorRegionID;
        break;
      }

      // required int32 CabDoorRegionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDoorRegionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorregionid_)));
          set_has_cabdoorregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DoorSystemRegionID;
        break;
      }

      // required int32 DoorSystemRegionID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorSystemRegionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemregionid_)));
          set_has_doorsystemregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SlideID;
        break;
      }

      // required int32 SlideID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SlideID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slideid_)));
          set_has_slideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SlidePosition;
        break;
      }

      // required int32 SlidePosition = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SlidePosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slideposition_)));
          set_has_slideposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_XLen;
        break;
      }

      // required double XLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_YLen;
        break;
      }

      // required double YLen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_RealXLen;
        break;
      }

      // required double RealXLen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realxlen_)));
          set_has_realxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_RealYLen;
        break;
      }

      // required double RealYLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realylen_)));
          set_has_realylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_RealZLen;
        break;
      }

      // required double RealZLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realzlen_)));
          set_has_realzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_XOffsetLen;
        break;
      }

      // required double XOffsetLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffsetlen_)));
          set_has_xoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_YOffsetLen;
        break;
      }

      // required double YOffsetLen = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yoffsetlen_)));
          set_has_yoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_ZOffsetLen;
        break;
      }

      // required double ZOffsetLen = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoffsetlen_)));
          set_has_zoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabDoorSlideInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDoorSlideID = 1;
  if (has_cabdoorslideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdoorslideid(), output);
  }

  // required int32 CabDoorRegionID = 2;
  if (has_cabdoorregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabdoorregionid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 DoorSystemRegionID = 6;
  if (has_doorsystemregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->doorsystemregionid(), output);
  }

  // required int32 SlideID = 7;
  if (has_slideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->slideid(), output);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gtypeid(), output);
  }

  // required int32 FactoryID = 9;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->factoryid(), output);
  }

  // required int64 VerCode = 10;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->vercode(), output);
  }

  // required int32 SlidePosition = 11;
  if (has_slideposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->slideposition(), output);
  }

  // required int32 SupplyType = 12;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->supplytype(), output);
  }

  // required double XLen = 13;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->xlen(), output);
  }

  // required double YLen = 14;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->ylen(), output);
  }

  // required double ZLen = 15;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->zlen(), output);
  }

  // required double RealXLen = 16;
  if (has_realxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->realxlen(), output);
  }

  // required double RealYLen = 17;
  if (has_realylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->realylen(), output);
  }

  // required double RealZLen = 18;
  if (has_realzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->realzlen(), output);
  }

  // required double XOffsetLen = 19;
  if (has_xoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->xoffsetlen(), output);
  }

  // required double YOffsetLen = 20;
  if (has_yoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->yoffsetlen(), output);
  }

  // required double ZOffsetLen = 21;
  if (has_zoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->zoffsetlen(), output);
  }

  // required int32 CreatorID = 22;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->creatorid(), output);
  }

  // required int32 UpdaterID = 23;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->updaterid(), output);
  }

  // required int64 CreateTime = 24;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->createtime(), output);
  }

  // required int64 UpdateTime = 25;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabDoorSlideInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDoorSlideID = 1;
  if (has_cabdoorslideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdoorslideid(), target);
  }

  // required int32 CabDoorRegionID = 2;
  if (has_cabdoorregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabdoorregionid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 DoorSystemRegionID = 6;
  if (has_doorsystemregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->doorsystemregionid(), target);
  }

  // required int32 SlideID = 7;
  if (has_slideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->slideid(), target);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gtypeid(), target);
  }

  // required int32 FactoryID = 9;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->factoryid(), target);
  }

  // required int64 VerCode = 10;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->vercode(), target);
  }

  // required int32 SlidePosition = 11;
  if (has_slideposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->slideposition(), target);
  }

  // required int32 SupplyType = 12;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->supplytype(), target);
  }

  // required double XLen = 13;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->xlen(), target);
  }

  // required double YLen = 14;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->ylen(), target);
  }

  // required double ZLen = 15;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->zlen(), target);
  }

  // required double RealXLen = 16;
  if (has_realxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->realxlen(), target);
  }

  // required double RealYLen = 17;
  if (has_realylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->realylen(), target);
  }

  // required double RealZLen = 18;
  if (has_realzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->realzlen(), target);
  }

  // required double XOffsetLen = 19;
  if (has_xoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->xoffsetlen(), target);
  }

  // required double YOffsetLen = 20;
  if (has_yoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->yoffsetlen(), target);
  }

  // required double ZOffsetLen = 21;
  if (has_zoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->zoffsetlen(), target);
  }

  // required int32 CreatorID = 22;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->creatorid(), target);
  }

  // required int32 UpdaterID = 23;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->updaterid(), target);
  }

  // required int64 CreateTime = 24;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->createtime(), target);
  }

  // required int64 UpdateTime = 25;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabDoorSlideInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDoorSlideID = 1;
    if (has_cabdoorslideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorslideid());
    }

    // required int32 CabDoorRegionID = 2;
    if (has_cabdoorregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorregionid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 DoorSystemRegionID = 6;
    if (has_doorsystemregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemregionid());
    }

    // required int32 SlideID = 7;
    if (has_slideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slideid());
    }

    // required int32 GTypeID = 8;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 FactoryID = 9;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 10;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 SlidePosition = 11;
    if (has_slideposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slideposition());
    }

    // required int32 SupplyType = 12;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required double XLen = 13;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 14;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double ZLen = 15;
    if (has_zlen()) {
      total_size += 1 + 8;
    }

    // required double RealXLen = 16;
    if (has_realxlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double RealYLen = 17;
    if (has_realylen()) {
      total_size += 2 + 8;
    }

    // required double RealZLen = 18;
    if (has_realzlen()) {
      total_size += 2 + 8;
    }

    // required double XOffsetLen = 19;
    if (has_xoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double YOffsetLen = 20;
    if (has_yoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double ZOffsetLen = 21;
    if (has_zoffsetlen()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 22;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 23;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 24;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int64 UpdateTime = 25;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabDoorSlideInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabDoorSlideInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabDoorSlideInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabDoorSlideInfo::MergeFrom(const GC_CabDoorSlideInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdoorslideid()) {
      set_cabdoorslideid(from.cabdoorslideid());
    }
    if (from.has_cabdoorregionid()) {
      set_cabdoorregionid(from.cabdoorregionid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_doorsystemregionid()) {
      set_doorsystemregionid(from.doorsystemregionid());
    }
    if (from.has_slideid()) {
      set_slideid(from.slideid());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_slideposition()) {
      set_slideposition(from.slideposition());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_realxlen()) {
      set_realxlen(from.realxlen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_realylen()) {
      set_realylen(from.realylen());
    }
    if (from.has_realzlen()) {
      set_realzlen(from.realzlen());
    }
    if (from.has_xoffsetlen()) {
      set_xoffsetlen(from.xoffsetlen());
    }
    if (from.has_yoffsetlen()) {
      set_yoffsetlen(from.yoffsetlen());
    }
    if (from.has_zoffsetlen()) {
      set_zoffsetlen(from.zoffsetlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabDoorSlideInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabDoorSlideInfo::CopyFrom(const GC_CabDoorSlideInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabDoorSlideInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x01ffffff) != 0x01ffffff) return false;

  return true;
}

void GC_CabDoorSlideInfo::Swap(GC_CabDoorSlideInfo* other) {
  if (other != this) {
    std::swap(cabdoorslideid_, other->cabdoorslideid_);
    std::swap(cabdoorregionid_, other->cabdoorregionid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(doorsystemregionid_, other->doorsystemregionid_);
    std::swap(slideid_, other->slideid_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(slideposition_, other->slideposition_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(realxlen_, other->realxlen_);
    std::swap(realylen_, other->realylen_);
    std::swap(realzlen_, other->realzlen_);
    std::swap(xoffsetlen_, other->xoffsetlen_);
    std::swap(yoffsetlen_, other->yoffsetlen_);
    std::swap(zoffsetlen_, other->zoffsetlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabDoorSlideInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabDoorSlideInfo_descriptor_;
  metadata.reflection = GC_CabDoorSlideInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabDoorSystemInfo::kCabDoorSystemIDFieldNumber;
const int GC_CabDoorSystemInfo::kCabIDFieldNumber;
const int GC_CabDoorSystemInfo::kOrderCateFieldNumber;
const int GC_CabDoorSystemInfo::kOrderIDFieldNumber;
const int GC_CabDoorSystemInfo::kDesignPlanIDFieldNumber;
const int GC_CabDoorSystemInfo::kCabDesignDoorSystemIDFieldNumber;
const int GC_CabDoorSystemInfo::kCabDesignIDFieldNumber;
const int GC_CabDoorSystemInfo::kFactoryIDFieldNumber;
const int GC_CabDoorSystemInfo::kVerCodeFieldNumber;
const int GC_CabDoorSystemInfo::kDoorSystemIDFieldNumber;
const int GC_CabDoorSystemInfo::kDoorMatPlanIDFieldNumber;
const int GC_CabDoorSystemInfo::kSupplyTypeFieldNumber;
const int GC_CabDoorSystemInfo::kIsFakeDelFieldNumber;
const int GC_CabDoorSystemInfo::kXDockFieldNumber;
const int GC_CabDoorSystemInfo::kYDockFieldNumber;
const int GC_CabDoorSystemInfo::kZDockFieldNumber;
const int GC_CabDoorSystemInfo::kXLenFieldNumber;
const int GC_CabDoorSystemInfo::kYLenFieldNumber;
const int GC_CabDoorSystemInfo::kZLenFieldNumber;
const int GC_CabDoorSystemInfo::kXAdjustLenFieldNumber;
const int GC_CabDoorSystemInfo::kYAdjustLenFieldNumber;
const int GC_CabDoorSystemInfo::kRealXLenFieldNumber;
const int GC_CabDoorSystemInfo::kRealYLenFieldNumber;
const int GC_CabDoorSystemInfo::kRealZLenFieldNumber;
const int GC_CabDoorSystemInfo::kXOffsetLenFieldNumber;
const int GC_CabDoorSystemInfo::kYOffsetLenFieldNumber;
const int GC_CabDoorSystemInfo::kZOffsetLenFieldNumber;
const int GC_CabDoorSystemInfo::kRealXOffsetLenFieldNumber;
const int GC_CabDoorSystemInfo::kRealYOffsetLenFieldNumber;
const int GC_CabDoorSystemInfo::kRealZOffsetLenFieldNumber;
const int GC_CabDoorSystemInfo::kCreatorIDFieldNumber;
const int GC_CabDoorSystemInfo::kUpdaterIDFieldNumber;
const int GC_CabDoorSystemInfo::kCreateTimeFieldNumber;
const int GC_CabDoorSystemInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_CabDoorSystemInfo::GC_CabDoorSystemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabDoorSystemInfo::InitAsDefaultInstance() {
}

GC_CabDoorSystemInfo::GC_CabDoorSystemInfo(const GC_CabDoorSystemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabDoorSystemInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdoorsystemid_ = 0;
  cabid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  cabdesigndoorsystemid_ = 0;
  cabdesignid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  doorsystemid_ = 0;
  doormatplanid_ = 0;
  supplytype_ = 0;
  isfakedel_ = false;
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  xadjustlen_ = 0;
  yadjustlen_ = 0;
  realxlen_ = 0;
  realylen_ = 0;
  realzlen_ = 0;
  xoffsetlen_ = 0;
  yoffsetlen_ = 0;
  zoffsetlen_ = 0;
  realxoffsetlen_ = 0;
  realyoffsetlen_ = 0;
  realzoffsetlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabDoorSystemInfo::~GC_CabDoorSystemInfo() {
  SharedDtor();
}

void GC_CabDoorSystemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabDoorSystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabDoorSystemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabDoorSystemInfo_descriptor_;
}

const GC_CabDoorSystemInfo& GC_CabDoorSystemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabDoorSystemInfo* GC_CabDoorSystemInfo::default_instance_ = NULL;

GC_CabDoorSystemInfo* GC_CabDoorSystemInfo::New() const {
  return new GC_CabDoorSystemInfo;
}

void GC_CabDoorSystemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdoorsystemid_ = 0;
    cabid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    cabdesigndoorsystemid_ = 0;
    cabdesignid_ = 0;
    factoryid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    doorsystemid_ = 0;
    doormatplanid_ = 0;
    supplytype_ = 0;
    isfakedel_ = false;
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    xadjustlen_ = 0;
    yadjustlen_ = 0;
    realxlen_ = 0;
    realylen_ = 0;
    realzlen_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    xoffsetlen_ = 0;
    yoffsetlen_ = 0;
    zoffsetlen_ = 0;
    realxoffsetlen_ = 0;
    realyoffsetlen_ = 0;
    realzoffsetlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabDoorSystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDoorSystemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdoorsystemid_)));
          set_has_cabdoorsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabID;
        break;
      }

      // required int32 CabID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabid_)));
          set_has_cabid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CabDesignDoorSystemID;
        break;
      }

      // required int32 CabDesignDoorSystemID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignDoorSystemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesigndoorsystemid_)));
          set_has_cabdesigndoorsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CabDesignID;
        break;
      }

      // required int32 CabDesignID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignid_)));
          set_has_cabdesignid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_DoorSystemID;
        break;
      }

      // required int32 DoorSystemID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorSystemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemid_)));
          set_has_doorsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_DoorMatPlanID;
        break;
      }

      // required int32 DoorMatPlanID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doormatplanid_)));
          set_has_doormatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_IsFakeDel;
        break;
      }

      // required bool IsFakeDel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFakeDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfakedel_)));
          set_has_isfakedel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_XLen;
        break;
      }

      // required double XLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_YLen;
        break;
      }

      // required double YLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_XAdjustLen;
        break;
      }

      // required double XAdjustLen = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XAdjustLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xadjustlen_)));
          set_has_xadjustlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_YAdjustLen;
        break;
      }

      // required double YAdjustLen = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YAdjustLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yadjustlen_)));
          set_has_yadjustlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_RealXLen;
        break;
      }

      // required double RealXLen = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realxlen_)));
          set_has_realxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_RealYLen;
        break;
      }

      // required double RealYLen = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realylen_)));
          set_has_realylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_RealZLen;
        break;
      }

      // required double RealZLen = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realzlen_)));
          set_has_realzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_XOffsetLen;
        break;
      }

      // required double XOffsetLen = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffsetlen_)));
          set_has_xoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_YOffsetLen;
        break;
      }

      // required double YOffsetLen = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yoffsetlen_)));
          set_has_yoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_ZOffsetLen;
        break;
      }

      // required double ZOffsetLen = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoffsetlen_)));
          set_has_zoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_RealXOffsetLen;
        break;
      }

      // required double RealXOffsetLen = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealXOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realxoffsetlen_)));
          set_has_realxoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_RealYOffsetLen;
        break;
      }

      // required double RealYOffsetLen = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealYOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realyoffsetlen_)));
          set_has_realyoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_RealZOffsetLen;
        break;
      }

      // required double RealZOffsetLen = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realzoffsetlen_)));
          set_has_realzoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabDoorSystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDoorSystemID = 1;
  if (has_cabdoorsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdoorsystemid(), output);
  }

  // required int32 CabID = 2;
  if (has_cabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 CabDesignDoorSystemID = 6;
  if (has_cabdesigndoorsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cabdesigndoorsystemid(), output);
  }

  // required int32 CabDesignID = 7;
  if (has_cabdesignid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cabdesignid(), output);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->factoryid(), output);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vercode(), output);
  }

  // required int32 DoorSystemID = 10;
  if (has_doorsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->doorsystemid(), output);
  }

  // required int32 DoorMatPlanID = 11;
  if (has_doormatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->doormatplanid(), output);
  }

  // required int32 SupplyType = 12;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->supplytype(), output);
  }

  // required bool IsFakeDel = 13;
  if (has_isfakedel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isfakedel(), output);
  }

  // required int32 XDock = 14;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->xdock(), output);
  }

  // required int32 YDock = 15;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ydock(), output);
  }

  // required int32 ZDock = 16;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->zdock(), output);
  }

  // required double XLen = 17;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->xlen(), output);
  }

  // required double YLen = 18;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->ylen(), output);
  }

  // required double ZLen = 19;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->zlen(), output);
  }

  // required double XAdjustLen = 20;
  if (has_xadjustlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->xadjustlen(), output);
  }

  // required double YAdjustLen = 21;
  if (has_yadjustlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->yadjustlen(), output);
  }

  // required double RealXLen = 22;
  if (has_realxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->realxlen(), output);
  }

  // required double RealYLen = 23;
  if (has_realylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->realylen(), output);
  }

  // required double RealZLen = 24;
  if (has_realzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->realzlen(), output);
  }

  // required double XOffsetLen = 25;
  if (has_xoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->xoffsetlen(), output);
  }

  // required double YOffsetLen = 26;
  if (has_yoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->yoffsetlen(), output);
  }

  // required double ZOffsetLen = 27;
  if (has_zoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->zoffsetlen(), output);
  }

  // required double RealXOffsetLen = 28;
  if (has_realxoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->realxoffsetlen(), output);
  }

  // required double RealYOffsetLen = 29;
  if (has_realyoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->realyoffsetlen(), output);
  }

  // required double RealZOffsetLen = 30;
  if (has_realzoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->realzoffsetlen(), output);
  }

  // required int32 CreatorID = 31;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->creatorid(), output);
  }

  // required int32 UpdaterID = 32;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->updaterid(), output);
  }

  // required int64 CreateTime = 33;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->createtime(), output);
  }

  // required int64 UpdateTime = 34;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabDoorSystemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDoorSystemID = 1;
  if (has_cabdoorsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdoorsystemid(), target);
  }

  // required int32 CabID = 2;
  if (has_cabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 CabDesignDoorSystemID = 6;
  if (has_cabdesigndoorsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cabdesigndoorsystemid(), target);
  }

  // required int32 CabDesignID = 7;
  if (has_cabdesignid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cabdesignid(), target);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->factoryid(), target);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vercode(), target);
  }

  // required int32 DoorSystemID = 10;
  if (has_doorsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->doorsystemid(), target);
  }

  // required int32 DoorMatPlanID = 11;
  if (has_doormatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->doormatplanid(), target);
  }

  // required int32 SupplyType = 12;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->supplytype(), target);
  }

  // required bool IsFakeDel = 13;
  if (has_isfakedel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isfakedel(), target);
  }

  // required int32 XDock = 14;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->xdock(), target);
  }

  // required int32 YDock = 15;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ydock(), target);
  }

  // required int32 ZDock = 16;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->zdock(), target);
  }

  // required double XLen = 17;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->xlen(), target);
  }

  // required double YLen = 18;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->ylen(), target);
  }

  // required double ZLen = 19;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->zlen(), target);
  }

  // required double XAdjustLen = 20;
  if (has_xadjustlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->xadjustlen(), target);
  }

  // required double YAdjustLen = 21;
  if (has_yadjustlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->yadjustlen(), target);
  }

  // required double RealXLen = 22;
  if (has_realxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->realxlen(), target);
  }

  // required double RealYLen = 23;
  if (has_realylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->realylen(), target);
  }

  // required double RealZLen = 24;
  if (has_realzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->realzlen(), target);
  }

  // required double XOffsetLen = 25;
  if (has_xoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->xoffsetlen(), target);
  }

  // required double YOffsetLen = 26;
  if (has_yoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->yoffsetlen(), target);
  }

  // required double ZOffsetLen = 27;
  if (has_zoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->zoffsetlen(), target);
  }

  // required double RealXOffsetLen = 28;
  if (has_realxoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->realxoffsetlen(), target);
  }

  // required double RealYOffsetLen = 29;
  if (has_realyoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->realyoffsetlen(), target);
  }

  // required double RealZOffsetLen = 30;
  if (has_realzoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->realzoffsetlen(), target);
  }

  // required int32 CreatorID = 31;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->creatorid(), target);
  }

  // required int32 UpdaterID = 32;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->updaterid(), target);
  }

  // required int64 CreateTime = 33;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->createtime(), target);
  }

  // required int64 UpdateTime = 34;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabDoorSystemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDoorSystemID = 1;
    if (has_cabdoorsystemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdoorsystemid());
    }

    // required int32 CabID = 2;
    if (has_cabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 CabDesignDoorSystemID = 6;
    if (has_cabdesigndoorsystemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesigndoorsystemid());
    }

    // required int32 CabDesignID = 7;
    if (has_cabdesignid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignid());
    }

    // required int32 FactoryID = 8;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 VerCode = 9;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 DoorSystemID = 10;
    if (has_doorsystemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemid());
    }

    // required int32 DoorMatPlanID = 11;
    if (has_doormatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doormatplanid());
    }

    // required int32 SupplyType = 12;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required bool IsFakeDel = 13;
    if (has_isfakedel()) {
      total_size += 1 + 1;
    }

    // required int32 XDock = 14;
    if (has_xdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 15;
    if (has_ydock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 16;
    if (has_zdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double XLen = 17;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 18;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 19;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required double XAdjustLen = 20;
    if (has_xadjustlen()) {
      total_size += 2 + 8;
    }

    // required double YAdjustLen = 21;
    if (has_yadjustlen()) {
      total_size += 2 + 8;
    }

    // required double RealXLen = 22;
    if (has_realxlen()) {
      total_size += 2 + 8;
    }

    // required double RealYLen = 23;
    if (has_realylen()) {
      total_size += 2 + 8;
    }

    // required double RealZLen = 24;
    if (has_realzlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double XOffsetLen = 25;
    if (has_xoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double YOffsetLen = 26;
    if (has_yoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double ZOffsetLen = 27;
    if (has_zoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double RealXOffsetLen = 28;
    if (has_realxoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double RealYOffsetLen = 29;
    if (has_realyoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double RealZOffsetLen = 30;
    if (has_realzoffsetlen()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 31;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 32;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int64 CreateTime = 33;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 34;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabDoorSystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabDoorSystemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabDoorSystemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabDoorSystemInfo::MergeFrom(const GC_CabDoorSystemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdoorsystemid()) {
      set_cabdoorsystemid(from.cabdoorsystemid());
    }
    if (from.has_cabid()) {
      set_cabid(from.cabid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_cabdesigndoorsystemid()) {
      set_cabdesigndoorsystemid(from.cabdesigndoorsystemid());
    }
    if (from.has_cabdesignid()) {
      set_cabdesignid(from.cabdesignid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_doorsystemid()) {
      set_doorsystemid(from.doorsystemid());
    }
    if (from.has_doormatplanid()) {
      set_doormatplanid(from.doormatplanid());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_isfakedel()) {
      set_isfakedel(from.isfakedel());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_xadjustlen()) {
      set_xadjustlen(from.xadjustlen());
    }
    if (from.has_yadjustlen()) {
      set_yadjustlen(from.yadjustlen());
    }
    if (from.has_realxlen()) {
      set_realxlen(from.realxlen());
    }
    if (from.has_realylen()) {
      set_realylen(from.realylen());
    }
    if (from.has_realzlen()) {
      set_realzlen(from.realzlen());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_xoffsetlen()) {
      set_xoffsetlen(from.xoffsetlen());
    }
    if (from.has_yoffsetlen()) {
      set_yoffsetlen(from.yoffsetlen());
    }
    if (from.has_zoffsetlen()) {
      set_zoffsetlen(from.zoffsetlen());
    }
    if (from.has_realxoffsetlen()) {
      set_realxoffsetlen(from.realxoffsetlen());
    }
    if (from.has_realyoffsetlen()) {
      set_realyoffsetlen(from.realyoffsetlen());
    }
    if (from.has_realzoffsetlen()) {
      set_realzoffsetlen(from.realzoffsetlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabDoorSystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabDoorSystemInfo::CopyFrom(const GC_CabDoorSystemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabDoorSystemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_CabDoorSystemInfo::Swap(GC_CabDoorSystemInfo* other) {
  if (other != this) {
    std::swap(cabdoorsystemid_, other->cabdoorsystemid_);
    std::swap(cabid_, other->cabid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(cabdesigndoorsystemid_, other->cabdesigndoorsystemid_);
    std::swap(cabdesignid_, other->cabdesignid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(doorsystemid_, other->doorsystemid_);
    std::swap(doormatplanid_, other->doormatplanid_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(isfakedel_, other->isfakedel_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(xadjustlen_, other->xadjustlen_);
    std::swap(yadjustlen_, other->yadjustlen_);
    std::swap(realxlen_, other->realxlen_);
    std::swap(realylen_, other->realylen_);
    std::swap(realzlen_, other->realzlen_);
    std::swap(xoffsetlen_, other->xoffsetlen_);
    std::swap(yoffsetlen_, other->yoffsetlen_);
    std::swap(zoffsetlen_, other->zoffsetlen_);
    std::swap(realxoffsetlen_, other->realxoffsetlen_);
    std::swap(realyoffsetlen_, other->realyoffsetlen_);
    std::swap(realzoffsetlen_, other->realzoffsetlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabDoorSystemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabDoorSystemInfo_descriptor_;
  metadata.reflection = GC_CabDoorSystemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabFNFHWFInfo::kCabFNFHWFIDFieldNumber;
const int GC_CabFNFHWFInfo::kCabFNFIDFieldNumber;
const int GC_CabFNFHWFInfo::kOrderCateFieldNumber;
const int GC_CabFNFHWFInfo::kOrderIDFieldNumber;
const int GC_CabFNFHWFInfo::kDesignPlanIDFieldNumber;
const int GC_CabFNFHWFInfo::kFNFittingIDFieldNumber;
const int GC_CabFNFHWFInfo::kHWFittingIDFieldNumber;
const int GC_CabFNFHWFInfo::kFittingTypeFieldNumber;
const int GC_CabFNFHWFInfo::kFactoryIDFieldNumber;
const int GC_CabFNFHWFInfo::kVerCodeFieldNumber;
const int GC_CabFNFHWFInfo::kIsFakeDelFieldNumber;
const int GC_CabFNFHWFInfo::kUseCountFieldNumber;
const int GC_CabFNFHWFInfo::kCreatorIDFieldNumber;
const int GC_CabFNFHWFInfo::kUpdaterIDFieldNumber;
const int GC_CabFNFHWFInfo::kCreateTimeFieldNumber;
const int GC_CabFNFHWFInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_CabFNFHWFInfo::GC_CabFNFHWFInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabFNFHWFInfo::InitAsDefaultInstance() {
}

GC_CabFNFHWFInfo::GC_CabFNFHWFInfo(const GC_CabFNFHWFInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabFNFHWFInfo::SharedCtor() {
  _cached_size_ = 0;
  cabfnfhwfid_ = 0;
  cabfnfid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  fnfittingid_ = 0;
  hwfittingid_ = 0;
  fittingtype_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  isfakedel_ = 0;
  usecount_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabFNFHWFInfo::~GC_CabFNFHWFInfo() {
  SharedDtor();
}

void GC_CabFNFHWFInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabFNFHWFInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabFNFHWFInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabFNFHWFInfo_descriptor_;
}

const GC_CabFNFHWFInfo& GC_CabFNFHWFInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabFNFHWFInfo* GC_CabFNFHWFInfo::default_instance_ = NULL;

GC_CabFNFHWFInfo* GC_CabFNFHWFInfo::New() const {
  return new GC_CabFNFHWFInfo;
}

void GC_CabFNFHWFInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabfnfhwfid_ = 0;
    cabfnfid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    fnfittingid_ = 0;
    hwfittingid_ = 0;
    fittingtype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    isfakedel_ = 0;
    usecount_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabFNFHWFInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabFNFHWFID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabfnfhwfid_)));
          set_has_cabfnfhwfid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabFNFID;
        break;
      }

      // required int32 CabFNFID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabFNFID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabfnfid_)));
          set_has_cabfnfid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FNFittingID;
        break;
      }

      // required int32 FNFittingID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FNFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingid_)));
          set_has_fnfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_HWFittingID;
        break;
      }

      // required int32 HWFittingID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HWFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hwfittingid_)));
          set_has_hwfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FittingType;
        break;
      }

      // required int32 FittingType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FittingType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fittingtype_)));
          set_has_fittingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_IsFakeDel;
        break;
      }

      // required int32 IsFakeDel = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFakeDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfakedel_)));
          set_has_isfakedel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_UseCount;
        break;
      }

      // required int32 UseCount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usecount_)));
          set_has_usecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabFNFHWFInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabFNFHWFID = 1;
  if (has_cabfnfhwfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabfnfhwfid(), output);
  }

  // required int32 CabFNFID = 2;
  if (has_cabfnfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabfnfid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 FNFittingID = 6;
  if (has_fnfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fnfittingid(), output);
  }

  // required int32 HWFittingID = 7;
  if (has_hwfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hwfittingid(), output);
  }

  // required int32 FittingType = 8;
  if (has_fittingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fittingtype(), output);
  }

  // required int32 FactoryID = 9;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->factoryid(), output);
  }

  // required int64 VerCode = 10;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->vercode(), output);
  }

  // required int32 IsFakeDel = 11;
  if (has_isfakedel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->isfakedel(), output);
  }

  // required int32 UseCount = 12;
  if (has_usecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->usecount(), output);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->creatorid(), output);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->updaterid(), output);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->createtime(), output);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabFNFHWFInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabFNFHWFID = 1;
  if (has_cabfnfhwfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabfnfhwfid(), target);
  }

  // required int32 CabFNFID = 2;
  if (has_cabfnfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabfnfid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 FNFittingID = 6;
  if (has_fnfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fnfittingid(), target);
  }

  // required int32 HWFittingID = 7;
  if (has_hwfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hwfittingid(), target);
  }

  // required int32 FittingType = 8;
  if (has_fittingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fittingtype(), target);
  }

  // required int32 FactoryID = 9;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->factoryid(), target);
  }

  // required int64 VerCode = 10;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->vercode(), target);
  }

  // required int32 IsFakeDel = 11;
  if (has_isfakedel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->isfakedel(), target);
  }

  // required int32 UseCount = 12;
  if (has_usecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->usecount(), target);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->creatorid(), target);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->updaterid(), target);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->createtime(), target);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabFNFHWFInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabFNFHWFID = 1;
    if (has_cabfnfhwfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabfnfhwfid());
    }

    // required int32 CabFNFID = 2;
    if (has_cabfnfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabfnfid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 FNFittingID = 6;
    if (has_fnfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingid());
    }

    // required int32 HWFittingID = 7;
    if (has_hwfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hwfittingid());
    }

    // required int32 FittingType = 8;
    if (has_fittingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fittingtype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 FactoryID = 9;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 10;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 IsFakeDel = 11;
    if (has_isfakedel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfakedel());
    }

    // required int32 UseCount = 12;
    if (has_usecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usecount());
    }

    // required int32 CreatorID = 13;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 14;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 15;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 16;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabFNFHWFInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabFNFHWFInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabFNFHWFInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabFNFHWFInfo::MergeFrom(const GC_CabFNFHWFInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabfnfhwfid()) {
      set_cabfnfhwfid(from.cabfnfhwfid());
    }
    if (from.has_cabfnfid()) {
      set_cabfnfid(from.cabfnfid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_fnfittingid()) {
      set_fnfittingid(from.fnfittingid());
    }
    if (from.has_hwfittingid()) {
      set_hwfittingid(from.hwfittingid());
    }
    if (from.has_fittingtype()) {
      set_fittingtype(from.fittingtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_isfakedel()) {
      set_isfakedel(from.isfakedel());
    }
    if (from.has_usecount()) {
      set_usecount(from.usecount());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabFNFHWFInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabFNFHWFInfo::CopyFrom(const GC_CabFNFHWFInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabFNFHWFInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void GC_CabFNFHWFInfo::Swap(GC_CabFNFHWFInfo* other) {
  if (other != this) {
    std::swap(cabfnfhwfid_, other->cabfnfhwfid_);
    std::swap(cabfnfid_, other->cabfnfid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(fnfittingid_, other->fnfittingid_);
    std::swap(hwfittingid_, other->hwfittingid_);
    std::swap(fittingtype_, other->fittingtype_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(isfakedel_, other->isfakedel_);
    std::swap(usecount_, other->usecount_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabFNFHWFInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabFNFHWFInfo_descriptor_;
  metadata.reflection = GC_CabFNFHWFInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabFNFHoleInfo::kCabFNFHoleIDFieldNumber;
const int GC_CabFNFHoleInfo::kCabFNFIDFieldNumber;
const int GC_CabFNFHoleInfo::kOrderCateFieldNumber;
const int GC_CabFNFHoleInfo::kOrderIDFieldNumber;
const int GC_CabFNFHoleInfo::kDesignPlanIDFieldNumber;
const int GC_CabFNFHoleInfo::kHoleIDFieldNumber;
const int GC_CabFNFHoleInfo::kFNFittingIDFieldNumber;
const int GC_CabFNFHoleInfo::kFactoryIDFieldNumber;
const int GC_CabFNFHoleInfo::kVerCodeFieldNumber;
const int GC_CabFNFHoleInfo::kHoleTypeIDFieldNumber;
const int GC_CabFNFHoleInfo::kHolePicIDFieldNumber;
const int GC_CabFNFHoleInfo::kXLenFieldNumber;
const int GC_CabFNFHoleInfo::kYLenFieldNumber;
const int GC_CabFNFHoleInfo::kOverHeightFieldNumber;
const int GC_CabFNFHoleInfo::kMinXDistanceFieldNumber;
const int GC_CabFNFHoleInfo::kMinZDistanceFieldNumber;
#endif  // !_MSC_VER

GC_CabFNFHoleInfo::GC_CabFNFHoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabFNFHoleInfo::InitAsDefaultInstance() {
}

GC_CabFNFHoleInfo::GC_CabFNFHoleInfo(const GC_CabFNFHoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabFNFHoleInfo::SharedCtor() {
  _cached_size_ = 0;
  cabfnfholeid_ = 0;
  cabfnfid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  holeid_ = 0;
  fnfittingid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  holetypeid_ = 0;
  holepicid_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  overheight_ = 0;
  minxdistance_ = 0;
  minzdistance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabFNFHoleInfo::~GC_CabFNFHoleInfo() {
  SharedDtor();
}

void GC_CabFNFHoleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabFNFHoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabFNFHoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabFNFHoleInfo_descriptor_;
}

const GC_CabFNFHoleInfo& GC_CabFNFHoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabFNFHoleInfo* GC_CabFNFHoleInfo::default_instance_ = NULL;

GC_CabFNFHoleInfo* GC_CabFNFHoleInfo::New() const {
  return new GC_CabFNFHoleInfo;
}

void GC_CabFNFHoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabfnfholeid_ = 0;
    cabfnfid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    holeid_ = 0;
    fnfittingid_ = 0;
    factoryid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    holetypeid_ = 0;
    holepicid_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    overheight_ = 0;
    minxdistance_ = 0;
    minzdistance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabFNFHoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabFNFHoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabfnfholeid_)));
          set_has_cabfnfholeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabFNFID;
        break;
      }

      // required int32 CabFNFID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabFNFID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabfnfid_)));
          set_has_cabfnfid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_HoleID;
        break;
      }

      // required int32 HoleID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holeid_)));
          set_has_holeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FNFittingID;
        break;
      }

      // required int32 FNFittingID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FNFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingid_)));
          set_has_fnfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_HoleTypeID;
        break;
      }

      // required int32 HoleTypeID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HoleTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holetypeid_)));
          set_has_holetypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_HolePicID;
        break;
      }

      // required int32 HolePicID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HolePicID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holepicid_)));
          set_has_holepicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_XLen;
        break;
      }

      // required double XLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_YLen;
        break;
      }

      // required double YLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_OverHeight;
        break;
      }

      // required double OverHeight = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OverHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &overheight_)));
          set_has_overheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_MinXDistance;
        break;
      }

      // required double MinXDistance = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinXDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minxdistance_)));
          set_has_minxdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_MinZDistance;
        break;
      }

      // required double MinZDistance = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinZDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minzdistance_)));
          set_has_minzdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabFNFHoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabFNFHoleID = 1;
  if (has_cabfnfholeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabfnfholeid(), output);
  }

  // required int32 CabFNFID = 2;
  if (has_cabfnfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabfnfid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 HoleID = 6;
  if (has_holeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->holeid(), output);
  }

  // required int32 FNFittingID = 7;
  if (has_fnfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fnfittingid(), output);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->factoryid(), output);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vercode(), output);
  }

  // required int32 HoleTypeID = 10;
  if (has_holetypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->holetypeid(), output);
  }

  // required int32 HolePicID = 11;
  if (has_holepicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->holepicid(), output);
  }

  // required double XLen = 12;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->xlen(), output);
  }

  // required double YLen = 13;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->ylen(), output);
  }

  // required double OverHeight = 14;
  if (has_overheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->overheight(), output);
  }

  // required double MinXDistance = 15;
  if (has_minxdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->minxdistance(), output);
  }

  // required double MinZDistance = 16;
  if (has_minzdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->minzdistance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabFNFHoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabFNFHoleID = 1;
  if (has_cabfnfholeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabfnfholeid(), target);
  }

  // required int32 CabFNFID = 2;
  if (has_cabfnfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabfnfid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 HoleID = 6;
  if (has_holeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->holeid(), target);
  }

  // required int32 FNFittingID = 7;
  if (has_fnfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fnfittingid(), target);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->factoryid(), target);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vercode(), target);
  }

  // required int32 HoleTypeID = 10;
  if (has_holetypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->holetypeid(), target);
  }

  // required int32 HolePicID = 11;
  if (has_holepicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->holepicid(), target);
  }

  // required double XLen = 12;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->xlen(), target);
  }

  // required double YLen = 13;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->ylen(), target);
  }

  // required double OverHeight = 14;
  if (has_overheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->overheight(), target);
  }

  // required double MinXDistance = 15;
  if (has_minxdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->minxdistance(), target);
  }

  // required double MinZDistance = 16;
  if (has_minzdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->minzdistance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabFNFHoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabFNFHoleID = 1;
    if (has_cabfnfholeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabfnfholeid());
    }

    // required int32 CabFNFID = 2;
    if (has_cabfnfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabfnfid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 HoleID = 6;
    if (has_holeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holeid());
    }

    // required int32 FNFittingID = 7;
    if (has_fnfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingid());
    }

    // required int32 FactoryID = 8;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 VerCode = 9;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 HoleTypeID = 10;
    if (has_holetypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holetypeid());
    }

    // required int32 HolePicID = 11;
    if (has_holepicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holepicid());
    }

    // required double XLen = 12;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 13;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double OverHeight = 14;
    if (has_overheight()) {
      total_size += 1 + 8;
    }

    // required double MinXDistance = 15;
    if (has_minxdistance()) {
      total_size += 1 + 8;
    }

    // required double MinZDistance = 16;
    if (has_minzdistance()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabFNFHoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabFNFHoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabFNFHoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabFNFHoleInfo::MergeFrom(const GC_CabFNFHoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabfnfholeid()) {
      set_cabfnfholeid(from.cabfnfholeid());
    }
    if (from.has_cabfnfid()) {
      set_cabfnfid(from.cabfnfid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_holeid()) {
      set_holeid(from.holeid());
    }
    if (from.has_fnfittingid()) {
      set_fnfittingid(from.fnfittingid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_holetypeid()) {
      set_holetypeid(from.holetypeid());
    }
    if (from.has_holepicid()) {
      set_holepicid(from.holepicid());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_overheight()) {
      set_overheight(from.overheight());
    }
    if (from.has_minxdistance()) {
      set_minxdistance(from.minxdistance());
    }
    if (from.has_minzdistance()) {
      set_minzdistance(from.minzdistance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabFNFHoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabFNFHoleInfo::CopyFrom(const GC_CabFNFHoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabFNFHoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void GC_CabFNFHoleInfo::Swap(GC_CabFNFHoleInfo* other) {
  if (other != this) {
    std::swap(cabfnfholeid_, other->cabfnfholeid_);
    std::swap(cabfnfid_, other->cabfnfid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(holeid_, other->holeid_);
    std::swap(fnfittingid_, other->fnfittingid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(holetypeid_, other->holetypeid_);
    std::swap(holepicid_, other->holepicid_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(overheight_, other->overheight_);
    std::swap(minxdistance_, other->minxdistance_);
    std::swap(minzdistance_, other->minzdistance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabFNFHoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabFNFHoleInfo_descriptor_;
  metadata.reflection = GC_CabFNFHoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabFNFInfo::kCabFNFIDFieldNumber;
const int GC_CabFNFInfo::kDesignOwnerIDFieldNumber;
const int GC_CabFNFInfo::kDesignOwnerGTypeIDFieldNumber;
const int GC_CabFNFInfo::kOrderCateFieldNumber;
const int GC_CabFNFInfo::kDesignPlanIDFieldNumber;
const int GC_CabFNFInfo::kOrderIDFieldNumber;
const int GC_CabFNFInfo::kContainerIDFieldNumber;
const int GC_CabFNFInfo::kContainerGTypeIDFieldNumber;
const int GC_CabFNFInfo::kCabDesignFNFittingIDFieldNumber;
const int GC_CabFNFInfo::kFNFittingIDFieldNumber;
const int GC_CabFNFInfo::kFactoryIDFieldNumber;
const int GC_CabFNFInfo::kVerCodeFieldNumber;
const int GC_CabFNFInfo::kDockObjIDFieldNumber;
const int GC_CabFNFInfo::kDockObjTypeFieldNumber;
const int GC_CabFNFInfo::kDockXPosFieldNumber;
const int GC_CabFNFInfo::kDockYPosFieldNumber;
const int GC_CabFNFInfo::kHasMarkFieldNumber;
const int GC_CabFNFInfo::kIsFakeDelFieldNumber;
const int GC_CabFNFInfo::kIsVisibleFieldNumber;
const int GC_CabFNFInfo::kIsLockedFieldNumber;
const int GC_CabFNFInfo::kMaterialIDFieldNumber;
const int GC_CabFNFInfo::kSupplyTypeFieldNumber;
const int GC_CabFNFInfo::kGTypeIDFieldNumber;
const int GC_CabFNFInfo::kXDockFieldNumber;
const int GC_CabFNFInfo::kYDockFieldNumber;
const int GC_CabFNFInfo::kZDockFieldNumber;
const int GC_CabFNFInfo::kXLenFieldNumber;
const int GC_CabFNFInfo::kYLenFieldNumber;
const int GC_CabFNFInfo::kZLenFieldNumber;
const int GC_CabFNFInfo::kRealXLenFieldNumber;
const int GC_CabFNFInfo::kRealYLenFieldNumber;
const int GC_CabFNFInfo::kRealZLenFieldNumber;
const int GC_CabFNFInfo::kXOffsetLenFieldNumber;
const int GC_CabFNFInfo::kYOffsetLenFieldNumber;
const int GC_CabFNFInfo::kZOffsetLenFieldNumber;
const int GC_CabFNFInfo::kYPosFieldNumber;
const int GC_CabFNFInfo::kCreatorIDFieldNumber;
const int GC_CabFNFInfo::kUpdaterIDFieldNumber;
const int GC_CabFNFInfo::kCreateTimeFieldNumber;
const int GC_CabFNFInfo::kUpdateTimeFieldNumber;
const int GC_CabFNFInfo::kUserMemoFieldNumber;
#endif  // !_MSC_VER

GC_CabFNFInfo::GC_CabFNFInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabFNFInfo::InitAsDefaultInstance() {
}

GC_CabFNFInfo::GC_CabFNFInfo(const GC_CabFNFInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabFNFInfo::SharedCtor() {
  _cached_size_ = 0;
  cabfnfid_ = 0;
  designownerid_ = 0;
  designownergtypeid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  containerid_ = 0;
  containergtypeid_ = 0;
  cabdesignfnfittingid_ = 0;
  fnfittingid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  dockobjid_ = 0;
  dockobjtype_ = 0;
  dockxpos_ = 0;
  dockypos_ = 0;
  hasmark_ = false;
  isfakedel_ = false;
  isvisible_ = false;
  islocked_ = false;
  materialid_ = 0;
  supplytype_ = 0;
  gtypeid_ = 0;
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  realxlen_ = 0;
  realylen_ = 0;
  realzlen_ = 0;
  xoffsetlen_ = 0;
  yoffsetlen_ = 0;
  zoffsetlen_ = 0;
  ypos_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  usermemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabFNFInfo::~GC_CabFNFInfo() {
  SharedDtor();
}

void GC_CabFNFInfo::SharedDtor() {
  if (usermemo_ != &::google::protobuf::internal::kEmptyString) {
    delete usermemo_;
  }
  if (this != default_instance_) {
  }
}

void GC_CabFNFInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabFNFInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabFNFInfo_descriptor_;
}

const GC_CabFNFInfo& GC_CabFNFInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabFNFInfo* GC_CabFNFInfo::default_instance_ = NULL;

GC_CabFNFInfo* GC_CabFNFInfo::New() const {
  return new GC_CabFNFInfo;
}

void GC_CabFNFInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabfnfid_ = 0;
    designownerid_ = 0;
    designownergtypeid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    containerid_ = 0;
    containergtypeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cabdesignfnfittingid_ = 0;
    fnfittingid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    dockobjid_ = 0;
    dockobjtype_ = 0;
    dockxpos_ = 0;
    dockypos_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    hasmark_ = false;
    isfakedel_ = false;
    isvisible_ = false;
    islocked_ = false;
    materialid_ = 0;
    supplytype_ = 0;
    gtypeid_ = 0;
    xdock_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ydock_ = 0;
    zdock_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    realxlen_ = 0;
    realylen_ = 0;
    realzlen_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    xoffsetlen_ = 0;
    yoffsetlen_ = 0;
    zoffsetlen_ = 0;
    ypos_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_usermemo()) {
      if (usermemo_ != &::google::protobuf::internal::kEmptyString) {
        usermemo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabFNFInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabFNFID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabfnfid_)));
          set_has_cabfnfid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DesignOwnerID;
        break;
      }

      // required int32 DesignOwnerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignOwnerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designownerid_)));
          set_has_designownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignOwnerGTypeID;
        break;
      }

      // required int32 DesignOwnerGTypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignOwnerGTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designownergtypeid_)));
          set_has_designownergtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ContainerID;
        break;
      }

      // required int32 ContainerID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ContainerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &containerid_)));
          set_has_containerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ContainerGTypeID;
        break;
      }

      // required int32 ContainerGTypeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ContainerGTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &containergtypeid_)));
          set_has_containergtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CabDesignFNFittingID;
        break;
      }

      // required int32 CabDesignFNFittingID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignFNFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignfnfittingid_)));
          set_has_cabdesignfnfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_FNFittingID;
        break;
      }

      // required int32 FNFittingID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FNFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingid_)));
          set_has_fnfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_DockObjID;
        break;
      }

      // required int32 DockObjID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjid_)));
          set_has_dockobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_DockObjType;
        break;
      }

      // required int32 DockObjType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjtype_)));
          set_has_dockobjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_DockXPos;
        break;
      }

      // required double DockXPos = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockXPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockxpos_)));
          set_has_dockxpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_DockYPos;
        break;
      }

      // required double DockYPos = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockYPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockypos_)));
          set_has_dockypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_HasMark;
        break;
      }

      // required bool HasMark = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmark_)));
          set_has_hasmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_IsFakeDel;
        break;
      }

      // required bool IsFakeDel = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFakeDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfakedel_)));
          set_has_isfakedel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_XLen;
        break;
      }

      // required double XLen = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_YLen;
        break;
      }

      // required double YLen = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_RealXLen;
        break;
      }

      // required double RealXLen = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realxlen_)));
          set_has_realxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_RealYLen;
        break;
      }

      // required double RealYLen = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realylen_)));
          set_has_realylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_RealZLen;
        break;
      }

      // required double RealZLen = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realzlen_)));
          set_has_realzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_XOffsetLen;
        break;
      }

      // required double XOffsetLen = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffsetlen_)));
          set_has_xoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(273)) goto parse_YOffsetLen;
        break;
      }

      // required double YOffsetLen = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yoffsetlen_)));
          set_has_yoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(281)) goto parse_ZOffsetLen;
        break;
      }

      // required double ZOffsetLen = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoffsetlen_)));
          set_has_zoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(289)) goto parse_YPos;
        break;
      }

      // required double YPos = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_UserMemo;
        break;
      }

      // required string UserMemo = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usermemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usermemo().data(), this->usermemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabFNFInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabFNFID = 1;
  if (has_cabfnfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabfnfid(), output);
  }

  // required int32 DesignOwnerID = 2;
  if (has_designownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->designownerid(), output);
  }

  // required int32 DesignOwnerGTypeID = 3;
  if (has_designownergtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designownergtypeid(), output);
  }

  // required int32 OrderCate = 4;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int64 OrderID = 6;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->orderid(), output);
  }

  // required int32 ContainerID = 7;
  if (has_containerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->containerid(), output);
  }

  // required int32 ContainerGTypeID = 8;
  if (has_containergtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->containergtypeid(), output);
  }

  // required int32 CabDesignFNFittingID = 9;
  if (has_cabdesignfnfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cabdesignfnfittingid(), output);
  }

  // required int32 FNFittingID = 10;
  if (has_fnfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fnfittingid(), output);
  }

  // required int32 FactoryID = 11;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->factoryid(), output);
  }

  // required int64 VerCode = 12;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->vercode(), output);
  }

  // required int32 DockObjID = 13;
  if (has_dockobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->dockobjid(), output);
  }

  // required int32 DockObjType = 14;
  if (has_dockobjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->dockobjtype(), output);
  }

  // required double DockXPos = 15;
  if (has_dockxpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->dockxpos(), output);
  }

  // required double DockYPos = 16;
  if (has_dockypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->dockypos(), output);
  }

  // required bool HasMark = 17;
  if (has_hasmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->hasmark(), output);
  }

  // required bool IsFakeDel = 18;
  if (has_isfakedel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->isfakedel(), output);
  }

  // required bool IsVisible = 19;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isvisible(), output);
  }

  // required bool IsLocked = 20;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->islocked(), output);
  }

  // required int32 MaterialID = 21;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->materialid(), output);
  }

  // required int32 SupplyType = 22;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->supplytype(), output);
  }

  // required int32 GTypeID = 23;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->gtypeid(), output);
  }

  // required int32 XDock = 24;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->xdock(), output);
  }

  // required int32 YDock = 25;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->ydock(), output);
  }

  // required int32 ZDock = 26;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->zdock(), output);
  }

  // required double XLen = 27;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->xlen(), output);
  }

  // required double YLen = 28;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->ylen(), output);
  }

  // required double ZLen = 29;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->zlen(), output);
  }

  // required double RealXLen = 30;
  if (has_realxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->realxlen(), output);
  }

  // required double RealYLen = 31;
  if (has_realylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->realylen(), output);
  }

  // required double RealZLen = 32;
  if (has_realzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->realzlen(), output);
  }

  // required double XOffsetLen = 33;
  if (has_xoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->xoffsetlen(), output);
  }

  // required double YOffsetLen = 34;
  if (has_yoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->yoffsetlen(), output);
  }

  // required double ZOffsetLen = 35;
  if (has_zoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->zoffsetlen(), output);
  }

  // required double YPos = 36;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->ypos(), output);
  }

  // required int32 CreatorID = 37;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->creatorid(), output);
  }

  // required int32 UpdaterID = 38;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->updaterid(), output);
  }

  // required int64 CreateTime = 39;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->createtime(), output);
  }

  // required int64 UpdateTime = 40;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->updatetime(), output);
  }

  // required string UserMemo = 41;
  if (has_usermemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usermemo().data(), this->usermemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->usermemo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabFNFInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabFNFID = 1;
  if (has_cabfnfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabfnfid(), target);
  }

  // required int32 DesignOwnerID = 2;
  if (has_designownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->designownerid(), target);
  }

  // required int32 DesignOwnerGTypeID = 3;
  if (has_designownergtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designownergtypeid(), target);
  }

  // required int32 OrderCate = 4;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int64 OrderID = 6;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->orderid(), target);
  }

  // required int32 ContainerID = 7;
  if (has_containerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->containerid(), target);
  }

  // required int32 ContainerGTypeID = 8;
  if (has_containergtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->containergtypeid(), target);
  }

  // required int32 CabDesignFNFittingID = 9;
  if (has_cabdesignfnfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cabdesignfnfittingid(), target);
  }

  // required int32 FNFittingID = 10;
  if (has_fnfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fnfittingid(), target);
  }

  // required int32 FactoryID = 11;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->factoryid(), target);
  }

  // required int64 VerCode = 12;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->vercode(), target);
  }

  // required int32 DockObjID = 13;
  if (has_dockobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->dockobjid(), target);
  }

  // required int32 DockObjType = 14;
  if (has_dockobjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->dockobjtype(), target);
  }

  // required double DockXPos = 15;
  if (has_dockxpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->dockxpos(), target);
  }

  // required double DockYPos = 16;
  if (has_dockypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->dockypos(), target);
  }

  // required bool HasMark = 17;
  if (has_hasmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->hasmark(), target);
  }

  // required bool IsFakeDel = 18;
  if (has_isfakedel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->isfakedel(), target);
  }

  // required bool IsVisible = 19;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isvisible(), target);
  }

  // required bool IsLocked = 20;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->islocked(), target);
  }

  // required int32 MaterialID = 21;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->materialid(), target);
  }

  // required int32 SupplyType = 22;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->supplytype(), target);
  }

  // required int32 GTypeID = 23;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->gtypeid(), target);
  }

  // required int32 XDock = 24;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->xdock(), target);
  }

  // required int32 YDock = 25;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->ydock(), target);
  }

  // required int32 ZDock = 26;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->zdock(), target);
  }

  // required double XLen = 27;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->xlen(), target);
  }

  // required double YLen = 28;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->ylen(), target);
  }

  // required double ZLen = 29;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->zlen(), target);
  }

  // required double RealXLen = 30;
  if (has_realxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->realxlen(), target);
  }

  // required double RealYLen = 31;
  if (has_realylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->realylen(), target);
  }

  // required double RealZLen = 32;
  if (has_realzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->realzlen(), target);
  }

  // required double XOffsetLen = 33;
  if (has_xoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->xoffsetlen(), target);
  }

  // required double YOffsetLen = 34;
  if (has_yoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->yoffsetlen(), target);
  }

  // required double ZOffsetLen = 35;
  if (has_zoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->zoffsetlen(), target);
  }

  // required double YPos = 36;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->ypos(), target);
  }

  // required int32 CreatorID = 37;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->creatorid(), target);
  }

  // required int32 UpdaterID = 38;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->updaterid(), target);
  }

  // required int64 CreateTime = 39;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->createtime(), target);
  }

  // required int64 UpdateTime = 40;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->updatetime(), target);
  }

  // required string UserMemo = 41;
  if (has_usermemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usermemo().data(), this->usermemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->usermemo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabFNFInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabFNFID = 1;
    if (has_cabfnfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabfnfid());
    }

    // required int32 DesignOwnerID = 2;
    if (has_designownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designownerid());
    }

    // required int32 DesignOwnerGTypeID = 3;
    if (has_designownergtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designownergtypeid());
    }

    // required int32 OrderCate = 4;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 6;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 ContainerID = 7;
    if (has_containerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->containerid());
    }

    // required int32 ContainerGTypeID = 8;
    if (has_containergtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->containergtypeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 CabDesignFNFittingID = 9;
    if (has_cabdesignfnfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignfnfittingid());
    }

    // required int32 FNFittingID = 10;
    if (has_fnfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingid());
    }

    // required int32 FactoryID = 11;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 12;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 DockObjID = 13;
    if (has_dockobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjid());
    }

    // required int32 DockObjType = 14;
    if (has_dockobjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjtype());
    }

    // required double DockXPos = 15;
    if (has_dockxpos()) {
      total_size += 1 + 8;
    }

    // required double DockYPos = 16;
    if (has_dockypos()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bool HasMark = 17;
    if (has_hasmark()) {
      total_size += 2 + 1;
    }

    // required bool IsFakeDel = 18;
    if (has_isfakedel()) {
      total_size += 2 + 1;
    }

    // required bool IsVisible = 19;
    if (has_isvisible()) {
      total_size += 2 + 1;
    }

    // required bool IsLocked = 20;
    if (has_islocked()) {
      total_size += 2 + 1;
    }

    // required int32 MaterialID = 21;
    if (has_materialid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required int32 SupplyType = 22;
    if (has_supplytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 GTypeID = 23;
    if (has_gtypeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required int32 XDock = 24;
    if (has_xdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 YDock = 25;
    if (has_ydock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 26;
    if (has_zdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // required double XLen = 27;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 28;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 29;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required double RealXLen = 30;
    if (has_realxlen()) {
      total_size += 2 + 8;
    }

    // required double RealYLen = 31;
    if (has_realylen()) {
      total_size += 2 + 8;
    }

    // required double RealZLen = 32;
    if (has_realzlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required double XOffsetLen = 33;
    if (has_xoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double YOffsetLen = 34;
    if (has_yoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double ZOffsetLen = 35;
    if (has_zoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double YPos = 36;
    if (has_ypos()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 37;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 38;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 39;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 40;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required string UserMemo = 41;
    if (has_usermemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usermemo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabFNFInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabFNFInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabFNFInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabFNFInfo::MergeFrom(const GC_CabFNFInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabfnfid()) {
      set_cabfnfid(from.cabfnfid());
    }
    if (from.has_designownerid()) {
      set_designownerid(from.designownerid());
    }
    if (from.has_designownergtypeid()) {
      set_designownergtypeid(from.designownergtypeid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_containerid()) {
      set_containerid(from.containerid());
    }
    if (from.has_containergtypeid()) {
      set_containergtypeid(from.containergtypeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cabdesignfnfittingid()) {
      set_cabdesignfnfittingid(from.cabdesignfnfittingid());
    }
    if (from.has_fnfittingid()) {
      set_fnfittingid(from.fnfittingid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_dockobjid()) {
      set_dockobjid(from.dockobjid());
    }
    if (from.has_dockobjtype()) {
      set_dockobjtype(from.dockobjtype());
    }
    if (from.has_dockxpos()) {
      set_dockxpos(from.dockxpos());
    }
    if (from.has_dockypos()) {
      set_dockypos(from.dockypos());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hasmark()) {
      set_hasmark(from.hasmark());
    }
    if (from.has_isfakedel()) {
      set_isfakedel(from.isfakedel());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_realxlen()) {
      set_realxlen(from.realxlen());
    }
    if (from.has_realylen()) {
      set_realylen(from.realylen());
    }
    if (from.has_realzlen()) {
      set_realzlen(from.realzlen());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_xoffsetlen()) {
      set_xoffsetlen(from.xoffsetlen());
    }
    if (from.has_yoffsetlen()) {
      set_yoffsetlen(from.yoffsetlen());
    }
    if (from.has_zoffsetlen()) {
      set_zoffsetlen(from.zoffsetlen());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_usermemo()) {
      set_usermemo(from.usermemo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabFNFInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabFNFInfo::CopyFrom(const GC_CabFNFInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabFNFInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void GC_CabFNFInfo::Swap(GC_CabFNFInfo* other) {
  if (other != this) {
    std::swap(cabfnfid_, other->cabfnfid_);
    std::swap(designownerid_, other->designownerid_);
    std::swap(designownergtypeid_, other->designownergtypeid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(containerid_, other->containerid_);
    std::swap(containergtypeid_, other->containergtypeid_);
    std::swap(cabdesignfnfittingid_, other->cabdesignfnfittingid_);
    std::swap(fnfittingid_, other->fnfittingid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(dockobjid_, other->dockobjid_);
    std::swap(dockobjtype_, other->dockobjtype_);
    std::swap(dockxpos_, other->dockxpos_);
    std::swap(dockypos_, other->dockypos_);
    std::swap(hasmark_, other->hasmark_);
    std::swap(isfakedel_, other->isfakedel_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(materialid_, other->materialid_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(realxlen_, other->realxlen_);
    std::swap(realylen_, other->realylen_);
    std::swap(realzlen_, other->realzlen_);
    std::swap(xoffsetlen_, other->xoffsetlen_);
    std::swap(yoffsetlen_, other->yoffsetlen_);
    std::swap(zoffsetlen_, other->zoffsetlen_);
    std::swap(ypos_, other->ypos_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(usermemo_, other->usermemo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabFNFInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabFNFInfo_descriptor_;
  metadata.reflection = GC_CabFNFInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabFNFPartInfo::kCabFNFPartIDFieldNumber;
const int GC_CabFNFPartInfo::kCabFNFIDFieldNumber;
const int GC_CabFNFPartInfo::kOrderCateFieldNumber;
const int GC_CabFNFPartInfo::kOrderIDFieldNumber;
const int GC_CabFNFPartInfo::kDesignPlanIDFieldNumber;
const int GC_CabFNFPartInfo::kFNFittingPartIDFieldNumber;
const int GC_CabFNFPartInfo::kFNFittingIDFieldNumber;
const int GC_CabFNFPartInfo::kFactoryIDFieldNumber;
const int GC_CabFNFPartInfo::kVerCodeFieldNumber;
const int GC_CabFNFPartInfo::kHWFittingIDFieldNumber;
const int GC_CabFNFPartInfo::kMaterialIDFieldNumber;
const int GC_CabFNFPartInfo::kSealRuleIDFieldNumber;
const int GC_CabFNFPartInfo::kPartTypeFieldNumber;
const int GC_CabFNFPartInfo::kSupplyTypeFieldNumber;
const int GC_CabFNFPartInfo::kGTypeIDFieldNumber;
const int GC_CabFNFPartInfo::kModelIDFieldNumber;
const int GC_CabFNFPartInfo::kXLenFieldNumber;
const int GC_CabFNFPartInfo::kYLenFieldNumber;
const int GC_CabFNFPartInfo::kZLenFieldNumber;
const int GC_CabFNFPartInfo::kRealXLenFieldNumber;
const int GC_CabFNFPartInfo::kRealYLenFieldNumber;
const int GC_CabFNFPartInfo::kRealZLenFieldNumber;
const int GC_CabFNFPartInfo::kXOffsetLenFieldNumber;
const int GC_CabFNFPartInfo::kYOffsetLenFieldNumber;
const int GC_CabFNFPartInfo::kZOffsetLenFieldNumber;
const int GC_CabFNFPartInfo::kCreatorIDFieldNumber;
const int GC_CabFNFPartInfo::kUpdaterIDFieldNumber;
const int GC_CabFNFPartInfo::kCreateTimeFieldNumber;
const int GC_CabFNFPartInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_CabFNFPartInfo::GC_CabFNFPartInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabFNFPartInfo::InitAsDefaultInstance() {
}

GC_CabFNFPartInfo::GC_CabFNFPartInfo(const GC_CabFNFPartInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabFNFPartInfo::SharedCtor() {
  _cached_size_ = 0;
  cabfnfpartid_ = 0;
  cabfnfid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  fnfittingpartid_ = 0;
  fnfittingid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  hwfittingid_ = 0;
  materialid_ = 0;
  sealruleid_ = 0;
  parttype_ = 0;
  supplytype_ = 0;
  gtypeid_ = 0;
  modelid_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  realxlen_ = 0;
  realylen_ = 0;
  realzlen_ = 0;
  xoffsetlen_ = 0;
  yoffsetlen_ = 0;
  zoffsetlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabFNFPartInfo::~GC_CabFNFPartInfo() {
  SharedDtor();
}

void GC_CabFNFPartInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabFNFPartInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabFNFPartInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabFNFPartInfo_descriptor_;
}

const GC_CabFNFPartInfo& GC_CabFNFPartInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabFNFPartInfo* GC_CabFNFPartInfo::default_instance_ = NULL;

GC_CabFNFPartInfo* GC_CabFNFPartInfo::New() const {
  return new GC_CabFNFPartInfo;
}

void GC_CabFNFPartInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabfnfpartid_ = 0;
    cabfnfid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    fnfittingpartid_ = 0;
    fnfittingid_ = 0;
    factoryid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    hwfittingid_ = 0;
    materialid_ = 0;
    sealruleid_ = 0;
    parttype_ = 0;
    supplytype_ = 0;
    gtypeid_ = 0;
    modelid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    realxlen_ = 0;
    realylen_ = 0;
    realzlen_ = 0;
    xoffsetlen_ = 0;
    yoffsetlen_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    zoffsetlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabFNFPartInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabFNFPartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabfnfpartid_)));
          set_has_cabfnfpartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabFNFID;
        break;
      }

      // required int32 CabFNFID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabFNFID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabfnfid_)));
          set_has_cabfnfid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FNFittingPartID;
        break;
      }

      // required int32 FNFittingPartID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FNFittingPartID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingpartid_)));
          set_has_fnfittingpartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FNFittingID;
        break;
      }

      // required int32 FNFittingID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FNFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingid_)));
          set_has_fnfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_HWFittingID;
        break;
      }

      // required int32 HWFittingID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HWFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hwfittingid_)));
          set_has_hwfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_SealRuleID;
        break;
      }

      // required int32 SealRuleID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealRuleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealruleid_)));
          set_has_sealruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_PartType;
        break;
      }

      // required int32 PartType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PartType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parttype_)));
          set_has_parttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ModelID;
        break;
      }

      // required int32 ModelID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_XLen;
        break;
      }

      // required double XLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_YLen;
        break;
      }

      // required double YLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_RealXLen;
        break;
      }

      // required double RealXLen = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realxlen_)));
          set_has_realxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_RealYLen;
        break;
      }

      // required double RealYLen = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realylen_)));
          set_has_realylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_RealZLen;
        break;
      }

      // required double RealZLen = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RealZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realzlen_)));
          set_has_realzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_XOffsetLen;
        break;
      }

      // required double XOffsetLen = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffsetlen_)));
          set_has_xoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_YOffsetLen;
        break;
      }

      // required double YOffsetLen = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yoffsetlen_)));
          set_has_yoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_ZOffsetLen;
        break;
      }

      // required double ZOffsetLen = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoffsetlen_)));
          set_has_zoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabFNFPartInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabFNFPartID = 1;
  if (has_cabfnfpartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabfnfpartid(), output);
  }

  // required int32 CabFNFID = 2;
  if (has_cabfnfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabfnfid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 FNFittingPartID = 6;
  if (has_fnfittingpartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fnfittingpartid(), output);
  }

  // required int32 FNFittingID = 7;
  if (has_fnfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fnfittingid(), output);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->factoryid(), output);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vercode(), output);
  }

  // required int32 HWFittingID = 10;
  if (has_hwfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hwfittingid(), output);
  }

  // required int32 MaterialID = 11;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->materialid(), output);
  }

  // required int32 SealRuleID = 12;
  if (has_sealruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->sealruleid(), output);
  }

  // required int32 PartType = 13;
  if (has_parttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->parttype(), output);
  }

  // required int32 SupplyType = 14;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->supplytype(), output);
  }

  // required int32 GTypeID = 15;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->gtypeid(), output);
  }

  // required int32 ModelID = 16;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->modelid(), output);
  }

  // required double XLen = 17;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->xlen(), output);
  }

  // required double YLen = 18;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->ylen(), output);
  }

  // required double ZLen = 19;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->zlen(), output);
  }

  // required double RealXLen = 20;
  if (has_realxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->realxlen(), output);
  }

  // required double RealYLen = 21;
  if (has_realylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->realylen(), output);
  }

  // required double RealZLen = 22;
  if (has_realzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->realzlen(), output);
  }

  // required double XOffsetLen = 23;
  if (has_xoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->xoffsetlen(), output);
  }

  // required double YOffsetLen = 24;
  if (has_yoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->yoffsetlen(), output);
  }

  // required double ZOffsetLen = 25;
  if (has_zoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->zoffsetlen(), output);
  }

  // required int32 CreatorID = 26;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->creatorid(), output);
  }

  // required int32 UpdaterID = 27;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->updaterid(), output);
  }

  // required int64 CreateTime = 28;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->createtime(), output);
  }

  // required int64 UpdateTime = 29;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabFNFPartInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabFNFPartID = 1;
  if (has_cabfnfpartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabfnfpartid(), target);
  }

  // required int32 CabFNFID = 2;
  if (has_cabfnfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabfnfid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 FNFittingPartID = 6;
  if (has_fnfittingpartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fnfittingpartid(), target);
  }

  // required int32 FNFittingID = 7;
  if (has_fnfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fnfittingid(), target);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->factoryid(), target);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vercode(), target);
  }

  // required int32 HWFittingID = 10;
  if (has_hwfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hwfittingid(), target);
  }

  // required int32 MaterialID = 11;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->materialid(), target);
  }

  // required int32 SealRuleID = 12;
  if (has_sealruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->sealruleid(), target);
  }

  // required int32 PartType = 13;
  if (has_parttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->parttype(), target);
  }

  // required int32 SupplyType = 14;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->supplytype(), target);
  }

  // required int32 GTypeID = 15;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->gtypeid(), target);
  }

  // required int32 ModelID = 16;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->modelid(), target);
  }

  // required double XLen = 17;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->xlen(), target);
  }

  // required double YLen = 18;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->ylen(), target);
  }

  // required double ZLen = 19;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->zlen(), target);
  }

  // required double RealXLen = 20;
  if (has_realxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->realxlen(), target);
  }

  // required double RealYLen = 21;
  if (has_realylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->realylen(), target);
  }

  // required double RealZLen = 22;
  if (has_realzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->realzlen(), target);
  }

  // required double XOffsetLen = 23;
  if (has_xoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->xoffsetlen(), target);
  }

  // required double YOffsetLen = 24;
  if (has_yoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->yoffsetlen(), target);
  }

  // required double ZOffsetLen = 25;
  if (has_zoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->zoffsetlen(), target);
  }

  // required int32 CreatorID = 26;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->creatorid(), target);
  }

  // required int32 UpdaterID = 27;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->updaterid(), target);
  }

  // required int64 CreateTime = 28;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->createtime(), target);
  }

  // required int64 UpdateTime = 29;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabFNFPartInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabFNFPartID = 1;
    if (has_cabfnfpartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabfnfpartid());
    }

    // required int32 CabFNFID = 2;
    if (has_cabfnfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabfnfid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 FNFittingPartID = 6;
    if (has_fnfittingpartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingpartid());
    }

    // required int32 FNFittingID = 7;
    if (has_fnfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingid());
    }

    // required int32 FactoryID = 8;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 VerCode = 9;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 HWFittingID = 10;
    if (has_hwfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hwfittingid());
    }

    // required int32 MaterialID = 11;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required int32 SealRuleID = 12;
    if (has_sealruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealruleid());
    }

    // required int32 PartType = 13;
    if (has_parttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parttype());
    }

    // required int32 SupplyType = 14;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 GTypeID = 15;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required int32 ModelID = 16;
    if (has_modelid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double XLen = 17;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 18;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 19;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required double RealXLen = 20;
    if (has_realxlen()) {
      total_size += 2 + 8;
    }

    // required double RealYLen = 21;
    if (has_realylen()) {
      total_size += 2 + 8;
    }

    // required double RealZLen = 22;
    if (has_realzlen()) {
      total_size += 2 + 8;
    }

    // required double XOffsetLen = 23;
    if (has_xoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double YOffsetLen = 24;
    if (has_yoffsetlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double ZOffsetLen = 25;
    if (has_zoffsetlen()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 26;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 27;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 28;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 29;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabFNFPartInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabFNFPartInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabFNFPartInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabFNFPartInfo::MergeFrom(const GC_CabFNFPartInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabfnfpartid()) {
      set_cabfnfpartid(from.cabfnfpartid());
    }
    if (from.has_cabfnfid()) {
      set_cabfnfid(from.cabfnfid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_fnfittingpartid()) {
      set_fnfittingpartid(from.fnfittingpartid());
    }
    if (from.has_fnfittingid()) {
      set_fnfittingid(from.fnfittingid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_hwfittingid()) {
      set_hwfittingid(from.hwfittingid());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_sealruleid()) {
      set_sealruleid(from.sealruleid());
    }
    if (from.has_parttype()) {
      set_parttype(from.parttype());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_realxlen()) {
      set_realxlen(from.realxlen());
    }
    if (from.has_realylen()) {
      set_realylen(from.realylen());
    }
    if (from.has_realzlen()) {
      set_realzlen(from.realzlen());
    }
    if (from.has_xoffsetlen()) {
      set_xoffsetlen(from.xoffsetlen());
    }
    if (from.has_yoffsetlen()) {
      set_yoffsetlen(from.yoffsetlen());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_zoffsetlen()) {
      set_zoffsetlen(from.zoffsetlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabFNFPartInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabFNFPartInfo::CopyFrom(const GC_CabFNFPartInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabFNFPartInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x1fffffff) != 0x1fffffff) return false;

  return true;
}

void GC_CabFNFPartInfo::Swap(GC_CabFNFPartInfo* other) {
  if (other != this) {
    std::swap(cabfnfpartid_, other->cabfnfpartid_);
    std::swap(cabfnfid_, other->cabfnfid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(fnfittingpartid_, other->fnfittingpartid_);
    std::swap(fnfittingid_, other->fnfittingid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(hwfittingid_, other->hwfittingid_);
    std::swap(materialid_, other->materialid_);
    std::swap(sealruleid_, other->sealruleid_);
    std::swap(parttype_, other->parttype_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(modelid_, other->modelid_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(realxlen_, other->realxlen_);
    std::swap(realylen_, other->realylen_);
    std::swap(realzlen_, other->realzlen_);
    std::swap(xoffsetlen_, other->xoffsetlen_);
    std::swap(yoffsetlen_, other->yoffsetlen_);
    std::swap(zoffsetlen_, other->zoffsetlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabFNFPartInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabFNFPartInfo_descriptor_;
  metadata.reflection = GC_CabFNFPartInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabFNFPartSealInfo::kCabFNFPartSealIDFieldNumber;
const int GC_CabFNFPartSealInfo::kCabFNFPartIDFieldNumber;
const int GC_CabFNFPartSealInfo::kOrderCateFieldNumber;
const int GC_CabFNFPartSealInfo::kOrderIDFieldNumber;
const int GC_CabFNFPartSealInfo::kDesignPlanIDFieldNumber;
const int GC_CabFNFPartSealInfo::kFactoryIDFieldNumber;
const int GC_CabFNFPartSealInfo::kVerCodeFieldNumber;
const int GC_CabFNFPartSealInfo::kFNFittingPartIDFieldNumber;
const int GC_CabFNFPartSealInfo::kSealTypeFieldNumber;
const int GC_CabFNFPartSealInfo::kSealIndexFieldNumber;
const int GC_CabFNFPartSealInfo::kMaterialIDFieldNumber;
const int GC_CabFNFPartSealInfo::kPreMillFieldNumber;
#endif  // !_MSC_VER

GC_CabFNFPartSealInfo::GC_CabFNFPartSealInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabFNFPartSealInfo::InitAsDefaultInstance() {
}

GC_CabFNFPartSealInfo::GC_CabFNFPartSealInfo(const GC_CabFNFPartSealInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabFNFPartSealInfo::SharedCtor() {
  _cached_size_ = 0;
  cabfnfpartsealid_ = 0;
  cabfnfpartid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  fnfittingpartid_ = 0;
  sealtype_ = 0;
  sealindex_ = 0;
  materialid_ = 0;
  premill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabFNFPartSealInfo::~GC_CabFNFPartSealInfo() {
  SharedDtor();
}

void GC_CabFNFPartSealInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabFNFPartSealInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabFNFPartSealInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabFNFPartSealInfo_descriptor_;
}

const GC_CabFNFPartSealInfo& GC_CabFNFPartSealInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabFNFPartSealInfo* GC_CabFNFPartSealInfo::default_instance_ = NULL;

GC_CabFNFPartSealInfo* GC_CabFNFPartSealInfo::New() const {
  return new GC_CabFNFPartSealInfo;
}

void GC_CabFNFPartSealInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabfnfpartsealid_ = 0;
    cabfnfpartid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    fnfittingpartid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sealtype_ = 0;
    sealindex_ = 0;
    materialid_ = 0;
    premill_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabFNFPartSealInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabFNFPartSealID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabfnfpartsealid_)));
          set_has_cabfnfpartsealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabFNFPartID;
        break;
      }

      // required int32 CabFNFPartID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabFNFPartID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabfnfpartid_)));
          set_has_cabfnfpartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FNFittingPartID;
        break;
      }

      // required int32 FNFittingPartID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FNFittingPartID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingpartid_)));
          set_has_fnfittingpartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_SealType;
        break;
      }

      // required int32 SealType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealtype_)));
          set_has_sealtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_SealIndex;
        break;
      }

      // required int32 SealIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealindex_)));
          set_has_sealindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_PreMill;
        break;
      }

      // required double PreMill = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreMill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premill_)));
          set_has_premill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabFNFPartSealInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabFNFPartSealID = 1;
  if (has_cabfnfpartsealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabfnfpartsealid(), output);
  }

  // required int32 CabFNFPartID = 2;
  if (has_cabfnfpartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabfnfpartid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vercode(), output);
  }

  // required int32 FNFittingPartID = 8;
  if (has_fnfittingpartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fnfittingpartid(), output);
  }

  // required int32 SealType = 9;
  if (has_sealtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sealtype(), output);
  }

  // required int32 SealIndex = 10;
  if (has_sealindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sealindex(), output);
  }

  // required int32 MaterialID = 11;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->materialid(), output);
  }

  // required double PreMill = 12;
  if (has_premill()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->premill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabFNFPartSealInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabFNFPartSealID = 1;
  if (has_cabfnfpartsealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabfnfpartsealid(), target);
  }

  // required int32 CabFNFPartID = 2;
  if (has_cabfnfpartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabfnfpartid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vercode(), target);
  }

  // required int32 FNFittingPartID = 8;
  if (has_fnfittingpartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fnfittingpartid(), target);
  }

  // required int32 SealType = 9;
  if (has_sealtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sealtype(), target);
  }

  // required int32 SealIndex = 10;
  if (has_sealindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sealindex(), target);
  }

  // required int32 MaterialID = 11;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->materialid(), target);
  }

  // required double PreMill = 12;
  if (has_premill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->premill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabFNFPartSealInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabFNFPartSealID = 1;
    if (has_cabfnfpartsealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabfnfpartsealid());
    }

    // required int32 CabFNFPartID = 2;
    if (has_cabfnfpartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabfnfpartid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 7;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FNFittingPartID = 8;
    if (has_fnfittingpartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingpartid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 SealType = 9;
    if (has_sealtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealtype());
    }

    // required int32 SealIndex = 10;
    if (has_sealindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealindex());
    }

    // required int32 MaterialID = 11;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required double PreMill = 12;
    if (has_premill()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabFNFPartSealInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabFNFPartSealInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabFNFPartSealInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabFNFPartSealInfo::MergeFrom(const GC_CabFNFPartSealInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabfnfpartsealid()) {
      set_cabfnfpartsealid(from.cabfnfpartsealid());
    }
    if (from.has_cabfnfpartid()) {
      set_cabfnfpartid(from.cabfnfpartid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_fnfittingpartid()) {
      set_fnfittingpartid(from.fnfittingpartid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sealtype()) {
      set_sealtype(from.sealtype());
    }
    if (from.has_sealindex()) {
      set_sealindex(from.sealindex());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_premill()) {
      set_premill(from.premill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabFNFPartSealInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabFNFPartSealInfo::CopyFrom(const GC_CabFNFPartSealInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabFNFPartSealInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void GC_CabFNFPartSealInfo::Swap(GC_CabFNFPartSealInfo* other) {
  if (other != this) {
    std::swap(cabfnfpartsealid_, other->cabfnfpartsealid_);
    std::swap(cabfnfpartid_, other->cabfnfpartid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(fnfittingpartid_, other->fnfittingpartid_);
    std::swap(sealtype_, other->sealtype_);
    std::swap(sealindex_, other->sealindex_);
    std::swap(materialid_, other->materialid_);
    std::swap(premill_, other->premill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabFNFPartSealInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabFNFPartSealInfo_descriptor_;
  metadata.reflection = GC_CabFNFPartSealInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CabInfo::kCabIDFieldNumber;
const int GC_CabInfo::kOrderCateFieldNumber;
const int GC_CabInfo::kDesignPlanIDFieldNumber;
const int GC_CabInfo::kOrderIDFieldNumber;
const int GC_CabInfo::kCabDesignIDFieldNumber;
const int GC_CabInfo::kCabinetSizeIDFieldNumber;
const int GC_CabInfo::kCabStructIDFieldNumber;
const int GC_CabInfo::kFactoryIDFieldNumber;
const int GC_CabInfo::kVerCodeFieldNumber;
const int GC_CabInfo::kCabMatPlanIDFieldNumber;
const int GC_CabInfo::kSealRuleIDFieldNumber;
const int GC_CabInfo::kDockObjIDFieldNumber;
const int GC_CabInfo::kDockObjTypeFieldNumber;
const int GC_CabInfo::kDockXPosFieldNumber;
const int GC_CabInfo::kDockYPosFieldNumber;
const int GC_CabInfo::kXLenFieldNumber;
const int GC_CabInfo::kYLenFieldNumber;
const int GC_CabInfo::kZLenFieldNumber;
const int GC_CabInfo::kShapeXLenFieldNumber;
const int GC_CabInfo::kShapeZLenFieldNumber;
const int GC_CabInfo::kGapXLenFieldNumber;
const int GC_CabInfo::kGapYLenFieldNumber;
const int GC_CabInfo::kGapZLenFieldNumber;
const int GC_CabInfo::kYPosFieldNumber;
const int GC_CabInfo::kFootIDFieldNumber;
const int GC_CabInfo::kFootCountFieldNumber;
const int GC_CabInfo::kFootYLenFieldNumber;
const int GC_CabInfo::kIsStandardFieldNumber;
const int GC_CabInfo::kHasMarkFieldNumber;
const int GC_CabInfo::kIsVisibleFieldNumber;
const int GC_CabInfo::kIsLockedFieldNumber;
const int GC_CabInfo::kCreatorIDFieldNumber;
const int GC_CabInfo::kUpdaterIDFieldNumber;
const int GC_CabInfo::kCreateTimeFieldNumber;
const int GC_CabInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_CabInfo::GC_CabInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CabInfo::InitAsDefaultInstance() {
}

GC_CabInfo::GC_CabInfo(const GC_CabInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CabInfo::SharedCtor() {
  _cached_size_ = 0;
  cabid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  cabdesignid_ = 0;
  cabinetsizeid_ = 0;
  cabstructid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  cabmatplanid_ = 0;
  sealruleid_ = 0;
  dockobjid_ = 0;
  dockobjtype_ = 0;
  dockxpos_ = 0;
  dockypos_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  shapexlen_ = 0;
  shapezlen_ = 0;
  gapxlen_ = 0;
  gapylen_ = 0;
  gapzlen_ = 0;
  ypos_ = 0;
  footid_ = 0;
  footcount_ = 0;
  footylen_ = 0;
  isstandard_ = false;
  hasmark_ = false;
  isvisible_ = false;
  islocked_ = false;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CabInfo::~GC_CabInfo() {
  SharedDtor();
}

void GC_CabInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CabInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CabInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CabInfo_descriptor_;
}

const GC_CabInfo& GC_CabInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_CabInfo* GC_CabInfo::default_instance_ = NULL;

GC_CabInfo* GC_CabInfo::New() const {
  return new GC_CabInfo;
}

void GC_CabInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    cabdesignid_ = 0;
    cabinetsizeid_ = 0;
    cabstructid_ = 0;
    factoryid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    cabmatplanid_ = 0;
    sealruleid_ = 0;
    dockobjid_ = 0;
    dockobjtype_ = 0;
    dockxpos_ = 0;
    dockypos_ = 0;
    xlen_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    ylen_ = 0;
    zlen_ = 0;
    shapexlen_ = 0;
    shapezlen_ = 0;
    gapxlen_ = 0;
    gapylen_ = 0;
    gapzlen_ = 0;
    ypos_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    footid_ = 0;
    footcount_ = 0;
    footylen_ = 0;
    isstandard_ = false;
    hasmark_ = false;
    isvisible_ = false;
    islocked_ = false;
    creatorid_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CabInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabid_)));
          set_has_cabid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CabDesignID;
        break;
      }

      // required int32 CabDesignID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignid_)));
          set_has_cabdesignid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CabinetSizeID;
        break;
      }

      // required int32 CabinetSizeID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabinetSizeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabinetsizeid_)));
          set_has_cabinetsizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CabStructID;
        break;
      }

      // required int32 CabStructID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructid_)));
          set_has_cabstructid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CabMatPlanID;
        break;
      }

      // required int32 CabMatPlanID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabmatplanid_)));
          set_has_cabmatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SealRuleID;
        break;
      }

      // required int32 SealRuleID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealRuleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealruleid_)));
          set_has_sealruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_DockObjID;
        break;
      }

      // required int32 DockObjID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjid_)));
          set_has_dockobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_DockObjType;
        break;
      }

      // required int32 DockObjType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjtype_)));
          set_has_dockobjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_DockXPos;
        break;
      }

      // required double DockXPos = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockXPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockxpos_)));
          set_has_dockxpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_DockYPos;
        break;
      }

      // required double DockYPos = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockYPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockypos_)));
          set_has_dockypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_XLen;
        break;
      }

      // required double XLen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_YLen;
        break;
      }

      // required double YLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_ShapeXLen;
        break;
      }

      // required double ShapeXLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShapeXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shapexlen_)));
          set_has_shapexlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_ShapeZLen;
        break;
      }

      // required double ShapeZLen = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShapeZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shapezlen_)));
          set_has_shapezlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_GapXLen;
        break;
      }

      // required double GapXLen = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapxlen_)));
          set_has_gapxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_GapYLen;
        break;
      }

      // required double GapYLen = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapylen_)));
          set_has_gapylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_GapZLen;
        break;
      }

      // required double GapZLen = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapzlen_)));
          set_has_gapzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_YPos;
        break;
      }

      // required double YPos = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_FootID;
        break;
      }

      // required int32 FootID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FootID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &footid_)));
          set_has_footid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_FootCount;
        break;
      }

      // required int32 FootCount = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FootCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &footcount_)));
          set_has_footcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_FootYLen;
        break;
      }

      // required double FootYLen = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FootYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &footylen_)));
          set_has_footylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_IsStandard;
        break;
      }

      // required bool IsStandard = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsStandard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstandard_)));
          set_has_isstandard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_HasMark;
        break;
      }

      // required bool HasMark = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmark_)));
          set_has_hasmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CabInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabID = 1;
  if (has_cabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 CabDesignID = 5;
  if (has_cabdesignid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cabdesignid(), output);
  }

  // required int32 CabinetSizeID = 6;
  if (has_cabinetsizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cabinetsizeid(), output);
  }

  // required int32 CabStructID = 7;
  if (has_cabstructid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cabstructid(), output);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->factoryid(), output);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vercode(), output);
  }

  // required int32 CabMatPlanID = 10;
  if (has_cabmatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cabmatplanid(), output);
  }

  // required int32 SealRuleID = 11;
  if (has_sealruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sealruleid(), output);
  }

  // required int32 DockObjID = 12;
  if (has_dockobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->dockobjid(), output);
  }

  // required int32 DockObjType = 13;
  if (has_dockobjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->dockobjtype(), output);
  }

  // required double DockXPos = 14;
  if (has_dockxpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->dockxpos(), output);
  }

  // required double DockYPos = 15;
  if (has_dockypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->dockypos(), output);
  }

  // required double XLen = 16;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->xlen(), output);
  }

  // required double YLen = 17;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->ylen(), output);
  }

  // required double ZLen = 18;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->zlen(), output);
  }

  // required double ShapeXLen = 19;
  if (has_shapexlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->shapexlen(), output);
  }

  // required double ShapeZLen = 20;
  if (has_shapezlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->shapezlen(), output);
  }

  // required double GapXLen = 21;
  if (has_gapxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->gapxlen(), output);
  }

  // required double GapYLen = 22;
  if (has_gapylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->gapylen(), output);
  }

  // required double GapZLen = 23;
  if (has_gapzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->gapzlen(), output);
  }

  // required double YPos = 24;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->ypos(), output);
  }

  // required int32 FootID = 25;
  if (has_footid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->footid(), output);
  }

  // required int32 FootCount = 26;
  if (has_footcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->footcount(), output);
  }

  // required double FootYLen = 27;
  if (has_footylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->footylen(), output);
  }

  // required bool IsStandard = 28;
  if (has_isstandard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->isstandard(), output);
  }

  // required bool HasMark = 29;
  if (has_hasmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->hasmark(), output);
  }

  // required bool IsVisible = 30;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->isvisible(), output);
  }

  // required bool IsLocked = 31;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->islocked(), output);
  }

  // required int32 CreatorID = 32;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->creatorid(), output);
  }

  // required int32 UpdaterID = 33;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->updaterid(), output);
  }

  // required int64 CreateTime = 34;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->createtime(), output);
  }

  // required int64 UpdateTime = 35;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CabInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabID = 1;
  if (has_cabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 CabDesignID = 5;
  if (has_cabdesignid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cabdesignid(), target);
  }

  // required int32 CabinetSizeID = 6;
  if (has_cabinetsizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cabinetsizeid(), target);
  }

  // required int32 CabStructID = 7;
  if (has_cabstructid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cabstructid(), target);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->factoryid(), target);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vercode(), target);
  }

  // required int32 CabMatPlanID = 10;
  if (has_cabmatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cabmatplanid(), target);
  }

  // required int32 SealRuleID = 11;
  if (has_sealruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sealruleid(), target);
  }

  // required int32 DockObjID = 12;
  if (has_dockobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->dockobjid(), target);
  }

  // required int32 DockObjType = 13;
  if (has_dockobjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->dockobjtype(), target);
  }

  // required double DockXPos = 14;
  if (has_dockxpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->dockxpos(), target);
  }

  // required double DockYPos = 15;
  if (has_dockypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->dockypos(), target);
  }

  // required double XLen = 16;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->xlen(), target);
  }

  // required double YLen = 17;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->ylen(), target);
  }

  // required double ZLen = 18;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->zlen(), target);
  }

  // required double ShapeXLen = 19;
  if (has_shapexlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->shapexlen(), target);
  }

  // required double ShapeZLen = 20;
  if (has_shapezlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->shapezlen(), target);
  }

  // required double GapXLen = 21;
  if (has_gapxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->gapxlen(), target);
  }

  // required double GapYLen = 22;
  if (has_gapylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->gapylen(), target);
  }

  // required double GapZLen = 23;
  if (has_gapzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->gapzlen(), target);
  }

  // required double YPos = 24;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->ypos(), target);
  }

  // required int32 FootID = 25;
  if (has_footid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->footid(), target);
  }

  // required int32 FootCount = 26;
  if (has_footcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->footcount(), target);
  }

  // required double FootYLen = 27;
  if (has_footylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->footylen(), target);
  }

  // required bool IsStandard = 28;
  if (has_isstandard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->isstandard(), target);
  }

  // required bool HasMark = 29;
  if (has_hasmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->hasmark(), target);
  }

  // required bool IsVisible = 30;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->isvisible(), target);
  }

  // required bool IsLocked = 31;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->islocked(), target);
  }

  // required int32 CreatorID = 32;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->creatorid(), target);
  }

  // required int32 UpdaterID = 33;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->updaterid(), target);
  }

  // required int64 CreateTime = 34;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->createtime(), target);
  }

  // required int64 UpdateTime = 35;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CabInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabID = 1;
    if (has_cabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 CabDesignID = 5;
    if (has_cabdesignid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignid());
    }

    // required int32 CabinetSizeID = 6;
    if (has_cabinetsizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabinetsizeid());
    }

    // required int32 CabStructID = 7;
    if (has_cabstructid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructid());
    }

    // required int32 FactoryID = 8;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 VerCode = 9;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 CabMatPlanID = 10;
    if (has_cabmatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabmatplanid());
    }

    // required int32 SealRuleID = 11;
    if (has_sealruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealruleid());
    }

    // required int32 DockObjID = 12;
    if (has_dockobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjid());
    }

    // required int32 DockObjType = 13;
    if (has_dockobjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjtype());
    }

    // required double DockXPos = 14;
    if (has_dockxpos()) {
      total_size += 1 + 8;
    }

    // required double DockYPos = 15;
    if (has_dockypos()) {
      total_size += 1 + 8;
    }

    // required double XLen = 16;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double YLen = 17;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 18;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required double ShapeXLen = 19;
    if (has_shapexlen()) {
      total_size += 2 + 8;
    }

    // required double ShapeZLen = 20;
    if (has_shapezlen()) {
      total_size += 2 + 8;
    }

    // required double GapXLen = 21;
    if (has_gapxlen()) {
      total_size += 2 + 8;
    }

    // required double GapYLen = 22;
    if (has_gapylen()) {
      total_size += 2 + 8;
    }

    // required double GapZLen = 23;
    if (has_gapzlen()) {
      total_size += 2 + 8;
    }

    // required double YPos = 24;
    if (has_ypos()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 FootID = 25;
    if (has_footid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->footid());
    }

    // required int32 FootCount = 26;
    if (has_footcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->footcount());
    }

    // required double FootYLen = 27;
    if (has_footylen()) {
      total_size += 2 + 8;
    }

    // required bool IsStandard = 28;
    if (has_isstandard()) {
      total_size += 2 + 1;
    }

    // required bool HasMark = 29;
    if (has_hasmark()) {
      total_size += 2 + 1;
    }

    // required bool IsVisible = 30;
    if (has_isvisible()) {
      total_size += 2 + 1;
    }

    // required bool IsLocked = 31;
    if (has_islocked()) {
      total_size += 2 + 1;
    }

    // required int32 CreatorID = 32;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int32 UpdaterID = 33;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 34;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 35;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CabInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CabInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CabInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CabInfo::MergeFrom(const GC_CabInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabid()) {
      set_cabid(from.cabid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_cabdesignid()) {
      set_cabdesignid(from.cabdesignid());
    }
    if (from.has_cabinetsizeid()) {
      set_cabinetsizeid(from.cabinetsizeid());
    }
    if (from.has_cabstructid()) {
      set_cabstructid(from.cabstructid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_cabmatplanid()) {
      set_cabmatplanid(from.cabmatplanid());
    }
    if (from.has_sealruleid()) {
      set_sealruleid(from.sealruleid());
    }
    if (from.has_dockobjid()) {
      set_dockobjid(from.dockobjid());
    }
    if (from.has_dockobjtype()) {
      set_dockobjtype(from.dockobjtype());
    }
    if (from.has_dockxpos()) {
      set_dockxpos(from.dockxpos());
    }
    if (from.has_dockypos()) {
      set_dockypos(from.dockypos());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_shapexlen()) {
      set_shapexlen(from.shapexlen());
    }
    if (from.has_shapezlen()) {
      set_shapezlen(from.shapezlen());
    }
    if (from.has_gapxlen()) {
      set_gapxlen(from.gapxlen());
    }
    if (from.has_gapylen()) {
      set_gapylen(from.gapylen());
    }
    if (from.has_gapzlen()) {
      set_gapzlen(from.gapzlen());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_footid()) {
      set_footid(from.footid());
    }
    if (from.has_footcount()) {
      set_footcount(from.footcount());
    }
    if (from.has_footylen()) {
      set_footylen(from.footylen());
    }
    if (from.has_isstandard()) {
      set_isstandard(from.isstandard());
    }
    if (from.has_hasmark()) {
      set_hasmark(from.hasmark());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CabInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CabInfo::CopyFrom(const GC_CabInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CabInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_CabInfo::Swap(GC_CabInfo* other) {
  if (other != this) {
    std::swap(cabid_, other->cabid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(cabdesignid_, other->cabdesignid_);
    std::swap(cabinetsizeid_, other->cabinetsizeid_);
    std::swap(cabstructid_, other->cabstructid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(cabmatplanid_, other->cabmatplanid_);
    std::swap(sealruleid_, other->sealruleid_);
    std::swap(dockobjid_, other->dockobjid_);
    std::swap(dockobjtype_, other->dockobjtype_);
    std::swap(dockxpos_, other->dockxpos_);
    std::swap(dockypos_, other->dockypos_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(shapexlen_, other->shapexlen_);
    std::swap(shapezlen_, other->shapezlen_);
    std::swap(gapxlen_, other->gapxlen_);
    std::swap(gapylen_, other->gapylen_);
    std::swap(gapzlen_, other->gapzlen_);
    std::swap(ypos_, other->ypos_);
    std::swap(footid_, other->footid_);
    std::swap(footcount_, other->footcount_);
    std::swap(footylen_, other->footylen_);
    std::swap(isstandard_, other->isstandard_);
    std::swap(hasmark_, other->hasmark_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CabInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CabInfo_descriptor_;
  metadata.reflection = GC_CabInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_DecorBoardInfo::kDesignDecorBoardIDFieldNumber;
const int GC_DecorBoardInfo::kDesignPlanIDFieldNumber;
const int GC_DecorBoardInfo::kDesignParentIDFieldNumber;
const int GC_DecorBoardInfo::kOrderCateFieldNumber;
const int GC_DecorBoardInfo::kOrderIDFieldNumber;
const int GC_DecorBoardInfo::kDecorBoardIDFieldNumber;
const int GC_DecorBoardInfo::kDecorParentIDFieldNumber;
const int GC_DecorBoardInfo::kFactoryIDFieldNumber;
const int GC_DecorBoardInfo::kVerCodeFieldNumber;
const int GC_DecorBoardInfo::kGroupIDFieldNumber;
const int GC_DecorBoardInfo::kGroupIndexFieldNumber;
const int GC_DecorBoardInfo::kGTypeIDFieldNumber;
const int GC_DecorBoardInfo::kIsAutoFitFieldNumber;
const int GC_DecorBoardInfo::kHasMarkFieldNumber;
const int GC_DecorBoardInfo::kIsVisibleFieldNumber;
const int GC_DecorBoardInfo::kIsLockedFieldNumber;
const int GC_DecorBoardInfo::kIsChangedSizeFieldNumber;
const int GC_DecorBoardInfo::kIsDragInFieldNumber;
const int GC_DecorBoardInfo::kDoorMatPlanIDFieldNumber;
const int GC_DecorBoardInfo::kCabMatPlanIDFieldNumber;
const int GC_DecorBoardInfo::kDoorIDFieldNumber;
const int GC_DecorBoardInfo::kTargetTypeFieldNumber;
const int GC_DecorBoardInfo::kDockObjIDFieldNumber;
const int GC_DecorBoardInfo::kDockObjTypeFieldNumber;
const int GC_DecorBoardInfo::kDockXPosFieldNumber;
const int GC_DecorBoardInfo::kDockYPosFieldNumber;
const int GC_DecorBoardInfo::kMatIDFieldNumber;
const int GC_DecorBoardInfo::kMatGTypeFieldNumber;
const int GC_DecorBoardInfo::kSupplyTypeFieldNumber;
const int GC_DecorBoardInfo::kModelIDFieldNumber;
const int GC_DecorBoardInfo::kYPosFieldNumber;
const int GC_DecorBoardInfo::kXLenFieldNumber;
const int GC_DecorBoardInfo::kYLenFieldNumber;
const int GC_DecorBoardInfo::kZLenFieldNumber;
const int GC_DecorBoardInfo::kXOffsetLenFieldNumber;
const int GC_DecorBoardInfo::kYOffsetLenFieldNumber;
const int GC_DecorBoardInfo::kZOffsetLenFieldNumber;
const int GC_DecorBoardInfo::kCreatorIDFieldNumber;
const int GC_DecorBoardInfo::kUpdaterIDFieldNumber;
const int GC_DecorBoardInfo::kCreateTimeFieldNumber;
const int GC_DecorBoardInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_DecorBoardInfo::GC_DecorBoardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_DecorBoardInfo::InitAsDefaultInstance() {
}

GC_DecorBoardInfo::GC_DecorBoardInfo(const GC_DecorBoardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_DecorBoardInfo::SharedCtor() {
  _cached_size_ = 0;
  designdecorboardid_ = 0;
  designplanid_ = 0;
  designparentid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  decorboardid_ = 0;
  decorparentid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  groupid_ = 0;
  groupindex_ = 0;
  gtypeid_ = 0;
  isautofit_ = false;
  hasmark_ = false;
  isvisible_ = false;
  islocked_ = false;
  ischangedsize_ = false;
  isdragin_ = false;
  doormatplanid_ = 0;
  cabmatplanid_ = 0;
  doorid_ = 0;
  targettype_ = 0;
  dockobjid_ = 0;
  dockobjtype_ = 0;
  dockxpos_ = 0;
  dockypos_ = 0;
  matid_ = 0;
  matgtype_ = 0;
  supplytype_ = 0;
  modelid_ = 0;
  ypos_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  xoffsetlen_ = 0;
  yoffsetlen_ = 0;
  zoffsetlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_DecorBoardInfo::~GC_DecorBoardInfo() {
  SharedDtor();
}

void GC_DecorBoardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_DecorBoardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_DecorBoardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_DecorBoardInfo_descriptor_;
}

const GC_DecorBoardInfo& GC_DecorBoardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_DecorBoardInfo* GC_DecorBoardInfo::default_instance_ = NULL;

GC_DecorBoardInfo* GC_DecorBoardInfo::New() const {
  return new GC_DecorBoardInfo;
}

void GC_DecorBoardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designdecorboardid_ = 0;
    designplanid_ = 0;
    designparentid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    decorboardid_ = 0;
    decorparentid_ = 0;
    factoryid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    groupid_ = 0;
    groupindex_ = 0;
    gtypeid_ = 0;
    isautofit_ = false;
    hasmark_ = false;
    isvisible_ = false;
    islocked_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    ischangedsize_ = false;
    isdragin_ = false;
    doormatplanid_ = 0;
    cabmatplanid_ = 0;
    doorid_ = 0;
    targettype_ = 0;
    dockobjid_ = 0;
    dockobjtype_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    dockxpos_ = 0;
    dockypos_ = 0;
    matid_ = 0;
    matgtype_ = 0;
    supplytype_ = 0;
    modelid_ = 0;
    ypos_ = 0;
    xlen_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    ylen_ = 0;
    zlen_ = 0;
    xoffsetlen_ = 0;
    yoffsetlen_ = 0;
    zoffsetlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_DecorBoardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignDecorBoardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designdecorboardid_)));
          set_has_designdecorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignParentID;
        break;
      }

      // required int32 DesignParentID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignParentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designparentid_)));
          set_has_designparentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DecorBoardID;
        break;
      }

      // required int32 DecorBoardID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardid_)));
          set_has_decorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_DecorParentID;
        break;
      }

      // required int32 DecorParentID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorParentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorparentid_)));
          set_has_decorparentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_GroupIndex;
        break;
      }

      // required int32 GroupIndex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_IsAutoFit;
        break;
      }

      // required bool IsAutoFit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAutoFit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautofit_)));
          set_has_isautofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_HasMark;
        break;
      }

      // required bool HasMark = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmark_)));
          set_has_hasmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_IsChangedSize;
        break;
      }

      // required bool IsChangedSize = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsChangedSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischangedsize_)));
          set_has_ischangedsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_IsDragIn;
        break;
      }

      // required bool IsDragIn = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDragIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdragin_)));
          set_has_isdragin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_DoorMatPlanID;
        break;
      }

      // required int32 DoorMatPlanID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doormatplanid_)));
          set_has_doormatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_CabMatPlanID;
        break;
      }

      // required int32 CabMatPlanID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabmatplanid_)));
          set_has_cabmatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_DoorID;
        break;
      }

      // required int32 DoorID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorid_)));
          set_has_doorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_TargetType;
        break;
      }

      // required int32 TargetType = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targettype_)));
          set_has_targettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_DockObjID;
        break;
      }

      // required int32 DockObjID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjid_)));
          set_has_dockobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_DockObjType;
        break;
      }

      // required int32 DockObjType = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjtype_)));
          set_has_dockobjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_DockXPos;
        break;
      }

      // required double DockXPos = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockXPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockxpos_)));
          set_has_dockxpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_DockYPos;
        break;
      }

      // required double DockYPos = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockYPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockypos_)));
          set_has_dockypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_MatID;
        break;
      }

      // required int32 MatID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matid_)));
          set_has_matid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_MatGType;
        break;
      }

      // required int32 MatGType = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatGType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matgtype_)));
          set_has_matgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_ModelID;
        break;
      }

      // required int32 ModelID = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_YPos;
        break;
      }

      // required double YPos = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_XLen;
        break;
      }

      // required double XLen = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_YLen;
        break;
      }

      // required double YLen = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(273)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(281)) goto parse_XOffsetLen;
        break;
      }

      // required double XOffsetLen = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffsetlen_)));
          set_has_xoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(289)) goto parse_YOffsetLen;
        break;
      }

      // required double YOffsetLen = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yoffsetlen_)));
          set_has_yoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_ZOffsetLen;
        break;
      }

      // required double ZOffsetLen = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoffsetlen_)));
          set_has_zoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_DecorBoardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignDecorBoardID = 1;
  if (has_designdecorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designdecorboardid(), output);
  }

  // required int32 DesignPlanID = 2;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->designplanid(), output);
  }

  // required int32 DesignParentID = 3;
  if (has_designparentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designparentid(), output);
  }

  // required int32 OrderCate = 4;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ordercate(), output);
  }

  // required int64 OrderID = 5;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->orderid(), output);
  }

  // required int32 DecorBoardID = 6;
  if (has_decorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->decorboardid(), output);
  }

  // required int32 DecorParentID = 7;
  if (has_decorparentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->decorparentid(), output);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->factoryid(), output);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vercode(), output);
  }

  // required int32 GroupID = 10;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->groupid(), output);
  }

  // required int32 GroupIndex = 11;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->groupindex(), output);
  }

  // required int32 GTypeID = 12;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gtypeid(), output);
  }

  // required bool IsAutoFit = 13;
  if (has_isautofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isautofit(), output);
  }

  // required bool HasMark = 14;
  if (has_hasmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->hasmark(), output);
  }

  // required bool IsVisible = 15;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isvisible(), output);
  }

  // required bool IsLocked = 16;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->islocked(), output);
  }

  // required bool IsChangedSize = 17;
  if (has_ischangedsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->ischangedsize(), output);
  }

  // required bool IsDragIn = 18;
  if (has_isdragin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->isdragin(), output);
  }

  // required int32 DoorMatPlanID = 19;
  if (has_doormatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->doormatplanid(), output);
  }

  // required int32 CabMatPlanID = 20;
  if (has_cabmatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->cabmatplanid(), output);
  }

  // required int32 DoorID = 21;
  if (has_doorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->doorid(), output);
  }

  // required int32 TargetType = 22;
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->targettype(), output);
  }

  // required int32 DockObjID = 23;
  if (has_dockobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->dockobjid(), output);
  }

  // required int32 DockObjType = 24;
  if (has_dockobjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->dockobjtype(), output);
  }

  // required double DockXPos = 25;
  if (has_dockxpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->dockxpos(), output);
  }

  // required double DockYPos = 26;
  if (has_dockypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->dockypos(), output);
  }

  // required int32 MatID = 27;
  if (has_matid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->matid(), output);
  }

  // required int32 MatGType = 28;
  if (has_matgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->matgtype(), output);
  }

  // required int32 SupplyType = 29;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->supplytype(), output);
  }

  // required int32 ModelID = 30;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->modelid(), output);
  }

  // required double YPos = 31;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->ypos(), output);
  }

  // required double XLen = 32;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->xlen(), output);
  }

  // required double YLen = 33;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->ylen(), output);
  }

  // required double ZLen = 34;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->zlen(), output);
  }

  // required double XOffsetLen = 35;
  if (has_xoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->xoffsetlen(), output);
  }

  // required double YOffsetLen = 36;
  if (has_yoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->yoffsetlen(), output);
  }

  // required double ZOffsetLen = 37;
  if (has_zoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->zoffsetlen(), output);
  }

  // required int32 CreatorID = 38;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->creatorid(), output);
  }

  // required int32 UpdaterID = 39;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->updaterid(), output);
  }

  // required int64 CreateTime = 40;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->createtime(), output);
  }

  // required int64 UpdateTime = 41;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_DecorBoardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignDecorBoardID = 1;
  if (has_designdecorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designdecorboardid(), target);
  }

  // required int32 DesignPlanID = 2;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->designplanid(), target);
  }

  // required int32 DesignParentID = 3;
  if (has_designparentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designparentid(), target);
  }

  // required int32 OrderCate = 4;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ordercate(), target);
  }

  // required int64 OrderID = 5;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->orderid(), target);
  }

  // required int32 DecorBoardID = 6;
  if (has_decorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->decorboardid(), target);
  }

  // required int32 DecorParentID = 7;
  if (has_decorparentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->decorparentid(), target);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->factoryid(), target);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vercode(), target);
  }

  // required int32 GroupID = 10;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->groupid(), target);
  }

  // required int32 GroupIndex = 11;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->groupindex(), target);
  }

  // required int32 GTypeID = 12;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gtypeid(), target);
  }

  // required bool IsAutoFit = 13;
  if (has_isautofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isautofit(), target);
  }

  // required bool HasMark = 14;
  if (has_hasmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->hasmark(), target);
  }

  // required bool IsVisible = 15;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isvisible(), target);
  }

  // required bool IsLocked = 16;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->islocked(), target);
  }

  // required bool IsChangedSize = 17;
  if (has_ischangedsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->ischangedsize(), target);
  }

  // required bool IsDragIn = 18;
  if (has_isdragin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->isdragin(), target);
  }

  // required int32 DoorMatPlanID = 19;
  if (has_doormatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->doormatplanid(), target);
  }

  // required int32 CabMatPlanID = 20;
  if (has_cabmatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->cabmatplanid(), target);
  }

  // required int32 DoorID = 21;
  if (has_doorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->doorid(), target);
  }

  // required int32 TargetType = 22;
  if (has_targettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->targettype(), target);
  }

  // required int32 DockObjID = 23;
  if (has_dockobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->dockobjid(), target);
  }

  // required int32 DockObjType = 24;
  if (has_dockobjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->dockobjtype(), target);
  }

  // required double DockXPos = 25;
  if (has_dockxpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->dockxpos(), target);
  }

  // required double DockYPos = 26;
  if (has_dockypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->dockypos(), target);
  }

  // required int32 MatID = 27;
  if (has_matid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->matid(), target);
  }

  // required int32 MatGType = 28;
  if (has_matgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->matgtype(), target);
  }

  // required int32 SupplyType = 29;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->supplytype(), target);
  }

  // required int32 ModelID = 30;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->modelid(), target);
  }

  // required double YPos = 31;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->ypos(), target);
  }

  // required double XLen = 32;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->xlen(), target);
  }

  // required double YLen = 33;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->ylen(), target);
  }

  // required double ZLen = 34;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->zlen(), target);
  }

  // required double XOffsetLen = 35;
  if (has_xoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->xoffsetlen(), target);
  }

  // required double YOffsetLen = 36;
  if (has_yoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->yoffsetlen(), target);
  }

  // required double ZOffsetLen = 37;
  if (has_zoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->zoffsetlen(), target);
  }

  // required int32 CreatorID = 38;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->creatorid(), target);
  }

  // required int32 UpdaterID = 39;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->updaterid(), target);
  }

  // required int64 CreateTime = 40;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->createtime(), target);
  }

  // required int64 UpdateTime = 41;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_DecorBoardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignDecorBoardID = 1;
    if (has_designdecorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designdecorboardid());
    }

    // required int32 DesignPlanID = 2;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 DesignParentID = 3;
    if (has_designparentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designparentid());
    }

    // required int32 OrderCate = 4;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 5;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DecorBoardID = 6;
    if (has_decorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardid());
    }

    // required int32 DecorParentID = 7;
    if (has_decorparentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorparentid());
    }

    // required int32 FactoryID = 8;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 VerCode = 9;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 GroupID = 10;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required int32 GroupIndex = 11;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupindex());
    }

    // required int32 GTypeID = 12;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required bool IsAutoFit = 13;
    if (has_isautofit()) {
      total_size += 1 + 1;
    }

    // required bool HasMark = 14;
    if (has_hasmark()) {
      total_size += 1 + 1;
    }

    // required bool IsVisible = 15;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required bool IsLocked = 16;
    if (has_islocked()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bool IsChangedSize = 17;
    if (has_ischangedsize()) {
      total_size += 2 + 1;
    }

    // required bool IsDragIn = 18;
    if (has_isdragin()) {
      total_size += 2 + 1;
    }

    // required int32 DoorMatPlanID = 19;
    if (has_doormatplanid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doormatplanid());
    }

    // required int32 CabMatPlanID = 20;
    if (has_cabmatplanid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabmatplanid());
    }

    // required int32 DoorID = 21;
    if (has_doorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorid());
    }

    // required int32 TargetType = 22;
    if (has_targettype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targettype());
    }

    // required int32 DockObjID = 23;
    if (has_dockobjid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjid());
    }

    // required int32 DockObjType = 24;
    if (has_dockobjtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjtype());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double DockXPos = 25;
    if (has_dockxpos()) {
      total_size += 2 + 8;
    }

    // required double DockYPos = 26;
    if (has_dockypos()) {
      total_size += 2 + 8;
    }

    // required int32 MatID = 27;
    if (has_matid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matid());
    }

    // required int32 MatGType = 28;
    if (has_matgtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matgtype());
    }

    // required int32 SupplyType = 29;
    if (has_supplytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 ModelID = 30;
    if (has_modelid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

    // required double YPos = 31;
    if (has_ypos()) {
      total_size += 2 + 8;
    }

    // required double XLen = 32;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required double YLen = 33;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 34;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required double XOffsetLen = 35;
    if (has_xoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double YOffsetLen = 36;
    if (has_yoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double ZOffsetLen = 37;
    if (has_zoffsetlen()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 38;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 39;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 40;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required int64 UpdateTime = 41;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_DecorBoardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_DecorBoardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_DecorBoardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_DecorBoardInfo::MergeFrom(const GC_DecorBoardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designdecorboardid()) {
      set_designdecorboardid(from.designdecorboardid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_designparentid()) {
      set_designparentid(from.designparentid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_decorboardid()) {
      set_decorboardid(from.decorboardid());
    }
    if (from.has_decorparentid()) {
      set_decorparentid(from.decorparentid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_isautofit()) {
      set_isautofit(from.isautofit());
    }
    if (from.has_hasmark()) {
      set_hasmark(from.hasmark());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ischangedsize()) {
      set_ischangedsize(from.ischangedsize());
    }
    if (from.has_isdragin()) {
      set_isdragin(from.isdragin());
    }
    if (from.has_doormatplanid()) {
      set_doormatplanid(from.doormatplanid());
    }
    if (from.has_cabmatplanid()) {
      set_cabmatplanid(from.cabmatplanid());
    }
    if (from.has_doorid()) {
      set_doorid(from.doorid());
    }
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
    if (from.has_dockobjid()) {
      set_dockobjid(from.dockobjid());
    }
    if (from.has_dockobjtype()) {
      set_dockobjtype(from.dockobjtype());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_dockxpos()) {
      set_dockxpos(from.dockxpos());
    }
    if (from.has_dockypos()) {
      set_dockypos(from.dockypos());
    }
    if (from.has_matid()) {
      set_matid(from.matid());
    }
    if (from.has_matgtype()) {
      set_matgtype(from.matgtype());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_xoffsetlen()) {
      set_xoffsetlen(from.xoffsetlen());
    }
    if (from.has_yoffsetlen()) {
      set_yoffsetlen(from.yoffsetlen());
    }
    if (from.has_zoffsetlen()) {
      set_zoffsetlen(from.zoffsetlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_DecorBoardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_DecorBoardInfo::CopyFrom(const GC_DecorBoardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_DecorBoardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void GC_DecorBoardInfo::Swap(GC_DecorBoardInfo* other) {
  if (other != this) {
    std::swap(designdecorboardid_, other->designdecorboardid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(designparentid_, other->designparentid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(decorboardid_, other->decorboardid_);
    std::swap(decorparentid_, other->decorparentid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(groupid_, other->groupid_);
    std::swap(groupindex_, other->groupindex_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(isautofit_, other->isautofit_);
    std::swap(hasmark_, other->hasmark_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(ischangedsize_, other->ischangedsize_);
    std::swap(isdragin_, other->isdragin_);
    std::swap(doormatplanid_, other->doormatplanid_);
    std::swap(cabmatplanid_, other->cabmatplanid_);
    std::swap(doorid_, other->doorid_);
    std::swap(targettype_, other->targettype_);
    std::swap(dockobjid_, other->dockobjid_);
    std::swap(dockobjtype_, other->dockobjtype_);
    std::swap(dockxpos_, other->dockxpos_);
    std::swap(dockypos_, other->dockypos_);
    std::swap(matid_, other->matid_);
    std::swap(matgtype_, other->matgtype_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(modelid_, other->modelid_);
    std::swap(ypos_, other->ypos_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(xoffsetlen_, other->xoffsetlen_);
    std::swap(yoffsetlen_, other->yoffsetlen_);
    std::swap(zoffsetlen_, other->zoffsetlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_DecorBoardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_DecorBoardInfo_descriptor_;
  metadata.reflection = GC_DecorBoardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_DecorBoardUnitInfo::kDesignDecorBoardUnitIDFieldNumber;
const int GC_DecorBoardUnitInfo::kDesignDecorBoardIDFieldNumber;
const int GC_DecorBoardUnitInfo::kOrderCateFieldNumber;
const int GC_DecorBoardUnitInfo::kOrderIDFieldNumber;
const int GC_DecorBoardUnitInfo::kDesignPlanIDFieldNumber;
const int GC_DecorBoardUnitInfo::kDecorBoardUnitIDFieldNumber;
const int GC_DecorBoardUnitInfo::kDecorBoardIDFieldNumber;
const int GC_DecorBoardUnitInfo::kDecorBoardUnitIndexFieldNumber;
const int GC_DecorBoardUnitInfo::kFactoryIDFieldNumber;
const int GC_DecorBoardUnitInfo::kVerCodeFieldNumber;
const int GC_DecorBoardUnitInfo::kIsUseDoorFieldNumber;
const int GC_DecorBoardUnitInfo::kDoorMatPlanIDFieldNumber;
const int GC_DecorBoardUnitInfo::kCabMatPlanIDFieldNumber;
const int GC_DecorBoardUnitInfo::kDoorIDFieldNumber;
const int GC_DecorBoardUnitInfo::kTargetTypeFieldNumber;
const int GC_DecorBoardUnitInfo::kMatIDFieldNumber;
const int GC_DecorBoardUnitInfo::kMatGTypeFieldNumber;
const int GC_DecorBoardUnitInfo::kSupplyTypeFieldNumber;
const int GC_DecorBoardUnitInfo::kSealRuleIDFieldNumber;
const int GC_DecorBoardUnitInfo::kModelIDFieldNumber;
const int GC_DecorBoardUnitInfo::kXLenFieldNumber;
const int GC_DecorBoardUnitInfo::kYLenFieldNumber;
const int GC_DecorBoardUnitInfo::kZLenFieldNumber;
const int GC_DecorBoardUnitInfo::kXOffsetLenFieldNumber;
const int GC_DecorBoardUnitInfo::kYOffsetLenFieldNumber;
const int GC_DecorBoardUnitInfo::kZOffsetLenFieldNumber;
const int GC_DecorBoardUnitInfo::kCreatorIDFieldNumber;
const int GC_DecorBoardUnitInfo::kUpdaterIDFieldNumber;
const int GC_DecorBoardUnitInfo::kCreateTimeFieldNumber;
const int GC_DecorBoardUnitInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_DecorBoardUnitInfo::GC_DecorBoardUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_DecorBoardUnitInfo::InitAsDefaultInstance() {
}

GC_DecorBoardUnitInfo::GC_DecorBoardUnitInfo(const GC_DecorBoardUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_DecorBoardUnitInfo::SharedCtor() {
  _cached_size_ = 0;
  designdecorboardunitid_ = 0;
  designdecorboardid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  decorboardunitid_ = 0;
  decorboardid_ = 0;
  decorboardunitindex_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  isusedoor_ = false;
  doormatplanid_ = 0;
  cabmatplanid_ = 0;
  doorid_ = 0;
  targettype_ = 0;
  matid_ = 0;
  matgtype_ = 0;
  supplytype_ = 0;
  sealruleid_ = 0;
  modelid_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  xoffsetlen_ = 0;
  yoffsetlen_ = 0;
  zoffsetlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_DecorBoardUnitInfo::~GC_DecorBoardUnitInfo() {
  SharedDtor();
}

void GC_DecorBoardUnitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_DecorBoardUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_DecorBoardUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_DecorBoardUnitInfo_descriptor_;
}

const GC_DecorBoardUnitInfo& GC_DecorBoardUnitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_DecorBoardUnitInfo* GC_DecorBoardUnitInfo::default_instance_ = NULL;

GC_DecorBoardUnitInfo* GC_DecorBoardUnitInfo::New() const {
  return new GC_DecorBoardUnitInfo;
}

void GC_DecorBoardUnitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designdecorboardunitid_ = 0;
    designdecorboardid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    decorboardunitid_ = 0;
    decorboardid_ = 0;
    decorboardunitindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    isusedoor_ = false;
    doormatplanid_ = 0;
    cabmatplanid_ = 0;
    doorid_ = 0;
    targettype_ = 0;
    matid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    matgtype_ = 0;
    supplytype_ = 0;
    sealruleid_ = 0;
    modelid_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    xoffsetlen_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    yoffsetlen_ = 0;
    zoffsetlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_DecorBoardUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignDecorBoardUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designdecorboardunitid_)));
          set_has_designdecorboardunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DesignDecorBoardID;
        break;
      }

      // required int32 DesignDecorBoardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignDecorBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designdecorboardid_)));
          set_has_designdecorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DecorBoardUnitID;
        break;
      }

      // required int32 DecorBoardUnitID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorBoardUnitID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardunitid_)));
          set_has_decorboardunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_DecorBoardID;
        break;
      }

      // required int32 DecorBoardID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardid_)));
          set_has_decorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DecorBoardUnitIndex;
        break;
      }

      // required int32 DecorBoardUnitIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorBoardUnitIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardunitindex_)));
          set_has_decorboardunitindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_IsUseDoor;
        break;
      }

      // required bool IsUseDoor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUseDoor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusedoor_)));
          set_has_isusedoor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_DoorMatPlanID;
        break;
      }

      // required int32 DoorMatPlanID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doormatplanid_)));
          set_has_doormatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CabMatPlanID;
        break;
      }

      // required int32 CabMatPlanID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabmatplanid_)));
          set_has_cabmatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_DoorID;
        break;
      }

      // required int32 DoorID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorid_)));
          set_has_doorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_TargetType;
        break;
      }

      // required int32 TargetType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targettype_)));
          set_has_targettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_MatID;
        break;
      }

      // required int32 MatID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matid_)));
          set_has_matid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_MatGType;
        break;
      }

      // required int32 MatGType = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatGType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matgtype_)));
          set_has_matgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_SealRuleID;
        break;
      }

      // required int32 SealRuleID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealRuleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealruleid_)));
          set_has_sealruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_ModelID;
        break;
      }

      // required int32 ModelID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_XLen;
        break;
      }

      // required double XLen = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_YLen;
        break;
      }

      // required double YLen = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_XOffsetLen;
        break;
      }

      // required double XOffsetLen = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffsetlen_)));
          set_has_xoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_YOffsetLen;
        break;
      }

      // required double YOffsetLen = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yoffsetlen_)));
          set_has_yoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_ZOffsetLen;
        break;
      }

      // required double ZOffsetLen = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoffsetlen_)));
          set_has_zoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_DecorBoardUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignDecorBoardUnitID = 1;
  if (has_designdecorboardunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designdecorboardunitid(), output);
  }

  // required int32 DesignDecorBoardID = 2;
  if (has_designdecorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->designdecorboardid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 DecorBoardUnitID = 6;
  if (has_decorboardunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->decorboardunitid(), output);
  }

  // required int32 DecorBoardID = 7;
  if (has_decorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->decorboardid(), output);
  }

  // required int32 DecorBoardUnitIndex = 8;
  if (has_decorboardunitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->decorboardunitindex(), output);
  }

  // required int32 FactoryID = 9;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->factoryid(), output);
  }

  // required int64 VerCode = 10;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->vercode(), output);
  }

  // required bool IsUseDoor = 11;
  if (has_isusedoor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isusedoor(), output);
  }

  // required int32 DoorMatPlanID = 12;
  if (has_doormatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->doormatplanid(), output);
  }

  // required int32 CabMatPlanID = 13;
  if (has_cabmatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cabmatplanid(), output);
  }

  // required int32 DoorID = 14;
  if (has_doorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->doorid(), output);
  }

  // required int32 TargetType = 15;
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->targettype(), output);
  }

  // required int32 MatID = 16;
  if (has_matid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->matid(), output);
  }

  // required int32 MatGType = 17;
  if (has_matgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->matgtype(), output);
  }

  // required int32 SupplyType = 18;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->supplytype(), output);
  }

  // required int32 SealRuleID = 19;
  if (has_sealruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->sealruleid(), output);
  }

  // required int32 ModelID = 20;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->modelid(), output);
  }

  // required double XLen = 21;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->xlen(), output);
  }

  // required double YLen = 22;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->ylen(), output);
  }

  // required double ZLen = 23;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->zlen(), output);
  }

  // required double XOffsetLen = 24;
  if (has_xoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->xoffsetlen(), output);
  }

  // required double YOffsetLen = 25;
  if (has_yoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->yoffsetlen(), output);
  }

  // required double ZOffsetLen = 26;
  if (has_zoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->zoffsetlen(), output);
  }

  // required int32 CreatorID = 27;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->creatorid(), output);
  }

  // required int32 UpdaterID = 28;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->updaterid(), output);
  }

  // required int64 CreateTime = 29;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->createtime(), output);
  }

  // required int64 UpdateTime = 30;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_DecorBoardUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignDecorBoardUnitID = 1;
  if (has_designdecorboardunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designdecorboardunitid(), target);
  }

  // required int32 DesignDecorBoardID = 2;
  if (has_designdecorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->designdecorboardid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 DecorBoardUnitID = 6;
  if (has_decorboardunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->decorboardunitid(), target);
  }

  // required int32 DecorBoardID = 7;
  if (has_decorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->decorboardid(), target);
  }

  // required int32 DecorBoardUnitIndex = 8;
  if (has_decorboardunitindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->decorboardunitindex(), target);
  }

  // required int32 FactoryID = 9;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->factoryid(), target);
  }

  // required int64 VerCode = 10;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->vercode(), target);
  }

  // required bool IsUseDoor = 11;
  if (has_isusedoor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isusedoor(), target);
  }

  // required int32 DoorMatPlanID = 12;
  if (has_doormatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->doormatplanid(), target);
  }

  // required int32 CabMatPlanID = 13;
  if (has_cabmatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->cabmatplanid(), target);
  }

  // required int32 DoorID = 14;
  if (has_doorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->doorid(), target);
  }

  // required int32 TargetType = 15;
  if (has_targettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->targettype(), target);
  }

  // required int32 MatID = 16;
  if (has_matid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->matid(), target);
  }

  // required int32 MatGType = 17;
  if (has_matgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->matgtype(), target);
  }

  // required int32 SupplyType = 18;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->supplytype(), target);
  }

  // required int32 SealRuleID = 19;
  if (has_sealruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->sealruleid(), target);
  }

  // required int32 ModelID = 20;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->modelid(), target);
  }

  // required double XLen = 21;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->xlen(), target);
  }

  // required double YLen = 22;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->ylen(), target);
  }

  // required double ZLen = 23;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->zlen(), target);
  }

  // required double XOffsetLen = 24;
  if (has_xoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->xoffsetlen(), target);
  }

  // required double YOffsetLen = 25;
  if (has_yoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->yoffsetlen(), target);
  }

  // required double ZOffsetLen = 26;
  if (has_zoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->zoffsetlen(), target);
  }

  // required int32 CreatorID = 27;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->creatorid(), target);
  }

  // required int32 UpdaterID = 28;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->updaterid(), target);
  }

  // required int64 CreateTime = 29;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->createtime(), target);
  }

  // required int64 UpdateTime = 30;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_DecorBoardUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignDecorBoardUnitID = 1;
    if (has_designdecorboardunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designdecorboardunitid());
    }

    // required int32 DesignDecorBoardID = 2;
    if (has_designdecorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designdecorboardid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 DecorBoardUnitID = 6;
    if (has_decorboardunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardunitid());
    }

    // required int32 DecorBoardID = 7;
    if (has_decorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardid());
    }

    // required int32 DecorBoardUnitIndex = 8;
    if (has_decorboardunitindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardunitindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 FactoryID = 9;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 10;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required bool IsUseDoor = 11;
    if (has_isusedoor()) {
      total_size += 1 + 1;
    }

    // required int32 DoorMatPlanID = 12;
    if (has_doormatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doormatplanid());
    }

    // required int32 CabMatPlanID = 13;
    if (has_cabmatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabmatplanid());
    }

    // required int32 DoorID = 14;
    if (has_doorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorid());
    }

    // required int32 TargetType = 15;
    if (has_targettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targettype());
    }

    // required int32 MatID = 16;
    if (has_matid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 MatGType = 17;
    if (has_matgtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matgtype());
    }

    // required int32 SupplyType = 18;
    if (has_supplytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 SealRuleID = 19;
    if (has_sealruleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealruleid());
    }

    // required int32 ModelID = 20;
    if (has_modelid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

    // required double XLen = 21;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 22;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 23;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required double XOffsetLen = 24;
    if (has_xoffsetlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double YOffsetLen = 25;
    if (has_yoffsetlen()) {
      total_size += 2 + 8;
    }

    // required double ZOffsetLen = 26;
    if (has_zoffsetlen()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 27;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 28;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 29;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 30;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_DecorBoardUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_DecorBoardUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_DecorBoardUnitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_DecorBoardUnitInfo::MergeFrom(const GC_DecorBoardUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designdecorboardunitid()) {
      set_designdecorboardunitid(from.designdecorboardunitid());
    }
    if (from.has_designdecorboardid()) {
      set_designdecorboardid(from.designdecorboardid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_decorboardunitid()) {
      set_decorboardunitid(from.decorboardunitid());
    }
    if (from.has_decorboardid()) {
      set_decorboardid(from.decorboardid());
    }
    if (from.has_decorboardunitindex()) {
      set_decorboardunitindex(from.decorboardunitindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_isusedoor()) {
      set_isusedoor(from.isusedoor());
    }
    if (from.has_doormatplanid()) {
      set_doormatplanid(from.doormatplanid());
    }
    if (from.has_cabmatplanid()) {
      set_cabmatplanid(from.cabmatplanid());
    }
    if (from.has_doorid()) {
      set_doorid(from.doorid());
    }
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
    if (from.has_matid()) {
      set_matid(from.matid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_matgtype()) {
      set_matgtype(from.matgtype());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_sealruleid()) {
      set_sealruleid(from.sealruleid());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_xoffsetlen()) {
      set_xoffsetlen(from.xoffsetlen());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_yoffsetlen()) {
      set_yoffsetlen(from.yoffsetlen());
    }
    if (from.has_zoffsetlen()) {
      set_zoffsetlen(from.zoffsetlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_DecorBoardUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_DecorBoardUnitInfo::CopyFrom(const GC_DecorBoardUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_DecorBoardUnitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x3fffffff) != 0x3fffffff) return false;

  return true;
}

void GC_DecorBoardUnitInfo::Swap(GC_DecorBoardUnitInfo* other) {
  if (other != this) {
    std::swap(designdecorboardunitid_, other->designdecorboardunitid_);
    std::swap(designdecorboardid_, other->designdecorboardid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(decorboardunitid_, other->decorboardunitid_);
    std::swap(decorboardid_, other->decorboardid_);
    std::swap(decorboardunitindex_, other->decorboardunitindex_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(isusedoor_, other->isusedoor_);
    std::swap(doormatplanid_, other->doormatplanid_);
    std::swap(cabmatplanid_, other->cabmatplanid_);
    std::swap(doorid_, other->doorid_);
    std::swap(targettype_, other->targettype_);
    std::swap(matid_, other->matid_);
    std::swap(matgtype_, other->matgtype_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(sealruleid_, other->sealruleid_);
    std::swap(modelid_, other->modelid_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(xoffsetlen_, other->xoffsetlen_);
    std::swap(yoffsetlen_, other->yoffsetlen_);
    std::swap(zoffsetlen_, other->zoffsetlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_DecorBoardUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_DecorBoardUnitInfo_descriptor_;
  metadata.reflection = GC_DecorBoardUnitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_DecorBoardUnitSealInfo::kDesignDecorBoardUnitSealIDFieldNumber;
const int GC_DecorBoardUnitSealInfo::kDesignDecorBoardUnitIDFieldNumber;
const int GC_DecorBoardUnitSealInfo::kOrderCateFieldNumber;
const int GC_DecorBoardUnitSealInfo::kOrderIDFieldNumber;
const int GC_DecorBoardUnitSealInfo::kDesignPlanIDFieldNumber;
const int GC_DecorBoardUnitSealInfo::kFactoryIDFieldNumber;
const int GC_DecorBoardUnitSealInfo::kVerCodeFieldNumber;
const int GC_DecorBoardUnitSealInfo::kDecorBoardUnitIDFieldNumber;
const int GC_DecorBoardUnitSealInfo::kDecorBoardUnitSealIDFieldNumber;
const int GC_DecorBoardUnitSealInfo::kSealIndexFieldNumber;
const int GC_DecorBoardUnitSealInfo::kSealTypeFieldNumber;
const int GC_DecorBoardUnitSealInfo::kMaterialIDFieldNumber;
const int GC_DecorBoardUnitSealInfo::kPreMillFieldNumber;
#endif  // !_MSC_VER

GC_DecorBoardUnitSealInfo::GC_DecorBoardUnitSealInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_DecorBoardUnitSealInfo::InitAsDefaultInstance() {
}

GC_DecorBoardUnitSealInfo::GC_DecorBoardUnitSealInfo(const GC_DecorBoardUnitSealInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_DecorBoardUnitSealInfo::SharedCtor() {
  _cached_size_ = 0;
  designdecorboardunitsealid_ = 0;
  designdecorboardunitid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  decorboardunitid_ = 0;
  decorboardunitsealid_ = 0;
  sealindex_ = 0;
  sealtype_ = 0;
  materialid_ = 0;
  premill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_DecorBoardUnitSealInfo::~GC_DecorBoardUnitSealInfo() {
  SharedDtor();
}

void GC_DecorBoardUnitSealInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_DecorBoardUnitSealInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_DecorBoardUnitSealInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_DecorBoardUnitSealInfo_descriptor_;
}

const GC_DecorBoardUnitSealInfo& GC_DecorBoardUnitSealInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_DecorBoardUnitSealInfo* GC_DecorBoardUnitSealInfo::default_instance_ = NULL;

GC_DecorBoardUnitSealInfo* GC_DecorBoardUnitSealInfo::New() const {
  return new GC_DecorBoardUnitSealInfo;
}

void GC_DecorBoardUnitSealInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designdecorboardunitsealid_ = 0;
    designdecorboardunitid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    decorboardunitid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    decorboardunitsealid_ = 0;
    sealindex_ = 0;
    sealtype_ = 0;
    materialid_ = 0;
    premill_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_DecorBoardUnitSealInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignDecorBoardUnitSealID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designdecorboardunitsealid_)));
          set_has_designdecorboardunitsealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DesignDecorBoardUnitID;
        break;
      }

      // required int32 DesignDecorBoardUnitID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignDecorBoardUnitID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designdecorboardunitid_)));
          set_has_designdecorboardunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DecorBoardUnitID;
        break;
      }

      // required int32 DecorBoardUnitID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorBoardUnitID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardunitid_)));
          set_has_decorboardunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_DecorBoardUnitSealID;
        break;
      }

      // required int32 DecorBoardUnitSealID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorBoardUnitSealID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardunitsealid_)));
          set_has_decorboardunitsealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_SealIndex;
        break;
      }

      // required int32 SealIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealindex_)));
          set_has_sealindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SealType;
        break;
      }

      // required int32 SealType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealtype_)));
          set_has_sealtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_PreMill;
        break;
      }

      // required double PreMill = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreMill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premill_)));
          set_has_premill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_DecorBoardUnitSealInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignDecorBoardUnitSealID = 1;
  if (has_designdecorboardunitsealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designdecorboardunitsealid(), output);
  }

  // required int32 DesignDecorBoardUnitID = 2;
  if (has_designdecorboardunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->designdecorboardunitid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vercode(), output);
  }

  // required int32 DecorBoardUnitID = 8;
  if (has_decorboardunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->decorboardunitid(), output);
  }

  // required int32 DecorBoardUnitSealID = 9;
  if (has_decorboardunitsealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->decorboardunitsealid(), output);
  }

  // required int32 SealIndex = 10;
  if (has_sealindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sealindex(), output);
  }

  // required int32 SealType = 11;
  if (has_sealtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sealtype(), output);
  }

  // required int32 MaterialID = 12;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->materialid(), output);
  }

  // required double PreMill = 13;
  if (has_premill()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->premill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_DecorBoardUnitSealInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignDecorBoardUnitSealID = 1;
  if (has_designdecorboardunitsealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designdecorboardunitsealid(), target);
  }

  // required int32 DesignDecorBoardUnitID = 2;
  if (has_designdecorboardunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->designdecorboardunitid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vercode(), target);
  }

  // required int32 DecorBoardUnitID = 8;
  if (has_decorboardunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->decorboardunitid(), target);
  }

  // required int32 DecorBoardUnitSealID = 9;
  if (has_decorboardunitsealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->decorboardunitsealid(), target);
  }

  // required int32 SealIndex = 10;
  if (has_sealindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sealindex(), target);
  }

  // required int32 SealType = 11;
  if (has_sealtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sealtype(), target);
  }

  // required int32 MaterialID = 12;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->materialid(), target);
  }

  // required double PreMill = 13;
  if (has_premill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->premill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_DecorBoardUnitSealInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignDecorBoardUnitSealID = 1;
    if (has_designdecorboardunitsealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designdecorboardunitsealid());
    }

    // required int32 DesignDecorBoardUnitID = 2;
    if (has_designdecorboardunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designdecorboardunitid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 7;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 DecorBoardUnitID = 8;
    if (has_decorboardunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardunitid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 DecorBoardUnitSealID = 9;
    if (has_decorboardunitsealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardunitsealid());
    }

    // required int32 SealIndex = 10;
    if (has_sealindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealindex());
    }

    // required int32 SealType = 11;
    if (has_sealtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealtype());
    }

    // required int32 MaterialID = 12;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required double PreMill = 13;
    if (has_premill()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_DecorBoardUnitSealInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_DecorBoardUnitSealInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_DecorBoardUnitSealInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_DecorBoardUnitSealInfo::MergeFrom(const GC_DecorBoardUnitSealInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designdecorboardunitsealid()) {
      set_designdecorboardunitsealid(from.designdecorboardunitsealid());
    }
    if (from.has_designdecorboardunitid()) {
      set_designdecorboardunitid(from.designdecorboardunitid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_decorboardunitid()) {
      set_decorboardunitid(from.decorboardunitid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_decorboardunitsealid()) {
      set_decorboardunitsealid(from.decorboardunitsealid());
    }
    if (from.has_sealindex()) {
      set_sealindex(from.sealindex());
    }
    if (from.has_sealtype()) {
      set_sealtype(from.sealtype());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_premill()) {
      set_premill(from.premill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_DecorBoardUnitSealInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_DecorBoardUnitSealInfo::CopyFrom(const GC_DecorBoardUnitSealInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_DecorBoardUnitSealInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void GC_DecorBoardUnitSealInfo::Swap(GC_DecorBoardUnitSealInfo* other) {
  if (other != this) {
    std::swap(designdecorboardunitsealid_, other->designdecorboardunitsealid_);
    std::swap(designdecorboardunitid_, other->designdecorboardunitid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(decorboardunitid_, other->decorboardunitid_);
    std::swap(decorboardunitsealid_, other->decorboardunitsealid_);
    std::swap(sealindex_, other->sealindex_);
    std::swap(sealtype_, other->sealtype_);
    std::swap(materialid_, other->materialid_);
    std::swap(premill_, other->premill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_DecorBoardUnitSealInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_DecorBoardUnitSealInfo_descriptor_;
  metadata.reflection = GC_DecorBoardUnitSealInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_DecorInfo::kDesignDecorIDFieldNumber;
const int GC_DecorInfo::kOrderCateFieldNumber;
const int GC_DecorInfo::kDesignPlanIDFieldNumber;
const int GC_DecorInfo::kOrderIDFieldNumber;
const int GC_DecorInfo::kDecorIDFieldNumber;
const int GC_DecorInfo::kFactoryIDFieldNumber;
const int GC_DecorInfo::kVerCodeFieldNumber;
const int GC_DecorInfo::kHasMarkFieldNumber;
const int GC_DecorInfo::kIsVisibleFieldNumber;
const int GC_DecorInfo::kIsLockedFieldNumber;
const int GC_DecorInfo::kSupplyTypeFieldNumber;
const int GC_DecorInfo::kGTypeIDFieldNumber;
const int GC_DecorInfo::kDockObjIDFieldNumber;
const int GC_DecorInfo::kDockObjTypeFieldNumber;
const int GC_DecorInfo::kDockXPosFieldNumber;
const int GC_DecorInfo::kDockYPosFieldNumber;
const int GC_DecorInfo::kXLenFieldNumber;
const int GC_DecorInfo::kYLenFieldNumber;
const int GC_DecorInfo::kZLenFieldNumber;
const int GC_DecorInfo::kYPosFieldNumber;
const int GC_DecorInfo::kCreatorIDFieldNumber;
const int GC_DecorInfo::kUpdaterIDFieldNumber;
const int GC_DecorInfo::kCreateTimeFieldNumber;
const int GC_DecorInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_DecorInfo::GC_DecorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_DecorInfo::InitAsDefaultInstance() {
}

GC_DecorInfo::GC_DecorInfo(const GC_DecorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_DecorInfo::SharedCtor() {
  _cached_size_ = 0;
  designdecorid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  decorid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  hasmark_ = false;
  isvisible_ = false;
  islocked_ = false;
  supplytype_ = 0;
  gtypeid_ = 0;
  dockobjid_ = 0;
  dockobjtype_ = 0;
  dockxpos_ = 0;
  dockypos_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  ypos_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_DecorInfo::~GC_DecorInfo() {
  SharedDtor();
}

void GC_DecorInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_DecorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_DecorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_DecorInfo_descriptor_;
}

const GC_DecorInfo& GC_DecorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_DecorInfo* GC_DecorInfo::default_instance_ = NULL;

GC_DecorInfo* GC_DecorInfo::New() const {
  return new GC_DecorInfo;
}

void GC_DecorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designdecorid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    decorid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    hasmark_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isvisible_ = false;
    islocked_ = false;
    supplytype_ = 0;
    gtypeid_ = 0;
    dockobjid_ = 0;
    dockobjtype_ = 0;
    dockxpos_ = 0;
    dockypos_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    ypos_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_DecorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignDecorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designdecorid_)));
          set_has_designdecorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DecorID;
        break;
      }

      // required int32 DecorID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorid_)));
          set_has_decorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_HasMark;
        break;
      }

      // required bool HasMark = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmark_)));
          set_has_hasmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_DockObjID;
        break;
      }

      // required int32 DockObjID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjid_)));
          set_has_dockobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_DockObjType;
        break;
      }

      // required int32 DockObjType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjtype_)));
          set_has_dockobjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_DockXPos;
        break;
      }

      // required double DockXPos = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockXPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockxpos_)));
          set_has_dockxpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_DockYPos;
        break;
      }

      // required double DockYPos = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockYPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockypos_)));
          set_has_dockypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_XLen;
        break;
      }

      // required double XLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_YLen;
        break;
      }

      // required double YLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_YPos;
        break;
      }

      // required double YPos = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_DecorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignDecorID = 1;
  if (has_designdecorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designdecorid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DecorID = 5;
  if (has_decorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->decorid(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vercode(), output);
  }

  // required bool HasMark = 8;
  if (has_hasmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->hasmark(), output);
  }

  // required bool IsVisible = 9;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isvisible(), output);
  }

  // required bool IsLocked = 10;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->islocked(), output);
  }

  // required int32 SupplyType = 11;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->supplytype(), output);
  }

  // required int32 GTypeID = 12;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gtypeid(), output);
  }

  // required int32 DockObjID = 13;
  if (has_dockobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->dockobjid(), output);
  }

  // required int32 DockObjType = 14;
  if (has_dockobjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->dockobjtype(), output);
  }

  // required double DockXPos = 15;
  if (has_dockxpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->dockxpos(), output);
  }

  // required double DockYPos = 16;
  if (has_dockypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->dockypos(), output);
  }

  // required double XLen = 17;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->xlen(), output);
  }

  // required double YLen = 18;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->ylen(), output);
  }

  // required double ZLen = 19;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->zlen(), output);
  }

  // required double YPos = 20;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->ypos(), output);
  }

  // required int32 CreatorID = 21;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->creatorid(), output);
  }

  // required int32 UpdaterID = 22;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->updaterid(), output);
  }

  // required int64 CreateTime = 23;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->createtime(), output);
  }

  // required int64 UpdateTime = 24;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_DecorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignDecorID = 1;
  if (has_designdecorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designdecorid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DecorID = 5;
  if (has_decorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->decorid(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vercode(), target);
  }

  // required bool HasMark = 8;
  if (has_hasmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->hasmark(), target);
  }

  // required bool IsVisible = 9;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isvisible(), target);
  }

  // required bool IsLocked = 10;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->islocked(), target);
  }

  // required int32 SupplyType = 11;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->supplytype(), target);
  }

  // required int32 GTypeID = 12;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gtypeid(), target);
  }

  // required int32 DockObjID = 13;
  if (has_dockobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->dockobjid(), target);
  }

  // required int32 DockObjType = 14;
  if (has_dockobjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->dockobjtype(), target);
  }

  // required double DockXPos = 15;
  if (has_dockxpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->dockxpos(), target);
  }

  // required double DockYPos = 16;
  if (has_dockypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->dockypos(), target);
  }

  // required double XLen = 17;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->xlen(), target);
  }

  // required double YLen = 18;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->ylen(), target);
  }

  // required double ZLen = 19;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->zlen(), target);
  }

  // required double YPos = 20;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->ypos(), target);
  }

  // required int32 CreatorID = 21;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->creatorid(), target);
  }

  // required int32 UpdaterID = 22;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->updaterid(), target);
  }

  // required int64 CreateTime = 23;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->createtime(), target);
  }

  // required int64 UpdateTime = 24;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_DecorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignDecorID = 1;
    if (has_designdecorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designdecorid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DecorID = 5;
    if (has_decorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorid());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 7;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required bool HasMark = 8;
    if (has_hasmark()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool IsVisible = 9;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required bool IsLocked = 10;
    if (has_islocked()) {
      total_size += 1 + 1;
    }

    // required int32 SupplyType = 11;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 GTypeID = 12;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required int32 DockObjID = 13;
    if (has_dockobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjid());
    }

    // required int32 DockObjType = 14;
    if (has_dockobjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjtype());
    }

    // required double DockXPos = 15;
    if (has_dockxpos()) {
      total_size += 1 + 8;
    }

    // required double DockYPos = 16;
    if (has_dockypos()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double XLen = 17;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 18;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 19;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required double YPos = 20;
    if (has_ypos()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 21;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 22;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 23;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 24;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_DecorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_DecorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_DecorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_DecorInfo::MergeFrom(const GC_DecorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designdecorid()) {
      set_designdecorid(from.designdecorid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_decorid()) {
      set_decorid(from.decorid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_hasmark()) {
      set_hasmark(from.hasmark());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_dockobjid()) {
      set_dockobjid(from.dockobjid());
    }
    if (from.has_dockobjtype()) {
      set_dockobjtype(from.dockobjtype());
    }
    if (from.has_dockxpos()) {
      set_dockxpos(from.dockxpos());
    }
    if (from.has_dockypos()) {
      set_dockypos(from.dockypos());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_DecorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_DecorInfo::CopyFrom(const GC_DecorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_DecorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00ffffff) != 0x00ffffff) return false;

  return true;
}

void GC_DecorInfo::Swap(GC_DecorInfo* other) {
  if (other != this) {
    std::swap(designdecorid_, other->designdecorid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(decorid_, other->decorid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(hasmark_, other->hasmark_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(dockobjid_, other->dockobjid_);
    std::swap(dockobjtype_, other->dockobjtype_);
    std::swap(dockxpos_, other->dockxpos_);
    std::swap(dockypos_, other->dockypos_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(ypos_, other->ypos_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_DecorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_DecorInfo_descriptor_;
  metadata.reflection = GC_DecorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_DecorLineInfo::kDesignDecorLineIDFieldNumber;
const int GC_DecorLineInfo::kOrderCateFieldNumber;
const int GC_DecorLineInfo::kDesignPlanIDFieldNumber;
const int GC_DecorLineInfo::kOrderIDFieldNumber;
const int GC_DecorLineInfo::kDecorLineIDFieldNumber;
const int GC_DecorLineInfo::kFactoryIDFieldNumber;
const int GC_DecorLineInfo::kVerCodeFieldNumber;
const int GC_DecorLineInfo::kGTypeIDFieldNumber;
const int GC_DecorLineInfo::kDockObjIDFieldNumber;
const int GC_DecorLineInfo::kDockObjTypeFieldNumber;
const int GC_DecorLineInfo::kDockXPosFieldNumber;
const int GC_DecorLineInfo::kDockYPosFieldNumber;
const int GC_DecorLineInfo::kMaterialIDFieldNumber;
const int GC_DecorLineInfo::kHasMarkFieldNumber;
const int GC_DecorLineInfo::kIsVisibleFieldNumber;
const int GC_DecorLineInfo::kIsLockedFieldNumber;
const int GC_DecorLineInfo::kXLenFieldNumber;
const int GC_DecorLineInfo::kYLenFieldNumber;
const int GC_DecorLineInfo::kZLenFieldNumber;
const int GC_DecorLineInfo::kCreatorIDFieldNumber;
const int GC_DecorLineInfo::kUpdaterIDFieldNumber;
const int GC_DecorLineInfo::kCreateTimeFieldNumber;
const int GC_DecorLineInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_DecorLineInfo::GC_DecorLineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_DecorLineInfo::InitAsDefaultInstance() {
}

GC_DecorLineInfo::GC_DecorLineInfo(const GC_DecorLineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_DecorLineInfo::SharedCtor() {
  _cached_size_ = 0;
  designdecorlineid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  decorlineid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  gtypeid_ = 0;
  dockobjid_ = 0;
  dockobjtype_ = 0;
  dockxpos_ = 0;
  dockypos_ = 0;
  materialid_ = 0;
  hasmark_ = false;
  isvisible_ = false;
  islocked_ = false;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_DecorLineInfo::~GC_DecorLineInfo() {
  SharedDtor();
}

void GC_DecorLineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_DecorLineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_DecorLineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_DecorLineInfo_descriptor_;
}

const GC_DecorLineInfo& GC_DecorLineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_DecorLineInfo* GC_DecorLineInfo::default_instance_ = NULL;

GC_DecorLineInfo* GC_DecorLineInfo::New() const {
  return new GC_DecorLineInfo;
}

void GC_DecorLineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designdecorlineid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    decorlineid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    gtypeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dockobjid_ = 0;
    dockobjtype_ = 0;
    dockxpos_ = 0;
    dockypos_ = 0;
    materialid_ = 0;
    hasmark_ = false;
    isvisible_ = false;
    islocked_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_DecorLineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignDecorLineID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designdecorlineid_)));
          set_has_designdecorlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DecorLineID;
        break;
      }

      // required int32 DecorLineID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorLineID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorlineid_)));
          set_has_decorlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_DockObjID;
        break;
      }

      // required int32 DockObjID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjid_)));
          set_has_dockobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_DockObjType;
        break;
      }

      // required int32 DockObjType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjtype_)));
          set_has_dockobjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_DockXPos;
        break;
      }

      // required double DockXPos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockXPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockxpos_)));
          set_has_dockxpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_DockYPos;
        break;
      }

      // required double DockYPos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockYPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockypos_)));
          set_has_dockypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_HasMark;
        break;
      }

      // required bool HasMark = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmark_)));
          set_has_hasmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_XLen;
        break;
      }

      // required double XLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_YLen;
        break;
      }

      // required double YLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_DecorLineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignDecorLineID = 1;
  if (has_designdecorlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designdecorlineid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DecorLineID = 5;
  if (has_decorlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->decorlineid(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vercode(), output);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gtypeid(), output);
  }

  // required int32 DockObjID = 9;
  if (has_dockobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dockobjid(), output);
  }

  // required int32 DockObjType = 10;
  if (has_dockobjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dockobjtype(), output);
  }

  // required double DockXPos = 11;
  if (has_dockxpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->dockxpos(), output);
  }

  // required double DockYPos = 12;
  if (has_dockypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->dockypos(), output);
  }

  // required int32 MaterialID = 13;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->materialid(), output);
  }

  // required bool HasMark = 14;
  if (has_hasmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->hasmark(), output);
  }

  // required bool IsVisible = 15;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isvisible(), output);
  }

  // required bool IsLocked = 16;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->islocked(), output);
  }

  // required double XLen = 17;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->xlen(), output);
  }

  // required double YLen = 18;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->ylen(), output);
  }

  // required double ZLen = 19;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->zlen(), output);
  }

  // required int32 CreatorID = 20;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->creatorid(), output);
  }

  // required int32 UpdaterID = 21;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->updaterid(), output);
  }

  // required int64 CreateTime = 22;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->createtime(), output);
  }

  // required int64 UpdateTime = 23;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_DecorLineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignDecorLineID = 1;
  if (has_designdecorlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designdecorlineid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DecorLineID = 5;
  if (has_decorlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->decorlineid(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vercode(), target);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gtypeid(), target);
  }

  // required int32 DockObjID = 9;
  if (has_dockobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dockobjid(), target);
  }

  // required int32 DockObjType = 10;
  if (has_dockobjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dockobjtype(), target);
  }

  // required double DockXPos = 11;
  if (has_dockxpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->dockxpos(), target);
  }

  // required double DockYPos = 12;
  if (has_dockypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->dockypos(), target);
  }

  // required int32 MaterialID = 13;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->materialid(), target);
  }

  // required bool HasMark = 14;
  if (has_hasmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->hasmark(), target);
  }

  // required bool IsVisible = 15;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isvisible(), target);
  }

  // required bool IsLocked = 16;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->islocked(), target);
  }

  // required double XLen = 17;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->xlen(), target);
  }

  // required double YLen = 18;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->ylen(), target);
  }

  // required double ZLen = 19;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->zlen(), target);
  }

  // required int32 CreatorID = 20;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->creatorid(), target);
  }

  // required int32 UpdaterID = 21;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->updaterid(), target);
  }

  // required int64 CreateTime = 22;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->createtime(), target);
  }

  // required int64 UpdateTime = 23;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_DecorLineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignDecorLineID = 1;
    if (has_designdecorlineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designdecorlineid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DecorLineID = 5;
    if (has_decorlineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorlineid());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 7;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 GTypeID = 8;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 DockObjID = 9;
    if (has_dockobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjid());
    }

    // required int32 DockObjType = 10;
    if (has_dockobjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjtype());
    }

    // required double DockXPos = 11;
    if (has_dockxpos()) {
      total_size += 1 + 8;
    }

    // required double DockYPos = 12;
    if (has_dockypos()) {
      total_size += 1 + 8;
    }

    // required int32 MaterialID = 13;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required bool HasMark = 14;
    if (has_hasmark()) {
      total_size += 1 + 1;
    }

    // required bool IsVisible = 15;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required bool IsLocked = 16;
    if (has_islocked()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double XLen = 17;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 18;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 19;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 20;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 21;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 22;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 23;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_DecorLineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_DecorLineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_DecorLineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_DecorLineInfo::MergeFrom(const GC_DecorLineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designdecorlineid()) {
      set_designdecorlineid(from.designdecorlineid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_decorlineid()) {
      set_decorlineid(from.decorlineid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dockobjid()) {
      set_dockobjid(from.dockobjid());
    }
    if (from.has_dockobjtype()) {
      set_dockobjtype(from.dockobjtype());
    }
    if (from.has_dockxpos()) {
      set_dockxpos(from.dockxpos());
    }
    if (from.has_dockypos()) {
      set_dockypos(from.dockypos());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_hasmark()) {
      set_hasmark(from.hasmark());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_DecorLineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_DecorLineInfo::CopyFrom(const GC_DecorLineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_DecorLineInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;

  return true;
}

void GC_DecorLineInfo::Swap(GC_DecorLineInfo* other) {
  if (other != this) {
    std::swap(designdecorlineid_, other->designdecorlineid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(decorlineid_, other->decorlineid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(dockobjid_, other->dockobjid_);
    std::swap(dockobjtype_, other->dockobjtype_);
    std::swap(dockxpos_, other->dockxpos_);
    std::swap(dockypos_, other->dockypos_);
    std::swap(materialid_, other->materialid_);
    std::swap(hasmark_, other->hasmark_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_DecorLineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_DecorLineInfo_descriptor_;
  metadata.reflection = GC_DecorLineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_DesignPlanInfo::kDesignPlanIDFieldNumber;
const int GC_DesignPlanInfo::kOrderCateFieldNumber;
const int GC_DesignPlanInfo::kOrderIDFieldNumber;
const int GC_DesignPlanInfo::kFactoryIDFieldNumber;
const int GC_DesignPlanInfo::kVerCodeFieldNumber;
const int GC_DesignPlanInfo::kCurScaleFieldNumber;
const int GC_DesignPlanInfo::kIsActiveFieldNumber;
const int GC_DesignPlanInfo::kSkyDecorIDFieldNumber;
const int GC_DesignPlanInfo::kFloorDecorIDFieldNumber;
const int GC_DesignPlanInfo::kWallDecorIDFieldNumber;
const int GC_DesignPlanInfo::kDesignerIDFieldNumber;
const int GC_DesignPlanInfo::kUpdaterIDFieldNumber;
const int GC_DesignPlanInfo::kCreateTimeFieldNumber;
const int GC_DesignPlanInfo::kUpdateTimeFieldNumber;
const int GC_DesignPlanInfo::kDesignPlanNameFieldNumber;
const int GC_DesignPlanInfo::kDesignPlanMemoFieldNumber;
#endif  // !_MSC_VER

GC_DesignPlanInfo::GC_DesignPlanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_DesignPlanInfo::InitAsDefaultInstance() {
}

GC_DesignPlanInfo::GC_DesignPlanInfo(const GC_DesignPlanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_DesignPlanInfo::SharedCtor() {
  _cached_size_ = 0;
  designplanid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  curscale_ = 0;
  isactive_ = false;
  skydecorid_ = 0;
  floordecorid_ = 0;
  walldecorid_ = 0;
  designerid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  designplanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  designplanmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_DesignPlanInfo::~GC_DesignPlanInfo() {
  SharedDtor();
}

void GC_DesignPlanInfo::SharedDtor() {
  if (designplanname_ != &::google::protobuf::internal::kEmptyString) {
    delete designplanname_;
  }
  if (designplanmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete designplanmemo_;
  }
  if (this != default_instance_) {
  }
}

void GC_DesignPlanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_DesignPlanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_DesignPlanInfo_descriptor_;
}

const GC_DesignPlanInfo& GC_DesignPlanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_DesignPlanInfo* GC_DesignPlanInfo::default_instance_ = NULL;

GC_DesignPlanInfo* GC_DesignPlanInfo::New() const {
  return new GC_DesignPlanInfo;
}

void GC_DesignPlanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designplanid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    curscale_ = 0;
    isactive_ = false;
    skydecorid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    floordecorid_ = 0;
    walldecorid_ = 0;
    designerid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_designplanname()) {
      if (designplanname_ != &::google::protobuf::internal::kEmptyString) {
        designplanname_->clear();
      }
    }
    if (has_designplanmemo()) {
      if (designplanmemo_ != &::google::protobuf::internal::kEmptyString) {
        designplanmemo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_DesignPlanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignPlanID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_CurScale;
        break;
      }

      // required double CurScale = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CurScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curscale_)));
          set_has_curscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_SkyDecorID;
        break;
      }

      // required int32 SkyDecorID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkyDecorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skydecorid_)));
          set_has_skydecorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FloorDecorID;
        break;
      }

      // required int32 FloorDecorID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FloorDecorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floordecorid_)));
          set_has_floordecorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_WallDecorID;
        break;
      }

      // required int32 WallDecorID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WallDecorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &walldecorid_)));
          set_has_walldecorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_DesignerID;
        break;
      }

      // required int32 DesignerID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designerid_)));
          set_has_designerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_DesignPlanName;
        break;
      }

      // required string DesignPlanName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DesignPlanName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_designplanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->designplanname().data(), this->designplanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_DesignPlanMemo;
        break;
      }

      // required string DesignPlanMemo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DesignPlanMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_designplanmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->designplanmemo().data(), this->designplanmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_DesignPlanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignPlanID = 1;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designplanid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int64 OrderID = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->orderid(), output);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->factoryid(), output);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->vercode(), output);
  }

  // required double CurScale = 6;
  if (has_curscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->curscale(), output);
  }

  // required bool IsActive = 7;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isactive(), output);
  }

  // required int32 SkyDecorID = 8;
  if (has_skydecorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->skydecorid(), output);
  }

  // required int32 FloorDecorID = 9;
  if (has_floordecorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->floordecorid(), output);
  }

  // required int32 WallDecorID = 10;
  if (has_walldecorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->walldecorid(), output);
  }

  // required int32 DesignerID = 11;
  if (has_designerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->designerid(), output);
  }

  // required int32 UpdaterID = 12;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->updaterid(), output);
  }

  // required int64 CreateTime = 13;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->createtime(), output);
  }

  // required int64 UpdateTime = 14;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->updatetime(), output);
  }

  // required string DesignPlanName = 15;
  if (has_designplanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->designplanname().data(), this->designplanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->designplanname(), output);
  }

  // required string DesignPlanMemo = 16;
  if (has_designplanmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->designplanmemo().data(), this->designplanmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->designplanmemo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_DesignPlanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignPlanID = 1;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designplanid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int64 OrderID = 3;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->orderid(), target);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->factoryid(), target);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->vercode(), target);
  }

  // required double CurScale = 6;
  if (has_curscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->curscale(), target);
  }

  // required bool IsActive = 7;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isactive(), target);
  }

  // required int32 SkyDecorID = 8;
  if (has_skydecorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->skydecorid(), target);
  }

  // required int32 FloorDecorID = 9;
  if (has_floordecorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->floordecorid(), target);
  }

  // required int32 WallDecorID = 10;
  if (has_walldecorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->walldecorid(), target);
  }

  // required int32 DesignerID = 11;
  if (has_designerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->designerid(), target);
  }

  // required int32 UpdaterID = 12;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->updaterid(), target);
  }

  // required int64 CreateTime = 13;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->createtime(), target);
  }

  // required int64 UpdateTime = 14;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->updatetime(), target);
  }

  // required string DesignPlanName = 15;
  if (has_designplanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->designplanname().data(), this->designplanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->designplanname(), target);
  }

  // required string DesignPlanMemo = 16;
  if (has_designplanmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->designplanmemo().data(), this->designplanmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->designplanmemo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_DesignPlanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignPlanID = 1;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 FactoryID = 4;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 5;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required double CurScale = 6;
    if (has_curscale()) {
      total_size += 1 + 8;
    }

    // required bool IsActive = 7;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required int32 SkyDecorID = 8;
    if (has_skydecorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skydecorid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 FloorDecorID = 9;
    if (has_floordecorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floordecorid());
    }

    // required int32 WallDecorID = 10;
    if (has_walldecorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->walldecorid());
    }

    // required int32 DesignerID = 11;
    if (has_designerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designerid());
    }

    // required int32 UpdaterID = 12;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 13;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 14;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string DesignPlanName = 15;
    if (has_designplanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->designplanname());
    }

    // required string DesignPlanMemo = 16;
    if (has_designplanmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->designplanmemo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_DesignPlanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_DesignPlanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_DesignPlanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_DesignPlanInfo::MergeFrom(const GC_DesignPlanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_curscale()) {
      set_curscale(from.curscale());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_skydecorid()) {
      set_skydecorid(from.skydecorid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_floordecorid()) {
      set_floordecorid(from.floordecorid());
    }
    if (from.has_walldecorid()) {
      set_walldecorid(from.walldecorid());
    }
    if (from.has_designerid()) {
      set_designerid(from.designerid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_designplanname()) {
      set_designplanname(from.designplanname());
    }
    if (from.has_designplanmemo()) {
      set_designplanmemo(from.designplanmemo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_DesignPlanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_DesignPlanInfo::CopyFrom(const GC_DesignPlanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_DesignPlanInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void GC_DesignPlanInfo::Swap(GC_DesignPlanInfo* other) {
  if (other != this) {
    std::swap(designplanid_, other->designplanid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(curscale_, other->curscale_);
    std::swap(isactive_, other->isactive_);
    std::swap(skydecorid_, other->skydecorid_);
    std::swap(floordecorid_, other->floordecorid_);
    std::swap(walldecorid_, other->walldecorid_);
    std::swap(designerid_, other->designerid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(designplanname_, other->designplanname_);
    std::swap(designplanmemo_, other->designplanmemo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_DesignPlanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_DesignPlanInfo_descriptor_;
  metadata.reflection = GC_DesignPlanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_FittingInfo::kDesignFittingIDFieldNumber;
const int GC_FittingInfo::kOrderCateFieldNumber;
const int GC_FittingInfo::kDesignPlanIDFieldNumber;
const int GC_FittingInfo::kOrderIDFieldNumber;
const int GC_FittingInfo::kFactoryIDFieldNumber;
const int GC_FittingInfo::kVerCodeFieldNumber;
const int GC_FittingInfo::kFittingIDFieldNumber;
const int GC_FittingInfo::kGTypeIDFieldNumber;
const int GC_FittingInfo::kSupplyTypeFieldNumber;
const int GC_FittingInfo::kFittingCountFieldNumber;
const int GC_FittingInfo::kCreatorIDFieldNumber;
const int GC_FittingInfo::kUpdaterIDFieldNumber;
const int GC_FittingInfo::kCreateTimeFieldNumber;
const int GC_FittingInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_FittingInfo::GC_FittingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_FittingInfo::InitAsDefaultInstance() {
}

GC_FittingInfo::GC_FittingInfo(const GC_FittingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_FittingInfo::SharedCtor() {
  _cached_size_ = 0;
  designfittingid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  fittingid_ = 0;
  gtypeid_ = 0;
  supplytype_ = 0;
  fittingcount_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_FittingInfo::~GC_FittingInfo() {
  SharedDtor();
}

void GC_FittingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_FittingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_FittingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_FittingInfo_descriptor_;
}

const GC_FittingInfo& GC_FittingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_FittingInfo* GC_FittingInfo::default_instance_ = NULL;

GC_FittingInfo* GC_FittingInfo::New() const {
  return new GC_FittingInfo;
}

void GC_FittingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designfittingid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    fittingid_ = 0;
    gtypeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    supplytype_ = 0;
    fittingcount_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_FittingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignFittingID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designfittingid_)));
          set_has_designfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FittingID;
        break;
      }

      // required int32 FittingID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fittingid_)));
          set_has_fittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_FittingCount;
        break;
      }

      // required int32 FittingCount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FittingCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fittingcount_)));
          set_has_fittingcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_FittingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignFittingID = 1;
  if (has_designfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designfittingid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  // required int64 VerCode = 6;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->vercode(), output);
  }

  // required int32 FittingID = 7;
  if (has_fittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fittingid(), output);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gtypeid(), output);
  }

  // required int32 SupplyType = 9;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->supplytype(), output);
  }

  // required int32 FittingCount = 10;
  if (has_fittingcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fittingcount(), output);
  }

  // required int32 CreatorID = 11;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->creatorid(), output);
  }

  // required int32 UpdaterID = 12;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->updaterid(), output);
  }

  // required int64 CreateTime = 13;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->createtime(), output);
  }

  // required int64 UpdateTime = 14;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_FittingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignFittingID = 1;
  if (has_designfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designfittingid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  // required int64 VerCode = 6;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->vercode(), target);
  }

  // required int32 FittingID = 7;
  if (has_fittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fittingid(), target);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gtypeid(), target);
  }

  // required int32 SupplyType = 9;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->supplytype(), target);
  }

  // required int32 FittingCount = 10;
  if (has_fittingcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fittingcount(), target);
  }

  // required int32 CreatorID = 11;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->creatorid(), target);
  }

  // required int32 UpdaterID = 12;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->updaterid(), target);
  }

  // required int64 CreateTime = 13;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->createtime(), target);
  }

  // required int64 UpdateTime = 14;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_FittingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignFittingID = 1;
    if (has_designfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designfittingid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 6;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FittingID = 7;
    if (has_fittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fittingid());
    }

    // required int32 GTypeID = 8;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 SupplyType = 9;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 FittingCount = 10;
    if (has_fittingcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fittingcount());
    }

    // required int32 CreatorID = 11;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 12;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 13;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 14;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_FittingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_FittingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_FittingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_FittingInfo::MergeFrom(const GC_FittingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designfittingid()) {
      set_designfittingid(from.designfittingid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_fittingid()) {
      set_fittingid(from.fittingid());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_fittingcount()) {
      set_fittingcount(from.fittingcount());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_FittingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_FittingInfo::CopyFrom(const GC_FittingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_FittingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void GC_FittingInfo::Swap(GC_FittingInfo* other) {
  if (other != this) {
    std::swap(designfittingid_, other->designfittingid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(fittingid_, other->fittingid_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(fittingcount_, other->fittingcount_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_FittingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_FittingInfo_descriptor_;
  metadata.reflection = GC_FittingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_HWFInfo::kDesignHWFIDFieldNumber;
const int GC_HWFInfo::kOrderCateFieldNumber;
const int GC_HWFInfo::kDesignPlanIDFieldNumber;
const int GC_HWFInfo::kOrderIDFieldNumber;
const int GC_HWFInfo::kHWFittingIDFieldNumber;
const int GC_HWFInfo::kFactoryIDFieldNumber;
const int GC_HWFInfo::kVerCodeFieldNumber;
const int GC_HWFInfo::kSupplyTypeFieldNumber;
const int GC_HWFInfo::kGTypeIDFieldNumber;
const int GC_HWFInfo::kUseCountFieldNumber;
const int GC_HWFInfo::kCreatorIDFieldNumber;
const int GC_HWFInfo::kUpdaterIDFieldNumber;
const int GC_HWFInfo::kCreateTimeFieldNumber;
const int GC_HWFInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_HWFInfo::GC_HWFInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_HWFInfo::InitAsDefaultInstance() {
}

GC_HWFInfo::GC_HWFInfo(const GC_HWFInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_HWFInfo::SharedCtor() {
  _cached_size_ = 0;
  designhwfid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  hwfittingid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  supplytype_ = 0;
  gtypeid_ = 0;
  usecount_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_HWFInfo::~GC_HWFInfo() {
  SharedDtor();
}

void GC_HWFInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_HWFInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_HWFInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_HWFInfo_descriptor_;
}

const GC_HWFInfo& GC_HWFInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_HWFInfo* GC_HWFInfo::default_instance_ = NULL;

GC_HWFInfo* GC_HWFInfo::New() const {
  return new GC_HWFInfo;
}

void GC_HWFInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designhwfid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    hwfittingid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    supplytype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gtypeid_ = 0;
    usecount_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_HWFInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignHWFID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designhwfid_)));
          set_has_designhwfid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_HWFittingID;
        break;
      }

      // required int32 HWFittingID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HWFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hwfittingid_)));
          set_has_hwfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_UseCount;
        break;
      }

      // required int32 UseCount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usecount_)));
          set_has_usecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_HWFInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignHWFID = 1;
  if (has_designhwfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designhwfid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 HWFittingID = 5;
  if (has_hwfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hwfittingid(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vercode(), output);
  }

  // required int32 SupplyType = 8;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->supplytype(), output);
  }

  // required int32 GTypeID = 9;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gtypeid(), output);
  }

  // required int32 UseCount = 10;
  if (has_usecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->usecount(), output);
  }

  // required int32 CreatorID = 11;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->creatorid(), output);
  }

  // required int32 UpdaterID = 12;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->updaterid(), output);
  }

  // required int64 CreateTime = 13;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->createtime(), output);
  }

  // required int64 UpdateTime = 14;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_HWFInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignHWFID = 1;
  if (has_designhwfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designhwfid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 HWFittingID = 5;
  if (has_hwfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hwfittingid(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vercode(), target);
  }

  // required int32 SupplyType = 8;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->supplytype(), target);
  }

  // required int32 GTypeID = 9;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gtypeid(), target);
  }

  // required int32 UseCount = 10;
  if (has_usecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->usecount(), target);
  }

  // required int32 CreatorID = 11;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->creatorid(), target);
  }

  // required int32 UpdaterID = 12;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->updaterid(), target);
  }

  // required int64 CreateTime = 13;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->createtime(), target);
  }

  // required int64 UpdateTime = 14;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_HWFInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignHWFID = 1;
    if (has_designhwfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designhwfid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 HWFittingID = 5;
    if (has_hwfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hwfittingid());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 7;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 SupplyType = 8;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 GTypeID = 9;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required int32 UseCount = 10;
    if (has_usecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usecount());
    }

    // required int32 CreatorID = 11;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 12;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 13;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 14;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_HWFInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_HWFInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_HWFInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_HWFInfo::MergeFrom(const GC_HWFInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designhwfid()) {
      set_designhwfid(from.designhwfid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_hwfittingid()) {
      set_hwfittingid(from.hwfittingid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_usecount()) {
      set_usecount(from.usecount());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_HWFInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_HWFInfo::CopyFrom(const GC_HWFInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_HWFInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void GC_HWFInfo::Swap(GC_HWFInfo* other) {
  if (other != this) {
    std::swap(designhwfid_, other->designhwfid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(hwfittingid_, other->hwfittingid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(usecount_, other->usecount_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_HWFInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_HWFInfo_descriptor_;
  metadata.reflection = GC_HWFInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_MarkInfo::kDesignMarkIDFieldNumber;
const int GC_MarkInfo::kOrderCateFieldNumber;
const int GC_MarkInfo::kDesignPlanIDFieldNumber;
const int GC_MarkInfo::kOrderIDFieldNumber;
const int GC_MarkInfo::kDesignPrintIDFieldNumber;
const int GC_MarkInfo::kPrintIDFieldNumber;
const int GC_MarkInfo::kViewTypeFieldNumber;
const int GC_MarkInfo::kDockObjIDFieldNumber;
const int GC_MarkInfo::kDockObjTypeFieldNumber;
const int GC_MarkInfo::kMarkTypeFieldNumber;
const int GC_MarkInfo::kFontSizeFieldNumber;
const int GC_MarkInfo::kStartXFieldNumber;
const int GC_MarkInfo::kStartYFieldNumber;
const int GC_MarkInfo::kOffsetXFieldNumber;
const int GC_MarkInfo::kOffsetYFieldNumber;
const int GC_MarkInfo::kStopXFieldNumber;
const int GC_MarkInfo::kStopYFieldNumber;
const int GC_MarkInfo::kTopLeftXFieldNumber;
const int GC_MarkInfo::kTopLeftYFieldNumber;
const int GC_MarkInfo::kWidthFieldNumber;
const int GC_MarkInfo::kHeightFieldNumber;
const int GC_MarkInfo::kIsVisibleFieldNumber;
const int GC_MarkInfo::kIsLockedFieldNumber;
const int GC_MarkInfo::kEditSignFieldNumber;
const int GC_MarkInfo::kStrickOutFieldNumber;
const int GC_MarkInfo::kUnderLineFieldNumber;
const int GC_MarkInfo::kItalicFieldNumber;
const int GC_MarkInfo::kBoldFieldNumber;
const int GC_MarkInfo::kBGColorFieldNumber;
const int GC_MarkInfo::kFontColorFieldNumber;
const int GC_MarkInfo::kCreatorIDFieldNumber;
const int GC_MarkInfo::kUpdaterIDFieldNumber;
const int GC_MarkInfo::kCreateTimeFieldNumber;
const int GC_MarkInfo::kUpdateTimeFieldNumber;
const int GC_MarkInfo::kFaceNameFieldNumber;
const int GC_MarkInfo::kRemarkTextFieldNumber;
#endif  // !_MSC_VER

GC_MarkInfo::GC_MarkInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_MarkInfo::InitAsDefaultInstance() {
}

GC_MarkInfo::GC_MarkInfo(const GC_MarkInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_MarkInfo::SharedCtor() {
  _cached_size_ = 0;
  designmarkid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designprintid_ = 0;
  printid_ = 0;
  viewtype_ = 0;
  dockobjid_ = 0;
  dockobjtype_ = 0;
  marktype_ = 0;
  fontsize_ = 0;
  startx_ = 0;
  starty_ = 0;
  offsetx_ = 0;
  offsety_ = 0;
  stopx_ = 0;
  stopy_ = 0;
  topleftx_ = 0;
  toplefty_ = 0;
  width_ = 0;
  height_ = 0;
  isvisible_ = false;
  islocked_ = false;
  editsign_ = false;
  strickout_ = false;
  underline_ = false;
  italic_ = false;
  bold_ = false;
  bgcolor_ = GOOGLE_LONGLONG(0);
  fontcolor_ = GOOGLE_LONGLONG(0);
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remarktext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_MarkInfo::~GC_MarkInfo() {
  SharedDtor();
}

void GC_MarkInfo::SharedDtor() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (remarktext_ != &::google::protobuf::internal::kEmptyString) {
    delete remarktext_;
  }
  if (this != default_instance_) {
  }
}

void GC_MarkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_MarkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_MarkInfo_descriptor_;
}

const GC_MarkInfo& GC_MarkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_MarkInfo* GC_MarkInfo::default_instance_ = NULL;

GC_MarkInfo* GC_MarkInfo::New() const {
  return new GC_MarkInfo;
}

void GC_MarkInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designmarkid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designprintid_ = 0;
    printid_ = 0;
    viewtype_ = 0;
    dockobjid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dockobjtype_ = 0;
    marktype_ = 0;
    fontsize_ = 0;
    startx_ = 0;
    starty_ = 0;
    offsetx_ = 0;
    offsety_ = 0;
    stopx_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    stopy_ = 0;
    topleftx_ = 0;
    toplefty_ = 0;
    width_ = 0;
    height_ = 0;
    isvisible_ = false;
    islocked_ = false;
    editsign_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    strickout_ = false;
    underline_ = false;
    italic_ = false;
    bold_ = false;
    bgcolor_ = GOOGLE_LONGLONG(0);
    fontcolor_ = GOOGLE_LONGLONG(0);
    creatorid_ = 0;
    updaterid_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_facename()) {
      if (facename_ != &::google::protobuf::internal::kEmptyString) {
        facename_->clear();
      }
    }
    if (has_remarktext()) {
      if (remarktext_ != &::google::protobuf::internal::kEmptyString) {
        remarktext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_MarkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignMarkID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designmarkid_)));
          set_has_designmarkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPrintID;
        break;
      }

      // required int32 DesignPrintID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPrintID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprintid_)));
          set_has_designprintid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_PrintID;
        break;
      }

      // required int32 PrintID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrintID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printid_)));
          set_has_printid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ViewType;
        break;
      }

      // required int32 ViewType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ViewType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewtype_)));
          set_has_viewtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DockObjID;
        break;
      }

      // required int32 DockObjID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjid_)));
          set_has_dockobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_DockObjType;
        break;
      }

      // required int32 DockObjType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjtype_)));
          set_has_dockobjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_MarkType;
        break;
      }

      // required int32 MarkType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MarkType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marktype_)));
          set_has_marktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_FontSize;
        break;
      }

      // required int32 FontSize = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FontSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_StartX;
        break;
      }

      // required double StartX = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StartX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startx_)));
          set_has_startx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_StartY;
        break;
      }

      // required double StartY = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StartY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &starty_)));
          set_has_starty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_OffsetX;
        break;
      }

      // required double OffsetX = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OffsetX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offsetx_)));
          set_has_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_OffsetY;
        break;
      }

      // required double OffsetY = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OffsetY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offsety_)));
          set_has_offsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_StopX;
        break;
      }

      // required double StopX = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StopX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopx_)));
          set_has_stopx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_StopY;
        break;
      }

      // required double StopY = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StopY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopy_)));
          set_has_stopy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_TopLeftX;
        break;
      }

      // required double TopLeftX = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TopLeftX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &topleftx_)));
          set_has_topleftx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_TopLeftY;
        break;
      }

      // required double TopLeftY = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TopLeftY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toplefty_)));
          set_has_toplefty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_Width;
        break;
      }

      // required double Width = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_Height;
        break;
      }

      // required double Height = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_EditSign;
        break;
      }

      // required bool EditSign = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EditSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &editsign_)));
          set_has_editsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_StrickOut;
        break;
      }

      // required bool StrickOut = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StrickOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strickout_)));
          set_has_strickout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_UnderLine;
        break;
      }

      // required bool UnderLine = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UnderLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &underline_)));
          set_has_underline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_Italic;
        break;
      }

      // required bool Italic = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Italic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &italic_)));
          set_has_italic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_Bold;
        break;
      }

      // required bool Bold = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Bold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bold_)));
          set_has_bold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_BGColor;
        break;
      }

      // required int64 BGColor = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BGColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bgcolor_)));
          set_has_bgcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_FontColor;
        break;
      }

      // required int64 FontColor = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FontColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fontcolor_)));
          set_has_fontcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_FaceName;
        break;
      }

      // required string FaceName = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FaceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facename().data(), this->facename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_RemarkText;
        break;
      }

      // required string RemarkText = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RemarkText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remarktext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remarktext().data(), this->remarktext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_MarkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignMarkID = 1;
  if (has_designmarkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designmarkid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPrintID = 5;
  if (has_designprintid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designprintid(), output);
  }

  // required int32 PrintID = 6;
  if (has_printid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->printid(), output);
  }

  // required int32 ViewType = 7;
  if (has_viewtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->viewtype(), output);
  }

  // required int32 DockObjID = 8;
  if (has_dockobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dockobjid(), output);
  }

  // required int32 DockObjType = 9;
  if (has_dockobjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dockobjtype(), output);
  }

  // required int32 MarkType = 10;
  if (has_marktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->marktype(), output);
  }

  // required int32 FontSize = 11;
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fontsize(), output);
  }

  // required double StartX = 12;
  if (has_startx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->startx(), output);
  }

  // required double StartY = 13;
  if (has_starty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->starty(), output);
  }

  // required double OffsetX = 14;
  if (has_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->offsetx(), output);
  }

  // required double OffsetY = 15;
  if (has_offsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->offsety(), output);
  }

  // required double StopX = 16;
  if (has_stopx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->stopx(), output);
  }

  // required double StopY = 17;
  if (has_stopy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->stopy(), output);
  }

  // required double TopLeftX = 18;
  if (has_topleftx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->topleftx(), output);
  }

  // required double TopLeftY = 19;
  if (has_toplefty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->toplefty(), output);
  }

  // required double Width = 20;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->width(), output);
  }

  // required double Height = 21;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->height(), output);
  }

  // required bool IsVisible = 22;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->isvisible(), output);
  }

  // required bool IsLocked = 23;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->islocked(), output);
  }

  // required bool EditSign = 24;
  if (has_editsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->editsign(), output);
  }

  // required bool StrickOut = 25;
  if (has_strickout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->strickout(), output);
  }

  // required bool UnderLine = 26;
  if (has_underline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->underline(), output);
  }

  // required bool Italic = 27;
  if (has_italic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->italic(), output);
  }

  // required bool Bold = 28;
  if (has_bold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->bold(), output);
  }

  // required int64 BGColor = 29;
  if (has_bgcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->bgcolor(), output);
  }

  // required int64 FontColor = 30;
  if (has_fontcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->fontcolor(), output);
  }

  // required int32 CreatorID = 31;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->creatorid(), output);
  }

  // required int32 UpdaterID = 32;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->updaterid(), output);
  }

  // required int64 CreateTime = 33;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->createtime(), output);
  }

  // required int64 UpdateTime = 34;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->updatetime(), output);
  }

  // required string FaceName = 35;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->facename(), output);
  }

  // required string RemarkText = 36;
  if (has_remarktext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remarktext().data(), this->remarktext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->remarktext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_MarkInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignMarkID = 1;
  if (has_designmarkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designmarkid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPrintID = 5;
  if (has_designprintid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designprintid(), target);
  }

  // required int32 PrintID = 6;
  if (has_printid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->printid(), target);
  }

  // required int32 ViewType = 7;
  if (has_viewtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->viewtype(), target);
  }

  // required int32 DockObjID = 8;
  if (has_dockobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dockobjid(), target);
  }

  // required int32 DockObjType = 9;
  if (has_dockobjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dockobjtype(), target);
  }

  // required int32 MarkType = 10;
  if (has_marktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->marktype(), target);
  }

  // required int32 FontSize = 11;
  if (has_fontsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fontsize(), target);
  }

  // required double StartX = 12;
  if (has_startx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->startx(), target);
  }

  // required double StartY = 13;
  if (has_starty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->starty(), target);
  }

  // required double OffsetX = 14;
  if (has_offsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->offsetx(), target);
  }

  // required double OffsetY = 15;
  if (has_offsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->offsety(), target);
  }

  // required double StopX = 16;
  if (has_stopx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->stopx(), target);
  }

  // required double StopY = 17;
  if (has_stopy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->stopy(), target);
  }

  // required double TopLeftX = 18;
  if (has_topleftx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->topleftx(), target);
  }

  // required double TopLeftY = 19;
  if (has_toplefty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->toplefty(), target);
  }

  // required double Width = 20;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->width(), target);
  }

  // required double Height = 21;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->height(), target);
  }

  // required bool IsVisible = 22;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->isvisible(), target);
  }

  // required bool IsLocked = 23;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->islocked(), target);
  }

  // required bool EditSign = 24;
  if (has_editsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->editsign(), target);
  }

  // required bool StrickOut = 25;
  if (has_strickout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->strickout(), target);
  }

  // required bool UnderLine = 26;
  if (has_underline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->underline(), target);
  }

  // required bool Italic = 27;
  if (has_italic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->italic(), target);
  }

  // required bool Bold = 28;
  if (has_bold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->bold(), target);
  }

  // required int64 BGColor = 29;
  if (has_bgcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->bgcolor(), target);
  }

  // required int64 FontColor = 30;
  if (has_fontcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->fontcolor(), target);
  }

  // required int32 CreatorID = 31;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->creatorid(), target);
  }

  // required int32 UpdaterID = 32;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->updaterid(), target);
  }

  // required int64 CreateTime = 33;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->createtime(), target);
  }

  // required int64 UpdateTime = 34;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->updatetime(), target);
  }

  // required string FaceName = 35;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->facename(), target);
  }

  // required string RemarkText = 36;
  if (has_remarktext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remarktext().data(), this->remarktext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->remarktext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_MarkInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignMarkID = 1;
    if (has_designmarkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designmarkid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPrintID = 5;
    if (has_designprintid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprintid());
    }

    // required int32 PrintID = 6;
    if (has_printid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printid());
    }

    // required int32 ViewType = 7;
    if (has_viewtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewtype());
    }

    // required int32 DockObjID = 8;
    if (has_dockobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 DockObjType = 9;
    if (has_dockobjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjtype());
    }

    // required int32 MarkType = 10;
    if (has_marktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marktype());
    }

    // required int32 FontSize = 11;
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fontsize());
    }

    // required double StartX = 12;
    if (has_startx()) {
      total_size += 1 + 8;
    }

    // required double StartY = 13;
    if (has_starty()) {
      total_size += 1 + 8;
    }

    // required double OffsetX = 14;
    if (has_offsetx()) {
      total_size += 1 + 8;
    }

    // required double OffsetY = 15;
    if (has_offsety()) {
      total_size += 1 + 8;
    }

    // required double StopX = 16;
    if (has_stopx()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double StopY = 17;
    if (has_stopy()) {
      total_size += 2 + 8;
    }

    // required double TopLeftX = 18;
    if (has_topleftx()) {
      total_size += 2 + 8;
    }

    // required double TopLeftY = 19;
    if (has_toplefty()) {
      total_size += 2 + 8;
    }

    // required double Width = 20;
    if (has_width()) {
      total_size += 2 + 8;
    }

    // required double Height = 21;
    if (has_height()) {
      total_size += 2 + 8;
    }

    // required bool IsVisible = 22;
    if (has_isvisible()) {
      total_size += 2 + 1;
    }

    // required bool IsLocked = 23;
    if (has_islocked()) {
      total_size += 2 + 1;
    }

    // required bool EditSign = 24;
    if (has_editsign()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required bool StrickOut = 25;
    if (has_strickout()) {
      total_size += 2 + 1;
    }

    // required bool UnderLine = 26;
    if (has_underline()) {
      total_size += 2 + 1;
    }

    // required bool Italic = 27;
    if (has_italic()) {
      total_size += 2 + 1;
    }

    // required bool Bold = 28;
    if (has_bold()) {
      total_size += 2 + 1;
    }

    // required int64 BGColor = 29;
    if (has_bgcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bgcolor());
    }

    // required int64 FontColor = 30;
    if (has_fontcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fontcolor());
    }

    // required int32 CreatorID = 31;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 32;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int64 CreateTime = 33;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 34;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string FaceName = 35;
    if (has_facename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facename());
    }

    // required string RemarkText = 36;
    if (has_remarktext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remarktext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_MarkInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_MarkInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_MarkInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_MarkInfo::MergeFrom(const GC_MarkInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designmarkid()) {
      set_designmarkid(from.designmarkid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designprintid()) {
      set_designprintid(from.designprintid());
    }
    if (from.has_printid()) {
      set_printid(from.printid());
    }
    if (from.has_viewtype()) {
      set_viewtype(from.viewtype());
    }
    if (from.has_dockobjid()) {
      set_dockobjid(from.dockobjid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dockobjtype()) {
      set_dockobjtype(from.dockobjtype());
    }
    if (from.has_marktype()) {
      set_marktype(from.marktype());
    }
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
    if (from.has_startx()) {
      set_startx(from.startx());
    }
    if (from.has_starty()) {
      set_starty(from.starty());
    }
    if (from.has_offsetx()) {
      set_offsetx(from.offsetx());
    }
    if (from.has_offsety()) {
      set_offsety(from.offsety());
    }
    if (from.has_stopx()) {
      set_stopx(from.stopx());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_stopy()) {
      set_stopy(from.stopy());
    }
    if (from.has_topleftx()) {
      set_topleftx(from.topleftx());
    }
    if (from.has_toplefty()) {
      set_toplefty(from.toplefty());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_editsign()) {
      set_editsign(from.editsign());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_strickout()) {
      set_strickout(from.strickout());
    }
    if (from.has_underline()) {
      set_underline(from.underline());
    }
    if (from.has_italic()) {
      set_italic(from.italic());
    }
    if (from.has_bold()) {
      set_bold(from.bold());
    }
    if (from.has_bgcolor()) {
      set_bgcolor(from.bgcolor());
    }
    if (from.has_fontcolor()) {
      set_fontcolor(from.fontcolor());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_facename()) {
      set_facename(from.facename());
    }
    if (from.has_remarktext()) {
      set_remarktext(from.remarktext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_MarkInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_MarkInfo::CopyFrom(const GC_MarkInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_MarkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GC_MarkInfo::Swap(GC_MarkInfo* other) {
  if (other != this) {
    std::swap(designmarkid_, other->designmarkid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(designprintid_, other->designprintid_);
    std::swap(printid_, other->printid_);
    std::swap(viewtype_, other->viewtype_);
    std::swap(dockobjid_, other->dockobjid_);
    std::swap(dockobjtype_, other->dockobjtype_);
    std::swap(marktype_, other->marktype_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(startx_, other->startx_);
    std::swap(starty_, other->starty_);
    std::swap(offsetx_, other->offsetx_);
    std::swap(offsety_, other->offsety_);
    std::swap(stopx_, other->stopx_);
    std::swap(stopy_, other->stopy_);
    std::swap(topleftx_, other->topleftx_);
    std::swap(toplefty_, other->toplefty_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(editsign_, other->editsign_);
    std::swap(strickout_, other->strickout_);
    std::swap(underline_, other->underline_);
    std::swap(italic_, other->italic_);
    std::swap(bold_, other->bold_);
    std::swap(bgcolor_, other->bgcolor_);
    std::swap(fontcolor_, other->fontcolor_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(facename_, other->facename_);
    std::swap(remarktext_, other->remarktext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_MarkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_MarkInfo_descriptor_;
  metadata.reflection = GC_MarkInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_MatrixInfo::kOrderIDFieldNumber;
const int GC_MatrixInfo::kOrderCateFieldNumber;
const int GC_MatrixInfo::kDesignPlanIDFieldNumber;
const int GC_MatrixInfo::kFactoryIDFieldNumber;
const int GC_MatrixInfo::kVerCodeFieldNumber;
const int GC_MatrixInfo::kTransObjIDFieldNumber;
const int GC_MatrixInfo::kTransObjTypeFieldNumber;
const int GC_MatrixInfo::kMajorCurSelFieldNumber;
const int GC_MatrixInfo::kMinorCurSelFieldNumber;
const int GC_MatrixInfo::kMatCurIndexFieldNumber;
const int GC_MatrixInfo::kCabMatPlanIDFieldNumber;
const int GC_MatrixInfo::kM11FieldNumber;
const int GC_MatrixInfo::kM12FieldNumber;
const int GC_MatrixInfo::kM13FieldNumber;
const int GC_MatrixInfo::kM21FieldNumber;
const int GC_MatrixInfo::kM22FieldNumber;
const int GC_MatrixInfo::kM23FieldNumber;
const int GC_MatrixInfo::kM31FieldNumber;
const int GC_MatrixInfo::kM32FieldNumber;
const int GC_MatrixInfo::kM33FieldNumber;
const int GC_MatrixInfo::kM41FieldNumber;
const int GC_MatrixInfo::kM42FieldNumber;
const int GC_MatrixInfo::kM43FieldNumber;
const int GC_MatrixInfo::kM44FieldNumber;
#endif  // !_MSC_VER

GC_MatrixInfo::GC_MatrixInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_MatrixInfo::InitAsDefaultInstance() {
}

GC_MatrixInfo::GC_MatrixInfo(const GC_MatrixInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_MatrixInfo::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  ordercate_ = 0;
  designplanid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  transobjid_ = GOOGLE_LONGLONG(0);
  transobjtype_ = 0;
  majorcursel_ = 0;
  minorcursel_ = 0;
  matcurindex_ = 0;
  cabmatplanid_ = 0;
  m11_ = 0;
  m12_ = 0;
  m13_ = 0;
  m21_ = 0;
  m22_ = 0;
  m23_ = 0;
  m31_ = 0;
  m32_ = 0;
  m33_ = 0;
  m41_ = 0;
  m42_ = 0;
  m43_ = 0;
  m44_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_MatrixInfo::~GC_MatrixInfo() {
  SharedDtor();
}

void GC_MatrixInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_MatrixInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_MatrixInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_MatrixInfo_descriptor_;
}

const GC_MatrixInfo& GC_MatrixInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_MatrixInfo* GC_MatrixInfo::default_instance_ = NULL;

GC_MatrixInfo* GC_MatrixInfo::New() const {
  return new GC_MatrixInfo;
}

void GC_MatrixInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderid_ = GOOGLE_LONGLONG(0);
    ordercate_ = 0;
    designplanid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    transobjid_ = GOOGLE_LONGLONG(0);
    transobjtype_ = 0;
    majorcursel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    minorcursel_ = 0;
    matcurindex_ = 0;
    cabmatplanid_ = 0;
    m11_ = 0;
    m12_ = 0;
    m13_ = 0;
    m21_ = 0;
    m22_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m23_ = 0;
    m31_ = 0;
    m32_ = 0;
    m33_ = 0;
    m41_ = 0;
    m42_ = 0;
    m43_ = 0;
    m44_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_MatrixInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 OrderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TransObjID;
        break;
      }

      // required int64 TransObjID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TransObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transobjid_)));
          set_has_transobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_TransObjType;
        break;
      }

      // required int32 TransObjType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TransObjType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transobjtype_)));
          set_has_transobjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_MajorCurSel;
        break;
      }

      // required int32 MajorCurSel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MajorCurSel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majorcursel_)));
          set_has_majorcursel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_MinorCurSel;
        break;
      }

      // required int32 MinorCurSel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinorCurSel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minorcursel_)));
          set_has_minorcursel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_MatCurIndex;
        break;
      }

      // required int32 MatCurIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatCurIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matcurindex_)));
          set_has_matcurindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CabMatPlanID;
        break;
      }

      // required int32 CabMatPlanID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabmatplanid_)));
          set_has_cabmatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_M11;
        break;
      }

      // required double M11 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_M11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m11_)));
          set_has_m11();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_M12;
        break;
      }

      // required double M12 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_M12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m12_)));
          set_has_m12();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_M13;
        break;
      }

      // required double M13 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_M13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m13_)));
          set_has_m13();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_M21;
        break;
      }

      // required double M21 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_M21:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m21_)));
          set_has_m21();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_M22;
        break;
      }

      // required double M22 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_M22:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m22_)));
          set_has_m22();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_M23;
        break;
      }

      // required double M23 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_M23:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m23_)));
          set_has_m23();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_M31;
        break;
      }

      // required double M31 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_M31:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m31_)));
          set_has_m31();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_M32;
        break;
      }

      // required double M32 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_M32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m32_)));
          set_has_m32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_M33;
        break;
      }

      // required double M33 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_M33:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m33_)));
          set_has_m33();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_M41;
        break;
      }

      // required double M41 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_M41:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m41_)));
          set_has_m41();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_M42;
        break;
      }

      // required double M42 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_M42:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m42_)));
          set_has_m42();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_M43;
        break;
      }

      // required double M43 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_M43:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m43_)));
          set_has_m43();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_M44;
        break;
      }

      // required double M44 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_M44:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m44_)));
          set_has_m44();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_MatrixInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 OrderID = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->orderid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->factoryid(), output);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->vercode(), output);
  }

  // required int64 TransObjID = 6;
  if (has_transobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->transobjid(), output);
  }

  // required int32 TransObjType = 7;
  if (has_transobjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->transobjtype(), output);
  }

  // required int32 MajorCurSel = 8;
  if (has_majorcursel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->majorcursel(), output);
  }

  // required int32 MinorCurSel = 9;
  if (has_minorcursel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->minorcursel(), output);
  }

  // required int32 MatCurIndex = 10;
  if (has_matcurindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->matcurindex(), output);
  }

  // required int32 CabMatPlanID = 11;
  if (has_cabmatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cabmatplanid(), output);
  }

  // required double M11 = 12;
  if (has_m11()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->m11(), output);
  }

  // required double M12 = 13;
  if (has_m12()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->m12(), output);
  }

  // required double M13 = 14;
  if (has_m13()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->m13(), output);
  }

  // required double M21 = 15;
  if (has_m21()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->m21(), output);
  }

  // required double M22 = 16;
  if (has_m22()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->m22(), output);
  }

  // required double M23 = 17;
  if (has_m23()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->m23(), output);
  }

  // required double M31 = 18;
  if (has_m31()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->m31(), output);
  }

  // required double M32 = 19;
  if (has_m32()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->m32(), output);
  }

  // required double M33 = 20;
  if (has_m33()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->m33(), output);
  }

  // required double M41 = 21;
  if (has_m41()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->m41(), output);
  }

  // required double M42 = 22;
  if (has_m42()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->m42(), output);
  }

  // required double M43 = 23;
  if (has_m43()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->m43(), output);
  }

  // required double M44 = 24;
  if (has_m44()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->m44(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_MatrixInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 OrderID = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->orderid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->factoryid(), target);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->vercode(), target);
  }

  // required int64 TransObjID = 6;
  if (has_transobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->transobjid(), target);
  }

  // required int32 TransObjType = 7;
  if (has_transobjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->transobjtype(), target);
  }

  // required int32 MajorCurSel = 8;
  if (has_majorcursel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->majorcursel(), target);
  }

  // required int32 MinorCurSel = 9;
  if (has_minorcursel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->minorcursel(), target);
  }

  // required int32 MatCurIndex = 10;
  if (has_matcurindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->matcurindex(), target);
  }

  // required int32 CabMatPlanID = 11;
  if (has_cabmatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cabmatplanid(), target);
  }

  // required double M11 = 12;
  if (has_m11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->m11(), target);
  }

  // required double M12 = 13;
  if (has_m12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->m12(), target);
  }

  // required double M13 = 14;
  if (has_m13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->m13(), target);
  }

  // required double M21 = 15;
  if (has_m21()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->m21(), target);
  }

  // required double M22 = 16;
  if (has_m22()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->m22(), target);
  }

  // required double M23 = 17;
  if (has_m23()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->m23(), target);
  }

  // required double M31 = 18;
  if (has_m31()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->m31(), target);
  }

  // required double M32 = 19;
  if (has_m32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->m32(), target);
  }

  // required double M33 = 20;
  if (has_m33()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->m33(), target);
  }

  // required double M41 = 21;
  if (has_m41()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->m41(), target);
  }

  // required double M42 = 22;
  if (has_m42()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->m42(), target);
  }

  // required double M43 = 23;
  if (has_m43()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->m43(), target);
  }

  // required double M44 = 24;
  if (has_m44()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->m44(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_MatrixInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 OrderID = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 FactoryID = 4;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 5;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int64 TransObjID = 6;
    if (has_transobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transobjid());
    }

    // required int32 TransObjType = 7;
    if (has_transobjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transobjtype());
    }

    // required int32 MajorCurSel = 8;
    if (has_majorcursel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majorcursel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 MinorCurSel = 9;
    if (has_minorcursel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minorcursel());
    }

    // required int32 MatCurIndex = 10;
    if (has_matcurindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matcurindex());
    }

    // required int32 CabMatPlanID = 11;
    if (has_cabmatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabmatplanid());
    }

    // required double M11 = 12;
    if (has_m11()) {
      total_size += 1 + 8;
    }

    // required double M12 = 13;
    if (has_m12()) {
      total_size += 1 + 8;
    }

    // required double M13 = 14;
    if (has_m13()) {
      total_size += 1 + 8;
    }

    // required double M21 = 15;
    if (has_m21()) {
      total_size += 1 + 8;
    }

    // required double M22 = 16;
    if (has_m22()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double M23 = 17;
    if (has_m23()) {
      total_size += 2 + 8;
    }

    // required double M31 = 18;
    if (has_m31()) {
      total_size += 2 + 8;
    }

    // required double M32 = 19;
    if (has_m32()) {
      total_size += 2 + 8;
    }

    // required double M33 = 20;
    if (has_m33()) {
      total_size += 2 + 8;
    }

    // required double M41 = 21;
    if (has_m41()) {
      total_size += 2 + 8;
    }

    // required double M42 = 22;
    if (has_m42()) {
      total_size += 2 + 8;
    }

    // required double M43 = 23;
    if (has_m43()) {
      total_size += 2 + 8;
    }

    // required double M44 = 24;
    if (has_m44()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_MatrixInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_MatrixInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_MatrixInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_MatrixInfo::MergeFrom(const GC_MatrixInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_transobjid()) {
      set_transobjid(from.transobjid());
    }
    if (from.has_transobjtype()) {
      set_transobjtype(from.transobjtype());
    }
    if (from.has_majorcursel()) {
      set_majorcursel(from.majorcursel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_minorcursel()) {
      set_minorcursel(from.minorcursel());
    }
    if (from.has_matcurindex()) {
      set_matcurindex(from.matcurindex());
    }
    if (from.has_cabmatplanid()) {
      set_cabmatplanid(from.cabmatplanid());
    }
    if (from.has_m11()) {
      set_m11(from.m11());
    }
    if (from.has_m12()) {
      set_m12(from.m12());
    }
    if (from.has_m13()) {
      set_m13(from.m13());
    }
    if (from.has_m21()) {
      set_m21(from.m21());
    }
    if (from.has_m22()) {
      set_m22(from.m22());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m23()) {
      set_m23(from.m23());
    }
    if (from.has_m31()) {
      set_m31(from.m31());
    }
    if (from.has_m32()) {
      set_m32(from.m32());
    }
    if (from.has_m33()) {
      set_m33(from.m33());
    }
    if (from.has_m41()) {
      set_m41(from.m41());
    }
    if (from.has_m42()) {
      set_m42(from.m42());
    }
    if (from.has_m43()) {
      set_m43(from.m43());
    }
    if (from.has_m44()) {
      set_m44(from.m44());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_MatrixInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_MatrixInfo::CopyFrom(const GC_MatrixInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_MatrixInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00ffffff) != 0x00ffffff) return false;

  return true;
}

void GC_MatrixInfo::Swap(GC_MatrixInfo* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(transobjid_, other->transobjid_);
    std::swap(transobjtype_, other->transobjtype_);
    std::swap(majorcursel_, other->majorcursel_);
    std::swap(minorcursel_, other->minorcursel_);
    std::swap(matcurindex_, other->matcurindex_);
    std::swap(cabmatplanid_, other->cabmatplanid_);
    std::swap(m11_, other->m11_);
    std::swap(m12_, other->m12_);
    std::swap(m13_, other->m13_);
    std::swap(m21_, other->m21_);
    std::swap(m22_, other->m22_);
    std::swap(m23_, other->m23_);
    std::swap(m31_, other->m31_);
    std::swap(m32_, other->m32_);
    std::swap(m33_, other->m33_);
    std::swap(m41_, other->m41_);
    std::swap(m42_, other->m42_);
    std::swap(m43_, other->m43_);
    std::swap(m44_, other->m44_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_MatrixInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_MatrixInfo_descriptor_;
  metadata.reflection = GC_MatrixInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_OrderAddedInfo::kOrderAddedIDFieldNumber;
const int GC_OrderAddedInfo::kOrderIDFieldNumber;
const int GC_OrderAddedInfo::kOrderCateFieldNumber;
const int GC_OrderAddedInfo::kFactoryIDFieldNumber;
const int GC_OrderAddedInfo::kUseCountFieldNumber;
const int GC_OrderAddedInfo::kUnitPriceFieldNumber;
const int GC_OrderAddedInfo::kCreateTimeFieldNumber;
const int GC_OrderAddedInfo::kUpdateTimeFieldNumber;
const int GC_OrderAddedInfo::kAddedNameFieldNumber;
const int GC_OrderAddedInfo::kMatNameFieldNumber;
const int GC_OrderAddedInfo::kUnitNameFieldNumber;
const int GC_OrderAddedInfo::kSpecNameFieldNumber;
const int GC_OrderAddedInfo::kAttachFileNameFieldNumber;
#endif  // !_MSC_VER

GC_OrderAddedInfo::GC_OrderAddedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_OrderAddedInfo::InitAsDefaultInstance() {
}

GC_OrderAddedInfo::GC_OrderAddedInfo(const GC_OrderAddedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_OrderAddedInfo::SharedCtor() {
  _cached_size_ = 0;
  orderaddedid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  ordercate_ = 0;
  factoryid_ = 0;
  usecount_ = 0;
  unitprice_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  addedname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  matname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  specname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attachfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_OrderAddedInfo::~GC_OrderAddedInfo() {
  SharedDtor();
}

void GC_OrderAddedInfo::SharedDtor() {
  if (addedname_ != &::google::protobuf::internal::kEmptyString) {
    delete addedname_;
  }
  if (matname_ != &::google::protobuf::internal::kEmptyString) {
    delete matname_;
  }
  if (unitname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitname_;
  }
  if (specname_ != &::google::protobuf::internal::kEmptyString) {
    delete specname_;
  }
  if (attachfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete attachfilename_;
  }
  if (this != default_instance_) {
  }
}

void GC_OrderAddedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_OrderAddedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_OrderAddedInfo_descriptor_;
}

const GC_OrderAddedInfo& GC_OrderAddedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_OrderAddedInfo* GC_OrderAddedInfo::default_instance_ = NULL;

GC_OrderAddedInfo* GC_OrderAddedInfo::New() const {
  return new GC_OrderAddedInfo;
}

void GC_OrderAddedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderaddedid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    ordercate_ = 0;
    factoryid_ = 0;
    usecount_ = 0;
    unitprice_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_addedname()) {
      if (addedname_ != &::google::protobuf::internal::kEmptyString) {
        addedname_->clear();
      }
    }
    if (has_matname()) {
      if (matname_ != &::google::protobuf::internal::kEmptyString) {
        matname_->clear();
      }
    }
    if (has_unitname()) {
      if (unitname_ != &::google::protobuf::internal::kEmptyString) {
        unitname_->clear();
      }
    }
    if (has_specname()) {
      if (specname_ != &::google::protobuf::internal::kEmptyString) {
        specname_->clear();
      }
    }
    if (has_attachfilename()) {
      if (attachfilename_ != &::google::protobuf::internal::kEmptyString) {
        attachfilename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_OrderAddedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 OrderAddedID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderaddedid_)));
          set_has_orderaddedid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_UseCount;
        break;
      }

      // required int32 UseCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usecount_)));
          set_has_usecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_UnitPrice;
        break;
      }

      // required double UnitPrice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_UnitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unitprice_)));
          set_has_unitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_AddedName;
        break;
      }

      // required string AddedName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AddedName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addedname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addedname().data(), this->addedname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_MatName;
        break;
      }

      // required string MatName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->matname().data(), this->matname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_UnitName;
        break;
      }

      // required string UnitName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UnitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitname().data(), this->unitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_SpecName;
        break;
      }

      // required string SpecName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SpecName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_specname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->specname().data(), this->specname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_AttachFileName;
        break;
      }

      // required string AttachFileName = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttachFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attachfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attachfilename().data(), this->attachfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_OrderAddedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 OrderAddedID = 1;
  if (has_orderaddedid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orderaddedid(), output);
  }

  // required int64 OrderID = 2;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->orderid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->factoryid(), output);
  }

  // required int32 UseCount = 5;
  if (has_usecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usecount(), output);
  }

  // required double UnitPrice = 6;
  if (has_unitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->unitprice(), output);
  }

  // required int64 CreateTime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->createtime(), output);
  }

  // required int64 UpdateTime = 8;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->updatetime(), output);
  }

  // required string AddedName = 9;
  if (has_addedname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addedname().data(), this->addedname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->addedname(), output);
  }

  // required string MatName = 10;
  if (has_matname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matname().data(), this->matname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->matname(), output);
  }

  // required string UnitName = 11;
  if (has_unitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->unitname(), output);
  }

  // required string SpecName = 12;
  if (has_specname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specname().data(), this->specname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->specname(), output);
  }

  // required string AttachFileName = 13;
  if (has_attachfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachfilename().data(), this->attachfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->attachfilename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_OrderAddedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 OrderAddedID = 1;
  if (has_orderaddedid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orderaddedid(), target);
  }

  // required int64 OrderID = 2;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->orderid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->factoryid(), target);
  }

  // required int32 UseCount = 5;
  if (has_usecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usecount(), target);
  }

  // required double UnitPrice = 6;
  if (has_unitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->unitprice(), target);
  }

  // required int64 CreateTime = 7;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->createtime(), target);
  }

  // required int64 UpdateTime = 8;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->updatetime(), target);
  }

  // required string AddedName = 9;
  if (has_addedname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addedname().data(), this->addedname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->addedname(), target);
  }

  // required string MatName = 10;
  if (has_matname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matname().data(), this->matname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->matname(), target);
  }

  // required string UnitName = 11;
  if (has_unitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->unitname(), target);
  }

  // required string SpecName = 12;
  if (has_specname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specname().data(), this->specname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->specname(), target);
  }

  // required string AttachFileName = 13;
  if (has_attachfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachfilename().data(), this->attachfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->attachfilename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_OrderAddedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 OrderAddedID = 1;
    if (has_orderaddedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderaddedid());
    }

    // required int64 OrderID = 2;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 FactoryID = 4;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 UseCount = 5;
    if (has_usecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usecount());
    }

    // required double UnitPrice = 6;
    if (has_unitprice()) {
      total_size += 1 + 8;
    }

    // required int64 CreateTime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 8;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string AddedName = 9;
    if (has_addedname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addedname());
    }

    // required string MatName = 10;
    if (has_matname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matname());
    }

    // required string UnitName = 11;
    if (has_unitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitname());
    }

    // required string SpecName = 12;
    if (has_specname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->specname());
    }

    // required string AttachFileName = 13;
    if (has_attachfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attachfilename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_OrderAddedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_OrderAddedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_OrderAddedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_OrderAddedInfo::MergeFrom(const GC_OrderAddedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderaddedid()) {
      set_orderaddedid(from.orderaddedid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_usecount()) {
      set_usecount(from.usecount());
    }
    if (from.has_unitprice()) {
      set_unitprice(from.unitprice());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_addedname()) {
      set_addedname(from.addedname());
    }
    if (from.has_matname()) {
      set_matname(from.matname());
    }
    if (from.has_unitname()) {
      set_unitname(from.unitname());
    }
    if (from.has_specname()) {
      set_specname(from.specname());
    }
    if (from.has_attachfilename()) {
      set_attachfilename(from.attachfilename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_OrderAddedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_OrderAddedInfo::CopyFrom(const GC_OrderAddedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_OrderAddedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void GC_OrderAddedInfo::Swap(GC_OrderAddedInfo* other) {
  if (other != this) {
    std::swap(orderaddedid_, other->orderaddedid_);
    std::swap(orderid_, other->orderid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(usecount_, other->usecount_);
    std::swap(unitprice_, other->unitprice_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(addedname_, other->addedname_);
    std::swap(matname_, other->matname_);
    std::swap(unitname_, other->unitname_);
    std::swap(specname_, other->specname_);
    std::swap(attachfilename_, other->attachfilename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_OrderAddedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_OrderAddedInfo_descriptor_;
  metadata.reflection = GC_OrderAddedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_OrderDataInfo::kOrderIDFieldNumber;
const int GC_OrderDataInfo::kOrderCateFieldNumber;
const int GC_OrderDataInfo::kFactoryIDFieldNumber;
const int GC_OrderDataInfo::kShopIDFieldNumber;
const int GC_OrderDataInfo::kMaxMetaIDFieldNumber;
const int GC_OrderDataInfo::kDesignerIDFieldNumber;
const int GC_OrderDataInfo::kSellerIDFieldNumber;
const int GC_OrderDataInfo::kPreSurveyorIDFieldNumber;
const int GC_OrderDataInfo::kReSurveyorIDFieldNumber;
const int GC_OrderDataInfo::kIsNewFieldNumber;
const int GC_OrderDataInfo::kIsShareFieldNumber;
const int GC_OrderDataInfo::kIsUploadFieldNumber;
const int GC_OrderDataInfo::kCreateTimeFieldNumber;
const int GC_OrderDataInfo::kPreSurveyTimeFieldNumber;
const int GC_OrderDataInfo::kReSurveyTimeFieldNumber;
const int GC_OrderDataInfo::kOrderTimeFieldNumber;
const int GC_OrderDataInfo::kDeliveryTimeFieldNumber;
const int GC_OrderDataInfo::kInstallTimeFieldNumber;
const int GC_OrderDataInfo::kGeoCodeFieldNumber;
const int GC_OrderDataInfo::kOrderTitleFieldNumber;
const int GC_OrderDataInfo::kCustomerNameFieldNumber;
const int GC_OrderDataInfo::kCustomerTelFieldNumber;
const int GC_OrderDataInfo::kCustomerPostcodeFieldNumber;
const int GC_OrderDataInfo::kCustomerQQFieldNumber;
const int GC_OrderDataInfo::kCustomerEmailFieldNumber;
const int GC_OrderDataInfo::kInstallAddressFieldNumber;
const int GC_OrderDataInfo::kOrderMemoFieldNumber;
const int GC_OrderDataInfo::kAttachFilePathFieldNumber;
#endif  // !_MSC_VER

GC_OrderDataInfo::GC_OrderDataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_OrderDataInfo::InitAsDefaultInstance() {
}

GC_OrderDataInfo::GC_OrderDataInfo(const GC_OrderDataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_OrderDataInfo::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  ordercate_ = 0;
  factoryid_ = 0;
  shopid_ = 0;
  maxmetaid_ = 0;
  designerid_ = 0;
  sellerid_ = 0;
  presurveyorid_ = 0;
  resurveyorid_ = 0;
  isnew_ = false;
  isshare_ = false;
  isupload_ = false;
  createtime_ = GOOGLE_LONGLONG(0);
  presurveytime_ = GOOGLE_LONGLONG(0);
  resurveytime_ = GOOGLE_LONGLONG(0);
  ordertime_ = GOOGLE_LONGLONG(0);
  deliverytime_ = GOOGLE_LONGLONG(0);
  installtime_ = GOOGLE_LONGLONG(0);
  geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordertitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customertel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customerpostcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customerqq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  customeremail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  installaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordermemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attachfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_OrderDataInfo::~GC_OrderDataInfo() {
  SharedDtor();
}

void GC_OrderDataInfo::SharedDtor() {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    delete geocode_;
  }
  if (ordertitle_ != &::google::protobuf::internal::kEmptyString) {
    delete ordertitle_;
  }
  if (customername_ != &::google::protobuf::internal::kEmptyString) {
    delete customername_;
  }
  if (customertel_ != &::google::protobuf::internal::kEmptyString) {
    delete customertel_;
  }
  if (customerpostcode_ != &::google::protobuf::internal::kEmptyString) {
    delete customerpostcode_;
  }
  if (customerqq_ != &::google::protobuf::internal::kEmptyString) {
    delete customerqq_;
  }
  if (customeremail_ != &::google::protobuf::internal::kEmptyString) {
    delete customeremail_;
  }
  if (installaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete installaddress_;
  }
  if (ordermemo_ != &::google::protobuf::internal::kEmptyString) {
    delete ordermemo_;
  }
  if (attachfilepath_ != &::google::protobuf::internal::kEmptyString) {
    delete attachfilepath_;
  }
  if (this != default_instance_) {
  }
}

void GC_OrderDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_OrderDataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_OrderDataInfo_descriptor_;
}

const GC_OrderDataInfo& GC_OrderDataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_OrderDataInfo* GC_OrderDataInfo::default_instance_ = NULL;

GC_OrderDataInfo* GC_OrderDataInfo::New() const {
  return new GC_OrderDataInfo;
}

void GC_OrderDataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderid_ = GOOGLE_LONGLONG(0);
    ordercate_ = 0;
    factoryid_ = 0;
    shopid_ = 0;
    maxmetaid_ = 0;
    designerid_ = 0;
    sellerid_ = 0;
    presurveyorid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    resurveyorid_ = 0;
    isnew_ = false;
    isshare_ = false;
    isupload_ = false;
    createtime_ = GOOGLE_LONGLONG(0);
    presurveytime_ = GOOGLE_LONGLONG(0);
    resurveytime_ = GOOGLE_LONGLONG(0);
    ordertime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    deliverytime_ = GOOGLE_LONGLONG(0);
    installtime_ = GOOGLE_LONGLONG(0);
    if (has_geocode()) {
      if (geocode_ != &::google::protobuf::internal::kEmptyString) {
        geocode_->clear();
      }
    }
    if (has_ordertitle()) {
      if (ordertitle_ != &::google::protobuf::internal::kEmptyString) {
        ordertitle_->clear();
      }
    }
    if (has_customername()) {
      if (customername_ != &::google::protobuf::internal::kEmptyString) {
        customername_->clear();
      }
    }
    if (has_customertel()) {
      if (customertel_ != &::google::protobuf::internal::kEmptyString) {
        customertel_->clear();
      }
    }
    if (has_customerpostcode()) {
      if (customerpostcode_ != &::google::protobuf::internal::kEmptyString) {
        customerpostcode_->clear();
      }
    }
    if (has_customerqq()) {
      if (customerqq_ != &::google::protobuf::internal::kEmptyString) {
        customerqq_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_customeremail()) {
      if (customeremail_ != &::google::protobuf::internal::kEmptyString) {
        customeremail_->clear();
      }
    }
    if (has_installaddress()) {
      if (installaddress_ != &::google::protobuf::internal::kEmptyString) {
        installaddress_->clear();
      }
    }
    if (has_ordermemo()) {
      if (ordermemo_ != &::google::protobuf::internal::kEmptyString) {
        ordermemo_->clear();
      }
    }
    if (has_attachfilepath()) {
      if (attachfilepath_ != &::google::protobuf::internal::kEmptyString) {
        attachfilepath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_OrderDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 OrderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ShopID;
        break;
      }

      // required int32 ShopID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShopID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MaxMetaID;
        break;
      }

      // required int32 MaxMetaID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxMetaID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmetaid_)));
          set_has_maxmetaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DesignerID;
        break;
      }

      // required int32 DesignerID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designerid_)));
          set_has_designerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SellerID;
        break;
      }

      // required int32 SellerID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SellerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellerid_)));
          set_has_sellerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_PreSurveyorID;
        break;
      }

      // required int32 PreSurveyorID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PreSurveyorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presurveyorid_)));
          set_has_presurveyorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ReSurveyorID;
        break;
      }

      // required int32 ReSurveyorID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReSurveyorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resurveyorid_)));
          set_has_resurveyorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsNew;
        break;
      }

      // required bool IsNew = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsNew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_IsShare;
        break;
      }

      // required bool IsShare = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsShare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshare_)));
          set_has_isshare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_IsUpload;
        break;
      }

      // required bool IsUpload = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUpload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isupload_)));
          set_has_isupload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_PreSurveyTime;
        break;
      }

      // required int64 PreSurveyTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PreSurveyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &presurveytime_)));
          set_has_presurveytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ReSurveyTime;
        break;
      }

      // required int64 ReSurveyTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReSurveyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &resurveytime_)));
          set_has_resurveytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_OrderTime;
        break;
      }

      // required int64 OrderTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ordertime_)));
          set_has_ordertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_DeliveryTime;
        break;
      }

      // required int64 DeliveryTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeliveryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deliverytime_)));
          set_has_deliverytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_InstallTime;
        break;
      }

      // required int64 InstallTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstallTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &installtime_)));
          set_has_installtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_GeoCode;
        break;
      }

      // required string GeoCode = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GeoCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geocode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geocode().data(), this->geocode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_OrderTitle;
        break;
      }

      // required string OrderTitle = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordertitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordertitle().data(), this->ordertitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_CustomerName;
        break;
      }

      // required string CustomerName = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customername().data(), this->customername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_CustomerTel;
        break;
      }

      // required string CustomerTel = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomerTel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customertel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customertel().data(), this->customertel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_CustomerPostcode;
        break;
      }

      // required string CustomerPostcode = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomerPostcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customerpostcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customerpostcode().data(), this->customerpostcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_CustomerQQ;
        break;
      }

      // required string CustomerQQ = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomerQQ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customerqq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customerqq().data(), this->customerqq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_CustomerEmail;
        break;
      }

      // required string CustomerEmail = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomerEmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customeremail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customeremail().data(), this->customeremail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_InstallAddress;
        break;
      }

      // required string InstallAddress = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InstallAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_installaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->installaddress().data(), this->installaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_OrderMemo;
        break;
      }

      // required string OrderMemo = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordermemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordermemo().data(), this->ordermemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_AttachFilePath;
        break;
      }

      // required string AttachFilePath = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttachFilePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attachfilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attachfilepath().data(), this->attachfilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_OrderDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 OrderID = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->orderid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->factoryid(), output);
  }

  // required int32 ShopID = 4;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shopid(), output);
  }

  // required int32 MaxMetaID = 5;
  if (has_maxmetaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxmetaid(), output);
  }

  // required int32 DesignerID = 6;
  if (has_designerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->designerid(), output);
  }

  // required int32 SellerID = 7;
  if (has_sellerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sellerid(), output);
  }

  // required int32 PreSurveyorID = 8;
  if (has_presurveyorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->presurveyorid(), output);
  }

  // required int32 ReSurveyorID = 9;
  if (has_resurveyorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->resurveyorid(), output);
  }

  // required bool IsNew = 10;
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isnew(), output);
  }

  // required bool IsShare = 11;
  if (has_isshare()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isshare(), output);
  }

  // required bool IsUpload = 12;
  if (has_isupload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isupload(), output);
  }

  // required int64 CreateTime = 13;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->createtime(), output);
  }

  // required int64 PreSurveyTime = 14;
  if (has_presurveytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->presurveytime(), output);
  }

  // required int64 ReSurveyTime = 15;
  if (has_resurveytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->resurveytime(), output);
  }

  // required int64 OrderTime = 16;
  if (has_ordertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->ordertime(), output);
  }

  // required int64 DeliveryTime = 17;
  if (has_deliverytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->deliverytime(), output);
  }

  // required int64 InstallTime = 18;
  if (has_installtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->installtime(), output);
  }

  // required string GeoCode = 19;
  if (has_geocode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geocode().data(), this->geocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->geocode(), output);
  }

  // required string OrderTitle = 20;
  if (has_ordertitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordertitle().data(), this->ordertitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->ordertitle(), output);
  }

  // required string CustomerName = 21;
  if (has_customername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customername().data(), this->customername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->customername(), output);
  }

  // required string CustomerTel = 22;
  if (has_customertel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customertel().data(), this->customertel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->customertel(), output);
  }

  // required string CustomerPostcode = 23;
  if (has_customerpostcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customerpostcode().data(), this->customerpostcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->customerpostcode(), output);
  }

  // required string CustomerQQ = 24;
  if (has_customerqq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customerqq().data(), this->customerqq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->customerqq(), output);
  }

  // required string CustomerEmail = 25;
  if (has_customeremail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customeremail().data(), this->customeremail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->customeremail(), output);
  }

  // required string InstallAddress = 26;
  if (has_installaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->installaddress().data(), this->installaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->installaddress(), output);
  }

  // required string OrderMemo = 27;
  if (has_ordermemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordermemo().data(), this->ordermemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->ordermemo(), output);
  }

  // required string AttachFilePath = 28;
  if (has_attachfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachfilepath().data(), this->attachfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->attachfilepath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_OrderDataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 OrderID = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->orderid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->factoryid(), target);
  }

  // required int32 ShopID = 4;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shopid(), target);
  }

  // required int32 MaxMetaID = 5;
  if (has_maxmetaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxmetaid(), target);
  }

  // required int32 DesignerID = 6;
  if (has_designerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->designerid(), target);
  }

  // required int32 SellerID = 7;
  if (has_sellerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sellerid(), target);
  }

  // required int32 PreSurveyorID = 8;
  if (has_presurveyorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->presurveyorid(), target);
  }

  // required int32 ReSurveyorID = 9;
  if (has_resurveyorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->resurveyorid(), target);
  }

  // required bool IsNew = 10;
  if (has_isnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isnew(), target);
  }

  // required bool IsShare = 11;
  if (has_isshare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isshare(), target);
  }

  // required bool IsUpload = 12;
  if (has_isupload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isupload(), target);
  }

  // required int64 CreateTime = 13;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->createtime(), target);
  }

  // required int64 PreSurveyTime = 14;
  if (has_presurveytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->presurveytime(), target);
  }

  // required int64 ReSurveyTime = 15;
  if (has_resurveytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->resurveytime(), target);
  }

  // required int64 OrderTime = 16;
  if (has_ordertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->ordertime(), target);
  }

  // required int64 DeliveryTime = 17;
  if (has_deliverytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->deliverytime(), target);
  }

  // required int64 InstallTime = 18;
  if (has_installtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->installtime(), target);
  }

  // required string GeoCode = 19;
  if (has_geocode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geocode().data(), this->geocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->geocode(), target);
  }

  // required string OrderTitle = 20;
  if (has_ordertitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordertitle().data(), this->ordertitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->ordertitle(), target);
  }

  // required string CustomerName = 21;
  if (has_customername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customername().data(), this->customername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->customername(), target);
  }

  // required string CustomerTel = 22;
  if (has_customertel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customertel().data(), this->customertel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->customertel(), target);
  }

  // required string CustomerPostcode = 23;
  if (has_customerpostcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customerpostcode().data(), this->customerpostcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->customerpostcode(), target);
  }

  // required string CustomerQQ = 24;
  if (has_customerqq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customerqq().data(), this->customerqq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->customerqq(), target);
  }

  // required string CustomerEmail = 25;
  if (has_customeremail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customeremail().data(), this->customeremail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->customeremail(), target);
  }

  // required string InstallAddress = 26;
  if (has_installaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->installaddress().data(), this->installaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->installaddress(), target);
  }

  // required string OrderMemo = 27;
  if (has_ordermemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordermemo().data(), this->ordermemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->ordermemo(), target);
  }

  // required string AttachFilePath = 28;
  if (has_attachfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachfilepath().data(), this->attachfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->attachfilepath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_OrderDataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 OrderID = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 FactoryID = 3;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 ShopID = 4;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

    // required int32 MaxMetaID = 5;
    if (has_maxmetaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmetaid());
    }

    // required int32 DesignerID = 6;
    if (has_designerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designerid());
    }

    // required int32 SellerID = 7;
    if (has_sellerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellerid());
    }

    // required int32 PreSurveyorID = 8;
    if (has_presurveyorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presurveyorid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 ReSurveyorID = 9;
    if (has_resurveyorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resurveyorid());
    }

    // required bool IsNew = 10;
    if (has_isnew()) {
      total_size += 1 + 1;
    }

    // required bool IsShare = 11;
    if (has_isshare()) {
      total_size += 1 + 1;
    }

    // required bool IsUpload = 12;
    if (has_isupload()) {
      total_size += 1 + 1;
    }

    // required int64 CreateTime = 13;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 PreSurveyTime = 14;
    if (has_presurveytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->presurveytime());
    }

    // required int64 ReSurveyTime = 15;
    if (has_resurveytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->resurveytime());
    }

    // required int64 OrderTime = 16;
    if (has_ordertime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ordertime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 DeliveryTime = 17;
    if (has_deliverytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deliverytime());
    }

    // required int64 InstallTime = 18;
    if (has_installtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->installtime());
    }

    // required string GeoCode = 19;
    if (has_geocode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geocode());
    }

    // required string OrderTitle = 20;
    if (has_ordertitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordertitle());
    }

    // required string CustomerName = 21;
    if (has_customername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customername());
    }

    // required string CustomerTel = 22;
    if (has_customertel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customertel());
    }

    // required string CustomerPostcode = 23;
    if (has_customerpostcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customerpostcode());
    }

    // required string CustomerQQ = 24;
    if (has_customerqq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customerqq());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required string CustomerEmail = 25;
    if (has_customeremail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customeremail());
    }

    // required string InstallAddress = 26;
    if (has_installaddress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->installaddress());
    }

    // required string OrderMemo = 27;
    if (has_ordermemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordermemo());
    }

    // required string AttachFilePath = 28;
    if (has_attachfilepath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attachfilepath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_OrderDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_OrderDataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_OrderDataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_OrderDataInfo::MergeFrom(const GC_OrderDataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_maxmetaid()) {
      set_maxmetaid(from.maxmetaid());
    }
    if (from.has_designerid()) {
      set_designerid(from.designerid());
    }
    if (from.has_sellerid()) {
      set_sellerid(from.sellerid());
    }
    if (from.has_presurveyorid()) {
      set_presurveyorid(from.presurveyorid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resurveyorid()) {
      set_resurveyorid(from.resurveyorid());
    }
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
    if (from.has_isshare()) {
      set_isshare(from.isshare());
    }
    if (from.has_isupload()) {
      set_isupload(from.isupload());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_presurveytime()) {
      set_presurveytime(from.presurveytime());
    }
    if (from.has_resurveytime()) {
      set_resurveytime(from.resurveytime());
    }
    if (from.has_ordertime()) {
      set_ordertime(from.ordertime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_deliverytime()) {
      set_deliverytime(from.deliverytime());
    }
    if (from.has_installtime()) {
      set_installtime(from.installtime());
    }
    if (from.has_geocode()) {
      set_geocode(from.geocode());
    }
    if (from.has_ordertitle()) {
      set_ordertitle(from.ordertitle());
    }
    if (from.has_customername()) {
      set_customername(from.customername());
    }
    if (from.has_customertel()) {
      set_customertel(from.customertel());
    }
    if (from.has_customerpostcode()) {
      set_customerpostcode(from.customerpostcode());
    }
    if (from.has_customerqq()) {
      set_customerqq(from.customerqq());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_customeremail()) {
      set_customeremail(from.customeremail());
    }
    if (from.has_installaddress()) {
      set_installaddress(from.installaddress());
    }
    if (from.has_ordermemo()) {
      set_ordermemo(from.ordermemo());
    }
    if (from.has_attachfilepath()) {
      set_attachfilepath(from.attachfilepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_OrderDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_OrderDataInfo::CopyFrom(const GC_OrderDataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_OrderDataInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0fffffff) != 0x0fffffff) return false;

  return true;
}

void GC_OrderDataInfo::Swap(GC_OrderDataInfo* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(shopid_, other->shopid_);
    std::swap(maxmetaid_, other->maxmetaid_);
    std::swap(designerid_, other->designerid_);
    std::swap(sellerid_, other->sellerid_);
    std::swap(presurveyorid_, other->presurveyorid_);
    std::swap(resurveyorid_, other->resurveyorid_);
    std::swap(isnew_, other->isnew_);
    std::swap(isshare_, other->isshare_);
    std::swap(isupload_, other->isupload_);
    std::swap(createtime_, other->createtime_);
    std::swap(presurveytime_, other->presurveytime_);
    std::swap(resurveytime_, other->resurveytime_);
    std::swap(ordertime_, other->ordertime_);
    std::swap(deliverytime_, other->deliverytime_);
    std::swap(installtime_, other->installtime_);
    std::swap(geocode_, other->geocode_);
    std::swap(ordertitle_, other->ordertitle_);
    std::swap(customername_, other->customername_);
    std::swap(customertel_, other->customertel_);
    std::swap(customerpostcode_, other->customerpostcode_);
    std::swap(customerqq_, other->customerqq_);
    std::swap(customeremail_, other->customeremail_);
    std::swap(installaddress_, other->installaddress_);
    std::swap(ordermemo_, other->ordermemo_);
    std::swap(attachfilepath_, other->attachfilepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_OrderDataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_OrderDataInfo_descriptor_;
  metadata.reflection = GC_OrderDataInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_PackInfo::kDesignPackIDFieldNumber;
const int GC_PackInfo::kOrderCateFieldNumber;
const int GC_PackInfo::kDesignPlanIDFieldNumber;
const int GC_PackInfo::kOrderIDFieldNumber;
const int GC_PackInfo::kFittingPackIDFieldNumber;
const int GC_PackInfo::kFactoryIDFieldNumber;
const int GC_PackInfo::kVerCodeFieldNumber;
const int GC_PackInfo::kIsSeparateFieldNumber;
const int GC_PackInfo::kUseCountFieldNumber;
const int GC_PackInfo::kCreatorIDFieldNumber;
const int GC_PackInfo::kUpdaterIDFieldNumber;
const int GC_PackInfo::kCreateTimeFieldNumber;
const int GC_PackInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_PackInfo::GC_PackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_PackInfo::InitAsDefaultInstance() {
}

GC_PackInfo::GC_PackInfo(const GC_PackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_PackInfo::SharedCtor() {
  _cached_size_ = 0;
  designpackid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  fittingpackid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  isseparate_ = false;
  usecount_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_PackInfo::~GC_PackInfo() {
  SharedDtor();
}

void GC_PackInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_PackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_PackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_PackInfo_descriptor_;
}

const GC_PackInfo& GC_PackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_PackInfo* GC_PackInfo::default_instance_ = NULL;

GC_PackInfo* GC_PackInfo::New() const {
  return new GC_PackInfo;
}

void GC_PackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designpackid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    fittingpackid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    isseparate_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    usecount_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_PackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignPackID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designpackid_)));
          set_has_designpackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FittingPackID;
        break;
      }

      // required int32 FittingPackID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FittingPackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fittingpackid_)));
          set_has_fittingpackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_IsSeparate;
        break;
      }

      // required bool IsSeparate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSeparate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isseparate_)));
          set_has_isseparate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_UseCount;
        break;
      }

      // required int32 UseCount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usecount_)));
          set_has_usecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_PackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignPackID = 1;
  if (has_designpackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designpackid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 FittingPackID = 5;
  if (has_fittingpackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fittingpackid(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vercode(), output);
  }

  // required bool IsSeparate = 8;
  if (has_isseparate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isseparate(), output);
  }

  // required int32 UseCount = 9;
  if (has_usecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->usecount(), output);
  }

  // required int32 CreatorID = 10;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->creatorid(), output);
  }

  // required int32 UpdaterID = 11;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->updaterid(), output);
  }

  // required int64 CreateTime = 12;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->createtime(), output);
  }

  // required int64 UpdateTime = 13;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_PackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignPackID = 1;
  if (has_designpackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designpackid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 FittingPackID = 5;
  if (has_fittingpackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fittingpackid(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vercode(), target);
  }

  // required bool IsSeparate = 8;
  if (has_isseparate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isseparate(), target);
  }

  // required int32 UseCount = 9;
  if (has_usecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->usecount(), target);
  }

  // required int32 CreatorID = 10;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->creatorid(), target);
  }

  // required int32 UpdaterID = 11;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->updaterid(), target);
  }

  // required int64 CreateTime = 12;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->createtime(), target);
  }

  // required int64 UpdateTime = 13;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_PackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignPackID = 1;
    if (has_designpackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designpackid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 FittingPackID = 5;
    if (has_fittingpackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fittingpackid());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 7;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required bool IsSeparate = 8;
    if (has_isseparate()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 UseCount = 9;
    if (has_usecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usecount());
    }

    // required int32 CreatorID = 10;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 11;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 12;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 13;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_PackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_PackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_PackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_PackInfo::MergeFrom(const GC_PackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designpackid()) {
      set_designpackid(from.designpackid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_fittingpackid()) {
      set_fittingpackid(from.fittingpackid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_isseparate()) {
      set_isseparate(from.isseparate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usecount()) {
      set_usecount(from.usecount());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_PackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_PackInfo::CopyFrom(const GC_PackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_PackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void GC_PackInfo::Swap(GC_PackInfo* other) {
  if (other != this) {
    std::swap(designpackid_, other->designpackid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(fittingpackid_, other->fittingpackid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(isseparate_, other->isseparate_);
    std::swap(usecount_, other->usecount_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_PackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_PackInfo_descriptor_;
  metadata.reflection = GC_PackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_PointInfo::kDesignPlanIDFieldNumber;
const int GC_PointInfo::kOrderCateFieldNumber;
const int GC_PointInfo::kOrderIDFieldNumber;
const int GC_PointInfo::kFactoryIDFieldNumber;
const int GC_PointInfo::kVerCodeFieldNumber;
const int GC_PointInfo::kTransObjIDFieldNumber;
const int GC_PointInfo::kTransObjTypeFieldNumber;
const int GC_PointInfo::kPointIndexFieldNumber;
const int GC_PointInfo::kCoordXFieldNumber;
const int GC_PointInfo::kCoordYFieldNumber;
const int GC_PointInfo::kCoordZFieldNumber;
#endif  // !_MSC_VER

GC_PointInfo::GC_PointInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_PointInfo::InitAsDefaultInstance() {
}

GC_PointInfo::GC_PointInfo(const GC_PointInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_PointInfo::SharedCtor() {
  _cached_size_ = 0;
  designplanid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  transobjid_ = 0;
  transobjtype_ = 0;
  pointindex_ = 0;
  coordx_ = 0;
  coordy_ = 0;
  coordz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_PointInfo::~GC_PointInfo() {
  SharedDtor();
}

void GC_PointInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_PointInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_PointInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_PointInfo_descriptor_;
}

const GC_PointInfo& GC_PointInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_PointInfo* GC_PointInfo::default_instance_ = NULL;

GC_PointInfo* GC_PointInfo::New() const {
  return new GC_PointInfo;
}

void GC_PointInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designplanid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    transobjid_ = 0;
    transobjtype_ = 0;
    pointindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    coordx_ = 0;
    coordy_ = 0;
    coordz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_PointInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignPlanID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TransObjID;
        break;
      }

      // required int32 TransObjID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TransObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transobjid_)));
          set_has_transobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_TransObjType;
        break;
      }

      // required int32 TransObjType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TransObjType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transobjtype_)));
          set_has_transobjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_PointIndex;
        break;
      }

      // required int32 PointIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PointIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointindex_)));
          set_has_pointindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_CoordX;
        break;
      }

      // required double CoordX = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CoordX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coordx_)));
          set_has_coordx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_CoordY;
        break;
      }

      // required double CoordY = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CoordY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coordy_)));
          set_has_coordy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_CoordZ;
        break;
      }

      // required double CoordZ = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CoordZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coordz_)));
          set_has_coordz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_PointInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignPlanID = 1;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designplanid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int64 OrderID = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->orderid(), output);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->factoryid(), output);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->vercode(), output);
  }

  // required int32 TransObjID = 6;
  if (has_transobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->transobjid(), output);
  }

  // required int32 TransObjType = 7;
  if (has_transobjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->transobjtype(), output);
  }

  // required int32 PointIndex = 8;
  if (has_pointindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pointindex(), output);
  }

  // required double CoordX = 9;
  if (has_coordx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->coordx(), output);
  }

  // required double CoordY = 10;
  if (has_coordy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->coordy(), output);
  }

  // required double CoordZ = 11;
  if (has_coordz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->coordz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_PointInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignPlanID = 1;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designplanid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int64 OrderID = 3;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->orderid(), target);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->factoryid(), target);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->vercode(), target);
  }

  // required int32 TransObjID = 6;
  if (has_transobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->transobjid(), target);
  }

  // required int32 TransObjType = 7;
  if (has_transobjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->transobjtype(), target);
  }

  // required int32 PointIndex = 8;
  if (has_pointindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pointindex(), target);
  }

  // required double CoordX = 9;
  if (has_coordx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->coordx(), target);
  }

  // required double CoordY = 10;
  if (has_coordy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->coordy(), target);
  }

  // required double CoordZ = 11;
  if (has_coordz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->coordz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_PointInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignPlanID = 1;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 FactoryID = 4;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 5;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 TransObjID = 6;
    if (has_transobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transobjid());
    }

    // required int32 TransObjType = 7;
    if (has_transobjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transobjtype());
    }

    // required int32 PointIndex = 8;
    if (has_pointindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double CoordX = 9;
    if (has_coordx()) {
      total_size += 1 + 8;
    }

    // required double CoordY = 10;
    if (has_coordy()) {
      total_size += 1 + 8;
    }

    // required double CoordZ = 11;
    if (has_coordz()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_PointInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_PointInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_PointInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_PointInfo::MergeFrom(const GC_PointInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_transobjid()) {
      set_transobjid(from.transobjid());
    }
    if (from.has_transobjtype()) {
      set_transobjtype(from.transobjtype());
    }
    if (from.has_pointindex()) {
      set_pointindex(from.pointindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_coordx()) {
      set_coordx(from.coordx());
    }
    if (from.has_coordy()) {
      set_coordy(from.coordy());
    }
    if (from.has_coordz()) {
      set_coordz(from.coordz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_PointInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_PointInfo::CopyFrom(const GC_PointInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_PointInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void GC_PointInfo::Swap(GC_PointInfo* other) {
  if (other != this) {
    std::swap(designplanid_, other->designplanid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(transobjid_, other->transobjid_);
    std::swap(transobjtype_, other->transobjtype_);
    std::swap(pointindex_, other->pointindex_);
    std::swap(coordx_, other->coordx_);
    std::swap(coordy_, other->coordy_);
    std::swap(coordz_, other->coordz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_PointInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_PointInfo_descriptor_;
  metadata.reflection = GC_PointInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_PrintElementInfo::kDesignPrintElementIDFieldNumber;
const int GC_PrintElementInfo::kDesignPrintGroupIDFieldNumber;
const int GC_PrintElementInfo::kDesignPrintIDFieldNumber;
const int GC_PrintElementInfo::kOrderCateFieldNumber;
const int GC_PrintElementInfo::kDesignPlanIDFieldNumber;
const int GC_PrintElementInfo::kOrderIDFieldNumber;
const int GC_PrintElementInfo::kObjTypeFieldNumber;
const int GC_PrintElementInfo::kObjIDFieldNumber;
const int GC_PrintElementInfo::kPrintGroupIDFieldNumber;
const int GC_PrintElementInfo::kViewTypeFieldNumber;
const int GC_PrintElementInfo::kIsVisibleFieldNumber;
const int GC_PrintElementInfo::kIsLockedFieldNumber;
const int GC_PrintElementInfo::kCreatorIDFieldNumber;
const int GC_PrintElementInfo::kUpdaterIDFieldNumber;
const int GC_PrintElementInfo::kCreateTimeFieldNumber;
const int GC_PrintElementInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_PrintElementInfo::GC_PrintElementInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_PrintElementInfo::InitAsDefaultInstance() {
}

GC_PrintElementInfo::GC_PrintElementInfo(const GC_PrintElementInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_PrintElementInfo::SharedCtor() {
  _cached_size_ = 0;
  designprintelementid_ = 0;
  designprintgroupid_ = 0;
  designprintid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  objtype_ = 0;
  objid_ = 0;
  printgroupid_ = 0;
  viewtype_ = 0;
  isvisible_ = false;
  islocked_ = false;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_PrintElementInfo::~GC_PrintElementInfo() {
  SharedDtor();
}

void GC_PrintElementInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_PrintElementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_PrintElementInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_PrintElementInfo_descriptor_;
}

const GC_PrintElementInfo& GC_PrintElementInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_PrintElementInfo* GC_PrintElementInfo::default_instance_ = NULL;

GC_PrintElementInfo* GC_PrintElementInfo::New() const {
  return new GC_PrintElementInfo;
}

void GC_PrintElementInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designprintelementid_ = 0;
    designprintgroupid_ = 0;
    designprintid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    objtype_ = 0;
    objid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    printgroupid_ = 0;
    viewtype_ = 0;
    isvisible_ = false;
    islocked_ = false;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_PrintElementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignPrintElementID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprintelementid_)));
          set_has_designprintelementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DesignPrintGroupID;
        break;
      }

      // required int32 DesignPrintGroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPrintGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprintgroupid_)));
          set_has_designprintgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPrintID;
        break;
      }

      // required int32 DesignPrintID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPrintID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprintid_)));
          set_has_designprintid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ObjType;
        break;
      }

      // required int32 ObjType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objtype_)));
          set_has_objtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ObjID;
        break;
      }

      // required int32 ObjID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_PrintGroupID;
        break;
      }

      // required int32 PrintGroupID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrintGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printgroupid_)));
          set_has_printgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ViewType;
        break;
      }

      // required int32 ViewType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ViewType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewtype_)));
          set_has_viewtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_PrintElementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignPrintElementID = 1;
  if (has_designprintelementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designprintelementid(), output);
  }

  // required int32 DesignPrintGroupID = 2;
  if (has_designprintgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->designprintgroupid(), output);
  }

  // required int32 DesignPrintID = 3;
  if (has_designprintid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designprintid(), output);
  }

  // required int32 OrderCate = 4;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int64 OrderID = 6;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->orderid(), output);
  }

  // required int32 ObjType = 7;
  if (has_objtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->objtype(), output);
  }

  // required int32 ObjID = 8;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->objid(), output);
  }

  // required int32 PrintGroupID = 9;
  if (has_printgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->printgroupid(), output);
  }

  // required int32 ViewType = 10;
  if (has_viewtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->viewtype(), output);
  }

  // required bool IsVisible = 11;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isvisible(), output);
  }

  // required bool IsLocked = 12;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->islocked(), output);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->creatorid(), output);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->updaterid(), output);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->createtime(), output);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_PrintElementInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignPrintElementID = 1;
  if (has_designprintelementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designprintelementid(), target);
  }

  // required int32 DesignPrintGroupID = 2;
  if (has_designprintgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->designprintgroupid(), target);
  }

  // required int32 DesignPrintID = 3;
  if (has_designprintid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designprintid(), target);
  }

  // required int32 OrderCate = 4;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int64 OrderID = 6;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->orderid(), target);
  }

  // required int32 ObjType = 7;
  if (has_objtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->objtype(), target);
  }

  // required int32 ObjID = 8;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->objid(), target);
  }

  // required int32 PrintGroupID = 9;
  if (has_printgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->printgroupid(), target);
  }

  // required int32 ViewType = 10;
  if (has_viewtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->viewtype(), target);
  }

  // required bool IsVisible = 11;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isvisible(), target);
  }

  // required bool IsLocked = 12;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->islocked(), target);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->creatorid(), target);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->updaterid(), target);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->createtime(), target);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_PrintElementInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignPrintElementID = 1;
    if (has_designprintelementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprintelementid());
    }

    // required int32 DesignPrintGroupID = 2;
    if (has_designprintgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprintgroupid());
    }

    // required int32 DesignPrintID = 3;
    if (has_designprintid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprintid());
    }

    // required int32 OrderCate = 4;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 6;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 ObjType = 7;
    if (has_objtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objtype());
    }

    // required int32 ObjID = 8;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 PrintGroupID = 9;
    if (has_printgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printgroupid());
    }

    // required int32 ViewType = 10;
    if (has_viewtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewtype());
    }

    // required bool IsVisible = 11;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required bool IsLocked = 12;
    if (has_islocked()) {
      total_size += 1 + 1;
    }

    // required int32 CreatorID = 13;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 14;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 15;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 16;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_PrintElementInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_PrintElementInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_PrintElementInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_PrintElementInfo::MergeFrom(const GC_PrintElementInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designprintelementid()) {
      set_designprintelementid(from.designprintelementid());
    }
    if (from.has_designprintgroupid()) {
      set_designprintgroupid(from.designprintgroupid());
    }
    if (from.has_designprintid()) {
      set_designprintid(from.designprintid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_objtype()) {
      set_objtype(from.objtype());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_printgroupid()) {
      set_printgroupid(from.printgroupid());
    }
    if (from.has_viewtype()) {
      set_viewtype(from.viewtype());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_PrintElementInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_PrintElementInfo::CopyFrom(const GC_PrintElementInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_PrintElementInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void GC_PrintElementInfo::Swap(GC_PrintElementInfo* other) {
  if (other != this) {
    std::swap(designprintelementid_, other->designprintelementid_);
    std::swap(designprintgroupid_, other->designprintgroupid_);
    std::swap(designprintid_, other->designprintid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(objtype_, other->objtype_);
    std::swap(objid_, other->objid_);
    std::swap(printgroupid_, other->printgroupid_);
    std::swap(viewtype_, other->viewtype_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_PrintElementInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_PrintElementInfo_descriptor_;
  metadata.reflection = GC_PrintElementInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_PrintGroupInfo::kDesignPrintGroupIDFieldNumber;
const int GC_PrintGroupInfo::kDesignPrintIDFieldNumber;
const int GC_PrintGroupInfo::kOrderCateFieldNumber;
const int GC_PrintGroupInfo::kDesignPlanIDFieldNumber;
const int GC_PrintGroupInfo::kOrderIDFieldNumber;
const int GC_PrintGroupInfo::kPrintIDFieldNumber;
const int GC_PrintGroupInfo::kPrintGroupIDFieldNumber;
const int GC_PrintGroupInfo::kManyViewPortFieldNumber;
const int GC_PrintGroupInfo::kFrameStyleFieldNumber;
const int GC_PrintGroupInfo::kFrameColorRFieldNumber;
const int GC_PrintGroupInfo::kFrameColorGFieldNumber;
const int GC_PrintGroupInfo::kFrameColorBFieldNumber;
const int GC_PrintGroupInfo::kFrameColorAFieldNumber;
const int GC_PrintGroupInfo::kFrameWidthFieldNumber;
const int GC_PrintGroupInfo::kLeftXFieldNumber;
const int GC_PrintGroupInfo::kRightYFieldNumber;
const int GC_PrintGroupInfo::kScaleXFieldNumber;
const int GC_PrintGroupInfo::kScaleYFieldNumber;
const int GC_PrintGroupInfo::kScaleOffsetXFieldNumber;
const int GC_PrintGroupInfo::kScaleOffsetYFieldNumber;
const int GC_PrintGroupInfo::kScaleFactorFieldNumber;
const int GC_PrintGroupInfo::kIsVisibleFieldNumber;
const int GC_PrintGroupInfo::kIsLockedFieldNumber;
const int GC_PrintGroupInfo::kCreatorIDFieldNumber;
const int GC_PrintGroupInfo::kUpdaterIDFieldNumber;
const int GC_PrintGroupInfo::kCreateTimeFieldNumber;
const int GC_PrintGroupInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_PrintGroupInfo::GC_PrintGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_PrintGroupInfo::InitAsDefaultInstance() {
}

GC_PrintGroupInfo::GC_PrintGroupInfo(const GC_PrintGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_PrintGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  designprintgroupid_ = 0;
  designprintid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  printid_ = 0;
  printgroupid_ = 0;
  manyviewport_ = false;
  framestyle_ = 0;
  framecolorr_ = 0;
  framecolorg_ = 0;
  framecolorb_ = 0;
  framecolora_ = 0;
  framewidth_ = 0;
  leftx_ = 0;
  righty_ = 0;
  scalex_ = 0;
  scaley_ = 0;
  scaleoffsetx_ = 0;
  scaleoffsety_ = 0;
  scalefactor_ = 0;
  isvisible_ = false;
  islocked_ = false;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_PrintGroupInfo::~GC_PrintGroupInfo() {
  SharedDtor();
}

void GC_PrintGroupInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_PrintGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_PrintGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_PrintGroupInfo_descriptor_;
}

const GC_PrintGroupInfo& GC_PrintGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_PrintGroupInfo* GC_PrintGroupInfo::default_instance_ = NULL;

GC_PrintGroupInfo* GC_PrintGroupInfo::New() const {
  return new GC_PrintGroupInfo;
}

void GC_PrintGroupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designprintgroupid_ = 0;
    designprintid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    printid_ = 0;
    printgroupid_ = 0;
    manyviewport_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    framestyle_ = 0;
    framecolorr_ = 0;
    framecolorg_ = 0;
    framecolorb_ = 0;
    framecolora_ = 0;
    framewidth_ = 0;
    leftx_ = 0;
    righty_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    scalex_ = 0;
    scaley_ = 0;
    scaleoffsetx_ = 0;
    scaleoffsety_ = 0;
    scalefactor_ = 0;
    isvisible_ = false;
    islocked_ = false;
    creatorid_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_PrintGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignPrintGroupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprintgroupid_)));
          set_has_designprintgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DesignPrintID;
        break;
      }

      // required int32 DesignPrintID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPrintID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprintid_)));
          set_has_designprintid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_PrintID;
        break;
      }

      // required int32 PrintID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrintID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printid_)));
          set_has_printid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_PrintGroupID;
        break;
      }

      // required int32 PrintGroupID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrintGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printgroupid_)));
          set_has_printgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ManyViewPort;
        break;
      }

      // required bool ManyViewPort = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ManyViewPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manyviewport_)));
          set_has_manyviewport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FrameStyle;
        break;
      }

      // required int32 FrameStyle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrameStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framestyle_)));
          set_has_framestyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_FrameColorR;
        break;
      }

      // required int32 FrameColorR = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrameColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framecolorr_)));
          set_has_framecolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_FrameColorG;
        break;
      }

      // required int32 FrameColorG = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrameColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framecolorg_)));
          set_has_framecolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_FrameColorB;
        break;
      }

      // required int32 FrameColorB = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrameColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framecolorb_)));
          set_has_framecolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_FrameColorA;
        break;
      }

      // required int32 FrameColorA = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrameColorA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framecolora_)));
          set_has_framecolora();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_FrameWidth;
        break;
      }

      // required double FrameWidth = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrameWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &framewidth_)));
          set_has_framewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_LeftX;
        break;
      }

      // required double LeftX = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LeftX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leftx_)));
          set_has_leftx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_RightY;
        break;
      }

      // required double RightY = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RightY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &righty_)));
          set_has_righty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_ScaleX;
        break;
      }

      // required double ScaleX = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ScaleX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scalex_)));
          set_has_scalex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_ScaleY;
        break;
      }

      // required double ScaleY = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ScaleY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scaley_)));
          set_has_scaley();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_ScaleOffsetX;
        break;
      }

      // required double ScaleOffsetX = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ScaleOffsetX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scaleoffsetx_)));
          set_has_scaleoffsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_ScaleOffsetY;
        break;
      }

      // required double ScaleOffsetY = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ScaleOffsetY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scaleoffsety_)));
          set_has_scaleoffsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_ScaleFactor;
        break;
      }

      // required double ScaleFactor = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ScaleFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scalefactor_)));
          set_has_scalefactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_PrintGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignPrintGroupID = 1;
  if (has_designprintgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designprintgroupid(), output);
  }

  // required int32 DesignPrintID = 2;
  if (has_designprintid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->designprintid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 4;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->designplanid(), output);
  }

  // required int64 OrderID = 5;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->orderid(), output);
  }

  // required int32 PrintID = 6;
  if (has_printid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->printid(), output);
  }

  // required int32 PrintGroupID = 7;
  if (has_printgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->printgroupid(), output);
  }

  // required bool ManyViewPort = 8;
  if (has_manyviewport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->manyviewport(), output);
  }

  // required int32 FrameStyle = 9;
  if (has_framestyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->framestyle(), output);
  }

  // required int32 FrameColorR = 10;
  if (has_framecolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->framecolorr(), output);
  }

  // required int32 FrameColorG = 11;
  if (has_framecolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->framecolorg(), output);
  }

  // required int32 FrameColorB = 12;
  if (has_framecolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->framecolorb(), output);
  }

  // required int32 FrameColorA = 13;
  if (has_framecolora()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->framecolora(), output);
  }

  // required double FrameWidth = 14;
  if (has_framewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->framewidth(), output);
  }

  // required double LeftX = 15;
  if (has_leftx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->leftx(), output);
  }

  // required double RightY = 16;
  if (has_righty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->righty(), output);
  }

  // required double ScaleX = 17;
  if (has_scalex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->scalex(), output);
  }

  // required double ScaleY = 18;
  if (has_scaley()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->scaley(), output);
  }

  // required double ScaleOffsetX = 19;
  if (has_scaleoffsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->scaleoffsetx(), output);
  }

  // required double ScaleOffsetY = 20;
  if (has_scaleoffsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->scaleoffsety(), output);
  }

  // required double ScaleFactor = 21;
  if (has_scalefactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->scalefactor(), output);
  }

  // required bool IsVisible = 22;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->isvisible(), output);
  }

  // required bool IsLocked = 23;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->islocked(), output);
  }

  // required int32 CreatorID = 24;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->creatorid(), output);
  }

  // required int32 UpdaterID = 25;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->updaterid(), output);
  }

  // required int64 CreateTime = 26;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->createtime(), output);
  }

  // required int64 UpdateTime = 27;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_PrintGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignPrintGroupID = 1;
  if (has_designprintgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designprintgroupid(), target);
  }

  // required int32 DesignPrintID = 2;
  if (has_designprintid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->designprintid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 4;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->designplanid(), target);
  }

  // required int64 OrderID = 5;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->orderid(), target);
  }

  // required int32 PrintID = 6;
  if (has_printid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->printid(), target);
  }

  // required int32 PrintGroupID = 7;
  if (has_printgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->printgroupid(), target);
  }

  // required bool ManyViewPort = 8;
  if (has_manyviewport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->manyviewport(), target);
  }

  // required int32 FrameStyle = 9;
  if (has_framestyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->framestyle(), target);
  }

  // required int32 FrameColorR = 10;
  if (has_framecolorr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->framecolorr(), target);
  }

  // required int32 FrameColorG = 11;
  if (has_framecolorg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->framecolorg(), target);
  }

  // required int32 FrameColorB = 12;
  if (has_framecolorb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->framecolorb(), target);
  }

  // required int32 FrameColorA = 13;
  if (has_framecolora()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->framecolora(), target);
  }

  // required double FrameWidth = 14;
  if (has_framewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->framewidth(), target);
  }

  // required double LeftX = 15;
  if (has_leftx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->leftx(), target);
  }

  // required double RightY = 16;
  if (has_righty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->righty(), target);
  }

  // required double ScaleX = 17;
  if (has_scalex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->scalex(), target);
  }

  // required double ScaleY = 18;
  if (has_scaley()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->scaley(), target);
  }

  // required double ScaleOffsetX = 19;
  if (has_scaleoffsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->scaleoffsetx(), target);
  }

  // required double ScaleOffsetY = 20;
  if (has_scaleoffsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->scaleoffsety(), target);
  }

  // required double ScaleFactor = 21;
  if (has_scalefactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->scalefactor(), target);
  }

  // required bool IsVisible = 22;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->isvisible(), target);
  }

  // required bool IsLocked = 23;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->islocked(), target);
  }

  // required int32 CreatorID = 24;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->creatorid(), target);
  }

  // required int32 UpdaterID = 25;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->updaterid(), target);
  }

  // required int64 CreateTime = 26;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->createtime(), target);
  }

  // required int64 UpdateTime = 27;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_PrintGroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignPrintGroupID = 1;
    if (has_designprintgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprintgroupid());
    }

    // required int32 DesignPrintID = 2;
    if (has_designprintid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprintid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 4;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 5;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 PrintID = 6;
    if (has_printid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printid());
    }

    // required int32 PrintGroupID = 7;
    if (has_printgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printgroupid());
    }

    // required bool ManyViewPort = 8;
    if (has_manyviewport()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 FrameStyle = 9;
    if (has_framestyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->framestyle());
    }

    // required int32 FrameColorR = 10;
    if (has_framecolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->framecolorr());
    }

    // required int32 FrameColorG = 11;
    if (has_framecolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->framecolorg());
    }

    // required int32 FrameColorB = 12;
    if (has_framecolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->framecolorb());
    }

    // required int32 FrameColorA = 13;
    if (has_framecolora()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->framecolora());
    }

    // required double FrameWidth = 14;
    if (has_framewidth()) {
      total_size += 1 + 8;
    }

    // required double LeftX = 15;
    if (has_leftx()) {
      total_size += 1 + 8;
    }

    // required double RightY = 16;
    if (has_righty()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double ScaleX = 17;
    if (has_scalex()) {
      total_size += 2 + 8;
    }

    // required double ScaleY = 18;
    if (has_scaley()) {
      total_size += 2 + 8;
    }

    // required double ScaleOffsetX = 19;
    if (has_scaleoffsetx()) {
      total_size += 2 + 8;
    }

    // required double ScaleOffsetY = 20;
    if (has_scaleoffsety()) {
      total_size += 2 + 8;
    }

    // required double ScaleFactor = 21;
    if (has_scalefactor()) {
      total_size += 2 + 8;
    }

    // required bool IsVisible = 22;
    if (has_isvisible()) {
      total_size += 2 + 1;
    }

    // required bool IsLocked = 23;
    if (has_islocked()) {
      total_size += 2 + 1;
    }

    // required int32 CreatorID = 24;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 UpdaterID = 25;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 26;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 27;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_PrintGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_PrintGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_PrintGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_PrintGroupInfo::MergeFrom(const GC_PrintGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designprintgroupid()) {
      set_designprintgroupid(from.designprintgroupid());
    }
    if (from.has_designprintid()) {
      set_designprintid(from.designprintid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_printid()) {
      set_printid(from.printid());
    }
    if (from.has_printgroupid()) {
      set_printgroupid(from.printgroupid());
    }
    if (from.has_manyviewport()) {
      set_manyviewport(from.manyviewport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_framestyle()) {
      set_framestyle(from.framestyle());
    }
    if (from.has_framecolorr()) {
      set_framecolorr(from.framecolorr());
    }
    if (from.has_framecolorg()) {
      set_framecolorg(from.framecolorg());
    }
    if (from.has_framecolorb()) {
      set_framecolorb(from.framecolorb());
    }
    if (from.has_framecolora()) {
      set_framecolora(from.framecolora());
    }
    if (from.has_framewidth()) {
      set_framewidth(from.framewidth());
    }
    if (from.has_leftx()) {
      set_leftx(from.leftx());
    }
    if (from.has_righty()) {
      set_righty(from.righty());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_scalex()) {
      set_scalex(from.scalex());
    }
    if (from.has_scaley()) {
      set_scaley(from.scaley());
    }
    if (from.has_scaleoffsetx()) {
      set_scaleoffsetx(from.scaleoffsetx());
    }
    if (from.has_scaleoffsety()) {
      set_scaleoffsety(from.scaleoffsety());
    }
    if (from.has_scalefactor()) {
      set_scalefactor(from.scalefactor());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_PrintGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_PrintGroupInfo::CopyFrom(const GC_PrintGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_PrintGroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x07ffffff) != 0x07ffffff) return false;

  return true;
}

void GC_PrintGroupInfo::Swap(GC_PrintGroupInfo* other) {
  if (other != this) {
    std::swap(designprintgroupid_, other->designprintgroupid_);
    std::swap(designprintid_, other->designprintid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(printid_, other->printid_);
    std::swap(printgroupid_, other->printgroupid_);
    std::swap(manyviewport_, other->manyviewport_);
    std::swap(framestyle_, other->framestyle_);
    std::swap(framecolorr_, other->framecolorr_);
    std::swap(framecolorg_, other->framecolorg_);
    std::swap(framecolorb_, other->framecolorb_);
    std::swap(framecolora_, other->framecolora_);
    std::swap(framewidth_, other->framewidth_);
    std::swap(leftx_, other->leftx_);
    std::swap(righty_, other->righty_);
    std::swap(scalex_, other->scalex_);
    std::swap(scaley_, other->scaley_);
    std::swap(scaleoffsetx_, other->scaleoffsetx_);
    std::swap(scaleoffsety_, other->scaleoffsety_);
    std::swap(scalefactor_, other->scalefactor_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_PrintGroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_PrintGroupInfo_descriptor_;
  metadata.reflection = GC_PrintGroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_PrintInfo::kDesignPrintIDFieldNumber;
const int GC_PrintInfo::kOrderCateFieldNumber;
const int GC_PrintInfo::kDesignPlanIDFieldNumber;
const int GC_PrintInfo::kOrderIDFieldNumber;
const int GC_PrintInfo::kPrintIDFieldNumber;
const int GC_PrintInfo::kPageBorderStyleFieldNumber;
const int GC_PrintInfo::kPageBorderColorFieldNumber;
const int GC_PrintInfo::kPageBorderWidthFieldNumber;
const int GC_PrintInfo::kShaderPicTopXFieldNumber;
const int GC_PrintInfo::kShaderPicTopYFieldNumber;
const int GC_PrintInfo::kShaderPicHeightFieldNumber;
const int GC_PrintInfo::kShaderPicWidthFieldNumber;
const int GC_PrintInfo::kCreatorIDFieldNumber;
const int GC_PrintInfo::kUpdaterIDFieldNumber;
const int GC_PrintInfo::kCreateTimeFieldNumber;
const int GC_PrintInfo::kUpdateTimeFieldNumber;
const int GC_PrintInfo::kPrintNameFieldNumber;
const int GC_PrintInfo::kShaderPicPathFieldNumber;
#endif  // !_MSC_VER

GC_PrintInfo::GC_PrintInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_PrintInfo::InitAsDefaultInstance() {
}

GC_PrintInfo::GC_PrintInfo(const GC_PrintInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_PrintInfo::SharedCtor() {
  _cached_size_ = 0;
  designprintid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  printid_ = 0;
  pageborderstyle_ = 0;
  pagebordercolor_ = GOOGLE_LONGLONG(0);
  pageborderwidth_ = 0;
  shaderpictopx_ = 0;
  shaderpictopy_ = 0;
  shaderpicheight_ = 0;
  shaderpicwidth_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  printname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shaderpicpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_PrintInfo::~GC_PrintInfo() {
  SharedDtor();
}

void GC_PrintInfo::SharedDtor() {
  if (printname_ != &::google::protobuf::internal::kEmptyString) {
    delete printname_;
  }
  if (shaderpicpath_ != &::google::protobuf::internal::kEmptyString) {
    delete shaderpicpath_;
  }
  if (this != default_instance_) {
  }
}

void GC_PrintInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_PrintInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_PrintInfo_descriptor_;
}

const GC_PrintInfo& GC_PrintInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_PrintInfo* GC_PrintInfo::default_instance_ = NULL;

GC_PrintInfo* GC_PrintInfo::New() const {
  return new GC_PrintInfo;
}

void GC_PrintInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designprintid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    printid_ = 0;
    pageborderstyle_ = 0;
    pagebordercolor_ = GOOGLE_LONGLONG(0);
    pageborderwidth_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    shaderpictopx_ = 0;
    shaderpictopy_ = 0;
    shaderpicheight_ = 0;
    shaderpicwidth_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_printname()) {
      if (printname_ != &::google::protobuf::internal::kEmptyString) {
        printname_->clear();
      }
    }
    if (has_shaderpicpath()) {
      if (shaderpicpath_ != &::google::protobuf::internal::kEmptyString) {
        shaderpicpath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_PrintInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignPrintID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprintid_)));
          set_has_designprintid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_PrintID;
        break;
      }

      // required int32 PrintID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrintID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printid_)));
          set_has_printid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_PageBorderStyle;
        break;
      }

      // required int32 PageBorderStyle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PageBorderStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pageborderstyle_)));
          set_has_pageborderstyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_PageBorderColor;
        break;
      }

      // required int64 PageBorderColor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PageBorderColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pagebordercolor_)));
          set_has_pagebordercolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_PageBorderWidth;
        break;
      }

      // required double PageBorderWidth = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PageBorderWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pageborderwidth_)));
          set_has_pageborderwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_ShaderPicTopX;
        break;
      }

      // required double ShaderPicTopX = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShaderPicTopX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shaderpictopx_)));
          set_has_shaderpictopx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_ShaderPicTopY;
        break;
      }

      // required double ShaderPicTopY = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShaderPicTopY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shaderpictopy_)));
          set_has_shaderpictopy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_ShaderPicHeight;
        break;
      }

      // required double ShaderPicHeight = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShaderPicHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shaderpicheight_)));
          set_has_shaderpicheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_ShaderPicWidth;
        break;
      }

      // required double ShaderPicWidth = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShaderPicWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shaderpicwidth_)));
          set_has_shaderpicwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_PrintName;
        break;
      }

      // required string PrintName = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrintName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printname().data(), this->printname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_ShaderPicPath;
        break;
      }

      // required string ShaderPicPath = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShaderPicPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shaderpicpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shaderpicpath().data(), this->shaderpicpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_PrintInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignPrintID = 1;
  if (has_designprintid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designprintid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 PrintID = 5;
  if (has_printid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->printid(), output);
  }

  // required int32 PageBorderStyle = 6;
  if (has_pageborderstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pageborderstyle(), output);
  }

  // required int64 PageBorderColor = 7;
  if (has_pagebordercolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->pagebordercolor(), output);
  }

  // required double PageBorderWidth = 8;
  if (has_pageborderwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pageborderwidth(), output);
  }

  // required double ShaderPicTopX = 9;
  if (has_shaderpictopx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->shaderpictopx(), output);
  }

  // required double ShaderPicTopY = 10;
  if (has_shaderpictopy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->shaderpictopy(), output);
  }

  // required double ShaderPicHeight = 11;
  if (has_shaderpicheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->shaderpicheight(), output);
  }

  // required double ShaderPicWidth = 12;
  if (has_shaderpicwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->shaderpicwidth(), output);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->creatorid(), output);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->updaterid(), output);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->createtime(), output);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->updatetime(), output);
  }

  // required string PrintName = 17;
  if (has_printname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printname().data(), this->printname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->printname(), output);
  }

  // required string ShaderPicPath = 18;
  if (has_shaderpicpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shaderpicpath().data(), this->shaderpicpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->shaderpicpath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_PrintInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignPrintID = 1;
  if (has_designprintid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designprintid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 PrintID = 5;
  if (has_printid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->printid(), target);
  }

  // required int32 PageBorderStyle = 6;
  if (has_pageborderstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pageborderstyle(), target);
  }

  // required int64 PageBorderColor = 7;
  if (has_pagebordercolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->pagebordercolor(), target);
  }

  // required double PageBorderWidth = 8;
  if (has_pageborderwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pageborderwidth(), target);
  }

  // required double ShaderPicTopX = 9;
  if (has_shaderpictopx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->shaderpictopx(), target);
  }

  // required double ShaderPicTopY = 10;
  if (has_shaderpictopy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->shaderpictopy(), target);
  }

  // required double ShaderPicHeight = 11;
  if (has_shaderpicheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->shaderpicheight(), target);
  }

  // required double ShaderPicWidth = 12;
  if (has_shaderpicwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->shaderpicwidth(), target);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->creatorid(), target);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->updaterid(), target);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->createtime(), target);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->updatetime(), target);
  }

  // required string PrintName = 17;
  if (has_printname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printname().data(), this->printname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->printname(), target);
  }

  // required string ShaderPicPath = 18;
  if (has_shaderpicpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shaderpicpath().data(), this->shaderpicpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->shaderpicpath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_PrintInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignPrintID = 1;
    if (has_designprintid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprintid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 PrintID = 5;
    if (has_printid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printid());
    }

    // required int32 PageBorderStyle = 6;
    if (has_pageborderstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pageborderstyle());
    }

    // required int64 PageBorderColor = 7;
    if (has_pagebordercolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pagebordercolor());
    }

    // required double PageBorderWidth = 8;
    if (has_pageborderwidth()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double ShaderPicTopX = 9;
    if (has_shaderpictopx()) {
      total_size += 1 + 8;
    }

    // required double ShaderPicTopY = 10;
    if (has_shaderpictopy()) {
      total_size += 1 + 8;
    }

    // required double ShaderPicHeight = 11;
    if (has_shaderpicheight()) {
      total_size += 1 + 8;
    }

    // required double ShaderPicWidth = 12;
    if (has_shaderpicwidth()) {
      total_size += 1 + 8;
    }

    // required int32 CreatorID = 13;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 14;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 15;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 16;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string PrintName = 17;
    if (has_printname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printname());
    }

    // required string ShaderPicPath = 18;
    if (has_shaderpicpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shaderpicpath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_PrintInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_PrintInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_PrintInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_PrintInfo::MergeFrom(const GC_PrintInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designprintid()) {
      set_designprintid(from.designprintid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_printid()) {
      set_printid(from.printid());
    }
    if (from.has_pageborderstyle()) {
      set_pageborderstyle(from.pageborderstyle());
    }
    if (from.has_pagebordercolor()) {
      set_pagebordercolor(from.pagebordercolor());
    }
    if (from.has_pageborderwidth()) {
      set_pageborderwidth(from.pageborderwidth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_shaderpictopx()) {
      set_shaderpictopx(from.shaderpictopx());
    }
    if (from.has_shaderpictopy()) {
      set_shaderpictopy(from.shaderpictopy());
    }
    if (from.has_shaderpicheight()) {
      set_shaderpicheight(from.shaderpicheight());
    }
    if (from.has_shaderpicwidth()) {
      set_shaderpicwidth(from.shaderpicwidth());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_printname()) {
      set_printname(from.printname());
    }
    if (from.has_shaderpicpath()) {
      set_shaderpicpath(from.shaderpicpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_PrintInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_PrintInfo::CopyFrom(const GC_PrintInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_PrintInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;

  return true;
}

void GC_PrintInfo::Swap(GC_PrintInfo* other) {
  if (other != this) {
    std::swap(designprintid_, other->designprintid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(printid_, other->printid_);
    std::swap(pageborderstyle_, other->pageborderstyle_);
    std::swap(pagebordercolor_, other->pagebordercolor_);
    std::swap(pageborderwidth_, other->pageborderwidth_);
    std::swap(shaderpictopx_, other->shaderpictopx_);
    std::swap(shaderpictopy_, other->shaderpictopy_);
    std::swap(shaderpicheight_, other->shaderpicheight_);
    std::swap(shaderpicwidth_, other->shaderpicwidth_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(printname_, other->printname_);
    std::swap(shaderpicpath_, other->shaderpicpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_PrintInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_PrintInfo_descriptor_;
  metadata.reflection = GC_PrintInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_PrintTableInfo::kDesignPrintTableIDFieldNumber;
const int GC_PrintTableInfo::kDesignPrintIDFieldNumber;
const int GC_PrintTableInfo::kOrderCateFieldNumber;
const int GC_PrintTableInfo::kOrderIDFieldNumber;
const int GC_PrintTableInfo::kDesignPlanIDFieldNumber;
const int GC_PrintTableInfo::kTableSignFieldNumber;
const int GC_PrintTableInfo::kWhichLineFieldNumber;
const int GC_PrintTableInfo::kAlignFieldNumber;
const int GC_PrintTableInfo::kLogoSignFieldNumber;
const int GC_PrintTableInfo::kTextPosFieldNumber;
const int GC_PrintTableInfo::kSetLineFieldNumber;
const int GC_PrintTableInfo::kHasLogoFieldNumber;
const int GC_PrintTableInfo::kIsSelectedFieldNumber;
const int GC_PrintTableInfo::kLineUpFieldNumber;
const int GC_PrintTableInfo::kLineDownFieldNumber;
const int GC_PrintTableInfo::kLineLeftFieldNumber;
const int GC_PrintTableInfo::kLineRightFieldNumber;
const int GC_PrintTableInfo::kLineUpSignFieldNumber;
const int GC_PrintTableInfo::kLineDownSignFieldNumber;
const int GC_PrintTableInfo::kLineLeftSignFieldNumber;
const int GC_PrintTableInfo::kLineRightSignFieldNumber;
const int GC_PrintTableInfo::kLineWidthFieldNumber;
const int GC_PrintTableInfo::kLeftTopXFieldNumber;
const int GC_PrintTableInfo::kLeftTopYFieldNumber;
const int GC_PrintTableInfo::kXLenFieldNumber;
const int GC_PrintTableInfo::kYLenFieldNumber;
const int GC_PrintTableInfo::kLineUpWidthFieldNumber;
const int GC_PrintTableInfo::kLineDownWidthFieldNumber;
const int GC_PrintTableInfo::kLineRightWidthFieldNumber;
const int GC_PrintTableInfo::kLineLeftWidthFieldNumber;
const int GC_PrintTableInfo::kFaceNameFieldNumber;
const int GC_PrintTableInfo::kLogoPathFieldNumber;
const int GC_PrintTableInfo::kSerialPathFieldNumber;
const int GC_PrintTableInfo::kTextValueFieldNumber;
#endif  // !_MSC_VER

GC_PrintTableInfo::GC_PrintTableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_PrintTableInfo::InitAsDefaultInstance() {
}

GC_PrintTableInfo::GC_PrintTableInfo(const GC_PrintTableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_PrintTableInfo::SharedCtor() {
  _cached_size_ = 0;
  designprinttableid_ = 0;
  designprintid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  tablesign_ = 0;
  whichline_ = 0;
  align_ = 0;
  logosign_ = 0;
  textpos_ = 0;
  setline_ = false;
  haslogo_ = false;
  isselected_ = false;
  lineup_ = false;
  linedown_ = false;
  lineleft_ = false;
  lineright_ = false;
  lineupsign_ = 0;
  linedownsign_ = 0;
  lineleftsign_ = 0;
  linerightsign_ = 0;
  linewidth_ = 0;
  lefttopx_ = 0;
  lefttopy_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  lineupwidth_ = 0;
  linedownwidth_ = 0;
  linerightwidth_ = 0;
  lineleftwidth_ = 0;
  facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  textvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_PrintTableInfo::~GC_PrintTableInfo() {
  SharedDtor();
}

void GC_PrintTableInfo::SharedDtor() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (logopath_ != &::google::protobuf::internal::kEmptyString) {
    delete logopath_;
  }
  if (serialpath_ != &::google::protobuf::internal::kEmptyString) {
    delete serialpath_;
  }
  if (textvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete textvalue_;
  }
  if (this != default_instance_) {
  }
}

void GC_PrintTableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_PrintTableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_PrintTableInfo_descriptor_;
}

const GC_PrintTableInfo& GC_PrintTableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_PrintTableInfo* GC_PrintTableInfo::default_instance_ = NULL;

GC_PrintTableInfo* GC_PrintTableInfo::New() const {
  return new GC_PrintTableInfo;
}

void GC_PrintTableInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designprinttableid_ = 0;
    designprintid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    tablesign_ = 0;
    whichline_ = 0;
    align_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    logosign_ = 0;
    textpos_ = 0;
    setline_ = false;
    haslogo_ = false;
    isselected_ = false;
    lineup_ = false;
    linedown_ = false;
    lineleft_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lineright_ = false;
    lineupsign_ = 0;
    linedownsign_ = 0;
    lineleftsign_ = 0;
    linerightsign_ = 0;
    linewidth_ = 0;
    lefttopx_ = 0;
    lefttopy_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    xlen_ = 0;
    ylen_ = 0;
    lineupwidth_ = 0;
    linedownwidth_ = 0;
    linerightwidth_ = 0;
    lineleftwidth_ = 0;
    if (has_facename()) {
      if (facename_ != &::google::protobuf::internal::kEmptyString) {
        facename_->clear();
      }
    }
    if (has_logopath()) {
      if (logopath_ != &::google::protobuf::internal::kEmptyString) {
        logopath_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_serialpath()) {
      if (serialpath_ != &::google::protobuf::internal::kEmptyString) {
        serialpath_->clear();
      }
    }
    if (has_textvalue()) {
      if (textvalue_ != &::google::protobuf::internal::kEmptyString) {
        textvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_PrintTableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignPrintTableID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprinttableid_)));
          set_has_designprinttableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DesignPrintID;
        break;
      }

      // required int32 DesignPrintID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPrintID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprintid_)));
          set_has_designprintid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TableSign;
        break;
      }

      // required int32 TableSign = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablesign_)));
          set_has_tablesign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_WhichLine;
        break;
      }

      // required int32 WhichLine = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WhichLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whichline_)));
          set_has_whichline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Align;
        break;
      }

      // required int32 Align = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Align:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &align_)));
          set_has_align();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LogoSign;
        break;
      }

      // required int32 LogoSign = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LogoSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logosign_)));
          set_has_logosign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_TextPos;
        break;
      }

      // required int32 TextPos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TextPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &textpos_)));
          set_has_textpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SetLine;
        break;
      }

      // required bool SetLine = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SetLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setline_)));
          set_has_setline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_HasLogo;
        break;
      }

      // required bool HasLogo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasLogo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haslogo_)));
          set_has_haslogo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_IsSelected;
        break;
      }

      // required bool IsSelected = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSelected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isselected_)));
          set_has_isselected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_LineUp;
        break;
      }

      // required bool LineUp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lineup_)));
          set_has_lineup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_LineDown;
        break;
      }

      // required bool LineDown = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linedown_)));
          set_has_linedown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_LineLeft;
        break;
      }

      // required bool LineLeft = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineLeft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lineleft_)));
          set_has_lineleft();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_LineRight;
        break;
      }

      // required bool LineRight = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lineright_)));
          set_has_lineright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_LineUpSign;
        break;
      }

      // required int32 LineUpSign = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineUpSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineupsign_)));
          set_has_lineupsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_LineDownSign;
        break;
      }

      // required int32 LineDownSign = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineDownSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linedownsign_)));
          set_has_linedownsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_LineLeftSign;
        break;
      }

      // required int32 LineLeftSign = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineLeftSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineleftsign_)));
          set_has_lineleftsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_LineRightSign;
        break;
      }

      // required int32 LineRightSign = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineRightSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linerightsign_)));
          set_has_linerightsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_LineWidth;
        break;
      }

      // required double LineWidth = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linewidth_)));
          set_has_linewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_LeftTopX;
        break;
      }

      // required double LeftTopX = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LeftTopX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lefttopx_)));
          set_has_lefttopx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_LeftTopY;
        break;
      }

      // required double LeftTopY = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LeftTopY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lefttopy_)));
          set_has_lefttopy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_XLen;
        break;
      }

      // required double XLen = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_YLen;
        break;
      }

      // required double YLen = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_LineUpWidth;
        break;
      }

      // required double LineUpWidth = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineUpWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lineupwidth_)));
          set_has_lineupwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_LineDownWidth;
        break;
      }

      // required double LineDownWidth = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineDownWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linedownwidth_)));
          set_has_linedownwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_LineRightWidth;
        break;
      }

      // required double LineRightWidth = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineRightWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linerightwidth_)));
          set_has_linerightwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_LineLeftWidth;
        break;
      }

      // required double LineLeftWidth = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineLeftWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lineleftwidth_)));
          set_has_lineleftwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_FaceName;
        break;
      }

      // required string FaceName = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FaceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facename().data(), this->facename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_LogoPath;
        break;
      }

      // required string LogoPath = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LogoPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logopath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logopath().data(), this->logopath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_SerialPath;
        break;
      }

      // required string SerialPath = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SerialPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serialpath().data(), this->serialpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_TextValue;
        break;
      }

      // required string TextValue = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TextValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_textvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->textvalue().data(), this->textvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_PrintTableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignPrintTableID = 1;
  if (has_designprinttableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designprinttableid(), output);
  }

  // required int32 DesignPrintID = 2;
  if (has_designprintid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->designprintid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 TableSign = 6;
  if (has_tablesign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tablesign(), output);
  }

  // required int32 WhichLine = 7;
  if (has_whichline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->whichline(), output);
  }

  // required int32 Align = 8;
  if (has_align()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->align(), output);
  }

  // required int32 LogoSign = 9;
  if (has_logosign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->logosign(), output);
  }

  // required int32 TextPos = 10;
  if (has_textpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->textpos(), output);
  }

  // required bool SetLine = 11;
  if (has_setline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->setline(), output);
  }

  // required bool HasLogo = 12;
  if (has_haslogo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->haslogo(), output);
  }

  // required bool IsSelected = 13;
  if (has_isselected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isselected(), output);
  }

  // required bool LineUp = 14;
  if (has_lineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->lineup(), output);
  }

  // required bool LineDown = 15;
  if (has_linedown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->linedown(), output);
  }

  // required bool LineLeft = 16;
  if (has_lineleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->lineleft(), output);
  }

  // required bool LineRight = 17;
  if (has_lineright()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->lineright(), output);
  }

  // required int32 LineUpSign = 18;
  if (has_lineupsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->lineupsign(), output);
  }

  // required int32 LineDownSign = 19;
  if (has_linedownsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->linedownsign(), output);
  }

  // required int32 LineLeftSign = 20;
  if (has_lineleftsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->lineleftsign(), output);
  }

  // required int32 LineRightSign = 21;
  if (has_linerightsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->linerightsign(), output);
  }

  // required double LineWidth = 22;
  if (has_linewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->linewidth(), output);
  }

  // required double LeftTopX = 23;
  if (has_lefttopx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->lefttopx(), output);
  }

  // required double LeftTopY = 24;
  if (has_lefttopy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->lefttopy(), output);
  }

  // required double XLen = 25;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->xlen(), output);
  }

  // required double YLen = 26;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->ylen(), output);
  }

  // required double LineUpWidth = 27;
  if (has_lineupwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->lineupwidth(), output);
  }

  // required double LineDownWidth = 28;
  if (has_linedownwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->linedownwidth(), output);
  }

  // required double LineRightWidth = 29;
  if (has_linerightwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->linerightwidth(), output);
  }

  // required double LineLeftWidth = 30;
  if (has_lineleftwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->lineleftwidth(), output);
  }

  // required string FaceName = 31;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->facename(), output);
  }

  // required string LogoPath = 32;
  if (has_logopath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logopath().data(), this->logopath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->logopath(), output);
  }

  // required string SerialPath = 33;
  if (has_serialpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialpath().data(), this->serialpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->serialpath(), output);
  }

  // required string TextValue = 34;
  if (has_textvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textvalue().data(), this->textvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->textvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_PrintTableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignPrintTableID = 1;
  if (has_designprinttableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designprinttableid(), target);
  }

  // required int32 DesignPrintID = 2;
  if (has_designprintid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->designprintid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 TableSign = 6;
  if (has_tablesign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tablesign(), target);
  }

  // required int32 WhichLine = 7;
  if (has_whichline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->whichline(), target);
  }

  // required int32 Align = 8;
  if (has_align()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->align(), target);
  }

  // required int32 LogoSign = 9;
  if (has_logosign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->logosign(), target);
  }

  // required int32 TextPos = 10;
  if (has_textpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->textpos(), target);
  }

  // required bool SetLine = 11;
  if (has_setline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->setline(), target);
  }

  // required bool HasLogo = 12;
  if (has_haslogo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->haslogo(), target);
  }

  // required bool IsSelected = 13;
  if (has_isselected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isselected(), target);
  }

  // required bool LineUp = 14;
  if (has_lineup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->lineup(), target);
  }

  // required bool LineDown = 15;
  if (has_linedown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->linedown(), target);
  }

  // required bool LineLeft = 16;
  if (has_lineleft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->lineleft(), target);
  }

  // required bool LineRight = 17;
  if (has_lineright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->lineright(), target);
  }

  // required int32 LineUpSign = 18;
  if (has_lineupsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->lineupsign(), target);
  }

  // required int32 LineDownSign = 19;
  if (has_linedownsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->linedownsign(), target);
  }

  // required int32 LineLeftSign = 20;
  if (has_lineleftsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->lineleftsign(), target);
  }

  // required int32 LineRightSign = 21;
  if (has_linerightsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->linerightsign(), target);
  }

  // required double LineWidth = 22;
  if (has_linewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->linewidth(), target);
  }

  // required double LeftTopX = 23;
  if (has_lefttopx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->lefttopx(), target);
  }

  // required double LeftTopY = 24;
  if (has_lefttopy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->lefttopy(), target);
  }

  // required double XLen = 25;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->xlen(), target);
  }

  // required double YLen = 26;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->ylen(), target);
  }

  // required double LineUpWidth = 27;
  if (has_lineupwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->lineupwidth(), target);
  }

  // required double LineDownWidth = 28;
  if (has_linedownwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->linedownwidth(), target);
  }

  // required double LineRightWidth = 29;
  if (has_linerightwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->linerightwidth(), target);
  }

  // required double LineLeftWidth = 30;
  if (has_lineleftwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->lineleftwidth(), target);
  }

  // required string FaceName = 31;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->facename(), target);
  }

  // required string LogoPath = 32;
  if (has_logopath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logopath().data(), this->logopath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->logopath(), target);
  }

  // required string SerialPath = 33;
  if (has_serialpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialpath().data(), this->serialpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->serialpath(), target);
  }

  // required string TextValue = 34;
  if (has_textvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textvalue().data(), this->textvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->textvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_PrintTableInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignPrintTableID = 1;
    if (has_designprinttableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprinttableid());
    }

    // required int32 DesignPrintID = 2;
    if (has_designprintid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprintid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 TableSign = 6;
    if (has_tablesign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablesign());
    }

    // required int32 WhichLine = 7;
    if (has_whichline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whichline());
    }

    // required int32 Align = 8;
    if (has_align()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->align());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LogoSign = 9;
    if (has_logosign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logosign());
    }

    // required int32 TextPos = 10;
    if (has_textpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->textpos());
    }

    // required bool SetLine = 11;
    if (has_setline()) {
      total_size += 1 + 1;
    }

    // required bool HasLogo = 12;
    if (has_haslogo()) {
      total_size += 1 + 1;
    }

    // required bool IsSelected = 13;
    if (has_isselected()) {
      total_size += 1 + 1;
    }

    // required bool LineUp = 14;
    if (has_lineup()) {
      total_size += 1 + 1;
    }

    // required bool LineDown = 15;
    if (has_linedown()) {
      total_size += 1 + 1;
    }

    // required bool LineLeft = 16;
    if (has_lineleft()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bool LineRight = 17;
    if (has_lineright()) {
      total_size += 2 + 1;
    }

    // required int32 LineUpSign = 18;
    if (has_lineupsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineupsign());
    }

    // required int32 LineDownSign = 19;
    if (has_linedownsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linedownsign());
    }

    // required int32 LineLeftSign = 20;
    if (has_lineleftsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineleftsign());
    }

    // required int32 LineRightSign = 21;
    if (has_linerightsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linerightsign());
    }

    // required double LineWidth = 22;
    if (has_linewidth()) {
      total_size += 2 + 8;
    }

    // required double LeftTopX = 23;
    if (has_lefttopx()) {
      total_size += 2 + 8;
    }

    // required double LeftTopY = 24;
    if (has_lefttopy()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double XLen = 25;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 26;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double LineUpWidth = 27;
    if (has_lineupwidth()) {
      total_size += 2 + 8;
    }

    // required double LineDownWidth = 28;
    if (has_linedownwidth()) {
      total_size += 2 + 8;
    }

    // required double LineRightWidth = 29;
    if (has_linerightwidth()) {
      total_size += 2 + 8;
    }

    // required double LineLeftWidth = 30;
    if (has_lineleftwidth()) {
      total_size += 2 + 8;
    }

    // required string FaceName = 31;
    if (has_facename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facename());
    }

    // required string LogoPath = 32;
    if (has_logopath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logopath());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required string SerialPath = 33;
    if (has_serialpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialpath());
    }

    // required string TextValue = 34;
    if (has_textvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->textvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_PrintTableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_PrintTableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_PrintTableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_PrintTableInfo::MergeFrom(const GC_PrintTableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designprinttableid()) {
      set_designprinttableid(from.designprinttableid());
    }
    if (from.has_designprintid()) {
      set_designprintid(from.designprintid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_tablesign()) {
      set_tablesign(from.tablesign());
    }
    if (from.has_whichline()) {
      set_whichline(from.whichline());
    }
    if (from.has_align()) {
      set_align(from.align());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_logosign()) {
      set_logosign(from.logosign());
    }
    if (from.has_textpos()) {
      set_textpos(from.textpos());
    }
    if (from.has_setline()) {
      set_setline(from.setline());
    }
    if (from.has_haslogo()) {
      set_haslogo(from.haslogo());
    }
    if (from.has_isselected()) {
      set_isselected(from.isselected());
    }
    if (from.has_lineup()) {
      set_lineup(from.lineup());
    }
    if (from.has_linedown()) {
      set_linedown(from.linedown());
    }
    if (from.has_lineleft()) {
      set_lineleft(from.lineleft());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lineright()) {
      set_lineright(from.lineright());
    }
    if (from.has_lineupsign()) {
      set_lineupsign(from.lineupsign());
    }
    if (from.has_linedownsign()) {
      set_linedownsign(from.linedownsign());
    }
    if (from.has_lineleftsign()) {
      set_lineleftsign(from.lineleftsign());
    }
    if (from.has_linerightsign()) {
      set_linerightsign(from.linerightsign());
    }
    if (from.has_linewidth()) {
      set_linewidth(from.linewidth());
    }
    if (from.has_lefttopx()) {
      set_lefttopx(from.lefttopx());
    }
    if (from.has_lefttopy()) {
      set_lefttopy(from.lefttopy());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_lineupwidth()) {
      set_lineupwidth(from.lineupwidth());
    }
    if (from.has_linedownwidth()) {
      set_linedownwidth(from.linedownwidth());
    }
    if (from.has_linerightwidth()) {
      set_linerightwidth(from.linerightwidth());
    }
    if (from.has_lineleftwidth()) {
      set_lineleftwidth(from.lineleftwidth());
    }
    if (from.has_facename()) {
      set_facename(from.facename());
    }
    if (from.has_logopath()) {
      set_logopath(from.logopath());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_serialpath()) {
      set_serialpath(from.serialpath());
    }
    if (from.has_textvalue()) {
      set_textvalue(from.textvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_PrintTableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_PrintTableInfo::CopyFrom(const GC_PrintTableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_PrintTableInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_PrintTableInfo::Swap(GC_PrintTableInfo* other) {
  if (other != this) {
    std::swap(designprinttableid_, other->designprinttableid_);
    std::swap(designprintid_, other->designprintid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(tablesign_, other->tablesign_);
    std::swap(whichline_, other->whichline_);
    std::swap(align_, other->align_);
    std::swap(logosign_, other->logosign_);
    std::swap(textpos_, other->textpos_);
    std::swap(setline_, other->setline_);
    std::swap(haslogo_, other->haslogo_);
    std::swap(isselected_, other->isselected_);
    std::swap(lineup_, other->lineup_);
    std::swap(linedown_, other->linedown_);
    std::swap(lineleft_, other->lineleft_);
    std::swap(lineright_, other->lineright_);
    std::swap(lineupsign_, other->lineupsign_);
    std::swap(linedownsign_, other->linedownsign_);
    std::swap(lineleftsign_, other->lineleftsign_);
    std::swap(linerightsign_, other->linerightsign_);
    std::swap(linewidth_, other->linewidth_);
    std::swap(lefttopx_, other->lefttopx_);
    std::swap(lefttopy_, other->lefttopy_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(lineupwidth_, other->lineupwidth_);
    std::swap(linedownwidth_, other->linedownwidth_);
    std::swap(linerightwidth_, other->linerightwidth_);
    std::swap(lineleftwidth_, other->lineleftwidth_);
    std::swap(facename_, other->facename_);
    std::swap(logopath_, other->logopath_);
    std::swap(serialpath_, other->serialpath_);
    std::swap(textvalue_, other->textvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_PrintTableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_PrintTableInfo_descriptor_;
  metadata.reflection = GC_PrintTableInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_PrintTableRowColInfo::kDesignPrintTableRowColIDFieldNumber;
const int GC_PrintTableRowColInfo::kDesignPrintTableRowIDFieldNumber;
const int GC_PrintTableRowColInfo::kOrderCateFieldNumber;
const int GC_PrintTableRowColInfo::kOrderIDFieldNumber;
const int GC_PrintTableRowColInfo::kDesignPlanIDFieldNumber;
const int GC_PrintTableRowColInfo::kTableSignFieldNumber;
const int GC_PrintTableRowColInfo::kRowNumberFieldNumber;
const int GC_PrintTableRowColInfo::kColNumberFieldNumber;
const int GC_PrintTableRowColInfo::kWhichLineFieldNumber;
const int GC_PrintTableRowColInfo::kAlignFieldNumber;
const int GC_PrintTableRowColInfo::kLogoSignFieldNumber;
const int GC_PrintTableRowColInfo::kTextPosFieldNumber;
const int GC_PrintTableRowColInfo::kSetLineFieldNumber;
const int GC_PrintTableRowColInfo::kHasLogoFieldNumber;
const int GC_PrintTableRowColInfo::kIsSelectedFieldNumber;
const int GC_PrintTableRowColInfo::kLineUpFieldNumber;
const int GC_PrintTableRowColInfo::kLineDownFieldNumber;
const int GC_PrintTableRowColInfo::kLineLeftFieldNumber;
const int GC_PrintTableRowColInfo::kLineRightFieldNumber;
const int GC_PrintTableRowColInfo::kLineUpSignFieldNumber;
const int GC_PrintTableRowColInfo::kLineDownSignFieldNumber;
const int GC_PrintTableRowColInfo::kLineLeftSignFieldNumber;
const int GC_PrintTableRowColInfo::kLineRightSignFieldNumber;
const int GC_PrintTableRowColInfo::kLineWidthFieldNumber;
const int GC_PrintTableRowColInfo::kLeftTopXFieldNumber;
const int GC_PrintTableRowColInfo::kLeftTopYFieldNumber;
const int GC_PrintTableRowColInfo::kXLenFieldNumber;
const int GC_PrintTableRowColInfo::kYLenFieldNumber;
const int GC_PrintTableRowColInfo::kLineUpWidthFieldNumber;
const int GC_PrintTableRowColInfo::kLineDownWidthFieldNumber;
const int GC_PrintTableRowColInfo::kLineRightWidthFieldNumber;
const int GC_PrintTableRowColInfo::kLineLeftWidthFieldNumber;
const int GC_PrintTableRowColInfo::kFaceNameFieldNumber;
const int GC_PrintTableRowColInfo::kLogoPathFieldNumber;
const int GC_PrintTableRowColInfo::kSerialPathFieldNumber;
const int GC_PrintTableRowColInfo::kTextValueFieldNumber;
#endif  // !_MSC_VER

GC_PrintTableRowColInfo::GC_PrintTableRowColInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_PrintTableRowColInfo::InitAsDefaultInstance() {
}

GC_PrintTableRowColInfo::GC_PrintTableRowColInfo(const GC_PrintTableRowColInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_PrintTableRowColInfo::SharedCtor() {
  _cached_size_ = 0;
  designprinttablerowcolid_ = 0;
  designprinttablerowid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  tablesign_ = 0;
  rownumber_ = 0;
  colnumber_ = 0;
  whichline_ = 0;
  align_ = 0;
  logosign_ = 0;
  textpos_ = 0;
  setline_ = false;
  haslogo_ = false;
  isselected_ = false;
  lineup_ = false;
  linedown_ = false;
  lineleft_ = false;
  lineright_ = false;
  lineupsign_ = 0;
  linedownsign_ = 0;
  lineleftsign_ = 0;
  linerightsign_ = 0;
  linewidth_ = 0;
  lefttopx_ = 0;
  lefttopy_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  lineupwidth_ = 0;
  linedownwidth_ = 0;
  linerightwidth_ = 0;
  lineleftwidth_ = 0;
  facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  textvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_PrintTableRowColInfo::~GC_PrintTableRowColInfo() {
  SharedDtor();
}

void GC_PrintTableRowColInfo::SharedDtor() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (logopath_ != &::google::protobuf::internal::kEmptyString) {
    delete logopath_;
  }
  if (serialpath_ != &::google::protobuf::internal::kEmptyString) {
    delete serialpath_;
  }
  if (textvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete textvalue_;
  }
  if (this != default_instance_) {
  }
}

void GC_PrintTableRowColInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_PrintTableRowColInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_PrintTableRowColInfo_descriptor_;
}

const GC_PrintTableRowColInfo& GC_PrintTableRowColInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_PrintTableRowColInfo* GC_PrintTableRowColInfo::default_instance_ = NULL;

GC_PrintTableRowColInfo* GC_PrintTableRowColInfo::New() const {
  return new GC_PrintTableRowColInfo;
}

void GC_PrintTableRowColInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designprinttablerowcolid_ = 0;
    designprinttablerowid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    tablesign_ = 0;
    rownumber_ = 0;
    colnumber_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    whichline_ = 0;
    align_ = 0;
    logosign_ = 0;
    textpos_ = 0;
    setline_ = false;
    haslogo_ = false;
    isselected_ = false;
    lineup_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    linedown_ = false;
    lineleft_ = false;
    lineright_ = false;
    lineupsign_ = 0;
    linedownsign_ = 0;
    lineleftsign_ = 0;
    linerightsign_ = 0;
    linewidth_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    lefttopx_ = 0;
    lefttopy_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    lineupwidth_ = 0;
    linedownwidth_ = 0;
    linerightwidth_ = 0;
    lineleftwidth_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_facename()) {
      if (facename_ != &::google::protobuf::internal::kEmptyString) {
        facename_->clear();
      }
    }
    if (has_logopath()) {
      if (logopath_ != &::google::protobuf::internal::kEmptyString) {
        logopath_->clear();
      }
    }
    if (has_serialpath()) {
      if (serialpath_ != &::google::protobuf::internal::kEmptyString) {
        serialpath_->clear();
      }
    }
    if (has_textvalue()) {
      if (textvalue_ != &::google::protobuf::internal::kEmptyString) {
        textvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_PrintTableRowColInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignPrintTableRowColID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprinttablerowcolid_)));
          set_has_designprinttablerowcolid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DesignPrintTableRowID;
        break;
      }

      // required int32 DesignPrintTableRowID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPrintTableRowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprinttablerowid_)));
          set_has_designprinttablerowid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TableSign;
        break;
      }

      // required int32 TableSign = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablesign_)));
          set_has_tablesign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_RowNumber;
        break;
      }

      // required int32 RowNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RowNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rownumber_)));
          set_has_rownumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ColNumber;
        break;
      }

      // required int32 ColNumber = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ColNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colnumber_)));
          set_has_colnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_WhichLine;
        break;
      }

      // required int32 WhichLine = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WhichLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whichline_)));
          set_has_whichline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Align;
        break;
      }

      // required int32 Align = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Align:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &align_)));
          set_has_align();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_LogoSign;
        break;
      }

      // required int32 LogoSign = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LogoSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logosign_)));
          set_has_logosign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_TextPos;
        break;
      }

      // required int32 TextPos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TextPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &textpos_)));
          set_has_textpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_SetLine;
        break;
      }

      // required bool SetLine = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SetLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setline_)));
          set_has_setline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_HasLogo;
        break;
      }

      // required bool HasLogo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasLogo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haslogo_)));
          set_has_haslogo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_IsSelected;
        break;
      }

      // required bool IsSelected = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSelected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isselected_)));
          set_has_isselected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_LineUp;
        break;
      }

      // required bool LineUp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lineup_)));
          set_has_lineup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_LineDown;
        break;
      }

      // required bool LineDown = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linedown_)));
          set_has_linedown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_LineLeft;
        break;
      }

      // required bool LineLeft = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineLeft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lineleft_)));
          set_has_lineleft();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_LineRight;
        break;
      }

      // required bool LineRight = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lineright_)));
          set_has_lineright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_LineUpSign;
        break;
      }

      // required int32 LineUpSign = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineUpSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineupsign_)));
          set_has_lineupsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_LineDownSign;
        break;
      }

      // required int32 LineDownSign = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineDownSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linedownsign_)));
          set_has_linedownsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_LineLeftSign;
        break;
      }

      // required int32 LineLeftSign = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineLeftSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineleftsign_)));
          set_has_lineleftsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_LineRightSign;
        break;
      }

      // required int32 LineRightSign = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineRightSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linerightsign_)));
          set_has_linerightsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_LineWidth;
        break;
      }

      // required double LineWidth = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linewidth_)));
          set_has_linewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_LeftTopX;
        break;
      }

      // required double LeftTopX = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LeftTopX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lefttopx_)));
          set_has_lefttopx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_LeftTopY;
        break;
      }

      // required double LeftTopY = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LeftTopY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lefttopy_)));
          set_has_lefttopy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_XLen;
        break;
      }

      // required double XLen = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_YLen;
        break;
      }

      // required double YLen = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_LineUpWidth;
        break;
      }

      // required double LineUpWidth = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineUpWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lineupwidth_)));
          set_has_lineupwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_LineDownWidth;
        break;
      }

      // required double LineDownWidth = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineDownWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linedownwidth_)));
          set_has_linedownwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_LineRightWidth;
        break;
      }

      // required double LineRightWidth = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineRightWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linerightwidth_)));
          set_has_linerightwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_LineLeftWidth;
        break;
      }

      // required double LineLeftWidth = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineLeftWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lineleftwidth_)));
          set_has_lineleftwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_FaceName;
        break;
      }

      // required string FaceName = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FaceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facename().data(), this->facename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_LogoPath;
        break;
      }

      // required string LogoPath = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LogoPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logopath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logopath().data(), this->logopath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_SerialPath;
        break;
      }

      // required string SerialPath = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SerialPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serialpath().data(), this->serialpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_TextValue;
        break;
      }

      // required string TextValue = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TextValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_textvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->textvalue().data(), this->textvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_PrintTableRowColInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignPrintTableRowColID = 1;
  if (has_designprinttablerowcolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designprinttablerowcolid(), output);
  }

  // required int32 DesignPrintTableRowID = 2;
  if (has_designprinttablerowid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->designprinttablerowid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 TableSign = 6;
  if (has_tablesign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tablesign(), output);
  }

  // required int32 RowNumber = 7;
  if (has_rownumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rownumber(), output);
  }

  // required int32 ColNumber = 8;
  if (has_colnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->colnumber(), output);
  }

  // required int32 WhichLine = 9;
  if (has_whichline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->whichline(), output);
  }

  // required int32 Align = 10;
  if (has_align()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->align(), output);
  }

  // required int32 LogoSign = 11;
  if (has_logosign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->logosign(), output);
  }

  // required int32 TextPos = 12;
  if (has_textpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->textpos(), output);
  }

  // required bool SetLine = 13;
  if (has_setline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->setline(), output);
  }

  // required bool HasLogo = 14;
  if (has_haslogo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->haslogo(), output);
  }

  // required bool IsSelected = 15;
  if (has_isselected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isselected(), output);
  }

  // required bool LineUp = 16;
  if (has_lineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->lineup(), output);
  }

  // required bool LineDown = 17;
  if (has_linedown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->linedown(), output);
  }

  // required bool LineLeft = 18;
  if (has_lineleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->lineleft(), output);
  }

  // required bool LineRight = 19;
  if (has_lineright()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->lineright(), output);
  }

  // required int32 LineUpSign = 20;
  if (has_lineupsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->lineupsign(), output);
  }

  // required int32 LineDownSign = 21;
  if (has_linedownsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->linedownsign(), output);
  }

  // required int32 LineLeftSign = 22;
  if (has_lineleftsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->lineleftsign(), output);
  }

  // required int32 LineRightSign = 23;
  if (has_linerightsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->linerightsign(), output);
  }

  // required double LineWidth = 24;
  if (has_linewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->linewidth(), output);
  }

  // required double LeftTopX = 25;
  if (has_lefttopx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->lefttopx(), output);
  }

  // required double LeftTopY = 26;
  if (has_lefttopy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->lefttopy(), output);
  }

  // required double XLen = 27;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->xlen(), output);
  }

  // required double YLen = 28;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->ylen(), output);
  }

  // required double LineUpWidth = 29;
  if (has_lineupwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->lineupwidth(), output);
  }

  // required double LineDownWidth = 30;
  if (has_linedownwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->linedownwidth(), output);
  }

  // required double LineRightWidth = 31;
  if (has_linerightwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->linerightwidth(), output);
  }

  // required double LineLeftWidth = 32;
  if (has_lineleftwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->lineleftwidth(), output);
  }

  // required string FaceName = 33;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->facename(), output);
  }

  // required string LogoPath = 34;
  if (has_logopath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logopath().data(), this->logopath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->logopath(), output);
  }

  // required string SerialPath = 35;
  if (has_serialpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialpath().data(), this->serialpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->serialpath(), output);
  }

  // required string TextValue = 36;
  if (has_textvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textvalue().data(), this->textvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->textvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_PrintTableRowColInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignPrintTableRowColID = 1;
  if (has_designprinttablerowcolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designprinttablerowcolid(), target);
  }

  // required int32 DesignPrintTableRowID = 2;
  if (has_designprinttablerowid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->designprinttablerowid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 TableSign = 6;
  if (has_tablesign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tablesign(), target);
  }

  // required int32 RowNumber = 7;
  if (has_rownumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rownumber(), target);
  }

  // required int32 ColNumber = 8;
  if (has_colnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->colnumber(), target);
  }

  // required int32 WhichLine = 9;
  if (has_whichline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->whichline(), target);
  }

  // required int32 Align = 10;
  if (has_align()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->align(), target);
  }

  // required int32 LogoSign = 11;
  if (has_logosign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->logosign(), target);
  }

  // required int32 TextPos = 12;
  if (has_textpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->textpos(), target);
  }

  // required bool SetLine = 13;
  if (has_setline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->setline(), target);
  }

  // required bool HasLogo = 14;
  if (has_haslogo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->haslogo(), target);
  }

  // required bool IsSelected = 15;
  if (has_isselected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isselected(), target);
  }

  // required bool LineUp = 16;
  if (has_lineup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->lineup(), target);
  }

  // required bool LineDown = 17;
  if (has_linedown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->linedown(), target);
  }

  // required bool LineLeft = 18;
  if (has_lineleft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->lineleft(), target);
  }

  // required bool LineRight = 19;
  if (has_lineright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->lineright(), target);
  }

  // required int32 LineUpSign = 20;
  if (has_lineupsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->lineupsign(), target);
  }

  // required int32 LineDownSign = 21;
  if (has_linedownsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->linedownsign(), target);
  }

  // required int32 LineLeftSign = 22;
  if (has_lineleftsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->lineleftsign(), target);
  }

  // required int32 LineRightSign = 23;
  if (has_linerightsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->linerightsign(), target);
  }

  // required double LineWidth = 24;
  if (has_linewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->linewidth(), target);
  }

  // required double LeftTopX = 25;
  if (has_lefttopx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->lefttopx(), target);
  }

  // required double LeftTopY = 26;
  if (has_lefttopy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->lefttopy(), target);
  }

  // required double XLen = 27;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->xlen(), target);
  }

  // required double YLen = 28;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->ylen(), target);
  }

  // required double LineUpWidth = 29;
  if (has_lineupwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->lineupwidth(), target);
  }

  // required double LineDownWidth = 30;
  if (has_linedownwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->linedownwidth(), target);
  }

  // required double LineRightWidth = 31;
  if (has_linerightwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->linerightwidth(), target);
  }

  // required double LineLeftWidth = 32;
  if (has_lineleftwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->lineleftwidth(), target);
  }

  // required string FaceName = 33;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->facename(), target);
  }

  // required string LogoPath = 34;
  if (has_logopath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logopath().data(), this->logopath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->logopath(), target);
  }

  // required string SerialPath = 35;
  if (has_serialpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialpath().data(), this->serialpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->serialpath(), target);
  }

  // required string TextValue = 36;
  if (has_textvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textvalue().data(), this->textvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->textvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_PrintTableRowColInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignPrintTableRowColID = 1;
    if (has_designprinttablerowcolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprinttablerowcolid());
    }

    // required int32 DesignPrintTableRowID = 2;
    if (has_designprinttablerowid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprinttablerowid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 TableSign = 6;
    if (has_tablesign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablesign());
    }

    // required int32 RowNumber = 7;
    if (has_rownumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rownumber());
    }

    // required int32 ColNumber = 8;
    if (has_colnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colnumber());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 WhichLine = 9;
    if (has_whichline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whichline());
    }

    // required int32 Align = 10;
    if (has_align()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->align());
    }

    // required int32 LogoSign = 11;
    if (has_logosign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logosign());
    }

    // required int32 TextPos = 12;
    if (has_textpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->textpos());
    }

    // required bool SetLine = 13;
    if (has_setline()) {
      total_size += 1 + 1;
    }

    // required bool HasLogo = 14;
    if (has_haslogo()) {
      total_size += 1 + 1;
    }

    // required bool IsSelected = 15;
    if (has_isselected()) {
      total_size += 1 + 1;
    }

    // required bool LineUp = 16;
    if (has_lineup()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bool LineDown = 17;
    if (has_linedown()) {
      total_size += 2 + 1;
    }

    // required bool LineLeft = 18;
    if (has_lineleft()) {
      total_size += 2 + 1;
    }

    // required bool LineRight = 19;
    if (has_lineright()) {
      total_size += 2 + 1;
    }

    // required int32 LineUpSign = 20;
    if (has_lineupsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineupsign());
    }

    // required int32 LineDownSign = 21;
    if (has_linedownsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linedownsign());
    }

    // required int32 LineLeftSign = 22;
    if (has_lineleftsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineleftsign());
    }

    // required int32 LineRightSign = 23;
    if (has_linerightsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linerightsign());
    }

    // required double LineWidth = 24;
    if (has_linewidth()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double LeftTopX = 25;
    if (has_lefttopx()) {
      total_size += 2 + 8;
    }

    // required double LeftTopY = 26;
    if (has_lefttopy()) {
      total_size += 2 + 8;
    }

    // required double XLen = 27;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 28;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double LineUpWidth = 29;
    if (has_lineupwidth()) {
      total_size += 2 + 8;
    }

    // required double LineDownWidth = 30;
    if (has_linedownwidth()) {
      total_size += 2 + 8;
    }

    // required double LineRightWidth = 31;
    if (has_linerightwidth()) {
      total_size += 2 + 8;
    }

    // required double LineLeftWidth = 32;
    if (has_lineleftwidth()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required string FaceName = 33;
    if (has_facename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facename());
    }

    // required string LogoPath = 34;
    if (has_logopath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logopath());
    }

    // required string SerialPath = 35;
    if (has_serialpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialpath());
    }

    // required string TextValue = 36;
    if (has_textvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->textvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_PrintTableRowColInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_PrintTableRowColInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_PrintTableRowColInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_PrintTableRowColInfo::MergeFrom(const GC_PrintTableRowColInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designprinttablerowcolid()) {
      set_designprinttablerowcolid(from.designprinttablerowcolid());
    }
    if (from.has_designprinttablerowid()) {
      set_designprinttablerowid(from.designprinttablerowid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_tablesign()) {
      set_tablesign(from.tablesign());
    }
    if (from.has_rownumber()) {
      set_rownumber(from.rownumber());
    }
    if (from.has_colnumber()) {
      set_colnumber(from.colnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_whichline()) {
      set_whichline(from.whichline());
    }
    if (from.has_align()) {
      set_align(from.align());
    }
    if (from.has_logosign()) {
      set_logosign(from.logosign());
    }
    if (from.has_textpos()) {
      set_textpos(from.textpos());
    }
    if (from.has_setline()) {
      set_setline(from.setline());
    }
    if (from.has_haslogo()) {
      set_haslogo(from.haslogo());
    }
    if (from.has_isselected()) {
      set_isselected(from.isselected());
    }
    if (from.has_lineup()) {
      set_lineup(from.lineup());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_linedown()) {
      set_linedown(from.linedown());
    }
    if (from.has_lineleft()) {
      set_lineleft(from.lineleft());
    }
    if (from.has_lineright()) {
      set_lineright(from.lineright());
    }
    if (from.has_lineupsign()) {
      set_lineupsign(from.lineupsign());
    }
    if (from.has_linedownsign()) {
      set_linedownsign(from.linedownsign());
    }
    if (from.has_lineleftsign()) {
      set_lineleftsign(from.lineleftsign());
    }
    if (from.has_linerightsign()) {
      set_linerightsign(from.linerightsign());
    }
    if (from.has_linewidth()) {
      set_linewidth(from.linewidth());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_lefttopx()) {
      set_lefttopx(from.lefttopx());
    }
    if (from.has_lefttopy()) {
      set_lefttopy(from.lefttopy());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_lineupwidth()) {
      set_lineupwidth(from.lineupwidth());
    }
    if (from.has_linedownwidth()) {
      set_linedownwidth(from.linedownwidth());
    }
    if (from.has_linerightwidth()) {
      set_linerightwidth(from.linerightwidth());
    }
    if (from.has_lineleftwidth()) {
      set_lineleftwidth(from.lineleftwidth());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_facename()) {
      set_facename(from.facename());
    }
    if (from.has_logopath()) {
      set_logopath(from.logopath());
    }
    if (from.has_serialpath()) {
      set_serialpath(from.serialpath());
    }
    if (from.has_textvalue()) {
      set_textvalue(from.textvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_PrintTableRowColInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_PrintTableRowColInfo::CopyFrom(const GC_PrintTableRowColInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_PrintTableRowColInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GC_PrintTableRowColInfo::Swap(GC_PrintTableRowColInfo* other) {
  if (other != this) {
    std::swap(designprinttablerowcolid_, other->designprinttablerowcolid_);
    std::swap(designprinttablerowid_, other->designprinttablerowid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(tablesign_, other->tablesign_);
    std::swap(rownumber_, other->rownumber_);
    std::swap(colnumber_, other->colnumber_);
    std::swap(whichline_, other->whichline_);
    std::swap(align_, other->align_);
    std::swap(logosign_, other->logosign_);
    std::swap(textpos_, other->textpos_);
    std::swap(setline_, other->setline_);
    std::swap(haslogo_, other->haslogo_);
    std::swap(isselected_, other->isselected_);
    std::swap(lineup_, other->lineup_);
    std::swap(linedown_, other->linedown_);
    std::swap(lineleft_, other->lineleft_);
    std::swap(lineright_, other->lineright_);
    std::swap(lineupsign_, other->lineupsign_);
    std::swap(linedownsign_, other->linedownsign_);
    std::swap(lineleftsign_, other->lineleftsign_);
    std::swap(linerightsign_, other->linerightsign_);
    std::swap(linewidth_, other->linewidth_);
    std::swap(lefttopx_, other->lefttopx_);
    std::swap(lefttopy_, other->lefttopy_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(lineupwidth_, other->lineupwidth_);
    std::swap(linedownwidth_, other->linedownwidth_);
    std::swap(linerightwidth_, other->linerightwidth_);
    std::swap(lineleftwidth_, other->lineleftwidth_);
    std::swap(facename_, other->facename_);
    std::swap(logopath_, other->logopath_);
    std::swap(serialpath_, other->serialpath_);
    std::swap(textvalue_, other->textvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_PrintTableRowColInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_PrintTableRowColInfo_descriptor_;
  metadata.reflection = GC_PrintTableRowColInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_PrintTableRowInfo::kDesignPrintTableRowIDFieldNumber;
const int GC_PrintTableRowInfo::kDesignPrintTableIDFieldNumber;
const int GC_PrintTableRowInfo::kOrderCateFieldNumber;
const int GC_PrintTableRowInfo::kOrderIDFieldNumber;
const int GC_PrintTableRowInfo::kDesignPlanIDFieldNumber;
const int GC_PrintTableRowInfo::kTableSignFieldNumber;
const int GC_PrintTableRowInfo::kRowNumberFieldNumber;
const int GC_PrintTableRowInfo::kWhichLineFieldNumber;
const int GC_PrintTableRowInfo::kAlignFieldNumber;
const int GC_PrintTableRowInfo::kLogoSignFieldNumber;
const int GC_PrintTableRowInfo::kTextPosFieldNumber;
const int GC_PrintTableRowInfo::kSetLineFieldNumber;
const int GC_PrintTableRowInfo::kHasLogoFieldNumber;
const int GC_PrintTableRowInfo::kIsSelectedFieldNumber;
const int GC_PrintTableRowInfo::kLineUpFieldNumber;
const int GC_PrintTableRowInfo::kLineDownFieldNumber;
const int GC_PrintTableRowInfo::kLineLeftFieldNumber;
const int GC_PrintTableRowInfo::kLineRightFieldNumber;
const int GC_PrintTableRowInfo::kLineUpSignFieldNumber;
const int GC_PrintTableRowInfo::kLineDownSignFieldNumber;
const int GC_PrintTableRowInfo::kLineLeftSignFieldNumber;
const int GC_PrintTableRowInfo::kLineRightSignFieldNumber;
const int GC_PrintTableRowInfo::kLineWidthFieldNumber;
const int GC_PrintTableRowInfo::kLeftTopXFieldNumber;
const int GC_PrintTableRowInfo::kLeftTopYFieldNumber;
const int GC_PrintTableRowInfo::kXLenFieldNumber;
const int GC_PrintTableRowInfo::kYLenFieldNumber;
const int GC_PrintTableRowInfo::kLineUpWidthFieldNumber;
const int GC_PrintTableRowInfo::kLineDownWidthFieldNumber;
const int GC_PrintTableRowInfo::kLineRightWidthFieldNumber;
const int GC_PrintTableRowInfo::kLineLeftWidthFieldNumber;
const int GC_PrintTableRowInfo::kFaceNameFieldNumber;
const int GC_PrintTableRowInfo::kLogoPathFieldNumber;
const int GC_PrintTableRowInfo::kSerialPathFieldNumber;
const int GC_PrintTableRowInfo::kTextValueFieldNumber;
#endif  // !_MSC_VER

GC_PrintTableRowInfo::GC_PrintTableRowInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_PrintTableRowInfo::InitAsDefaultInstance() {
}

GC_PrintTableRowInfo::GC_PrintTableRowInfo(const GC_PrintTableRowInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_PrintTableRowInfo::SharedCtor() {
  _cached_size_ = 0;
  designprinttablerowid_ = 0;
  designprinttableid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  tablesign_ = 0;
  rownumber_ = 0;
  whichline_ = 0;
  align_ = 0;
  logosign_ = 0;
  textpos_ = 0;
  setline_ = false;
  haslogo_ = false;
  isselected_ = false;
  lineup_ = false;
  linedown_ = false;
  lineleft_ = false;
  lineright_ = false;
  lineupsign_ = 0;
  linedownsign_ = 0;
  lineleftsign_ = 0;
  linerightsign_ = 0;
  linewidth_ = 0;
  lefttopx_ = 0;
  lefttopy_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  lineupwidth_ = 0;
  linedownwidth_ = 0;
  linerightwidth_ = 0;
  lineleftwidth_ = 0;
  facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  textvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_PrintTableRowInfo::~GC_PrintTableRowInfo() {
  SharedDtor();
}

void GC_PrintTableRowInfo::SharedDtor() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (logopath_ != &::google::protobuf::internal::kEmptyString) {
    delete logopath_;
  }
  if (serialpath_ != &::google::protobuf::internal::kEmptyString) {
    delete serialpath_;
  }
  if (textvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete textvalue_;
  }
  if (this != default_instance_) {
  }
}

void GC_PrintTableRowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_PrintTableRowInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_PrintTableRowInfo_descriptor_;
}

const GC_PrintTableRowInfo& GC_PrintTableRowInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_PrintTableRowInfo* GC_PrintTableRowInfo::default_instance_ = NULL;

GC_PrintTableRowInfo* GC_PrintTableRowInfo::New() const {
  return new GC_PrintTableRowInfo;
}

void GC_PrintTableRowInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designprinttablerowid_ = 0;
    designprinttableid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    tablesign_ = 0;
    rownumber_ = 0;
    whichline_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    align_ = 0;
    logosign_ = 0;
    textpos_ = 0;
    setline_ = false;
    haslogo_ = false;
    isselected_ = false;
    lineup_ = false;
    linedown_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lineleft_ = false;
    lineright_ = false;
    lineupsign_ = 0;
    linedownsign_ = 0;
    lineleftsign_ = 0;
    linerightsign_ = 0;
    linewidth_ = 0;
    lefttopx_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    lefttopy_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    lineupwidth_ = 0;
    linedownwidth_ = 0;
    linerightwidth_ = 0;
    lineleftwidth_ = 0;
    if (has_facename()) {
      if (facename_ != &::google::protobuf::internal::kEmptyString) {
        facename_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_logopath()) {
      if (logopath_ != &::google::protobuf::internal::kEmptyString) {
        logopath_->clear();
      }
    }
    if (has_serialpath()) {
      if (serialpath_ != &::google::protobuf::internal::kEmptyString) {
        serialpath_->clear();
      }
    }
    if (has_textvalue()) {
      if (textvalue_ != &::google::protobuf::internal::kEmptyString) {
        textvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_PrintTableRowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignPrintTableRowID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprinttablerowid_)));
          set_has_designprinttablerowid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DesignPrintTableID;
        break;
      }

      // required int32 DesignPrintTableID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPrintTableID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprinttableid_)));
          set_has_designprinttableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TableSign;
        break;
      }

      // required int32 TableSign = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablesign_)));
          set_has_tablesign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_RowNumber;
        break;
      }

      // required int32 RowNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RowNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rownumber_)));
          set_has_rownumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_WhichLine;
        break;
      }

      // required int32 WhichLine = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WhichLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whichline_)));
          set_has_whichline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Align;
        break;
      }

      // required int32 Align = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Align:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &align_)));
          set_has_align();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LogoSign;
        break;
      }

      // required int32 LogoSign = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LogoSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logosign_)));
          set_has_logosign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_TextPos;
        break;
      }

      // required int32 TextPos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TextPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &textpos_)));
          set_has_textpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_SetLine;
        break;
      }

      // required bool SetLine = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SetLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setline_)));
          set_has_setline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_HasLogo;
        break;
      }

      // required bool HasLogo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasLogo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haslogo_)));
          set_has_haslogo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_IsSelected;
        break;
      }

      // required bool IsSelected = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSelected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isselected_)));
          set_has_isselected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_LineUp;
        break;
      }

      // required bool LineUp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lineup_)));
          set_has_lineup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_LineDown;
        break;
      }

      // required bool LineDown = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linedown_)));
          set_has_linedown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_LineLeft;
        break;
      }

      // required bool LineLeft = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineLeft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lineleft_)));
          set_has_lineleft();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_LineRight;
        break;
      }

      // required bool LineRight = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lineright_)));
          set_has_lineright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_LineUpSign;
        break;
      }

      // required int32 LineUpSign = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineUpSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineupsign_)));
          set_has_lineupsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_LineDownSign;
        break;
      }

      // required int32 LineDownSign = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineDownSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linedownsign_)));
          set_has_linedownsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_LineLeftSign;
        break;
      }

      // required int32 LineLeftSign = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineLeftSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineleftsign_)));
          set_has_lineleftsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_LineRightSign;
        break;
      }

      // required int32 LineRightSign = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineRightSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linerightsign_)));
          set_has_linerightsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_LineWidth;
        break;
      }

      // required double LineWidth = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linewidth_)));
          set_has_linewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_LeftTopX;
        break;
      }

      // required double LeftTopX = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LeftTopX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lefttopx_)));
          set_has_lefttopx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_LeftTopY;
        break;
      }

      // required double LeftTopY = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LeftTopY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lefttopy_)));
          set_has_lefttopy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_XLen;
        break;
      }

      // required double XLen = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_YLen;
        break;
      }

      // required double YLen = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_LineUpWidth;
        break;
      }

      // required double LineUpWidth = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineUpWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lineupwidth_)));
          set_has_lineupwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_LineDownWidth;
        break;
      }

      // required double LineDownWidth = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineDownWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linedownwidth_)));
          set_has_linedownwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_LineRightWidth;
        break;
      }

      // required double LineRightWidth = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineRightWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linerightwidth_)));
          set_has_linerightwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_LineLeftWidth;
        break;
      }

      // required double LineLeftWidth = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LineLeftWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lineleftwidth_)));
          set_has_lineleftwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_FaceName;
        break;
      }

      // required string FaceName = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FaceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facename().data(), this->facename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_LogoPath;
        break;
      }

      // required string LogoPath = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LogoPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logopath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logopath().data(), this->logopath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_SerialPath;
        break;
      }

      // required string SerialPath = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SerialPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serialpath().data(), this->serialpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_TextValue;
        break;
      }

      // required string TextValue = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TextValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_textvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->textvalue().data(), this->textvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_PrintTableRowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignPrintTableRowID = 1;
  if (has_designprinttablerowid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designprinttablerowid(), output);
  }

  // required int32 DesignPrintTableID = 2;
  if (has_designprinttableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->designprinttableid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 TableSign = 6;
  if (has_tablesign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tablesign(), output);
  }

  // required int32 RowNumber = 7;
  if (has_rownumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rownumber(), output);
  }

  // required int32 WhichLine = 8;
  if (has_whichline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->whichline(), output);
  }

  // required int32 Align = 9;
  if (has_align()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->align(), output);
  }

  // required int32 LogoSign = 10;
  if (has_logosign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->logosign(), output);
  }

  // required int32 TextPos = 11;
  if (has_textpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->textpos(), output);
  }

  // required bool SetLine = 12;
  if (has_setline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->setline(), output);
  }

  // required bool HasLogo = 13;
  if (has_haslogo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->haslogo(), output);
  }

  // required bool IsSelected = 14;
  if (has_isselected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isselected(), output);
  }

  // required bool LineUp = 15;
  if (has_lineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->lineup(), output);
  }

  // required bool LineDown = 16;
  if (has_linedown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->linedown(), output);
  }

  // required bool LineLeft = 17;
  if (has_lineleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->lineleft(), output);
  }

  // required bool LineRight = 18;
  if (has_lineright()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->lineright(), output);
  }

  // required int32 LineUpSign = 19;
  if (has_lineupsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->lineupsign(), output);
  }

  // required int32 LineDownSign = 20;
  if (has_linedownsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->linedownsign(), output);
  }

  // required int32 LineLeftSign = 21;
  if (has_lineleftsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->lineleftsign(), output);
  }

  // required int32 LineRightSign = 22;
  if (has_linerightsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->linerightsign(), output);
  }

  // required double LineWidth = 23;
  if (has_linewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->linewidth(), output);
  }

  // required double LeftTopX = 24;
  if (has_lefttopx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->lefttopx(), output);
  }

  // required double LeftTopY = 25;
  if (has_lefttopy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->lefttopy(), output);
  }

  // required double XLen = 26;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->xlen(), output);
  }

  // required double YLen = 27;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->ylen(), output);
  }

  // required double LineUpWidth = 28;
  if (has_lineupwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->lineupwidth(), output);
  }

  // required double LineDownWidth = 29;
  if (has_linedownwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->linedownwidth(), output);
  }

  // required double LineRightWidth = 30;
  if (has_linerightwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->linerightwidth(), output);
  }

  // required double LineLeftWidth = 31;
  if (has_lineleftwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->lineleftwidth(), output);
  }

  // required string FaceName = 32;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->facename(), output);
  }

  // required string LogoPath = 33;
  if (has_logopath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logopath().data(), this->logopath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->logopath(), output);
  }

  // required string SerialPath = 34;
  if (has_serialpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialpath().data(), this->serialpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->serialpath(), output);
  }

  // required string TextValue = 35;
  if (has_textvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textvalue().data(), this->textvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->textvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_PrintTableRowInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignPrintTableRowID = 1;
  if (has_designprinttablerowid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designprinttablerowid(), target);
  }

  // required int32 DesignPrintTableID = 2;
  if (has_designprinttableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->designprinttableid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 TableSign = 6;
  if (has_tablesign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tablesign(), target);
  }

  // required int32 RowNumber = 7;
  if (has_rownumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rownumber(), target);
  }

  // required int32 WhichLine = 8;
  if (has_whichline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->whichline(), target);
  }

  // required int32 Align = 9;
  if (has_align()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->align(), target);
  }

  // required int32 LogoSign = 10;
  if (has_logosign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->logosign(), target);
  }

  // required int32 TextPos = 11;
  if (has_textpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->textpos(), target);
  }

  // required bool SetLine = 12;
  if (has_setline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->setline(), target);
  }

  // required bool HasLogo = 13;
  if (has_haslogo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->haslogo(), target);
  }

  // required bool IsSelected = 14;
  if (has_isselected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isselected(), target);
  }

  // required bool LineUp = 15;
  if (has_lineup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->lineup(), target);
  }

  // required bool LineDown = 16;
  if (has_linedown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->linedown(), target);
  }

  // required bool LineLeft = 17;
  if (has_lineleft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->lineleft(), target);
  }

  // required bool LineRight = 18;
  if (has_lineright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->lineright(), target);
  }

  // required int32 LineUpSign = 19;
  if (has_lineupsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->lineupsign(), target);
  }

  // required int32 LineDownSign = 20;
  if (has_linedownsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->linedownsign(), target);
  }

  // required int32 LineLeftSign = 21;
  if (has_lineleftsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->lineleftsign(), target);
  }

  // required int32 LineRightSign = 22;
  if (has_linerightsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->linerightsign(), target);
  }

  // required double LineWidth = 23;
  if (has_linewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->linewidth(), target);
  }

  // required double LeftTopX = 24;
  if (has_lefttopx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->lefttopx(), target);
  }

  // required double LeftTopY = 25;
  if (has_lefttopy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->lefttopy(), target);
  }

  // required double XLen = 26;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->xlen(), target);
  }

  // required double YLen = 27;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->ylen(), target);
  }

  // required double LineUpWidth = 28;
  if (has_lineupwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->lineupwidth(), target);
  }

  // required double LineDownWidth = 29;
  if (has_linedownwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->linedownwidth(), target);
  }

  // required double LineRightWidth = 30;
  if (has_linerightwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->linerightwidth(), target);
  }

  // required double LineLeftWidth = 31;
  if (has_lineleftwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->lineleftwidth(), target);
  }

  // required string FaceName = 32;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->facename(), target);
  }

  // required string LogoPath = 33;
  if (has_logopath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logopath().data(), this->logopath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->logopath(), target);
  }

  // required string SerialPath = 34;
  if (has_serialpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialpath().data(), this->serialpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->serialpath(), target);
  }

  // required string TextValue = 35;
  if (has_textvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->textvalue().data(), this->textvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->textvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_PrintTableRowInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignPrintTableRowID = 1;
    if (has_designprinttablerowid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprinttablerowid());
    }

    // required int32 DesignPrintTableID = 2;
    if (has_designprinttableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprinttableid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 TableSign = 6;
    if (has_tablesign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablesign());
    }

    // required int32 RowNumber = 7;
    if (has_rownumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rownumber());
    }

    // required int32 WhichLine = 8;
    if (has_whichline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whichline());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 Align = 9;
    if (has_align()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->align());
    }

    // required int32 LogoSign = 10;
    if (has_logosign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logosign());
    }

    // required int32 TextPos = 11;
    if (has_textpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->textpos());
    }

    // required bool SetLine = 12;
    if (has_setline()) {
      total_size += 1 + 1;
    }

    // required bool HasLogo = 13;
    if (has_haslogo()) {
      total_size += 1 + 1;
    }

    // required bool IsSelected = 14;
    if (has_isselected()) {
      total_size += 1 + 1;
    }

    // required bool LineUp = 15;
    if (has_lineup()) {
      total_size += 1 + 1;
    }

    // required bool LineDown = 16;
    if (has_linedown()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bool LineLeft = 17;
    if (has_lineleft()) {
      total_size += 2 + 1;
    }

    // required bool LineRight = 18;
    if (has_lineright()) {
      total_size += 2 + 1;
    }

    // required int32 LineUpSign = 19;
    if (has_lineupsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineupsign());
    }

    // required int32 LineDownSign = 20;
    if (has_linedownsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linedownsign());
    }

    // required int32 LineLeftSign = 21;
    if (has_lineleftsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineleftsign());
    }

    // required int32 LineRightSign = 22;
    if (has_linerightsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linerightsign());
    }

    // required double LineWidth = 23;
    if (has_linewidth()) {
      total_size += 2 + 8;
    }

    // required double LeftTopX = 24;
    if (has_lefttopx()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double LeftTopY = 25;
    if (has_lefttopy()) {
      total_size += 2 + 8;
    }

    // required double XLen = 26;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 27;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double LineUpWidth = 28;
    if (has_lineupwidth()) {
      total_size += 2 + 8;
    }

    // required double LineDownWidth = 29;
    if (has_linedownwidth()) {
      total_size += 2 + 8;
    }

    // required double LineRightWidth = 30;
    if (has_linerightwidth()) {
      total_size += 2 + 8;
    }

    // required double LineLeftWidth = 31;
    if (has_lineleftwidth()) {
      total_size += 2 + 8;
    }

    // required string FaceName = 32;
    if (has_facename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facename());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required string LogoPath = 33;
    if (has_logopath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logopath());
    }

    // required string SerialPath = 34;
    if (has_serialpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialpath());
    }

    // required string TextValue = 35;
    if (has_textvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->textvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_PrintTableRowInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_PrintTableRowInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_PrintTableRowInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_PrintTableRowInfo::MergeFrom(const GC_PrintTableRowInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designprinttablerowid()) {
      set_designprinttablerowid(from.designprinttablerowid());
    }
    if (from.has_designprinttableid()) {
      set_designprinttableid(from.designprinttableid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_tablesign()) {
      set_tablesign(from.tablesign());
    }
    if (from.has_rownumber()) {
      set_rownumber(from.rownumber());
    }
    if (from.has_whichline()) {
      set_whichline(from.whichline());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_align()) {
      set_align(from.align());
    }
    if (from.has_logosign()) {
      set_logosign(from.logosign());
    }
    if (from.has_textpos()) {
      set_textpos(from.textpos());
    }
    if (from.has_setline()) {
      set_setline(from.setline());
    }
    if (from.has_haslogo()) {
      set_haslogo(from.haslogo());
    }
    if (from.has_isselected()) {
      set_isselected(from.isselected());
    }
    if (from.has_lineup()) {
      set_lineup(from.lineup());
    }
    if (from.has_linedown()) {
      set_linedown(from.linedown());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lineleft()) {
      set_lineleft(from.lineleft());
    }
    if (from.has_lineright()) {
      set_lineright(from.lineright());
    }
    if (from.has_lineupsign()) {
      set_lineupsign(from.lineupsign());
    }
    if (from.has_linedownsign()) {
      set_linedownsign(from.linedownsign());
    }
    if (from.has_lineleftsign()) {
      set_lineleftsign(from.lineleftsign());
    }
    if (from.has_linerightsign()) {
      set_linerightsign(from.linerightsign());
    }
    if (from.has_linewidth()) {
      set_linewidth(from.linewidth());
    }
    if (from.has_lefttopx()) {
      set_lefttopx(from.lefttopx());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_lefttopy()) {
      set_lefttopy(from.lefttopy());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_lineupwidth()) {
      set_lineupwidth(from.lineupwidth());
    }
    if (from.has_linedownwidth()) {
      set_linedownwidth(from.linedownwidth());
    }
    if (from.has_linerightwidth()) {
      set_linerightwidth(from.linerightwidth());
    }
    if (from.has_lineleftwidth()) {
      set_lineleftwidth(from.lineleftwidth());
    }
    if (from.has_facename()) {
      set_facename(from.facename());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_logopath()) {
      set_logopath(from.logopath());
    }
    if (from.has_serialpath()) {
      set_serialpath(from.serialpath());
    }
    if (from.has_textvalue()) {
      set_textvalue(from.textvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_PrintTableRowInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_PrintTableRowInfo::CopyFrom(const GC_PrintTableRowInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_PrintTableRowInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_PrintTableRowInfo::Swap(GC_PrintTableRowInfo* other) {
  if (other != this) {
    std::swap(designprinttablerowid_, other->designprinttablerowid_);
    std::swap(designprinttableid_, other->designprinttableid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(tablesign_, other->tablesign_);
    std::swap(rownumber_, other->rownumber_);
    std::swap(whichline_, other->whichline_);
    std::swap(align_, other->align_);
    std::swap(logosign_, other->logosign_);
    std::swap(textpos_, other->textpos_);
    std::swap(setline_, other->setline_);
    std::swap(haslogo_, other->haslogo_);
    std::swap(isselected_, other->isselected_);
    std::swap(lineup_, other->lineup_);
    std::swap(linedown_, other->linedown_);
    std::swap(lineleft_, other->lineleft_);
    std::swap(lineright_, other->lineright_);
    std::swap(lineupsign_, other->lineupsign_);
    std::swap(linedownsign_, other->linedownsign_);
    std::swap(lineleftsign_, other->lineleftsign_);
    std::swap(linerightsign_, other->linerightsign_);
    std::swap(linewidth_, other->linewidth_);
    std::swap(lefttopx_, other->lefttopx_);
    std::swap(lefttopy_, other->lefttopy_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(lineupwidth_, other->lineupwidth_);
    std::swap(linedownwidth_, other->linedownwidth_);
    std::swap(linerightwidth_, other->linerightwidth_);
    std::swap(lineleftwidth_, other->lineleftwidth_);
    std::swap(facename_, other->facename_);
    std::swap(logopath_, other->logopath_);
    std::swap(serialpath_, other->serialpath_);
    std::swap(textvalue_, other->textvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_PrintTableRowInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_PrintTableRowInfo_descriptor_;
  metadata.reflection = GC_PrintTableRowInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_ProductInfo::kDesignProductIDFieldNumber;
const int GC_ProductInfo::kOrderCateFieldNumber;
const int GC_ProductInfo::kDesignPlanIDFieldNumber;
const int GC_ProductInfo::kOrderIDFieldNumber;
const int GC_ProductInfo::kProductIDFieldNumber;
const int GC_ProductInfo::kFactoryIDFieldNumber;
const int GC_ProductInfo::kVerCodeFieldNumber;
const int GC_ProductInfo::kHasMarkFieldNumber;
const int GC_ProductInfo::kIsVisibleFieldNumber;
const int GC_ProductInfo::kIsLockedFieldNumber;
const int GC_ProductInfo::kSupplyTypeFieldNumber;
const int GC_ProductInfo::kGTypeIDFieldNumber;
const int GC_ProductInfo::kDockObjIDFieldNumber;
const int GC_ProductInfo::kDockObjTypeFieldNumber;
const int GC_ProductInfo::kDockXPosFieldNumber;
const int GC_ProductInfo::kDockYPosFieldNumber;
const int GC_ProductInfo::kXLenFieldNumber;
const int GC_ProductInfo::kYLenFieldNumber;
const int GC_ProductInfo::kZLenFieldNumber;
const int GC_ProductInfo::kYPosFieldNumber;
const int GC_ProductInfo::kCreatorIDFieldNumber;
const int GC_ProductInfo::kUpdaterIDFieldNumber;
const int GC_ProductInfo::kCreateTimeFieldNumber;
const int GC_ProductInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_ProductInfo::GC_ProductInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_ProductInfo::InitAsDefaultInstance() {
}

GC_ProductInfo::GC_ProductInfo(const GC_ProductInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_ProductInfo::SharedCtor() {
  _cached_size_ = 0;
  designproductid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  productid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  hasmark_ = false;
  isvisible_ = false;
  islocked_ = false;
  supplytype_ = 0;
  gtypeid_ = 0;
  dockobjid_ = 0;
  dockobjtype_ = 0;
  dockxpos_ = 0;
  dockypos_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  ypos_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_ProductInfo::~GC_ProductInfo() {
  SharedDtor();
}

void GC_ProductInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_ProductInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_ProductInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_ProductInfo_descriptor_;
}

const GC_ProductInfo& GC_ProductInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_ProductInfo* GC_ProductInfo::default_instance_ = NULL;

GC_ProductInfo* GC_ProductInfo::New() const {
  return new GC_ProductInfo;
}

void GC_ProductInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designproductid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    productid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    hasmark_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isvisible_ = false;
    islocked_ = false;
    supplytype_ = 0;
    gtypeid_ = 0;
    dockobjid_ = 0;
    dockobjtype_ = 0;
    dockxpos_ = 0;
    dockypos_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    ypos_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_ProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignProductID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designproductid_)));
          set_has_designproductid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ProductID;
        break;
      }

      // required int32 ProductID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProductID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_HasMark;
        break;
      }

      // required bool HasMark = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmark_)));
          set_has_hasmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_DockObjID;
        break;
      }

      // required int32 DockObjID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjid_)));
          set_has_dockobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_DockObjType;
        break;
      }

      // required int32 DockObjType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjtype_)));
          set_has_dockobjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_DockXPos;
        break;
      }

      // required double DockXPos = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockXPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockxpos_)));
          set_has_dockxpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_DockYPos;
        break;
      }

      // required double DockYPos = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockYPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockypos_)));
          set_has_dockypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_XLen;
        break;
      }

      // required double XLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_YLen;
        break;
      }

      // required double YLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_YPos;
        break;
      }

      // required double YPos = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_ProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignProductID = 1;
  if (has_designproductid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designproductid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 ProductID = 5;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->productid(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vercode(), output);
  }

  // required bool HasMark = 8;
  if (has_hasmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->hasmark(), output);
  }

  // required bool IsVisible = 9;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isvisible(), output);
  }

  // required bool IsLocked = 10;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->islocked(), output);
  }

  // required int32 SupplyType = 11;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->supplytype(), output);
  }

  // required int32 GTypeID = 12;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gtypeid(), output);
  }

  // required int32 DockObjID = 13;
  if (has_dockobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->dockobjid(), output);
  }

  // required int32 DockObjType = 14;
  if (has_dockobjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->dockobjtype(), output);
  }

  // required double DockXPos = 15;
  if (has_dockxpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->dockxpos(), output);
  }

  // required double DockYPos = 16;
  if (has_dockypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->dockypos(), output);
  }

  // required double XLen = 17;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->xlen(), output);
  }

  // required double YLen = 18;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->ylen(), output);
  }

  // required double ZLen = 19;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->zlen(), output);
  }

  // required double YPos = 20;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->ypos(), output);
  }

  // required int32 CreatorID = 21;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->creatorid(), output);
  }

  // required int32 UpdaterID = 22;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->updaterid(), output);
  }

  // required int64 CreateTime = 23;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->createtime(), output);
  }

  // required int64 UpdateTime = 24;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_ProductInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignProductID = 1;
  if (has_designproductid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designproductid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 ProductID = 5;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->productid(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vercode(), target);
  }

  // required bool HasMark = 8;
  if (has_hasmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->hasmark(), target);
  }

  // required bool IsVisible = 9;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isvisible(), target);
  }

  // required bool IsLocked = 10;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->islocked(), target);
  }

  // required int32 SupplyType = 11;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->supplytype(), target);
  }

  // required int32 GTypeID = 12;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gtypeid(), target);
  }

  // required int32 DockObjID = 13;
  if (has_dockobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->dockobjid(), target);
  }

  // required int32 DockObjType = 14;
  if (has_dockobjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->dockobjtype(), target);
  }

  // required double DockXPos = 15;
  if (has_dockxpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->dockxpos(), target);
  }

  // required double DockYPos = 16;
  if (has_dockypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->dockypos(), target);
  }

  // required double XLen = 17;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->xlen(), target);
  }

  // required double YLen = 18;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->ylen(), target);
  }

  // required double ZLen = 19;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->zlen(), target);
  }

  // required double YPos = 20;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->ypos(), target);
  }

  // required int32 CreatorID = 21;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->creatorid(), target);
  }

  // required int32 UpdaterID = 22;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->updaterid(), target);
  }

  // required int64 CreateTime = 23;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->createtime(), target);
  }

  // required int64 UpdateTime = 24;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_ProductInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignProductID = 1;
    if (has_designproductid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designproductid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 ProductID = 5;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 7;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required bool HasMark = 8;
    if (has_hasmark()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool IsVisible = 9;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required bool IsLocked = 10;
    if (has_islocked()) {
      total_size += 1 + 1;
    }

    // required int32 SupplyType = 11;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 GTypeID = 12;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required int32 DockObjID = 13;
    if (has_dockobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjid());
    }

    // required int32 DockObjType = 14;
    if (has_dockobjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjtype());
    }

    // required double DockXPos = 15;
    if (has_dockxpos()) {
      total_size += 1 + 8;
    }

    // required double DockYPos = 16;
    if (has_dockypos()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double XLen = 17;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 18;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 19;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required double YPos = 20;
    if (has_ypos()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 21;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 22;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 23;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 24;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_ProductInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_ProductInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_ProductInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_ProductInfo::MergeFrom(const GC_ProductInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designproductid()) {
      set_designproductid(from.designproductid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_hasmark()) {
      set_hasmark(from.hasmark());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_dockobjid()) {
      set_dockobjid(from.dockobjid());
    }
    if (from.has_dockobjtype()) {
      set_dockobjtype(from.dockobjtype());
    }
    if (from.has_dockxpos()) {
      set_dockxpos(from.dockxpos());
    }
    if (from.has_dockypos()) {
      set_dockypos(from.dockypos());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_ProductInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_ProductInfo::CopyFrom(const GC_ProductInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_ProductInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00ffffff) != 0x00ffffff) return false;

  return true;
}

void GC_ProductInfo::Swap(GC_ProductInfo* other) {
  if (other != this) {
    std::swap(designproductid_, other->designproductid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(productid_, other->productid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(hasmark_, other->hasmark_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(dockobjid_, other->dockobjid_);
    std::swap(dockobjtype_, other->dockobjtype_);
    std::swap(dockxpos_, other->dockxpos_);
    std::swap(dockypos_, other->dockypos_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(ypos_, other->ypos_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_ProductInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_ProductInfo_descriptor_;
  metadata.reflection = GC_ProductInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_RemarkInfo::kDesignRemarkIDFieldNumber;
const int GC_RemarkInfo::kOrderCateFieldNumber;
const int GC_RemarkInfo::kDesignPlanIDFieldNumber;
const int GC_RemarkInfo::kOrderIDFieldNumber;
const int GC_RemarkInfo::kDesignPrintIDFieldNumber;
const int GC_RemarkInfo::kPrintIDFieldNumber;
const int GC_RemarkInfo::kViewTypeFieldNumber;
const int GC_RemarkInfo::kBGColorFieldNumber;
const int GC_RemarkInfo::kForeColorFieldNumber;
const int GC_RemarkInfo::kFontSizeFieldNumber;
const int GC_RemarkInfo::kFontStyleFieldNumber;
const int GC_RemarkInfo::kLineSpaceFieldNumber;
const int GC_RemarkInfo::kArrowIDFieldNumber;
const int GC_RemarkInfo::kArrowStyleFieldNumber;
const int GC_RemarkInfo::kFrameStyleFieldNumber;
const int GC_RemarkInfo::kFrameColorFieldNumber;
const int GC_RemarkInfo::kDirectLineFieldNumber;
const int GC_RemarkInfo::kDirectStyleFieldNumber;
const int GC_RemarkInfo::kDirectLineStyleFieldNumber;
const int GC_RemarkInfo::kCommentFrameStyleFieldNumber;
const int GC_RemarkInfo::kIsSingleModeFieldNumber;
const int GC_RemarkInfo::kIsVisibleFieldNumber;
const int GC_RemarkInfo::kIsLockedFieldNumber;
const int GC_RemarkInfo::kStrickOutFieldNumber;
const int GC_RemarkInfo::kUnderLineFieldNumber;
const int GC_RemarkInfo::kItalicFieldNumber;
const int GC_RemarkInfo::kBoldFieldNumber;
const int GC_RemarkInfo::kFrameWidthFieldNumber;
const int GC_RemarkInfo::kArrowXFieldNumber;
const int GC_RemarkInfo::kArrowYFieldNumber;
const int GC_RemarkInfo::kStartXFieldNumber;
const int GC_RemarkInfo::kStartYFieldNumber;
const int GC_RemarkInfo::kCreatorIDFieldNumber;
const int GC_RemarkInfo::kUpdaterIDFieldNumber;
const int GC_RemarkInfo::kCreateTimeFieldNumber;
const int GC_RemarkInfo::kUpdateTimeFieldNumber;
const int GC_RemarkInfo::kFaceNameFieldNumber;
const int GC_RemarkInfo::kRemarkTextFieldNumber;
#endif  // !_MSC_VER

GC_RemarkInfo::GC_RemarkInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_RemarkInfo::InitAsDefaultInstance() {
}

GC_RemarkInfo::GC_RemarkInfo(const GC_RemarkInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_RemarkInfo::SharedCtor() {
  _cached_size_ = 0;
  designremarkid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designprintid_ = 0;
  printid_ = 0;
  viewtype_ = 0;
  bgcolor_ = GOOGLE_LONGLONG(0);
  forecolor_ = GOOGLE_LONGLONG(0);
  fontsize_ = 0;
  fontstyle_ = 0;
  linespace_ = 0;
  arrowid_ = 0;
  arrowstyle_ = 0;
  framestyle_ = 0;
  framecolor_ = GOOGLE_LONGLONG(0);
  directline_ = 0;
  directstyle_ = 0;
  directlinestyle_ = 0;
  commentframestyle_ = 0;
  issinglemode_ = false;
  isvisible_ = false;
  islocked_ = false;
  strickout_ = false;
  underline_ = false;
  italic_ = false;
  bold_ = false;
  framewidth_ = 0;
  arrowx_ = 0;
  arrowy_ = 0;
  startx_ = 0;
  starty_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remarktext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_RemarkInfo::~GC_RemarkInfo() {
  SharedDtor();
}

void GC_RemarkInfo::SharedDtor() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (remarktext_ != &::google::protobuf::internal::kEmptyString) {
    delete remarktext_;
  }
  if (this != default_instance_) {
  }
}

void GC_RemarkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_RemarkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_RemarkInfo_descriptor_;
}

const GC_RemarkInfo& GC_RemarkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_RemarkInfo* GC_RemarkInfo::default_instance_ = NULL;

GC_RemarkInfo* GC_RemarkInfo::New() const {
  return new GC_RemarkInfo;
}

void GC_RemarkInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designremarkid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designprintid_ = 0;
    printid_ = 0;
    viewtype_ = 0;
    bgcolor_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    forecolor_ = GOOGLE_LONGLONG(0);
    fontsize_ = 0;
    fontstyle_ = 0;
    linespace_ = 0;
    arrowid_ = 0;
    arrowstyle_ = 0;
    framestyle_ = 0;
    framecolor_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    directline_ = 0;
    directstyle_ = 0;
    directlinestyle_ = 0;
    commentframestyle_ = 0;
    issinglemode_ = false;
    isvisible_ = false;
    islocked_ = false;
    strickout_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    underline_ = false;
    italic_ = false;
    bold_ = false;
    framewidth_ = 0;
    arrowx_ = 0;
    arrowy_ = 0;
    startx_ = 0;
    starty_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_facename()) {
      if (facename_ != &::google::protobuf::internal::kEmptyString) {
        facename_->clear();
      }
    }
    if (has_remarktext()) {
      if (remarktext_ != &::google::protobuf::internal::kEmptyString) {
        remarktext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_RemarkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignRemarkID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designremarkid_)));
          set_has_designremarkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPrintID;
        break;
      }

      // required int32 DesignPrintID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPrintID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprintid_)));
          set_has_designprintid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_PrintID;
        break;
      }

      // required int32 PrintID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrintID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printid_)));
          set_has_printid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ViewType;
        break;
      }

      // required int32 ViewType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ViewType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewtype_)));
          set_has_viewtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_BGColor;
        break;
      }

      // required int64 BGColor = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BGColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bgcolor_)));
          set_has_bgcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ForeColor;
        break;
      }

      // required int64 ForeColor = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ForeColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &forecolor_)));
          set_has_forecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_FontSize;
        break;
      }

      // required int32 FontSize = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FontSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_FontStyle;
        break;
      }

      // required int32 FontStyle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FontStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fontstyle_)));
          set_has_fontstyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_LineSpace;
        break;
      }

      // required int32 LineSpace = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineSpace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linespace_)));
          set_has_linespace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ArrowID;
        break;
      }

      // required int32 ArrowID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArrowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrowid_)));
          set_has_arrowid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ArrowStyle;
        break;
      }

      // required int32 ArrowStyle = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArrowStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrowstyle_)));
          set_has_arrowstyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_FrameStyle;
        break;
      }

      // required int32 FrameStyle = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrameStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framestyle_)));
          set_has_framestyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_FrameColor;
        break;
      }

      // required int64 FrameColor = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrameColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &framecolor_)));
          set_has_framecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_DirectLine;
        break;
      }

      // required int32 DirectLine = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DirectLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &directline_)));
          set_has_directline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_DirectStyle;
        break;
      }

      // required int32 DirectStyle = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DirectStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &directstyle_)));
          set_has_directstyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_DirectLineStyle;
        break;
      }

      // required int32 DirectLineStyle = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DirectLineStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &directlinestyle_)));
          set_has_directlinestyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_CommentFrameStyle;
        break;
      }

      // required int32 CommentFrameStyle = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CommentFrameStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commentframestyle_)));
          set_has_commentframestyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_IsSingleMode;
        break;
      }

      // required bool IsSingleMode = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSingleMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issinglemode_)));
          set_has_issinglemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_StrickOut;
        break;
      }

      // required bool StrickOut = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StrickOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strickout_)));
          set_has_strickout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_UnderLine;
        break;
      }

      // required bool UnderLine = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UnderLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &underline_)));
          set_has_underline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_Italic;
        break;
      }

      // required bool Italic = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Italic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &italic_)));
          set_has_italic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_Bold;
        break;
      }

      // required bool Bold = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Bold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bold_)));
          set_has_bold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_FrameWidth;
        break;
      }

      // required double FrameWidth = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrameWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &framewidth_)));
          set_has_framewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_ArrowX;
        break;
      }

      // required double ArrowX = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArrowX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arrowx_)));
          set_has_arrowx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_ArrowY;
        break;
      }

      // required double ArrowY = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArrowY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arrowy_)));
          set_has_arrowy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_StartX;
        break;
      }

      // required double StartX = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StartX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startx_)));
          set_has_startx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_StartY;
        break;
      }

      // required double StartY = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StartY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &starty_)));
          set_has_starty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_FaceName;
        break;
      }

      // required string FaceName = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FaceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facename().data(), this->facename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_RemarkText;
        break;
      }

      // required string RemarkText = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RemarkText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remarktext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remarktext().data(), this->remarktext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_RemarkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignRemarkID = 1;
  if (has_designremarkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designremarkid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPrintID = 5;
  if (has_designprintid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designprintid(), output);
  }

  // required int32 PrintID = 6;
  if (has_printid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->printid(), output);
  }

  // required int32 ViewType = 7;
  if (has_viewtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->viewtype(), output);
  }

  // required int64 BGColor = 8;
  if (has_bgcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->bgcolor(), output);
  }

  // required int64 ForeColor = 9;
  if (has_forecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->forecolor(), output);
  }

  // required int32 FontSize = 10;
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fontsize(), output);
  }

  // required int32 FontStyle = 11;
  if (has_fontstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fontstyle(), output);
  }

  // required int32 LineSpace = 12;
  if (has_linespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->linespace(), output);
  }

  // required int32 ArrowID = 13;
  if (has_arrowid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->arrowid(), output);
  }

  // required int32 ArrowStyle = 14;
  if (has_arrowstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->arrowstyle(), output);
  }

  // required int32 FrameStyle = 15;
  if (has_framestyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->framestyle(), output);
  }

  // required int64 FrameColor = 16;
  if (has_framecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->framecolor(), output);
  }

  // required int32 DirectLine = 17;
  if (has_directline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->directline(), output);
  }

  // required int32 DirectStyle = 18;
  if (has_directstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->directstyle(), output);
  }

  // required int32 DirectLineStyle = 19;
  if (has_directlinestyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->directlinestyle(), output);
  }

  // required int32 CommentFrameStyle = 20;
  if (has_commentframestyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->commentframestyle(), output);
  }

  // required bool IsSingleMode = 21;
  if (has_issinglemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->issinglemode(), output);
  }

  // required bool IsVisible = 22;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->isvisible(), output);
  }

  // required bool IsLocked = 23;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->islocked(), output);
  }

  // required bool StrickOut = 24;
  if (has_strickout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->strickout(), output);
  }

  // required bool UnderLine = 25;
  if (has_underline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->underline(), output);
  }

  // required bool Italic = 26;
  if (has_italic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->italic(), output);
  }

  // required bool Bold = 27;
  if (has_bold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->bold(), output);
  }

  // required double FrameWidth = 28;
  if (has_framewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->framewidth(), output);
  }

  // required double ArrowX = 29;
  if (has_arrowx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->arrowx(), output);
  }

  // required double ArrowY = 30;
  if (has_arrowy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->arrowy(), output);
  }

  // required double StartX = 31;
  if (has_startx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->startx(), output);
  }

  // required double StartY = 32;
  if (has_starty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->starty(), output);
  }

  // required int32 CreatorID = 33;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->creatorid(), output);
  }

  // required int32 UpdaterID = 34;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->updaterid(), output);
  }

  // required int64 CreateTime = 35;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->createtime(), output);
  }

  // required int64 UpdateTime = 36;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->updatetime(), output);
  }

  // required string FaceName = 37;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->facename(), output);
  }

  // required string RemarkText = 38;
  if (has_remarktext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remarktext().data(), this->remarktext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->remarktext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_RemarkInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignRemarkID = 1;
  if (has_designremarkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designremarkid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPrintID = 5;
  if (has_designprintid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designprintid(), target);
  }

  // required int32 PrintID = 6;
  if (has_printid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->printid(), target);
  }

  // required int32 ViewType = 7;
  if (has_viewtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->viewtype(), target);
  }

  // required int64 BGColor = 8;
  if (has_bgcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->bgcolor(), target);
  }

  // required int64 ForeColor = 9;
  if (has_forecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->forecolor(), target);
  }

  // required int32 FontSize = 10;
  if (has_fontsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fontsize(), target);
  }

  // required int32 FontStyle = 11;
  if (has_fontstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fontstyle(), target);
  }

  // required int32 LineSpace = 12;
  if (has_linespace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->linespace(), target);
  }

  // required int32 ArrowID = 13;
  if (has_arrowid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->arrowid(), target);
  }

  // required int32 ArrowStyle = 14;
  if (has_arrowstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->arrowstyle(), target);
  }

  // required int32 FrameStyle = 15;
  if (has_framestyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->framestyle(), target);
  }

  // required int64 FrameColor = 16;
  if (has_framecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->framecolor(), target);
  }

  // required int32 DirectLine = 17;
  if (has_directline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->directline(), target);
  }

  // required int32 DirectStyle = 18;
  if (has_directstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->directstyle(), target);
  }

  // required int32 DirectLineStyle = 19;
  if (has_directlinestyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->directlinestyle(), target);
  }

  // required int32 CommentFrameStyle = 20;
  if (has_commentframestyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->commentframestyle(), target);
  }

  // required bool IsSingleMode = 21;
  if (has_issinglemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->issinglemode(), target);
  }

  // required bool IsVisible = 22;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->isvisible(), target);
  }

  // required bool IsLocked = 23;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->islocked(), target);
  }

  // required bool StrickOut = 24;
  if (has_strickout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->strickout(), target);
  }

  // required bool UnderLine = 25;
  if (has_underline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->underline(), target);
  }

  // required bool Italic = 26;
  if (has_italic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->italic(), target);
  }

  // required bool Bold = 27;
  if (has_bold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->bold(), target);
  }

  // required double FrameWidth = 28;
  if (has_framewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->framewidth(), target);
  }

  // required double ArrowX = 29;
  if (has_arrowx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->arrowx(), target);
  }

  // required double ArrowY = 30;
  if (has_arrowy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->arrowy(), target);
  }

  // required double StartX = 31;
  if (has_startx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->startx(), target);
  }

  // required double StartY = 32;
  if (has_starty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->starty(), target);
  }

  // required int32 CreatorID = 33;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->creatorid(), target);
  }

  // required int32 UpdaterID = 34;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->updaterid(), target);
  }

  // required int64 CreateTime = 35;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->createtime(), target);
  }

  // required int64 UpdateTime = 36;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->updatetime(), target);
  }

  // required string FaceName = 37;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->facename(), target);
  }

  // required string RemarkText = 38;
  if (has_remarktext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remarktext().data(), this->remarktext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->remarktext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_RemarkInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignRemarkID = 1;
    if (has_designremarkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designremarkid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPrintID = 5;
    if (has_designprintid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprintid());
    }

    // required int32 PrintID = 6;
    if (has_printid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printid());
    }

    // required int32 ViewType = 7;
    if (has_viewtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewtype());
    }

    // required int64 BGColor = 8;
    if (has_bgcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bgcolor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 ForeColor = 9;
    if (has_forecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->forecolor());
    }

    // required int32 FontSize = 10;
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fontsize());
    }

    // required int32 FontStyle = 11;
    if (has_fontstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fontstyle());
    }

    // required int32 LineSpace = 12;
    if (has_linespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linespace());
    }

    // required int32 ArrowID = 13;
    if (has_arrowid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrowid());
    }

    // required int32 ArrowStyle = 14;
    if (has_arrowstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrowstyle());
    }

    // required int32 FrameStyle = 15;
    if (has_framestyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->framestyle());
    }

    // required int64 FrameColor = 16;
    if (has_framecolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->framecolor());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 DirectLine = 17;
    if (has_directline()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->directline());
    }

    // required int32 DirectStyle = 18;
    if (has_directstyle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->directstyle());
    }

    // required int32 DirectLineStyle = 19;
    if (has_directlinestyle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->directlinestyle());
    }

    // required int32 CommentFrameStyle = 20;
    if (has_commentframestyle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commentframestyle());
    }

    // required bool IsSingleMode = 21;
    if (has_issinglemode()) {
      total_size += 2 + 1;
    }

    // required bool IsVisible = 22;
    if (has_isvisible()) {
      total_size += 2 + 1;
    }

    // required bool IsLocked = 23;
    if (has_islocked()) {
      total_size += 2 + 1;
    }

    // required bool StrickOut = 24;
    if (has_strickout()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required bool UnderLine = 25;
    if (has_underline()) {
      total_size += 2 + 1;
    }

    // required bool Italic = 26;
    if (has_italic()) {
      total_size += 2 + 1;
    }

    // required bool Bold = 27;
    if (has_bold()) {
      total_size += 2 + 1;
    }

    // required double FrameWidth = 28;
    if (has_framewidth()) {
      total_size += 2 + 8;
    }

    // required double ArrowX = 29;
    if (has_arrowx()) {
      total_size += 2 + 8;
    }

    // required double ArrowY = 30;
    if (has_arrowy()) {
      total_size += 2 + 8;
    }

    // required double StartX = 31;
    if (has_startx()) {
      total_size += 2 + 8;
    }

    // required double StartY = 32;
    if (has_starty()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int32 CreatorID = 33;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 34;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 35;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 36;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string FaceName = 37;
    if (has_facename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facename());
    }

    // required string RemarkText = 38;
    if (has_remarktext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remarktext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_RemarkInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_RemarkInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_RemarkInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_RemarkInfo::MergeFrom(const GC_RemarkInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designremarkid()) {
      set_designremarkid(from.designremarkid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designprintid()) {
      set_designprintid(from.designprintid());
    }
    if (from.has_printid()) {
      set_printid(from.printid());
    }
    if (from.has_viewtype()) {
      set_viewtype(from.viewtype());
    }
    if (from.has_bgcolor()) {
      set_bgcolor(from.bgcolor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_forecolor()) {
      set_forecolor(from.forecolor());
    }
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
    if (from.has_fontstyle()) {
      set_fontstyle(from.fontstyle());
    }
    if (from.has_linespace()) {
      set_linespace(from.linespace());
    }
    if (from.has_arrowid()) {
      set_arrowid(from.arrowid());
    }
    if (from.has_arrowstyle()) {
      set_arrowstyle(from.arrowstyle());
    }
    if (from.has_framestyle()) {
      set_framestyle(from.framestyle());
    }
    if (from.has_framecolor()) {
      set_framecolor(from.framecolor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_directline()) {
      set_directline(from.directline());
    }
    if (from.has_directstyle()) {
      set_directstyle(from.directstyle());
    }
    if (from.has_directlinestyle()) {
      set_directlinestyle(from.directlinestyle());
    }
    if (from.has_commentframestyle()) {
      set_commentframestyle(from.commentframestyle());
    }
    if (from.has_issinglemode()) {
      set_issinglemode(from.issinglemode());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_strickout()) {
      set_strickout(from.strickout());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_underline()) {
      set_underline(from.underline());
    }
    if (from.has_italic()) {
      set_italic(from.italic());
    }
    if (from.has_bold()) {
      set_bold(from.bold());
    }
    if (from.has_framewidth()) {
      set_framewidth(from.framewidth());
    }
    if (from.has_arrowx()) {
      set_arrowx(from.arrowx());
    }
    if (from.has_arrowy()) {
      set_arrowy(from.arrowy());
    }
    if (from.has_startx()) {
      set_startx(from.startx());
    }
    if (from.has_starty()) {
      set_starty(from.starty());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_facename()) {
      set_facename(from.facename());
    }
    if (from.has_remarktext()) {
      set_remarktext(from.remarktext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_RemarkInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_RemarkInfo::CopyFrom(const GC_RemarkInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_RemarkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GC_RemarkInfo::Swap(GC_RemarkInfo* other) {
  if (other != this) {
    std::swap(designremarkid_, other->designremarkid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(designprintid_, other->designprintid_);
    std::swap(printid_, other->printid_);
    std::swap(viewtype_, other->viewtype_);
    std::swap(bgcolor_, other->bgcolor_);
    std::swap(forecolor_, other->forecolor_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(fontstyle_, other->fontstyle_);
    std::swap(linespace_, other->linespace_);
    std::swap(arrowid_, other->arrowid_);
    std::swap(arrowstyle_, other->arrowstyle_);
    std::swap(framestyle_, other->framestyle_);
    std::swap(framecolor_, other->framecolor_);
    std::swap(directline_, other->directline_);
    std::swap(directstyle_, other->directstyle_);
    std::swap(directlinestyle_, other->directlinestyle_);
    std::swap(commentframestyle_, other->commentframestyle_);
    std::swap(issinglemode_, other->issinglemode_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(strickout_, other->strickout_);
    std::swap(underline_, other->underline_);
    std::swap(italic_, other->italic_);
    std::swap(bold_, other->bold_);
    std::swap(framewidth_, other->framewidth_);
    std::swap(arrowx_, other->arrowx_);
    std::swap(arrowy_, other->arrowy_);
    std::swap(startx_, other->startx_);
    std::swap(starty_, other->starty_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(facename_, other->facename_);
    std::swap(remarktext_, other->remarktext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_RemarkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_RemarkInfo_descriptor_;
  metadata.reflection = GC_RemarkInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_ShapeInfo::kDesignShapeIDFieldNumber;
const int GC_ShapeInfo::kOrderCateFieldNumber;
const int GC_ShapeInfo::kDesignPlanIDFieldNumber;
const int GC_ShapeInfo::kOrderIDFieldNumber;
const int GC_ShapeInfo::kDesignPrintIDFieldNumber;
const int GC_ShapeInfo::kPrintIDFieldNumber;
const int GC_ShapeInfo::kViewTypeFieldNumber;
const int GC_ShapeInfo::kShapeTypeFieldNumber;
const int GC_ShapeInfo::kLineWidthFieldNumber;
const int GC_ShapeInfo::kLineStyleFieldNumber;
const int GC_ShapeInfo::kStartXFieldNumber;
const int GC_ShapeInfo::kStartYFieldNumber;
const int GC_ShapeInfo::kStopXFieldNumber;
const int GC_ShapeInfo::kStopYFieldNumber;
const int GC_ShapeInfo::kIsVisibleFieldNumber;
const int GC_ShapeInfo::kIsLockedFieldNumber;
const int GC_ShapeInfo::kCreatorIDFieldNumber;
const int GC_ShapeInfo::kUpdaterIDFieldNumber;
const int GC_ShapeInfo::kCreateTimeFieldNumber;
const int GC_ShapeInfo::kUpdateTimeFieldNumber;
const int GC_ShapeInfo::kAttachFilePathFieldNumber;
#endif  // !_MSC_VER

GC_ShapeInfo::GC_ShapeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_ShapeInfo::InitAsDefaultInstance() {
}

GC_ShapeInfo::GC_ShapeInfo(const GC_ShapeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_ShapeInfo::SharedCtor() {
  _cached_size_ = 0;
  designshapeid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designprintid_ = 0;
  printid_ = 0;
  viewtype_ = 0;
  shapetype_ = 0;
  linewidth_ = 0;
  linestyle_ = 0;
  startx_ = 0;
  starty_ = 0;
  stopx_ = 0;
  stopy_ = 0;
  isvisible_ = false;
  islocked_ = false;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  attachfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_ShapeInfo::~GC_ShapeInfo() {
  SharedDtor();
}

void GC_ShapeInfo::SharedDtor() {
  if (attachfilepath_ != &::google::protobuf::internal::kEmptyString) {
    delete attachfilepath_;
  }
  if (this != default_instance_) {
  }
}

void GC_ShapeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_ShapeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_ShapeInfo_descriptor_;
}

const GC_ShapeInfo& GC_ShapeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_ShapeInfo* GC_ShapeInfo::default_instance_ = NULL;

GC_ShapeInfo* GC_ShapeInfo::New() const {
  return new GC_ShapeInfo;
}

void GC_ShapeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designshapeid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designprintid_ = 0;
    printid_ = 0;
    viewtype_ = 0;
    shapetype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    linewidth_ = 0;
    linestyle_ = 0;
    startx_ = 0;
    starty_ = 0;
    stopx_ = 0;
    stopy_ = 0;
    isvisible_ = false;
    islocked_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_attachfilepath()) {
      if (attachfilepath_ != &::google::protobuf::internal::kEmptyString) {
        attachfilepath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_ShapeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignShapeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designshapeid_)));
          set_has_designshapeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPrintID;
        break;
      }

      // required int32 DesignPrintID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPrintID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designprintid_)));
          set_has_designprintid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_PrintID;
        break;
      }

      // required int32 PrintID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrintID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printid_)));
          set_has_printid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ViewType;
        break;
      }

      // required int32 ViewType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ViewType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewtype_)));
          set_has_viewtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ShapeType;
        break;
      }

      // required int32 ShapeType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShapeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shapetype_)));
          set_has_shapetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LineWidth;
        break;
      }

      // required int32 LineWidth = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linewidth_)));
          set_has_linewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LineStyle;
        break;
      }

      // required int32 LineStyle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linestyle_)));
          set_has_linestyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_StartX;
        break;
      }

      // required double StartX = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StartX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startx_)));
          set_has_startx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_StartY;
        break;
      }

      // required double StartY = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StartY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &starty_)));
          set_has_starty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_StopX;
        break;
      }

      // required double StopX = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StopX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopx_)));
          set_has_stopx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_StopY;
        break;
      }

      // required double StopY = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StopY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopy_)));
          set_has_stopy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_AttachFilePath;
        break;
      }

      // required string AttachFilePath = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttachFilePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attachfilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attachfilepath().data(), this->attachfilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_ShapeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignShapeID = 1;
  if (has_designshapeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designshapeid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPrintID = 5;
  if (has_designprintid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designprintid(), output);
  }

  // required int32 PrintID = 6;
  if (has_printid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->printid(), output);
  }

  // required int32 ViewType = 7;
  if (has_viewtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->viewtype(), output);
  }

  // required int32 ShapeType = 8;
  if (has_shapetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->shapetype(), output);
  }

  // required int32 LineWidth = 9;
  if (has_linewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->linewidth(), output);
  }

  // required int32 LineStyle = 10;
  if (has_linestyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->linestyle(), output);
  }

  // required double StartX = 11;
  if (has_startx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->startx(), output);
  }

  // required double StartY = 12;
  if (has_starty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->starty(), output);
  }

  // required double StopX = 13;
  if (has_stopx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->stopx(), output);
  }

  // required double StopY = 14;
  if (has_stopy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->stopy(), output);
  }

  // required bool IsVisible = 15;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isvisible(), output);
  }

  // required bool IsLocked = 16;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->islocked(), output);
  }

  // required int32 CreatorID = 17;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->creatorid(), output);
  }

  // required int32 UpdaterID = 18;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->updaterid(), output);
  }

  // required int64 CreateTime = 19;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->createtime(), output);
  }

  // required int64 UpdateTime = 20;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->updatetime(), output);
  }

  // required string AttachFilePath = 21;
  if (has_attachfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachfilepath().data(), this->attachfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->attachfilepath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_ShapeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignShapeID = 1;
  if (has_designshapeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designshapeid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPrintID = 5;
  if (has_designprintid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designprintid(), target);
  }

  // required int32 PrintID = 6;
  if (has_printid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->printid(), target);
  }

  // required int32 ViewType = 7;
  if (has_viewtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->viewtype(), target);
  }

  // required int32 ShapeType = 8;
  if (has_shapetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->shapetype(), target);
  }

  // required int32 LineWidth = 9;
  if (has_linewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->linewidth(), target);
  }

  // required int32 LineStyle = 10;
  if (has_linestyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->linestyle(), target);
  }

  // required double StartX = 11;
  if (has_startx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->startx(), target);
  }

  // required double StartY = 12;
  if (has_starty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->starty(), target);
  }

  // required double StopX = 13;
  if (has_stopx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->stopx(), target);
  }

  // required double StopY = 14;
  if (has_stopy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->stopy(), target);
  }

  // required bool IsVisible = 15;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isvisible(), target);
  }

  // required bool IsLocked = 16;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->islocked(), target);
  }

  // required int32 CreatorID = 17;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->creatorid(), target);
  }

  // required int32 UpdaterID = 18;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->updaterid(), target);
  }

  // required int64 CreateTime = 19;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->createtime(), target);
  }

  // required int64 UpdateTime = 20;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->updatetime(), target);
  }

  // required string AttachFilePath = 21;
  if (has_attachfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachfilepath().data(), this->attachfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->attachfilepath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_ShapeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignShapeID = 1;
    if (has_designshapeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designshapeid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPrintID = 5;
    if (has_designprintid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designprintid());
    }

    // required int32 PrintID = 6;
    if (has_printid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printid());
    }

    // required int32 ViewType = 7;
    if (has_viewtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewtype());
    }

    // required int32 ShapeType = 8;
    if (has_shapetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shapetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LineWidth = 9;
    if (has_linewidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linewidth());
    }

    // required int32 LineStyle = 10;
    if (has_linestyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linestyle());
    }

    // required double StartX = 11;
    if (has_startx()) {
      total_size += 1 + 8;
    }

    // required double StartY = 12;
    if (has_starty()) {
      total_size += 1 + 8;
    }

    // required double StopX = 13;
    if (has_stopx()) {
      total_size += 1 + 8;
    }

    // required double StopY = 14;
    if (has_stopy()) {
      total_size += 1 + 8;
    }

    // required bool IsVisible = 15;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required bool IsLocked = 16;
    if (has_islocked()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 CreatorID = 17;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 18;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 19;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 20;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string AttachFilePath = 21;
    if (has_attachfilepath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attachfilepath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_ShapeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_ShapeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_ShapeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_ShapeInfo::MergeFrom(const GC_ShapeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designshapeid()) {
      set_designshapeid(from.designshapeid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designprintid()) {
      set_designprintid(from.designprintid());
    }
    if (from.has_printid()) {
      set_printid(from.printid());
    }
    if (from.has_viewtype()) {
      set_viewtype(from.viewtype());
    }
    if (from.has_shapetype()) {
      set_shapetype(from.shapetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_linewidth()) {
      set_linewidth(from.linewidth());
    }
    if (from.has_linestyle()) {
      set_linestyle(from.linestyle());
    }
    if (from.has_startx()) {
      set_startx(from.startx());
    }
    if (from.has_starty()) {
      set_starty(from.starty());
    }
    if (from.has_stopx()) {
      set_stopx(from.stopx());
    }
    if (from.has_stopy()) {
      set_stopy(from.stopy());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_attachfilepath()) {
      set_attachfilepath(from.attachfilepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_ShapeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_ShapeInfo::CopyFrom(const GC_ShapeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_ShapeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fffff) != 0x001fffff) return false;

  return true;
}

void GC_ShapeInfo::Swap(GC_ShapeInfo* other) {
  if (other != this) {
    std::swap(designshapeid_, other->designshapeid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(designprintid_, other->designprintid_);
    std::swap(printid_, other->printid_);
    std::swap(viewtype_, other->viewtype_);
    std::swap(shapetype_, other->shapetype_);
    std::swap(linewidth_, other->linewidth_);
    std::swap(linestyle_, other->linestyle_);
    std::swap(startx_, other->startx_);
    std::swap(starty_, other->starty_);
    std::swap(stopx_, other->stopx_);
    std::swap(stopy_, other->stopy_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(attachfilepath_, other->attachfilepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_ShapeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_ShapeInfo_descriptor_;
  metadata.reflection = GC_ShapeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_SkinInfo::kDesignSkinIDFieldNumber;
const int GC_SkinInfo::kOrderCateFieldNumber;
const int GC_SkinInfo::kDesignPlanIDFieldNumber;
const int GC_SkinInfo::kOrderIDFieldNumber;
const int GC_SkinInfo::kDecorIDFieldNumber;
const int GC_SkinInfo::kFactoryIDFieldNumber;
const int GC_SkinInfo::kVerCodeFieldNumber;
const int GC_SkinInfo::kGTypeIDFieldNumber;
const int GC_SkinInfo::kHasMarkFieldNumber;
const int GC_SkinInfo::kIsVisibleFieldNumber;
const int GC_SkinInfo::kIsLockedFieldNumber;
const int GC_SkinInfo::kXLenFieldNumber;
const int GC_SkinInfo::kYLenFieldNumber;
const int GC_SkinInfo::kZLenFieldNumber;
const int GC_SkinInfo::kGroundLenFieldNumber;
const int GC_SkinInfo::kCreatorIDFieldNumber;
const int GC_SkinInfo::kUpdaterIDFieldNumber;
const int GC_SkinInfo::kCreateTimeFieldNumber;
const int GC_SkinInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_SkinInfo::GC_SkinInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_SkinInfo::InitAsDefaultInstance() {
}

GC_SkinInfo::GC_SkinInfo(const GC_SkinInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_SkinInfo::SharedCtor() {
  _cached_size_ = 0;
  designskinid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  decorid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  gtypeid_ = 0;
  hasmark_ = false;
  isvisible_ = false;
  islocked_ = false;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  groundlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_SkinInfo::~GC_SkinInfo() {
  SharedDtor();
}

void GC_SkinInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_SkinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_SkinInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_SkinInfo_descriptor_;
}

const GC_SkinInfo& GC_SkinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_SkinInfo* GC_SkinInfo::default_instance_ = NULL;

GC_SkinInfo* GC_SkinInfo::New() const {
  return new GC_SkinInfo;
}

void GC_SkinInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designskinid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    decorid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    gtypeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hasmark_ = false;
    isvisible_ = false;
    islocked_ = false;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    groundlen_ = 0;
    creatorid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_SkinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignSkinID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designskinid_)));
          set_has_designskinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DecorID;
        break;
      }

      // required int32 DecorID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorid_)));
          set_has_decorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_HasMark;
        break;
      }

      // required bool HasMark = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmark_)));
          set_has_hasmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_XLen;
        break;
      }

      // required double XLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_YLen;
        break;
      }

      // required double YLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_GroundLen;
        break;
      }

      // required double GroundLen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GroundLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &groundlen_)));
          set_has_groundlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_SkinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignSkinID = 1;
  if (has_designskinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designskinid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DecorID = 5;
  if (has_decorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->decorid(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vercode(), output);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gtypeid(), output);
  }

  // required bool HasMark = 9;
  if (has_hasmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->hasmark(), output);
  }

  // required bool IsVisible = 10;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isvisible(), output);
  }

  // required bool IsLocked = 11;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->islocked(), output);
  }

  // required double XLen = 12;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->xlen(), output);
  }

  // required double YLen = 13;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->ylen(), output);
  }

  // required double ZLen = 14;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->zlen(), output);
  }

  // required double GroundLen = 15;
  if (has_groundlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->groundlen(), output);
  }

  // required int32 CreatorID = 16;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->creatorid(), output);
  }

  // required int32 UpdaterID = 17;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->updaterid(), output);
  }

  // required int64 CreateTime = 18;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->createtime(), output);
  }

  // required int64 UpdateTime = 19;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_SkinInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignSkinID = 1;
  if (has_designskinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designskinid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DecorID = 5;
  if (has_decorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->decorid(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vercode(), target);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gtypeid(), target);
  }

  // required bool HasMark = 9;
  if (has_hasmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->hasmark(), target);
  }

  // required bool IsVisible = 10;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isvisible(), target);
  }

  // required bool IsLocked = 11;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->islocked(), target);
  }

  // required double XLen = 12;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->xlen(), target);
  }

  // required double YLen = 13;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->ylen(), target);
  }

  // required double ZLen = 14;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->zlen(), target);
  }

  // required double GroundLen = 15;
  if (has_groundlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->groundlen(), target);
  }

  // required int32 CreatorID = 16;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->creatorid(), target);
  }

  // required int32 UpdaterID = 17;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->updaterid(), target);
  }

  // required int64 CreateTime = 18;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->createtime(), target);
  }

  // required int64 UpdateTime = 19;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_SkinInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignSkinID = 1;
    if (has_designskinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designskinid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DecorID = 5;
    if (has_decorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorid());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 7;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 GTypeID = 8;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool HasMark = 9;
    if (has_hasmark()) {
      total_size += 1 + 1;
    }

    // required bool IsVisible = 10;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required bool IsLocked = 11;
    if (has_islocked()) {
      total_size += 1 + 1;
    }

    // required double XLen = 12;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 13;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double ZLen = 14;
    if (has_zlen()) {
      total_size += 1 + 8;
    }

    // required double GroundLen = 15;
    if (has_groundlen()) {
      total_size += 1 + 8;
    }

    // required int32 CreatorID = 16;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 UpdaterID = 17;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 18;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 19;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_SkinInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_SkinInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_SkinInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_SkinInfo::MergeFrom(const GC_SkinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designskinid()) {
      set_designskinid(from.designskinid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_decorid()) {
      set_decorid(from.decorid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hasmark()) {
      set_hasmark(from.hasmark());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_groundlen()) {
      set_groundlen(from.groundlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_SkinInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_SkinInfo::CopyFrom(const GC_SkinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_SkinInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007ffff) != 0x0007ffff) return false;

  return true;
}

void GC_SkinInfo::Swap(GC_SkinInfo* other) {
  if (other != this) {
    std::swap(designskinid_, other->designskinid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(decorid_, other->decorid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(hasmark_, other->hasmark_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(groundlen_, other->groundlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_SkinInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_SkinInfo_descriptor_;
  metadata.reflection = GC_SkinInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_TableInfo::kDesignTableIDFieldNumber;
const int GC_TableInfo::kOrderCateFieldNumber;
const int GC_TableInfo::kDesignPlanIDFieldNumber;
const int GC_TableInfo::kOrderIDFieldNumber;
const int GC_TableInfo::kTableIDFieldNumber;
const int GC_TableInfo::kFactoryIDFieldNumber;
const int GC_TableInfo::kVerCodeFieldNumber;
const int GC_TableInfo::kTableIndexFieldNumber;
const int GC_TableInfo::kHasMarkFieldNumber;
const int GC_TableInfo::kIsVisibleFieldNumber;
const int GC_TableInfo::kIsLockedFieldNumber;
const int GC_TableInfo::kSupplyTypeFieldNumber;
const int GC_TableInfo::kGTypeIDFieldNumber;
const int GC_TableInfo::kZLenFieldNumber;
const int GC_TableInfo::kYPosFieldNumber;
const int GC_TableInfo::kCreatorIDFieldNumber;
const int GC_TableInfo::kUpdaterIDFieldNumber;
const int GC_TableInfo::kCreateTimeFieldNumber;
const int GC_TableInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_TableInfo::GC_TableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_TableInfo::InitAsDefaultInstance() {
}

GC_TableInfo::GC_TableInfo(const GC_TableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_TableInfo::SharedCtor() {
  _cached_size_ = 0;
  designtableid_ = 0;
  ordercate_ = 0;
  designplanid_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  tableid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  tableindex_ = 0;
  hasmark_ = false;
  isvisible_ = false;
  islocked_ = false;
  supplytype_ = 0;
  gtypeid_ = 0;
  zlen_ = 0;
  ypos_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_TableInfo::~GC_TableInfo() {
  SharedDtor();
}

void GC_TableInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_TableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_TableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_TableInfo_descriptor_;
}

const GC_TableInfo& GC_TableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_TableInfo* GC_TableInfo::default_instance_ = NULL;

GC_TableInfo* GC_TableInfo::New() const {
  return new GC_TableInfo;
}

void GC_TableInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designtableid_ = 0;
    ordercate_ = 0;
    designplanid_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    tableid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    tableindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hasmark_ = false;
    isvisible_ = false;
    islocked_ = false;
    supplytype_ = 0;
    gtypeid_ = 0;
    zlen_ = 0;
    ypos_ = 0;
    creatorid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_TableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignTableID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designtableid_)));
          set_has_designtableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TableID;
        break;
      }

      // required int32 TableID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_TableIndex;
        break;
      }

      // required int32 TableIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableindex_)));
          set_has_tableindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_HasMark;
        break;
      }

      // required bool HasMark = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmark_)));
          set_has_hasmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_YPos;
        break;
      }

      // required double YPos = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_TableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignTableID = 1;
  if (has_designtableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designtableid(), output);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ordercate(), output);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->designplanid(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 TableID = 5;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tableid(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vercode(), output);
  }

  // required int32 TableIndex = 8;
  if (has_tableindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tableindex(), output);
  }

  // required bool HasMark = 9;
  if (has_hasmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->hasmark(), output);
  }

  // required bool IsVisible = 10;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isvisible(), output);
  }

  // required bool IsLocked = 11;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->islocked(), output);
  }

  // required int32 SupplyType = 12;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->supplytype(), output);
  }

  // required int32 GTypeID = 13;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gtypeid(), output);
  }

  // required double ZLen = 14;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->zlen(), output);
  }

  // required double YPos = 15;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->ypos(), output);
  }

  // required int32 CreatorID = 16;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->creatorid(), output);
  }

  // required int32 UpdaterID = 17;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->updaterid(), output);
  }

  // required int64 CreateTime = 18;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->createtime(), output);
  }

  // required int64 UpdateTime = 19;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_TableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignTableID = 1;
  if (has_designtableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designtableid(), target);
  }

  // required int32 OrderCate = 2;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ordercate(), target);
  }

  // required int32 DesignPlanID = 3;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->designplanid(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 TableID = 5;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tableid(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vercode(), target);
  }

  // required int32 TableIndex = 8;
  if (has_tableindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tableindex(), target);
  }

  // required bool HasMark = 9;
  if (has_hasmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->hasmark(), target);
  }

  // required bool IsVisible = 10;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isvisible(), target);
  }

  // required bool IsLocked = 11;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->islocked(), target);
  }

  // required int32 SupplyType = 12;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->supplytype(), target);
  }

  // required int32 GTypeID = 13;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gtypeid(), target);
  }

  // required double ZLen = 14;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->zlen(), target);
  }

  // required double YPos = 15;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->ypos(), target);
  }

  // required int32 CreatorID = 16;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->creatorid(), target);
  }

  // required int32 UpdaterID = 17;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->updaterid(), target);
  }

  // required int64 CreateTime = 18;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->createtime(), target);
  }

  // required int64 UpdateTime = 19;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_TableInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignTableID = 1;
    if (has_designtableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designtableid());
    }

    // required int32 OrderCate = 2;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int32 DesignPlanID = 3;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 TableID = 5;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 7;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 TableIndex = 8;
    if (has_tableindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool HasMark = 9;
    if (has_hasmark()) {
      total_size += 1 + 1;
    }

    // required bool IsVisible = 10;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required bool IsLocked = 11;
    if (has_islocked()) {
      total_size += 1 + 1;
    }

    // required int32 SupplyType = 12;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 GTypeID = 13;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required double ZLen = 14;
    if (has_zlen()) {
      total_size += 1 + 8;
    }

    // required double YPos = 15;
    if (has_ypos()) {
      total_size += 1 + 8;
    }

    // required int32 CreatorID = 16;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 UpdaterID = 17;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 18;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 19;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_TableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_TableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_TableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_TableInfo::MergeFrom(const GC_TableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designtableid()) {
      set_designtableid(from.designtableid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_tableindex()) {
      set_tableindex(from.tableindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hasmark()) {
      set_hasmark(from.hasmark());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_TableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_TableInfo::CopyFrom(const GC_TableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_TableInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007ffff) != 0x0007ffff) return false;

  return true;
}

void GC_TableInfo::Swap(GC_TableInfo* other) {
  if (other != this) {
    std::swap(designtableid_, other->designtableid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(orderid_, other->orderid_);
    std::swap(tableid_, other->tableid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(tableindex_, other->tableindex_);
    std::swap(hasmark_, other->hasmark_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(zlen_, other->zlen_);
    std::swap(ypos_, other->ypos_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_TableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_TableInfo_descriptor_;
  metadata.reflection = GC_TableInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_TablePartInfo::kDesignTablePartIDFieldNumber;
const int GC_TablePartInfo::kDesignTableIDFieldNumber;
const int GC_TablePartInfo::kOrderCateFieldNumber;
const int GC_TablePartInfo::kOrderIDFieldNumber;
const int GC_TablePartInfo::kDesignPlanIDFieldNumber;
const int GC_TablePartInfo::kDecorLineIDFieldNumber;
const int GC_TablePartInfo::kFactoryIDFieldNumber;
const int GC_TablePartInfo::kVerCodeFieldNumber;
const int GC_TablePartInfo::kTableSideIndexFieldNumber;
const int GC_TablePartInfo::kIsUserSetYLenFieldNumber;
const int GC_TablePartInfo::kGTypeIDFieldNumber;
const int GC_TablePartInfo::kMaterialIDFieldNumber;
const int GC_TablePartInfo::kModelIDFieldNumber;
const int GC_TablePartInfo::kXLenFieldNumber;
const int GC_TablePartInfo::kYLenFieldNumber;
const int GC_TablePartInfo::kZLenFieldNumber;
const int GC_TablePartInfo::kDefaultYLenFieldNumber;
const int GC_TablePartInfo::kCreatorIDFieldNumber;
const int GC_TablePartInfo::kUpdaterIDFieldNumber;
const int GC_TablePartInfo::kCreateTimeFieldNumber;
const int GC_TablePartInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_TablePartInfo::GC_TablePartInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_TablePartInfo::InitAsDefaultInstance() {
}

GC_TablePartInfo::GC_TablePartInfo(const GC_TablePartInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_TablePartInfo::SharedCtor() {
  _cached_size_ = 0;
  designtablepartid_ = 0;
  designtableid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  decorlineid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  tablesideindex_ = 0;
  isusersetylen_ = false;
  gtypeid_ = 0;
  materialid_ = 0;
  modelid_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  defaultylen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_TablePartInfo::~GC_TablePartInfo() {
  SharedDtor();
}

void GC_TablePartInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_TablePartInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_TablePartInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_TablePartInfo_descriptor_;
}

const GC_TablePartInfo& GC_TablePartInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_TablePartInfo* GC_TablePartInfo::default_instance_ = NULL;

GC_TablePartInfo* GC_TablePartInfo::New() const {
  return new GC_TablePartInfo;
}

void GC_TablePartInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designtablepartid_ = 0;
    designtableid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    decorlineid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tablesideindex_ = 0;
    isusersetylen_ = false;
    gtypeid_ = 0;
    materialid_ = 0;
    modelid_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    defaultylen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_TablePartInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignTablePartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designtablepartid_)));
          set_has_designtablepartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DesignTableID;
        break;
      }

      // required int32 DesignTableID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignTableID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designtableid_)));
          set_has_designtableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DecorLineID;
        break;
      }

      // required int32 DecorLineID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorLineID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorlineid_)));
          set_has_decorlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_TableSideIndex;
        break;
      }

      // required int32 TableSideIndex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableSideIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablesideindex_)));
          set_has_tablesideindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsUserSetYLen;
        break;
      }

      // required bool IsUserSetYLen = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUserSetYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusersetylen_)));
          set_has_isusersetylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ModelID;
        break;
      }

      // required int32 ModelID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_XLen;
        break;
      }

      // required double XLen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_YLen;
        break;
      }

      // required double YLen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_DefaultYLen;
        break;
      }

      // required int32 DefaultYLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefaultYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defaultylen_)));
          set_has_defaultylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_TablePartInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignTablePartID = 1;
  if (has_designtablepartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designtablepartid(), output);
  }

  // required int32 DesignTableID = 2;
  if (has_designtableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->designtableid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 DecorLineID = 6;
  if (has_decorlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->decorlineid(), output);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->factoryid(), output);
  }

  // required int64 VerCode = 8;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->vercode(), output);
  }

  // required int32 TableSideIndex = 9;
  if (has_tablesideindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tablesideindex(), output);
  }

  // required bool IsUserSetYLen = 10;
  if (has_isusersetylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isusersetylen(), output);
  }

  // required int32 GTypeID = 11;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gtypeid(), output);
  }

  // required int32 MaterialID = 12;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->materialid(), output);
  }

  // required int32 ModelID = 13;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->modelid(), output);
  }

  // required double XLen = 14;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->xlen(), output);
  }

  // required double YLen = 15;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->ylen(), output);
  }

  // required double ZLen = 16;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->zlen(), output);
  }

  // required int32 DefaultYLen = 17;
  if (has_defaultylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->defaultylen(), output);
  }

  // required int32 CreatorID = 18;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->creatorid(), output);
  }

  // required int32 UpdaterID = 19;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->updaterid(), output);
  }

  // required int64 CreateTime = 20;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->createtime(), output);
  }

  // required int64 UpdateTime = 21;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_TablePartInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignTablePartID = 1;
  if (has_designtablepartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designtablepartid(), target);
  }

  // required int32 DesignTableID = 2;
  if (has_designtableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->designtableid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 DecorLineID = 6;
  if (has_decorlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->decorlineid(), target);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->factoryid(), target);
  }

  // required int64 VerCode = 8;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->vercode(), target);
  }

  // required int32 TableSideIndex = 9;
  if (has_tablesideindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tablesideindex(), target);
  }

  // required bool IsUserSetYLen = 10;
  if (has_isusersetylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isusersetylen(), target);
  }

  // required int32 GTypeID = 11;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gtypeid(), target);
  }

  // required int32 MaterialID = 12;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->materialid(), target);
  }

  // required int32 ModelID = 13;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->modelid(), target);
  }

  // required double XLen = 14;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->xlen(), target);
  }

  // required double YLen = 15;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->ylen(), target);
  }

  // required double ZLen = 16;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->zlen(), target);
  }

  // required int32 DefaultYLen = 17;
  if (has_defaultylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->defaultylen(), target);
  }

  // required int32 CreatorID = 18;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->creatorid(), target);
  }

  // required int32 UpdaterID = 19;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->updaterid(), target);
  }

  // required int64 CreateTime = 20;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->createtime(), target);
  }

  // required int64 UpdateTime = 21;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_TablePartInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignTablePartID = 1;
    if (has_designtablepartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designtablepartid());
    }

    // required int32 DesignTableID = 2;
    if (has_designtableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designtableid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 DecorLineID = 6;
    if (has_decorlineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorlineid());
    }

    // required int32 FactoryID = 7;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 8;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 TableSideIndex = 9;
    if (has_tablesideindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablesideindex());
    }

    // required bool IsUserSetYLen = 10;
    if (has_isusersetylen()) {
      total_size += 1 + 1;
    }

    // required int32 GTypeID = 11;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required int32 MaterialID = 12;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required int32 ModelID = 13;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

    // required double XLen = 14;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 15;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double ZLen = 16;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 DefaultYLen = 17;
    if (has_defaultylen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defaultylen());
    }

    // required int32 CreatorID = 18;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 19;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 20;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 21;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_TablePartInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_TablePartInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_TablePartInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_TablePartInfo::MergeFrom(const GC_TablePartInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designtablepartid()) {
      set_designtablepartid(from.designtablepartid());
    }
    if (from.has_designtableid()) {
      set_designtableid(from.designtableid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_decorlineid()) {
      set_decorlineid(from.decorlineid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tablesideindex()) {
      set_tablesideindex(from.tablesideindex());
    }
    if (from.has_isusersetylen()) {
      set_isusersetylen(from.isusersetylen());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_defaultylen()) {
      set_defaultylen(from.defaultylen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_TablePartInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_TablePartInfo::CopyFrom(const GC_TablePartInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_TablePartInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fffff) != 0x001fffff) return false;

  return true;
}

void GC_TablePartInfo::Swap(GC_TablePartInfo* other) {
  if (other != this) {
    std::swap(designtablepartid_, other->designtablepartid_);
    std::swap(designtableid_, other->designtableid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(decorlineid_, other->decorlineid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(tablesideindex_, other->tablesideindex_);
    std::swap(isusersetylen_, other->isusersetylen_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(materialid_, other->materialid_);
    std::swap(modelid_, other->modelid_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(defaultylen_, other->defaultylen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_TablePartInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_TablePartInfo_descriptor_;
  metadata.reflection = GC_TablePartInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_TableSideInfo::kDesignTableSideIDFieldNumber;
const int GC_TableSideInfo::kDesignTableIDFieldNumber;
const int GC_TableSideInfo::kOrderCateFieldNumber;
const int GC_TableSideInfo::kOrderIDFieldNumber;
const int GC_TableSideInfo::kDesignPlanIDFieldNumber;
const int GC_TableSideInfo::kTableTopIDFieldNumber;
const int GC_TableSideInfo::kTableTopSideIDFieldNumber;
const int GC_TableSideInfo::kFactoryIDFieldNumber;
const int GC_TableSideInfo::kVerCodeFieldNumber;
const int GC_TableSideInfo::kTableSideIndexFieldNumber;
const int GC_TableSideInfo::kIsUseTableMatFieldNumber;
const int GC_TableSideInfo::kMaterialIDFieldNumber;
const int GC_TableSideInfo::kCreatorIDFieldNumber;
const int GC_TableSideInfo::kUpdaterIDFieldNumber;
const int GC_TableSideInfo::kCreateTimeFieldNumber;
const int GC_TableSideInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_TableSideInfo::GC_TableSideInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_TableSideInfo::InitAsDefaultInstance() {
}

GC_TableSideInfo::GC_TableSideInfo(const GC_TableSideInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_TableSideInfo::SharedCtor() {
  _cached_size_ = 0;
  designtablesideid_ = 0;
  designtableid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  tabletopid_ = 0;
  tabletopsideid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  tablesideindex_ = 0;
  isusetablemat_ = false;
  materialid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_TableSideInfo::~GC_TableSideInfo() {
  SharedDtor();
}

void GC_TableSideInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_TableSideInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_TableSideInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_TableSideInfo_descriptor_;
}

const GC_TableSideInfo& GC_TableSideInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_TableSideInfo* GC_TableSideInfo::default_instance_ = NULL;

GC_TableSideInfo* GC_TableSideInfo::New() const {
  return new GC_TableSideInfo;
}

void GC_TableSideInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designtablesideid_ = 0;
    designtableid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    tabletopid_ = 0;
    tabletopsideid_ = 0;
    factoryid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    tablesideindex_ = 0;
    isusetablemat_ = false;
    materialid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_TableSideInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignTableSideID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designtablesideid_)));
          set_has_designtablesideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DesignTableID;
        break;
      }

      // required int32 DesignTableID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignTableID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designtableid_)));
          set_has_designtableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TableTopID;
        break;
      }

      // required int32 TableTopID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableTopID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletopid_)));
          set_has_tabletopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_TableTopSideID;
        break;
      }

      // required int32 TableTopSideID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableTopSideID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletopsideid_)));
          set_has_tabletopsideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_TableSideIndex;
        break;
      }

      // required int32 TableSideIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableSideIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablesideindex_)));
          set_has_tablesideindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_IsUseTableMat;
        break;
      }

      // required bool IsUseTableMat = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUseTableMat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusetablemat_)));
          set_has_isusetablemat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_TableSideInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignTableSideID = 1;
  if (has_designtablesideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designtablesideid(), output);
  }

  // required int32 DesignTableID = 2;
  if (has_designtableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->designtableid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 TableTopID = 6;
  if (has_tabletopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tabletopid(), output);
  }

  // required int32 TableTopSideID = 7;
  if (has_tabletopsideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tabletopsideid(), output);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->factoryid(), output);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vercode(), output);
  }

  // required int32 TableSideIndex = 10;
  if (has_tablesideindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tablesideindex(), output);
  }

  // required bool IsUseTableMat = 11;
  if (has_isusetablemat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isusetablemat(), output);
  }

  // required int32 MaterialID = 12;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->materialid(), output);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->creatorid(), output);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->updaterid(), output);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->createtime(), output);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_TableSideInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignTableSideID = 1;
  if (has_designtablesideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designtablesideid(), target);
  }

  // required int32 DesignTableID = 2;
  if (has_designtableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->designtableid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 TableTopID = 6;
  if (has_tabletopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tabletopid(), target);
  }

  // required int32 TableTopSideID = 7;
  if (has_tabletopsideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tabletopsideid(), target);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->factoryid(), target);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vercode(), target);
  }

  // required int32 TableSideIndex = 10;
  if (has_tablesideindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tablesideindex(), target);
  }

  // required bool IsUseTableMat = 11;
  if (has_isusetablemat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isusetablemat(), target);
  }

  // required int32 MaterialID = 12;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->materialid(), target);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->creatorid(), target);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->updaterid(), target);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->createtime(), target);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_TableSideInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignTableSideID = 1;
    if (has_designtablesideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designtablesideid());
    }

    // required int32 DesignTableID = 2;
    if (has_designtableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designtableid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 TableTopID = 6;
    if (has_tabletopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletopid());
    }

    // required int32 TableTopSideID = 7;
    if (has_tabletopsideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletopsideid());
    }

    // required int32 FactoryID = 8;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 VerCode = 9;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 TableSideIndex = 10;
    if (has_tablesideindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablesideindex());
    }

    // required bool IsUseTableMat = 11;
    if (has_isusetablemat()) {
      total_size += 1 + 1;
    }

    // required int32 MaterialID = 12;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required int32 CreatorID = 13;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 14;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 15;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 16;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_TableSideInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_TableSideInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_TableSideInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_TableSideInfo::MergeFrom(const GC_TableSideInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designtablesideid()) {
      set_designtablesideid(from.designtablesideid());
    }
    if (from.has_designtableid()) {
      set_designtableid(from.designtableid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_tabletopid()) {
      set_tabletopid(from.tabletopid());
    }
    if (from.has_tabletopsideid()) {
      set_tabletopsideid(from.tabletopsideid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_tablesideindex()) {
      set_tablesideindex(from.tablesideindex());
    }
    if (from.has_isusetablemat()) {
      set_isusetablemat(from.isusetablemat());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_TableSideInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_TableSideInfo::CopyFrom(const GC_TableSideInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_TableSideInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void GC_TableSideInfo::Swap(GC_TableSideInfo* other) {
  if (other != this) {
    std::swap(designtablesideid_, other->designtablesideid_);
    std::swap(designtableid_, other->designtableid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(tabletopid_, other->tabletopid_);
    std::swap(tabletopsideid_, other->tabletopsideid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(tablesideindex_, other->tablesideindex_);
    std::swap(isusetablemat_, other->isusetablemat_);
    std::swap(materialid_, other->materialid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_TableSideInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_TableSideInfo_descriptor_;
  metadata.reflection = GC_TableSideInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_WallDecorInfo::kDesignWallDecorIDFieldNumber;
const int GC_WallDecorInfo::kDesignWallIDFieldNumber;
const int GC_WallDecorInfo::kOrderCateFieldNumber;
const int GC_WallDecorInfo::kOrderIDFieldNumber;
const int GC_WallDecorInfo::kDesignPlanIDFieldNumber;
const int GC_WallDecorInfo::kDecorIDFieldNumber;
const int GC_WallDecorInfo::kFactoryIDFieldNumber;
const int GC_WallDecorInfo::kVerCodeFieldNumber;
const int GC_WallDecorInfo::kIsModelReversFieldNumber;
const int GC_WallDecorInfo::kIsVisibleFieldNumber;
const int GC_WallDecorInfo::kIsLockedFieldNumber;
const int GC_WallDecorInfo::kSupplyTypeFieldNumber;
const int GC_WallDecorInfo::kGTypeIDFieldNumber;
const int GC_WallDecorInfo::kXLenFieldNumber;
const int GC_WallDecorInfo::kYLenFieldNumber;
const int GC_WallDecorInfo::kZLenFieldNumber;
const int GC_WallDecorInfo::kOffsetXLenFieldNumber;
const int GC_WallDecorInfo::kOffsetYLenFieldNumber;
const int GC_WallDecorInfo::kOffsetZLenFieldNumber;
const int GC_WallDecorInfo::kCreatorIDFieldNumber;
const int GC_WallDecorInfo::kUpdaterIDFieldNumber;
const int GC_WallDecorInfo::kCreateTimeFieldNumber;
const int GC_WallDecorInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_WallDecorInfo::GC_WallDecorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_WallDecorInfo::InitAsDefaultInstance() {
}

GC_WallDecorInfo::GC_WallDecorInfo(const GC_WallDecorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_WallDecorInfo::SharedCtor() {
  _cached_size_ = 0;
  designwalldecorid_ = 0;
  designwallid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  designplanid_ = 0;
  decorid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  ismodelrevers_ = false;
  isvisible_ = false;
  islocked_ = false;
  supplytype_ = 0;
  gtypeid_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  offsetxlen_ = 0;
  offsetylen_ = 0;
  offsetzlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_WallDecorInfo::~GC_WallDecorInfo() {
  SharedDtor();
}

void GC_WallDecorInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_WallDecorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_WallDecorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_WallDecorInfo_descriptor_;
}

const GC_WallDecorInfo& GC_WallDecorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_WallDecorInfo* GC_WallDecorInfo::default_instance_ = NULL;

GC_WallDecorInfo* GC_WallDecorInfo::New() const {
  return new GC_WallDecorInfo;
}

void GC_WallDecorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designwalldecorid_ = 0;
    designwallid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    designplanid_ = 0;
    decorid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ismodelrevers_ = false;
    isvisible_ = false;
    islocked_ = false;
    supplytype_ = 0;
    gtypeid_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    offsetxlen_ = 0;
    offsetylen_ = 0;
    offsetzlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_WallDecorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignWallDecorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designwalldecorid_)));
          set_has_designwalldecorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DesignWallID;
        break;
      }

      // required int32 DesignWallID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignWallID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designwallid_)));
          set_has_designwallid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DecorID;
        break;
      }

      // required int32 DecorID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorid_)));
          set_has_decorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsModelRevers;
        break;
      }

      // required bool IsModelRevers = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsModelRevers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismodelrevers_)));
          set_has_ismodelrevers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_XLen;
        break;
      }

      // required double XLen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_YLen;
        break;
      }

      // required double YLen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_OffsetXLen;
        break;
      }

      // required double OffsetXLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OffsetXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offsetxlen_)));
          set_has_offsetxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_OffsetYLen;
        break;
      }

      // required double OffsetYLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OffsetYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offsetylen_)));
          set_has_offsetylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_OffsetZLen;
        break;
      }

      // required double OffsetZLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OffsetZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offsetzlen_)));
          set_has_offsetzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_WallDecorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignWallDecorID = 1;
  if (has_designwalldecorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designwalldecorid(), output);
  }

  // required int32 DesignWallID = 2;
  if (has_designwallid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->designwallid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designplanid(), output);
  }

  // required int32 DecorID = 6;
  if (has_decorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->decorid(), output);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->factoryid(), output);
  }

  // required int64 VerCode = 8;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->vercode(), output);
  }

  // required bool IsModelRevers = 9;
  if (has_ismodelrevers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ismodelrevers(), output);
  }

  // required bool IsVisible = 10;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isvisible(), output);
  }

  // required bool IsLocked = 11;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->islocked(), output);
  }

  // required int32 SupplyType = 12;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->supplytype(), output);
  }

  // required int32 GTypeID = 13;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gtypeid(), output);
  }

  // required double XLen = 14;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->xlen(), output);
  }

  // required double YLen = 15;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->ylen(), output);
  }

  // required double ZLen = 16;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->zlen(), output);
  }

  // required double OffsetXLen = 17;
  if (has_offsetxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->offsetxlen(), output);
  }

  // required double OffsetYLen = 18;
  if (has_offsetylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->offsetylen(), output);
  }

  // required double OffsetZLen = 19;
  if (has_offsetzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->offsetzlen(), output);
  }

  // required int32 CreatorID = 20;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->creatorid(), output);
  }

  // required int32 UpdaterID = 21;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->updaterid(), output);
  }

  // required int64 CreateTime = 22;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->createtime(), output);
  }

  // required int64 UpdateTime = 23;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_WallDecorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignWallDecorID = 1;
  if (has_designwalldecorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designwalldecorid(), target);
  }

  // required int32 DesignWallID = 2;
  if (has_designwallid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->designwallid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 DesignPlanID = 5;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->designplanid(), target);
  }

  // required int32 DecorID = 6;
  if (has_decorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->decorid(), target);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->factoryid(), target);
  }

  // required int64 VerCode = 8;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->vercode(), target);
  }

  // required bool IsModelRevers = 9;
  if (has_ismodelrevers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ismodelrevers(), target);
  }

  // required bool IsVisible = 10;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isvisible(), target);
  }

  // required bool IsLocked = 11;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->islocked(), target);
  }

  // required int32 SupplyType = 12;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->supplytype(), target);
  }

  // required int32 GTypeID = 13;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gtypeid(), target);
  }

  // required double XLen = 14;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->xlen(), target);
  }

  // required double YLen = 15;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->ylen(), target);
  }

  // required double ZLen = 16;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->zlen(), target);
  }

  // required double OffsetXLen = 17;
  if (has_offsetxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->offsetxlen(), target);
  }

  // required double OffsetYLen = 18;
  if (has_offsetylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->offsetylen(), target);
  }

  // required double OffsetZLen = 19;
  if (has_offsetzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->offsetzlen(), target);
  }

  // required int32 CreatorID = 20;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->creatorid(), target);
  }

  // required int32 UpdaterID = 21;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->updaterid(), target);
  }

  // required int64 CreateTime = 22;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->createtime(), target);
  }

  // required int64 UpdateTime = 23;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_WallDecorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignWallDecorID = 1;
    if (has_designwalldecorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designwalldecorid());
    }

    // required int32 DesignWallID = 2;
    if (has_designwallid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designwallid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 DesignPlanID = 5;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 DecorID = 6;
    if (has_decorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorid());
    }

    // required int32 FactoryID = 7;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 8;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool IsModelRevers = 9;
    if (has_ismodelrevers()) {
      total_size += 1 + 1;
    }

    // required bool IsVisible = 10;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required bool IsLocked = 11;
    if (has_islocked()) {
      total_size += 1 + 1;
    }

    // required int32 SupplyType = 12;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 GTypeID = 13;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required double XLen = 14;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 15;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double ZLen = 16;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double OffsetXLen = 17;
    if (has_offsetxlen()) {
      total_size += 2 + 8;
    }

    // required double OffsetYLen = 18;
    if (has_offsetylen()) {
      total_size += 2 + 8;
    }

    // required double OffsetZLen = 19;
    if (has_offsetzlen()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 20;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 21;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 22;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 23;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_WallDecorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_WallDecorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_WallDecorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_WallDecorInfo::MergeFrom(const GC_WallDecorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designwalldecorid()) {
      set_designwalldecorid(from.designwalldecorid());
    }
    if (from.has_designwallid()) {
      set_designwallid(from.designwallid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_decorid()) {
      set_decorid(from.decorid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ismodelrevers()) {
      set_ismodelrevers(from.ismodelrevers());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_offsetxlen()) {
      set_offsetxlen(from.offsetxlen());
    }
    if (from.has_offsetylen()) {
      set_offsetylen(from.offsetylen());
    }
    if (from.has_offsetzlen()) {
      set_offsetzlen(from.offsetzlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_WallDecorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_WallDecorInfo::CopyFrom(const GC_WallDecorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_WallDecorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;

  return true;
}

void GC_WallDecorInfo::Swap(GC_WallDecorInfo* other) {
  if (other != this) {
    std::swap(designwalldecorid_, other->designwalldecorid_);
    std::swap(designwallid_, other->designwallid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(decorid_, other->decorid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(ismodelrevers_, other->ismodelrevers_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(offsetxlen_, other->offsetxlen_);
    std::swap(offsetylen_, other->offsetylen_);
    std::swap(offsetzlen_, other->offsetzlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_WallDecorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_WallDecorInfo_descriptor_;
  metadata.reflection = GC_WallDecorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_WallInfo::kDesignWallIDFieldNumber;
const int GC_WallInfo::kDesignPlanIDFieldNumber;
const int GC_WallInfo::kOrderCateFieldNumber;
const int GC_WallInfo::kOrderIDFieldNumber;
const int GC_WallInfo::kFactoryIDFieldNumber;
const int GC_WallInfo::kVerCodeFieldNumber;
const int GC_WallInfo::kWallTypeFieldNumber;
const int GC_WallInfo::kWallIndexFieldNumber;
const int GC_WallInfo::kGroupIDFieldNumber;
const int GC_WallInfo::kDockObjIDFieldNumber;
const int GC_WallInfo::kDockXPosFieldNumber;
const int GC_WallInfo::kDockYPosFieldNumber;
const int GC_WallInfo::kDecorIDFieldNumber;
const int GC_WallInfo::kGridStyleFieldNumber;
const int GC_WallInfo::kHasMarkFieldNumber;
const int GC_WallInfo::kIsVisibleFieldNumber;
const int GC_WallInfo::kIsLockedFieldNumber;
const int GC_WallInfo::kStartXFieldNumber;
const int GC_WallInfo::kStartYFieldNumber;
const int GC_WallInfo::kEndXFieldNumber;
const int GC_WallInfo::kEndYFieldNumber;
const int GC_WallInfo::kXLenFieldNumber;
const int GC_WallInfo::kYLenFieldNumber;
const int GC_WallInfo::kZLenFieldNumber;
const int GC_WallInfo::kGroundLenFieldNumber;
const int GC_WallInfo::kCreatorIDFieldNumber;
const int GC_WallInfo::kUpdaterIDFieldNumber;
const int GC_WallInfo::kCreateTimeFieldNumber;
const int GC_WallInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GC_WallInfo::GC_WallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_WallInfo::InitAsDefaultInstance() {
}

GC_WallInfo::GC_WallInfo(const GC_WallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_WallInfo::SharedCtor() {
  _cached_size_ = 0;
  designwallid_ = 0;
  designplanid_ = 0;
  ordercate_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  walltype_ = 0;
  wallindex_ = 0;
  groupid_ = 0;
  dockobjid_ = 0;
  dockxpos_ = 0;
  dockypos_ = 0;
  decorid_ = 0;
  gridstyle_ = 0;
  hasmark_ = false;
  isvisible_ = false;
  islocked_ = false;
  startx_ = 0;
  starty_ = 0;
  endx_ = 0;
  endy_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  groundlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_WallInfo::~GC_WallInfo() {
  SharedDtor();
}

void GC_WallInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_WallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_WallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_WallInfo_descriptor_;
}

const GC_WallInfo& GC_WallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_WallInfo* GC_WallInfo::default_instance_ = NULL;

GC_WallInfo* GC_WallInfo::New() const {
  return new GC_WallInfo;
}

void GC_WallInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    designwallid_ = 0;
    designplanid_ = 0;
    ordercate_ = 0;
    orderid_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    walltype_ = 0;
    wallindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    groupid_ = 0;
    dockobjid_ = 0;
    dockxpos_ = 0;
    dockypos_ = 0;
    decorid_ = 0;
    gridstyle_ = 0;
    hasmark_ = false;
    isvisible_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    islocked_ = false;
    startx_ = 0;
    starty_ = 0;
    endx_ = 0;
    endy_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    groundlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_WallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DesignWallID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designwallid_)));
          set_has_designwallid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DesignPlanID;
        break;
      }

      // required int32 DesignPlanID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designplanid_)));
          set_has_designplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderCate;
        break;
      }

      // required int32 OrderCate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderCate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercate_)));
          set_has_ordercate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_WallType;
        break;
      }

      // required int32 WallType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WallType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &walltype_)));
          set_has_walltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_WallIndex;
        break;
      }

      // required int32 WallIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WallIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wallindex_)));
          set_has_wallindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_DockObjID;
        break;
      }

      // required int32 DockObjID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DockObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dockobjid_)));
          set_has_dockobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_DockXPos;
        break;
      }

      // required double DockXPos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockXPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockxpos_)));
          set_has_dockxpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_DockYPos;
        break;
      }

      // required double DockYPos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DockYPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dockypos_)));
          set_has_dockypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_DecorID;
        break;
      }

      // required int32 DecorID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorid_)));
          set_has_decorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_GridStyle;
        break;
      }

      // required int32 GridStyle = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GridStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridstyle_)));
          set_has_gridstyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_HasMark;
        break;
      }

      // required bool HasMark = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmark_)));
          set_has_hasmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_IsLocked;
        break;
      }

      // required bool IsLocked = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_StartX;
        break;
      }

      // required double StartX = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StartX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startx_)));
          set_has_startx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_StartY;
        break;
      }

      // required double StartY = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StartY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &starty_)));
          set_has_starty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_EndX;
        break;
      }

      // required double EndX = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EndX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endx_)));
          set_has_endx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_EndY;
        break;
      }

      // required double EndY = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EndY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endy_)));
          set_has_endy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_XLen;
        break;
      }

      // required double XLen = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_YLen;
        break;
      }

      // required double YLen = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_GroundLen;
        break;
      }

      // required double GroundLen = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GroundLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &groundlen_)));
          set_has_groundlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_WallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DesignWallID = 1;
  if (has_designwallid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->designwallid(), output);
  }

  // required int32 DesignPlanID = 2;
  if (has_designplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->designplanid(), output);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordercate(), output);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->orderid(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  // required int64 VerCode = 6;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->vercode(), output);
  }

  // required int32 WallType = 7;
  if (has_walltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->walltype(), output);
  }

  // required int32 WallIndex = 8;
  if (has_wallindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->wallindex(), output);
  }

  // required int32 GroupID = 9;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->groupid(), output);
  }

  // required int32 DockObjID = 10;
  if (has_dockobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dockobjid(), output);
  }

  // required double DockXPos = 11;
  if (has_dockxpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->dockxpos(), output);
  }

  // required double DockYPos = 12;
  if (has_dockypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->dockypos(), output);
  }

  // required int32 DecorID = 13;
  if (has_decorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->decorid(), output);
  }

  // required int32 GridStyle = 14;
  if (has_gridstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gridstyle(), output);
  }

  // required bool HasMark = 15;
  if (has_hasmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->hasmark(), output);
  }

  // required bool IsVisible = 16;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isvisible(), output);
  }

  // required bool IsLocked = 17;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->islocked(), output);
  }

  // required double StartX = 18;
  if (has_startx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->startx(), output);
  }

  // required double StartY = 19;
  if (has_starty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->starty(), output);
  }

  // required double EndX = 20;
  if (has_endx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->endx(), output);
  }

  // required double EndY = 21;
  if (has_endy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->endy(), output);
  }

  // required double XLen = 22;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->xlen(), output);
  }

  // required double YLen = 23;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->ylen(), output);
  }

  // required double ZLen = 24;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->zlen(), output);
  }

  // required double GroundLen = 25;
  if (has_groundlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->groundlen(), output);
  }

  // required int32 CreatorID = 26;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->creatorid(), output);
  }

  // required int32 UpdaterID = 27;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->updaterid(), output);
  }

  // required int64 CreateTime = 28;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->createtime(), output);
  }

  // required int64 UpdateTime = 29;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_WallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DesignWallID = 1;
  if (has_designwallid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->designwallid(), target);
  }

  // required int32 DesignPlanID = 2;
  if (has_designplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->designplanid(), target);
  }

  // required int32 OrderCate = 3;
  if (has_ordercate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordercate(), target);
  }

  // required int64 OrderID = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->orderid(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  // required int64 VerCode = 6;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->vercode(), target);
  }

  // required int32 WallType = 7;
  if (has_walltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->walltype(), target);
  }

  // required int32 WallIndex = 8;
  if (has_wallindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->wallindex(), target);
  }

  // required int32 GroupID = 9;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->groupid(), target);
  }

  // required int32 DockObjID = 10;
  if (has_dockobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dockobjid(), target);
  }

  // required double DockXPos = 11;
  if (has_dockxpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->dockxpos(), target);
  }

  // required double DockYPos = 12;
  if (has_dockypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->dockypos(), target);
  }

  // required int32 DecorID = 13;
  if (has_decorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->decorid(), target);
  }

  // required int32 GridStyle = 14;
  if (has_gridstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gridstyle(), target);
  }

  // required bool HasMark = 15;
  if (has_hasmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->hasmark(), target);
  }

  // required bool IsVisible = 16;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isvisible(), target);
  }

  // required bool IsLocked = 17;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->islocked(), target);
  }

  // required double StartX = 18;
  if (has_startx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->startx(), target);
  }

  // required double StartY = 19;
  if (has_starty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->starty(), target);
  }

  // required double EndX = 20;
  if (has_endx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->endx(), target);
  }

  // required double EndY = 21;
  if (has_endy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->endy(), target);
  }

  // required double XLen = 22;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->xlen(), target);
  }

  // required double YLen = 23;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->ylen(), target);
  }

  // required double ZLen = 24;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->zlen(), target);
  }

  // required double GroundLen = 25;
  if (has_groundlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->groundlen(), target);
  }

  // required int32 CreatorID = 26;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->creatorid(), target);
  }

  // required int32 UpdaterID = 27;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->updaterid(), target);
  }

  // required int64 CreateTime = 28;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->createtime(), target);
  }

  // required int64 UpdateTime = 29;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_WallInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DesignWallID = 1;
    if (has_designwallid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designwallid());
    }

    // required int32 DesignPlanID = 2;
    if (has_designplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designplanid());
    }

    // required int32 OrderCate = 3;
    if (has_ordercate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercate());
    }

    // required int64 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 6;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 WallType = 7;
    if (has_walltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->walltype());
    }

    // required int32 WallIndex = 8;
    if (has_wallindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wallindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 GroupID = 9;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required int32 DockObjID = 10;
    if (has_dockobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dockobjid());
    }

    // required double DockXPos = 11;
    if (has_dockxpos()) {
      total_size += 1 + 8;
    }

    // required double DockYPos = 12;
    if (has_dockypos()) {
      total_size += 1 + 8;
    }

    // required int32 DecorID = 13;
    if (has_decorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorid());
    }

    // required int32 GridStyle = 14;
    if (has_gridstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridstyle());
    }

    // required bool HasMark = 15;
    if (has_hasmark()) {
      total_size += 1 + 1;
    }

    // required bool IsVisible = 16;
    if (has_isvisible()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bool IsLocked = 17;
    if (has_islocked()) {
      total_size += 2 + 1;
    }

    // required double StartX = 18;
    if (has_startx()) {
      total_size += 2 + 8;
    }

    // required double StartY = 19;
    if (has_starty()) {
      total_size += 2 + 8;
    }

    // required double EndX = 20;
    if (has_endx()) {
      total_size += 2 + 8;
    }

    // required double EndY = 21;
    if (has_endy()) {
      total_size += 2 + 8;
    }

    // required double XLen = 22;
    if (has_xlen()) {
      total_size += 2 + 8;
    }

    // required double YLen = 23;
    if (has_ylen()) {
      total_size += 2 + 8;
    }

    // required double ZLen = 24;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double GroundLen = 25;
    if (has_groundlen()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 26;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 27;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 28;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 29;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_WallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_WallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_WallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_WallInfo::MergeFrom(const GC_WallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_designwallid()) {
      set_designwallid(from.designwallid());
    }
    if (from.has_designplanid()) {
      set_designplanid(from.designplanid());
    }
    if (from.has_ordercate()) {
      set_ordercate(from.ordercate());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_walltype()) {
      set_walltype(from.walltype());
    }
    if (from.has_wallindex()) {
      set_wallindex(from.wallindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_dockobjid()) {
      set_dockobjid(from.dockobjid());
    }
    if (from.has_dockxpos()) {
      set_dockxpos(from.dockxpos());
    }
    if (from.has_dockypos()) {
      set_dockypos(from.dockypos());
    }
    if (from.has_decorid()) {
      set_decorid(from.decorid());
    }
    if (from.has_gridstyle()) {
      set_gridstyle(from.gridstyle());
    }
    if (from.has_hasmark()) {
      set_hasmark(from.hasmark());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_startx()) {
      set_startx(from.startx());
    }
    if (from.has_starty()) {
      set_starty(from.starty());
    }
    if (from.has_endx()) {
      set_endx(from.endx());
    }
    if (from.has_endy()) {
      set_endy(from.endy());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_groundlen()) {
      set_groundlen(from.groundlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_WallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_WallInfo::CopyFrom(const GC_WallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_WallInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x1fffffff) != 0x1fffffff) return false;

  return true;
}

void GC_WallInfo::Swap(GC_WallInfo* other) {
  if (other != this) {
    std::swap(designwallid_, other->designwallid_);
    std::swap(designplanid_, other->designplanid_);
    std::swap(ordercate_, other->ordercate_);
    std::swap(orderid_, other->orderid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(walltype_, other->walltype_);
    std::swap(wallindex_, other->wallindex_);
    std::swap(groupid_, other->groupid_);
    std::swap(dockobjid_, other->dockobjid_);
    std::swap(dockxpos_, other->dockxpos_);
    std::swap(dockypos_, other->dockypos_);
    std::swap(decorid_, other->decorid_);
    std::swap(gridstyle_, other->gridstyle_);
    std::swap(hasmark_, other->hasmark_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(startx_, other->startx_);
    std::swap(starty_, other->starty_);
    std::swap(endx_, other->endx_);
    std::swap(endy_, other->endy_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(groundlen_, other->groundlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_WallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_WallInfo_descriptor_;
  metadata.reflection = GC_WallInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_Table::kGCCabBoardGapInfoFieldNumber;
const int GC_Table::kGCCabBoardInfoFieldNumber;
const int GC_Table::kGCCabBoardSealInfoFieldNumber;
const int GC_Table::kGCCabDoorBoardGapInfoFieldNumber;
const int GC_Table::kGCCabDoorBoardInfoFieldNumber;
const int GC_Table::kGCCabDoorBoardSealInfoFieldNumber;
const int GC_Table::kGCCabDoorHWFInfoFieldNumber;
const int GC_Table::kGCCabDoorHandleInfoFieldNumber;
const int GC_Table::kGCCabDoorInfoFieldNumber;
const int GC_Table::kGCCabDoorRegionInfoFieldNumber;
const int GC_Table::kGCCabDoorSlideInfoFieldNumber;
const int GC_Table::kGCCabDoorSystemInfoFieldNumber;
const int GC_Table::kGCCabFNFHWFInfoFieldNumber;
const int GC_Table::kGCCabFNFHoleInfoFieldNumber;
const int GC_Table::kGCCabFNFInfoFieldNumber;
const int GC_Table::kGCCabFNFPartInfoFieldNumber;
const int GC_Table::kGCCabFNFPartSealInfoFieldNumber;
const int GC_Table::kGCCabInfoFieldNumber;
const int GC_Table::kGCDecorBoardInfoFieldNumber;
const int GC_Table::kGCDecorBoardUnitInfoFieldNumber;
const int GC_Table::kGCDecorBoardUnitSealInfoFieldNumber;
const int GC_Table::kGCDecorInfoFieldNumber;
const int GC_Table::kGCDecorLineInfoFieldNumber;
const int GC_Table::kGCDesignPlanInfoFieldNumber;
const int GC_Table::kGCFittingInfoFieldNumber;
const int GC_Table::kGCHWFInfoFieldNumber;
const int GC_Table::kGCMarkInfoFieldNumber;
const int GC_Table::kGCMatrixInfoFieldNumber;
const int GC_Table::kGCOrderAddedInfoFieldNumber;
const int GC_Table::kGCOrderDataInfoFieldNumber;
const int GC_Table::kGCPackInfoFieldNumber;
const int GC_Table::kGCPointInfoFieldNumber;
const int GC_Table::kGCPrintElementInfoFieldNumber;
const int GC_Table::kGCPrintGroupInfoFieldNumber;
const int GC_Table::kGCPrintInfoFieldNumber;
const int GC_Table::kGCPrintTableInfoFieldNumber;
const int GC_Table::kGCPrintTableRowColInfoFieldNumber;
const int GC_Table::kGCPrintTableRowInfoFieldNumber;
const int GC_Table::kGCProductInfoFieldNumber;
const int GC_Table::kGCRemarkInfoFieldNumber;
const int GC_Table::kGCShapeInfoFieldNumber;
const int GC_Table::kGCSkinInfoFieldNumber;
const int GC_Table::kGCTableInfoFieldNumber;
const int GC_Table::kGCTablePartInfoFieldNumber;
const int GC_Table::kGCTableSideInfoFieldNumber;
const int GC_Table::kGCWallDecorInfoFieldNumber;
const int GC_Table::kGCWallInfoFieldNumber;
#endif  // !_MSC_VER

GC_Table::GC_Table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_Table::InitAsDefaultInstance() {
}

GC_Table::GC_Table(const GC_Table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_Table::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_Table::~GC_Table() {
  SharedDtor();
}

void GC_Table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_Table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_Table_descriptor_;
}

const GC_Table& GC_Table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGC_2eproto();
  return *default_instance_;
}

GC_Table* GC_Table::default_instance_ = NULL;

GC_Table* GC_Table::New() const {
  return new GC_Table;
}

void GC_Table::Clear() {
  gc_cabboardgapinfo_.Clear();
  gc_cabboardinfo_.Clear();
  gc_cabboardsealinfo_.Clear();
  gc_cabdoorboardgapinfo_.Clear();
  gc_cabdoorboardinfo_.Clear();
  gc_cabdoorboardsealinfo_.Clear();
  gc_cabdoorhwfinfo_.Clear();
  gc_cabdoorhandleinfo_.Clear();
  gc_cabdoorinfo_.Clear();
  gc_cabdoorregioninfo_.Clear();
  gc_cabdoorslideinfo_.Clear();
  gc_cabdoorsysteminfo_.Clear();
  gc_cabfnfhwfinfo_.Clear();
  gc_cabfnfholeinfo_.Clear();
  gc_cabfnfinfo_.Clear();
  gc_cabfnfpartinfo_.Clear();
  gc_cabfnfpartsealinfo_.Clear();
  gc_cabinfo_.Clear();
  gc_decorboardinfo_.Clear();
  gc_decorboardunitinfo_.Clear();
  gc_decorboardunitsealinfo_.Clear();
  gc_decorinfo_.Clear();
  gc_decorlineinfo_.Clear();
  gc_designplaninfo_.Clear();
  gc_fittinginfo_.Clear();
  gc_hwfinfo_.Clear();
  gc_markinfo_.Clear();
  gc_matrixinfo_.Clear();
  gc_orderaddedinfo_.Clear();
  gc_orderdatainfo_.Clear();
  gc_packinfo_.Clear();
  gc_pointinfo_.Clear();
  gc_printelementinfo_.Clear();
  gc_printgroupinfo_.Clear();
  gc_printinfo_.Clear();
  gc_printtableinfo_.Clear();
  gc_printtablerowcolinfo_.Clear();
  gc_printtablerowinfo_.Clear();
  gc_productinfo_.Clear();
  gc_remarkinfo_.Clear();
  gc_shapeinfo_.Clear();
  gc_skininfo_.Clear();
  gc_tableinfo_.Clear();
  gc_tablepartinfo_.Clear();
  gc_tablesideinfo_.Clear();
  gc_walldecorinfo_.Clear();
  gc_wallinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transMsg.GC_CabBoardGapInfo GC_CabBoardGapInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabBoardGapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabboardgapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GC_CabBoardGapInfo;
        if (input->ExpectTag(18)) goto parse_GC_CabBoardInfo;
        break;
      }

      // repeated .transMsg.GC_CabBoardInfo GC_CabBoardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabBoardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabboardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GC_CabBoardInfo;
        if (input->ExpectTag(26)) goto parse_GC_CabBoardSealInfo;
        break;
      }

      // repeated .transMsg.GC_CabBoardSealInfo GC_CabBoardSealInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabBoardSealInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabboardsealinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GC_CabBoardSealInfo;
        if (input->ExpectTag(34)) goto parse_GC_CabDoorBoardGapInfo;
        break;
      }

      // repeated .transMsg.GC_CabDoorBoardGapInfo GC_CabDoorBoardGapInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabDoorBoardGapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabdoorboardgapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_GC_CabDoorBoardGapInfo;
        if (input->ExpectTag(42)) goto parse_GC_CabDoorBoardInfo;
        break;
      }

      // repeated .transMsg.GC_CabDoorBoardInfo GC_CabDoorBoardInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabDoorBoardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabdoorboardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_GC_CabDoorBoardInfo;
        if (input->ExpectTag(50)) goto parse_GC_CabDoorBoardSealInfo;
        break;
      }

      // repeated .transMsg.GC_CabDoorBoardSealInfo GC_CabDoorBoardSealInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabDoorBoardSealInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabdoorboardsealinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_GC_CabDoorBoardSealInfo;
        if (input->ExpectTag(58)) goto parse_GC_CabDoorHWFInfo;
        break;
      }

      // repeated .transMsg.GC_CabDoorHWFInfo GC_CabDoorHWFInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabDoorHWFInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabdoorhwfinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_GC_CabDoorHWFInfo;
        if (input->ExpectTag(66)) goto parse_GC_CabDoorHandleInfo;
        break;
      }

      // repeated .transMsg.GC_CabDoorHandleInfo GC_CabDoorHandleInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabDoorHandleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabdoorhandleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_GC_CabDoorHandleInfo;
        if (input->ExpectTag(74)) goto parse_GC_CabDoorInfo;
        break;
      }

      // repeated .transMsg.GC_CabDoorInfo GC_CabDoorInfo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabDoorInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabdoorinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_GC_CabDoorInfo;
        if (input->ExpectTag(82)) goto parse_GC_CabDoorRegionInfo;
        break;
      }

      // repeated .transMsg.GC_CabDoorRegionInfo GC_CabDoorRegionInfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabDoorRegionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabdoorregioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_GC_CabDoorRegionInfo;
        if (input->ExpectTag(90)) goto parse_GC_CabDoorSlideInfo;
        break;
      }

      // repeated .transMsg.GC_CabDoorSlideInfo GC_CabDoorSlideInfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabDoorSlideInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabdoorslideinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_GC_CabDoorSlideInfo;
        if (input->ExpectTag(98)) goto parse_GC_CabDoorSystemInfo;
        break;
      }

      // repeated .transMsg.GC_CabDoorSystemInfo GC_CabDoorSystemInfo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabDoorSystemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabdoorsysteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_GC_CabDoorSystemInfo;
        if (input->ExpectTag(106)) goto parse_GC_CabFNFHWFInfo;
        break;
      }

      // repeated .transMsg.GC_CabFNFHWFInfo GC_CabFNFHWFInfo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabFNFHWFInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabfnfhwfinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_GC_CabFNFHWFInfo;
        if (input->ExpectTag(114)) goto parse_GC_CabFNFHoleInfo;
        break;
      }

      // repeated .transMsg.GC_CabFNFHoleInfo GC_CabFNFHoleInfo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabFNFHoleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabfnfholeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_GC_CabFNFHoleInfo;
        if (input->ExpectTag(122)) goto parse_GC_CabFNFInfo;
        break;
      }

      // repeated .transMsg.GC_CabFNFInfo GC_CabFNFInfo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabFNFInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabfnfinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_GC_CabFNFInfo;
        if (input->ExpectTag(130)) goto parse_GC_CabFNFPartInfo;
        break;
      }

      // repeated .transMsg.GC_CabFNFPartInfo GC_CabFNFPartInfo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabFNFPartInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabfnfpartinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_GC_CabFNFPartInfo;
        if (input->ExpectTag(138)) goto parse_GC_CabFNFPartSealInfo;
        break;
      }

      // repeated .transMsg.GC_CabFNFPartSealInfo GC_CabFNFPartSealInfo = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabFNFPartSealInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabfnfpartsealinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_GC_CabFNFPartSealInfo;
        if (input->ExpectTag(146)) goto parse_GC_CabInfo;
        break;
      }

      // repeated .transMsg.GC_CabInfo GC_CabInfo = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_CabInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_cabinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_GC_CabInfo;
        if (input->ExpectTag(154)) goto parse_GC_DecorBoardInfo;
        break;
      }

      // repeated .transMsg.GC_DecorBoardInfo GC_DecorBoardInfo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_DecorBoardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_decorboardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_GC_DecorBoardInfo;
        if (input->ExpectTag(162)) goto parse_GC_DecorBoardUnitInfo;
        break;
      }

      // repeated .transMsg.GC_DecorBoardUnitInfo GC_DecorBoardUnitInfo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_DecorBoardUnitInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_decorboardunitinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_GC_DecorBoardUnitInfo;
        if (input->ExpectTag(170)) goto parse_GC_DecorBoardUnitSealInfo;
        break;
      }

      // repeated .transMsg.GC_DecorBoardUnitSealInfo GC_DecorBoardUnitSealInfo = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_DecorBoardUnitSealInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_decorboardunitsealinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_GC_DecorBoardUnitSealInfo;
        if (input->ExpectTag(178)) goto parse_GC_DecorInfo;
        break;
      }

      // repeated .transMsg.GC_DecorInfo GC_DecorInfo = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_DecorInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_decorinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_GC_DecorInfo;
        if (input->ExpectTag(186)) goto parse_GC_DecorLineInfo;
        break;
      }

      // repeated .transMsg.GC_DecorLineInfo GC_DecorLineInfo = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_DecorLineInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_decorlineinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_GC_DecorLineInfo;
        if (input->ExpectTag(194)) goto parse_GC_DesignPlanInfo;
        break;
      }

      // repeated .transMsg.GC_DesignPlanInfo GC_DesignPlanInfo = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_DesignPlanInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_designplaninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_GC_DesignPlanInfo;
        if (input->ExpectTag(202)) goto parse_GC_FittingInfo;
        break;
      }

      // repeated .transMsg.GC_FittingInfo GC_FittingInfo = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_FittingInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_fittinginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_GC_FittingInfo;
        if (input->ExpectTag(210)) goto parse_GC_HWFInfo;
        break;
      }

      // repeated .transMsg.GC_HWFInfo GC_HWFInfo = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_HWFInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_hwfinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_GC_HWFInfo;
        if (input->ExpectTag(218)) goto parse_GC_MarkInfo;
        break;
      }

      // repeated .transMsg.GC_MarkInfo GC_MarkInfo = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_MarkInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_markinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_GC_MarkInfo;
        if (input->ExpectTag(226)) goto parse_GC_MatrixInfo;
        break;
      }

      // repeated .transMsg.GC_MatrixInfo GC_MatrixInfo = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_MatrixInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_matrixinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_GC_MatrixInfo;
        if (input->ExpectTag(234)) goto parse_GC_OrderAddedInfo;
        break;
      }

      // repeated .transMsg.GC_OrderAddedInfo GC_OrderAddedInfo = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_OrderAddedInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_orderaddedinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_GC_OrderAddedInfo;
        if (input->ExpectTag(242)) goto parse_GC_OrderDataInfo;
        break;
      }

      // repeated .transMsg.GC_OrderDataInfo GC_OrderDataInfo = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_OrderDataInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_orderdatainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_GC_OrderDataInfo;
        if (input->ExpectTag(250)) goto parse_GC_PackInfo;
        break;
      }

      // repeated .transMsg.GC_PackInfo GC_PackInfo = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_PackInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_packinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_GC_PackInfo;
        if (input->ExpectTag(258)) goto parse_GC_PointInfo;
        break;
      }

      // repeated .transMsg.GC_PointInfo GC_PointInfo = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_PointInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_pointinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_GC_PointInfo;
        if (input->ExpectTag(266)) goto parse_GC_PrintElementInfo;
        break;
      }

      // repeated .transMsg.GC_PrintElementInfo GC_PrintElementInfo = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_PrintElementInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_printelementinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_GC_PrintElementInfo;
        if (input->ExpectTag(274)) goto parse_GC_PrintGroupInfo;
        break;
      }

      // repeated .transMsg.GC_PrintGroupInfo GC_PrintGroupInfo = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_PrintGroupInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_printgroupinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_GC_PrintGroupInfo;
        if (input->ExpectTag(282)) goto parse_GC_PrintInfo;
        break;
      }

      // repeated .transMsg.GC_PrintInfo GC_PrintInfo = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_PrintInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_printinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_GC_PrintInfo;
        if (input->ExpectTag(290)) goto parse_GC_PrintTableInfo;
        break;
      }

      // repeated .transMsg.GC_PrintTableInfo GC_PrintTableInfo = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_PrintTableInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_printtableinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_GC_PrintTableInfo;
        if (input->ExpectTag(298)) goto parse_GC_PrintTableRowColInfo;
        break;
      }

      // repeated .transMsg.GC_PrintTableRowColInfo GC_PrintTableRowColInfo = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_PrintTableRowColInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_printtablerowcolinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_GC_PrintTableRowColInfo;
        if (input->ExpectTag(306)) goto parse_GC_PrintTableRowInfo;
        break;
      }

      // repeated .transMsg.GC_PrintTableRowInfo GC_PrintTableRowInfo = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_PrintTableRowInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_printtablerowinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_GC_PrintTableRowInfo;
        if (input->ExpectTag(314)) goto parse_GC_ProductInfo;
        break;
      }

      // repeated .transMsg.GC_ProductInfo GC_ProductInfo = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_ProductInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_productinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_GC_ProductInfo;
        if (input->ExpectTag(322)) goto parse_GC_RemarkInfo;
        break;
      }

      // repeated .transMsg.GC_RemarkInfo GC_RemarkInfo = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_RemarkInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_remarkinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_GC_RemarkInfo;
        if (input->ExpectTag(330)) goto parse_GC_ShapeInfo;
        break;
      }

      // repeated .transMsg.GC_ShapeInfo GC_ShapeInfo = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_ShapeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_shapeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_GC_ShapeInfo;
        if (input->ExpectTag(338)) goto parse_GC_SkinInfo;
        break;
      }

      // repeated .transMsg.GC_SkinInfo GC_SkinInfo = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_SkinInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_skininfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_GC_SkinInfo;
        if (input->ExpectTag(346)) goto parse_GC_TableInfo;
        break;
      }

      // repeated .transMsg.GC_TableInfo GC_TableInfo = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_TableInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_tableinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_GC_TableInfo;
        if (input->ExpectTag(354)) goto parse_GC_TablePartInfo;
        break;
      }

      // repeated .transMsg.GC_TablePartInfo GC_TablePartInfo = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_TablePartInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_tablepartinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_GC_TablePartInfo;
        if (input->ExpectTag(362)) goto parse_GC_TableSideInfo;
        break;
      }

      // repeated .transMsg.GC_TableSideInfo GC_TableSideInfo = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_TableSideInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_tablesideinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_GC_TableSideInfo;
        if (input->ExpectTag(370)) goto parse_GC_WallDecorInfo;
        break;
      }

      // repeated .transMsg.GC_WallDecorInfo GC_WallDecorInfo = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_WallDecorInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_walldecorinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_GC_WallDecorInfo;
        if (input->ExpectTag(378)) goto parse_GC_WallInfo;
        break;
      }

      // repeated .transMsg.GC_WallInfo GC_WallInfo = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GC_WallInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gc_wallinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_GC_WallInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .transMsg.GC_CabBoardGapInfo GC_CabBoardGapInfo = 1;
  for (int i = 0; i < this->gc_cabboardgapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gc_cabboardgapinfo(i), output);
  }

  // repeated .transMsg.GC_CabBoardInfo GC_CabBoardInfo = 2;
  for (int i = 0; i < this->gc_cabboardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gc_cabboardinfo(i), output);
  }

  // repeated .transMsg.GC_CabBoardSealInfo GC_CabBoardSealInfo = 3;
  for (int i = 0; i < this->gc_cabboardsealinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gc_cabboardsealinfo(i), output);
  }

  // repeated .transMsg.GC_CabDoorBoardGapInfo GC_CabDoorBoardGapInfo = 4;
  for (int i = 0; i < this->gc_cabdoorboardgapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gc_cabdoorboardgapinfo(i), output);
  }

  // repeated .transMsg.GC_CabDoorBoardInfo GC_CabDoorBoardInfo = 5;
  for (int i = 0; i < this->gc_cabdoorboardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gc_cabdoorboardinfo(i), output);
  }

  // repeated .transMsg.GC_CabDoorBoardSealInfo GC_CabDoorBoardSealInfo = 6;
  for (int i = 0; i < this->gc_cabdoorboardsealinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gc_cabdoorboardsealinfo(i), output);
  }

  // repeated .transMsg.GC_CabDoorHWFInfo GC_CabDoorHWFInfo = 7;
  for (int i = 0; i < this->gc_cabdoorhwfinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gc_cabdoorhwfinfo(i), output);
  }

  // repeated .transMsg.GC_CabDoorHandleInfo GC_CabDoorHandleInfo = 8;
  for (int i = 0; i < this->gc_cabdoorhandleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->gc_cabdoorhandleinfo(i), output);
  }

  // repeated .transMsg.GC_CabDoorInfo GC_CabDoorInfo = 9;
  for (int i = 0; i < this->gc_cabdoorinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->gc_cabdoorinfo(i), output);
  }

  // repeated .transMsg.GC_CabDoorRegionInfo GC_CabDoorRegionInfo = 10;
  for (int i = 0; i < this->gc_cabdoorregioninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->gc_cabdoorregioninfo(i), output);
  }

  // repeated .transMsg.GC_CabDoorSlideInfo GC_CabDoorSlideInfo = 11;
  for (int i = 0; i < this->gc_cabdoorslideinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->gc_cabdoorslideinfo(i), output);
  }

  // repeated .transMsg.GC_CabDoorSystemInfo GC_CabDoorSystemInfo = 12;
  for (int i = 0; i < this->gc_cabdoorsysteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->gc_cabdoorsysteminfo(i), output);
  }

  // repeated .transMsg.GC_CabFNFHWFInfo GC_CabFNFHWFInfo = 13;
  for (int i = 0; i < this->gc_cabfnfhwfinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->gc_cabfnfhwfinfo(i), output);
  }

  // repeated .transMsg.GC_CabFNFHoleInfo GC_CabFNFHoleInfo = 14;
  for (int i = 0; i < this->gc_cabfnfholeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->gc_cabfnfholeinfo(i), output);
  }

  // repeated .transMsg.GC_CabFNFInfo GC_CabFNFInfo = 15;
  for (int i = 0; i < this->gc_cabfnfinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->gc_cabfnfinfo(i), output);
  }

  // repeated .transMsg.GC_CabFNFPartInfo GC_CabFNFPartInfo = 16;
  for (int i = 0; i < this->gc_cabfnfpartinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->gc_cabfnfpartinfo(i), output);
  }

  // repeated .transMsg.GC_CabFNFPartSealInfo GC_CabFNFPartSealInfo = 17;
  for (int i = 0; i < this->gc_cabfnfpartsealinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->gc_cabfnfpartsealinfo(i), output);
  }

  // repeated .transMsg.GC_CabInfo GC_CabInfo = 18;
  for (int i = 0; i < this->gc_cabinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->gc_cabinfo(i), output);
  }

  // repeated .transMsg.GC_DecorBoardInfo GC_DecorBoardInfo = 19;
  for (int i = 0; i < this->gc_decorboardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->gc_decorboardinfo(i), output);
  }

  // repeated .transMsg.GC_DecorBoardUnitInfo GC_DecorBoardUnitInfo = 20;
  for (int i = 0; i < this->gc_decorboardunitinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->gc_decorboardunitinfo(i), output);
  }

  // repeated .transMsg.GC_DecorBoardUnitSealInfo GC_DecorBoardUnitSealInfo = 21;
  for (int i = 0; i < this->gc_decorboardunitsealinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->gc_decorboardunitsealinfo(i), output);
  }

  // repeated .transMsg.GC_DecorInfo GC_DecorInfo = 22;
  for (int i = 0; i < this->gc_decorinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->gc_decorinfo(i), output);
  }

  // repeated .transMsg.GC_DecorLineInfo GC_DecorLineInfo = 23;
  for (int i = 0; i < this->gc_decorlineinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->gc_decorlineinfo(i), output);
  }

  // repeated .transMsg.GC_DesignPlanInfo GC_DesignPlanInfo = 24;
  for (int i = 0; i < this->gc_designplaninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->gc_designplaninfo(i), output);
  }

  // repeated .transMsg.GC_FittingInfo GC_FittingInfo = 25;
  for (int i = 0; i < this->gc_fittinginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->gc_fittinginfo(i), output);
  }

  // repeated .transMsg.GC_HWFInfo GC_HWFInfo = 26;
  for (int i = 0; i < this->gc_hwfinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->gc_hwfinfo(i), output);
  }

  // repeated .transMsg.GC_MarkInfo GC_MarkInfo = 27;
  for (int i = 0; i < this->gc_markinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->gc_markinfo(i), output);
  }

  // repeated .transMsg.GC_MatrixInfo GC_MatrixInfo = 28;
  for (int i = 0; i < this->gc_matrixinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->gc_matrixinfo(i), output);
  }

  // repeated .transMsg.GC_OrderAddedInfo GC_OrderAddedInfo = 29;
  for (int i = 0; i < this->gc_orderaddedinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->gc_orderaddedinfo(i), output);
  }

  // repeated .transMsg.GC_OrderDataInfo GC_OrderDataInfo = 30;
  for (int i = 0; i < this->gc_orderdatainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->gc_orderdatainfo(i), output);
  }

  // repeated .transMsg.GC_PackInfo GC_PackInfo = 31;
  for (int i = 0; i < this->gc_packinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->gc_packinfo(i), output);
  }

  // repeated .transMsg.GC_PointInfo GC_PointInfo = 32;
  for (int i = 0; i < this->gc_pointinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->gc_pointinfo(i), output);
  }

  // repeated .transMsg.GC_PrintElementInfo GC_PrintElementInfo = 33;
  for (int i = 0; i < this->gc_printelementinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->gc_printelementinfo(i), output);
  }

  // repeated .transMsg.GC_PrintGroupInfo GC_PrintGroupInfo = 34;
  for (int i = 0; i < this->gc_printgroupinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->gc_printgroupinfo(i), output);
  }

  // repeated .transMsg.GC_PrintInfo GC_PrintInfo = 35;
  for (int i = 0; i < this->gc_printinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->gc_printinfo(i), output);
  }

  // repeated .transMsg.GC_PrintTableInfo GC_PrintTableInfo = 36;
  for (int i = 0; i < this->gc_printtableinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->gc_printtableinfo(i), output);
  }

  // repeated .transMsg.GC_PrintTableRowColInfo GC_PrintTableRowColInfo = 37;
  for (int i = 0; i < this->gc_printtablerowcolinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->gc_printtablerowcolinfo(i), output);
  }

  // repeated .transMsg.GC_PrintTableRowInfo GC_PrintTableRowInfo = 38;
  for (int i = 0; i < this->gc_printtablerowinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->gc_printtablerowinfo(i), output);
  }

  // repeated .transMsg.GC_ProductInfo GC_ProductInfo = 39;
  for (int i = 0; i < this->gc_productinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->gc_productinfo(i), output);
  }

  // repeated .transMsg.GC_RemarkInfo GC_RemarkInfo = 40;
  for (int i = 0; i < this->gc_remarkinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->gc_remarkinfo(i), output);
  }

  // repeated .transMsg.GC_ShapeInfo GC_ShapeInfo = 41;
  for (int i = 0; i < this->gc_shapeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->gc_shapeinfo(i), output);
  }

  // repeated .transMsg.GC_SkinInfo GC_SkinInfo = 42;
  for (int i = 0; i < this->gc_skininfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->gc_skininfo(i), output);
  }

  // repeated .transMsg.GC_TableInfo GC_TableInfo = 43;
  for (int i = 0; i < this->gc_tableinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->gc_tableinfo(i), output);
  }

  // repeated .transMsg.GC_TablePartInfo GC_TablePartInfo = 44;
  for (int i = 0; i < this->gc_tablepartinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->gc_tablepartinfo(i), output);
  }

  // repeated .transMsg.GC_TableSideInfo GC_TableSideInfo = 45;
  for (int i = 0; i < this->gc_tablesideinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->gc_tablesideinfo(i), output);
  }

  // repeated .transMsg.GC_WallDecorInfo GC_WallDecorInfo = 46;
  for (int i = 0; i < this->gc_walldecorinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->gc_walldecorinfo(i), output);
  }

  // repeated .transMsg.GC_WallInfo GC_WallInfo = 47;
  for (int i = 0; i < this->gc_wallinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->gc_wallinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_Table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .transMsg.GC_CabBoardGapInfo GC_CabBoardGapInfo = 1;
  for (int i = 0; i < this->gc_cabboardgapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gc_cabboardgapinfo(i), target);
  }

  // repeated .transMsg.GC_CabBoardInfo GC_CabBoardInfo = 2;
  for (int i = 0; i < this->gc_cabboardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gc_cabboardinfo(i), target);
  }

  // repeated .transMsg.GC_CabBoardSealInfo GC_CabBoardSealInfo = 3;
  for (int i = 0; i < this->gc_cabboardsealinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gc_cabboardsealinfo(i), target);
  }

  // repeated .transMsg.GC_CabDoorBoardGapInfo GC_CabDoorBoardGapInfo = 4;
  for (int i = 0; i < this->gc_cabdoorboardgapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gc_cabdoorboardgapinfo(i), target);
  }

  // repeated .transMsg.GC_CabDoorBoardInfo GC_CabDoorBoardInfo = 5;
  for (int i = 0; i < this->gc_cabdoorboardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gc_cabdoorboardinfo(i), target);
  }

  // repeated .transMsg.GC_CabDoorBoardSealInfo GC_CabDoorBoardSealInfo = 6;
  for (int i = 0; i < this->gc_cabdoorboardsealinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gc_cabdoorboardsealinfo(i), target);
  }

  // repeated .transMsg.GC_CabDoorHWFInfo GC_CabDoorHWFInfo = 7;
  for (int i = 0; i < this->gc_cabdoorhwfinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gc_cabdoorhwfinfo(i), target);
  }

  // repeated .transMsg.GC_CabDoorHandleInfo GC_CabDoorHandleInfo = 8;
  for (int i = 0; i < this->gc_cabdoorhandleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->gc_cabdoorhandleinfo(i), target);
  }

  // repeated .transMsg.GC_CabDoorInfo GC_CabDoorInfo = 9;
  for (int i = 0; i < this->gc_cabdoorinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->gc_cabdoorinfo(i), target);
  }

  // repeated .transMsg.GC_CabDoorRegionInfo GC_CabDoorRegionInfo = 10;
  for (int i = 0; i < this->gc_cabdoorregioninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->gc_cabdoorregioninfo(i), target);
  }

  // repeated .transMsg.GC_CabDoorSlideInfo GC_CabDoorSlideInfo = 11;
  for (int i = 0; i < this->gc_cabdoorslideinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->gc_cabdoorslideinfo(i), target);
  }

  // repeated .transMsg.GC_CabDoorSystemInfo GC_CabDoorSystemInfo = 12;
  for (int i = 0; i < this->gc_cabdoorsysteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->gc_cabdoorsysteminfo(i), target);
  }

  // repeated .transMsg.GC_CabFNFHWFInfo GC_CabFNFHWFInfo = 13;
  for (int i = 0; i < this->gc_cabfnfhwfinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->gc_cabfnfhwfinfo(i), target);
  }

  // repeated .transMsg.GC_CabFNFHoleInfo GC_CabFNFHoleInfo = 14;
  for (int i = 0; i < this->gc_cabfnfholeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->gc_cabfnfholeinfo(i), target);
  }

  // repeated .transMsg.GC_CabFNFInfo GC_CabFNFInfo = 15;
  for (int i = 0; i < this->gc_cabfnfinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->gc_cabfnfinfo(i), target);
  }

  // repeated .transMsg.GC_CabFNFPartInfo GC_CabFNFPartInfo = 16;
  for (int i = 0; i < this->gc_cabfnfpartinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->gc_cabfnfpartinfo(i), target);
  }

  // repeated .transMsg.GC_CabFNFPartSealInfo GC_CabFNFPartSealInfo = 17;
  for (int i = 0; i < this->gc_cabfnfpartsealinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->gc_cabfnfpartsealinfo(i), target);
  }

  // repeated .transMsg.GC_CabInfo GC_CabInfo = 18;
  for (int i = 0; i < this->gc_cabinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->gc_cabinfo(i), target);
  }

  // repeated .transMsg.GC_DecorBoardInfo GC_DecorBoardInfo = 19;
  for (int i = 0; i < this->gc_decorboardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->gc_decorboardinfo(i), target);
  }

  // repeated .transMsg.GC_DecorBoardUnitInfo GC_DecorBoardUnitInfo = 20;
  for (int i = 0; i < this->gc_decorboardunitinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->gc_decorboardunitinfo(i), target);
  }

  // repeated .transMsg.GC_DecorBoardUnitSealInfo GC_DecorBoardUnitSealInfo = 21;
  for (int i = 0; i < this->gc_decorboardunitsealinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->gc_decorboardunitsealinfo(i), target);
  }

  // repeated .transMsg.GC_DecorInfo GC_DecorInfo = 22;
  for (int i = 0; i < this->gc_decorinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->gc_decorinfo(i), target);
  }

  // repeated .transMsg.GC_DecorLineInfo GC_DecorLineInfo = 23;
  for (int i = 0; i < this->gc_decorlineinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->gc_decorlineinfo(i), target);
  }

  // repeated .transMsg.GC_DesignPlanInfo GC_DesignPlanInfo = 24;
  for (int i = 0; i < this->gc_designplaninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->gc_designplaninfo(i), target);
  }

  // repeated .transMsg.GC_FittingInfo GC_FittingInfo = 25;
  for (int i = 0; i < this->gc_fittinginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->gc_fittinginfo(i), target);
  }

  // repeated .transMsg.GC_HWFInfo GC_HWFInfo = 26;
  for (int i = 0; i < this->gc_hwfinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->gc_hwfinfo(i), target);
  }

  // repeated .transMsg.GC_MarkInfo GC_MarkInfo = 27;
  for (int i = 0; i < this->gc_markinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->gc_markinfo(i), target);
  }

  // repeated .transMsg.GC_MatrixInfo GC_MatrixInfo = 28;
  for (int i = 0; i < this->gc_matrixinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->gc_matrixinfo(i), target);
  }

  // repeated .transMsg.GC_OrderAddedInfo GC_OrderAddedInfo = 29;
  for (int i = 0; i < this->gc_orderaddedinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->gc_orderaddedinfo(i), target);
  }

  // repeated .transMsg.GC_OrderDataInfo GC_OrderDataInfo = 30;
  for (int i = 0; i < this->gc_orderdatainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->gc_orderdatainfo(i), target);
  }

  // repeated .transMsg.GC_PackInfo GC_PackInfo = 31;
  for (int i = 0; i < this->gc_packinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->gc_packinfo(i), target);
  }

  // repeated .transMsg.GC_PointInfo GC_PointInfo = 32;
  for (int i = 0; i < this->gc_pointinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->gc_pointinfo(i), target);
  }

  // repeated .transMsg.GC_PrintElementInfo GC_PrintElementInfo = 33;
  for (int i = 0; i < this->gc_printelementinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->gc_printelementinfo(i), target);
  }

  // repeated .transMsg.GC_PrintGroupInfo GC_PrintGroupInfo = 34;
  for (int i = 0; i < this->gc_printgroupinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->gc_printgroupinfo(i), target);
  }

  // repeated .transMsg.GC_PrintInfo GC_PrintInfo = 35;
  for (int i = 0; i < this->gc_printinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->gc_printinfo(i), target);
  }

  // repeated .transMsg.GC_PrintTableInfo GC_PrintTableInfo = 36;
  for (int i = 0; i < this->gc_printtableinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->gc_printtableinfo(i), target);
  }

  // repeated .transMsg.GC_PrintTableRowColInfo GC_PrintTableRowColInfo = 37;
  for (int i = 0; i < this->gc_printtablerowcolinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->gc_printtablerowcolinfo(i), target);
  }

  // repeated .transMsg.GC_PrintTableRowInfo GC_PrintTableRowInfo = 38;
  for (int i = 0; i < this->gc_printtablerowinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->gc_printtablerowinfo(i), target);
  }

  // repeated .transMsg.GC_ProductInfo GC_ProductInfo = 39;
  for (int i = 0; i < this->gc_productinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->gc_productinfo(i), target);
  }

  // repeated .transMsg.GC_RemarkInfo GC_RemarkInfo = 40;
  for (int i = 0; i < this->gc_remarkinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->gc_remarkinfo(i), target);
  }

  // repeated .transMsg.GC_ShapeInfo GC_ShapeInfo = 41;
  for (int i = 0; i < this->gc_shapeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->gc_shapeinfo(i), target);
  }

  // repeated .transMsg.GC_SkinInfo GC_SkinInfo = 42;
  for (int i = 0; i < this->gc_skininfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->gc_skininfo(i), target);
  }

  // repeated .transMsg.GC_TableInfo GC_TableInfo = 43;
  for (int i = 0; i < this->gc_tableinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->gc_tableinfo(i), target);
  }

  // repeated .transMsg.GC_TablePartInfo GC_TablePartInfo = 44;
  for (int i = 0; i < this->gc_tablepartinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->gc_tablepartinfo(i), target);
  }

  // repeated .transMsg.GC_TableSideInfo GC_TableSideInfo = 45;
  for (int i = 0; i < this->gc_tablesideinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->gc_tablesideinfo(i), target);
  }

  // repeated .transMsg.GC_WallDecorInfo GC_WallDecorInfo = 46;
  for (int i = 0; i < this->gc_walldecorinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->gc_walldecorinfo(i), target);
  }

  // repeated .transMsg.GC_WallInfo GC_WallInfo = 47;
  for (int i = 0; i < this->gc_wallinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->gc_wallinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_Table::ByteSize() const {
  int total_size = 0;

  // repeated .transMsg.GC_CabBoardGapInfo GC_CabBoardGapInfo = 1;
  total_size += 1 * this->gc_cabboardgapinfo_size();
  for (int i = 0; i < this->gc_cabboardgapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabboardgapinfo(i));
  }

  // repeated .transMsg.GC_CabBoardInfo GC_CabBoardInfo = 2;
  total_size += 1 * this->gc_cabboardinfo_size();
  for (int i = 0; i < this->gc_cabboardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabboardinfo(i));
  }

  // repeated .transMsg.GC_CabBoardSealInfo GC_CabBoardSealInfo = 3;
  total_size += 1 * this->gc_cabboardsealinfo_size();
  for (int i = 0; i < this->gc_cabboardsealinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabboardsealinfo(i));
  }

  // repeated .transMsg.GC_CabDoorBoardGapInfo GC_CabDoorBoardGapInfo = 4;
  total_size += 1 * this->gc_cabdoorboardgapinfo_size();
  for (int i = 0; i < this->gc_cabdoorboardgapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabdoorboardgapinfo(i));
  }

  // repeated .transMsg.GC_CabDoorBoardInfo GC_CabDoorBoardInfo = 5;
  total_size += 1 * this->gc_cabdoorboardinfo_size();
  for (int i = 0; i < this->gc_cabdoorboardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabdoorboardinfo(i));
  }

  // repeated .transMsg.GC_CabDoorBoardSealInfo GC_CabDoorBoardSealInfo = 6;
  total_size += 1 * this->gc_cabdoorboardsealinfo_size();
  for (int i = 0; i < this->gc_cabdoorboardsealinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabdoorboardsealinfo(i));
  }

  // repeated .transMsg.GC_CabDoorHWFInfo GC_CabDoorHWFInfo = 7;
  total_size += 1 * this->gc_cabdoorhwfinfo_size();
  for (int i = 0; i < this->gc_cabdoorhwfinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabdoorhwfinfo(i));
  }

  // repeated .transMsg.GC_CabDoorHandleInfo GC_CabDoorHandleInfo = 8;
  total_size += 1 * this->gc_cabdoorhandleinfo_size();
  for (int i = 0; i < this->gc_cabdoorhandleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabdoorhandleinfo(i));
  }

  // repeated .transMsg.GC_CabDoorInfo GC_CabDoorInfo = 9;
  total_size += 1 * this->gc_cabdoorinfo_size();
  for (int i = 0; i < this->gc_cabdoorinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabdoorinfo(i));
  }

  // repeated .transMsg.GC_CabDoorRegionInfo GC_CabDoorRegionInfo = 10;
  total_size += 1 * this->gc_cabdoorregioninfo_size();
  for (int i = 0; i < this->gc_cabdoorregioninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabdoorregioninfo(i));
  }

  // repeated .transMsg.GC_CabDoorSlideInfo GC_CabDoorSlideInfo = 11;
  total_size += 1 * this->gc_cabdoorslideinfo_size();
  for (int i = 0; i < this->gc_cabdoorslideinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabdoorslideinfo(i));
  }

  // repeated .transMsg.GC_CabDoorSystemInfo GC_CabDoorSystemInfo = 12;
  total_size += 1 * this->gc_cabdoorsysteminfo_size();
  for (int i = 0; i < this->gc_cabdoorsysteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabdoorsysteminfo(i));
  }

  // repeated .transMsg.GC_CabFNFHWFInfo GC_CabFNFHWFInfo = 13;
  total_size += 1 * this->gc_cabfnfhwfinfo_size();
  for (int i = 0; i < this->gc_cabfnfhwfinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabfnfhwfinfo(i));
  }

  // repeated .transMsg.GC_CabFNFHoleInfo GC_CabFNFHoleInfo = 14;
  total_size += 1 * this->gc_cabfnfholeinfo_size();
  for (int i = 0; i < this->gc_cabfnfholeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabfnfholeinfo(i));
  }

  // repeated .transMsg.GC_CabFNFInfo GC_CabFNFInfo = 15;
  total_size += 1 * this->gc_cabfnfinfo_size();
  for (int i = 0; i < this->gc_cabfnfinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabfnfinfo(i));
  }

  // repeated .transMsg.GC_CabFNFPartInfo GC_CabFNFPartInfo = 16;
  total_size += 2 * this->gc_cabfnfpartinfo_size();
  for (int i = 0; i < this->gc_cabfnfpartinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabfnfpartinfo(i));
  }

  // repeated .transMsg.GC_CabFNFPartSealInfo GC_CabFNFPartSealInfo = 17;
  total_size += 2 * this->gc_cabfnfpartsealinfo_size();
  for (int i = 0; i < this->gc_cabfnfpartsealinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabfnfpartsealinfo(i));
  }

  // repeated .transMsg.GC_CabInfo GC_CabInfo = 18;
  total_size += 2 * this->gc_cabinfo_size();
  for (int i = 0; i < this->gc_cabinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_cabinfo(i));
  }

  // repeated .transMsg.GC_DecorBoardInfo GC_DecorBoardInfo = 19;
  total_size += 2 * this->gc_decorboardinfo_size();
  for (int i = 0; i < this->gc_decorboardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_decorboardinfo(i));
  }

  // repeated .transMsg.GC_DecorBoardUnitInfo GC_DecorBoardUnitInfo = 20;
  total_size += 2 * this->gc_decorboardunitinfo_size();
  for (int i = 0; i < this->gc_decorboardunitinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_decorboardunitinfo(i));
  }

  // repeated .transMsg.GC_DecorBoardUnitSealInfo GC_DecorBoardUnitSealInfo = 21;
  total_size += 2 * this->gc_decorboardunitsealinfo_size();
  for (int i = 0; i < this->gc_decorboardunitsealinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_decorboardunitsealinfo(i));
  }

  // repeated .transMsg.GC_DecorInfo GC_DecorInfo = 22;
  total_size += 2 * this->gc_decorinfo_size();
  for (int i = 0; i < this->gc_decorinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_decorinfo(i));
  }

  // repeated .transMsg.GC_DecorLineInfo GC_DecorLineInfo = 23;
  total_size += 2 * this->gc_decorlineinfo_size();
  for (int i = 0; i < this->gc_decorlineinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_decorlineinfo(i));
  }

  // repeated .transMsg.GC_DesignPlanInfo GC_DesignPlanInfo = 24;
  total_size += 2 * this->gc_designplaninfo_size();
  for (int i = 0; i < this->gc_designplaninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_designplaninfo(i));
  }

  // repeated .transMsg.GC_FittingInfo GC_FittingInfo = 25;
  total_size += 2 * this->gc_fittinginfo_size();
  for (int i = 0; i < this->gc_fittinginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_fittinginfo(i));
  }

  // repeated .transMsg.GC_HWFInfo GC_HWFInfo = 26;
  total_size += 2 * this->gc_hwfinfo_size();
  for (int i = 0; i < this->gc_hwfinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_hwfinfo(i));
  }

  // repeated .transMsg.GC_MarkInfo GC_MarkInfo = 27;
  total_size += 2 * this->gc_markinfo_size();
  for (int i = 0; i < this->gc_markinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_markinfo(i));
  }

  // repeated .transMsg.GC_MatrixInfo GC_MatrixInfo = 28;
  total_size += 2 * this->gc_matrixinfo_size();
  for (int i = 0; i < this->gc_matrixinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_matrixinfo(i));
  }

  // repeated .transMsg.GC_OrderAddedInfo GC_OrderAddedInfo = 29;
  total_size += 2 * this->gc_orderaddedinfo_size();
  for (int i = 0; i < this->gc_orderaddedinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_orderaddedinfo(i));
  }

  // repeated .transMsg.GC_OrderDataInfo GC_OrderDataInfo = 30;
  total_size += 2 * this->gc_orderdatainfo_size();
  for (int i = 0; i < this->gc_orderdatainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_orderdatainfo(i));
  }

  // repeated .transMsg.GC_PackInfo GC_PackInfo = 31;
  total_size += 2 * this->gc_packinfo_size();
  for (int i = 0; i < this->gc_packinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_packinfo(i));
  }

  // repeated .transMsg.GC_PointInfo GC_PointInfo = 32;
  total_size += 2 * this->gc_pointinfo_size();
  for (int i = 0; i < this->gc_pointinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_pointinfo(i));
  }

  // repeated .transMsg.GC_PrintElementInfo GC_PrintElementInfo = 33;
  total_size += 2 * this->gc_printelementinfo_size();
  for (int i = 0; i < this->gc_printelementinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_printelementinfo(i));
  }

  // repeated .transMsg.GC_PrintGroupInfo GC_PrintGroupInfo = 34;
  total_size += 2 * this->gc_printgroupinfo_size();
  for (int i = 0; i < this->gc_printgroupinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_printgroupinfo(i));
  }

  // repeated .transMsg.GC_PrintInfo GC_PrintInfo = 35;
  total_size += 2 * this->gc_printinfo_size();
  for (int i = 0; i < this->gc_printinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_printinfo(i));
  }

  // repeated .transMsg.GC_PrintTableInfo GC_PrintTableInfo = 36;
  total_size += 2 * this->gc_printtableinfo_size();
  for (int i = 0; i < this->gc_printtableinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_printtableinfo(i));
  }

  // repeated .transMsg.GC_PrintTableRowColInfo GC_PrintTableRowColInfo = 37;
  total_size += 2 * this->gc_printtablerowcolinfo_size();
  for (int i = 0; i < this->gc_printtablerowcolinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_printtablerowcolinfo(i));
  }

  // repeated .transMsg.GC_PrintTableRowInfo GC_PrintTableRowInfo = 38;
  total_size += 2 * this->gc_printtablerowinfo_size();
  for (int i = 0; i < this->gc_printtablerowinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_printtablerowinfo(i));
  }

  // repeated .transMsg.GC_ProductInfo GC_ProductInfo = 39;
  total_size += 2 * this->gc_productinfo_size();
  for (int i = 0; i < this->gc_productinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_productinfo(i));
  }

  // repeated .transMsg.GC_RemarkInfo GC_RemarkInfo = 40;
  total_size += 2 * this->gc_remarkinfo_size();
  for (int i = 0; i < this->gc_remarkinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_remarkinfo(i));
  }

  // repeated .transMsg.GC_ShapeInfo GC_ShapeInfo = 41;
  total_size += 2 * this->gc_shapeinfo_size();
  for (int i = 0; i < this->gc_shapeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_shapeinfo(i));
  }

  // repeated .transMsg.GC_SkinInfo GC_SkinInfo = 42;
  total_size += 2 * this->gc_skininfo_size();
  for (int i = 0; i < this->gc_skininfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_skininfo(i));
  }

  // repeated .transMsg.GC_TableInfo GC_TableInfo = 43;
  total_size += 2 * this->gc_tableinfo_size();
  for (int i = 0; i < this->gc_tableinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_tableinfo(i));
  }

  // repeated .transMsg.GC_TablePartInfo GC_TablePartInfo = 44;
  total_size += 2 * this->gc_tablepartinfo_size();
  for (int i = 0; i < this->gc_tablepartinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_tablepartinfo(i));
  }

  // repeated .transMsg.GC_TableSideInfo GC_TableSideInfo = 45;
  total_size += 2 * this->gc_tablesideinfo_size();
  for (int i = 0; i < this->gc_tablesideinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_tablesideinfo(i));
  }

  // repeated .transMsg.GC_WallDecorInfo GC_WallDecorInfo = 46;
  total_size += 2 * this->gc_walldecorinfo_size();
  for (int i = 0; i < this->gc_walldecorinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_walldecorinfo(i));
  }

  // repeated .transMsg.GC_WallInfo GC_WallInfo = 47;
  total_size += 2 * this->gc_wallinfo_size();
  for (int i = 0; i < this->gc_wallinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_wallinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_Table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_Table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_Table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_Table::MergeFrom(const GC_Table& from) {
  GOOGLE_CHECK_NE(&from, this);
  gc_cabboardgapinfo_.MergeFrom(from.gc_cabboardgapinfo_);
  gc_cabboardinfo_.MergeFrom(from.gc_cabboardinfo_);
  gc_cabboardsealinfo_.MergeFrom(from.gc_cabboardsealinfo_);
  gc_cabdoorboardgapinfo_.MergeFrom(from.gc_cabdoorboardgapinfo_);
  gc_cabdoorboardinfo_.MergeFrom(from.gc_cabdoorboardinfo_);
  gc_cabdoorboardsealinfo_.MergeFrom(from.gc_cabdoorboardsealinfo_);
  gc_cabdoorhwfinfo_.MergeFrom(from.gc_cabdoorhwfinfo_);
  gc_cabdoorhandleinfo_.MergeFrom(from.gc_cabdoorhandleinfo_);
  gc_cabdoorinfo_.MergeFrom(from.gc_cabdoorinfo_);
  gc_cabdoorregioninfo_.MergeFrom(from.gc_cabdoorregioninfo_);
  gc_cabdoorslideinfo_.MergeFrom(from.gc_cabdoorslideinfo_);
  gc_cabdoorsysteminfo_.MergeFrom(from.gc_cabdoorsysteminfo_);
  gc_cabfnfhwfinfo_.MergeFrom(from.gc_cabfnfhwfinfo_);
  gc_cabfnfholeinfo_.MergeFrom(from.gc_cabfnfholeinfo_);
  gc_cabfnfinfo_.MergeFrom(from.gc_cabfnfinfo_);
  gc_cabfnfpartinfo_.MergeFrom(from.gc_cabfnfpartinfo_);
  gc_cabfnfpartsealinfo_.MergeFrom(from.gc_cabfnfpartsealinfo_);
  gc_cabinfo_.MergeFrom(from.gc_cabinfo_);
  gc_decorboardinfo_.MergeFrom(from.gc_decorboardinfo_);
  gc_decorboardunitinfo_.MergeFrom(from.gc_decorboardunitinfo_);
  gc_decorboardunitsealinfo_.MergeFrom(from.gc_decorboardunitsealinfo_);
  gc_decorinfo_.MergeFrom(from.gc_decorinfo_);
  gc_decorlineinfo_.MergeFrom(from.gc_decorlineinfo_);
  gc_designplaninfo_.MergeFrom(from.gc_designplaninfo_);
  gc_fittinginfo_.MergeFrom(from.gc_fittinginfo_);
  gc_hwfinfo_.MergeFrom(from.gc_hwfinfo_);
  gc_markinfo_.MergeFrom(from.gc_markinfo_);
  gc_matrixinfo_.MergeFrom(from.gc_matrixinfo_);
  gc_orderaddedinfo_.MergeFrom(from.gc_orderaddedinfo_);
  gc_orderdatainfo_.MergeFrom(from.gc_orderdatainfo_);
  gc_packinfo_.MergeFrom(from.gc_packinfo_);
  gc_pointinfo_.MergeFrom(from.gc_pointinfo_);
  gc_printelementinfo_.MergeFrom(from.gc_printelementinfo_);
  gc_printgroupinfo_.MergeFrom(from.gc_printgroupinfo_);
  gc_printinfo_.MergeFrom(from.gc_printinfo_);
  gc_printtableinfo_.MergeFrom(from.gc_printtableinfo_);
  gc_printtablerowcolinfo_.MergeFrom(from.gc_printtablerowcolinfo_);
  gc_printtablerowinfo_.MergeFrom(from.gc_printtablerowinfo_);
  gc_productinfo_.MergeFrom(from.gc_productinfo_);
  gc_remarkinfo_.MergeFrom(from.gc_remarkinfo_);
  gc_shapeinfo_.MergeFrom(from.gc_shapeinfo_);
  gc_skininfo_.MergeFrom(from.gc_skininfo_);
  gc_tableinfo_.MergeFrom(from.gc_tableinfo_);
  gc_tablepartinfo_.MergeFrom(from.gc_tablepartinfo_);
  gc_tablesideinfo_.MergeFrom(from.gc_tablesideinfo_);
  gc_walldecorinfo_.MergeFrom(from.gc_walldecorinfo_);
  gc_wallinfo_.MergeFrom(from.gc_wallinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_Table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_Table::CopyFrom(const GC_Table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_Table::IsInitialized() const {

  for (int i = 0; i < gc_cabboardgapinfo_size(); i++) {
    if (!this->gc_cabboardgapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabboardinfo_size(); i++) {
    if (!this->gc_cabboardinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabboardsealinfo_size(); i++) {
    if (!this->gc_cabboardsealinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabdoorboardgapinfo_size(); i++) {
    if (!this->gc_cabdoorboardgapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabdoorboardinfo_size(); i++) {
    if (!this->gc_cabdoorboardinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabdoorboardsealinfo_size(); i++) {
    if (!this->gc_cabdoorboardsealinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabdoorhwfinfo_size(); i++) {
    if (!this->gc_cabdoorhwfinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabdoorhandleinfo_size(); i++) {
    if (!this->gc_cabdoorhandleinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabdoorinfo_size(); i++) {
    if (!this->gc_cabdoorinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabdoorregioninfo_size(); i++) {
    if (!this->gc_cabdoorregioninfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabdoorslideinfo_size(); i++) {
    if (!this->gc_cabdoorslideinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabdoorsysteminfo_size(); i++) {
    if (!this->gc_cabdoorsysteminfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabfnfhwfinfo_size(); i++) {
    if (!this->gc_cabfnfhwfinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabfnfholeinfo_size(); i++) {
    if (!this->gc_cabfnfholeinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabfnfinfo_size(); i++) {
    if (!this->gc_cabfnfinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabfnfpartinfo_size(); i++) {
    if (!this->gc_cabfnfpartinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabfnfpartsealinfo_size(); i++) {
    if (!this->gc_cabfnfpartsealinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_cabinfo_size(); i++) {
    if (!this->gc_cabinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_decorboardinfo_size(); i++) {
    if (!this->gc_decorboardinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_decorboardunitinfo_size(); i++) {
    if (!this->gc_decorboardunitinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_decorboardunitsealinfo_size(); i++) {
    if (!this->gc_decorboardunitsealinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_decorinfo_size(); i++) {
    if (!this->gc_decorinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_decorlineinfo_size(); i++) {
    if (!this->gc_decorlineinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_designplaninfo_size(); i++) {
    if (!this->gc_designplaninfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_fittinginfo_size(); i++) {
    if (!this->gc_fittinginfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_hwfinfo_size(); i++) {
    if (!this->gc_hwfinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_markinfo_size(); i++) {
    if (!this->gc_markinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_matrixinfo_size(); i++) {
    if (!this->gc_matrixinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_orderaddedinfo_size(); i++) {
    if (!this->gc_orderaddedinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_orderdatainfo_size(); i++) {
    if (!this->gc_orderdatainfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_packinfo_size(); i++) {
    if (!this->gc_packinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_pointinfo_size(); i++) {
    if (!this->gc_pointinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_printelementinfo_size(); i++) {
    if (!this->gc_printelementinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_printgroupinfo_size(); i++) {
    if (!this->gc_printgroupinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_printinfo_size(); i++) {
    if (!this->gc_printinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_printtableinfo_size(); i++) {
    if (!this->gc_printtableinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_printtablerowcolinfo_size(); i++) {
    if (!this->gc_printtablerowcolinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_printtablerowinfo_size(); i++) {
    if (!this->gc_printtablerowinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_productinfo_size(); i++) {
    if (!this->gc_productinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_remarkinfo_size(); i++) {
    if (!this->gc_remarkinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_shapeinfo_size(); i++) {
    if (!this->gc_shapeinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_skininfo_size(); i++) {
    if (!this->gc_skininfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_tableinfo_size(); i++) {
    if (!this->gc_tableinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_tablepartinfo_size(); i++) {
    if (!this->gc_tablepartinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_tablesideinfo_size(); i++) {
    if (!this->gc_tablesideinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_walldecorinfo_size(); i++) {
    if (!this->gc_walldecorinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gc_wallinfo_size(); i++) {
    if (!this->gc_wallinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GC_Table::Swap(GC_Table* other) {
  if (other != this) {
    gc_cabboardgapinfo_.Swap(&other->gc_cabboardgapinfo_);
    gc_cabboardinfo_.Swap(&other->gc_cabboardinfo_);
    gc_cabboardsealinfo_.Swap(&other->gc_cabboardsealinfo_);
    gc_cabdoorboardgapinfo_.Swap(&other->gc_cabdoorboardgapinfo_);
    gc_cabdoorboardinfo_.Swap(&other->gc_cabdoorboardinfo_);
    gc_cabdoorboardsealinfo_.Swap(&other->gc_cabdoorboardsealinfo_);
    gc_cabdoorhwfinfo_.Swap(&other->gc_cabdoorhwfinfo_);
    gc_cabdoorhandleinfo_.Swap(&other->gc_cabdoorhandleinfo_);
    gc_cabdoorinfo_.Swap(&other->gc_cabdoorinfo_);
    gc_cabdoorregioninfo_.Swap(&other->gc_cabdoorregioninfo_);
    gc_cabdoorslideinfo_.Swap(&other->gc_cabdoorslideinfo_);
    gc_cabdoorsysteminfo_.Swap(&other->gc_cabdoorsysteminfo_);
    gc_cabfnfhwfinfo_.Swap(&other->gc_cabfnfhwfinfo_);
    gc_cabfnfholeinfo_.Swap(&other->gc_cabfnfholeinfo_);
    gc_cabfnfinfo_.Swap(&other->gc_cabfnfinfo_);
    gc_cabfnfpartinfo_.Swap(&other->gc_cabfnfpartinfo_);
    gc_cabfnfpartsealinfo_.Swap(&other->gc_cabfnfpartsealinfo_);
    gc_cabinfo_.Swap(&other->gc_cabinfo_);
    gc_decorboardinfo_.Swap(&other->gc_decorboardinfo_);
    gc_decorboardunitinfo_.Swap(&other->gc_decorboardunitinfo_);
    gc_decorboardunitsealinfo_.Swap(&other->gc_decorboardunitsealinfo_);
    gc_decorinfo_.Swap(&other->gc_decorinfo_);
    gc_decorlineinfo_.Swap(&other->gc_decorlineinfo_);
    gc_designplaninfo_.Swap(&other->gc_designplaninfo_);
    gc_fittinginfo_.Swap(&other->gc_fittinginfo_);
    gc_hwfinfo_.Swap(&other->gc_hwfinfo_);
    gc_markinfo_.Swap(&other->gc_markinfo_);
    gc_matrixinfo_.Swap(&other->gc_matrixinfo_);
    gc_orderaddedinfo_.Swap(&other->gc_orderaddedinfo_);
    gc_orderdatainfo_.Swap(&other->gc_orderdatainfo_);
    gc_packinfo_.Swap(&other->gc_packinfo_);
    gc_pointinfo_.Swap(&other->gc_pointinfo_);
    gc_printelementinfo_.Swap(&other->gc_printelementinfo_);
    gc_printgroupinfo_.Swap(&other->gc_printgroupinfo_);
    gc_printinfo_.Swap(&other->gc_printinfo_);
    gc_printtableinfo_.Swap(&other->gc_printtableinfo_);
    gc_printtablerowcolinfo_.Swap(&other->gc_printtablerowcolinfo_);
    gc_printtablerowinfo_.Swap(&other->gc_printtablerowinfo_);
    gc_productinfo_.Swap(&other->gc_productinfo_);
    gc_remarkinfo_.Swap(&other->gc_remarkinfo_);
    gc_shapeinfo_.Swap(&other->gc_shapeinfo_);
    gc_skininfo_.Swap(&other->gc_skininfo_);
    gc_tableinfo_.Swap(&other->gc_tableinfo_);
    gc_tablepartinfo_.Swap(&other->gc_tablepartinfo_);
    gc_tablesideinfo_.Swap(&other->gc_tablesideinfo_);
    gc_walldecorinfo_.Swap(&other->gc_walldecorinfo_);
    gc_wallinfo_.Swap(&other->gc_wallinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_Table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_Table_descriptor_;
  metadata.reflection = GC_Table_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

// @@protoc_insertion_point(global_scope)
