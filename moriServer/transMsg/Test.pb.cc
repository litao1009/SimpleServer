// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

namespace {

const ::google::protobuf::Descriptor* QTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Test_2eproto() {
  protobuf_AddDesc_Test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Test.proto");
  GOOGLE_CHECK(file != NULL);
  QTest_descriptor_ = file->message_type(0);
  static const int QTest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTest, tostate_),
  };
  QTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QTest_descriptor_,
      QTest::default_instance_,
      QTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QTest));
  ATest_descriptor_ = file->message_type(1);
  static const int ATest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATest, stats_),
  };
  ATest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATest_descriptor_,
      ATest::default_instance_,
      ATest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QTest_descriptor_, &QTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATest_descriptor_, &ATest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Test_2eproto() {
  delete QTest::default_instance_;
  delete QTest_reflection_;
  delete ATest::default_instance_;
  delete ATest_reflection_;
}

void protobuf_AddDesc_Test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::transMsg::protobuf_AddDesc_EReturnStatus_2eproto();
  ::order::protobuf_AddDesc_EOrderState_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nTest.proto\022\010transMsg\032\023EReturnStatus.pr"
    "oto\032\021EOrderState.proto\"F\n\005QTest\022=\n\007toSta"
    "te\030\001 \001(\0162\022.order.EOrderState:\030EOS_FACTOR"
    "Y_EXAMINE_WAIT\"/\n\005ATest\022&\n\005Stats\030\001 \002(\0162\027"
    ".transMsg.EReturnStatus", 183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Test.proto", &protobuf_RegisterTypes);
  QTest::default_instance_ = new QTest();
  ATest::default_instance_ = new ATest();
  QTest::default_instance_->InitAsDefaultInstance();
  ATest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Test_2eproto {
  StaticDescriptorInitializer_Test_2eproto() {
    protobuf_AddDesc_Test_2eproto();
  }
} static_descriptor_initializer_Test_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int QTest::kToStateFieldNumber;
#endif  // !_MSC_VER

QTest::QTest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QTest::InitAsDefaultInstance() {
}

QTest::QTest(const QTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QTest::SharedCtor() {
  _cached_size_ = 0;
  tostate_ = 8;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QTest::~QTest() {
  SharedDtor();
}

void QTest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QTest_descriptor_;
}

const QTest& QTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Test_2eproto();
  return *default_instance_;
}

QTest* QTest::default_instance_ = NULL;

QTest* QTest::New() const {
  return new QTest;
}

void QTest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tostate_ = 8;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .order.EOrderState toState = 1 [default = EOS_FACTORY_EXAMINE_WAIT];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::order::EOrderState_IsValid(value)) {
            set_tostate(static_cast< ::order::EOrderState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .order.EOrderState toState = 1 [default = EOS_FACTORY_EXAMINE_WAIT];
  if (has_tostate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tostate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .order.EOrderState toState = 1 [default = EOS_FACTORY_EXAMINE_WAIT];
  if (has_tostate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tostate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .order.EOrderState toState = 1 [default = EOS_FACTORY_EXAMINE_WAIT];
    if (has_tostate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tostate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QTest::MergeFrom(const QTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tostate()) {
      set_tostate(from.tostate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QTest::CopyFrom(const QTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QTest::IsInitialized() const {

  return true;
}

void QTest::Swap(QTest* other) {
  if (other != this) {
    std::swap(tostate_, other->tostate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QTest_descriptor_;
  metadata.reflection = QTest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATest::kStatsFieldNumber;
#endif  // !_MSC_VER

ATest::ATest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATest::InitAsDefaultInstance() {
}

ATest::ATest(const ATest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATest::SharedCtor() {
  _cached_size_ = 0;
  stats_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATest::~ATest() {
  SharedDtor();
}

void ATest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ATest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATest_descriptor_;
}

const ATest& ATest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Test_2eproto();
  return *default_instance_;
}

ATest* ATest::default_instance_ = NULL;

ATest* ATest::New() const {
  return new ATest;
}

void ATest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stats_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transMsg.EReturnStatus Stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transMsg::EReturnStatus_IsValid(value)) {
            set_stats(static_cast< ::transMsg::EReturnStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transMsg.EReturnStatus Stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stats());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATest::MergeFrom(const ATest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      set_stats(from.stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATest::CopyFrom(const ATest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ATest::Swap(ATest* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATest_descriptor_;
  metadata.reflection = ATest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

// @@protoc_insertion_point(global_scope)
