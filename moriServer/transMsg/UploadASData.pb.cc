// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UploadASData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UploadASData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

namespace {

const ::google::protobuf::Descriptor* ASDataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASDataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QUploadASData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QUploadASData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AUploadASData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AUploadASData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UploadASData_2eproto() {
  protobuf_AddDesc_UploadASData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UploadASData.proto");
  GOOGLE_CHECK(file != NULL);
  ASDataInfo_descriptor_ = file->message_type(0);
  static const int ASDataInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDataInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDataInfo, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDataInfo, itemdata_),
  };
  ASDataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASDataInfo_descriptor_,
      ASDataInfo::default_instance_,
      ASDataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASDataInfo));
  QUploadASData_descriptor_ = file->message_type(1);
  static const int QUploadASData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUploadASData, asdatainfo_),
  };
  QUploadASData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QUploadASData_descriptor_,
      QUploadASData::default_instance_,
      QUploadASData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUploadASData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUploadASData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QUploadASData));
  AUploadASData_descriptor_ = file->message_type(2);
  static const int AUploadASData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AUploadASData, stats_),
  };
  AUploadASData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AUploadASData_descriptor_,
      AUploadASData::default_instance_,
      AUploadASData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AUploadASData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AUploadASData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AUploadASData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UploadASData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASDataInfo_descriptor_, &ASDataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QUploadASData_descriptor_, &QUploadASData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AUploadASData_descriptor_, &AUploadASData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UploadASData_2eproto() {
  delete ASDataInfo::default_instance_;
  delete ASDataInfo_reflection_;
  delete QUploadASData::default_instance_;
  delete QUploadASData_reflection_;
  delete AUploadASData::default_instance_;
  delete AUploadASData_reflection_;
}

void protobuf_AddDesc_UploadASData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::transMsg::protobuf_AddDesc_EReturnStatus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022UploadASData.proto\022\010transMsg\032\023EReturnS"
    "tatus.proto\"@\n\nASDataInfo\022\016\n\006ItemID\030\001 \002("
    "\005\022\020\n\010ItemName\030\002 \002(\t\022\020\n\010ItemData\030\003 \002(\014\"9\n"
    "\rQUploadASData\022(\n\nASDataInfo\030\001 \003(\0132\024.tra"
    "nsMsg.ASDataInfo\"7\n\rAUploadASData\022&\n\005Sta"
    "ts\030\001 \002(\0162\027.transMsg.EReturnStatus", 233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UploadASData.proto", &protobuf_RegisterTypes);
  ASDataInfo::default_instance_ = new ASDataInfo();
  QUploadASData::default_instance_ = new QUploadASData();
  AUploadASData::default_instance_ = new AUploadASData();
  ASDataInfo::default_instance_->InitAsDefaultInstance();
  QUploadASData::default_instance_->InitAsDefaultInstance();
  AUploadASData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UploadASData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UploadASData_2eproto {
  StaticDescriptorInitializer_UploadASData_2eproto() {
    protobuf_AddDesc_UploadASData_2eproto();
  }
} static_descriptor_initializer_UploadASData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ASDataInfo::kItemIDFieldNumber;
const int ASDataInfo::kItemNameFieldNumber;
const int ASDataInfo::kItemDataFieldNumber;
#endif  // !_MSC_VER

ASDataInfo::ASDataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASDataInfo::InitAsDefaultInstance() {
}

ASDataInfo::ASDataInfo(const ASDataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASDataInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASDataInfo::~ASDataInfo() {
  SharedDtor();
}

void ASDataInfo::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    delete itemname_;
  }
  if (itemdata_ != &::google::protobuf::internal::kEmptyString) {
    delete itemdata_;
  }
  if (this != default_instance_) {
  }
}

void ASDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASDataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASDataInfo_descriptor_;
}

const ASDataInfo& ASDataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadASData_2eproto();
  return *default_instance_;
}

ASDataInfo* ASDataInfo::default_instance_ = NULL;

ASDataInfo* ASDataInfo::New() const {
  return new ASDataInfo;
}

void ASDataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::kEmptyString) {
        itemname_->clear();
      }
    }
    if (has_itemdata()) {
      if (itemdata_ != &::google::protobuf::internal::kEmptyString) {
        itemdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemName;
        break;
      }

      // required string ItemName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ItemData;
        break;
      }

      // required bytes ItemData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ItemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required string ItemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->itemname(), output);
  }

  // required bytes ItemData = 3;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->itemdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASDataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ItemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required string ItemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // required bytes ItemData = 3;
  if (has_itemdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->itemdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASDataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required string ItemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // required bytes ItemData = 3;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->itemdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASDataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASDataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASDataInfo::MergeFrom(const ASDataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_itemdata()) {
      set_itemdata(from.itemdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASDataInfo::CopyFrom(const ASDataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASDataInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ASDataInfo::Swap(ASDataInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemname_, other->itemname_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASDataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASDataInfo_descriptor_;
  metadata.reflection = ASDataInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QUploadASData::kASDataInfoFieldNumber;
#endif  // !_MSC_VER

QUploadASData::QUploadASData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QUploadASData::InitAsDefaultInstance() {
}

QUploadASData::QUploadASData(const QUploadASData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QUploadASData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QUploadASData::~QUploadASData() {
  SharedDtor();
}

void QUploadASData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QUploadASData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QUploadASData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QUploadASData_descriptor_;
}

const QUploadASData& QUploadASData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadASData_2eproto();
  return *default_instance_;
}

QUploadASData* QUploadASData::default_instance_ = NULL;

QUploadASData* QUploadASData::New() const {
  return new QUploadASData;
}

void QUploadASData::Clear() {
  asdatainfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QUploadASData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transMsg.ASDataInfo ASDataInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ASDataInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_asdatainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ASDataInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QUploadASData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .transMsg.ASDataInfo ASDataInfo = 1;
  for (int i = 0; i < this->asdatainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->asdatainfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QUploadASData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .transMsg.ASDataInfo ASDataInfo = 1;
  for (int i = 0; i < this->asdatainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->asdatainfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QUploadASData::ByteSize() const {
  int total_size = 0;

  // repeated .transMsg.ASDataInfo ASDataInfo = 1;
  total_size += 1 * this->asdatainfo_size();
  for (int i = 0; i < this->asdatainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->asdatainfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QUploadASData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QUploadASData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QUploadASData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QUploadASData::MergeFrom(const QUploadASData& from) {
  GOOGLE_CHECK_NE(&from, this);
  asdatainfo_.MergeFrom(from.asdatainfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QUploadASData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QUploadASData::CopyFrom(const QUploadASData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QUploadASData::IsInitialized() const {

  for (int i = 0; i < asdatainfo_size(); i++) {
    if (!this->asdatainfo(i).IsInitialized()) return false;
  }
  return true;
}

void QUploadASData::Swap(QUploadASData* other) {
  if (other != this) {
    asdatainfo_.Swap(&other->asdatainfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QUploadASData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QUploadASData_descriptor_;
  metadata.reflection = QUploadASData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AUploadASData::kStatsFieldNumber;
#endif  // !_MSC_VER

AUploadASData::AUploadASData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AUploadASData::InitAsDefaultInstance() {
}

AUploadASData::AUploadASData(const AUploadASData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AUploadASData::SharedCtor() {
  _cached_size_ = 0;
  stats_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AUploadASData::~AUploadASData() {
  SharedDtor();
}

void AUploadASData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AUploadASData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AUploadASData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AUploadASData_descriptor_;
}

const AUploadASData& AUploadASData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadASData_2eproto();
  return *default_instance_;
}

AUploadASData* AUploadASData::default_instance_ = NULL;

AUploadASData* AUploadASData::New() const {
  return new AUploadASData;
}

void AUploadASData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stats_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AUploadASData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transMsg.EReturnStatus Stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transMsg::EReturnStatus_IsValid(value)) {
            set_stats(static_cast< ::transMsg::EReturnStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AUploadASData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AUploadASData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AUploadASData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transMsg.EReturnStatus Stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stats());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AUploadASData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AUploadASData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AUploadASData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AUploadASData::MergeFrom(const AUploadASData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      set_stats(from.stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AUploadASData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AUploadASData::CopyFrom(const AUploadASData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUploadASData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AUploadASData::Swap(AUploadASData* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AUploadASData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AUploadASData_descriptor_;
  metadata.reflection = AUploadASData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

// @@protoc_insertion_point(global_scope)
