// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg-SJ.proto

#ifndef PROTOBUF_msg_2dSJ_2eproto__INCLUDED
#define PROTOBUF_msg_2dSJ_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_2dSJ_2eproto();
void protobuf_AssignDesc_msg_2dSJ_2eproto();
void protobuf_ShutdownFile_msg_2dSJ_2eproto();

class SJ_CabBoardGapInfo;
class SJ_CabBoardInfo;
class SJ_CabBoardSealInfo;
class SJ_CabDoorBoardGapInfo;
class SJ_CabDoorBoardInfo;
class SJ_CabDoorBoardSealInfo;
class SJ_CabDoorHWFInfo;
class SJ_CabDoorHandleInfo;
class SJ_CabDoorInfo;
class SJ_CabDoorRegionInfo;
class SJ_CabDoorSlideInfo;
class SJ_CabDoorSystemInfo;
class SJ_CabFNFHWFInfo;
class SJ_CabFNFHoleInfo;
class SJ_CabFNFInfo;
class SJ_CabFNFPartInfo;
class SJ_CabFNFPartSealInfo;
class SJ_CabInfo;
class SJ_DecorBoardInfo;
class SJ_DecorBoardUnitInfo;
class SJ_DecorBoardUnitSealInfo;
class SJ_DecorInfo;
class SJ_DecorLineInfo;
class SJ_DesignPlanInfo;
class SJ_FittingInfo;
class SJ_HWFInfo;
class SJ_MarkInfo;
class SJ_MatrixInfo;
class SJ_OrderAddedInfo;
class SJ_OrderDataInfo;
class SJ_PackInfo;
class SJ_PointInfo;
class SJ_PrintElementInfo;
class SJ_PrintGroupInfo;
class SJ_PrintInfo;
class SJ_PrintTableInfo;
class SJ_PrintTableRowColInfo;
class SJ_PrintTableRowInfo;
class SJ_ProductInfo;
class SJ_RemarkInfo;
class SJ_ShapeInfo;
class SJ_SkinInfo;
class SJ_TableInfo;
class SJ_TablePartInfo;
class SJ_TableSideInfo;
class SJ_WallDecorInfo;
class SJ_WallInfo;
class SJ_Table;

// ===================================================================

class SJ_CabBoardGapInfo : public ::google::protobuf::Message {
 public:
  SJ_CabBoardGapInfo();
  virtual ~SJ_CabBoardGapInfo();

  SJ_CabBoardGapInfo(const SJ_CabBoardGapInfo& from);

  inline SJ_CabBoardGapInfo& operator=(const SJ_CabBoardGapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabBoardGapInfo& default_instance();

  void Swap(SJ_CabBoardGapInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabBoardGapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabBoardGapInfo& from);
  void MergeFrom(const SJ_CabBoardGapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabBoardGapID = 1;
  inline bool has_cabboardgapid() const;
  inline void clear_cabboardgapid();
  static const int kCabBoardGapIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabboardgapid() const;
  inline void set_cabboardgapid(::google::protobuf::int32 value);

  // required int32 CabBoardID = 2;
  inline bool has_cabboardid() const;
  inline void clear_cabboardid();
  static const int kCabBoardIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabboardid() const;
  inline void set_cabboardid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 7;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 7;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 CabStructBoardID = 8;
  inline bool has_cabstructboardid() const;
  inline void clear_cabstructboardid();
  static const int kCabStructBoardIDFieldNumber = 8;
  inline ::google::protobuf::int32 cabstructboardid() const;
  inline void set_cabstructboardid(::google::protobuf::int32 value);

  // required int32 CabStructBoardGapID = 9;
  inline bool has_cabstructboardgapid() const;
  inline void clear_cabstructboardgapid();
  static const int kCabStructBoardGapIDFieldNumber = 9;
  inline ::google::protobuf::int32 cabstructboardgapid() const;
  inline void set_cabstructboardgapid(::google::protobuf::int32 value);

  // required int32 GapPos = 10;
  inline bool has_gappos() const;
  inline void clear_gappos();
  static const int kGapPosFieldNumber = 10;
  inline ::google::protobuf::int32 gappos() const;
  inline void set_gappos(::google::protobuf::int32 value);

  // required int32 GapIndex = 11;
  inline bool has_gapindex() const;
  inline void clear_gapindex();
  static const int kGapIndexFieldNumber = 11;
  inline ::google::protobuf::int32 gapindex() const;
  inline void set_gapindex(::google::protobuf::int32 value);

  // required int32 GapType = 12;
  inline bool has_gaptype() const;
  inline void clear_gaptype();
  static const int kGapTypeFieldNumber = 12;
  inline ::google::protobuf::int32 gaptype() const;
  inline void set_gaptype(::google::protobuf::int32 value);

  // required int32 GapShape = 13;
  inline bool has_gapshape() const;
  inline void clear_gapshape();
  static const int kGapShapeFieldNumber = 13;
  inline ::google::protobuf::int32 gapshape() const;
  inline void set_gapshape(::google::protobuf::int32 value);

  // required double XLen = 14;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 14;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 15;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 15;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double XOffsetLen = 16;
  inline bool has_xoffsetlen() const;
  inline void clear_xoffsetlen();
  static const int kXOffsetLenFieldNumber = 16;
  inline double xoffsetlen() const;
  inline void set_xoffsetlen(double value);

  // required double YOffsetLen = 17;
  inline bool has_yoffsetlen() const;
  inline void clear_yoffsetlen();
  static const int kYOffsetLenFieldNumber = 17;
  inline double yoffsetlen() const;
  inline void set_yoffsetlen(double value);

  // required double ZOffsetLen = 18;
  inline bool has_zoffsetlen() const;
  inline void clear_zoffsetlen();
  static const int kZOffsetLenFieldNumber = 18;
  inline double zoffsetlen() const;
  inline void set_zoffsetlen(double value);

  // required int32 CreatorID = 19;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 19;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 20;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 20;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 21;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 21;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 22;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 22;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabBoardGapInfo)
 private:
  inline void set_has_cabboardgapid();
  inline void clear_has_cabboardgapid();
  inline void set_has_cabboardid();
  inline void clear_has_cabboardid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_cabstructboardid();
  inline void clear_has_cabstructboardid();
  inline void set_has_cabstructboardgapid();
  inline void clear_has_cabstructboardgapid();
  inline void set_has_gappos();
  inline void clear_has_gappos();
  inline void set_has_gapindex();
  inline void clear_has_gapindex();
  inline void set_has_gaptype();
  inline void clear_has_gaptype();
  inline void set_has_gapshape();
  inline void clear_has_gapshape();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_xoffsetlen();
  inline void clear_has_xoffsetlen();
  inline void set_has_yoffsetlen();
  inline void clear_has_yoffsetlen();
  inline void set_has_zoffsetlen();
  inline void clear_has_zoffsetlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabboardgapid_;
  ::google::protobuf::int32 cabboardid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 cabstructboardid_;
  ::google::protobuf::int32 cabstructboardgapid_;
  ::google::protobuf::int32 gappos_;
  ::google::protobuf::int32 gapindex_;
  ::google::protobuf::int32 gaptype_;
  double xlen_;
  double ylen_;
  double xoffsetlen_;
  ::google::protobuf::int32 gapshape_;
  ::google::protobuf::int32 creatorid_;
  double yoffsetlen_;
  double zoffsetlen_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabBoardGapInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabBoardInfo : public ::google::protobuf::Message {
 public:
  SJ_CabBoardInfo();
  virtual ~SJ_CabBoardInfo();

  SJ_CabBoardInfo(const SJ_CabBoardInfo& from);

  inline SJ_CabBoardInfo& operator=(const SJ_CabBoardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabBoardInfo& default_instance();

  void Swap(SJ_CabBoardInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabBoardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabBoardInfo& from);
  void MergeFrom(const SJ_CabBoardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabBoardID = 1;
  inline bool has_cabboardid() const;
  inline void clear_cabboardid();
  static const int kCabBoardIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabboardid() const;
  inline void set_cabboardid(::google::protobuf::int32 value);

  // required int32 CabID = 2;
  inline bool has_cabid() const;
  inline void clear_cabid();
  static const int kCabIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabid() const;
  inline void set_cabid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 7;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 7;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 CabinetSizeID = 8;
  inline bool has_cabinetsizeid() const;
  inline void clear_cabinetsizeid();
  static const int kCabinetSizeIDFieldNumber = 8;
  inline ::google::protobuf::int32 cabinetsizeid() const;
  inline void set_cabinetsizeid(::google::protobuf::int32 value);

  // required int32 CabStructBoardID = 9;
  inline bool has_cabstructboardid() const;
  inline void clear_cabstructboardid();
  static const int kCabStructBoardIDFieldNumber = 9;
  inline ::google::protobuf::int32 cabstructboardid() const;
  inline void set_cabstructboardid(::google::protobuf::int32 value);

  // required int32 CabinetSizeBoardID = 10;
  inline bool has_cabinetsizeboardid() const;
  inline void clear_cabinetsizeboardid();
  static const int kCabinetSizeBoardIDFieldNumber = 10;
  inline ::google::protobuf::int32 cabinetsizeboardid() const;
  inline void set_cabinetsizeboardid(::google::protobuf::int32 value);

  // required int32 CabMatPlanID = 11;
  inline bool has_cabmatplanid() const;
  inline void clear_cabmatplanid();
  static const int kCabMatPlanIDFieldNumber = 11;
  inline ::google::protobuf::int32 cabmatplanid() const;
  inline void set_cabmatplanid(::google::protobuf::int32 value);

  // required int32 MatID = 12;
  inline bool has_matid() const;
  inline void clear_matid();
  static const int kMatIDFieldNumber = 12;
  inline ::google::protobuf::int32 matid() const;
  inline void set_matid(::google::protobuf::int32 value);

  // required int32 MatGType = 13;
  inline bool has_matgtype() const;
  inline void clear_matgtype();
  static const int kMatGTypeFieldNumber = 13;
  inline ::google::protobuf::int32 matgtype() const;
  inline void set_matgtype(::google::protobuf::int32 value);

  // required int32 SkinDirection = 14;
  inline bool has_skindirection() const;
  inline void clear_skindirection();
  static const int kSkinDirectionFieldNumber = 14;
  inline ::google::protobuf::int32 skindirection() const;
  inline void set_skindirection(::google::protobuf::int32 value);

  // required int32 SealRuleID = 15;
  inline bool has_sealruleid() const;
  inline void clear_sealruleid();
  static const int kSealRuleIDFieldNumber = 15;
  inline ::google::protobuf::int32 sealruleid() const;
  inline void set_sealruleid(::google::protobuf::int32 value);

  // required double XLen = 16;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 16;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 17;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 17;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 18;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 18;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double XOffsetLen = 19;
  inline bool has_xoffsetlen() const;
  inline void clear_xoffsetlen();
  static const int kXOffsetLenFieldNumber = 19;
  inline double xoffsetlen() const;
  inline void set_xoffsetlen(double value);

  // required double YOffsetLen = 20;
  inline bool has_yoffsetlen() const;
  inline void clear_yoffsetlen();
  static const int kYOffsetLenFieldNumber = 20;
  inline double yoffsetlen() const;
  inline void set_yoffsetlen(double value);

  // required double ZOffsetLen = 21;
  inline bool has_zoffsetlen() const;
  inline void clear_zoffsetlen();
  static const int kZOffsetLenFieldNumber = 21;
  inline double zoffsetlen() const;
  inline void set_zoffsetlen(double value);

  // required int32 XDock = 22;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 22;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 23;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 23;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 24;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 24;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required bool IsChangedOffset = 25;
  inline bool has_ischangedoffset() const;
  inline void clear_ischangedoffset();
  static const int kIsChangedOffsetFieldNumber = 25;
  inline bool ischangedoffset() const;
  inline void set_ischangedoffset(bool value);

  // required bool IsFakeDel = 26;
  inline bool has_isfakedel() const;
  inline void clear_isfakedel();
  static const int kIsFakeDelFieldNumber = 26;
  inline bool isfakedel() const;
  inline void set_isfakedel(bool value);

  // required int32 CreatorID = 27;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 27;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 28;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 28;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 29;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 29;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 30;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 30;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string CabBoardName = 31;
  inline bool has_cabboardname() const;
  inline void clear_cabboardname();
  static const int kCabBoardNameFieldNumber = 31;
  inline const ::std::string& cabboardname() const;
  inline void set_cabboardname(const ::std::string& value);
  inline void set_cabboardname(const char* value);
  inline void set_cabboardname(const char* value, size_t size);
  inline ::std::string* mutable_cabboardname();
  inline ::std::string* release_cabboardname();
  inline void set_allocated_cabboardname(::std::string* cabboardname);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabBoardInfo)
 private:
  inline void set_has_cabboardid();
  inline void clear_has_cabboardid();
  inline void set_has_cabid();
  inline void clear_has_cabid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_cabinetsizeid();
  inline void clear_has_cabinetsizeid();
  inline void set_has_cabstructboardid();
  inline void clear_has_cabstructboardid();
  inline void set_has_cabinetsizeboardid();
  inline void clear_has_cabinetsizeboardid();
  inline void set_has_cabmatplanid();
  inline void clear_has_cabmatplanid();
  inline void set_has_matid();
  inline void clear_has_matid();
  inline void set_has_matgtype();
  inline void clear_has_matgtype();
  inline void set_has_skindirection();
  inline void clear_has_skindirection();
  inline void set_has_sealruleid();
  inline void clear_has_sealruleid();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_xoffsetlen();
  inline void clear_has_xoffsetlen();
  inline void set_has_yoffsetlen();
  inline void clear_has_yoffsetlen();
  inline void set_has_zoffsetlen();
  inline void clear_has_zoffsetlen();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_ischangedoffset();
  inline void clear_has_ischangedoffset();
  inline void set_has_isfakedel();
  inline void clear_has_isfakedel();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_cabboardname();
  inline void clear_has_cabboardname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabboardid_;
  ::google::protobuf::int32 cabid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 cabinetsizeid_;
  ::google::protobuf::int32 cabstructboardid_;
  ::google::protobuf::int32 cabinetsizeboardid_;
  ::google::protobuf::int32 cabmatplanid_;
  ::google::protobuf::int32 matid_;
  ::google::protobuf::int32 matgtype_;
  ::google::protobuf::int32 skindirection_;
  double xlen_;
  double ylen_;
  double zlen_;
  ::google::protobuf::int32 sealruleid_;
  ::google::protobuf::int32 xdock_;
  double xoffsetlen_;
  double yoffsetlen_;
  double zoffsetlen_;
  ::google::protobuf::int32 ydock_;
  ::google::protobuf::int32 zdock_;
  bool ischangedoffset_;
  bool isfakedel_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* cabboardname_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(31 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabBoardInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabBoardSealInfo : public ::google::protobuf::Message {
 public:
  SJ_CabBoardSealInfo();
  virtual ~SJ_CabBoardSealInfo();

  SJ_CabBoardSealInfo(const SJ_CabBoardSealInfo& from);

  inline SJ_CabBoardSealInfo& operator=(const SJ_CabBoardSealInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabBoardSealInfo& default_instance();

  void Swap(SJ_CabBoardSealInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabBoardSealInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabBoardSealInfo& from);
  void MergeFrom(const SJ_CabBoardSealInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabBoardSealID = 1;
  inline bool has_cabboardsealid() const;
  inline void clear_cabboardsealid();
  static const int kCabBoardSealIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabboardsealid() const;
  inline void set_cabboardsealid(::google::protobuf::int32 value);

  // required int32 CabBoardID = 2;
  inline bool has_cabboardid() const;
  inline void clear_cabboardid();
  static const int kCabBoardIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabboardid() const;
  inline void set_cabboardid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 CabStructBoardSealID = 6;
  inline bool has_cabstructboardsealid() const;
  inline void clear_cabstructboardsealid();
  static const int kCabStructBoardSealIDFieldNumber = 6;
  inline ::google::protobuf::int32 cabstructboardsealid() const;
  inline void set_cabstructboardsealid(::google::protobuf::int32 value);

  // required int32 CabStructBoardID = 7;
  inline bool has_cabstructboardid() const;
  inline void clear_cabstructboardid();
  static const int kCabStructBoardIDFieldNumber = 7;
  inline ::google::protobuf::int32 cabstructboardid() const;
  inline void set_cabstructboardid(::google::protobuf::int32 value);

  // required int32 FactoryID = 8;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 8;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 9;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 9;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 SealType = 10;
  inline bool has_sealtype() const;
  inline void clear_sealtype();
  static const int kSealTypeFieldNumber = 10;
  inline ::google::protobuf::int32 sealtype() const;
  inline void set_sealtype(::google::protobuf::int32 value);

  // required int32 SealIndex = 11;
  inline bool has_sealindex() const;
  inline void clear_sealindex();
  static const int kSealIndexFieldNumber = 11;
  inline ::google::protobuf::int32 sealindex() const;
  inline void set_sealindex(::google::protobuf::int32 value);

  // required int32 MaterialID = 12;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 12;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required double PreMill = 13;
  inline bool has_premill() const;
  inline void clear_premill();
  static const int kPreMillFieldNumber = 13;
  inline double premill() const;
  inline void set_premill(double value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabBoardSealInfo)
 private:
  inline void set_has_cabboardsealid();
  inline void clear_has_cabboardsealid();
  inline void set_has_cabboardid();
  inline void clear_has_cabboardid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_cabstructboardsealid();
  inline void clear_has_cabstructboardsealid();
  inline void set_has_cabstructboardid();
  inline void clear_has_cabstructboardid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_sealtype();
  inline void clear_has_sealtype();
  inline void set_has_sealindex();
  inline void clear_has_sealindex();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_premill();
  inline void clear_has_premill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabboardsealid_;
  ::google::protobuf::int32 cabboardid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 cabstructboardsealid_;
  ::google::protobuf::int32 cabstructboardid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 sealtype_;
  ::google::protobuf::int32 sealindex_;
  ::google::protobuf::int32 materialid_;
  double premill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabBoardSealInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabDoorBoardGapInfo : public ::google::protobuf::Message {
 public:
  SJ_CabDoorBoardGapInfo();
  virtual ~SJ_CabDoorBoardGapInfo();

  SJ_CabDoorBoardGapInfo(const SJ_CabDoorBoardGapInfo& from);

  inline SJ_CabDoorBoardGapInfo& operator=(const SJ_CabDoorBoardGapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabDoorBoardGapInfo& default_instance();

  void Swap(SJ_CabDoorBoardGapInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabDoorBoardGapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabDoorBoardGapInfo& from);
  void MergeFrom(const SJ_CabDoorBoardGapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDoorBoardGapID = 1;
  inline bool has_cabdoorboardgapid() const;
  inline void clear_cabdoorboardgapid();
  static const int kCabDoorBoardGapIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdoorboardgapid() const;
  inline void set_cabdoorboardgapid(::google::protobuf::int32 value);

  // required int32 CabDoorBoardID = 2;
  inline bool has_cabdoorboardid() const;
  inline void clear_cabdoorboardid();
  static const int kCabDoorBoardIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabdoorboardid() const;
  inline void set_cabdoorboardid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 DoorBoardGapID = 6;
  inline bool has_doorboardgapid() const;
  inline void clear_doorboardgapid();
  static const int kDoorBoardGapIDFieldNumber = 6;
  inline ::google::protobuf::int32 doorboardgapid() const;
  inline void set_doorboardgapid(::google::protobuf::int32 value);

  // required int32 DoorBoardID = 7;
  inline bool has_doorboardid() const;
  inline void clear_doorboardid();
  static const int kDoorBoardIDFieldNumber = 7;
  inline ::google::protobuf::int32 doorboardid() const;
  inline void set_doorboardid(::google::protobuf::int32 value);

  // required int32 FactoryID = 8;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 8;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 9;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 9;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 GapPos = 10;
  inline bool has_gappos() const;
  inline void clear_gappos();
  static const int kGapPosFieldNumber = 10;
  inline ::google::protobuf::int32 gappos() const;
  inline void set_gappos(::google::protobuf::int32 value);

  // required int32 GapIndex = 11;
  inline bool has_gapindex() const;
  inline void clear_gapindex();
  static const int kGapIndexFieldNumber = 11;
  inline ::google::protobuf::int32 gapindex() const;
  inline void set_gapindex(::google::protobuf::int32 value);

  // required int32 GapType = 12;
  inline bool has_gaptype() const;
  inline void clear_gaptype();
  static const int kGapTypeFieldNumber = 12;
  inline ::google::protobuf::int32 gaptype() const;
  inline void set_gaptype(::google::protobuf::int32 value);

  // required int32 GapShape = 13;
  inline bool has_gapshape() const;
  inline void clear_gapshape();
  static const int kGapShapeFieldNumber = 13;
  inline ::google::protobuf::int32 gapshape() const;
  inline void set_gapshape(::google::protobuf::int32 value);

  // required double XLen = 14;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 14;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 15;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 15;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double XOffsetLen = 16;
  inline bool has_xoffsetlen() const;
  inline void clear_xoffsetlen();
  static const int kXOffsetLenFieldNumber = 16;
  inline double xoffsetlen() const;
  inline void set_xoffsetlen(double value);

  // required double YOffsetLen = 17;
  inline bool has_yoffsetlen() const;
  inline void clear_yoffsetlen();
  static const int kYOffsetLenFieldNumber = 17;
  inline double yoffsetlen() const;
  inline void set_yoffsetlen(double value);

  // required double ZOffsetLen = 18;
  inline bool has_zoffsetlen() const;
  inline void clear_zoffsetlen();
  static const int kZOffsetLenFieldNumber = 18;
  inline double zoffsetlen() const;
  inline void set_zoffsetlen(double value);

  // required int32 CreatorID = 19;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 19;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 20;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 20;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 21;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 21;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 22;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 22;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabDoorBoardGapInfo)
 private:
  inline void set_has_cabdoorboardgapid();
  inline void clear_has_cabdoorboardgapid();
  inline void set_has_cabdoorboardid();
  inline void clear_has_cabdoorboardid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_doorboardgapid();
  inline void clear_has_doorboardgapid();
  inline void set_has_doorboardid();
  inline void clear_has_doorboardid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_gappos();
  inline void clear_has_gappos();
  inline void set_has_gapindex();
  inline void clear_has_gapindex();
  inline void set_has_gaptype();
  inline void clear_has_gaptype();
  inline void set_has_gapshape();
  inline void clear_has_gapshape();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_xoffsetlen();
  inline void clear_has_xoffsetlen();
  inline void set_has_yoffsetlen();
  inline void clear_has_yoffsetlen();
  inline void set_has_zoffsetlen();
  inline void clear_has_zoffsetlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdoorboardgapid_;
  ::google::protobuf::int32 cabdoorboardid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 doorboardgapid_;
  ::google::protobuf::int32 doorboardid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 gappos_;
  ::google::protobuf::int32 gapindex_;
  ::google::protobuf::int32 gaptype_;
  double xlen_;
  double ylen_;
  double xoffsetlen_;
  ::google::protobuf::int32 gapshape_;
  ::google::protobuf::int32 creatorid_;
  double yoffsetlen_;
  double zoffsetlen_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabDoorBoardGapInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabDoorBoardInfo : public ::google::protobuf::Message {
 public:
  SJ_CabDoorBoardInfo();
  virtual ~SJ_CabDoorBoardInfo();

  SJ_CabDoorBoardInfo(const SJ_CabDoorBoardInfo& from);

  inline SJ_CabDoorBoardInfo& operator=(const SJ_CabDoorBoardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabDoorBoardInfo& default_instance();

  void Swap(SJ_CabDoorBoardInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabDoorBoardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabDoorBoardInfo& from);
  void MergeFrom(const SJ_CabDoorBoardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDoorBoardID = 1;
  inline bool has_cabdoorboardid() const;
  inline void clear_cabdoorboardid();
  static const int kCabDoorBoardIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdoorboardid() const;
  inline void set_cabdoorboardid(::google::protobuf::int32 value);

  // required int32 CabDoorID = 2;
  inline bool has_cabdoorid() const;
  inline void clear_cabdoorid();
  static const int kCabDoorIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabdoorid() const;
  inline void set_cabdoorid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 DoorBoardID = 6;
  inline bool has_doorboardid() const;
  inline void clear_doorboardid();
  static const int kDoorBoardIDFieldNumber = 6;
  inline ::google::protobuf::int32 doorboardid() const;
  inline void set_doorboardid(::google::protobuf::int32 value);

  // required int32 DoorID = 7;
  inline bool has_doorid() const;
  inline void clear_doorid();
  static const int kDoorIDFieldNumber = 7;
  inline ::google::protobuf::int32 doorid() const;
  inline void set_doorid(::google::protobuf::int32 value);

  // required int32 DoorBoardIndex = 8;
  inline bool has_doorboardindex() const;
  inline void clear_doorboardindex();
  static const int kDoorBoardIndexFieldNumber = 8;
  inline ::google::protobuf::int32 doorboardindex() const;
  inline void set_doorboardindex(::google::protobuf::int32 value);

  // required int32 FactoryID = 9;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 9;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 10;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 10;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 DoorMatPlanID = 11;
  inline bool has_doormatplanid() const;
  inline void clear_doormatplanid();
  static const int kDoorMatPlanIDFieldNumber = 11;
  inline ::google::protobuf::int32 doormatplanid() const;
  inline void set_doormatplanid(::google::protobuf::int32 value);

  // required int32 MatID = 12;
  inline bool has_matid() const;
  inline void clear_matid();
  static const int kMatIDFieldNumber = 12;
  inline ::google::protobuf::int32 matid() const;
  inline void set_matid(::google::protobuf::int32 value);

  // required int32 MatGType = 13;
  inline bool has_matgtype() const;
  inline void clear_matgtype();
  static const int kMatGTypeFieldNumber = 13;
  inline ::google::protobuf::int32 matgtype() const;
  inline void set_matgtype(::google::protobuf::int32 value);

  // required int32 SkinDirection = 14;
  inline bool has_skindirection() const;
  inline void clear_skindirection();
  static const int kSkinDirectionFieldNumber = 14;
  inline ::google::protobuf::int32 skindirection() const;
  inline void set_skindirection(::google::protobuf::int32 value);

  // required int32 SealRuleID = 15;
  inline bool has_sealruleid() const;
  inline void clear_sealruleid();
  static const int kSealRuleIDFieldNumber = 15;
  inline ::google::protobuf::int32 sealruleid() const;
  inline void set_sealruleid(::google::protobuf::int32 value);

  // required int32 ModelID = 16;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 16;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required int32 XDock = 17;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 17;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 18;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 18;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 19;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 19;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required double XLen = 20;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 20;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 21;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 21;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 22;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 22;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double XOffsetLen = 23;
  inline bool has_xoffsetlen() const;
  inline void clear_xoffsetlen();
  static const int kXOffsetLenFieldNumber = 23;
  inline double xoffsetlen() const;
  inline void set_xoffsetlen(double value);

  // required double YOffsetLen = 24;
  inline bool has_yoffsetlen() const;
  inline void clear_yoffsetlen();
  static const int kYOffsetLenFieldNumber = 24;
  inline double yoffsetlen() const;
  inline void set_yoffsetlen(double value);

  // required double ZOffsetLen = 25;
  inline bool has_zoffsetlen() const;
  inline void clear_zoffsetlen();
  static const int kZOffsetLenFieldNumber = 25;
  inline double zoffsetlen() const;
  inline void set_zoffsetlen(double value);

  // required int32 CreatorID = 26;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 26;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 27;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 27;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 28;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 28;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 29;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 29;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabDoorBoardInfo)
 private:
  inline void set_has_cabdoorboardid();
  inline void clear_has_cabdoorboardid();
  inline void set_has_cabdoorid();
  inline void clear_has_cabdoorid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_doorboardid();
  inline void clear_has_doorboardid();
  inline void set_has_doorid();
  inline void clear_has_doorid();
  inline void set_has_doorboardindex();
  inline void clear_has_doorboardindex();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_doormatplanid();
  inline void clear_has_doormatplanid();
  inline void set_has_matid();
  inline void clear_has_matid();
  inline void set_has_matgtype();
  inline void clear_has_matgtype();
  inline void set_has_skindirection();
  inline void clear_has_skindirection();
  inline void set_has_sealruleid();
  inline void clear_has_sealruleid();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_xoffsetlen();
  inline void clear_has_xoffsetlen();
  inline void set_has_yoffsetlen();
  inline void clear_has_yoffsetlen();
  inline void set_has_zoffsetlen();
  inline void clear_has_zoffsetlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdoorboardid_;
  ::google::protobuf::int32 cabdoorid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 doorboardid_;
  ::google::protobuf::int32 doorid_;
  ::google::protobuf::int32 doorboardindex_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 doormatplanid_;
  ::google::protobuf::int32 matid_;
  ::google::protobuf::int32 matgtype_;
  ::google::protobuf::int32 skindirection_;
  ::google::protobuf::int32 sealruleid_;
  ::google::protobuf::int32 modelid_;
  ::google::protobuf::int32 xdock_;
  ::google::protobuf::int32 ydock_;
  double xlen_;
  double ylen_;
  double zlen_;
  ::google::protobuf::int32 zdock_;
  ::google::protobuf::int32 creatorid_;
  double xoffsetlen_;
  double yoffsetlen_;
  double zoffsetlen_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabDoorBoardInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabDoorBoardSealInfo : public ::google::protobuf::Message {
 public:
  SJ_CabDoorBoardSealInfo();
  virtual ~SJ_CabDoorBoardSealInfo();

  SJ_CabDoorBoardSealInfo(const SJ_CabDoorBoardSealInfo& from);

  inline SJ_CabDoorBoardSealInfo& operator=(const SJ_CabDoorBoardSealInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabDoorBoardSealInfo& default_instance();

  void Swap(SJ_CabDoorBoardSealInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabDoorBoardSealInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabDoorBoardSealInfo& from);
  void MergeFrom(const SJ_CabDoorBoardSealInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDoorBoardSealID = 1;
  inline bool has_cabdoorboardsealid() const;
  inline void clear_cabdoorboardsealid();
  static const int kCabDoorBoardSealIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdoorboardsealid() const;
  inline void set_cabdoorboardsealid(::google::protobuf::int32 value);

  // required int32 CabDoorBoardID = 2;
  inline bool has_cabdoorboardid() const;
  inline void clear_cabdoorboardid();
  static const int kCabDoorBoardIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabdoorboardid() const;
  inline void set_cabdoorboardid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 DoorBoardID = 6;
  inline bool has_doorboardid() const;
  inline void clear_doorboardid();
  static const int kDoorBoardIDFieldNumber = 6;
  inline ::google::protobuf::int32 doorboardid() const;
  inline void set_doorboardid(::google::protobuf::int32 value);

  // required int32 SealIndex = 7;
  inline bool has_sealindex() const;
  inline void clear_sealindex();
  static const int kSealIndexFieldNumber = 7;
  inline ::google::protobuf::int32 sealindex() const;
  inline void set_sealindex(::google::protobuf::int32 value);

  // required int32 FactoryID = 8;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 8;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 9;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 9;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 SealType = 10;
  inline bool has_sealtype() const;
  inline void clear_sealtype();
  static const int kSealTypeFieldNumber = 10;
  inline ::google::protobuf::int32 sealtype() const;
  inline void set_sealtype(::google::protobuf::int32 value);

  // required int32 MaterialID = 11;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 11;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required double PreMill = 12;
  inline bool has_premill() const;
  inline void clear_premill();
  static const int kPreMillFieldNumber = 12;
  inline double premill() const;
  inline void set_premill(double value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabDoorBoardSealInfo)
 private:
  inline void set_has_cabdoorboardsealid();
  inline void clear_has_cabdoorboardsealid();
  inline void set_has_cabdoorboardid();
  inline void clear_has_cabdoorboardid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_doorboardid();
  inline void clear_has_doorboardid();
  inline void set_has_sealindex();
  inline void clear_has_sealindex();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_sealtype();
  inline void clear_has_sealtype();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_premill();
  inline void clear_has_premill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdoorboardsealid_;
  ::google::protobuf::int32 cabdoorboardid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 doorboardid_;
  ::google::protobuf::int32 sealindex_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 sealtype_;
  double premill_;
  ::google::protobuf::int32 materialid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabDoorBoardSealInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabDoorHWFInfo : public ::google::protobuf::Message {
 public:
  SJ_CabDoorHWFInfo();
  virtual ~SJ_CabDoorHWFInfo();

  SJ_CabDoorHWFInfo(const SJ_CabDoorHWFInfo& from);

  inline SJ_CabDoorHWFInfo& operator=(const SJ_CabDoorHWFInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabDoorHWFInfo& default_instance();

  void Swap(SJ_CabDoorHWFInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabDoorHWFInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabDoorHWFInfo& from);
  void MergeFrom(const SJ_CabDoorHWFInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDoorHWFID = 1;
  inline bool has_cabdoorhwfid() const;
  inline void clear_cabdoorhwfid();
  static const int kCabDoorHWFIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdoorhwfid() const;
  inline void set_cabdoorhwfid(::google::protobuf::int32 value);

  // required int32 CabDoorRegionID = 2;
  inline bool has_cabdoorregionid() const;
  inline void clear_cabdoorregionid();
  static const int kCabDoorRegionIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabdoorregionid() const;
  inline void set_cabdoorregionid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 HWFittingID = 6;
  inline bool has_hwfittingid() const;
  inline void clear_hwfittingid();
  static const int kHWFittingIDFieldNumber = 6;
  inline ::google::protobuf::int32 hwfittingid() const;
  inline void set_hwfittingid(::google::protobuf::int32 value);

  // required int32 FactoryID = 7;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 7;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 8;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 8;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 SupplyType = 9;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 9;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 10;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 10;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 SettingCountRuleID = 11;
  inline bool has_settingcountruleid() const;
  inline void clear_settingcountruleid();
  static const int kSettingCountRuleIDFieldNumber = 11;
  inline ::google::protobuf::int32 settingcountruleid() const;
  inline void set_settingcountruleid(::google::protobuf::int32 value);

  // required int32 UseCount = 12;
  inline bool has_usecount() const;
  inline void clear_usecount();
  static const int kUseCountFieldNumber = 12;
  inline ::google::protobuf::int32 usecount() const;
  inline void set_usecount(::google::protobuf::int32 value);

  // required int32 CreatorID = 13;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 13;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 14;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 14;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 15;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 15;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 16;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 16;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabDoorHWFInfo)
 private:
  inline void set_has_cabdoorhwfid();
  inline void clear_has_cabdoorhwfid();
  inline void set_has_cabdoorregionid();
  inline void clear_has_cabdoorregionid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_hwfittingid();
  inline void clear_has_hwfittingid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_settingcountruleid();
  inline void clear_has_settingcountruleid();
  inline void set_has_usecount();
  inline void clear_has_usecount();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdoorhwfid_;
  ::google::protobuf::int32 cabdoorregionid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 hwfittingid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 settingcountruleid_;
  ::google::protobuf::int32 usecount_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabDoorHWFInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabDoorHandleInfo : public ::google::protobuf::Message {
 public:
  SJ_CabDoorHandleInfo();
  virtual ~SJ_CabDoorHandleInfo();

  SJ_CabDoorHandleInfo(const SJ_CabDoorHandleInfo& from);

  inline SJ_CabDoorHandleInfo& operator=(const SJ_CabDoorHandleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabDoorHandleInfo& default_instance();

  void Swap(SJ_CabDoorHandleInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabDoorHandleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabDoorHandleInfo& from);
  void MergeFrom(const SJ_CabDoorHandleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDoorHandleID = 1;
  inline bool has_cabdoorhandleid() const;
  inline void clear_cabdoorhandleid();
  static const int kCabDoorHandleIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdoorhandleid() const;
  inline void set_cabdoorhandleid(::google::protobuf::int32 value);

  // required int32 CabParentID = 2;
  inline bool has_cabparentid() const;
  inline void clear_cabparentid();
  static const int kCabParentIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabparentid() const;
  inline void set_cabparentid(::google::protobuf::int32 value);

  // required int32 ParentType = 3;
  inline bool has_parenttype() const;
  inline void clear_parenttype();
  static const int kParentTypeFieldNumber = 3;
  inline ::google::protobuf::int32 parenttype() const;
  inline void set_parenttype(::google::protobuf::int32 value);

  // required int32 OrderCate = 4;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 4;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 5;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 5;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 6;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 6;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 CabDesignDoorRegionID = 7;
  inline bool has_cabdesigndoorregionid() const;
  inline void clear_cabdesigndoorregionid();
  static const int kCabDesignDoorRegionIDFieldNumber = 7;
  inline ::google::protobuf::int32 cabdesigndoorregionid() const;
  inline void set_cabdesigndoorregionid(::google::protobuf::int32 value);

  // required int32 CabDesignDoorRegionHandleID = 8;
  inline bool has_cabdesigndoorregionhandleid() const;
  inline void clear_cabdesigndoorregionhandleid();
  static const int kCabDesignDoorRegionHandleIDFieldNumber = 8;
  inline ::google::protobuf::int32 cabdesigndoorregionhandleid() const;
  inline void set_cabdesigndoorregionhandleid(::google::protobuf::int32 value);

  // required int32 OwnerID = 9;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwnerIDFieldNumber = 9;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // required int32 DoorMatPlanID = 10;
  inline bool has_doormatplanid() const;
  inline void clear_doormatplanid();
  static const int kDoorMatPlanIDFieldNumber = 10;
  inline ::google::protobuf::int32 doormatplanid() const;
  inline void set_doormatplanid(::google::protobuf::int32 value);

  // required int32 HandleID = 11;
  inline bool has_handleid() const;
  inline void clear_handleid();
  static const int kHandleIDFieldNumber = 11;
  inline ::google::protobuf::int32 handleid() const;
  inline void set_handleid(::google::protobuf::int32 value);

  // required int32 FactoryID = 12;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 12;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 13;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 13;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 MatchType = 14;
  inline bool has_matchtype() const;
  inline void clear_matchtype();
  static const int kMatchTypeFieldNumber = 14;
  inline ::google::protobuf::int32 matchtype() const;
  inline void set_matchtype(::google::protobuf::int32 value);

  // required bool IsChangedOffset = 15;
  inline bool has_ischangedoffset() const;
  inline void clear_ischangedoffset();
  static const int kIsChangedOffsetFieldNumber = 15;
  inline bool ischangedoffset() const;
  inline void set_ischangedoffset(bool value);

  // required int32 SupplyType = 16;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 16;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 17;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 17;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 XDock = 18;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 18;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 19;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 19;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 20;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 20;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required double XLen = 21;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 21;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 22;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 22;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 23;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 23;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double RealXLen = 24;
  inline bool has_realxlen() const;
  inline void clear_realxlen();
  static const int kRealXLenFieldNumber = 24;
  inline double realxlen() const;
  inline void set_realxlen(double value);

  // required double RealYLen = 25;
  inline bool has_realylen() const;
  inline void clear_realylen();
  static const int kRealYLenFieldNumber = 25;
  inline double realylen() const;
  inline void set_realylen(double value);

  // required double RealZLen = 26;
  inline bool has_realzlen() const;
  inline void clear_realzlen();
  static const int kRealZLenFieldNumber = 26;
  inline double realzlen() const;
  inline void set_realzlen(double value);

  // required double XOffsetLen = 27;
  inline bool has_xoffsetlen() const;
  inline void clear_xoffsetlen();
  static const int kXOffsetLenFieldNumber = 27;
  inline double xoffsetlen() const;
  inline void set_xoffsetlen(double value);

  // required double YOffsetLen = 28;
  inline bool has_yoffsetlen() const;
  inline void clear_yoffsetlen();
  static const int kYOffsetLenFieldNumber = 28;
  inline double yoffsetlen() const;
  inline void set_yoffsetlen(double value);

  // required double ZOffsetLen = 29;
  inline bool has_zoffsetlen() const;
  inline void clear_zoffsetlen();
  static const int kZOffsetLenFieldNumber = 29;
  inline double zoffsetlen() const;
  inline void set_zoffsetlen(double value);

  // required double ArcZ = 30;
  inline bool has_arcz() const;
  inline void clear_arcz();
  static const int kArcZFieldNumber = 30;
  inline double arcz() const;
  inline void set_arcz(double value);

  // required int32 CreatorID = 31;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 31;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 32;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 32;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 33;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 33;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 34;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 34;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabDoorHandleInfo)
 private:
  inline void set_has_cabdoorhandleid();
  inline void clear_has_cabdoorhandleid();
  inline void set_has_cabparentid();
  inline void clear_has_cabparentid();
  inline void set_has_parenttype();
  inline void clear_has_parenttype();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_cabdesigndoorregionid();
  inline void clear_has_cabdesigndoorregionid();
  inline void set_has_cabdesigndoorregionhandleid();
  inline void clear_has_cabdesigndoorregionhandleid();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_doormatplanid();
  inline void clear_has_doormatplanid();
  inline void set_has_handleid();
  inline void clear_has_handleid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_matchtype();
  inline void clear_has_matchtype();
  inline void set_has_ischangedoffset();
  inline void clear_has_ischangedoffset();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_realxlen();
  inline void clear_has_realxlen();
  inline void set_has_realylen();
  inline void clear_has_realylen();
  inline void set_has_realzlen();
  inline void clear_has_realzlen();
  inline void set_has_xoffsetlen();
  inline void clear_has_xoffsetlen();
  inline void set_has_yoffsetlen();
  inline void clear_has_yoffsetlen();
  inline void set_has_zoffsetlen();
  inline void clear_has_zoffsetlen();
  inline void set_has_arcz();
  inline void clear_has_arcz();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdoorhandleid_;
  ::google::protobuf::int32 cabparentid_;
  ::google::protobuf::int32 parenttype_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 cabdesigndoorregionid_;
  ::google::protobuf::int32 cabdesigndoorregionhandleid_;
  ::google::protobuf::int32 ownerid_;
  ::google::protobuf::int32 doormatplanid_;
  ::google::protobuf::int32 handleid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 matchtype_;
  bool ischangedoffset_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 xdock_;
  ::google::protobuf::int32 ydock_;
  ::google::protobuf::int32 zdock_;
  double xlen_;
  double ylen_;
  double zlen_;
  double realxlen_;
  double realylen_;
  double realzlen_;
  double xoffsetlen_;
  double yoffsetlen_;
  double zoffsetlen_;
  double arcz_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(34 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabDoorHandleInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabDoorInfo : public ::google::protobuf::Message {
 public:
  SJ_CabDoorInfo();
  virtual ~SJ_CabDoorInfo();

  SJ_CabDoorInfo(const SJ_CabDoorInfo& from);

  inline SJ_CabDoorInfo& operator=(const SJ_CabDoorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabDoorInfo& default_instance();

  void Swap(SJ_CabDoorInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabDoorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabDoorInfo& from);
  void MergeFrom(const SJ_CabDoorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDoorID = 1;
  inline bool has_cabdoorid() const;
  inline void clear_cabdoorid();
  static const int kCabDoorIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdoorid() const;
  inline void set_cabdoorid(::google::protobuf::int32 value);

  // required int32 CabParentID = 2;
  inline bool has_cabparentid() const;
  inline void clear_cabparentid();
  static const int kCabParentIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabparentid() const;
  inline void set_cabparentid(::google::protobuf::int32 value);

  // required int32 ParentType = 3;
  inline bool has_parenttype() const;
  inline void clear_parenttype();
  static const int kParentTypeFieldNumber = 3;
  inline ::google::protobuf::int32 parenttype() const;
  inline void set_parenttype(::google::protobuf::int32 value);

  // required int32 OrderCate = 4;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 4;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 5;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 5;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 6;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 6;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 OwnerID = 7;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwnerIDFieldNumber = 7;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // required int32 DoorMatPlanID = 8;
  inline bool has_doormatplanid() const;
  inline void clear_doormatplanid();
  static const int kDoorMatPlanIDFieldNumber = 8;
  inline ::google::protobuf::int32 doormatplanid() const;
  inline void set_doormatplanid(::google::protobuf::int32 value);

  // required int32 DoorID = 9;
  inline bool has_doorid() const;
  inline void clear_doorid();
  static const int kDoorIDFieldNumber = 9;
  inline ::google::protobuf::int32 doorid() const;
  inline void set_doorid(::google::protobuf::int32 value);

  // required int32 FactoryID = 10;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 10;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 11;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 11;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required double XLen = 12;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 12;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 13;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 13;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 14;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 14;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required int32 CreatorID = 15;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 15;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 16;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 16;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 17;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 17;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 18;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 18;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabDoorInfo)
 private:
  inline void set_has_cabdoorid();
  inline void clear_has_cabdoorid();
  inline void set_has_cabparentid();
  inline void clear_has_cabparentid();
  inline void set_has_parenttype();
  inline void clear_has_parenttype();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_doormatplanid();
  inline void clear_has_doormatplanid();
  inline void set_has_doorid();
  inline void clear_has_doorid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdoorid_;
  ::google::protobuf::int32 cabparentid_;
  ::google::protobuf::int32 parenttype_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 ownerid_;
  ::google::protobuf::int32 doormatplanid_;
  ::google::protobuf::int32 doorid_;
  ::google::protobuf::int64 vercode_;
  double xlen_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  double ylen_;
  double zlen_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabDoorInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabDoorRegionInfo : public ::google::protobuf::Message {
 public:
  SJ_CabDoorRegionInfo();
  virtual ~SJ_CabDoorRegionInfo();

  SJ_CabDoorRegionInfo(const SJ_CabDoorRegionInfo& from);

  inline SJ_CabDoorRegionInfo& operator=(const SJ_CabDoorRegionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabDoorRegionInfo& default_instance();

  void Swap(SJ_CabDoorRegionInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabDoorRegionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabDoorRegionInfo& from);
  void MergeFrom(const SJ_CabDoorRegionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDoorRegionID = 1;
  inline bool has_cabdoorregionid() const;
  inline void clear_cabdoorregionid();
  static const int kCabDoorRegionIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdoorregionid() const;
  inline void set_cabdoorregionid(::google::protobuf::int32 value);

  // required int32 CabDoorSystemID = 2;
  inline bool has_cabdoorsystemid() const;
  inline void clear_cabdoorsystemid();
  static const int kCabDoorSystemIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabdoorsystemid() const;
  inline void set_cabdoorsystemid(::google::protobuf::int32 value);

  // required int32 ParentCabRegionID = 3;
  inline bool has_parentcabregionid() const;
  inline void clear_parentcabregionid();
  static const int kParentCabRegionIDFieldNumber = 3;
  inline ::google::protobuf::int32 parentcabregionid() const;
  inline void set_parentcabregionid(::google::protobuf::int32 value);

  // required int32 OrderCate = 4;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 4;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 5;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 5;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 6;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 6;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 DoorSystemRegionID = 7;
  inline bool has_doorsystemregionid() const;
  inline void clear_doorsystemregionid();
  static const int kDoorSystemRegionIDFieldNumber = 7;
  inline ::google::protobuf::int32 doorsystemregionid() const;
  inline void set_doorsystemregionid(::google::protobuf::int32 value);

  // required int32 DoorSystemID = 8;
  inline bool has_doorsystemid() const;
  inline void clear_doorsystemid();
  static const int kDoorSystemIDFieldNumber = 8;
  inline ::google::protobuf::int32 doorsystemid() const;
  inline void set_doorsystemid(::google::protobuf::int32 value);

  // required int32 CabDesignDoorRegionID = 9;
  inline bool has_cabdesigndoorregionid() const;
  inline void clear_cabdesigndoorregionid();
  static const int kCabDesignDoorRegionIDFieldNumber = 9;
  inline ::google::protobuf::int32 cabdesigndoorregionid() const;
  inline void set_cabdesigndoorregionid(::google::protobuf::int32 value);

  // required int32 CabDesignDoorSystemID = 10;
  inline bool has_cabdesigndoorsystemid() const;
  inline void clear_cabdesigndoorsystemid();
  static const int kCabDesignDoorSystemIDFieldNumber = 10;
  inline ::google::protobuf::int32 cabdesigndoorsystemid() const;
  inline void set_cabdesigndoorsystemid(::google::protobuf::int32 value);

  // required int32 CabDesignID = 11;
  inline bool has_cabdesignid() const;
  inline void clear_cabdesignid();
  static const int kCabDesignIDFieldNumber = 11;
  inline ::google::protobuf::int32 cabdesignid() const;
  inline void set_cabdesignid(::google::protobuf::int32 value);

  // required int32 FactoryID = 12;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 12;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 13;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 13;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required bool IsUserDefineSize = 14;
  inline bool has_isuserdefinesize() const;
  inline void clear_isuserdefinesize();
  static const int kIsUserDefineSizeFieldNumber = 14;
  inline bool isuserdefinesize() const;
  inline void set_isuserdefinesize(bool value);

  // required bool IsUserDefinePos = 15;
  inline bool has_isuserdefinepos() const;
  inline void clear_isuserdefinepos();
  static const int kIsUserDefinePosFieldNumber = 15;
  inline bool isuserdefinepos() const;
  inline void set_isuserdefinepos(bool value);

  // required int32 XDock = 16;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 16;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 17;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 17;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 18;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 18;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required double XLen = 19;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 19;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 20;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 20;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 21;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 21;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double XAdjustLen = 22;
  inline bool has_xadjustlen() const;
  inline void clear_xadjustlen();
  static const int kXAdjustLenFieldNumber = 22;
  inline double xadjustlen() const;
  inline void set_xadjustlen(double value);

  // required double YAdjustLen = 23;
  inline bool has_yadjustlen() const;
  inline void clear_yadjustlen();
  static const int kYAdjustLenFieldNumber = 23;
  inline double yadjustlen() const;
  inline void set_yadjustlen(double value);

  // required double RealXLen = 24;
  inline bool has_realxlen() const;
  inline void clear_realxlen();
  static const int kRealXLenFieldNumber = 24;
  inline double realxlen() const;
  inline void set_realxlen(double value);

  // required double RealYLen = 25;
  inline bool has_realylen() const;
  inline void clear_realylen();
  static const int kRealYLenFieldNumber = 25;
  inline double realylen() const;
  inline void set_realylen(double value);

  // required double RealZLen = 26;
  inline bool has_realzlen() const;
  inline void clear_realzlen();
  static const int kRealZLenFieldNumber = 26;
  inline double realzlen() const;
  inline void set_realzlen(double value);

  // required double CutXLen = 27;
  inline bool has_cutxlen() const;
  inline void clear_cutxlen();
  static const int kCutXLenFieldNumber = 27;
  inline double cutxlen() const;
  inline void set_cutxlen(double value);

  // required double CutYLen = 28;
  inline bool has_cutylen() const;
  inline void clear_cutylen();
  static const int kCutYLenFieldNumber = 28;
  inline double cutylen() const;
  inline void set_cutylen(double value);

  // required double XOffsetLen = 29;
  inline bool has_xoffsetlen() const;
  inline void clear_xoffsetlen();
  static const int kXOffsetLenFieldNumber = 29;
  inline double xoffsetlen() const;
  inline void set_xoffsetlen(double value);

  // required double YOffsetLen = 30;
  inline bool has_yoffsetlen() const;
  inline void clear_yoffsetlen();
  static const int kYOffsetLenFieldNumber = 30;
  inline double yoffsetlen() const;
  inline void set_yoffsetlen(double value);

  // required double ZOffsetLen = 31;
  inline bool has_zoffsetlen() const;
  inline void clear_zoffsetlen();
  static const int kZOffsetLenFieldNumber = 31;
  inline double zoffsetlen() const;
  inline void set_zoffsetlen(double value);

  // required double RealXOffsetLen = 32;
  inline bool has_realxoffsetlen() const;
  inline void clear_realxoffsetlen();
  static const int kRealXOffsetLenFieldNumber = 32;
  inline double realxoffsetlen() const;
  inline void set_realxoffsetlen(double value);

  // required double RealYOffsetLen = 33;
  inline bool has_realyoffsetlen() const;
  inline void clear_realyoffsetlen();
  static const int kRealYOffsetLenFieldNumber = 33;
  inline double realyoffsetlen() const;
  inline void set_realyoffsetlen(double value);

  // required double RealZOffsetLen = 34;
  inline bool has_realzoffsetlen() const;
  inline void clear_realzoffsetlen();
  static const int kRealZOffsetLenFieldNumber = 34;
  inline double realzoffsetlen() const;
  inline void set_realzoffsetlen(double value);

  // required int32 CreatorID = 35;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 35;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 36;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 36;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 37;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 37;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 38;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 38;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabDoorRegionInfo)
 private:
  inline void set_has_cabdoorregionid();
  inline void clear_has_cabdoorregionid();
  inline void set_has_cabdoorsystemid();
  inline void clear_has_cabdoorsystemid();
  inline void set_has_parentcabregionid();
  inline void clear_has_parentcabregionid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_doorsystemregionid();
  inline void clear_has_doorsystemregionid();
  inline void set_has_doorsystemid();
  inline void clear_has_doorsystemid();
  inline void set_has_cabdesigndoorregionid();
  inline void clear_has_cabdesigndoorregionid();
  inline void set_has_cabdesigndoorsystemid();
  inline void clear_has_cabdesigndoorsystemid();
  inline void set_has_cabdesignid();
  inline void clear_has_cabdesignid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_isuserdefinesize();
  inline void clear_has_isuserdefinesize();
  inline void set_has_isuserdefinepos();
  inline void clear_has_isuserdefinepos();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_xadjustlen();
  inline void clear_has_xadjustlen();
  inline void set_has_yadjustlen();
  inline void clear_has_yadjustlen();
  inline void set_has_realxlen();
  inline void clear_has_realxlen();
  inline void set_has_realylen();
  inline void clear_has_realylen();
  inline void set_has_realzlen();
  inline void clear_has_realzlen();
  inline void set_has_cutxlen();
  inline void clear_has_cutxlen();
  inline void set_has_cutylen();
  inline void clear_has_cutylen();
  inline void set_has_xoffsetlen();
  inline void clear_has_xoffsetlen();
  inline void set_has_yoffsetlen();
  inline void clear_has_yoffsetlen();
  inline void set_has_zoffsetlen();
  inline void clear_has_zoffsetlen();
  inline void set_has_realxoffsetlen();
  inline void clear_has_realxoffsetlen();
  inline void set_has_realyoffsetlen();
  inline void clear_has_realyoffsetlen();
  inline void set_has_realzoffsetlen();
  inline void clear_has_realzoffsetlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdoorregionid_;
  ::google::protobuf::int32 cabdoorsystemid_;
  ::google::protobuf::int32 parentcabregionid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 doorsystemregionid_;
  ::google::protobuf::int32 doorsystemid_;
  ::google::protobuf::int32 cabdesigndoorregionid_;
  ::google::protobuf::int32 cabdesigndoorsystemid_;
  ::google::protobuf::int32 cabdesignid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  bool isuserdefinesize_;
  bool isuserdefinepos_;
  ::google::protobuf::int32 xdock_;
  ::google::protobuf::int32 ydock_;
  double xlen_;
  double ylen_;
  double zlen_;
  double xadjustlen_;
  double yadjustlen_;
  double realxlen_;
  double realylen_;
  double realzlen_;
  ::google::protobuf::int32 zdock_;
  ::google::protobuf::int32 creatorid_;
  double cutxlen_;
  double cutylen_;
  double xoffsetlen_;
  double yoffsetlen_;
  double zoffsetlen_;
  double realxoffsetlen_;
  double realyoffsetlen_;
  double realzoffsetlen_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(38 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabDoorRegionInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabDoorSlideInfo : public ::google::protobuf::Message {
 public:
  SJ_CabDoorSlideInfo();
  virtual ~SJ_CabDoorSlideInfo();

  SJ_CabDoorSlideInfo(const SJ_CabDoorSlideInfo& from);

  inline SJ_CabDoorSlideInfo& operator=(const SJ_CabDoorSlideInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabDoorSlideInfo& default_instance();

  void Swap(SJ_CabDoorSlideInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabDoorSlideInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabDoorSlideInfo& from);
  void MergeFrom(const SJ_CabDoorSlideInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDoorSlideID = 1;
  inline bool has_cabdoorslideid() const;
  inline void clear_cabdoorslideid();
  static const int kCabDoorSlideIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdoorslideid() const;
  inline void set_cabdoorslideid(::google::protobuf::int32 value);

  // required int32 CabDoorRegionID = 2;
  inline bool has_cabdoorregionid() const;
  inline void clear_cabdoorregionid();
  static const int kCabDoorRegionIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabdoorregionid() const;
  inline void set_cabdoorregionid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 DoorSystemRegionID = 6;
  inline bool has_doorsystemregionid() const;
  inline void clear_doorsystemregionid();
  static const int kDoorSystemRegionIDFieldNumber = 6;
  inline ::google::protobuf::int32 doorsystemregionid() const;
  inline void set_doorsystemregionid(::google::protobuf::int32 value);

  // required int32 SlideID = 7;
  inline bool has_slideid() const;
  inline void clear_slideid();
  static const int kSlideIDFieldNumber = 7;
  inline ::google::protobuf::int32 slideid() const;
  inline void set_slideid(::google::protobuf::int32 value);

  // required int32 GTypeID = 8;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 8;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 FactoryID = 9;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 9;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 10;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 10;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 SlidePosition = 11;
  inline bool has_slideposition() const;
  inline void clear_slideposition();
  static const int kSlidePositionFieldNumber = 11;
  inline ::google::protobuf::int32 slideposition() const;
  inline void set_slideposition(::google::protobuf::int32 value);

  // required int32 SupplyType = 12;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 12;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required double XLen = 13;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 13;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 14;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 14;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 15;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 15;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double RealXLen = 16;
  inline bool has_realxlen() const;
  inline void clear_realxlen();
  static const int kRealXLenFieldNumber = 16;
  inline double realxlen() const;
  inline void set_realxlen(double value);

  // required double RealYLen = 17;
  inline bool has_realylen() const;
  inline void clear_realylen();
  static const int kRealYLenFieldNumber = 17;
  inline double realylen() const;
  inline void set_realylen(double value);

  // required double RealZLen = 18;
  inline bool has_realzlen() const;
  inline void clear_realzlen();
  static const int kRealZLenFieldNumber = 18;
  inline double realzlen() const;
  inline void set_realzlen(double value);

  // required double XOffsetLen = 19;
  inline bool has_xoffsetlen() const;
  inline void clear_xoffsetlen();
  static const int kXOffsetLenFieldNumber = 19;
  inline double xoffsetlen() const;
  inline void set_xoffsetlen(double value);

  // required double YOffsetLen = 20;
  inline bool has_yoffsetlen() const;
  inline void clear_yoffsetlen();
  static const int kYOffsetLenFieldNumber = 20;
  inline double yoffsetlen() const;
  inline void set_yoffsetlen(double value);

  // required double ZOffsetLen = 21;
  inline bool has_zoffsetlen() const;
  inline void clear_zoffsetlen();
  static const int kZOffsetLenFieldNumber = 21;
  inline double zoffsetlen() const;
  inline void set_zoffsetlen(double value);

  // required int32 CreatorID = 22;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 22;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 23;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 23;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 24;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 24;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 25;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 25;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabDoorSlideInfo)
 private:
  inline void set_has_cabdoorslideid();
  inline void clear_has_cabdoorslideid();
  inline void set_has_cabdoorregionid();
  inline void clear_has_cabdoorregionid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_doorsystemregionid();
  inline void clear_has_doorsystemregionid();
  inline void set_has_slideid();
  inline void clear_has_slideid();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_slideposition();
  inline void clear_has_slideposition();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_realxlen();
  inline void clear_has_realxlen();
  inline void set_has_realylen();
  inline void clear_has_realylen();
  inline void set_has_realzlen();
  inline void clear_has_realzlen();
  inline void set_has_xoffsetlen();
  inline void clear_has_xoffsetlen();
  inline void set_has_yoffsetlen();
  inline void clear_has_yoffsetlen();
  inline void set_has_zoffsetlen();
  inline void clear_has_zoffsetlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdoorslideid_;
  ::google::protobuf::int32 cabdoorregionid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 doorsystemregionid_;
  ::google::protobuf::int32 slideid_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 slideposition_;
  ::google::protobuf::int32 supplytype_;
  double xlen_;
  double ylen_;
  double zlen_;
  double realxlen_;
  double realylen_;
  double realzlen_;
  double xoffsetlen_;
  double yoffsetlen_;
  double zoffsetlen_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabDoorSlideInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabDoorSystemInfo : public ::google::protobuf::Message {
 public:
  SJ_CabDoorSystemInfo();
  virtual ~SJ_CabDoorSystemInfo();

  SJ_CabDoorSystemInfo(const SJ_CabDoorSystemInfo& from);

  inline SJ_CabDoorSystemInfo& operator=(const SJ_CabDoorSystemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabDoorSystemInfo& default_instance();

  void Swap(SJ_CabDoorSystemInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabDoorSystemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabDoorSystemInfo& from);
  void MergeFrom(const SJ_CabDoorSystemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDoorSystemID = 1;
  inline bool has_cabdoorsystemid() const;
  inline void clear_cabdoorsystemid();
  static const int kCabDoorSystemIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdoorsystemid() const;
  inline void set_cabdoorsystemid(::google::protobuf::int32 value);

  // required int32 CabID = 2;
  inline bool has_cabid() const;
  inline void clear_cabid();
  static const int kCabIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabid() const;
  inline void set_cabid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 CabDesignDoorSystemID = 6;
  inline bool has_cabdesigndoorsystemid() const;
  inline void clear_cabdesigndoorsystemid();
  static const int kCabDesignDoorSystemIDFieldNumber = 6;
  inline ::google::protobuf::int32 cabdesigndoorsystemid() const;
  inline void set_cabdesigndoorsystemid(::google::protobuf::int32 value);

  // required int32 CabDesignID = 7;
  inline bool has_cabdesignid() const;
  inline void clear_cabdesignid();
  static const int kCabDesignIDFieldNumber = 7;
  inline ::google::protobuf::int32 cabdesignid() const;
  inline void set_cabdesignid(::google::protobuf::int32 value);

  // required int32 FactoryID = 8;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 8;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 9;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 9;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 DoorSystemID = 10;
  inline bool has_doorsystemid() const;
  inline void clear_doorsystemid();
  static const int kDoorSystemIDFieldNumber = 10;
  inline ::google::protobuf::int32 doorsystemid() const;
  inline void set_doorsystemid(::google::protobuf::int32 value);

  // required int32 DoorMatPlanID = 11;
  inline bool has_doormatplanid() const;
  inline void clear_doormatplanid();
  static const int kDoorMatPlanIDFieldNumber = 11;
  inline ::google::protobuf::int32 doormatplanid() const;
  inline void set_doormatplanid(::google::protobuf::int32 value);

  // required int32 SupplyType = 12;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 12;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required bool IsFakeDel = 13;
  inline bool has_isfakedel() const;
  inline void clear_isfakedel();
  static const int kIsFakeDelFieldNumber = 13;
  inline bool isfakedel() const;
  inline void set_isfakedel(bool value);

  // required int32 XDock = 14;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 14;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 15;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 15;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 16;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 16;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required double XLen = 17;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 17;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 18;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 18;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 19;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 19;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double XAdjustLen = 20;
  inline bool has_xadjustlen() const;
  inline void clear_xadjustlen();
  static const int kXAdjustLenFieldNumber = 20;
  inline double xadjustlen() const;
  inline void set_xadjustlen(double value);

  // required double YAdjustLen = 21;
  inline bool has_yadjustlen() const;
  inline void clear_yadjustlen();
  static const int kYAdjustLenFieldNumber = 21;
  inline double yadjustlen() const;
  inline void set_yadjustlen(double value);

  // required double RealXLen = 22;
  inline bool has_realxlen() const;
  inline void clear_realxlen();
  static const int kRealXLenFieldNumber = 22;
  inline double realxlen() const;
  inline void set_realxlen(double value);

  // required double RealYLen = 23;
  inline bool has_realylen() const;
  inline void clear_realylen();
  static const int kRealYLenFieldNumber = 23;
  inline double realylen() const;
  inline void set_realylen(double value);

  // required double RealZLen = 24;
  inline bool has_realzlen() const;
  inline void clear_realzlen();
  static const int kRealZLenFieldNumber = 24;
  inline double realzlen() const;
  inline void set_realzlen(double value);

  // required double XOffsetLen = 25;
  inline bool has_xoffsetlen() const;
  inline void clear_xoffsetlen();
  static const int kXOffsetLenFieldNumber = 25;
  inline double xoffsetlen() const;
  inline void set_xoffsetlen(double value);

  // required double YOffsetLen = 26;
  inline bool has_yoffsetlen() const;
  inline void clear_yoffsetlen();
  static const int kYOffsetLenFieldNumber = 26;
  inline double yoffsetlen() const;
  inline void set_yoffsetlen(double value);

  // required double ZOffsetLen = 27;
  inline bool has_zoffsetlen() const;
  inline void clear_zoffsetlen();
  static const int kZOffsetLenFieldNumber = 27;
  inline double zoffsetlen() const;
  inline void set_zoffsetlen(double value);

  // required double RealXOffsetLen = 28;
  inline bool has_realxoffsetlen() const;
  inline void clear_realxoffsetlen();
  static const int kRealXOffsetLenFieldNumber = 28;
  inline double realxoffsetlen() const;
  inline void set_realxoffsetlen(double value);

  // required double RealYOffsetLen = 29;
  inline bool has_realyoffsetlen() const;
  inline void clear_realyoffsetlen();
  static const int kRealYOffsetLenFieldNumber = 29;
  inline double realyoffsetlen() const;
  inline void set_realyoffsetlen(double value);

  // required double RealZOffsetLen = 30;
  inline bool has_realzoffsetlen() const;
  inline void clear_realzoffsetlen();
  static const int kRealZOffsetLenFieldNumber = 30;
  inline double realzoffsetlen() const;
  inline void set_realzoffsetlen(double value);

  // required int32 CreatorID = 31;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 31;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 32;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 32;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 33;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 33;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 34;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 34;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabDoorSystemInfo)
 private:
  inline void set_has_cabdoorsystemid();
  inline void clear_has_cabdoorsystemid();
  inline void set_has_cabid();
  inline void clear_has_cabid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_cabdesigndoorsystemid();
  inline void clear_has_cabdesigndoorsystemid();
  inline void set_has_cabdesignid();
  inline void clear_has_cabdesignid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_doorsystemid();
  inline void clear_has_doorsystemid();
  inline void set_has_doormatplanid();
  inline void clear_has_doormatplanid();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_isfakedel();
  inline void clear_has_isfakedel();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_xadjustlen();
  inline void clear_has_xadjustlen();
  inline void set_has_yadjustlen();
  inline void clear_has_yadjustlen();
  inline void set_has_realxlen();
  inline void clear_has_realxlen();
  inline void set_has_realylen();
  inline void clear_has_realylen();
  inline void set_has_realzlen();
  inline void clear_has_realzlen();
  inline void set_has_xoffsetlen();
  inline void clear_has_xoffsetlen();
  inline void set_has_yoffsetlen();
  inline void clear_has_yoffsetlen();
  inline void set_has_zoffsetlen();
  inline void clear_has_zoffsetlen();
  inline void set_has_realxoffsetlen();
  inline void clear_has_realxoffsetlen();
  inline void set_has_realyoffsetlen();
  inline void clear_has_realyoffsetlen();
  inline void set_has_realzoffsetlen();
  inline void clear_has_realzoffsetlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdoorsystemid_;
  ::google::protobuf::int32 cabid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 cabdesigndoorsystemid_;
  ::google::protobuf::int32 cabdesignid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 doorsystemid_;
  ::google::protobuf::int32 doormatplanid_;
  ::google::protobuf::int32 supplytype_;
  bool isfakedel_;
  ::google::protobuf::int32 xdock_;
  ::google::protobuf::int32 ydock_;
  ::google::protobuf::int32 zdock_;
  double xlen_;
  double ylen_;
  double zlen_;
  double xadjustlen_;
  double yadjustlen_;
  double realxlen_;
  double realylen_;
  double realzlen_;
  double xoffsetlen_;
  double yoffsetlen_;
  double zoffsetlen_;
  double realxoffsetlen_;
  double realyoffsetlen_;
  double realzoffsetlen_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(34 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabDoorSystemInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabFNFHWFInfo : public ::google::protobuf::Message {
 public:
  SJ_CabFNFHWFInfo();
  virtual ~SJ_CabFNFHWFInfo();

  SJ_CabFNFHWFInfo(const SJ_CabFNFHWFInfo& from);

  inline SJ_CabFNFHWFInfo& operator=(const SJ_CabFNFHWFInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabFNFHWFInfo& default_instance();

  void Swap(SJ_CabFNFHWFInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabFNFHWFInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabFNFHWFInfo& from);
  void MergeFrom(const SJ_CabFNFHWFInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabFNFHWFID = 1;
  inline bool has_cabfnfhwfid() const;
  inline void clear_cabfnfhwfid();
  static const int kCabFNFHWFIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabfnfhwfid() const;
  inline void set_cabfnfhwfid(::google::protobuf::int32 value);

  // required int32 CabFNFID = 2;
  inline bool has_cabfnfid() const;
  inline void clear_cabfnfid();
  static const int kCabFNFIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabfnfid() const;
  inline void set_cabfnfid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 FNFittingID = 6;
  inline bool has_fnfittingid() const;
  inline void clear_fnfittingid();
  static const int kFNFittingIDFieldNumber = 6;
  inline ::google::protobuf::int32 fnfittingid() const;
  inline void set_fnfittingid(::google::protobuf::int32 value);

  // required int32 HWFittingID = 7;
  inline bool has_hwfittingid() const;
  inline void clear_hwfittingid();
  static const int kHWFittingIDFieldNumber = 7;
  inline ::google::protobuf::int32 hwfittingid() const;
  inline void set_hwfittingid(::google::protobuf::int32 value);

  // required int32 FittingType = 8;
  inline bool has_fittingtype() const;
  inline void clear_fittingtype();
  static const int kFittingTypeFieldNumber = 8;
  inline ::google::protobuf::int32 fittingtype() const;
  inline void set_fittingtype(::google::protobuf::int32 value);

  // required int32 FactoryID = 9;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 9;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 10;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 10;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 IsFakeDel = 11;
  inline bool has_isfakedel() const;
  inline void clear_isfakedel();
  static const int kIsFakeDelFieldNumber = 11;
  inline ::google::protobuf::int32 isfakedel() const;
  inline void set_isfakedel(::google::protobuf::int32 value);

  // required int32 UseCount = 12;
  inline bool has_usecount() const;
  inline void clear_usecount();
  static const int kUseCountFieldNumber = 12;
  inline ::google::protobuf::int32 usecount() const;
  inline void set_usecount(::google::protobuf::int32 value);

  // required int32 CreatorID = 13;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 13;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 14;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 14;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 15;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 15;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 16;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 16;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabFNFHWFInfo)
 private:
  inline void set_has_cabfnfhwfid();
  inline void clear_has_cabfnfhwfid();
  inline void set_has_cabfnfid();
  inline void clear_has_cabfnfid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_fnfittingid();
  inline void clear_has_fnfittingid();
  inline void set_has_hwfittingid();
  inline void clear_has_hwfittingid();
  inline void set_has_fittingtype();
  inline void clear_has_fittingtype();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_isfakedel();
  inline void clear_has_isfakedel();
  inline void set_has_usecount();
  inline void clear_has_usecount();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabfnfhwfid_;
  ::google::protobuf::int32 cabfnfid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 fnfittingid_;
  ::google::protobuf::int32 hwfittingid_;
  ::google::protobuf::int32 fittingtype_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 isfakedel_;
  ::google::protobuf::int32 usecount_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabFNFHWFInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabFNFHoleInfo : public ::google::protobuf::Message {
 public:
  SJ_CabFNFHoleInfo();
  virtual ~SJ_CabFNFHoleInfo();

  SJ_CabFNFHoleInfo(const SJ_CabFNFHoleInfo& from);

  inline SJ_CabFNFHoleInfo& operator=(const SJ_CabFNFHoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabFNFHoleInfo& default_instance();

  void Swap(SJ_CabFNFHoleInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabFNFHoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabFNFHoleInfo& from);
  void MergeFrom(const SJ_CabFNFHoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabFNFHoleID = 1;
  inline bool has_cabfnfholeid() const;
  inline void clear_cabfnfholeid();
  static const int kCabFNFHoleIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabfnfholeid() const;
  inline void set_cabfnfholeid(::google::protobuf::int32 value);

  // required int32 CabFNFID = 2;
  inline bool has_cabfnfid() const;
  inline void clear_cabfnfid();
  static const int kCabFNFIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabfnfid() const;
  inline void set_cabfnfid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 HoleID = 6;
  inline bool has_holeid() const;
  inline void clear_holeid();
  static const int kHoleIDFieldNumber = 6;
  inline ::google::protobuf::int32 holeid() const;
  inline void set_holeid(::google::protobuf::int32 value);

  // required int32 FNFittingID = 7;
  inline bool has_fnfittingid() const;
  inline void clear_fnfittingid();
  static const int kFNFittingIDFieldNumber = 7;
  inline ::google::protobuf::int32 fnfittingid() const;
  inline void set_fnfittingid(::google::protobuf::int32 value);

  // required int32 FactoryID = 8;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 8;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 9;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 9;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 HoleTypeID = 10;
  inline bool has_holetypeid() const;
  inline void clear_holetypeid();
  static const int kHoleTypeIDFieldNumber = 10;
  inline ::google::protobuf::int32 holetypeid() const;
  inline void set_holetypeid(::google::protobuf::int32 value);

  // required int32 HolePicID = 11;
  inline bool has_holepicid() const;
  inline void clear_holepicid();
  static const int kHolePicIDFieldNumber = 11;
  inline ::google::protobuf::int32 holepicid() const;
  inline void set_holepicid(::google::protobuf::int32 value);

  // required double XLen = 12;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 12;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 13;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 13;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double OverHeight = 14;
  inline bool has_overheight() const;
  inline void clear_overheight();
  static const int kOverHeightFieldNumber = 14;
  inline double overheight() const;
  inline void set_overheight(double value);

  // required double MinXDistance = 15;
  inline bool has_minxdistance() const;
  inline void clear_minxdistance();
  static const int kMinXDistanceFieldNumber = 15;
  inline double minxdistance() const;
  inline void set_minxdistance(double value);

  // required double MinZDistance = 16;
  inline bool has_minzdistance() const;
  inline void clear_minzdistance();
  static const int kMinZDistanceFieldNumber = 16;
  inline double minzdistance() const;
  inline void set_minzdistance(double value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabFNFHoleInfo)
 private:
  inline void set_has_cabfnfholeid();
  inline void clear_has_cabfnfholeid();
  inline void set_has_cabfnfid();
  inline void clear_has_cabfnfid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_holeid();
  inline void clear_has_holeid();
  inline void set_has_fnfittingid();
  inline void clear_has_fnfittingid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_holetypeid();
  inline void clear_has_holetypeid();
  inline void set_has_holepicid();
  inline void clear_has_holepicid();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_overheight();
  inline void clear_has_overheight();
  inline void set_has_minxdistance();
  inline void clear_has_minxdistance();
  inline void set_has_minzdistance();
  inline void clear_has_minzdistance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabfnfholeid_;
  ::google::protobuf::int32 cabfnfid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 holeid_;
  ::google::protobuf::int32 fnfittingid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 holetypeid_;
  double xlen_;
  double ylen_;
  double overheight_;
  double minxdistance_;
  double minzdistance_;
  ::google::protobuf::int32 holepicid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabFNFHoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabFNFInfo : public ::google::protobuf::Message {
 public:
  SJ_CabFNFInfo();
  virtual ~SJ_CabFNFInfo();

  SJ_CabFNFInfo(const SJ_CabFNFInfo& from);

  inline SJ_CabFNFInfo& operator=(const SJ_CabFNFInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabFNFInfo& default_instance();

  void Swap(SJ_CabFNFInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabFNFInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabFNFInfo& from);
  void MergeFrom(const SJ_CabFNFInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabFNFID = 1;
  inline bool has_cabfnfid() const;
  inline void clear_cabfnfid();
  static const int kCabFNFIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabfnfid() const;
  inline void set_cabfnfid(::google::protobuf::int32 value);

  // required int32 DesignOwnerID = 2;
  inline bool has_designownerid() const;
  inline void clear_designownerid();
  static const int kDesignOwnerIDFieldNumber = 2;
  inline ::google::protobuf::int32 designownerid() const;
  inline void set_designownerid(::google::protobuf::int32 value);

  // required int32 DesignOwnerGTypeID = 3;
  inline bool has_designownergtypeid() const;
  inline void clear_designownergtypeid();
  static const int kDesignOwnerGTypeIDFieldNumber = 3;
  inline ::google::protobuf::int32 designownergtypeid() const;
  inline void set_designownergtypeid(::google::protobuf::int32 value);

  // required int32 OrderCate = 4;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 4;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 6;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 6;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 ContainerID = 7;
  inline bool has_containerid() const;
  inline void clear_containerid();
  static const int kContainerIDFieldNumber = 7;
  inline ::google::protobuf::int32 containerid() const;
  inline void set_containerid(::google::protobuf::int32 value);

  // required int32 ContainerGTypeID = 8;
  inline bool has_containergtypeid() const;
  inline void clear_containergtypeid();
  static const int kContainerGTypeIDFieldNumber = 8;
  inline ::google::protobuf::int32 containergtypeid() const;
  inline void set_containergtypeid(::google::protobuf::int32 value);

  // required int32 CabDesignFNFittingID = 9;
  inline bool has_cabdesignfnfittingid() const;
  inline void clear_cabdesignfnfittingid();
  static const int kCabDesignFNFittingIDFieldNumber = 9;
  inline ::google::protobuf::int32 cabdesignfnfittingid() const;
  inline void set_cabdesignfnfittingid(::google::protobuf::int32 value);

  // required int32 FNFittingID = 10;
  inline bool has_fnfittingid() const;
  inline void clear_fnfittingid();
  static const int kFNFittingIDFieldNumber = 10;
  inline ::google::protobuf::int32 fnfittingid() const;
  inline void set_fnfittingid(::google::protobuf::int32 value);

  // required int32 FactoryID = 11;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 11;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 12;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 12;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 DockObjID = 13;
  inline bool has_dockobjid() const;
  inline void clear_dockobjid();
  static const int kDockObjIDFieldNumber = 13;
  inline ::google::protobuf::int32 dockobjid() const;
  inline void set_dockobjid(::google::protobuf::int32 value);

  // required int32 DockObjType = 14;
  inline bool has_dockobjtype() const;
  inline void clear_dockobjtype();
  static const int kDockObjTypeFieldNumber = 14;
  inline ::google::protobuf::int32 dockobjtype() const;
  inline void set_dockobjtype(::google::protobuf::int32 value);

  // required double DockXPos = 15;
  inline bool has_dockxpos() const;
  inline void clear_dockxpos();
  static const int kDockXPosFieldNumber = 15;
  inline double dockxpos() const;
  inline void set_dockxpos(double value);

  // required double DockYPos = 16;
  inline bool has_dockypos() const;
  inline void clear_dockypos();
  static const int kDockYPosFieldNumber = 16;
  inline double dockypos() const;
  inline void set_dockypos(double value);

  // required bool HasMark = 17;
  inline bool has_hasmark() const;
  inline void clear_hasmark();
  static const int kHasMarkFieldNumber = 17;
  inline bool hasmark() const;
  inline void set_hasmark(bool value);

  // required bool IsFakeDel = 18;
  inline bool has_isfakedel() const;
  inline void clear_isfakedel();
  static const int kIsFakeDelFieldNumber = 18;
  inline bool isfakedel() const;
  inline void set_isfakedel(bool value);

  // required bool IsVisible = 19;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 19;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 20;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 20;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required int32 MaterialID = 21;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 21;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required int32 SupplyType = 22;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 22;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 23;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 23;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 XDock = 24;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 24;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 25;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 25;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 26;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 26;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required double XLen = 27;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 27;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 28;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 28;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 29;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 29;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double RealXLen = 30;
  inline bool has_realxlen() const;
  inline void clear_realxlen();
  static const int kRealXLenFieldNumber = 30;
  inline double realxlen() const;
  inline void set_realxlen(double value);

  // required double RealYLen = 31;
  inline bool has_realylen() const;
  inline void clear_realylen();
  static const int kRealYLenFieldNumber = 31;
  inline double realylen() const;
  inline void set_realylen(double value);

  // required double RealZLen = 32;
  inline bool has_realzlen() const;
  inline void clear_realzlen();
  static const int kRealZLenFieldNumber = 32;
  inline double realzlen() const;
  inline void set_realzlen(double value);

  // required double XOffsetLen = 33;
  inline bool has_xoffsetlen() const;
  inline void clear_xoffsetlen();
  static const int kXOffsetLenFieldNumber = 33;
  inline double xoffsetlen() const;
  inline void set_xoffsetlen(double value);

  // required double YOffsetLen = 34;
  inline bool has_yoffsetlen() const;
  inline void clear_yoffsetlen();
  static const int kYOffsetLenFieldNumber = 34;
  inline double yoffsetlen() const;
  inline void set_yoffsetlen(double value);

  // required double ZOffsetLen = 35;
  inline bool has_zoffsetlen() const;
  inline void clear_zoffsetlen();
  static const int kZOffsetLenFieldNumber = 35;
  inline double zoffsetlen() const;
  inline void set_zoffsetlen(double value);

  // required double YPos = 36;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYPosFieldNumber = 36;
  inline double ypos() const;
  inline void set_ypos(double value);

  // required int32 CreatorID = 37;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 37;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 38;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 38;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 39;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 39;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 40;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 40;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string UserMemo = 41;
  inline bool has_usermemo() const;
  inline void clear_usermemo();
  static const int kUserMemoFieldNumber = 41;
  inline const ::std::string& usermemo() const;
  inline void set_usermemo(const ::std::string& value);
  inline void set_usermemo(const char* value);
  inline void set_usermemo(const char* value, size_t size);
  inline ::std::string* mutable_usermemo();
  inline ::std::string* release_usermemo();
  inline void set_allocated_usermemo(::std::string* usermemo);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabFNFInfo)
 private:
  inline void set_has_cabfnfid();
  inline void clear_has_cabfnfid();
  inline void set_has_designownerid();
  inline void clear_has_designownerid();
  inline void set_has_designownergtypeid();
  inline void clear_has_designownergtypeid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_containerid();
  inline void clear_has_containerid();
  inline void set_has_containergtypeid();
  inline void clear_has_containergtypeid();
  inline void set_has_cabdesignfnfittingid();
  inline void clear_has_cabdesignfnfittingid();
  inline void set_has_fnfittingid();
  inline void clear_has_fnfittingid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_dockobjid();
  inline void clear_has_dockobjid();
  inline void set_has_dockobjtype();
  inline void clear_has_dockobjtype();
  inline void set_has_dockxpos();
  inline void clear_has_dockxpos();
  inline void set_has_dockypos();
  inline void clear_has_dockypos();
  inline void set_has_hasmark();
  inline void clear_has_hasmark();
  inline void set_has_isfakedel();
  inline void clear_has_isfakedel();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_realxlen();
  inline void clear_has_realxlen();
  inline void set_has_realylen();
  inline void clear_has_realylen();
  inline void set_has_realzlen();
  inline void clear_has_realzlen();
  inline void set_has_xoffsetlen();
  inline void clear_has_xoffsetlen();
  inline void set_has_yoffsetlen();
  inline void clear_has_yoffsetlen();
  inline void set_has_zoffsetlen();
  inline void clear_has_zoffsetlen();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_usermemo();
  inline void clear_has_usermemo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabfnfid_;
  ::google::protobuf::int32 designownerid_;
  ::google::protobuf::int32 designownergtypeid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 containerid_;
  ::google::protobuf::int32 containergtypeid_;
  ::google::protobuf::int32 cabdesignfnfittingid_;
  ::google::protobuf::int32 fnfittingid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 dockobjid_;
  ::google::protobuf::int32 dockobjtype_;
  double dockxpos_;
  double dockypos_;
  bool hasmark_;
  bool isfakedel_;
  bool isvisible_;
  bool islocked_;
  ::google::protobuf::int32 materialid_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 xdock_;
  ::google::protobuf::int32 ydock_;
  double xlen_;
  double ylen_;
  double zlen_;
  double realxlen_;
  double realylen_;
  ::google::protobuf::int32 zdock_;
  ::google::protobuf::int32 creatorid_;
  double realzlen_;
  double xoffsetlen_;
  double yoffsetlen_;
  double zoffsetlen_;
  double ypos_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* usermemo_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(41 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabFNFInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabFNFPartInfo : public ::google::protobuf::Message {
 public:
  SJ_CabFNFPartInfo();
  virtual ~SJ_CabFNFPartInfo();

  SJ_CabFNFPartInfo(const SJ_CabFNFPartInfo& from);

  inline SJ_CabFNFPartInfo& operator=(const SJ_CabFNFPartInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabFNFPartInfo& default_instance();

  void Swap(SJ_CabFNFPartInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabFNFPartInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabFNFPartInfo& from);
  void MergeFrom(const SJ_CabFNFPartInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabFNFPartID = 1;
  inline bool has_cabfnfpartid() const;
  inline void clear_cabfnfpartid();
  static const int kCabFNFPartIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabfnfpartid() const;
  inline void set_cabfnfpartid(::google::protobuf::int32 value);

  // required int32 CabFNFID = 2;
  inline bool has_cabfnfid() const;
  inline void clear_cabfnfid();
  static const int kCabFNFIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabfnfid() const;
  inline void set_cabfnfid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 FNFittingPartID = 6;
  inline bool has_fnfittingpartid() const;
  inline void clear_fnfittingpartid();
  static const int kFNFittingPartIDFieldNumber = 6;
  inline ::google::protobuf::int32 fnfittingpartid() const;
  inline void set_fnfittingpartid(::google::protobuf::int32 value);

  // required int32 FNFittingID = 7;
  inline bool has_fnfittingid() const;
  inline void clear_fnfittingid();
  static const int kFNFittingIDFieldNumber = 7;
  inline ::google::protobuf::int32 fnfittingid() const;
  inline void set_fnfittingid(::google::protobuf::int32 value);

  // required int32 FactoryID = 8;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 8;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 9;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 9;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 HWFittingID = 10;
  inline bool has_hwfittingid() const;
  inline void clear_hwfittingid();
  static const int kHWFittingIDFieldNumber = 10;
  inline ::google::protobuf::int32 hwfittingid() const;
  inline void set_hwfittingid(::google::protobuf::int32 value);

  // required int32 MaterialID = 11;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 11;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required int32 SealRuleID = 12;
  inline bool has_sealruleid() const;
  inline void clear_sealruleid();
  static const int kSealRuleIDFieldNumber = 12;
  inline ::google::protobuf::int32 sealruleid() const;
  inline void set_sealruleid(::google::protobuf::int32 value);

  // required int32 PartType = 13;
  inline bool has_parttype() const;
  inline void clear_parttype();
  static const int kPartTypeFieldNumber = 13;
  inline ::google::protobuf::int32 parttype() const;
  inline void set_parttype(::google::protobuf::int32 value);

  // required int32 SupplyType = 14;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 14;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 15;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 15;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 ModelID = 16;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 16;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required double XLen = 17;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 17;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 18;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 18;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 19;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 19;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double RealXLen = 20;
  inline bool has_realxlen() const;
  inline void clear_realxlen();
  static const int kRealXLenFieldNumber = 20;
  inline double realxlen() const;
  inline void set_realxlen(double value);

  // required double RealYLen = 21;
  inline bool has_realylen() const;
  inline void clear_realylen();
  static const int kRealYLenFieldNumber = 21;
  inline double realylen() const;
  inline void set_realylen(double value);

  // required double RealZLen = 22;
  inline bool has_realzlen() const;
  inline void clear_realzlen();
  static const int kRealZLenFieldNumber = 22;
  inline double realzlen() const;
  inline void set_realzlen(double value);

  // required double XOffsetLen = 23;
  inline bool has_xoffsetlen() const;
  inline void clear_xoffsetlen();
  static const int kXOffsetLenFieldNumber = 23;
  inline double xoffsetlen() const;
  inline void set_xoffsetlen(double value);

  // required double YOffsetLen = 24;
  inline bool has_yoffsetlen() const;
  inline void clear_yoffsetlen();
  static const int kYOffsetLenFieldNumber = 24;
  inline double yoffsetlen() const;
  inline void set_yoffsetlen(double value);

  // required double ZOffsetLen = 25;
  inline bool has_zoffsetlen() const;
  inline void clear_zoffsetlen();
  static const int kZOffsetLenFieldNumber = 25;
  inline double zoffsetlen() const;
  inline void set_zoffsetlen(double value);

  // required int32 CreatorID = 26;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 26;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 27;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 27;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 28;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 28;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 29;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 29;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabFNFPartInfo)
 private:
  inline void set_has_cabfnfpartid();
  inline void clear_has_cabfnfpartid();
  inline void set_has_cabfnfid();
  inline void clear_has_cabfnfid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_fnfittingpartid();
  inline void clear_has_fnfittingpartid();
  inline void set_has_fnfittingid();
  inline void clear_has_fnfittingid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_hwfittingid();
  inline void clear_has_hwfittingid();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_sealruleid();
  inline void clear_has_sealruleid();
  inline void set_has_parttype();
  inline void clear_has_parttype();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_realxlen();
  inline void clear_has_realxlen();
  inline void set_has_realylen();
  inline void clear_has_realylen();
  inline void set_has_realzlen();
  inline void clear_has_realzlen();
  inline void set_has_xoffsetlen();
  inline void clear_has_xoffsetlen();
  inline void set_has_yoffsetlen();
  inline void clear_has_yoffsetlen();
  inline void set_has_zoffsetlen();
  inline void clear_has_zoffsetlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabfnfpartid_;
  ::google::protobuf::int32 cabfnfid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 fnfittingpartid_;
  ::google::protobuf::int32 fnfittingid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 hwfittingid_;
  ::google::protobuf::int32 materialid_;
  ::google::protobuf::int32 sealruleid_;
  ::google::protobuf::int32 parttype_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 modelid_;
  double xlen_;
  double ylen_;
  double zlen_;
  double realxlen_;
  double realylen_;
  double realzlen_;
  double xoffsetlen_;
  double yoffsetlen_;
  double zoffsetlen_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabFNFPartInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabFNFPartSealInfo : public ::google::protobuf::Message {
 public:
  SJ_CabFNFPartSealInfo();
  virtual ~SJ_CabFNFPartSealInfo();

  SJ_CabFNFPartSealInfo(const SJ_CabFNFPartSealInfo& from);

  inline SJ_CabFNFPartSealInfo& operator=(const SJ_CabFNFPartSealInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabFNFPartSealInfo& default_instance();

  void Swap(SJ_CabFNFPartSealInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabFNFPartSealInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabFNFPartSealInfo& from);
  void MergeFrom(const SJ_CabFNFPartSealInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabFNFPartSealID = 1;
  inline bool has_cabfnfpartsealid() const;
  inline void clear_cabfnfpartsealid();
  static const int kCabFNFPartSealIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabfnfpartsealid() const;
  inline void set_cabfnfpartsealid(::google::protobuf::int32 value);

  // required int32 CabFNFPartID = 2;
  inline bool has_cabfnfpartid() const;
  inline void clear_cabfnfpartid();
  static const int kCabFNFPartIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabfnfpartid() const;
  inline void set_cabfnfpartid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 7;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 7;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FNFittingPartID = 8;
  inline bool has_fnfittingpartid() const;
  inline void clear_fnfittingpartid();
  static const int kFNFittingPartIDFieldNumber = 8;
  inline ::google::protobuf::int32 fnfittingpartid() const;
  inline void set_fnfittingpartid(::google::protobuf::int32 value);

  // required int32 SealType = 9;
  inline bool has_sealtype() const;
  inline void clear_sealtype();
  static const int kSealTypeFieldNumber = 9;
  inline ::google::protobuf::int32 sealtype() const;
  inline void set_sealtype(::google::protobuf::int32 value);

  // required int32 SealIndex = 10;
  inline bool has_sealindex() const;
  inline void clear_sealindex();
  static const int kSealIndexFieldNumber = 10;
  inline ::google::protobuf::int32 sealindex() const;
  inline void set_sealindex(::google::protobuf::int32 value);

  // required int32 MaterialID = 11;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 11;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required double PreMill = 12;
  inline bool has_premill() const;
  inline void clear_premill();
  static const int kPreMillFieldNumber = 12;
  inline double premill() const;
  inline void set_premill(double value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabFNFPartSealInfo)
 private:
  inline void set_has_cabfnfpartsealid();
  inline void clear_has_cabfnfpartsealid();
  inline void set_has_cabfnfpartid();
  inline void clear_has_cabfnfpartid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_fnfittingpartid();
  inline void clear_has_fnfittingpartid();
  inline void set_has_sealtype();
  inline void clear_has_sealtype();
  inline void set_has_sealindex();
  inline void clear_has_sealindex();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_premill();
  inline void clear_has_premill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabfnfpartsealid_;
  ::google::protobuf::int32 cabfnfpartid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 fnfittingpartid_;
  ::google::protobuf::int32 sealtype_;
  ::google::protobuf::int32 sealindex_;
  double premill_;
  ::google::protobuf::int32 materialid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabFNFPartSealInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_CabInfo : public ::google::protobuf::Message {
 public:
  SJ_CabInfo();
  virtual ~SJ_CabInfo();

  SJ_CabInfo(const SJ_CabInfo& from);

  inline SJ_CabInfo& operator=(const SJ_CabInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_CabInfo& default_instance();

  void Swap(SJ_CabInfo* other);

  // implements Message ----------------------------------------------

  SJ_CabInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_CabInfo& from);
  void MergeFrom(const SJ_CabInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabID = 1;
  inline bool has_cabid() const;
  inline void clear_cabid();
  static const int kCabIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabid() const;
  inline void set_cabid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 CabDesignID = 5;
  inline bool has_cabdesignid() const;
  inline void clear_cabdesignid();
  static const int kCabDesignIDFieldNumber = 5;
  inline ::google::protobuf::int32 cabdesignid() const;
  inline void set_cabdesignid(::google::protobuf::int32 value);

  // required int32 CabinetSizeID = 6;
  inline bool has_cabinetsizeid() const;
  inline void clear_cabinetsizeid();
  static const int kCabinetSizeIDFieldNumber = 6;
  inline ::google::protobuf::int32 cabinetsizeid() const;
  inline void set_cabinetsizeid(::google::protobuf::int32 value);

  // required int32 CabStructID = 7;
  inline bool has_cabstructid() const;
  inline void clear_cabstructid();
  static const int kCabStructIDFieldNumber = 7;
  inline ::google::protobuf::int32 cabstructid() const;
  inline void set_cabstructid(::google::protobuf::int32 value);

  // required int32 FactoryID = 8;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 8;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 9;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 9;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 CabMatPlanID = 10;
  inline bool has_cabmatplanid() const;
  inline void clear_cabmatplanid();
  static const int kCabMatPlanIDFieldNumber = 10;
  inline ::google::protobuf::int32 cabmatplanid() const;
  inline void set_cabmatplanid(::google::protobuf::int32 value);

  // required int32 SealRuleID = 11;
  inline bool has_sealruleid() const;
  inline void clear_sealruleid();
  static const int kSealRuleIDFieldNumber = 11;
  inline ::google::protobuf::int32 sealruleid() const;
  inline void set_sealruleid(::google::protobuf::int32 value);

  // required int32 DockObjID = 12;
  inline bool has_dockobjid() const;
  inline void clear_dockobjid();
  static const int kDockObjIDFieldNumber = 12;
  inline ::google::protobuf::int32 dockobjid() const;
  inline void set_dockobjid(::google::protobuf::int32 value);

  // required int32 DockObjType = 13;
  inline bool has_dockobjtype() const;
  inline void clear_dockobjtype();
  static const int kDockObjTypeFieldNumber = 13;
  inline ::google::protobuf::int32 dockobjtype() const;
  inline void set_dockobjtype(::google::protobuf::int32 value);

  // required double DockXPos = 14;
  inline bool has_dockxpos() const;
  inline void clear_dockxpos();
  static const int kDockXPosFieldNumber = 14;
  inline double dockxpos() const;
  inline void set_dockxpos(double value);

  // required double DockYPos = 15;
  inline bool has_dockypos() const;
  inline void clear_dockypos();
  static const int kDockYPosFieldNumber = 15;
  inline double dockypos() const;
  inline void set_dockypos(double value);

  // required double XLen = 16;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 16;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 17;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 17;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 18;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 18;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double ShapeXLen = 19;
  inline bool has_shapexlen() const;
  inline void clear_shapexlen();
  static const int kShapeXLenFieldNumber = 19;
  inline double shapexlen() const;
  inline void set_shapexlen(double value);

  // required double ShapeZLen = 20;
  inline bool has_shapezlen() const;
  inline void clear_shapezlen();
  static const int kShapeZLenFieldNumber = 20;
  inline double shapezlen() const;
  inline void set_shapezlen(double value);

  // required double GapXLen = 21;
  inline bool has_gapxlen() const;
  inline void clear_gapxlen();
  static const int kGapXLenFieldNumber = 21;
  inline double gapxlen() const;
  inline void set_gapxlen(double value);

  // required double GapYLen = 22;
  inline bool has_gapylen() const;
  inline void clear_gapylen();
  static const int kGapYLenFieldNumber = 22;
  inline double gapylen() const;
  inline void set_gapylen(double value);

  // required double GapZLen = 23;
  inline bool has_gapzlen() const;
  inline void clear_gapzlen();
  static const int kGapZLenFieldNumber = 23;
  inline double gapzlen() const;
  inline void set_gapzlen(double value);

  // required double YPos = 24;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYPosFieldNumber = 24;
  inline double ypos() const;
  inline void set_ypos(double value);

  // required int32 FootID = 25;
  inline bool has_footid() const;
  inline void clear_footid();
  static const int kFootIDFieldNumber = 25;
  inline ::google::protobuf::int32 footid() const;
  inline void set_footid(::google::protobuf::int32 value);

  // required int32 FootCount = 26;
  inline bool has_footcount() const;
  inline void clear_footcount();
  static const int kFootCountFieldNumber = 26;
  inline ::google::protobuf::int32 footcount() const;
  inline void set_footcount(::google::protobuf::int32 value);

  // required double FootYLen = 27;
  inline bool has_footylen() const;
  inline void clear_footylen();
  static const int kFootYLenFieldNumber = 27;
  inline double footylen() const;
  inline void set_footylen(double value);

  // required bool IsStandard = 28;
  inline bool has_isstandard() const;
  inline void clear_isstandard();
  static const int kIsStandardFieldNumber = 28;
  inline bool isstandard() const;
  inline void set_isstandard(bool value);

  // required bool HasMark = 29;
  inline bool has_hasmark() const;
  inline void clear_hasmark();
  static const int kHasMarkFieldNumber = 29;
  inline bool hasmark() const;
  inline void set_hasmark(bool value);

  // required bool IsVisible = 30;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 30;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 31;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 31;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required int32 CreatorID = 32;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 32;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 33;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 33;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 34;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 34;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 35;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 35;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_CabInfo)
 private:
  inline void set_has_cabid();
  inline void clear_has_cabid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_cabdesignid();
  inline void clear_has_cabdesignid();
  inline void set_has_cabinetsizeid();
  inline void clear_has_cabinetsizeid();
  inline void set_has_cabstructid();
  inline void clear_has_cabstructid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_cabmatplanid();
  inline void clear_has_cabmatplanid();
  inline void set_has_sealruleid();
  inline void clear_has_sealruleid();
  inline void set_has_dockobjid();
  inline void clear_has_dockobjid();
  inline void set_has_dockobjtype();
  inline void clear_has_dockobjtype();
  inline void set_has_dockxpos();
  inline void clear_has_dockxpos();
  inline void set_has_dockypos();
  inline void clear_has_dockypos();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_shapexlen();
  inline void clear_has_shapexlen();
  inline void set_has_shapezlen();
  inline void clear_has_shapezlen();
  inline void set_has_gapxlen();
  inline void clear_has_gapxlen();
  inline void set_has_gapylen();
  inline void clear_has_gapylen();
  inline void set_has_gapzlen();
  inline void clear_has_gapzlen();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_footid();
  inline void clear_has_footid();
  inline void set_has_footcount();
  inline void clear_has_footcount();
  inline void set_has_footylen();
  inline void clear_has_footylen();
  inline void set_has_isstandard();
  inline void clear_has_isstandard();
  inline void set_has_hasmark();
  inline void clear_has_hasmark();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 cabdesignid_;
  ::google::protobuf::int32 cabinetsizeid_;
  ::google::protobuf::int32 cabstructid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 cabmatplanid_;
  ::google::protobuf::int32 sealruleid_;
  ::google::protobuf::int32 dockobjid_;
  double dockxpos_;
  double dockypos_;
  double xlen_;
  double ylen_;
  double zlen_;
  double shapexlen_;
  ::google::protobuf::int32 dockobjtype_;
  ::google::protobuf::int32 footid_;
  double shapezlen_;
  double gapxlen_;
  double gapylen_;
  double gapzlen_;
  double ypos_;
  double footylen_;
  ::google::protobuf::int32 footcount_;
  bool isstandard_;
  bool hasmark_;
  bool isvisible_;
  bool islocked_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(35 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_CabInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_DecorBoardInfo : public ::google::protobuf::Message {
 public:
  SJ_DecorBoardInfo();
  virtual ~SJ_DecorBoardInfo();

  SJ_DecorBoardInfo(const SJ_DecorBoardInfo& from);

  inline SJ_DecorBoardInfo& operator=(const SJ_DecorBoardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_DecorBoardInfo& default_instance();

  void Swap(SJ_DecorBoardInfo* other);

  // implements Message ----------------------------------------------

  SJ_DecorBoardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_DecorBoardInfo& from);
  void MergeFrom(const SJ_DecorBoardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignDecorBoardID = 1;
  inline bool has_designdecorboardid() const;
  inline void clear_designdecorboardid();
  static const int kDesignDecorBoardIDFieldNumber = 1;
  inline ::google::protobuf::int32 designdecorboardid() const;
  inline void set_designdecorboardid(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 2;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 2;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 DesignParentID = 3;
  inline bool has_designparentid() const;
  inline void clear_designparentid();
  static const int kDesignParentIDFieldNumber = 3;
  inline ::google::protobuf::int32 designparentid() const;
  inline void set_designparentid(::google::protobuf::int32 value);

  // required int32 OrderCate = 4;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 4;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 5;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 5;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DecorBoardID = 6;
  inline bool has_decorboardid() const;
  inline void clear_decorboardid();
  static const int kDecorBoardIDFieldNumber = 6;
  inline ::google::protobuf::int32 decorboardid() const;
  inline void set_decorboardid(::google::protobuf::int32 value);

  // required int32 DecorParentID = 7;
  inline bool has_decorparentid() const;
  inline void clear_decorparentid();
  static const int kDecorParentIDFieldNumber = 7;
  inline ::google::protobuf::int32 decorparentid() const;
  inline void set_decorparentid(::google::protobuf::int32 value);

  // required int32 FactoryID = 8;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 8;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 9;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 9;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 GroupID = 10;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 10;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required int32 GroupIndex = 11;
  inline bool has_groupindex() const;
  inline void clear_groupindex();
  static const int kGroupIndexFieldNumber = 11;
  inline ::google::protobuf::int32 groupindex() const;
  inline void set_groupindex(::google::protobuf::int32 value);

  // required int32 GTypeID = 12;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 12;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required bool IsAutoFit = 13;
  inline bool has_isautofit() const;
  inline void clear_isautofit();
  static const int kIsAutoFitFieldNumber = 13;
  inline bool isautofit() const;
  inline void set_isautofit(bool value);

  // required bool HasMark = 14;
  inline bool has_hasmark() const;
  inline void clear_hasmark();
  static const int kHasMarkFieldNumber = 14;
  inline bool hasmark() const;
  inline void set_hasmark(bool value);

  // required bool IsVisible = 15;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 15;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 16;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 16;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required bool IsChangedSize = 17;
  inline bool has_ischangedsize() const;
  inline void clear_ischangedsize();
  static const int kIsChangedSizeFieldNumber = 17;
  inline bool ischangedsize() const;
  inline void set_ischangedsize(bool value);

  // required bool IsDragIn = 18;
  inline bool has_isdragin() const;
  inline void clear_isdragin();
  static const int kIsDragInFieldNumber = 18;
  inline bool isdragin() const;
  inline void set_isdragin(bool value);

  // required int32 DoorMatPlanID = 19;
  inline bool has_doormatplanid() const;
  inline void clear_doormatplanid();
  static const int kDoorMatPlanIDFieldNumber = 19;
  inline ::google::protobuf::int32 doormatplanid() const;
  inline void set_doormatplanid(::google::protobuf::int32 value);

  // required int32 CabMatPlanID = 20;
  inline bool has_cabmatplanid() const;
  inline void clear_cabmatplanid();
  static const int kCabMatPlanIDFieldNumber = 20;
  inline ::google::protobuf::int32 cabmatplanid() const;
  inline void set_cabmatplanid(::google::protobuf::int32 value);

  // required int32 DoorID = 21;
  inline bool has_doorid() const;
  inline void clear_doorid();
  static const int kDoorIDFieldNumber = 21;
  inline ::google::protobuf::int32 doorid() const;
  inline void set_doorid(::google::protobuf::int32 value);

  // required int32 TargetType = 22;
  inline bool has_targettype() const;
  inline void clear_targettype();
  static const int kTargetTypeFieldNumber = 22;
  inline ::google::protobuf::int32 targettype() const;
  inline void set_targettype(::google::protobuf::int32 value);

  // required int32 DockObjID = 23;
  inline bool has_dockobjid() const;
  inline void clear_dockobjid();
  static const int kDockObjIDFieldNumber = 23;
  inline ::google::protobuf::int32 dockobjid() const;
  inline void set_dockobjid(::google::protobuf::int32 value);

  // required int32 DockObjType = 24;
  inline bool has_dockobjtype() const;
  inline void clear_dockobjtype();
  static const int kDockObjTypeFieldNumber = 24;
  inline ::google::protobuf::int32 dockobjtype() const;
  inline void set_dockobjtype(::google::protobuf::int32 value);

  // required double DockXPos = 25;
  inline bool has_dockxpos() const;
  inline void clear_dockxpos();
  static const int kDockXPosFieldNumber = 25;
  inline double dockxpos() const;
  inline void set_dockxpos(double value);

  // required double DockYPos = 26;
  inline bool has_dockypos() const;
  inline void clear_dockypos();
  static const int kDockYPosFieldNumber = 26;
  inline double dockypos() const;
  inline void set_dockypos(double value);

  // required int32 MatID = 27;
  inline bool has_matid() const;
  inline void clear_matid();
  static const int kMatIDFieldNumber = 27;
  inline ::google::protobuf::int32 matid() const;
  inline void set_matid(::google::protobuf::int32 value);

  // required int32 MatGType = 28;
  inline bool has_matgtype() const;
  inline void clear_matgtype();
  static const int kMatGTypeFieldNumber = 28;
  inline ::google::protobuf::int32 matgtype() const;
  inline void set_matgtype(::google::protobuf::int32 value);

  // required int32 SupplyType = 29;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 29;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 ModelID = 30;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 30;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required double YPos = 31;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYPosFieldNumber = 31;
  inline double ypos() const;
  inline void set_ypos(double value);

  // required double XLen = 32;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 32;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 33;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 33;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 34;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 34;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double XOffsetLen = 35;
  inline bool has_xoffsetlen() const;
  inline void clear_xoffsetlen();
  static const int kXOffsetLenFieldNumber = 35;
  inline double xoffsetlen() const;
  inline void set_xoffsetlen(double value);

  // required double YOffsetLen = 36;
  inline bool has_yoffsetlen() const;
  inline void clear_yoffsetlen();
  static const int kYOffsetLenFieldNumber = 36;
  inline double yoffsetlen() const;
  inline void set_yoffsetlen(double value);

  // required double ZOffsetLen = 37;
  inline bool has_zoffsetlen() const;
  inline void clear_zoffsetlen();
  static const int kZOffsetLenFieldNumber = 37;
  inline double zoffsetlen() const;
  inline void set_zoffsetlen(double value);

  // required int32 CreatorID = 38;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 38;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 39;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 39;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 40;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 40;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 41;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 41;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_DecorBoardInfo)
 private:
  inline void set_has_designdecorboardid();
  inline void clear_has_designdecorboardid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_designparentid();
  inline void clear_has_designparentid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_decorboardid();
  inline void clear_has_decorboardid();
  inline void set_has_decorparentid();
  inline void clear_has_decorparentid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_groupindex();
  inline void clear_has_groupindex();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_isautofit();
  inline void clear_has_isautofit();
  inline void set_has_hasmark();
  inline void clear_has_hasmark();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_ischangedsize();
  inline void clear_has_ischangedsize();
  inline void set_has_isdragin();
  inline void clear_has_isdragin();
  inline void set_has_doormatplanid();
  inline void clear_has_doormatplanid();
  inline void set_has_cabmatplanid();
  inline void clear_has_cabmatplanid();
  inline void set_has_doorid();
  inline void clear_has_doorid();
  inline void set_has_targettype();
  inline void clear_has_targettype();
  inline void set_has_dockobjid();
  inline void clear_has_dockobjid();
  inline void set_has_dockobjtype();
  inline void clear_has_dockobjtype();
  inline void set_has_dockxpos();
  inline void clear_has_dockxpos();
  inline void set_has_dockypos();
  inline void clear_has_dockypos();
  inline void set_has_matid();
  inline void clear_has_matid();
  inline void set_has_matgtype();
  inline void clear_has_matgtype();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_xoffsetlen();
  inline void clear_has_xoffsetlen();
  inline void set_has_yoffsetlen();
  inline void clear_has_yoffsetlen();
  inline void set_has_zoffsetlen();
  inline void clear_has_zoffsetlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designdecorboardid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 designparentid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 decorboardid_;
  ::google::protobuf::int32 decorparentid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 groupindex_;
  ::google::protobuf::int32 gtypeid_;
  bool isautofit_;
  bool hasmark_;
  bool isvisible_;
  bool islocked_;
  bool ischangedsize_;
  bool isdragin_;
  ::google::protobuf::int32 doormatplanid_;
  ::google::protobuf::int32 cabmatplanid_;
  ::google::protobuf::int32 doorid_;
  ::google::protobuf::int32 targettype_;
  ::google::protobuf::int32 dockobjid_;
  ::google::protobuf::int32 dockobjtype_;
  double dockxpos_;
  double dockypos_;
  ::google::protobuf::int32 matid_;
  ::google::protobuf::int32 matgtype_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 modelid_;
  double ypos_;
  double xlen_;
  double ylen_;
  double zlen_;
  double xoffsetlen_;
  double yoffsetlen_;
  double zoffsetlen_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(41 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_DecorBoardInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_DecorBoardUnitInfo : public ::google::protobuf::Message {
 public:
  SJ_DecorBoardUnitInfo();
  virtual ~SJ_DecorBoardUnitInfo();

  SJ_DecorBoardUnitInfo(const SJ_DecorBoardUnitInfo& from);

  inline SJ_DecorBoardUnitInfo& operator=(const SJ_DecorBoardUnitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_DecorBoardUnitInfo& default_instance();

  void Swap(SJ_DecorBoardUnitInfo* other);

  // implements Message ----------------------------------------------

  SJ_DecorBoardUnitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_DecorBoardUnitInfo& from);
  void MergeFrom(const SJ_DecorBoardUnitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignDecorBoardUnitID = 1;
  inline bool has_designdecorboardunitid() const;
  inline void clear_designdecorboardunitid();
  static const int kDesignDecorBoardUnitIDFieldNumber = 1;
  inline ::google::protobuf::int32 designdecorboardunitid() const;
  inline void set_designdecorboardunitid(::google::protobuf::int32 value);

  // required int32 DesignDecorBoardID = 2;
  inline bool has_designdecorboardid() const;
  inline void clear_designdecorboardid();
  static const int kDesignDecorBoardIDFieldNumber = 2;
  inline ::google::protobuf::int32 designdecorboardid() const;
  inline void set_designdecorboardid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 DecorBoardUnitID = 6;
  inline bool has_decorboardunitid() const;
  inline void clear_decorboardunitid();
  static const int kDecorBoardUnitIDFieldNumber = 6;
  inline ::google::protobuf::int32 decorboardunitid() const;
  inline void set_decorboardunitid(::google::protobuf::int32 value);

  // required int32 DecorBoardID = 7;
  inline bool has_decorboardid() const;
  inline void clear_decorboardid();
  static const int kDecorBoardIDFieldNumber = 7;
  inline ::google::protobuf::int32 decorboardid() const;
  inline void set_decorboardid(::google::protobuf::int32 value);

  // required int32 DecorBoardUnitIndex = 8;
  inline bool has_decorboardunitindex() const;
  inline void clear_decorboardunitindex();
  static const int kDecorBoardUnitIndexFieldNumber = 8;
  inline ::google::protobuf::int32 decorboardunitindex() const;
  inline void set_decorboardunitindex(::google::protobuf::int32 value);

  // required int32 FactoryID = 9;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 9;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 10;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 10;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required bool IsUseDoor = 11;
  inline bool has_isusedoor() const;
  inline void clear_isusedoor();
  static const int kIsUseDoorFieldNumber = 11;
  inline bool isusedoor() const;
  inline void set_isusedoor(bool value);

  // required int32 DoorMatPlanID = 12;
  inline bool has_doormatplanid() const;
  inline void clear_doormatplanid();
  static const int kDoorMatPlanIDFieldNumber = 12;
  inline ::google::protobuf::int32 doormatplanid() const;
  inline void set_doormatplanid(::google::protobuf::int32 value);

  // required int32 CabMatPlanID = 13;
  inline bool has_cabmatplanid() const;
  inline void clear_cabmatplanid();
  static const int kCabMatPlanIDFieldNumber = 13;
  inline ::google::protobuf::int32 cabmatplanid() const;
  inline void set_cabmatplanid(::google::protobuf::int32 value);

  // required int32 DoorID = 14;
  inline bool has_doorid() const;
  inline void clear_doorid();
  static const int kDoorIDFieldNumber = 14;
  inline ::google::protobuf::int32 doorid() const;
  inline void set_doorid(::google::protobuf::int32 value);

  // required int32 TargetType = 15;
  inline bool has_targettype() const;
  inline void clear_targettype();
  static const int kTargetTypeFieldNumber = 15;
  inline ::google::protobuf::int32 targettype() const;
  inline void set_targettype(::google::protobuf::int32 value);

  // required int32 MatID = 16;
  inline bool has_matid() const;
  inline void clear_matid();
  static const int kMatIDFieldNumber = 16;
  inline ::google::protobuf::int32 matid() const;
  inline void set_matid(::google::protobuf::int32 value);

  // required int32 MatGType = 17;
  inline bool has_matgtype() const;
  inline void clear_matgtype();
  static const int kMatGTypeFieldNumber = 17;
  inline ::google::protobuf::int32 matgtype() const;
  inline void set_matgtype(::google::protobuf::int32 value);

  // required int32 SupplyType = 18;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 18;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 SealRuleID = 19;
  inline bool has_sealruleid() const;
  inline void clear_sealruleid();
  static const int kSealRuleIDFieldNumber = 19;
  inline ::google::protobuf::int32 sealruleid() const;
  inline void set_sealruleid(::google::protobuf::int32 value);

  // required int32 ModelID = 20;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 20;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required double XLen = 21;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 21;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 22;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 22;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 23;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 23;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double XOffsetLen = 24;
  inline bool has_xoffsetlen() const;
  inline void clear_xoffsetlen();
  static const int kXOffsetLenFieldNumber = 24;
  inline double xoffsetlen() const;
  inline void set_xoffsetlen(double value);

  // required double YOffsetLen = 25;
  inline bool has_yoffsetlen() const;
  inline void clear_yoffsetlen();
  static const int kYOffsetLenFieldNumber = 25;
  inline double yoffsetlen() const;
  inline void set_yoffsetlen(double value);

  // required double ZOffsetLen = 26;
  inline bool has_zoffsetlen() const;
  inline void clear_zoffsetlen();
  static const int kZOffsetLenFieldNumber = 26;
  inline double zoffsetlen() const;
  inline void set_zoffsetlen(double value);

  // required int32 CreatorID = 27;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 27;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 28;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 28;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 29;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 29;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 30;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 30;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_DecorBoardUnitInfo)
 private:
  inline void set_has_designdecorboardunitid();
  inline void clear_has_designdecorboardunitid();
  inline void set_has_designdecorboardid();
  inline void clear_has_designdecorboardid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_decorboardunitid();
  inline void clear_has_decorboardunitid();
  inline void set_has_decorboardid();
  inline void clear_has_decorboardid();
  inline void set_has_decorboardunitindex();
  inline void clear_has_decorboardunitindex();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_isusedoor();
  inline void clear_has_isusedoor();
  inline void set_has_doormatplanid();
  inline void clear_has_doormatplanid();
  inline void set_has_cabmatplanid();
  inline void clear_has_cabmatplanid();
  inline void set_has_doorid();
  inline void clear_has_doorid();
  inline void set_has_targettype();
  inline void clear_has_targettype();
  inline void set_has_matid();
  inline void clear_has_matid();
  inline void set_has_matgtype();
  inline void clear_has_matgtype();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_sealruleid();
  inline void clear_has_sealruleid();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_xoffsetlen();
  inline void clear_has_xoffsetlen();
  inline void set_has_yoffsetlen();
  inline void clear_has_yoffsetlen();
  inline void set_has_zoffsetlen();
  inline void clear_has_zoffsetlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designdecorboardunitid_;
  ::google::protobuf::int32 designdecorboardid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 decorboardunitid_;
  ::google::protobuf::int32 decorboardid_;
  ::google::protobuf::int32 decorboardunitindex_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  bool isusedoor_;
  ::google::protobuf::int32 doormatplanid_;
  ::google::protobuf::int32 cabmatplanid_;
  ::google::protobuf::int32 doorid_;
  ::google::protobuf::int32 targettype_;
  ::google::protobuf::int32 matid_;
  ::google::protobuf::int32 matgtype_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 sealruleid_;
  ::google::protobuf::int32 modelid_;
  double xlen_;
  double ylen_;
  double zlen_;
  double xoffsetlen_;
  double yoffsetlen_;
  double zoffsetlen_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(30 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_DecorBoardUnitInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_DecorBoardUnitSealInfo : public ::google::protobuf::Message {
 public:
  SJ_DecorBoardUnitSealInfo();
  virtual ~SJ_DecorBoardUnitSealInfo();

  SJ_DecorBoardUnitSealInfo(const SJ_DecorBoardUnitSealInfo& from);

  inline SJ_DecorBoardUnitSealInfo& operator=(const SJ_DecorBoardUnitSealInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_DecorBoardUnitSealInfo& default_instance();

  void Swap(SJ_DecorBoardUnitSealInfo* other);

  // implements Message ----------------------------------------------

  SJ_DecorBoardUnitSealInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_DecorBoardUnitSealInfo& from);
  void MergeFrom(const SJ_DecorBoardUnitSealInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignDecorBoardUnitSealID = 1;
  inline bool has_designdecorboardunitsealid() const;
  inline void clear_designdecorboardunitsealid();
  static const int kDesignDecorBoardUnitSealIDFieldNumber = 1;
  inline ::google::protobuf::int32 designdecorboardunitsealid() const;
  inline void set_designdecorboardunitsealid(::google::protobuf::int32 value);

  // required int32 DesignDecorBoardUnitID = 2;
  inline bool has_designdecorboardunitid() const;
  inline void clear_designdecorboardunitid();
  static const int kDesignDecorBoardUnitIDFieldNumber = 2;
  inline ::google::protobuf::int32 designdecorboardunitid() const;
  inline void set_designdecorboardunitid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 7;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 7;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 DecorBoardUnitID = 8;
  inline bool has_decorboardunitid() const;
  inline void clear_decorboardunitid();
  static const int kDecorBoardUnitIDFieldNumber = 8;
  inline ::google::protobuf::int32 decorboardunitid() const;
  inline void set_decorboardunitid(::google::protobuf::int32 value);

  // required int32 DecorBoardUnitSealID = 9;
  inline bool has_decorboardunitsealid() const;
  inline void clear_decorboardunitsealid();
  static const int kDecorBoardUnitSealIDFieldNumber = 9;
  inline ::google::protobuf::int32 decorboardunitsealid() const;
  inline void set_decorboardunitsealid(::google::protobuf::int32 value);

  // required int32 SealIndex = 10;
  inline bool has_sealindex() const;
  inline void clear_sealindex();
  static const int kSealIndexFieldNumber = 10;
  inline ::google::protobuf::int32 sealindex() const;
  inline void set_sealindex(::google::protobuf::int32 value);

  // required int32 SealType = 11;
  inline bool has_sealtype() const;
  inline void clear_sealtype();
  static const int kSealTypeFieldNumber = 11;
  inline ::google::protobuf::int32 sealtype() const;
  inline void set_sealtype(::google::protobuf::int32 value);

  // required int32 MaterialID = 12;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 12;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required double PreMill = 13;
  inline bool has_premill() const;
  inline void clear_premill();
  static const int kPreMillFieldNumber = 13;
  inline double premill() const;
  inline void set_premill(double value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_DecorBoardUnitSealInfo)
 private:
  inline void set_has_designdecorboardunitsealid();
  inline void clear_has_designdecorboardunitsealid();
  inline void set_has_designdecorboardunitid();
  inline void clear_has_designdecorboardunitid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_decorboardunitid();
  inline void clear_has_decorboardunitid();
  inline void set_has_decorboardunitsealid();
  inline void clear_has_decorboardunitsealid();
  inline void set_has_sealindex();
  inline void clear_has_sealindex();
  inline void set_has_sealtype();
  inline void clear_has_sealtype();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_premill();
  inline void clear_has_premill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designdecorboardunitsealid_;
  ::google::protobuf::int32 designdecorboardunitid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 decorboardunitid_;
  ::google::protobuf::int32 decorboardunitsealid_;
  ::google::protobuf::int32 sealindex_;
  ::google::protobuf::int32 sealtype_;
  ::google::protobuf::int32 materialid_;
  double premill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_DecorBoardUnitSealInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_DecorInfo : public ::google::protobuf::Message {
 public:
  SJ_DecorInfo();
  virtual ~SJ_DecorInfo();

  SJ_DecorInfo(const SJ_DecorInfo& from);

  inline SJ_DecorInfo& operator=(const SJ_DecorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_DecorInfo& default_instance();

  void Swap(SJ_DecorInfo* other);

  // implements Message ----------------------------------------------

  SJ_DecorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_DecorInfo& from);
  void MergeFrom(const SJ_DecorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignDecorID = 1;
  inline bool has_designdecorid() const;
  inline void clear_designdecorid();
  static const int kDesignDecorIDFieldNumber = 1;
  inline ::google::protobuf::int32 designdecorid() const;
  inline void set_designdecorid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DecorID = 5;
  inline bool has_decorid() const;
  inline void clear_decorid();
  static const int kDecorIDFieldNumber = 5;
  inline ::google::protobuf::int32 decorid() const;
  inline void set_decorid(::google::protobuf::int32 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 7;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 7;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required bool HasMark = 8;
  inline bool has_hasmark() const;
  inline void clear_hasmark();
  static const int kHasMarkFieldNumber = 8;
  inline bool hasmark() const;
  inline void set_hasmark(bool value);

  // required bool IsVisible = 9;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 9;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 10;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 10;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required int32 SupplyType = 11;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 11;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 12;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 12;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 DockObjID = 13;
  inline bool has_dockobjid() const;
  inline void clear_dockobjid();
  static const int kDockObjIDFieldNumber = 13;
  inline ::google::protobuf::int32 dockobjid() const;
  inline void set_dockobjid(::google::protobuf::int32 value);

  // required int32 DockObjType = 14;
  inline bool has_dockobjtype() const;
  inline void clear_dockobjtype();
  static const int kDockObjTypeFieldNumber = 14;
  inline ::google::protobuf::int32 dockobjtype() const;
  inline void set_dockobjtype(::google::protobuf::int32 value);

  // required double DockXPos = 15;
  inline bool has_dockxpos() const;
  inline void clear_dockxpos();
  static const int kDockXPosFieldNumber = 15;
  inline double dockxpos() const;
  inline void set_dockxpos(double value);

  // required double DockYPos = 16;
  inline bool has_dockypos() const;
  inline void clear_dockypos();
  static const int kDockYPosFieldNumber = 16;
  inline double dockypos() const;
  inline void set_dockypos(double value);

  // required double XLen = 17;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 17;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 18;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 18;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 19;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 19;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double YPos = 20;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYPosFieldNumber = 20;
  inline double ypos() const;
  inline void set_ypos(double value);

  // required int32 CreatorID = 21;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 21;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 22;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 22;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 23;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 23;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 24;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 24;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_DecorInfo)
 private:
  inline void set_has_designdecorid();
  inline void clear_has_designdecorid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_decorid();
  inline void clear_has_decorid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_hasmark();
  inline void clear_has_hasmark();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_dockobjid();
  inline void clear_has_dockobjid();
  inline void set_has_dockobjtype();
  inline void clear_has_dockobjtype();
  inline void set_has_dockxpos();
  inline void clear_has_dockxpos();
  inline void set_has_dockypos();
  inline void clear_has_dockypos();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designdecorid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 decorid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  bool hasmark_;
  bool isvisible_;
  bool islocked_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 dockobjid_;
  ::google::protobuf::int32 dockobjtype_;
  double dockxpos_;
  double dockypos_;
  double xlen_;
  double ylen_;
  double zlen_;
  double ypos_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_DecorInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_DecorLineInfo : public ::google::protobuf::Message {
 public:
  SJ_DecorLineInfo();
  virtual ~SJ_DecorLineInfo();

  SJ_DecorLineInfo(const SJ_DecorLineInfo& from);

  inline SJ_DecorLineInfo& operator=(const SJ_DecorLineInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_DecorLineInfo& default_instance();

  void Swap(SJ_DecorLineInfo* other);

  // implements Message ----------------------------------------------

  SJ_DecorLineInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_DecorLineInfo& from);
  void MergeFrom(const SJ_DecorLineInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignDecorLineID = 1;
  inline bool has_designdecorlineid() const;
  inline void clear_designdecorlineid();
  static const int kDesignDecorLineIDFieldNumber = 1;
  inline ::google::protobuf::int32 designdecorlineid() const;
  inline void set_designdecorlineid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DecorLineID = 5;
  inline bool has_decorlineid() const;
  inline void clear_decorlineid();
  static const int kDecorLineIDFieldNumber = 5;
  inline ::google::protobuf::int32 decorlineid() const;
  inline void set_decorlineid(::google::protobuf::int32 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 7;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 7;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 GTypeID = 8;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 8;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 DockObjID = 9;
  inline bool has_dockobjid() const;
  inline void clear_dockobjid();
  static const int kDockObjIDFieldNumber = 9;
  inline ::google::protobuf::int32 dockobjid() const;
  inline void set_dockobjid(::google::protobuf::int32 value);

  // required int32 DockObjType = 10;
  inline bool has_dockobjtype() const;
  inline void clear_dockobjtype();
  static const int kDockObjTypeFieldNumber = 10;
  inline ::google::protobuf::int32 dockobjtype() const;
  inline void set_dockobjtype(::google::protobuf::int32 value);

  // required double DockXPos = 11;
  inline bool has_dockxpos() const;
  inline void clear_dockxpos();
  static const int kDockXPosFieldNumber = 11;
  inline double dockxpos() const;
  inline void set_dockxpos(double value);

  // required double DockYPos = 12;
  inline bool has_dockypos() const;
  inline void clear_dockypos();
  static const int kDockYPosFieldNumber = 12;
  inline double dockypos() const;
  inline void set_dockypos(double value);

  // required int32 MaterialID = 13;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 13;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required bool HasMark = 14;
  inline bool has_hasmark() const;
  inline void clear_hasmark();
  static const int kHasMarkFieldNumber = 14;
  inline bool hasmark() const;
  inline void set_hasmark(bool value);

  // required bool IsVisible = 15;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 15;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 16;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 16;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required double XLen = 17;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 17;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 18;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 18;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 19;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 19;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required int32 CreatorID = 20;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 20;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 21;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 21;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 22;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 22;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 23;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 23;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_DecorLineInfo)
 private:
  inline void set_has_designdecorlineid();
  inline void clear_has_designdecorlineid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_decorlineid();
  inline void clear_has_decorlineid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_dockobjid();
  inline void clear_has_dockobjid();
  inline void set_has_dockobjtype();
  inline void clear_has_dockobjtype();
  inline void set_has_dockxpos();
  inline void clear_has_dockxpos();
  inline void set_has_dockypos();
  inline void clear_has_dockypos();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_hasmark();
  inline void clear_has_hasmark();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designdecorlineid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 decorlineid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 dockobjid_;
  ::google::protobuf::int32 dockobjtype_;
  double dockxpos_;
  double dockypos_;
  ::google::protobuf::int32 materialid_;
  bool hasmark_;
  bool isvisible_;
  bool islocked_;
  double xlen_;
  double ylen_;
  double zlen_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_DecorLineInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_DesignPlanInfo : public ::google::protobuf::Message {
 public:
  SJ_DesignPlanInfo();
  virtual ~SJ_DesignPlanInfo();

  SJ_DesignPlanInfo(const SJ_DesignPlanInfo& from);

  inline SJ_DesignPlanInfo& operator=(const SJ_DesignPlanInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_DesignPlanInfo& default_instance();

  void Swap(SJ_DesignPlanInfo* other);

  // implements Message ----------------------------------------------

  SJ_DesignPlanInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_DesignPlanInfo& from);
  void MergeFrom(const SJ_DesignPlanInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignPlanID = 1;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 1;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 3;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 FactoryID = 4;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 4;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 5;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 5;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required double CurScale = 6;
  inline bool has_curscale() const;
  inline void clear_curscale();
  static const int kCurScaleFieldNumber = 6;
  inline double curscale() const;
  inline void set_curscale(double value);

  // required bool IsActive = 7;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 7;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required int32 SkyDecorID = 8;
  inline bool has_skydecorid() const;
  inline void clear_skydecorid();
  static const int kSkyDecorIDFieldNumber = 8;
  inline ::google::protobuf::int32 skydecorid() const;
  inline void set_skydecorid(::google::protobuf::int32 value);

  // required int32 FloorDecorID = 9;
  inline bool has_floordecorid() const;
  inline void clear_floordecorid();
  static const int kFloorDecorIDFieldNumber = 9;
  inline ::google::protobuf::int32 floordecorid() const;
  inline void set_floordecorid(::google::protobuf::int32 value);

  // required int32 WallDecorID = 10;
  inline bool has_walldecorid() const;
  inline void clear_walldecorid();
  static const int kWallDecorIDFieldNumber = 10;
  inline ::google::protobuf::int32 walldecorid() const;
  inline void set_walldecorid(::google::protobuf::int32 value);

  // required int32 DesignerID = 11;
  inline bool has_designerid() const;
  inline void clear_designerid();
  static const int kDesignerIDFieldNumber = 11;
  inline ::google::protobuf::int32 designerid() const;
  inline void set_designerid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 12;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 12;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 13;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 13;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 14;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 14;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string DesignPlanName = 15;
  inline bool has_designplanname() const;
  inline void clear_designplanname();
  static const int kDesignPlanNameFieldNumber = 15;
  inline const ::std::string& designplanname() const;
  inline void set_designplanname(const ::std::string& value);
  inline void set_designplanname(const char* value);
  inline void set_designplanname(const char* value, size_t size);
  inline ::std::string* mutable_designplanname();
  inline ::std::string* release_designplanname();
  inline void set_allocated_designplanname(::std::string* designplanname);

  // required string DesignPlanMemo = 16;
  inline bool has_designplanmemo() const;
  inline void clear_designplanmemo();
  static const int kDesignPlanMemoFieldNumber = 16;
  inline const ::std::string& designplanmemo() const;
  inline void set_designplanmemo(const ::std::string& value);
  inline void set_designplanmemo(const char* value);
  inline void set_designplanmemo(const char* value, size_t size);
  inline ::std::string* mutable_designplanmemo();
  inline ::std::string* release_designplanmemo();
  inline void set_allocated_designplanmemo(::std::string* designplanmemo);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_DesignPlanInfo)
 private:
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_curscale();
  inline void clear_has_curscale();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_skydecorid();
  inline void clear_has_skydecorid();
  inline void set_has_floordecorid();
  inline void clear_has_floordecorid();
  inline void set_has_walldecorid();
  inline void clear_has_walldecorid();
  inline void set_has_designerid();
  inline void clear_has_designerid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_designplanname();
  inline void clear_has_designplanname();
  inline void set_has_designplanmemo();
  inline void clear_has_designplanmemo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  bool isactive_;
  double curscale_;
  ::google::protobuf::int32 skydecorid_;
  ::google::protobuf::int32 floordecorid_;
  ::google::protobuf::int32 walldecorid_;
  ::google::protobuf::int32 designerid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* designplanname_;
  ::std::string* designplanmemo_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_DesignPlanInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_FittingInfo : public ::google::protobuf::Message {
 public:
  SJ_FittingInfo();
  virtual ~SJ_FittingInfo();

  SJ_FittingInfo(const SJ_FittingInfo& from);

  inline SJ_FittingInfo& operator=(const SJ_FittingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_FittingInfo& default_instance();

  void Swap(SJ_FittingInfo* other);

  // implements Message ----------------------------------------------

  SJ_FittingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_FittingInfo& from);
  void MergeFrom(const SJ_FittingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignFittingID = 1;
  inline bool has_designfittingid() const;
  inline void clear_designfittingid();
  static const int kDesignFittingIDFieldNumber = 1;
  inline ::google::protobuf::int32 designfittingid() const;
  inline void set_designfittingid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 6;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 6;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FittingID = 7;
  inline bool has_fittingid() const;
  inline void clear_fittingid();
  static const int kFittingIDFieldNumber = 7;
  inline ::google::protobuf::int32 fittingid() const;
  inline void set_fittingid(::google::protobuf::int32 value);

  // required int32 GTypeID = 8;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 8;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 SupplyType = 9;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 9;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 FittingCount = 10;
  inline bool has_fittingcount() const;
  inline void clear_fittingcount();
  static const int kFittingCountFieldNumber = 10;
  inline ::google::protobuf::int32 fittingcount() const;
  inline void set_fittingcount(::google::protobuf::int32 value);

  // required int32 CreatorID = 11;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 11;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 12;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 12;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 13;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 13;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 14;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 14;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_FittingInfo)
 private:
  inline void set_has_designfittingid();
  inline void clear_has_designfittingid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_fittingid();
  inline void clear_has_fittingid();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_fittingcount();
  inline void clear_has_fittingcount();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designfittingid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 fittingid_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 fittingcount_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_FittingInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_HWFInfo : public ::google::protobuf::Message {
 public:
  SJ_HWFInfo();
  virtual ~SJ_HWFInfo();

  SJ_HWFInfo(const SJ_HWFInfo& from);

  inline SJ_HWFInfo& operator=(const SJ_HWFInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_HWFInfo& default_instance();

  void Swap(SJ_HWFInfo* other);

  // implements Message ----------------------------------------------

  SJ_HWFInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_HWFInfo& from);
  void MergeFrom(const SJ_HWFInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignHWFID = 1;
  inline bool has_designhwfid() const;
  inline void clear_designhwfid();
  static const int kDesignHWFIDFieldNumber = 1;
  inline ::google::protobuf::int32 designhwfid() const;
  inline void set_designhwfid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 HWFittingID = 5;
  inline bool has_hwfittingid() const;
  inline void clear_hwfittingid();
  static const int kHWFittingIDFieldNumber = 5;
  inline ::google::protobuf::int32 hwfittingid() const;
  inline void set_hwfittingid(::google::protobuf::int32 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 7;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 7;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 SupplyType = 8;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 8;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 9;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 9;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 UseCount = 10;
  inline bool has_usecount() const;
  inline void clear_usecount();
  static const int kUseCountFieldNumber = 10;
  inline ::google::protobuf::int32 usecount() const;
  inline void set_usecount(::google::protobuf::int32 value);

  // required int32 CreatorID = 11;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 11;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 12;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 12;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 13;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 13;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 14;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 14;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_HWFInfo)
 private:
  inline void set_has_designhwfid();
  inline void clear_has_designhwfid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_hwfittingid();
  inline void clear_has_hwfittingid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_usecount();
  inline void clear_has_usecount();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designhwfid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 hwfittingid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 usecount_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_HWFInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_MarkInfo : public ::google::protobuf::Message {
 public:
  SJ_MarkInfo();
  virtual ~SJ_MarkInfo();

  SJ_MarkInfo(const SJ_MarkInfo& from);

  inline SJ_MarkInfo& operator=(const SJ_MarkInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_MarkInfo& default_instance();

  void Swap(SJ_MarkInfo* other);

  // implements Message ----------------------------------------------

  SJ_MarkInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_MarkInfo& from);
  void MergeFrom(const SJ_MarkInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignMarkID = 1;
  inline bool has_designmarkid() const;
  inline void clear_designmarkid();
  static const int kDesignMarkIDFieldNumber = 1;
  inline ::google::protobuf::int32 designmarkid() const;
  inline void set_designmarkid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPrintID = 5;
  inline bool has_designprintid() const;
  inline void clear_designprintid();
  static const int kDesignPrintIDFieldNumber = 5;
  inline ::google::protobuf::int32 designprintid() const;
  inline void set_designprintid(::google::protobuf::int32 value);

  // required int32 PrintID = 6;
  inline bool has_printid() const;
  inline void clear_printid();
  static const int kPrintIDFieldNumber = 6;
  inline ::google::protobuf::int32 printid() const;
  inline void set_printid(::google::protobuf::int32 value);

  // required int32 ViewType = 7;
  inline bool has_viewtype() const;
  inline void clear_viewtype();
  static const int kViewTypeFieldNumber = 7;
  inline ::google::protobuf::int32 viewtype() const;
  inline void set_viewtype(::google::protobuf::int32 value);

  // required int32 DockObjID = 8;
  inline bool has_dockobjid() const;
  inline void clear_dockobjid();
  static const int kDockObjIDFieldNumber = 8;
  inline ::google::protobuf::int32 dockobjid() const;
  inline void set_dockobjid(::google::protobuf::int32 value);

  // required int32 DockObjType = 9;
  inline bool has_dockobjtype() const;
  inline void clear_dockobjtype();
  static const int kDockObjTypeFieldNumber = 9;
  inline ::google::protobuf::int32 dockobjtype() const;
  inline void set_dockobjtype(::google::protobuf::int32 value);

  // required int32 MarkType = 10;
  inline bool has_marktype() const;
  inline void clear_marktype();
  static const int kMarkTypeFieldNumber = 10;
  inline ::google::protobuf::int32 marktype() const;
  inline void set_marktype(::google::protobuf::int32 value);

  // required int32 FontSize = 11;
  inline bool has_fontsize() const;
  inline void clear_fontsize();
  static const int kFontSizeFieldNumber = 11;
  inline ::google::protobuf::int32 fontsize() const;
  inline void set_fontsize(::google::protobuf::int32 value);

  // required double StartX = 12;
  inline bool has_startx() const;
  inline void clear_startx();
  static const int kStartXFieldNumber = 12;
  inline double startx() const;
  inline void set_startx(double value);

  // required double StartY = 13;
  inline bool has_starty() const;
  inline void clear_starty();
  static const int kStartYFieldNumber = 13;
  inline double starty() const;
  inline void set_starty(double value);

  // required double OffsetX = 14;
  inline bool has_offsetx() const;
  inline void clear_offsetx();
  static const int kOffsetXFieldNumber = 14;
  inline double offsetx() const;
  inline void set_offsetx(double value);

  // required double OffsetY = 15;
  inline bool has_offsety() const;
  inline void clear_offsety();
  static const int kOffsetYFieldNumber = 15;
  inline double offsety() const;
  inline void set_offsety(double value);

  // required double StopX = 16;
  inline bool has_stopx() const;
  inline void clear_stopx();
  static const int kStopXFieldNumber = 16;
  inline double stopx() const;
  inline void set_stopx(double value);

  // required double StopY = 17;
  inline bool has_stopy() const;
  inline void clear_stopy();
  static const int kStopYFieldNumber = 17;
  inline double stopy() const;
  inline void set_stopy(double value);

  // required double TopLeftX = 18;
  inline bool has_topleftx() const;
  inline void clear_topleftx();
  static const int kTopLeftXFieldNumber = 18;
  inline double topleftx() const;
  inline void set_topleftx(double value);

  // required double TopLeftY = 19;
  inline bool has_toplefty() const;
  inline void clear_toplefty();
  static const int kTopLeftYFieldNumber = 19;
  inline double toplefty() const;
  inline void set_toplefty(double value);

  // required double Width = 20;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 20;
  inline double width() const;
  inline void set_width(double value);

  // required double Height = 21;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 21;
  inline double height() const;
  inline void set_height(double value);

  // required bool IsVisible = 22;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 22;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 23;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 23;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required bool EditSign = 24;
  inline bool has_editsign() const;
  inline void clear_editsign();
  static const int kEditSignFieldNumber = 24;
  inline bool editsign() const;
  inline void set_editsign(bool value);

  // required bool StrickOut = 25;
  inline bool has_strickout() const;
  inline void clear_strickout();
  static const int kStrickOutFieldNumber = 25;
  inline bool strickout() const;
  inline void set_strickout(bool value);

  // required bool UnderLine = 26;
  inline bool has_underline() const;
  inline void clear_underline();
  static const int kUnderLineFieldNumber = 26;
  inline bool underline() const;
  inline void set_underline(bool value);

  // required bool Italic = 27;
  inline bool has_italic() const;
  inline void clear_italic();
  static const int kItalicFieldNumber = 27;
  inline bool italic() const;
  inline void set_italic(bool value);

  // required bool Bold = 28;
  inline bool has_bold() const;
  inline void clear_bold();
  static const int kBoldFieldNumber = 28;
  inline bool bold() const;
  inline void set_bold(bool value);

  // required int64 BGColor = 29;
  inline bool has_bgcolor() const;
  inline void clear_bgcolor();
  static const int kBGColorFieldNumber = 29;
  inline ::google::protobuf::int64 bgcolor() const;
  inline void set_bgcolor(::google::protobuf::int64 value);

  // required int64 FontColor = 30;
  inline bool has_fontcolor() const;
  inline void clear_fontcolor();
  static const int kFontColorFieldNumber = 30;
  inline ::google::protobuf::int64 fontcolor() const;
  inline void set_fontcolor(::google::protobuf::int64 value);

  // required int32 CreatorID = 31;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 31;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 32;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 32;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 33;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 33;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 34;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 34;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string FaceName = 35;
  inline bool has_facename() const;
  inline void clear_facename();
  static const int kFaceNameFieldNumber = 35;
  inline const ::std::string& facename() const;
  inline void set_facename(const ::std::string& value);
  inline void set_facename(const char* value);
  inline void set_facename(const char* value, size_t size);
  inline ::std::string* mutable_facename();
  inline ::std::string* release_facename();
  inline void set_allocated_facename(::std::string* facename);

  // required string RemarkText = 36;
  inline bool has_remarktext() const;
  inline void clear_remarktext();
  static const int kRemarkTextFieldNumber = 36;
  inline const ::std::string& remarktext() const;
  inline void set_remarktext(const ::std::string& value);
  inline void set_remarktext(const char* value);
  inline void set_remarktext(const char* value, size_t size);
  inline ::std::string* mutable_remarktext();
  inline ::std::string* release_remarktext();
  inline void set_allocated_remarktext(::std::string* remarktext);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_MarkInfo)
 private:
  inline void set_has_designmarkid();
  inline void clear_has_designmarkid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designprintid();
  inline void clear_has_designprintid();
  inline void set_has_printid();
  inline void clear_has_printid();
  inline void set_has_viewtype();
  inline void clear_has_viewtype();
  inline void set_has_dockobjid();
  inline void clear_has_dockobjid();
  inline void set_has_dockobjtype();
  inline void clear_has_dockobjtype();
  inline void set_has_marktype();
  inline void clear_has_marktype();
  inline void set_has_fontsize();
  inline void clear_has_fontsize();
  inline void set_has_startx();
  inline void clear_has_startx();
  inline void set_has_starty();
  inline void clear_has_starty();
  inline void set_has_offsetx();
  inline void clear_has_offsetx();
  inline void set_has_offsety();
  inline void clear_has_offsety();
  inline void set_has_stopx();
  inline void clear_has_stopx();
  inline void set_has_stopy();
  inline void clear_has_stopy();
  inline void set_has_topleftx();
  inline void clear_has_topleftx();
  inline void set_has_toplefty();
  inline void clear_has_toplefty();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_editsign();
  inline void clear_has_editsign();
  inline void set_has_strickout();
  inline void clear_has_strickout();
  inline void set_has_underline();
  inline void clear_has_underline();
  inline void set_has_italic();
  inline void clear_has_italic();
  inline void set_has_bold();
  inline void clear_has_bold();
  inline void set_has_bgcolor();
  inline void clear_has_bgcolor();
  inline void set_has_fontcolor();
  inline void clear_has_fontcolor();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_facename();
  inline void clear_has_facename();
  inline void set_has_remarktext();
  inline void clear_has_remarktext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designmarkid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 designprintid_;
  ::google::protobuf::int32 printid_;
  ::google::protobuf::int32 viewtype_;
  ::google::protobuf::int32 dockobjid_;
  ::google::protobuf::int32 dockobjtype_;
  ::google::protobuf::int32 marktype_;
  ::google::protobuf::int32 fontsize_;
  double startx_;
  double starty_;
  double offsetx_;
  double offsety_;
  double stopx_;
  double stopy_;
  double topleftx_;
  double toplefty_;
  double width_;
  double height_;
  bool isvisible_;
  bool islocked_;
  bool editsign_;
  bool strickout_;
  bool underline_;
  bool italic_;
  bool bold_;
  ::google::protobuf::int64 bgcolor_;
  ::google::protobuf::int64 fontcolor_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* facename_;
  ::std::string* remarktext_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(36 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_MarkInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_MatrixInfo : public ::google::protobuf::Message {
 public:
  SJ_MatrixInfo();
  virtual ~SJ_MatrixInfo();

  SJ_MatrixInfo(const SJ_MatrixInfo& from);

  inline SJ_MatrixInfo& operator=(const SJ_MatrixInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_MatrixInfo& default_instance();

  void Swap(SJ_MatrixInfo* other);

  // implements Message ----------------------------------------------

  SJ_MatrixInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_MatrixInfo& from);
  void MergeFrom(const SJ_MatrixInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 OrderID = 1;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 1;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 FactoryID = 4;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 4;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 5;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 5;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int64 TransObjID = 6;
  inline bool has_transobjid() const;
  inline void clear_transobjid();
  static const int kTransObjIDFieldNumber = 6;
  inline ::google::protobuf::int64 transobjid() const;
  inline void set_transobjid(::google::protobuf::int64 value);

  // required int32 TransObjType = 7;
  inline bool has_transobjtype() const;
  inline void clear_transobjtype();
  static const int kTransObjTypeFieldNumber = 7;
  inline ::google::protobuf::int32 transobjtype() const;
  inline void set_transobjtype(::google::protobuf::int32 value);

  // required int32 MajorCurSel = 8;
  inline bool has_majorcursel() const;
  inline void clear_majorcursel();
  static const int kMajorCurSelFieldNumber = 8;
  inline ::google::protobuf::int32 majorcursel() const;
  inline void set_majorcursel(::google::protobuf::int32 value);

  // required int32 MinorCurSel = 9;
  inline bool has_minorcursel() const;
  inline void clear_minorcursel();
  static const int kMinorCurSelFieldNumber = 9;
  inline ::google::protobuf::int32 minorcursel() const;
  inline void set_minorcursel(::google::protobuf::int32 value);

  // required int32 MatCurIndex = 10;
  inline bool has_matcurindex() const;
  inline void clear_matcurindex();
  static const int kMatCurIndexFieldNumber = 10;
  inline ::google::protobuf::int32 matcurindex() const;
  inline void set_matcurindex(::google::protobuf::int32 value);

  // required int32 CabMatPlanID = 11;
  inline bool has_cabmatplanid() const;
  inline void clear_cabmatplanid();
  static const int kCabMatPlanIDFieldNumber = 11;
  inline ::google::protobuf::int32 cabmatplanid() const;
  inline void set_cabmatplanid(::google::protobuf::int32 value);

  // required double M11 = 12;
  inline bool has_m11() const;
  inline void clear_m11();
  static const int kM11FieldNumber = 12;
  inline double m11() const;
  inline void set_m11(double value);

  // required double M12 = 13;
  inline bool has_m12() const;
  inline void clear_m12();
  static const int kM12FieldNumber = 13;
  inline double m12() const;
  inline void set_m12(double value);

  // required double M13 = 14;
  inline bool has_m13() const;
  inline void clear_m13();
  static const int kM13FieldNumber = 14;
  inline double m13() const;
  inline void set_m13(double value);

  // required double M21 = 15;
  inline bool has_m21() const;
  inline void clear_m21();
  static const int kM21FieldNumber = 15;
  inline double m21() const;
  inline void set_m21(double value);

  // required double M22 = 16;
  inline bool has_m22() const;
  inline void clear_m22();
  static const int kM22FieldNumber = 16;
  inline double m22() const;
  inline void set_m22(double value);

  // required double M23 = 17;
  inline bool has_m23() const;
  inline void clear_m23();
  static const int kM23FieldNumber = 17;
  inline double m23() const;
  inline void set_m23(double value);

  // required double M31 = 18;
  inline bool has_m31() const;
  inline void clear_m31();
  static const int kM31FieldNumber = 18;
  inline double m31() const;
  inline void set_m31(double value);

  // required double M32 = 19;
  inline bool has_m32() const;
  inline void clear_m32();
  static const int kM32FieldNumber = 19;
  inline double m32() const;
  inline void set_m32(double value);

  // required double M33 = 20;
  inline bool has_m33() const;
  inline void clear_m33();
  static const int kM33FieldNumber = 20;
  inline double m33() const;
  inline void set_m33(double value);

  // required double M41 = 21;
  inline bool has_m41() const;
  inline void clear_m41();
  static const int kM41FieldNumber = 21;
  inline double m41() const;
  inline void set_m41(double value);

  // required double M42 = 22;
  inline bool has_m42() const;
  inline void clear_m42();
  static const int kM42FieldNumber = 22;
  inline double m42() const;
  inline void set_m42(double value);

  // required double M43 = 23;
  inline bool has_m43() const;
  inline void clear_m43();
  static const int kM43FieldNumber = 23;
  inline double m43() const;
  inline void set_m43(double value);

  // required double M44 = 24;
  inline bool has_m44() const;
  inline void clear_m44();
  static const int kM44FieldNumber = 24;
  inline double m44() const;
  inline void set_m44(double value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_MatrixInfo)
 private:
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_transobjid();
  inline void clear_has_transobjid();
  inline void set_has_transobjtype();
  inline void clear_has_transobjtype();
  inline void set_has_majorcursel();
  inline void clear_has_majorcursel();
  inline void set_has_minorcursel();
  inline void clear_has_minorcursel();
  inline void set_has_matcurindex();
  inline void clear_has_matcurindex();
  inline void set_has_cabmatplanid();
  inline void clear_has_cabmatplanid();
  inline void set_has_m11();
  inline void clear_has_m11();
  inline void set_has_m12();
  inline void clear_has_m12();
  inline void set_has_m13();
  inline void clear_has_m13();
  inline void set_has_m21();
  inline void clear_has_m21();
  inline void set_has_m22();
  inline void clear_has_m22();
  inline void set_has_m23();
  inline void clear_has_m23();
  inline void set_has_m31();
  inline void clear_has_m31();
  inline void set_has_m32();
  inline void clear_has_m32();
  inline void set_has_m33();
  inline void clear_has_m33();
  inline void set_has_m41();
  inline void clear_has_m41();
  inline void set_has_m42();
  inline void clear_has_m42();
  inline void set_has_m43();
  inline void clear_has_m43();
  inline void set_has_m44();
  inline void clear_has_m44();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 transobjtype_;
  ::google::protobuf::int64 transobjid_;
  ::google::protobuf::int32 majorcursel_;
  ::google::protobuf::int32 minorcursel_;
  ::google::protobuf::int32 matcurindex_;
  ::google::protobuf::int32 cabmatplanid_;
  double m11_;
  double m12_;
  double m13_;
  double m21_;
  double m22_;
  double m23_;
  double m31_;
  double m32_;
  double m33_;
  double m41_;
  double m42_;
  double m43_;
  double m44_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_MatrixInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_OrderAddedInfo : public ::google::protobuf::Message {
 public:
  SJ_OrderAddedInfo();
  virtual ~SJ_OrderAddedInfo();

  SJ_OrderAddedInfo(const SJ_OrderAddedInfo& from);

  inline SJ_OrderAddedInfo& operator=(const SJ_OrderAddedInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_OrderAddedInfo& default_instance();

  void Swap(SJ_OrderAddedInfo* other);

  // implements Message ----------------------------------------------

  SJ_OrderAddedInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_OrderAddedInfo& from);
  void MergeFrom(const SJ_OrderAddedInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 OrderAddedID = 1;
  inline bool has_orderaddedid() const;
  inline void clear_orderaddedid();
  static const int kOrderAddedIDFieldNumber = 1;
  inline ::google::protobuf::int32 orderaddedid() const;
  inline void set_orderaddedid(::google::protobuf::int32 value);

  // required int64 OrderID = 2;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 2;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 FactoryID = 4;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 4;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 UseCount = 5;
  inline bool has_usecount() const;
  inline void clear_usecount();
  static const int kUseCountFieldNumber = 5;
  inline ::google::protobuf::int32 usecount() const;
  inline void set_usecount(::google::protobuf::int32 value);

  // required double UnitPrice = 6;
  inline bool has_unitprice() const;
  inline void clear_unitprice();
  static const int kUnitPriceFieldNumber = 6;
  inline double unitprice() const;
  inline void set_unitprice(double value);

  // required int64 CreateTime = 7;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 7;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 8;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 8;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string AddedName = 9;
  inline bool has_addedname() const;
  inline void clear_addedname();
  static const int kAddedNameFieldNumber = 9;
  inline const ::std::string& addedname() const;
  inline void set_addedname(const ::std::string& value);
  inline void set_addedname(const char* value);
  inline void set_addedname(const char* value, size_t size);
  inline ::std::string* mutable_addedname();
  inline ::std::string* release_addedname();
  inline void set_allocated_addedname(::std::string* addedname);

  // required string MatName = 10;
  inline bool has_matname() const;
  inline void clear_matname();
  static const int kMatNameFieldNumber = 10;
  inline const ::std::string& matname() const;
  inline void set_matname(const ::std::string& value);
  inline void set_matname(const char* value);
  inline void set_matname(const char* value, size_t size);
  inline ::std::string* mutable_matname();
  inline ::std::string* release_matname();
  inline void set_allocated_matname(::std::string* matname);

  // required string UnitName = 11;
  inline bool has_unitname() const;
  inline void clear_unitname();
  static const int kUnitNameFieldNumber = 11;
  inline const ::std::string& unitname() const;
  inline void set_unitname(const ::std::string& value);
  inline void set_unitname(const char* value);
  inline void set_unitname(const char* value, size_t size);
  inline ::std::string* mutable_unitname();
  inline ::std::string* release_unitname();
  inline void set_allocated_unitname(::std::string* unitname);

  // required string SpecName = 12;
  inline bool has_specname() const;
  inline void clear_specname();
  static const int kSpecNameFieldNumber = 12;
  inline const ::std::string& specname() const;
  inline void set_specname(const ::std::string& value);
  inline void set_specname(const char* value);
  inline void set_specname(const char* value, size_t size);
  inline ::std::string* mutable_specname();
  inline ::std::string* release_specname();
  inline void set_allocated_specname(::std::string* specname);

  // required string AttachFileName = 13;
  inline bool has_attachfilename() const;
  inline void clear_attachfilename();
  static const int kAttachFileNameFieldNumber = 13;
  inline const ::std::string& attachfilename() const;
  inline void set_attachfilename(const ::std::string& value);
  inline void set_attachfilename(const char* value);
  inline void set_attachfilename(const char* value, size_t size);
  inline ::std::string* mutable_attachfilename();
  inline ::std::string* release_attachfilename();
  inline void set_allocated_attachfilename(::std::string* attachfilename);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_OrderAddedInfo)
 private:
  inline void set_has_orderaddedid();
  inline void clear_has_orderaddedid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_usecount();
  inline void clear_has_usecount();
  inline void set_has_unitprice();
  inline void clear_has_unitprice();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_addedname();
  inline void clear_has_addedname();
  inline void set_has_matname();
  inline void clear_has_matname();
  inline void set_has_unitname();
  inline void clear_has_unitname();
  inline void set_has_specname();
  inline void clear_has_specname();
  inline void set_has_attachfilename();
  inline void clear_has_attachfilename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 orderaddedid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 usecount_;
  double unitprice_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* addedname_;
  ::std::string* matname_;
  ::std::string* unitname_;
  ::std::string* specname_;
  ::std::string* attachfilename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_OrderAddedInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_OrderDataInfo : public ::google::protobuf::Message {
 public:
  SJ_OrderDataInfo();
  virtual ~SJ_OrderDataInfo();

  SJ_OrderDataInfo(const SJ_OrderDataInfo& from);

  inline SJ_OrderDataInfo& operator=(const SJ_OrderDataInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_OrderDataInfo& default_instance();

  void Swap(SJ_OrderDataInfo* other);

  // implements Message ----------------------------------------------

  SJ_OrderDataInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_OrderDataInfo& from);
  void MergeFrom(const SJ_OrderDataInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 OrderID = 1;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 1;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 FactoryID = 3;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 3;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 ShopID = 4;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 4;
  inline ::google::protobuf::int32 shopid() const;
  inline void set_shopid(::google::protobuf::int32 value);

  // required int32 MaxMetaID = 5;
  inline bool has_maxmetaid() const;
  inline void clear_maxmetaid();
  static const int kMaxMetaIDFieldNumber = 5;
  inline ::google::protobuf::int32 maxmetaid() const;
  inline void set_maxmetaid(::google::protobuf::int32 value);

  // required int32 DesignerID = 6;
  inline bool has_designerid() const;
  inline void clear_designerid();
  static const int kDesignerIDFieldNumber = 6;
  inline ::google::protobuf::int32 designerid() const;
  inline void set_designerid(::google::protobuf::int32 value);

  // required int32 SellerID = 7;
  inline bool has_sellerid() const;
  inline void clear_sellerid();
  static const int kSellerIDFieldNumber = 7;
  inline ::google::protobuf::int32 sellerid() const;
  inline void set_sellerid(::google::protobuf::int32 value);

  // required int32 PreSurveyorID = 8;
  inline bool has_presurveyorid() const;
  inline void clear_presurveyorid();
  static const int kPreSurveyorIDFieldNumber = 8;
  inline ::google::protobuf::int32 presurveyorid() const;
  inline void set_presurveyorid(::google::protobuf::int32 value);

  // required int32 ReSurveyorID = 9;
  inline bool has_resurveyorid() const;
  inline void clear_resurveyorid();
  static const int kReSurveyorIDFieldNumber = 9;
  inline ::google::protobuf::int32 resurveyorid() const;
  inline void set_resurveyorid(::google::protobuf::int32 value);

  // required bool IsNew = 10;
  inline bool has_isnew() const;
  inline void clear_isnew();
  static const int kIsNewFieldNumber = 10;
  inline bool isnew() const;
  inline void set_isnew(bool value);

  // required bool IsShare = 11;
  inline bool has_isshare() const;
  inline void clear_isshare();
  static const int kIsShareFieldNumber = 11;
  inline bool isshare() const;
  inline void set_isshare(bool value);

  // required bool IsUpload = 12;
  inline bool has_isupload() const;
  inline void clear_isupload();
  static const int kIsUploadFieldNumber = 12;
  inline bool isupload() const;
  inline void set_isupload(bool value);

  // required int64 CreateTime = 13;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 13;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 PreSurveyTime = 14;
  inline bool has_presurveytime() const;
  inline void clear_presurveytime();
  static const int kPreSurveyTimeFieldNumber = 14;
  inline ::google::protobuf::int64 presurveytime() const;
  inline void set_presurveytime(::google::protobuf::int64 value);

  // required int64 ReSurveyTime = 15;
  inline bool has_resurveytime() const;
  inline void clear_resurveytime();
  static const int kReSurveyTimeFieldNumber = 15;
  inline ::google::protobuf::int64 resurveytime() const;
  inline void set_resurveytime(::google::protobuf::int64 value);

  // required int64 OrderTime = 16;
  inline bool has_ordertime() const;
  inline void clear_ordertime();
  static const int kOrderTimeFieldNumber = 16;
  inline ::google::protobuf::int64 ordertime() const;
  inline void set_ordertime(::google::protobuf::int64 value);

  // required int64 DeliveryTime = 17;
  inline bool has_deliverytime() const;
  inline void clear_deliverytime();
  static const int kDeliveryTimeFieldNumber = 17;
  inline ::google::protobuf::int64 deliverytime() const;
  inline void set_deliverytime(::google::protobuf::int64 value);

  // required int64 InstallTime = 18;
  inline bool has_installtime() const;
  inline void clear_installtime();
  static const int kInstallTimeFieldNumber = 18;
  inline ::google::protobuf::int64 installtime() const;
  inline void set_installtime(::google::protobuf::int64 value);

  // required string GeoCode = 19;
  inline bool has_geocode() const;
  inline void clear_geocode();
  static const int kGeoCodeFieldNumber = 19;
  inline const ::std::string& geocode() const;
  inline void set_geocode(const ::std::string& value);
  inline void set_geocode(const char* value);
  inline void set_geocode(const char* value, size_t size);
  inline ::std::string* mutable_geocode();
  inline ::std::string* release_geocode();
  inline void set_allocated_geocode(::std::string* geocode);

  // required string OrderTitle = 20;
  inline bool has_ordertitle() const;
  inline void clear_ordertitle();
  static const int kOrderTitleFieldNumber = 20;
  inline const ::std::string& ordertitle() const;
  inline void set_ordertitle(const ::std::string& value);
  inline void set_ordertitle(const char* value);
  inline void set_ordertitle(const char* value, size_t size);
  inline ::std::string* mutable_ordertitle();
  inline ::std::string* release_ordertitle();
  inline void set_allocated_ordertitle(::std::string* ordertitle);

  // required string CustomerName = 21;
  inline bool has_customername() const;
  inline void clear_customername();
  static const int kCustomerNameFieldNumber = 21;
  inline const ::std::string& customername() const;
  inline void set_customername(const ::std::string& value);
  inline void set_customername(const char* value);
  inline void set_customername(const char* value, size_t size);
  inline ::std::string* mutable_customername();
  inline ::std::string* release_customername();
  inline void set_allocated_customername(::std::string* customername);

  // required string CustomerTel = 22;
  inline bool has_customertel() const;
  inline void clear_customertel();
  static const int kCustomerTelFieldNumber = 22;
  inline const ::std::string& customertel() const;
  inline void set_customertel(const ::std::string& value);
  inline void set_customertel(const char* value);
  inline void set_customertel(const char* value, size_t size);
  inline ::std::string* mutable_customertel();
  inline ::std::string* release_customertel();
  inline void set_allocated_customertel(::std::string* customertel);

  // required string CustomerPostcode = 23;
  inline bool has_customerpostcode() const;
  inline void clear_customerpostcode();
  static const int kCustomerPostcodeFieldNumber = 23;
  inline const ::std::string& customerpostcode() const;
  inline void set_customerpostcode(const ::std::string& value);
  inline void set_customerpostcode(const char* value);
  inline void set_customerpostcode(const char* value, size_t size);
  inline ::std::string* mutable_customerpostcode();
  inline ::std::string* release_customerpostcode();
  inline void set_allocated_customerpostcode(::std::string* customerpostcode);

  // required string CustomerQQ = 24;
  inline bool has_customerqq() const;
  inline void clear_customerqq();
  static const int kCustomerQQFieldNumber = 24;
  inline const ::std::string& customerqq() const;
  inline void set_customerqq(const ::std::string& value);
  inline void set_customerqq(const char* value);
  inline void set_customerqq(const char* value, size_t size);
  inline ::std::string* mutable_customerqq();
  inline ::std::string* release_customerqq();
  inline void set_allocated_customerqq(::std::string* customerqq);

  // required string CustomerEmail = 25;
  inline bool has_customeremail() const;
  inline void clear_customeremail();
  static const int kCustomerEmailFieldNumber = 25;
  inline const ::std::string& customeremail() const;
  inline void set_customeremail(const ::std::string& value);
  inline void set_customeremail(const char* value);
  inline void set_customeremail(const char* value, size_t size);
  inline ::std::string* mutable_customeremail();
  inline ::std::string* release_customeremail();
  inline void set_allocated_customeremail(::std::string* customeremail);

  // required string InstallAddress = 26;
  inline bool has_installaddress() const;
  inline void clear_installaddress();
  static const int kInstallAddressFieldNumber = 26;
  inline const ::std::string& installaddress() const;
  inline void set_installaddress(const ::std::string& value);
  inline void set_installaddress(const char* value);
  inline void set_installaddress(const char* value, size_t size);
  inline ::std::string* mutable_installaddress();
  inline ::std::string* release_installaddress();
  inline void set_allocated_installaddress(::std::string* installaddress);

  // required string OrderMemo = 27;
  inline bool has_ordermemo() const;
  inline void clear_ordermemo();
  static const int kOrderMemoFieldNumber = 27;
  inline const ::std::string& ordermemo() const;
  inline void set_ordermemo(const ::std::string& value);
  inline void set_ordermemo(const char* value);
  inline void set_ordermemo(const char* value, size_t size);
  inline ::std::string* mutable_ordermemo();
  inline ::std::string* release_ordermemo();
  inline void set_allocated_ordermemo(::std::string* ordermemo);

  // required string AttachFilePath = 28;
  inline bool has_attachfilepath() const;
  inline void clear_attachfilepath();
  static const int kAttachFilePathFieldNumber = 28;
  inline const ::std::string& attachfilepath() const;
  inline void set_attachfilepath(const ::std::string& value);
  inline void set_attachfilepath(const char* value);
  inline void set_attachfilepath(const char* value, size_t size);
  inline ::std::string* mutable_attachfilepath();
  inline ::std::string* release_attachfilepath();
  inline void set_allocated_attachfilepath(::std::string* attachfilepath);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_OrderDataInfo)
 private:
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_shopid();
  inline void clear_has_shopid();
  inline void set_has_maxmetaid();
  inline void clear_has_maxmetaid();
  inline void set_has_designerid();
  inline void clear_has_designerid();
  inline void set_has_sellerid();
  inline void clear_has_sellerid();
  inline void set_has_presurveyorid();
  inline void clear_has_presurveyorid();
  inline void set_has_resurveyorid();
  inline void clear_has_resurveyorid();
  inline void set_has_isnew();
  inline void clear_has_isnew();
  inline void set_has_isshare();
  inline void clear_has_isshare();
  inline void set_has_isupload();
  inline void clear_has_isupload();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_presurveytime();
  inline void clear_has_presurveytime();
  inline void set_has_resurveytime();
  inline void clear_has_resurveytime();
  inline void set_has_ordertime();
  inline void clear_has_ordertime();
  inline void set_has_deliverytime();
  inline void clear_has_deliverytime();
  inline void set_has_installtime();
  inline void clear_has_installtime();
  inline void set_has_geocode();
  inline void clear_has_geocode();
  inline void set_has_ordertitle();
  inline void clear_has_ordertitle();
  inline void set_has_customername();
  inline void clear_has_customername();
  inline void set_has_customertel();
  inline void clear_has_customertel();
  inline void set_has_customerpostcode();
  inline void clear_has_customerpostcode();
  inline void set_has_customerqq();
  inline void clear_has_customerqq();
  inline void set_has_customeremail();
  inline void clear_has_customeremail();
  inline void set_has_installaddress();
  inline void clear_has_installaddress();
  inline void set_has_ordermemo();
  inline void clear_has_ordermemo();
  inline void set_has_attachfilepath();
  inline void clear_has_attachfilepath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 shopid_;
  ::google::protobuf::int32 maxmetaid_;
  ::google::protobuf::int32 designerid_;
  ::google::protobuf::int32 sellerid_;
  ::google::protobuf::int32 presurveyorid_;
  ::google::protobuf::int32 resurveyorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 presurveytime_;
  ::google::protobuf::int64 resurveytime_;
  ::google::protobuf::int64 ordertime_;
  ::google::protobuf::int64 deliverytime_;
  ::google::protobuf::int64 installtime_;
  ::std::string* geocode_;
  ::std::string* ordertitle_;
  ::std::string* customername_;
  ::std::string* customertel_;
  ::std::string* customerpostcode_;
  ::std::string* customerqq_;
  ::std::string* customeremail_;
  ::std::string* installaddress_;
  ::std::string* ordermemo_;
  ::std::string* attachfilepath_;
  bool isnew_;
  bool isshare_;
  bool isupload_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_OrderDataInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_PackInfo : public ::google::protobuf::Message {
 public:
  SJ_PackInfo();
  virtual ~SJ_PackInfo();

  SJ_PackInfo(const SJ_PackInfo& from);

  inline SJ_PackInfo& operator=(const SJ_PackInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_PackInfo& default_instance();

  void Swap(SJ_PackInfo* other);

  // implements Message ----------------------------------------------

  SJ_PackInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_PackInfo& from);
  void MergeFrom(const SJ_PackInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignPackID = 1;
  inline bool has_designpackid() const;
  inline void clear_designpackid();
  static const int kDesignPackIDFieldNumber = 1;
  inline ::google::protobuf::int32 designpackid() const;
  inline void set_designpackid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 FittingPackID = 5;
  inline bool has_fittingpackid() const;
  inline void clear_fittingpackid();
  static const int kFittingPackIDFieldNumber = 5;
  inline ::google::protobuf::int32 fittingpackid() const;
  inline void set_fittingpackid(::google::protobuf::int32 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 7;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 7;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required bool IsSeparate = 8;
  inline bool has_isseparate() const;
  inline void clear_isseparate();
  static const int kIsSeparateFieldNumber = 8;
  inline bool isseparate() const;
  inline void set_isseparate(bool value);

  // required int32 UseCount = 9;
  inline bool has_usecount() const;
  inline void clear_usecount();
  static const int kUseCountFieldNumber = 9;
  inline ::google::protobuf::int32 usecount() const;
  inline void set_usecount(::google::protobuf::int32 value);

  // required int32 CreatorID = 10;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 10;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 11;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 11;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 12;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 12;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 13;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 13;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_PackInfo)
 private:
  inline void set_has_designpackid();
  inline void clear_has_designpackid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_fittingpackid();
  inline void clear_has_fittingpackid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_isseparate();
  inline void clear_has_isseparate();
  inline void set_has_usecount();
  inline void clear_has_usecount();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designpackid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 fittingpackid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  bool isseparate_;
  ::google::protobuf::int32 usecount_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_PackInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_PointInfo : public ::google::protobuf::Message {
 public:
  SJ_PointInfo();
  virtual ~SJ_PointInfo();

  SJ_PointInfo(const SJ_PointInfo& from);

  inline SJ_PointInfo& operator=(const SJ_PointInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_PointInfo& default_instance();

  void Swap(SJ_PointInfo* other);

  // implements Message ----------------------------------------------

  SJ_PointInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_PointInfo& from);
  void MergeFrom(const SJ_PointInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignPlanID = 1;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 1;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 3;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 FactoryID = 4;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 4;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 5;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 5;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 TransObjID = 6;
  inline bool has_transobjid() const;
  inline void clear_transobjid();
  static const int kTransObjIDFieldNumber = 6;
  inline ::google::protobuf::int32 transobjid() const;
  inline void set_transobjid(::google::protobuf::int32 value);

  // required int32 TransObjType = 7;
  inline bool has_transobjtype() const;
  inline void clear_transobjtype();
  static const int kTransObjTypeFieldNumber = 7;
  inline ::google::protobuf::int32 transobjtype() const;
  inline void set_transobjtype(::google::protobuf::int32 value);

  // required int32 PointIndex = 8;
  inline bool has_pointindex() const;
  inline void clear_pointindex();
  static const int kPointIndexFieldNumber = 8;
  inline ::google::protobuf::int32 pointindex() const;
  inline void set_pointindex(::google::protobuf::int32 value);

  // required double CoordX = 9;
  inline bool has_coordx() const;
  inline void clear_coordx();
  static const int kCoordXFieldNumber = 9;
  inline double coordx() const;
  inline void set_coordx(double value);

  // required double CoordY = 10;
  inline bool has_coordy() const;
  inline void clear_coordy();
  static const int kCoordYFieldNumber = 10;
  inline double coordy() const;
  inline void set_coordy(double value);

  // required double CoordZ = 11;
  inline bool has_coordz() const;
  inline void clear_coordz();
  static const int kCoordZFieldNumber = 11;
  inline double coordz() const;
  inline void set_coordz(double value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_PointInfo)
 private:
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_transobjid();
  inline void clear_has_transobjid();
  inline void set_has_transobjtype();
  inline void clear_has_transobjtype();
  inline void set_has_pointindex();
  inline void clear_has_pointindex();
  inline void set_has_coordx();
  inline void clear_has_coordx();
  inline void set_has_coordy();
  inline void clear_has_coordy();
  inline void set_has_coordz();
  inline void clear_has_coordz();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 transobjid_;
  ::google::protobuf::int32 transobjtype_;
  ::google::protobuf::int32 pointindex_;
  double coordx_;
  double coordy_;
  double coordz_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_PointInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_PrintElementInfo : public ::google::protobuf::Message {
 public:
  SJ_PrintElementInfo();
  virtual ~SJ_PrintElementInfo();

  SJ_PrintElementInfo(const SJ_PrintElementInfo& from);

  inline SJ_PrintElementInfo& operator=(const SJ_PrintElementInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_PrintElementInfo& default_instance();

  void Swap(SJ_PrintElementInfo* other);

  // implements Message ----------------------------------------------

  SJ_PrintElementInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_PrintElementInfo& from);
  void MergeFrom(const SJ_PrintElementInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignPrintElementID = 1;
  inline bool has_designprintelementid() const;
  inline void clear_designprintelementid();
  static const int kDesignPrintElementIDFieldNumber = 1;
  inline ::google::protobuf::int32 designprintelementid() const;
  inline void set_designprintelementid(::google::protobuf::int32 value);

  // required int32 DesignPrintGroupID = 2;
  inline bool has_designprintgroupid() const;
  inline void clear_designprintgroupid();
  static const int kDesignPrintGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 designprintgroupid() const;
  inline void set_designprintgroupid(::google::protobuf::int32 value);

  // required int32 DesignPrintID = 3;
  inline bool has_designprintid() const;
  inline void clear_designprintid();
  static const int kDesignPrintIDFieldNumber = 3;
  inline ::google::protobuf::int32 designprintid() const;
  inline void set_designprintid(::google::protobuf::int32 value);

  // required int32 OrderCate = 4;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 4;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 6;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 6;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 ObjType = 7;
  inline bool has_objtype() const;
  inline void clear_objtype();
  static const int kObjTypeFieldNumber = 7;
  inline ::google::protobuf::int32 objtype() const;
  inline void set_objtype(::google::protobuf::int32 value);

  // required int32 ObjID = 8;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIDFieldNumber = 8;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // required int32 PrintGroupID = 9;
  inline bool has_printgroupid() const;
  inline void clear_printgroupid();
  static const int kPrintGroupIDFieldNumber = 9;
  inline ::google::protobuf::int32 printgroupid() const;
  inline void set_printgroupid(::google::protobuf::int32 value);

  // required int32 ViewType = 10;
  inline bool has_viewtype() const;
  inline void clear_viewtype();
  static const int kViewTypeFieldNumber = 10;
  inline ::google::protobuf::int32 viewtype() const;
  inline void set_viewtype(::google::protobuf::int32 value);

  // required bool IsVisible = 11;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 11;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 12;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 12;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required int32 CreatorID = 13;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 13;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 14;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 14;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 15;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 15;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 16;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 16;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_PrintElementInfo)
 private:
  inline void set_has_designprintelementid();
  inline void clear_has_designprintelementid();
  inline void set_has_designprintgroupid();
  inline void clear_has_designprintgroupid();
  inline void set_has_designprintid();
  inline void clear_has_designprintid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_objtype();
  inline void clear_has_objtype();
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_printgroupid();
  inline void clear_has_printgroupid();
  inline void set_has_viewtype();
  inline void clear_has_viewtype();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designprintelementid_;
  ::google::protobuf::int32 designprintgroupid_;
  ::google::protobuf::int32 designprintid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 objtype_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 printgroupid_;
  ::google::protobuf::int32 viewtype_;
  bool isvisible_;
  bool islocked_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_PrintElementInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_PrintGroupInfo : public ::google::protobuf::Message {
 public:
  SJ_PrintGroupInfo();
  virtual ~SJ_PrintGroupInfo();

  SJ_PrintGroupInfo(const SJ_PrintGroupInfo& from);

  inline SJ_PrintGroupInfo& operator=(const SJ_PrintGroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_PrintGroupInfo& default_instance();

  void Swap(SJ_PrintGroupInfo* other);

  // implements Message ----------------------------------------------

  SJ_PrintGroupInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_PrintGroupInfo& from);
  void MergeFrom(const SJ_PrintGroupInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignPrintGroupID = 1;
  inline bool has_designprintgroupid() const;
  inline void clear_designprintgroupid();
  static const int kDesignPrintGroupIDFieldNumber = 1;
  inline ::google::protobuf::int32 designprintgroupid() const;
  inline void set_designprintgroupid(::google::protobuf::int32 value);

  // required int32 DesignPrintID = 2;
  inline bool has_designprintid() const;
  inline void clear_designprintid();
  static const int kDesignPrintIDFieldNumber = 2;
  inline ::google::protobuf::int32 designprintid() const;
  inline void set_designprintid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 4;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 4;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 5;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 5;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 PrintID = 6;
  inline bool has_printid() const;
  inline void clear_printid();
  static const int kPrintIDFieldNumber = 6;
  inline ::google::protobuf::int32 printid() const;
  inline void set_printid(::google::protobuf::int32 value);

  // required int32 PrintGroupID = 7;
  inline bool has_printgroupid() const;
  inline void clear_printgroupid();
  static const int kPrintGroupIDFieldNumber = 7;
  inline ::google::protobuf::int32 printgroupid() const;
  inline void set_printgroupid(::google::protobuf::int32 value);

  // required bool ManyViewPort = 8;
  inline bool has_manyviewport() const;
  inline void clear_manyviewport();
  static const int kManyViewPortFieldNumber = 8;
  inline bool manyviewport() const;
  inline void set_manyviewport(bool value);

  // required int32 FrameStyle = 9;
  inline bool has_framestyle() const;
  inline void clear_framestyle();
  static const int kFrameStyleFieldNumber = 9;
  inline ::google::protobuf::int32 framestyle() const;
  inline void set_framestyle(::google::protobuf::int32 value);

  // required int32 FrameColorR = 10;
  inline bool has_framecolorr() const;
  inline void clear_framecolorr();
  static const int kFrameColorRFieldNumber = 10;
  inline ::google::protobuf::int32 framecolorr() const;
  inline void set_framecolorr(::google::protobuf::int32 value);

  // required int32 FrameColorG = 11;
  inline bool has_framecolorg() const;
  inline void clear_framecolorg();
  static const int kFrameColorGFieldNumber = 11;
  inline ::google::protobuf::int32 framecolorg() const;
  inline void set_framecolorg(::google::protobuf::int32 value);

  // required int32 FrameColorB = 12;
  inline bool has_framecolorb() const;
  inline void clear_framecolorb();
  static const int kFrameColorBFieldNumber = 12;
  inline ::google::protobuf::int32 framecolorb() const;
  inline void set_framecolorb(::google::protobuf::int32 value);

  // required int32 FrameColorA = 13;
  inline bool has_framecolora() const;
  inline void clear_framecolora();
  static const int kFrameColorAFieldNumber = 13;
  inline ::google::protobuf::int32 framecolora() const;
  inline void set_framecolora(::google::protobuf::int32 value);

  // required double FrameWidth = 14;
  inline bool has_framewidth() const;
  inline void clear_framewidth();
  static const int kFrameWidthFieldNumber = 14;
  inline double framewidth() const;
  inline void set_framewidth(double value);

  // required double LeftX = 15;
  inline bool has_leftx() const;
  inline void clear_leftx();
  static const int kLeftXFieldNumber = 15;
  inline double leftx() const;
  inline void set_leftx(double value);

  // required double RightY = 16;
  inline bool has_righty() const;
  inline void clear_righty();
  static const int kRightYFieldNumber = 16;
  inline double righty() const;
  inline void set_righty(double value);

  // required double ScaleX = 17;
  inline bool has_scalex() const;
  inline void clear_scalex();
  static const int kScaleXFieldNumber = 17;
  inline double scalex() const;
  inline void set_scalex(double value);

  // required double ScaleY = 18;
  inline bool has_scaley() const;
  inline void clear_scaley();
  static const int kScaleYFieldNumber = 18;
  inline double scaley() const;
  inline void set_scaley(double value);

  // required double ScaleOffsetX = 19;
  inline bool has_scaleoffsetx() const;
  inline void clear_scaleoffsetx();
  static const int kScaleOffsetXFieldNumber = 19;
  inline double scaleoffsetx() const;
  inline void set_scaleoffsetx(double value);

  // required double ScaleOffsetY = 20;
  inline bool has_scaleoffsety() const;
  inline void clear_scaleoffsety();
  static const int kScaleOffsetYFieldNumber = 20;
  inline double scaleoffsety() const;
  inline void set_scaleoffsety(double value);

  // required double ScaleFactor = 21;
  inline bool has_scalefactor() const;
  inline void clear_scalefactor();
  static const int kScaleFactorFieldNumber = 21;
  inline double scalefactor() const;
  inline void set_scalefactor(double value);

  // required bool IsVisible = 22;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 22;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 23;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 23;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required int32 CreatorID = 24;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 24;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 25;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 25;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 26;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 26;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 27;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 27;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_PrintGroupInfo)
 private:
  inline void set_has_designprintgroupid();
  inline void clear_has_designprintgroupid();
  inline void set_has_designprintid();
  inline void clear_has_designprintid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_printid();
  inline void clear_has_printid();
  inline void set_has_printgroupid();
  inline void clear_has_printgroupid();
  inline void set_has_manyviewport();
  inline void clear_has_manyviewport();
  inline void set_has_framestyle();
  inline void clear_has_framestyle();
  inline void set_has_framecolorr();
  inline void clear_has_framecolorr();
  inline void set_has_framecolorg();
  inline void clear_has_framecolorg();
  inline void set_has_framecolorb();
  inline void clear_has_framecolorb();
  inline void set_has_framecolora();
  inline void clear_has_framecolora();
  inline void set_has_framewidth();
  inline void clear_has_framewidth();
  inline void set_has_leftx();
  inline void clear_has_leftx();
  inline void set_has_righty();
  inline void clear_has_righty();
  inline void set_has_scalex();
  inline void clear_has_scalex();
  inline void set_has_scaley();
  inline void clear_has_scaley();
  inline void set_has_scaleoffsetx();
  inline void clear_has_scaleoffsetx();
  inline void set_has_scaleoffsety();
  inline void clear_has_scaleoffsety();
  inline void set_has_scalefactor();
  inline void clear_has_scalefactor();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designprintgroupid_;
  ::google::protobuf::int32 designprintid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 printid_;
  ::google::protobuf::int32 printgroupid_;
  ::google::protobuf::int32 framestyle_;
  ::google::protobuf::int32 framecolorr_;
  ::google::protobuf::int32 framecolorg_;
  ::google::protobuf::int32 framecolorb_;
  double framewidth_;
  double leftx_;
  double righty_;
  ::google::protobuf::int32 framecolora_;
  bool manyviewport_;
  bool isvisible_;
  bool islocked_;
  double scalex_;
  double scaley_;
  double scaleoffsetx_;
  double scaleoffsety_;
  double scalefactor_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_PrintGroupInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_PrintInfo : public ::google::protobuf::Message {
 public:
  SJ_PrintInfo();
  virtual ~SJ_PrintInfo();

  SJ_PrintInfo(const SJ_PrintInfo& from);

  inline SJ_PrintInfo& operator=(const SJ_PrintInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_PrintInfo& default_instance();

  void Swap(SJ_PrintInfo* other);

  // implements Message ----------------------------------------------

  SJ_PrintInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_PrintInfo& from);
  void MergeFrom(const SJ_PrintInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignPrintID = 1;
  inline bool has_designprintid() const;
  inline void clear_designprintid();
  static const int kDesignPrintIDFieldNumber = 1;
  inline ::google::protobuf::int32 designprintid() const;
  inline void set_designprintid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 PrintID = 5;
  inline bool has_printid() const;
  inline void clear_printid();
  static const int kPrintIDFieldNumber = 5;
  inline ::google::protobuf::int32 printid() const;
  inline void set_printid(::google::protobuf::int32 value);

  // required int32 PageBorderStyle = 6;
  inline bool has_pageborderstyle() const;
  inline void clear_pageborderstyle();
  static const int kPageBorderStyleFieldNumber = 6;
  inline ::google::protobuf::int32 pageborderstyle() const;
  inline void set_pageborderstyle(::google::protobuf::int32 value);

  // required int64 PageBorderColor = 7;
  inline bool has_pagebordercolor() const;
  inline void clear_pagebordercolor();
  static const int kPageBorderColorFieldNumber = 7;
  inline ::google::protobuf::int64 pagebordercolor() const;
  inline void set_pagebordercolor(::google::protobuf::int64 value);

  // required double PageBorderWidth = 8;
  inline bool has_pageborderwidth() const;
  inline void clear_pageborderwidth();
  static const int kPageBorderWidthFieldNumber = 8;
  inline double pageborderwidth() const;
  inline void set_pageborderwidth(double value);

  // required double ShaderPicTopX = 9;
  inline bool has_shaderpictopx() const;
  inline void clear_shaderpictopx();
  static const int kShaderPicTopXFieldNumber = 9;
  inline double shaderpictopx() const;
  inline void set_shaderpictopx(double value);

  // required double ShaderPicTopY = 10;
  inline bool has_shaderpictopy() const;
  inline void clear_shaderpictopy();
  static const int kShaderPicTopYFieldNumber = 10;
  inline double shaderpictopy() const;
  inline void set_shaderpictopy(double value);

  // required double ShaderPicHeight = 11;
  inline bool has_shaderpicheight() const;
  inline void clear_shaderpicheight();
  static const int kShaderPicHeightFieldNumber = 11;
  inline double shaderpicheight() const;
  inline void set_shaderpicheight(double value);

  // required double ShaderPicWidth = 12;
  inline bool has_shaderpicwidth() const;
  inline void clear_shaderpicwidth();
  static const int kShaderPicWidthFieldNumber = 12;
  inline double shaderpicwidth() const;
  inline void set_shaderpicwidth(double value);

  // required int32 CreatorID = 13;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 13;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 14;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 14;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 15;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 15;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 16;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 16;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string PrintName = 17;
  inline bool has_printname() const;
  inline void clear_printname();
  static const int kPrintNameFieldNumber = 17;
  inline const ::std::string& printname() const;
  inline void set_printname(const ::std::string& value);
  inline void set_printname(const char* value);
  inline void set_printname(const char* value, size_t size);
  inline ::std::string* mutable_printname();
  inline ::std::string* release_printname();
  inline void set_allocated_printname(::std::string* printname);

  // required string ShaderPicPath = 18;
  inline bool has_shaderpicpath() const;
  inline void clear_shaderpicpath();
  static const int kShaderPicPathFieldNumber = 18;
  inline const ::std::string& shaderpicpath() const;
  inline void set_shaderpicpath(const ::std::string& value);
  inline void set_shaderpicpath(const char* value);
  inline void set_shaderpicpath(const char* value, size_t size);
  inline ::std::string* mutable_shaderpicpath();
  inline ::std::string* release_shaderpicpath();
  inline void set_allocated_shaderpicpath(::std::string* shaderpicpath);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_PrintInfo)
 private:
  inline void set_has_designprintid();
  inline void clear_has_designprintid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_printid();
  inline void clear_has_printid();
  inline void set_has_pageborderstyle();
  inline void clear_has_pageborderstyle();
  inline void set_has_pagebordercolor();
  inline void clear_has_pagebordercolor();
  inline void set_has_pageborderwidth();
  inline void clear_has_pageborderwidth();
  inline void set_has_shaderpictopx();
  inline void clear_has_shaderpictopx();
  inline void set_has_shaderpictopy();
  inline void clear_has_shaderpictopy();
  inline void set_has_shaderpicheight();
  inline void clear_has_shaderpicheight();
  inline void set_has_shaderpicwidth();
  inline void clear_has_shaderpicwidth();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_printname();
  inline void clear_has_printname();
  inline void set_has_shaderpicpath();
  inline void clear_has_shaderpicpath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designprintid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 printid_;
  ::google::protobuf::int64 pagebordercolor_;
  double pageborderwidth_;
  double shaderpictopx_;
  ::google::protobuf::int32 pageborderstyle_;
  ::google::protobuf::int32 creatorid_;
  double shaderpictopy_;
  double shaderpicheight_;
  double shaderpicwidth_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* printname_;
  ::std::string* shaderpicpath_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_PrintInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_PrintTableInfo : public ::google::protobuf::Message {
 public:
  SJ_PrintTableInfo();
  virtual ~SJ_PrintTableInfo();

  SJ_PrintTableInfo(const SJ_PrintTableInfo& from);

  inline SJ_PrintTableInfo& operator=(const SJ_PrintTableInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_PrintTableInfo& default_instance();

  void Swap(SJ_PrintTableInfo* other);

  // implements Message ----------------------------------------------

  SJ_PrintTableInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_PrintTableInfo& from);
  void MergeFrom(const SJ_PrintTableInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignPrintTableID = 1;
  inline bool has_designprinttableid() const;
  inline void clear_designprinttableid();
  static const int kDesignPrintTableIDFieldNumber = 1;
  inline ::google::protobuf::int32 designprinttableid() const;
  inline void set_designprinttableid(::google::protobuf::int32 value);

  // required int32 DesignPrintID = 2;
  inline bool has_designprintid() const;
  inline void clear_designprintid();
  static const int kDesignPrintIDFieldNumber = 2;
  inline ::google::protobuf::int32 designprintid() const;
  inline void set_designprintid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 TableSign = 6;
  inline bool has_tablesign() const;
  inline void clear_tablesign();
  static const int kTableSignFieldNumber = 6;
  inline ::google::protobuf::int32 tablesign() const;
  inline void set_tablesign(::google::protobuf::int32 value);

  // required int32 WhichLine = 7;
  inline bool has_whichline() const;
  inline void clear_whichline();
  static const int kWhichLineFieldNumber = 7;
  inline ::google::protobuf::int32 whichline() const;
  inline void set_whichline(::google::protobuf::int32 value);

  // required int32 Align = 8;
  inline bool has_align() const;
  inline void clear_align();
  static const int kAlignFieldNumber = 8;
  inline ::google::protobuf::int32 align() const;
  inline void set_align(::google::protobuf::int32 value);

  // required int32 LogoSign = 9;
  inline bool has_logosign() const;
  inline void clear_logosign();
  static const int kLogoSignFieldNumber = 9;
  inline ::google::protobuf::int32 logosign() const;
  inline void set_logosign(::google::protobuf::int32 value);

  // required int32 TextPos = 10;
  inline bool has_textpos() const;
  inline void clear_textpos();
  static const int kTextPosFieldNumber = 10;
  inline ::google::protobuf::int32 textpos() const;
  inline void set_textpos(::google::protobuf::int32 value);

  // required bool SetLine = 11;
  inline bool has_setline() const;
  inline void clear_setline();
  static const int kSetLineFieldNumber = 11;
  inline bool setline() const;
  inline void set_setline(bool value);

  // required bool HasLogo = 12;
  inline bool has_haslogo() const;
  inline void clear_haslogo();
  static const int kHasLogoFieldNumber = 12;
  inline bool haslogo() const;
  inline void set_haslogo(bool value);

  // required bool IsSelected = 13;
  inline bool has_isselected() const;
  inline void clear_isselected();
  static const int kIsSelectedFieldNumber = 13;
  inline bool isselected() const;
  inline void set_isselected(bool value);

  // required bool LineUp = 14;
  inline bool has_lineup() const;
  inline void clear_lineup();
  static const int kLineUpFieldNumber = 14;
  inline bool lineup() const;
  inline void set_lineup(bool value);

  // required bool LineDown = 15;
  inline bool has_linedown() const;
  inline void clear_linedown();
  static const int kLineDownFieldNumber = 15;
  inline bool linedown() const;
  inline void set_linedown(bool value);

  // required bool LineLeft = 16;
  inline bool has_lineleft() const;
  inline void clear_lineleft();
  static const int kLineLeftFieldNumber = 16;
  inline bool lineleft() const;
  inline void set_lineleft(bool value);

  // required bool LineRight = 17;
  inline bool has_lineright() const;
  inline void clear_lineright();
  static const int kLineRightFieldNumber = 17;
  inline bool lineright() const;
  inline void set_lineright(bool value);

  // required int32 LineUpSign = 18;
  inline bool has_lineupsign() const;
  inline void clear_lineupsign();
  static const int kLineUpSignFieldNumber = 18;
  inline ::google::protobuf::int32 lineupsign() const;
  inline void set_lineupsign(::google::protobuf::int32 value);

  // required int32 LineDownSign = 19;
  inline bool has_linedownsign() const;
  inline void clear_linedownsign();
  static const int kLineDownSignFieldNumber = 19;
  inline ::google::protobuf::int32 linedownsign() const;
  inline void set_linedownsign(::google::protobuf::int32 value);

  // required int32 LineLeftSign = 20;
  inline bool has_lineleftsign() const;
  inline void clear_lineleftsign();
  static const int kLineLeftSignFieldNumber = 20;
  inline ::google::protobuf::int32 lineleftsign() const;
  inline void set_lineleftsign(::google::protobuf::int32 value);

  // required int32 LineRightSign = 21;
  inline bool has_linerightsign() const;
  inline void clear_linerightsign();
  static const int kLineRightSignFieldNumber = 21;
  inline ::google::protobuf::int32 linerightsign() const;
  inline void set_linerightsign(::google::protobuf::int32 value);

  // required double LineWidth = 22;
  inline bool has_linewidth() const;
  inline void clear_linewidth();
  static const int kLineWidthFieldNumber = 22;
  inline double linewidth() const;
  inline void set_linewidth(double value);

  // required double LeftTopX = 23;
  inline bool has_lefttopx() const;
  inline void clear_lefttopx();
  static const int kLeftTopXFieldNumber = 23;
  inline double lefttopx() const;
  inline void set_lefttopx(double value);

  // required double LeftTopY = 24;
  inline bool has_lefttopy() const;
  inline void clear_lefttopy();
  static const int kLeftTopYFieldNumber = 24;
  inline double lefttopy() const;
  inline void set_lefttopy(double value);

  // required double XLen = 25;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 25;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 26;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 26;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double LineUpWidth = 27;
  inline bool has_lineupwidth() const;
  inline void clear_lineupwidth();
  static const int kLineUpWidthFieldNumber = 27;
  inline double lineupwidth() const;
  inline void set_lineupwidth(double value);

  // required double LineDownWidth = 28;
  inline bool has_linedownwidth() const;
  inline void clear_linedownwidth();
  static const int kLineDownWidthFieldNumber = 28;
  inline double linedownwidth() const;
  inline void set_linedownwidth(double value);

  // required double LineRightWidth = 29;
  inline bool has_linerightwidth() const;
  inline void clear_linerightwidth();
  static const int kLineRightWidthFieldNumber = 29;
  inline double linerightwidth() const;
  inline void set_linerightwidth(double value);

  // required double LineLeftWidth = 30;
  inline bool has_lineleftwidth() const;
  inline void clear_lineleftwidth();
  static const int kLineLeftWidthFieldNumber = 30;
  inline double lineleftwidth() const;
  inline void set_lineleftwidth(double value);

  // required string FaceName = 31;
  inline bool has_facename() const;
  inline void clear_facename();
  static const int kFaceNameFieldNumber = 31;
  inline const ::std::string& facename() const;
  inline void set_facename(const ::std::string& value);
  inline void set_facename(const char* value);
  inline void set_facename(const char* value, size_t size);
  inline ::std::string* mutable_facename();
  inline ::std::string* release_facename();
  inline void set_allocated_facename(::std::string* facename);

  // required string LogoPath = 32;
  inline bool has_logopath() const;
  inline void clear_logopath();
  static const int kLogoPathFieldNumber = 32;
  inline const ::std::string& logopath() const;
  inline void set_logopath(const ::std::string& value);
  inline void set_logopath(const char* value);
  inline void set_logopath(const char* value, size_t size);
  inline ::std::string* mutable_logopath();
  inline ::std::string* release_logopath();
  inline void set_allocated_logopath(::std::string* logopath);

  // required string SerialPath = 33;
  inline bool has_serialpath() const;
  inline void clear_serialpath();
  static const int kSerialPathFieldNumber = 33;
  inline const ::std::string& serialpath() const;
  inline void set_serialpath(const ::std::string& value);
  inline void set_serialpath(const char* value);
  inline void set_serialpath(const char* value, size_t size);
  inline ::std::string* mutable_serialpath();
  inline ::std::string* release_serialpath();
  inline void set_allocated_serialpath(::std::string* serialpath);

  // required string TextValue = 34;
  inline bool has_textvalue() const;
  inline void clear_textvalue();
  static const int kTextValueFieldNumber = 34;
  inline const ::std::string& textvalue() const;
  inline void set_textvalue(const ::std::string& value);
  inline void set_textvalue(const char* value);
  inline void set_textvalue(const char* value, size_t size);
  inline ::std::string* mutable_textvalue();
  inline ::std::string* release_textvalue();
  inline void set_allocated_textvalue(::std::string* textvalue);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_PrintTableInfo)
 private:
  inline void set_has_designprinttableid();
  inline void clear_has_designprinttableid();
  inline void set_has_designprintid();
  inline void clear_has_designprintid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_tablesign();
  inline void clear_has_tablesign();
  inline void set_has_whichline();
  inline void clear_has_whichline();
  inline void set_has_align();
  inline void clear_has_align();
  inline void set_has_logosign();
  inline void clear_has_logosign();
  inline void set_has_textpos();
  inline void clear_has_textpos();
  inline void set_has_setline();
  inline void clear_has_setline();
  inline void set_has_haslogo();
  inline void clear_has_haslogo();
  inline void set_has_isselected();
  inline void clear_has_isselected();
  inline void set_has_lineup();
  inline void clear_has_lineup();
  inline void set_has_linedown();
  inline void clear_has_linedown();
  inline void set_has_lineleft();
  inline void clear_has_lineleft();
  inline void set_has_lineright();
  inline void clear_has_lineright();
  inline void set_has_lineupsign();
  inline void clear_has_lineupsign();
  inline void set_has_linedownsign();
  inline void clear_has_linedownsign();
  inline void set_has_lineleftsign();
  inline void clear_has_lineleftsign();
  inline void set_has_linerightsign();
  inline void clear_has_linerightsign();
  inline void set_has_linewidth();
  inline void clear_has_linewidth();
  inline void set_has_lefttopx();
  inline void clear_has_lefttopx();
  inline void set_has_lefttopy();
  inline void clear_has_lefttopy();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_lineupwidth();
  inline void clear_has_lineupwidth();
  inline void set_has_linedownwidth();
  inline void clear_has_linedownwidth();
  inline void set_has_linerightwidth();
  inline void clear_has_linerightwidth();
  inline void set_has_lineleftwidth();
  inline void clear_has_lineleftwidth();
  inline void set_has_facename();
  inline void clear_has_facename();
  inline void set_has_logopath();
  inline void clear_has_logopath();
  inline void set_has_serialpath();
  inline void clear_has_serialpath();
  inline void set_has_textvalue();
  inline void clear_has_textvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designprinttableid_;
  ::google::protobuf::int32 designprintid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 tablesign_;
  ::google::protobuf::int32 whichline_;
  ::google::protobuf::int32 align_;
  ::google::protobuf::int32 logosign_;
  ::google::protobuf::int32 textpos_;
  bool setline_;
  bool haslogo_;
  bool isselected_;
  bool lineup_;
  bool linedown_;
  bool lineleft_;
  bool lineright_;
  ::google::protobuf::int32 lineupsign_;
  ::google::protobuf::int32 linedownsign_;
  ::google::protobuf::int32 lineleftsign_;
  double linewidth_;
  double lefttopx_;
  double lefttopy_;
  double xlen_;
  double ylen_;
  double lineupwidth_;
  double linedownwidth_;
  double linerightwidth_;
  double lineleftwidth_;
  ::std::string* facename_;
  ::std::string* logopath_;
  ::std::string* serialpath_;
  ::std::string* textvalue_;
  ::google::protobuf::int32 linerightsign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(34 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_PrintTableInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_PrintTableRowColInfo : public ::google::protobuf::Message {
 public:
  SJ_PrintTableRowColInfo();
  virtual ~SJ_PrintTableRowColInfo();

  SJ_PrintTableRowColInfo(const SJ_PrintTableRowColInfo& from);

  inline SJ_PrintTableRowColInfo& operator=(const SJ_PrintTableRowColInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_PrintTableRowColInfo& default_instance();

  void Swap(SJ_PrintTableRowColInfo* other);

  // implements Message ----------------------------------------------

  SJ_PrintTableRowColInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_PrintTableRowColInfo& from);
  void MergeFrom(const SJ_PrintTableRowColInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignPrintTableRowColID = 1;
  inline bool has_designprinttablerowcolid() const;
  inline void clear_designprinttablerowcolid();
  static const int kDesignPrintTableRowColIDFieldNumber = 1;
  inline ::google::protobuf::int32 designprinttablerowcolid() const;
  inline void set_designprinttablerowcolid(::google::protobuf::int32 value);

  // required int32 DesignPrintTableRowID = 2;
  inline bool has_designprinttablerowid() const;
  inline void clear_designprinttablerowid();
  static const int kDesignPrintTableRowIDFieldNumber = 2;
  inline ::google::protobuf::int32 designprinttablerowid() const;
  inline void set_designprinttablerowid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 TableSign = 6;
  inline bool has_tablesign() const;
  inline void clear_tablesign();
  static const int kTableSignFieldNumber = 6;
  inline ::google::protobuf::int32 tablesign() const;
  inline void set_tablesign(::google::protobuf::int32 value);

  // required int32 RowNumber = 7;
  inline bool has_rownumber() const;
  inline void clear_rownumber();
  static const int kRowNumberFieldNumber = 7;
  inline ::google::protobuf::int32 rownumber() const;
  inline void set_rownumber(::google::protobuf::int32 value);

  // required int32 ColNumber = 8;
  inline bool has_colnumber() const;
  inline void clear_colnumber();
  static const int kColNumberFieldNumber = 8;
  inline ::google::protobuf::int32 colnumber() const;
  inline void set_colnumber(::google::protobuf::int32 value);

  // required int32 WhichLine = 9;
  inline bool has_whichline() const;
  inline void clear_whichline();
  static const int kWhichLineFieldNumber = 9;
  inline ::google::protobuf::int32 whichline() const;
  inline void set_whichline(::google::protobuf::int32 value);

  // required int32 Align = 10;
  inline bool has_align() const;
  inline void clear_align();
  static const int kAlignFieldNumber = 10;
  inline ::google::protobuf::int32 align() const;
  inline void set_align(::google::protobuf::int32 value);

  // required int32 LogoSign = 11;
  inline bool has_logosign() const;
  inline void clear_logosign();
  static const int kLogoSignFieldNumber = 11;
  inline ::google::protobuf::int32 logosign() const;
  inline void set_logosign(::google::protobuf::int32 value);

  // required int32 TextPos = 12;
  inline bool has_textpos() const;
  inline void clear_textpos();
  static const int kTextPosFieldNumber = 12;
  inline ::google::protobuf::int32 textpos() const;
  inline void set_textpos(::google::protobuf::int32 value);

  // required bool SetLine = 13;
  inline bool has_setline() const;
  inline void clear_setline();
  static const int kSetLineFieldNumber = 13;
  inline bool setline() const;
  inline void set_setline(bool value);

  // required bool HasLogo = 14;
  inline bool has_haslogo() const;
  inline void clear_haslogo();
  static const int kHasLogoFieldNumber = 14;
  inline bool haslogo() const;
  inline void set_haslogo(bool value);

  // required bool IsSelected = 15;
  inline bool has_isselected() const;
  inline void clear_isselected();
  static const int kIsSelectedFieldNumber = 15;
  inline bool isselected() const;
  inline void set_isselected(bool value);

  // required bool LineUp = 16;
  inline bool has_lineup() const;
  inline void clear_lineup();
  static const int kLineUpFieldNumber = 16;
  inline bool lineup() const;
  inline void set_lineup(bool value);

  // required bool LineDown = 17;
  inline bool has_linedown() const;
  inline void clear_linedown();
  static const int kLineDownFieldNumber = 17;
  inline bool linedown() const;
  inline void set_linedown(bool value);

  // required bool LineLeft = 18;
  inline bool has_lineleft() const;
  inline void clear_lineleft();
  static const int kLineLeftFieldNumber = 18;
  inline bool lineleft() const;
  inline void set_lineleft(bool value);

  // required bool LineRight = 19;
  inline bool has_lineright() const;
  inline void clear_lineright();
  static const int kLineRightFieldNumber = 19;
  inline bool lineright() const;
  inline void set_lineright(bool value);

  // required int32 LineUpSign = 20;
  inline bool has_lineupsign() const;
  inline void clear_lineupsign();
  static const int kLineUpSignFieldNumber = 20;
  inline ::google::protobuf::int32 lineupsign() const;
  inline void set_lineupsign(::google::protobuf::int32 value);

  // required int32 LineDownSign = 21;
  inline bool has_linedownsign() const;
  inline void clear_linedownsign();
  static const int kLineDownSignFieldNumber = 21;
  inline ::google::protobuf::int32 linedownsign() const;
  inline void set_linedownsign(::google::protobuf::int32 value);

  // required int32 LineLeftSign = 22;
  inline bool has_lineleftsign() const;
  inline void clear_lineleftsign();
  static const int kLineLeftSignFieldNumber = 22;
  inline ::google::protobuf::int32 lineleftsign() const;
  inline void set_lineleftsign(::google::protobuf::int32 value);

  // required int32 LineRightSign = 23;
  inline bool has_linerightsign() const;
  inline void clear_linerightsign();
  static const int kLineRightSignFieldNumber = 23;
  inline ::google::protobuf::int32 linerightsign() const;
  inline void set_linerightsign(::google::protobuf::int32 value);

  // required double LineWidth = 24;
  inline bool has_linewidth() const;
  inline void clear_linewidth();
  static const int kLineWidthFieldNumber = 24;
  inline double linewidth() const;
  inline void set_linewidth(double value);

  // required double LeftTopX = 25;
  inline bool has_lefttopx() const;
  inline void clear_lefttopx();
  static const int kLeftTopXFieldNumber = 25;
  inline double lefttopx() const;
  inline void set_lefttopx(double value);

  // required double LeftTopY = 26;
  inline bool has_lefttopy() const;
  inline void clear_lefttopy();
  static const int kLeftTopYFieldNumber = 26;
  inline double lefttopy() const;
  inline void set_lefttopy(double value);

  // required double XLen = 27;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 27;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 28;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 28;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double LineUpWidth = 29;
  inline bool has_lineupwidth() const;
  inline void clear_lineupwidth();
  static const int kLineUpWidthFieldNumber = 29;
  inline double lineupwidth() const;
  inline void set_lineupwidth(double value);

  // required double LineDownWidth = 30;
  inline bool has_linedownwidth() const;
  inline void clear_linedownwidth();
  static const int kLineDownWidthFieldNumber = 30;
  inline double linedownwidth() const;
  inline void set_linedownwidth(double value);

  // required double LineRightWidth = 31;
  inline bool has_linerightwidth() const;
  inline void clear_linerightwidth();
  static const int kLineRightWidthFieldNumber = 31;
  inline double linerightwidth() const;
  inline void set_linerightwidth(double value);

  // required double LineLeftWidth = 32;
  inline bool has_lineleftwidth() const;
  inline void clear_lineleftwidth();
  static const int kLineLeftWidthFieldNumber = 32;
  inline double lineleftwidth() const;
  inline void set_lineleftwidth(double value);

  // required string FaceName = 33;
  inline bool has_facename() const;
  inline void clear_facename();
  static const int kFaceNameFieldNumber = 33;
  inline const ::std::string& facename() const;
  inline void set_facename(const ::std::string& value);
  inline void set_facename(const char* value);
  inline void set_facename(const char* value, size_t size);
  inline ::std::string* mutable_facename();
  inline ::std::string* release_facename();
  inline void set_allocated_facename(::std::string* facename);

  // required string LogoPath = 34;
  inline bool has_logopath() const;
  inline void clear_logopath();
  static const int kLogoPathFieldNumber = 34;
  inline const ::std::string& logopath() const;
  inline void set_logopath(const ::std::string& value);
  inline void set_logopath(const char* value);
  inline void set_logopath(const char* value, size_t size);
  inline ::std::string* mutable_logopath();
  inline ::std::string* release_logopath();
  inline void set_allocated_logopath(::std::string* logopath);

  // required string SerialPath = 35;
  inline bool has_serialpath() const;
  inline void clear_serialpath();
  static const int kSerialPathFieldNumber = 35;
  inline const ::std::string& serialpath() const;
  inline void set_serialpath(const ::std::string& value);
  inline void set_serialpath(const char* value);
  inline void set_serialpath(const char* value, size_t size);
  inline ::std::string* mutable_serialpath();
  inline ::std::string* release_serialpath();
  inline void set_allocated_serialpath(::std::string* serialpath);

  // required string TextValue = 36;
  inline bool has_textvalue() const;
  inline void clear_textvalue();
  static const int kTextValueFieldNumber = 36;
  inline const ::std::string& textvalue() const;
  inline void set_textvalue(const ::std::string& value);
  inline void set_textvalue(const char* value);
  inline void set_textvalue(const char* value, size_t size);
  inline ::std::string* mutable_textvalue();
  inline ::std::string* release_textvalue();
  inline void set_allocated_textvalue(::std::string* textvalue);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_PrintTableRowColInfo)
 private:
  inline void set_has_designprinttablerowcolid();
  inline void clear_has_designprinttablerowcolid();
  inline void set_has_designprinttablerowid();
  inline void clear_has_designprinttablerowid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_tablesign();
  inline void clear_has_tablesign();
  inline void set_has_rownumber();
  inline void clear_has_rownumber();
  inline void set_has_colnumber();
  inline void clear_has_colnumber();
  inline void set_has_whichline();
  inline void clear_has_whichline();
  inline void set_has_align();
  inline void clear_has_align();
  inline void set_has_logosign();
  inline void clear_has_logosign();
  inline void set_has_textpos();
  inline void clear_has_textpos();
  inline void set_has_setline();
  inline void clear_has_setline();
  inline void set_has_haslogo();
  inline void clear_has_haslogo();
  inline void set_has_isselected();
  inline void clear_has_isselected();
  inline void set_has_lineup();
  inline void clear_has_lineup();
  inline void set_has_linedown();
  inline void clear_has_linedown();
  inline void set_has_lineleft();
  inline void clear_has_lineleft();
  inline void set_has_lineright();
  inline void clear_has_lineright();
  inline void set_has_lineupsign();
  inline void clear_has_lineupsign();
  inline void set_has_linedownsign();
  inline void clear_has_linedownsign();
  inline void set_has_lineleftsign();
  inline void clear_has_lineleftsign();
  inline void set_has_linerightsign();
  inline void clear_has_linerightsign();
  inline void set_has_linewidth();
  inline void clear_has_linewidth();
  inline void set_has_lefttopx();
  inline void clear_has_lefttopx();
  inline void set_has_lefttopy();
  inline void clear_has_lefttopy();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_lineupwidth();
  inline void clear_has_lineupwidth();
  inline void set_has_linedownwidth();
  inline void clear_has_linedownwidth();
  inline void set_has_linerightwidth();
  inline void clear_has_linerightwidth();
  inline void set_has_lineleftwidth();
  inline void clear_has_lineleftwidth();
  inline void set_has_facename();
  inline void clear_has_facename();
  inline void set_has_logopath();
  inline void clear_has_logopath();
  inline void set_has_serialpath();
  inline void clear_has_serialpath();
  inline void set_has_textvalue();
  inline void clear_has_textvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designprinttablerowcolid_;
  ::google::protobuf::int32 designprinttablerowid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 tablesign_;
  ::google::protobuf::int32 rownumber_;
  ::google::protobuf::int32 colnumber_;
  ::google::protobuf::int32 whichline_;
  ::google::protobuf::int32 align_;
  ::google::protobuf::int32 logosign_;
  ::google::protobuf::int32 textpos_;
  bool setline_;
  bool haslogo_;
  bool isselected_;
  bool lineup_;
  bool linedown_;
  bool lineleft_;
  bool lineright_;
  ::google::protobuf::int32 lineupsign_;
  ::google::protobuf::int32 linedownsign_;
  ::google::protobuf::int32 lineleftsign_;
  double linewidth_;
  double lefttopx_;
  double lefttopy_;
  double xlen_;
  double ylen_;
  double lineupwidth_;
  double linedownwidth_;
  double linerightwidth_;
  double lineleftwidth_;
  ::std::string* facename_;
  ::std::string* logopath_;
  ::std::string* serialpath_;
  ::std::string* textvalue_;
  ::google::protobuf::int32 linerightsign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(36 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_PrintTableRowColInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_PrintTableRowInfo : public ::google::protobuf::Message {
 public:
  SJ_PrintTableRowInfo();
  virtual ~SJ_PrintTableRowInfo();

  SJ_PrintTableRowInfo(const SJ_PrintTableRowInfo& from);

  inline SJ_PrintTableRowInfo& operator=(const SJ_PrintTableRowInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_PrintTableRowInfo& default_instance();

  void Swap(SJ_PrintTableRowInfo* other);

  // implements Message ----------------------------------------------

  SJ_PrintTableRowInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_PrintTableRowInfo& from);
  void MergeFrom(const SJ_PrintTableRowInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignPrintTableRowID = 1;
  inline bool has_designprinttablerowid() const;
  inline void clear_designprinttablerowid();
  static const int kDesignPrintTableRowIDFieldNumber = 1;
  inline ::google::protobuf::int32 designprinttablerowid() const;
  inline void set_designprinttablerowid(::google::protobuf::int32 value);

  // required int32 DesignPrintTableID = 2;
  inline bool has_designprinttableid() const;
  inline void clear_designprinttableid();
  static const int kDesignPrintTableIDFieldNumber = 2;
  inline ::google::protobuf::int32 designprinttableid() const;
  inline void set_designprinttableid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 TableSign = 6;
  inline bool has_tablesign() const;
  inline void clear_tablesign();
  static const int kTableSignFieldNumber = 6;
  inline ::google::protobuf::int32 tablesign() const;
  inline void set_tablesign(::google::protobuf::int32 value);

  // required int32 RowNumber = 7;
  inline bool has_rownumber() const;
  inline void clear_rownumber();
  static const int kRowNumberFieldNumber = 7;
  inline ::google::protobuf::int32 rownumber() const;
  inline void set_rownumber(::google::protobuf::int32 value);

  // required int32 WhichLine = 8;
  inline bool has_whichline() const;
  inline void clear_whichline();
  static const int kWhichLineFieldNumber = 8;
  inline ::google::protobuf::int32 whichline() const;
  inline void set_whichline(::google::protobuf::int32 value);

  // required int32 Align = 9;
  inline bool has_align() const;
  inline void clear_align();
  static const int kAlignFieldNumber = 9;
  inline ::google::protobuf::int32 align() const;
  inline void set_align(::google::protobuf::int32 value);

  // required int32 LogoSign = 10;
  inline bool has_logosign() const;
  inline void clear_logosign();
  static const int kLogoSignFieldNumber = 10;
  inline ::google::protobuf::int32 logosign() const;
  inline void set_logosign(::google::protobuf::int32 value);

  // required int32 TextPos = 11;
  inline bool has_textpos() const;
  inline void clear_textpos();
  static const int kTextPosFieldNumber = 11;
  inline ::google::protobuf::int32 textpos() const;
  inline void set_textpos(::google::protobuf::int32 value);

  // required bool SetLine = 12;
  inline bool has_setline() const;
  inline void clear_setline();
  static const int kSetLineFieldNumber = 12;
  inline bool setline() const;
  inline void set_setline(bool value);

  // required bool HasLogo = 13;
  inline bool has_haslogo() const;
  inline void clear_haslogo();
  static const int kHasLogoFieldNumber = 13;
  inline bool haslogo() const;
  inline void set_haslogo(bool value);

  // required bool IsSelected = 14;
  inline bool has_isselected() const;
  inline void clear_isselected();
  static const int kIsSelectedFieldNumber = 14;
  inline bool isselected() const;
  inline void set_isselected(bool value);

  // required bool LineUp = 15;
  inline bool has_lineup() const;
  inline void clear_lineup();
  static const int kLineUpFieldNumber = 15;
  inline bool lineup() const;
  inline void set_lineup(bool value);

  // required bool LineDown = 16;
  inline bool has_linedown() const;
  inline void clear_linedown();
  static const int kLineDownFieldNumber = 16;
  inline bool linedown() const;
  inline void set_linedown(bool value);

  // required bool LineLeft = 17;
  inline bool has_lineleft() const;
  inline void clear_lineleft();
  static const int kLineLeftFieldNumber = 17;
  inline bool lineleft() const;
  inline void set_lineleft(bool value);

  // required bool LineRight = 18;
  inline bool has_lineright() const;
  inline void clear_lineright();
  static const int kLineRightFieldNumber = 18;
  inline bool lineright() const;
  inline void set_lineright(bool value);

  // required int32 LineUpSign = 19;
  inline bool has_lineupsign() const;
  inline void clear_lineupsign();
  static const int kLineUpSignFieldNumber = 19;
  inline ::google::protobuf::int32 lineupsign() const;
  inline void set_lineupsign(::google::protobuf::int32 value);

  // required int32 LineDownSign = 20;
  inline bool has_linedownsign() const;
  inline void clear_linedownsign();
  static const int kLineDownSignFieldNumber = 20;
  inline ::google::protobuf::int32 linedownsign() const;
  inline void set_linedownsign(::google::protobuf::int32 value);

  // required int32 LineLeftSign = 21;
  inline bool has_lineleftsign() const;
  inline void clear_lineleftsign();
  static const int kLineLeftSignFieldNumber = 21;
  inline ::google::protobuf::int32 lineleftsign() const;
  inline void set_lineleftsign(::google::protobuf::int32 value);

  // required int32 LineRightSign = 22;
  inline bool has_linerightsign() const;
  inline void clear_linerightsign();
  static const int kLineRightSignFieldNumber = 22;
  inline ::google::protobuf::int32 linerightsign() const;
  inline void set_linerightsign(::google::protobuf::int32 value);

  // required double LineWidth = 23;
  inline bool has_linewidth() const;
  inline void clear_linewidth();
  static const int kLineWidthFieldNumber = 23;
  inline double linewidth() const;
  inline void set_linewidth(double value);

  // required double LeftTopX = 24;
  inline bool has_lefttopx() const;
  inline void clear_lefttopx();
  static const int kLeftTopXFieldNumber = 24;
  inline double lefttopx() const;
  inline void set_lefttopx(double value);

  // required double LeftTopY = 25;
  inline bool has_lefttopy() const;
  inline void clear_lefttopy();
  static const int kLeftTopYFieldNumber = 25;
  inline double lefttopy() const;
  inline void set_lefttopy(double value);

  // required double XLen = 26;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 26;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 27;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 27;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double LineUpWidth = 28;
  inline bool has_lineupwidth() const;
  inline void clear_lineupwidth();
  static const int kLineUpWidthFieldNumber = 28;
  inline double lineupwidth() const;
  inline void set_lineupwidth(double value);

  // required double LineDownWidth = 29;
  inline bool has_linedownwidth() const;
  inline void clear_linedownwidth();
  static const int kLineDownWidthFieldNumber = 29;
  inline double linedownwidth() const;
  inline void set_linedownwidth(double value);

  // required double LineRightWidth = 30;
  inline bool has_linerightwidth() const;
  inline void clear_linerightwidth();
  static const int kLineRightWidthFieldNumber = 30;
  inline double linerightwidth() const;
  inline void set_linerightwidth(double value);

  // required double LineLeftWidth = 31;
  inline bool has_lineleftwidth() const;
  inline void clear_lineleftwidth();
  static const int kLineLeftWidthFieldNumber = 31;
  inline double lineleftwidth() const;
  inline void set_lineleftwidth(double value);

  // required string FaceName = 32;
  inline bool has_facename() const;
  inline void clear_facename();
  static const int kFaceNameFieldNumber = 32;
  inline const ::std::string& facename() const;
  inline void set_facename(const ::std::string& value);
  inline void set_facename(const char* value);
  inline void set_facename(const char* value, size_t size);
  inline ::std::string* mutable_facename();
  inline ::std::string* release_facename();
  inline void set_allocated_facename(::std::string* facename);

  // required string LogoPath = 33;
  inline bool has_logopath() const;
  inline void clear_logopath();
  static const int kLogoPathFieldNumber = 33;
  inline const ::std::string& logopath() const;
  inline void set_logopath(const ::std::string& value);
  inline void set_logopath(const char* value);
  inline void set_logopath(const char* value, size_t size);
  inline ::std::string* mutable_logopath();
  inline ::std::string* release_logopath();
  inline void set_allocated_logopath(::std::string* logopath);

  // required string SerialPath = 34;
  inline bool has_serialpath() const;
  inline void clear_serialpath();
  static const int kSerialPathFieldNumber = 34;
  inline const ::std::string& serialpath() const;
  inline void set_serialpath(const ::std::string& value);
  inline void set_serialpath(const char* value);
  inline void set_serialpath(const char* value, size_t size);
  inline ::std::string* mutable_serialpath();
  inline ::std::string* release_serialpath();
  inline void set_allocated_serialpath(::std::string* serialpath);

  // required string TextValue = 35;
  inline bool has_textvalue() const;
  inline void clear_textvalue();
  static const int kTextValueFieldNumber = 35;
  inline const ::std::string& textvalue() const;
  inline void set_textvalue(const ::std::string& value);
  inline void set_textvalue(const char* value);
  inline void set_textvalue(const char* value, size_t size);
  inline ::std::string* mutable_textvalue();
  inline ::std::string* release_textvalue();
  inline void set_allocated_textvalue(::std::string* textvalue);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_PrintTableRowInfo)
 private:
  inline void set_has_designprinttablerowid();
  inline void clear_has_designprinttablerowid();
  inline void set_has_designprinttableid();
  inline void clear_has_designprinttableid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_tablesign();
  inline void clear_has_tablesign();
  inline void set_has_rownumber();
  inline void clear_has_rownumber();
  inline void set_has_whichline();
  inline void clear_has_whichline();
  inline void set_has_align();
  inline void clear_has_align();
  inline void set_has_logosign();
  inline void clear_has_logosign();
  inline void set_has_textpos();
  inline void clear_has_textpos();
  inline void set_has_setline();
  inline void clear_has_setline();
  inline void set_has_haslogo();
  inline void clear_has_haslogo();
  inline void set_has_isselected();
  inline void clear_has_isselected();
  inline void set_has_lineup();
  inline void clear_has_lineup();
  inline void set_has_linedown();
  inline void clear_has_linedown();
  inline void set_has_lineleft();
  inline void clear_has_lineleft();
  inline void set_has_lineright();
  inline void clear_has_lineright();
  inline void set_has_lineupsign();
  inline void clear_has_lineupsign();
  inline void set_has_linedownsign();
  inline void clear_has_linedownsign();
  inline void set_has_lineleftsign();
  inline void clear_has_lineleftsign();
  inline void set_has_linerightsign();
  inline void clear_has_linerightsign();
  inline void set_has_linewidth();
  inline void clear_has_linewidth();
  inline void set_has_lefttopx();
  inline void clear_has_lefttopx();
  inline void set_has_lefttopy();
  inline void clear_has_lefttopy();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_lineupwidth();
  inline void clear_has_lineupwidth();
  inline void set_has_linedownwidth();
  inline void clear_has_linedownwidth();
  inline void set_has_linerightwidth();
  inline void clear_has_linerightwidth();
  inline void set_has_lineleftwidth();
  inline void clear_has_lineleftwidth();
  inline void set_has_facename();
  inline void clear_has_facename();
  inline void set_has_logopath();
  inline void clear_has_logopath();
  inline void set_has_serialpath();
  inline void clear_has_serialpath();
  inline void set_has_textvalue();
  inline void clear_has_textvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designprinttablerowid_;
  ::google::protobuf::int32 designprinttableid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 tablesign_;
  ::google::protobuf::int32 rownumber_;
  ::google::protobuf::int32 whichline_;
  ::google::protobuf::int32 align_;
  ::google::protobuf::int32 logosign_;
  ::google::protobuf::int32 textpos_;
  bool setline_;
  bool haslogo_;
  bool isselected_;
  bool lineup_;
  bool linedown_;
  bool lineleft_;
  bool lineright_;
  ::google::protobuf::int32 lineupsign_;
  ::google::protobuf::int32 linedownsign_;
  ::google::protobuf::int32 lineleftsign_;
  ::google::protobuf::int32 linerightsign_;
  double linewidth_;
  double lefttopx_;
  double lefttopy_;
  double xlen_;
  double ylen_;
  double lineupwidth_;
  double linedownwidth_;
  double linerightwidth_;
  double lineleftwidth_;
  ::std::string* facename_;
  ::std::string* logopath_;
  ::std::string* serialpath_;
  ::std::string* textvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(35 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_PrintTableRowInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_ProductInfo : public ::google::protobuf::Message {
 public:
  SJ_ProductInfo();
  virtual ~SJ_ProductInfo();

  SJ_ProductInfo(const SJ_ProductInfo& from);

  inline SJ_ProductInfo& operator=(const SJ_ProductInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_ProductInfo& default_instance();

  void Swap(SJ_ProductInfo* other);

  // implements Message ----------------------------------------------

  SJ_ProductInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_ProductInfo& from);
  void MergeFrom(const SJ_ProductInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignProductID = 1;
  inline bool has_designproductid() const;
  inline void clear_designproductid();
  static const int kDesignProductIDFieldNumber = 1;
  inline ::google::protobuf::int32 designproductid() const;
  inline void set_designproductid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 ProductID = 5;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductIDFieldNumber = 5;
  inline ::google::protobuf::int32 productid() const;
  inline void set_productid(::google::protobuf::int32 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 7;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 7;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required bool HasMark = 8;
  inline bool has_hasmark() const;
  inline void clear_hasmark();
  static const int kHasMarkFieldNumber = 8;
  inline bool hasmark() const;
  inline void set_hasmark(bool value);

  // required bool IsVisible = 9;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 9;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 10;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 10;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required int32 SupplyType = 11;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 11;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 12;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 12;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 DockObjID = 13;
  inline bool has_dockobjid() const;
  inline void clear_dockobjid();
  static const int kDockObjIDFieldNumber = 13;
  inline ::google::protobuf::int32 dockobjid() const;
  inline void set_dockobjid(::google::protobuf::int32 value);

  // required int32 DockObjType = 14;
  inline bool has_dockobjtype() const;
  inline void clear_dockobjtype();
  static const int kDockObjTypeFieldNumber = 14;
  inline ::google::protobuf::int32 dockobjtype() const;
  inline void set_dockobjtype(::google::protobuf::int32 value);

  // required double DockXPos = 15;
  inline bool has_dockxpos() const;
  inline void clear_dockxpos();
  static const int kDockXPosFieldNumber = 15;
  inline double dockxpos() const;
  inline void set_dockxpos(double value);

  // required double DockYPos = 16;
  inline bool has_dockypos() const;
  inline void clear_dockypos();
  static const int kDockYPosFieldNumber = 16;
  inline double dockypos() const;
  inline void set_dockypos(double value);

  // required double XLen = 17;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 17;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 18;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 18;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 19;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 19;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double YPos = 20;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYPosFieldNumber = 20;
  inline double ypos() const;
  inline void set_ypos(double value);

  // required int32 CreatorID = 21;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 21;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 22;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 22;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 23;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 23;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 24;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 24;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_ProductInfo)
 private:
  inline void set_has_designproductid();
  inline void clear_has_designproductid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_hasmark();
  inline void clear_has_hasmark();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_dockobjid();
  inline void clear_has_dockobjid();
  inline void set_has_dockobjtype();
  inline void clear_has_dockobjtype();
  inline void set_has_dockxpos();
  inline void clear_has_dockxpos();
  inline void set_has_dockypos();
  inline void clear_has_dockypos();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designproductid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 productid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  bool hasmark_;
  bool isvisible_;
  bool islocked_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 dockobjid_;
  ::google::protobuf::int32 dockobjtype_;
  double dockxpos_;
  double dockypos_;
  double xlen_;
  double ylen_;
  double zlen_;
  double ypos_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_ProductInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_RemarkInfo : public ::google::protobuf::Message {
 public:
  SJ_RemarkInfo();
  virtual ~SJ_RemarkInfo();

  SJ_RemarkInfo(const SJ_RemarkInfo& from);

  inline SJ_RemarkInfo& operator=(const SJ_RemarkInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_RemarkInfo& default_instance();

  void Swap(SJ_RemarkInfo* other);

  // implements Message ----------------------------------------------

  SJ_RemarkInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_RemarkInfo& from);
  void MergeFrom(const SJ_RemarkInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignRemarkID = 1;
  inline bool has_designremarkid() const;
  inline void clear_designremarkid();
  static const int kDesignRemarkIDFieldNumber = 1;
  inline ::google::protobuf::int32 designremarkid() const;
  inline void set_designremarkid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPrintID = 5;
  inline bool has_designprintid() const;
  inline void clear_designprintid();
  static const int kDesignPrintIDFieldNumber = 5;
  inline ::google::protobuf::int32 designprintid() const;
  inline void set_designprintid(::google::protobuf::int32 value);

  // required int32 PrintID = 6;
  inline bool has_printid() const;
  inline void clear_printid();
  static const int kPrintIDFieldNumber = 6;
  inline ::google::protobuf::int32 printid() const;
  inline void set_printid(::google::protobuf::int32 value);

  // required int32 ViewType = 7;
  inline bool has_viewtype() const;
  inline void clear_viewtype();
  static const int kViewTypeFieldNumber = 7;
  inline ::google::protobuf::int32 viewtype() const;
  inline void set_viewtype(::google::protobuf::int32 value);

  // required int64 BGColor = 8;
  inline bool has_bgcolor() const;
  inline void clear_bgcolor();
  static const int kBGColorFieldNumber = 8;
  inline ::google::protobuf::int64 bgcolor() const;
  inline void set_bgcolor(::google::protobuf::int64 value);

  // required int64 ForeColor = 9;
  inline bool has_forecolor() const;
  inline void clear_forecolor();
  static const int kForeColorFieldNumber = 9;
  inline ::google::protobuf::int64 forecolor() const;
  inline void set_forecolor(::google::protobuf::int64 value);

  // required int32 FontSize = 10;
  inline bool has_fontsize() const;
  inline void clear_fontsize();
  static const int kFontSizeFieldNumber = 10;
  inline ::google::protobuf::int32 fontsize() const;
  inline void set_fontsize(::google::protobuf::int32 value);

  // required int32 FontStyle = 11;
  inline bool has_fontstyle() const;
  inline void clear_fontstyle();
  static const int kFontStyleFieldNumber = 11;
  inline ::google::protobuf::int32 fontstyle() const;
  inline void set_fontstyle(::google::protobuf::int32 value);

  // required int32 LineSpace = 12;
  inline bool has_linespace() const;
  inline void clear_linespace();
  static const int kLineSpaceFieldNumber = 12;
  inline ::google::protobuf::int32 linespace() const;
  inline void set_linespace(::google::protobuf::int32 value);

  // required int32 ArrowID = 13;
  inline bool has_arrowid() const;
  inline void clear_arrowid();
  static const int kArrowIDFieldNumber = 13;
  inline ::google::protobuf::int32 arrowid() const;
  inline void set_arrowid(::google::protobuf::int32 value);

  // required int32 ArrowStyle = 14;
  inline bool has_arrowstyle() const;
  inline void clear_arrowstyle();
  static const int kArrowStyleFieldNumber = 14;
  inline ::google::protobuf::int32 arrowstyle() const;
  inline void set_arrowstyle(::google::protobuf::int32 value);

  // required int32 FrameStyle = 15;
  inline bool has_framestyle() const;
  inline void clear_framestyle();
  static const int kFrameStyleFieldNumber = 15;
  inline ::google::protobuf::int32 framestyle() const;
  inline void set_framestyle(::google::protobuf::int32 value);

  // required int64 FrameColor = 16;
  inline bool has_framecolor() const;
  inline void clear_framecolor();
  static const int kFrameColorFieldNumber = 16;
  inline ::google::protobuf::int64 framecolor() const;
  inline void set_framecolor(::google::protobuf::int64 value);

  // required int32 DirectLine = 17;
  inline bool has_directline() const;
  inline void clear_directline();
  static const int kDirectLineFieldNumber = 17;
  inline ::google::protobuf::int32 directline() const;
  inline void set_directline(::google::protobuf::int32 value);

  // required int32 DirectStyle = 18;
  inline bool has_directstyle() const;
  inline void clear_directstyle();
  static const int kDirectStyleFieldNumber = 18;
  inline ::google::protobuf::int32 directstyle() const;
  inline void set_directstyle(::google::protobuf::int32 value);

  // required int32 DirectLineStyle = 19;
  inline bool has_directlinestyle() const;
  inline void clear_directlinestyle();
  static const int kDirectLineStyleFieldNumber = 19;
  inline ::google::protobuf::int32 directlinestyle() const;
  inline void set_directlinestyle(::google::protobuf::int32 value);

  // required int32 CommentFrameStyle = 20;
  inline bool has_commentframestyle() const;
  inline void clear_commentframestyle();
  static const int kCommentFrameStyleFieldNumber = 20;
  inline ::google::protobuf::int32 commentframestyle() const;
  inline void set_commentframestyle(::google::protobuf::int32 value);

  // required bool IsSingleMode = 21;
  inline bool has_issinglemode() const;
  inline void clear_issinglemode();
  static const int kIsSingleModeFieldNumber = 21;
  inline bool issinglemode() const;
  inline void set_issinglemode(bool value);

  // required bool IsVisible = 22;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 22;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 23;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 23;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required bool StrickOut = 24;
  inline bool has_strickout() const;
  inline void clear_strickout();
  static const int kStrickOutFieldNumber = 24;
  inline bool strickout() const;
  inline void set_strickout(bool value);

  // required bool UnderLine = 25;
  inline bool has_underline() const;
  inline void clear_underline();
  static const int kUnderLineFieldNumber = 25;
  inline bool underline() const;
  inline void set_underline(bool value);

  // required bool Italic = 26;
  inline bool has_italic() const;
  inline void clear_italic();
  static const int kItalicFieldNumber = 26;
  inline bool italic() const;
  inline void set_italic(bool value);

  // required bool Bold = 27;
  inline bool has_bold() const;
  inline void clear_bold();
  static const int kBoldFieldNumber = 27;
  inline bool bold() const;
  inline void set_bold(bool value);

  // required double FrameWidth = 28;
  inline bool has_framewidth() const;
  inline void clear_framewidth();
  static const int kFrameWidthFieldNumber = 28;
  inline double framewidth() const;
  inline void set_framewidth(double value);

  // required double ArrowX = 29;
  inline bool has_arrowx() const;
  inline void clear_arrowx();
  static const int kArrowXFieldNumber = 29;
  inline double arrowx() const;
  inline void set_arrowx(double value);

  // required double ArrowY = 30;
  inline bool has_arrowy() const;
  inline void clear_arrowy();
  static const int kArrowYFieldNumber = 30;
  inline double arrowy() const;
  inline void set_arrowy(double value);

  // required double StartX = 31;
  inline bool has_startx() const;
  inline void clear_startx();
  static const int kStartXFieldNumber = 31;
  inline double startx() const;
  inline void set_startx(double value);

  // required double StartY = 32;
  inline bool has_starty() const;
  inline void clear_starty();
  static const int kStartYFieldNumber = 32;
  inline double starty() const;
  inline void set_starty(double value);

  // required int32 CreatorID = 33;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 33;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 34;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 34;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 35;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 35;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 36;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 36;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string FaceName = 37;
  inline bool has_facename() const;
  inline void clear_facename();
  static const int kFaceNameFieldNumber = 37;
  inline const ::std::string& facename() const;
  inline void set_facename(const ::std::string& value);
  inline void set_facename(const char* value);
  inline void set_facename(const char* value, size_t size);
  inline ::std::string* mutable_facename();
  inline ::std::string* release_facename();
  inline void set_allocated_facename(::std::string* facename);

  // required string RemarkText = 38;
  inline bool has_remarktext() const;
  inline void clear_remarktext();
  static const int kRemarkTextFieldNumber = 38;
  inline const ::std::string& remarktext() const;
  inline void set_remarktext(const ::std::string& value);
  inline void set_remarktext(const char* value);
  inline void set_remarktext(const char* value, size_t size);
  inline ::std::string* mutable_remarktext();
  inline ::std::string* release_remarktext();
  inline void set_allocated_remarktext(::std::string* remarktext);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_RemarkInfo)
 private:
  inline void set_has_designremarkid();
  inline void clear_has_designremarkid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designprintid();
  inline void clear_has_designprintid();
  inline void set_has_printid();
  inline void clear_has_printid();
  inline void set_has_viewtype();
  inline void clear_has_viewtype();
  inline void set_has_bgcolor();
  inline void clear_has_bgcolor();
  inline void set_has_forecolor();
  inline void clear_has_forecolor();
  inline void set_has_fontsize();
  inline void clear_has_fontsize();
  inline void set_has_fontstyle();
  inline void clear_has_fontstyle();
  inline void set_has_linespace();
  inline void clear_has_linespace();
  inline void set_has_arrowid();
  inline void clear_has_arrowid();
  inline void set_has_arrowstyle();
  inline void clear_has_arrowstyle();
  inline void set_has_framestyle();
  inline void clear_has_framestyle();
  inline void set_has_framecolor();
  inline void clear_has_framecolor();
  inline void set_has_directline();
  inline void clear_has_directline();
  inline void set_has_directstyle();
  inline void clear_has_directstyle();
  inline void set_has_directlinestyle();
  inline void clear_has_directlinestyle();
  inline void set_has_commentframestyle();
  inline void clear_has_commentframestyle();
  inline void set_has_issinglemode();
  inline void clear_has_issinglemode();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_strickout();
  inline void clear_has_strickout();
  inline void set_has_underline();
  inline void clear_has_underline();
  inline void set_has_italic();
  inline void clear_has_italic();
  inline void set_has_bold();
  inline void clear_has_bold();
  inline void set_has_framewidth();
  inline void clear_has_framewidth();
  inline void set_has_arrowx();
  inline void clear_has_arrowx();
  inline void set_has_arrowy();
  inline void clear_has_arrowy();
  inline void set_has_startx();
  inline void clear_has_startx();
  inline void set_has_starty();
  inline void clear_has_starty();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_facename();
  inline void clear_has_facename();
  inline void set_has_remarktext();
  inline void clear_has_remarktext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designremarkid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 designprintid_;
  ::google::protobuf::int32 printid_;
  ::google::protobuf::int32 viewtype_;
  ::google::protobuf::int64 bgcolor_;
  ::google::protobuf::int64 forecolor_;
  ::google::protobuf::int32 fontsize_;
  ::google::protobuf::int32 fontstyle_;
  ::google::protobuf::int32 linespace_;
  ::google::protobuf::int32 arrowid_;
  ::google::protobuf::int32 arrowstyle_;
  ::google::protobuf::int32 framestyle_;
  ::google::protobuf::int64 framecolor_;
  ::google::protobuf::int32 directline_;
  ::google::protobuf::int32 directstyle_;
  ::google::protobuf::int32 directlinestyle_;
  ::google::protobuf::int32 commentframestyle_;
  bool issinglemode_;
  bool isvisible_;
  bool islocked_;
  bool strickout_;
  bool underline_;
  bool italic_;
  bool bold_;
  double framewidth_;
  double arrowx_;
  double arrowy_;
  double startx_;
  double starty_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* facename_;
  ::std::string* remarktext_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(38 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_RemarkInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_ShapeInfo : public ::google::protobuf::Message {
 public:
  SJ_ShapeInfo();
  virtual ~SJ_ShapeInfo();

  SJ_ShapeInfo(const SJ_ShapeInfo& from);

  inline SJ_ShapeInfo& operator=(const SJ_ShapeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_ShapeInfo& default_instance();

  void Swap(SJ_ShapeInfo* other);

  // implements Message ----------------------------------------------

  SJ_ShapeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_ShapeInfo& from);
  void MergeFrom(const SJ_ShapeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignShapeID = 1;
  inline bool has_designshapeid() const;
  inline void clear_designshapeid();
  static const int kDesignShapeIDFieldNumber = 1;
  inline ::google::protobuf::int32 designshapeid() const;
  inline void set_designshapeid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPrintID = 5;
  inline bool has_designprintid() const;
  inline void clear_designprintid();
  static const int kDesignPrintIDFieldNumber = 5;
  inline ::google::protobuf::int32 designprintid() const;
  inline void set_designprintid(::google::protobuf::int32 value);

  // required int32 PrintID = 6;
  inline bool has_printid() const;
  inline void clear_printid();
  static const int kPrintIDFieldNumber = 6;
  inline ::google::protobuf::int32 printid() const;
  inline void set_printid(::google::protobuf::int32 value);

  // required int32 ViewType = 7;
  inline bool has_viewtype() const;
  inline void clear_viewtype();
  static const int kViewTypeFieldNumber = 7;
  inline ::google::protobuf::int32 viewtype() const;
  inline void set_viewtype(::google::protobuf::int32 value);

  // required int32 ShapeType = 8;
  inline bool has_shapetype() const;
  inline void clear_shapetype();
  static const int kShapeTypeFieldNumber = 8;
  inline ::google::protobuf::int32 shapetype() const;
  inline void set_shapetype(::google::protobuf::int32 value);

  // required int32 LineWidth = 9;
  inline bool has_linewidth() const;
  inline void clear_linewidth();
  static const int kLineWidthFieldNumber = 9;
  inline ::google::protobuf::int32 linewidth() const;
  inline void set_linewidth(::google::protobuf::int32 value);

  // required int32 LineStyle = 10;
  inline bool has_linestyle() const;
  inline void clear_linestyle();
  static const int kLineStyleFieldNumber = 10;
  inline ::google::protobuf::int32 linestyle() const;
  inline void set_linestyle(::google::protobuf::int32 value);

  // required double StartX = 11;
  inline bool has_startx() const;
  inline void clear_startx();
  static const int kStartXFieldNumber = 11;
  inline double startx() const;
  inline void set_startx(double value);

  // required double StartY = 12;
  inline bool has_starty() const;
  inline void clear_starty();
  static const int kStartYFieldNumber = 12;
  inline double starty() const;
  inline void set_starty(double value);

  // required double StopX = 13;
  inline bool has_stopx() const;
  inline void clear_stopx();
  static const int kStopXFieldNumber = 13;
  inline double stopx() const;
  inline void set_stopx(double value);

  // required double StopY = 14;
  inline bool has_stopy() const;
  inline void clear_stopy();
  static const int kStopYFieldNumber = 14;
  inline double stopy() const;
  inline void set_stopy(double value);

  // required bool IsVisible = 15;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 15;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 16;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 16;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required int32 CreatorID = 17;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 17;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 18;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 18;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 19;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 19;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 20;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 20;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string AttachFilePath = 21;
  inline bool has_attachfilepath() const;
  inline void clear_attachfilepath();
  static const int kAttachFilePathFieldNumber = 21;
  inline const ::std::string& attachfilepath() const;
  inline void set_attachfilepath(const ::std::string& value);
  inline void set_attachfilepath(const char* value);
  inline void set_attachfilepath(const char* value, size_t size);
  inline ::std::string* mutable_attachfilepath();
  inline ::std::string* release_attachfilepath();
  inline void set_allocated_attachfilepath(::std::string* attachfilepath);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_ShapeInfo)
 private:
  inline void set_has_designshapeid();
  inline void clear_has_designshapeid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designprintid();
  inline void clear_has_designprintid();
  inline void set_has_printid();
  inline void clear_has_printid();
  inline void set_has_viewtype();
  inline void clear_has_viewtype();
  inline void set_has_shapetype();
  inline void clear_has_shapetype();
  inline void set_has_linewidth();
  inline void clear_has_linewidth();
  inline void set_has_linestyle();
  inline void clear_has_linestyle();
  inline void set_has_startx();
  inline void clear_has_startx();
  inline void set_has_starty();
  inline void clear_has_starty();
  inline void set_has_stopx();
  inline void clear_has_stopx();
  inline void set_has_stopy();
  inline void clear_has_stopy();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_attachfilepath();
  inline void clear_has_attachfilepath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designshapeid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 designprintid_;
  ::google::protobuf::int32 printid_;
  ::google::protobuf::int32 viewtype_;
  ::google::protobuf::int32 shapetype_;
  ::google::protobuf::int32 linewidth_;
  double startx_;
  double starty_;
  double stopx_;
  ::google::protobuf::int32 linestyle_;
  bool isvisible_;
  bool islocked_;
  double stopy_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* attachfilepath_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_ShapeInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_SkinInfo : public ::google::protobuf::Message {
 public:
  SJ_SkinInfo();
  virtual ~SJ_SkinInfo();

  SJ_SkinInfo(const SJ_SkinInfo& from);

  inline SJ_SkinInfo& operator=(const SJ_SkinInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_SkinInfo& default_instance();

  void Swap(SJ_SkinInfo* other);

  // implements Message ----------------------------------------------

  SJ_SkinInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_SkinInfo& from);
  void MergeFrom(const SJ_SkinInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignSkinID = 1;
  inline bool has_designskinid() const;
  inline void clear_designskinid();
  static const int kDesignSkinIDFieldNumber = 1;
  inline ::google::protobuf::int32 designskinid() const;
  inline void set_designskinid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DecorID = 5;
  inline bool has_decorid() const;
  inline void clear_decorid();
  static const int kDecorIDFieldNumber = 5;
  inline ::google::protobuf::int32 decorid() const;
  inline void set_decorid(::google::protobuf::int32 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 7;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 7;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 GTypeID = 8;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 8;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required bool HasMark = 9;
  inline bool has_hasmark() const;
  inline void clear_hasmark();
  static const int kHasMarkFieldNumber = 9;
  inline bool hasmark() const;
  inline void set_hasmark(bool value);

  // required bool IsVisible = 10;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 10;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 11;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 11;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required double XLen = 12;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 12;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 13;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 13;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 14;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 14;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double GroundLen = 15;
  inline bool has_groundlen() const;
  inline void clear_groundlen();
  static const int kGroundLenFieldNumber = 15;
  inline double groundlen() const;
  inline void set_groundlen(double value);

  // required int32 CreatorID = 16;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 16;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 17;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 17;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 18;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 18;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 19;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 19;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_SkinInfo)
 private:
  inline void set_has_designskinid();
  inline void clear_has_designskinid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_decorid();
  inline void clear_has_decorid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_hasmark();
  inline void clear_has_hasmark();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_groundlen();
  inline void clear_has_groundlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designskinid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 decorid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 gtypeid_;
  bool hasmark_;
  bool isvisible_;
  bool islocked_;
  ::google::protobuf::int32 creatorid_;
  double xlen_;
  double ylen_;
  double zlen_;
  double groundlen_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_SkinInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_TableInfo : public ::google::protobuf::Message {
 public:
  SJ_TableInfo();
  virtual ~SJ_TableInfo();

  SJ_TableInfo(const SJ_TableInfo& from);

  inline SJ_TableInfo& operator=(const SJ_TableInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_TableInfo& default_instance();

  void Swap(SJ_TableInfo* other);

  // implements Message ----------------------------------------------

  SJ_TableInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_TableInfo& from);
  void MergeFrom(const SJ_TableInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignTableID = 1;
  inline bool has_designtableid() const;
  inline void clear_designtableid();
  static const int kDesignTableIDFieldNumber = 1;
  inline ::google::protobuf::int32 designtableid() const;
  inline void set_designtableid(::google::protobuf::int32 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 3;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 3;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 TableID = 5;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIDFieldNumber = 5;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 7;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 7;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 TableIndex = 8;
  inline bool has_tableindex() const;
  inline void clear_tableindex();
  static const int kTableIndexFieldNumber = 8;
  inline ::google::protobuf::int32 tableindex() const;
  inline void set_tableindex(::google::protobuf::int32 value);

  // required bool HasMark = 9;
  inline bool has_hasmark() const;
  inline void clear_hasmark();
  static const int kHasMarkFieldNumber = 9;
  inline bool hasmark() const;
  inline void set_hasmark(bool value);

  // required bool IsVisible = 10;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 10;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 11;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 11;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required int32 SupplyType = 12;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 12;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 13;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 13;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required double ZLen = 14;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 14;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double YPos = 15;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYPosFieldNumber = 15;
  inline double ypos() const;
  inline void set_ypos(double value);

  // required int32 CreatorID = 16;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 16;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 17;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 17;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 18;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 18;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 19;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 19;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_TableInfo)
 private:
  inline void set_has_designtableid();
  inline void clear_has_designtableid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_tableindex();
  inline void clear_has_tableindex();
  inline void set_has_hasmark();
  inline void clear_has_hasmark();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designtableid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 tableindex_;
  bool hasmark_;
  bool isvisible_;
  bool islocked_;
  ::google::protobuf::int32 supplytype_;
  double zlen_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 creatorid_;
  double ypos_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_TableInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_TablePartInfo : public ::google::protobuf::Message {
 public:
  SJ_TablePartInfo();
  virtual ~SJ_TablePartInfo();

  SJ_TablePartInfo(const SJ_TablePartInfo& from);

  inline SJ_TablePartInfo& operator=(const SJ_TablePartInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_TablePartInfo& default_instance();

  void Swap(SJ_TablePartInfo* other);

  // implements Message ----------------------------------------------

  SJ_TablePartInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_TablePartInfo& from);
  void MergeFrom(const SJ_TablePartInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignTablePartID = 1;
  inline bool has_designtablepartid() const;
  inline void clear_designtablepartid();
  static const int kDesignTablePartIDFieldNumber = 1;
  inline ::google::protobuf::int32 designtablepartid() const;
  inline void set_designtablepartid(::google::protobuf::int32 value);

  // required int32 DesignTableID = 2;
  inline bool has_designtableid() const;
  inline void clear_designtableid();
  static const int kDesignTableIDFieldNumber = 2;
  inline ::google::protobuf::int32 designtableid() const;
  inline void set_designtableid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 DecorLineID = 6;
  inline bool has_decorlineid() const;
  inline void clear_decorlineid();
  static const int kDecorLineIDFieldNumber = 6;
  inline ::google::protobuf::int32 decorlineid() const;
  inline void set_decorlineid(::google::protobuf::int32 value);

  // required int32 FactoryID = 7;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 7;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 8;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 8;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 TableSideIndex = 9;
  inline bool has_tablesideindex() const;
  inline void clear_tablesideindex();
  static const int kTableSideIndexFieldNumber = 9;
  inline ::google::protobuf::int32 tablesideindex() const;
  inline void set_tablesideindex(::google::protobuf::int32 value);

  // required bool IsUserSetYLen = 10;
  inline bool has_isusersetylen() const;
  inline void clear_isusersetylen();
  static const int kIsUserSetYLenFieldNumber = 10;
  inline bool isusersetylen() const;
  inline void set_isusersetylen(bool value);

  // required int32 GTypeID = 11;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 11;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 MaterialID = 12;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 12;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required int32 ModelID = 13;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 13;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required double XLen = 14;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 14;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 15;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 15;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 16;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 16;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required int32 DefaultYLen = 17;
  inline bool has_defaultylen() const;
  inline void clear_defaultylen();
  static const int kDefaultYLenFieldNumber = 17;
  inline ::google::protobuf::int32 defaultylen() const;
  inline void set_defaultylen(::google::protobuf::int32 value);

  // required int32 CreatorID = 18;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 18;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 19;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 19;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 20;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 20;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 21;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 21;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_TablePartInfo)
 private:
  inline void set_has_designtablepartid();
  inline void clear_has_designtablepartid();
  inline void set_has_designtableid();
  inline void clear_has_designtableid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_decorlineid();
  inline void clear_has_decorlineid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_tablesideindex();
  inline void clear_has_tablesideindex();
  inline void set_has_isusersetylen();
  inline void clear_has_isusersetylen();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_defaultylen();
  inline void clear_has_defaultylen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designtablepartid_;
  ::google::protobuf::int32 designtableid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 decorlineid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 tablesideindex_;
  bool isusersetylen_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 materialid_;
  double xlen_;
  double ylen_;
  ::google::protobuf::int32 modelid_;
  ::google::protobuf::int32 defaultylen_;
  double zlen_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_TablePartInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_TableSideInfo : public ::google::protobuf::Message {
 public:
  SJ_TableSideInfo();
  virtual ~SJ_TableSideInfo();

  SJ_TableSideInfo(const SJ_TableSideInfo& from);

  inline SJ_TableSideInfo& operator=(const SJ_TableSideInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_TableSideInfo& default_instance();

  void Swap(SJ_TableSideInfo* other);

  // implements Message ----------------------------------------------

  SJ_TableSideInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_TableSideInfo& from);
  void MergeFrom(const SJ_TableSideInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignTableSideID = 1;
  inline bool has_designtablesideid() const;
  inline void clear_designtablesideid();
  static const int kDesignTableSideIDFieldNumber = 1;
  inline ::google::protobuf::int32 designtablesideid() const;
  inline void set_designtablesideid(::google::protobuf::int32 value);

  // required int32 DesignTableID = 2;
  inline bool has_designtableid() const;
  inline void clear_designtableid();
  static const int kDesignTableIDFieldNumber = 2;
  inline ::google::protobuf::int32 designtableid() const;
  inline void set_designtableid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 TableTopID = 6;
  inline bool has_tabletopid() const;
  inline void clear_tabletopid();
  static const int kTableTopIDFieldNumber = 6;
  inline ::google::protobuf::int32 tabletopid() const;
  inline void set_tabletopid(::google::protobuf::int32 value);

  // required int32 TableTopSideID = 7;
  inline bool has_tabletopsideid() const;
  inline void clear_tabletopsideid();
  static const int kTableTopSideIDFieldNumber = 7;
  inline ::google::protobuf::int32 tabletopsideid() const;
  inline void set_tabletopsideid(::google::protobuf::int32 value);

  // required int32 FactoryID = 8;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 8;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 9;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 9;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 TableSideIndex = 10;
  inline bool has_tablesideindex() const;
  inline void clear_tablesideindex();
  static const int kTableSideIndexFieldNumber = 10;
  inline ::google::protobuf::int32 tablesideindex() const;
  inline void set_tablesideindex(::google::protobuf::int32 value);

  // required bool IsUseTableMat = 11;
  inline bool has_isusetablemat() const;
  inline void clear_isusetablemat();
  static const int kIsUseTableMatFieldNumber = 11;
  inline bool isusetablemat() const;
  inline void set_isusetablemat(bool value);

  // required int32 MaterialID = 12;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 12;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required int32 CreatorID = 13;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 13;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 14;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 14;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 15;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 15;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 16;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 16;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_TableSideInfo)
 private:
  inline void set_has_designtablesideid();
  inline void clear_has_designtablesideid();
  inline void set_has_designtableid();
  inline void clear_has_designtableid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_tabletopid();
  inline void clear_has_tabletopid();
  inline void set_has_tabletopsideid();
  inline void clear_has_tabletopsideid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_tablesideindex();
  inline void clear_has_tablesideindex();
  inline void set_has_isusetablemat();
  inline void clear_has_isusetablemat();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designtablesideid_;
  ::google::protobuf::int32 designtableid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 tabletopid_;
  ::google::protobuf::int32 tabletopsideid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 tablesideindex_;
  bool isusetablemat_;
  ::google::protobuf::int32 materialid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_TableSideInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_WallDecorInfo : public ::google::protobuf::Message {
 public:
  SJ_WallDecorInfo();
  virtual ~SJ_WallDecorInfo();

  SJ_WallDecorInfo(const SJ_WallDecorInfo& from);

  inline SJ_WallDecorInfo& operator=(const SJ_WallDecorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_WallDecorInfo& default_instance();

  void Swap(SJ_WallDecorInfo* other);

  // implements Message ----------------------------------------------

  SJ_WallDecorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_WallDecorInfo& from);
  void MergeFrom(const SJ_WallDecorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignWallDecorID = 1;
  inline bool has_designwalldecorid() const;
  inline void clear_designwalldecorid();
  static const int kDesignWallDecorIDFieldNumber = 1;
  inline ::google::protobuf::int32 designwalldecorid() const;
  inline void set_designwalldecorid(::google::protobuf::int32 value);

  // required int32 DesignWallID = 2;
  inline bool has_designwallid() const;
  inline void clear_designwallid();
  static const int kDesignWallIDFieldNumber = 2;
  inline ::google::protobuf::int32 designwallid() const;
  inline void set_designwallid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 DesignPlanID = 5;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 5;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 DecorID = 6;
  inline bool has_decorid() const;
  inline void clear_decorid();
  static const int kDecorIDFieldNumber = 6;
  inline ::google::protobuf::int32 decorid() const;
  inline void set_decorid(::google::protobuf::int32 value);

  // required int32 FactoryID = 7;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 7;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 8;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 8;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required bool IsModelRevers = 9;
  inline bool has_ismodelrevers() const;
  inline void clear_ismodelrevers();
  static const int kIsModelReversFieldNumber = 9;
  inline bool ismodelrevers() const;
  inline void set_ismodelrevers(bool value);

  // required bool IsVisible = 10;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 10;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 11;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 11;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required int32 SupplyType = 12;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 12;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 13;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 13;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required double XLen = 14;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 14;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 15;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 15;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 16;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 16;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double OffsetXLen = 17;
  inline bool has_offsetxlen() const;
  inline void clear_offsetxlen();
  static const int kOffsetXLenFieldNumber = 17;
  inline double offsetxlen() const;
  inline void set_offsetxlen(double value);

  // required double OffsetYLen = 18;
  inline bool has_offsetylen() const;
  inline void clear_offsetylen();
  static const int kOffsetYLenFieldNumber = 18;
  inline double offsetylen() const;
  inline void set_offsetylen(double value);

  // required double OffsetZLen = 19;
  inline bool has_offsetzlen() const;
  inline void clear_offsetzlen();
  static const int kOffsetZLenFieldNumber = 19;
  inline double offsetzlen() const;
  inline void set_offsetzlen(double value);

  // required int32 CreatorID = 20;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 20;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 21;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 21;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 22;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 22;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 23;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 23;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_WallDecorInfo)
 private:
  inline void set_has_designwalldecorid();
  inline void clear_has_designwalldecorid();
  inline void set_has_designwallid();
  inline void clear_has_designwallid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_decorid();
  inline void clear_has_decorid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_ismodelrevers();
  inline void clear_has_ismodelrevers();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_offsetxlen();
  inline void clear_has_offsetxlen();
  inline void set_has_offsetylen();
  inline void clear_has_offsetylen();
  inline void set_has_offsetzlen();
  inline void clear_has_offsetzlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designwalldecorid_;
  ::google::protobuf::int32 designwallid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int32 decorid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  bool ismodelrevers_;
  bool isvisible_;
  bool islocked_;
  ::google::protobuf::int32 supplytype_;
  double xlen_;
  double ylen_;
  double zlen_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 creatorid_;
  double offsetxlen_;
  double offsetylen_;
  double offsetzlen_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_WallDecorInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_WallInfo : public ::google::protobuf::Message {
 public:
  SJ_WallInfo();
  virtual ~SJ_WallInfo();

  SJ_WallInfo(const SJ_WallInfo& from);

  inline SJ_WallInfo& operator=(const SJ_WallInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_WallInfo& default_instance();

  void Swap(SJ_WallInfo* other);

  // implements Message ----------------------------------------------

  SJ_WallInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_WallInfo& from);
  void MergeFrom(const SJ_WallInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DesignWallID = 1;
  inline bool has_designwallid() const;
  inline void clear_designwallid();
  static const int kDesignWallIDFieldNumber = 1;
  inline ::google::protobuf::int32 designwallid() const;
  inline void set_designwallid(::google::protobuf::int32 value);

  // required int32 DesignPlanID = 2;
  inline bool has_designplanid() const;
  inline void clear_designplanid();
  static const int kDesignPlanIDFieldNumber = 2;
  inline ::google::protobuf::int32 designplanid() const;
  inline void set_designplanid(::google::protobuf::int32 value);

  // required int32 OrderCate = 3;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 3;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 4;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 6;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 6;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 WallType = 7;
  inline bool has_walltype() const;
  inline void clear_walltype();
  static const int kWallTypeFieldNumber = 7;
  inline ::google::protobuf::int32 walltype() const;
  inline void set_walltype(::google::protobuf::int32 value);

  // required int32 WallIndex = 8;
  inline bool has_wallindex() const;
  inline void clear_wallindex();
  static const int kWallIndexFieldNumber = 8;
  inline ::google::protobuf::int32 wallindex() const;
  inline void set_wallindex(::google::protobuf::int32 value);

  // required int32 GroupID = 9;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 9;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required int32 DockObjID = 10;
  inline bool has_dockobjid() const;
  inline void clear_dockobjid();
  static const int kDockObjIDFieldNumber = 10;
  inline ::google::protobuf::int32 dockobjid() const;
  inline void set_dockobjid(::google::protobuf::int32 value);

  // required double DockXPos = 11;
  inline bool has_dockxpos() const;
  inline void clear_dockxpos();
  static const int kDockXPosFieldNumber = 11;
  inline double dockxpos() const;
  inline void set_dockxpos(double value);

  // required double DockYPos = 12;
  inline bool has_dockypos() const;
  inline void clear_dockypos();
  static const int kDockYPosFieldNumber = 12;
  inline double dockypos() const;
  inline void set_dockypos(double value);

  // required int32 DecorID = 13;
  inline bool has_decorid() const;
  inline void clear_decorid();
  static const int kDecorIDFieldNumber = 13;
  inline ::google::protobuf::int32 decorid() const;
  inline void set_decorid(::google::protobuf::int32 value);

  // required int32 GridStyle = 14;
  inline bool has_gridstyle() const;
  inline void clear_gridstyle();
  static const int kGridStyleFieldNumber = 14;
  inline ::google::protobuf::int32 gridstyle() const;
  inline void set_gridstyle(::google::protobuf::int32 value);

  // required bool HasMark = 15;
  inline bool has_hasmark() const;
  inline void clear_hasmark();
  static const int kHasMarkFieldNumber = 15;
  inline bool hasmark() const;
  inline void set_hasmark(bool value);

  // required bool IsVisible = 16;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 16;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);

  // required bool IsLocked = 17;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 17;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // required double StartX = 18;
  inline bool has_startx() const;
  inline void clear_startx();
  static const int kStartXFieldNumber = 18;
  inline double startx() const;
  inline void set_startx(double value);

  // required double StartY = 19;
  inline bool has_starty() const;
  inline void clear_starty();
  static const int kStartYFieldNumber = 19;
  inline double starty() const;
  inline void set_starty(double value);

  // required double EndX = 20;
  inline bool has_endx() const;
  inline void clear_endx();
  static const int kEndXFieldNumber = 20;
  inline double endx() const;
  inline void set_endx(double value);

  // required double EndY = 21;
  inline bool has_endy() const;
  inline void clear_endy();
  static const int kEndYFieldNumber = 21;
  inline double endy() const;
  inline void set_endy(double value);

  // required double XLen = 22;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 22;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 23;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 23;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 24;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 24;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double GroundLen = 25;
  inline bool has_groundlen() const;
  inline void clear_groundlen();
  static const int kGroundLenFieldNumber = 25;
  inline double groundlen() const;
  inline void set_groundlen(double value);

  // required int32 CreatorID = 26;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 26;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 27;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 27;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 28;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 28;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 29;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 29;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.SJ_WallInfo)
 private:
  inline void set_has_designwallid();
  inline void clear_has_designwallid();
  inline void set_has_designplanid();
  inline void clear_has_designplanid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_walltype();
  inline void clear_has_walltype();
  inline void set_has_wallindex();
  inline void clear_has_wallindex();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_dockobjid();
  inline void clear_has_dockobjid();
  inline void set_has_dockxpos();
  inline void clear_has_dockxpos();
  inline void set_has_dockypos();
  inline void clear_has_dockypos();
  inline void set_has_decorid();
  inline void clear_has_decorid();
  inline void set_has_gridstyle();
  inline void clear_has_gridstyle();
  inline void set_has_hasmark();
  inline void clear_has_hasmark();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_startx();
  inline void clear_has_startx();
  inline void set_has_starty();
  inline void clear_has_starty();
  inline void set_has_endx();
  inline void clear_has_endx();
  inline void set_has_endy();
  inline void clear_has_endy();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_groundlen();
  inline void clear_has_groundlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 designwallid_;
  ::google::protobuf::int32 designplanid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 walltype_;
  ::google::protobuf::int32 wallindex_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 dockobjid_;
  double dockxpos_;
  double dockypos_;
  ::google::protobuf::int32 decorid_;
  ::google::protobuf::int32 gridstyle_;
  double startx_;
  bool hasmark_;
  bool isvisible_;
  bool islocked_;
  ::google::protobuf::int32 creatorid_;
  double starty_;
  double endx_;
  double endy_;
  double xlen_;
  double ylen_;
  double zlen_;
  double groundlen_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_WallInfo* default_instance_;
};
// -------------------------------------------------------------------

class SJ_Table : public ::google::protobuf::Message {
 public:
  SJ_Table();
  virtual ~SJ_Table();

  SJ_Table(const SJ_Table& from);

  inline SJ_Table& operator=(const SJ_Table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SJ_Table& default_instance();

  void Swap(SJ_Table* other);

  // implements Message ----------------------------------------------

  SJ_Table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SJ_Table& from);
  void MergeFrom(const SJ_Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .transMsg.SJ_CabBoardGapInfo SJ_CabBoardGapInfo = 1;
  inline int sj_cabboardgapinfo_size() const;
  inline void clear_sj_cabboardgapinfo();
  static const int kSJCabBoardGapInfoFieldNumber = 1;
  inline const ::transMsg::SJ_CabBoardGapInfo& sj_cabboardgapinfo(int index) const;
  inline ::transMsg::SJ_CabBoardGapInfo* mutable_sj_cabboardgapinfo(int index);
  inline ::transMsg::SJ_CabBoardGapInfo* add_sj_cabboardgapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardGapInfo >&
      sj_cabboardgapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardGapInfo >*
      mutable_sj_cabboardgapinfo();

  // repeated .transMsg.SJ_CabBoardInfo SJ_CabBoardInfo = 2;
  inline int sj_cabboardinfo_size() const;
  inline void clear_sj_cabboardinfo();
  static const int kSJCabBoardInfoFieldNumber = 2;
  inline const ::transMsg::SJ_CabBoardInfo& sj_cabboardinfo(int index) const;
  inline ::transMsg::SJ_CabBoardInfo* mutable_sj_cabboardinfo(int index);
  inline ::transMsg::SJ_CabBoardInfo* add_sj_cabboardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardInfo >&
      sj_cabboardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardInfo >*
      mutable_sj_cabboardinfo();

  // repeated .transMsg.SJ_CabBoardSealInfo SJ_CabBoardSealInfo = 3;
  inline int sj_cabboardsealinfo_size() const;
  inline void clear_sj_cabboardsealinfo();
  static const int kSJCabBoardSealInfoFieldNumber = 3;
  inline const ::transMsg::SJ_CabBoardSealInfo& sj_cabboardsealinfo(int index) const;
  inline ::transMsg::SJ_CabBoardSealInfo* mutable_sj_cabboardsealinfo(int index);
  inline ::transMsg::SJ_CabBoardSealInfo* add_sj_cabboardsealinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardSealInfo >&
      sj_cabboardsealinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardSealInfo >*
      mutable_sj_cabboardsealinfo();

  // repeated .transMsg.SJ_CabDoorBoardGapInfo SJ_CabDoorBoardGapInfo = 4;
  inline int sj_cabdoorboardgapinfo_size() const;
  inline void clear_sj_cabdoorboardgapinfo();
  static const int kSJCabDoorBoardGapInfoFieldNumber = 4;
  inline const ::transMsg::SJ_CabDoorBoardGapInfo& sj_cabdoorboardgapinfo(int index) const;
  inline ::transMsg::SJ_CabDoorBoardGapInfo* mutable_sj_cabdoorboardgapinfo(int index);
  inline ::transMsg::SJ_CabDoorBoardGapInfo* add_sj_cabdoorboardgapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardGapInfo >&
      sj_cabdoorboardgapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardGapInfo >*
      mutable_sj_cabdoorboardgapinfo();

  // repeated .transMsg.SJ_CabDoorBoardInfo SJ_CabDoorBoardInfo = 5;
  inline int sj_cabdoorboardinfo_size() const;
  inline void clear_sj_cabdoorboardinfo();
  static const int kSJCabDoorBoardInfoFieldNumber = 5;
  inline const ::transMsg::SJ_CabDoorBoardInfo& sj_cabdoorboardinfo(int index) const;
  inline ::transMsg::SJ_CabDoorBoardInfo* mutable_sj_cabdoorboardinfo(int index);
  inline ::transMsg::SJ_CabDoorBoardInfo* add_sj_cabdoorboardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardInfo >&
      sj_cabdoorboardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardInfo >*
      mutable_sj_cabdoorboardinfo();

  // repeated .transMsg.SJ_CabDoorBoardSealInfo SJ_CabDoorBoardSealInfo = 6;
  inline int sj_cabdoorboardsealinfo_size() const;
  inline void clear_sj_cabdoorboardsealinfo();
  static const int kSJCabDoorBoardSealInfoFieldNumber = 6;
  inline const ::transMsg::SJ_CabDoorBoardSealInfo& sj_cabdoorboardsealinfo(int index) const;
  inline ::transMsg::SJ_CabDoorBoardSealInfo* mutable_sj_cabdoorboardsealinfo(int index);
  inline ::transMsg::SJ_CabDoorBoardSealInfo* add_sj_cabdoorboardsealinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardSealInfo >&
      sj_cabdoorboardsealinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardSealInfo >*
      mutable_sj_cabdoorboardsealinfo();

  // repeated .transMsg.SJ_CabDoorHWFInfo SJ_CabDoorHWFInfo = 7;
  inline int sj_cabdoorhwfinfo_size() const;
  inline void clear_sj_cabdoorhwfinfo();
  static const int kSJCabDoorHWFInfoFieldNumber = 7;
  inline const ::transMsg::SJ_CabDoorHWFInfo& sj_cabdoorhwfinfo(int index) const;
  inline ::transMsg::SJ_CabDoorHWFInfo* mutable_sj_cabdoorhwfinfo(int index);
  inline ::transMsg::SJ_CabDoorHWFInfo* add_sj_cabdoorhwfinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorHWFInfo >&
      sj_cabdoorhwfinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorHWFInfo >*
      mutable_sj_cabdoorhwfinfo();

  // repeated .transMsg.SJ_CabDoorHandleInfo SJ_CabDoorHandleInfo = 8;
  inline int sj_cabdoorhandleinfo_size() const;
  inline void clear_sj_cabdoorhandleinfo();
  static const int kSJCabDoorHandleInfoFieldNumber = 8;
  inline const ::transMsg::SJ_CabDoorHandleInfo& sj_cabdoorhandleinfo(int index) const;
  inline ::transMsg::SJ_CabDoorHandleInfo* mutable_sj_cabdoorhandleinfo(int index);
  inline ::transMsg::SJ_CabDoorHandleInfo* add_sj_cabdoorhandleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorHandleInfo >&
      sj_cabdoorhandleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorHandleInfo >*
      mutable_sj_cabdoorhandleinfo();

  // repeated .transMsg.SJ_CabDoorInfo SJ_CabDoorInfo = 9;
  inline int sj_cabdoorinfo_size() const;
  inline void clear_sj_cabdoorinfo();
  static const int kSJCabDoorInfoFieldNumber = 9;
  inline const ::transMsg::SJ_CabDoorInfo& sj_cabdoorinfo(int index) const;
  inline ::transMsg::SJ_CabDoorInfo* mutable_sj_cabdoorinfo(int index);
  inline ::transMsg::SJ_CabDoorInfo* add_sj_cabdoorinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorInfo >&
      sj_cabdoorinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorInfo >*
      mutable_sj_cabdoorinfo();

  // repeated .transMsg.SJ_CabDoorRegionInfo SJ_CabDoorRegionInfo = 10;
  inline int sj_cabdoorregioninfo_size() const;
  inline void clear_sj_cabdoorregioninfo();
  static const int kSJCabDoorRegionInfoFieldNumber = 10;
  inline const ::transMsg::SJ_CabDoorRegionInfo& sj_cabdoorregioninfo(int index) const;
  inline ::transMsg::SJ_CabDoorRegionInfo* mutable_sj_cabdoorregioninfo(int index);
  inline ::transMsg::SJ_CabDoorRegionInfo* add_sj_cabdoorregioninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorRegionInfo >&
      sj_cabdoorregioninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorRegionInfo >*
      mutable_sj_cabdoorregioninfo();

  // repeated .transMsg.SJ_CabDoorSlideInfo SJ_CabDoorSlideInfo = 11;
  inline int sj_cabdoorslideinfo_size() const;
  inline void clear_sj_cabdoorslideinfo();
  static const int kSJCabDoorSlideInfoFieldNumber = 11;
  inline const ::transMsg::SJ_CabDoorSlideInfo& sj_cabdoorslideinfo(int index) const;
  inline ::transMsg::SJ_CabDoorSlideInfo* mutable_sj_cabdoorslideinfo(int index);
  inline ::transMsg::SJ_CabDoorSlideInfo* add_sj_cabdoorslideinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorSlideInfo >&
      sj_cabdoorslideinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorSlideInfo >*
      mutable_sj_cabdoorslideinfo();

  // repeated .transMsg.SJ_CabDoorSystemInfo SJ_CabDoorSystemInfo = 12;
  inline int sj_cabdoorsysteminfo_size() const;
  inline void clear_sj_cabdoorsysteminfo();
  static const int kSJCabDoorSystemInfoFieldNumber = 12;
  inline const ::transMsg::SJ_CabDoorSystemInfo& sj_cabdoorsysteminfo(int index) const;
  inline ::transMsg::SJ_CabDoorSystemInfo* mutable_sj_cabdoorsysteminfo(int index);
  inline ::transMsg::SJ_CabDoorSystemInfo* add_sj_cabdoorsysteminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorSystemInfo >&
      sj_cabdoorsysteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorSystemInfo >*
      mutable_sj_cabdoorsysteminfo();

  // repeated .transMsg.SJ_CabFNFHWFInfo SJ_CabFNFHWFInfo = 13;
  inline int sj_cabfnfhwfinfo_size() const;
  inline void clear_sj_cabfnfhwfinfo();
  static const int kSJCabFNFHWFInfoFieldNumber = 13;
  inline const ::transMsg::SJ_CabFNFHWFInfo& sj_cabfnfhwfinfo(int index) const;
  inline ::transMsg::SJ_CabFNFHWFInfo* mutable_sj_cabfnfhwfinfo(int index);
  inline ::transMsg::SJ_CabFNFHWFInfo* add_sj_cabfnfhwfinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFHWFInfo >&
      sj_cabfnfhwfinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFHWFInfo >*
      mutable_sj_cabfnfhwfinfo();

  // repeated .transMsg.SJ_CabFNFHoleInfo SJ_CabFNFHoleInfo = 14;
  inline int sj_cabfnfholeinfo_size() const;
  inline void clear_sj_cabfnfholeinfo();
  static const int kSJCabFNFHoleInfoFieldNumber = 14;
  inline const ::transMsg::SJ_CabFNFHoleInfo& sj_cabfnfholeinfo(int index) const;
  inline ::transMsg::SJ_CabFNFHoleInfo* mutable_sj_cabfnfholeinfo(int index);
  inline ::transMsg::SJ_CabFNFHoleInfo* add_sj_cabfnfholeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFHoleInfo >&
      sj_cabfnfholeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFHoleInfo >*
      mutable_sj_cabfnfholeinfo();

  // repeated .transMsg.SJ_CabFNFInfo SJ_CabFNFInfo = 15;
  inline int sj_cabfnfinfo_size() const;
  inline void clear_sj_cabfnfinfo();
  static const int kSJCabFNFInfoFieldNumber = 15;
  inline const ::transMsg::SJ_CabFNFInfo& sj_cabfnfinfo(int index) const;
  inline ::transMsg::SJ_CabFNFInfo* mutable_sj_cabfnfinfo(int index);
  inline ::transMsg::SJ_CabFNFInfo* add_sj_cabfnfinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFInfo >&
      sj_cabfnfinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFInfo >*
      mutable_sj_cabfnfinfo();

  // repeated .transMsg.SJ_CabFNFPartInfo SJ_CabFNFPartInfo = 16;
  inline int sj_cabfnfpartinfo_size() const;
  inline void clear_sj_cabfnfpartinfo();
  static const int kSJCabFNFPartInfoFieldNumber = 16;
  inline const ::transMsg::SJ_CabFNFPartInfo& sj_cabfnfpartinfo(int index) const;
  inline ::transMsg::SJ_CabFNFPartInfo* mutable_sj_cabfnfpartinfo(int index);
  inline ::transMsg::SJ_CabFNFPartInfo* add_sj_cabfnfpartinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFPartInfo >&
      sj_cabfnfpartinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFPartInfo >*
      mutable_sj_cabfnfpartinfo();

  // repeated .transMsg.SJ_CabFNFPartSealInfo SJ_CabFNFPartSealInfo = 17;
  inline int sj_cabfnfpartsealinfo_size() const;
  inline void clear_sj_cabfnfpartsealinfo();
  static const int kSJCabFNFPartSealInfoFieldNumber = 17;
  inline const ::transMsg::SJ_CabFNFPartSealInfo& sj_cabfnfpartsealinfo(int index) const;
  inline ::transMsg::SJ_CabFNFPartSealInfo* mutable_sj_cabfnfpartsealinfo(int index);
  inline ::transMsg::SJ_CabFNFPartSealInfo* add_sj_cabfnfpartsealinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFPartSealInfo >&
      sj_cabfnfpartsealinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFPartSealInfo >*
      mutable_sj_cabfnfpartsealinfo();

  // repeated .transMsg.SJ_CabInfo SJ_CabInfo = 18;
  inline int sj_cabinfo_size() const;
  inline void clear_sj_cabinfo();
  static const int kSJCabInfoFieldNumber = 18;
  inline const ::transMsg::SJ_CabInfo& sj_cabinfo(int index) const;
  inline ::transMsg::SJ_CabInfo* mutable_sj_cabinfo(int index);
  inline ::transMsg::SJ_CabInfo* add_sj_cabinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabInfo >&
      sj_cabinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabInfo >*
      mutable_sj_cabinfo();

  // repeated .transMsg.SJ_DecorBoardInfo SJ_DecorBoardInfo = 19;
  inline int sj_decorboardinfo_size() const;
  inline void clear_sj_decorboardinfo();
  static const int kSJDecorBoardInfoFieldNumber = 19;
  inline const ::transMsg::SJ_DecorBoardInfo& sj_decorboardinfo(int index) const;
  inline ::transMsg::SJ_DecorBoardInfo* mutable_sj_decorboardinfo(int index);
  inline ::transMsg::SJ_DecorBoardInfo* add_sj_decorboardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardInfo >&
      sj_decorboardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardInfo >*
      mutable_sj_decorboardinfo();

  // repeated .transMsg.SJ_DecorBoardUnitInfo SJ_DecorBoardUnitInfo = 20;
  inline int sj_decorboardunitinfo_size() const;
  inline void clear_sj_decorboardunitinfo();
  static const int kSJDecorBoardUnitInfoFieldNumber = 20;
  inline const ::transMsg::SJ_DecorBoardUnitInfo& sj_decorboardunitinfo(int index) const;
  inline ::transMsg::SJ_DecorBoardUnitInfo* mutable_sj_decorboardunitinfo(int index);
  inline ::transMsg::SJ_DecorBoardUnitInfo* add_sj_decorboardunitinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardUnitInfo >&
      sj_decorboardunitinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardUnitInfo >*
      mutable_sj_decorboardunitinfo();

  // repeated .transMsg.SJ_DecorBoardUnitSealInfo SJ_DecorBoardUnitSealInfo = 21;
  inline int sj_decorboardunitsealinfo_size() const;
  inline void clear_sj_decorboardunitsealinfo();
  static const int kSJDecorBoardUnitSealInfoFieldNumber = 21;
  inline const ::transMsg::SJ_DecorBoardUnitSealInfo& sj_decorboardunitsealinfo(int index) const;
  inline ::transMsg::SJ_DecorBoardUnitSealInfo* mutable_sj_decorboardunitsealinfo(int index);
  inline ::transMsg::SJ_DecorBoardUnitSealInfo* add_sj_decorboardunitsealinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardUnitSealInfo >&
      sj_decorboardunitsealinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardUnitSealInfo >*
      mutable_sj_decorboardunitsealinfo();

  // repeated .transMsg.SJ_DecorInfo SJ_DecorInfo = 22;
  inline int sj_decorinfo_size() const;
  inline void clear_sj_decorinfo();
  static const int kSJDecorInfoFieldNumber = 22;
  inline const ::transMsg::SJ_DecorInfo& sj_decorinfo(int index) const;
  inline ::transMsg::SJ_DecorInfo* mutable_sj_decorinfo(int index);
  inline ::transMsg::SJ_DecorInfo* add_sj_decorinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorInfo >&
      sj_decorinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorInfo >*
      mutable_sj_decorinfo();

  // repeated .transMsg.SJ_DecorLineInfo SJ_DecorLineInfo = 23;
  inline int sj_decorlineinfo_size() const;
  inline void clear_sj_decorlineinfo();
  static const int kSJDecorLineInfoFieldNumber = 23;
  inline const ::transMsg::SJ_DecorLineInfo& sj_decorlineinfo(int index) const;
  inline ::transMsg::SJ_DecorLineInfo* mutable_sj_decorlineinfo(int index);
  inline ::transMsg::SJ_DecorLineInfo* add_sj_decorlineinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorLineInfo >&
      sj_decorlineinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorLineInfo >*
      mutable_sj_decorlineinfo();

  // repeated .transMsg.SJ_DesignPlanInfo SJ_DesignPlanInfo = 24;
  inline int sj_designplaninfo_size() const;
  inline void clear_sj_designplaninfo();
  static const int kSJDesignPlanInfoFieldNumber = 24;
  inline const ::transMsg::SJ_DesignPlanInfo& sj_designplaninfo(int index) const;
  inline ::transMsg::SJ_DesignPlanInfo* mutable_sj_designplaninfo(int index);
  inline ::transMsg::SJ_DesignPlanInfo* add_sj_designplaninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DesignPlanInfo >&
      sj_designplaninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DesignPlanInfo >*
      mutable_sj_designplaninfo();

  // repeated .transMsg.SJ_FittingInfo SJ_FittingInfo = 25;
  inline int sj_fittinginfo_size() const;
  inline void clear_sj_fittinginfo();
  static const int kSJFittingInfoFieldNumber = 25;
  inline const ::transMsg::SJ_FittingInfo& sj_fittinginfo(int index) const;
  inline ::transMsg::SJ_FittingInfo* mutable_sj_fittinginfo(int index);
  inline ::transMsg::SJ_FittingInfo* add_sj_fittinginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_FittingInfo >&
      sj_fittinginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_FittingInfo >*
      mutable_sj_fittinginfo();

  // repeated .transMsg.SJ_HWFInfo SJ_HWFInfo = 26;
  inline int sj_hwfinfo_size() const;
  inline void clear_sj_hwfinfo();
  static const int kSJHWFInfoFieldNumber = 26;
  inline const ::transMsg::SJ_HWFInfo& sj_hwfinfo(int index) const;
  inline ::transMsg::SJ_HWFInfo* mutable_sj_hwfinfo(int index);
  inline ::transMsg::SJ_HWFInfo* add_sj_hwfinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_HWFInfo >&
      sj_hwfinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_HWFInfo >*
      mutable_sj_hwfinfo();

  // repeated .transMsg.SJ_MarkInfo SJ_MarkInfo = 27;
  inline int sj_markinfo_size() const;
  inline void clear_sj_markinfo();
  static const int kSJMarkInfoFieldNumber = 27;
  inline const ::transMsg::SJ_MarkInfo& sj_markinfo(int index) const;
  inline ::transMsg::SJ_MarkInfo* mutable_sj_markinfo(int index);
  inline ::transMsg::SJ_MarkInfo* add_sj_markinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_MarkInfo >&
      sj_markinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_MarkInfo >*
      mutable_sj_markinfo();

  // repeated .transMsg.SJ_MatrixInfo SJ_MatrixInfo = 28;
  inline int sj_matrixinfo_size() const;
  inline void clear_sj_matrixinfo();
  static const int kSJMatrixInfoFieldNumber = 28;
  inline const ::transMsg::SJ_MatrixInfo& sj_matrixinfo(int index) const;
  inline ::transMsg::SJ_MatrixInfo* mutable_sj_matrixinfo(int index);
  inline ::transMsg::SJ_MatrixInfo* add_sj_matrixinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_MatrixInfo >&
      sj_matrixinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_MatrixInfo >*
      mutable_sj_matrixinfo();

  // repeated .transMsg.SJ_OrderAddedInfo SJ_OrderAddedInfo = 29;
  inline int sj_orderaddedinfo_size() const;
  inline void clear_sj_orderaddedinfo();
  static const int kSJOrderAddedInfoFieldNumber = 29;
  inline const ::transMsg::SJ_OrderAddedInfo& sj_orderaddedinfo(int index) const;
  inline ::transMsg::SJ_OrderAddedInfo* mutable_sj_orderaddedinfo(int index);
  inline ::transMsg::SJ_OrderAddedInfo* add_sj_orderaddedinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_OrderAddedInfo >&
      sj_orderaddedinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_OrderAddedInfo >*
      mutable_sj_orderaddedinfo();

  // repeated .transMsg.SJ_OrderDataInfo SJ_OrderDataInfo = 30;
  inline int sj_orderdatainfo_size() const;
  inline void clear_sj_orderdatainfo();
  static const int kSJOrderDataInfoFieldNumber = 30;
  inline const ::transMsg::SJ_OrderDataInfo& sj_orderdatainfo(int index) const;
  inline ::transMsg::SJ_OrderDataInfo* mutable_sj_orderdatainfo(int index);
  inline ::transMsg::SJ_OrderDataInfo* add_sj_orderdatainfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_OrderDataInfo >&
      sj_orderdatainfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_OrderDataInfo >*
      mutable_sj_orderdatainfo();

  // repeated .transMsg.SJ_PackInfo SJ_PackInfo = 31;
  inline int sj_packinfo_size() const;
  inline void clear_sj_packinfo();
  static const int kSJPackInfoFieldNumber = 31;
  inline const ::transMsg::SJ_PackInfo& sj_packinfo(int index) const;
  inline ::transMsg::SJ_PackInfo* mutable_sj_packinfo(int index);
  inline ::transMsg::SJ_PackInfo* add_sj_packinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PackInfo >&
      sj_packinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PackInfo >*
      mutable_sj_packinfo();

  // repeated .transMsg.SJ_PointInfo SJ_PointInfo = 32;
  inline int sj_pointinfo_size() const;
  inline void clear_sj_pointinfo();
  static const int kSJPointInfoFieldNumber = 32;
  inline const ::transMsg::SJ_PointInfo& sj_pointinfo(int index) const;
  inline ::transMsg::SJ_PointInfo* mutable_sj_pointinfo(int index);
  inline ::transMsg::SJ_PointInfo* add_sj_pointinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PointInfo >&
      sj_pointinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PointInfo >*
      mutable_sj_pointinfo();

  // repeated .transMsg.SJ_PrintElementInfo SJ_PrintElementInfo = 33;
  inline int sj_printelementinfo_size() const;
  inline void clear_sj_printelementinfo();
  static const int kSJPrintElementInfoFieldNumber = 33;
  inline const ::transMsg::SJ_PrintElementInfo& sj_printelementinfo(int index) const;
  inline ::transMsg::SJ_PrintElementInfo* mutable_sj_printelementinfo(int index);
  inline ::transMsg::SJ_PrintElementInfo* add_sj_printelementinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintElementInfo >&
      sj_printelementinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintElementInfo >*
      mutable_sj_printelementinfo();

  // repeated .transMsg.SJ_PrintGroupInfo SJ_PrintGroupInfo = 34;
  inline int sj_printgroupinfo_size() const;
  inline void clear_sj_printgroupinfo();
  static const int kSJPrintGroupInfoFieldNumber = 34;
  inline const ::transMsg::SJ_PrintGroupInfo& sj_printgroupinfo(int index) const;
  inline ::transMsg::SJ_PrintGroupInfo* mutable_sj_printgroupinfo(int index);
  inline ::transMsg::SJ_PrintGroupInfo* add_sj_printgroupinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintGroupInfo >&
      sj_printgroupinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintGroupInfo >*
      mutable_sj_printgroupinfo();

  // repeated .transMsg.SJ_PrintInfo SJ_PrintInfo = 35;
  inline int sj_printinfo_size() const;
  inline void clear_sj_printinfo();
  static const int kSJPrintInfoFieldNumber = 35;
  inline const ::transMsg::SJ_PrintInfo& sj_printinfo(int index) const;
  inline ::transMsg::SJ_PrintInfo* mutable_sj_printinfo(int index);
  inline ::transMsg::SJ_PrintInfo* add_sj_printinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintInfo >&
      sj_printinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintInfo >*
      mutable_sj_printinfo();

  // repeated .transMsg.SJ_PrintTableInfo SJ_PrintTableInfo = 36;
  inline int sj_printtableinfo_size() const;
  inline void clear_sj_printtableinfo();
  static const int kSJPrintTableInfoFieldNumber = 36;
  inline const ::transMsg::SJ_PrintTableInfo& sj_printtableinfo(int index) const;
  inline ::transMsg::SJ_PrintTableInfo* mutable_sj_printtableinfo(int index);
  inline ::transMsg::SJ_PrintTableInfo* add_sj_printtableinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableInfo >&
      sj_printtableinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableInfo >*
      mutable_sj_printtableinfo();

  // repeated .transMsg.SJ_PrintTableRowColInfo SJ_PrintTableRowColInfo = 37;
  inline int sj_printtablerowcolinfo_size() const;
  inline void clear_sj_printtablerowcolinfo();
  static const int kSJPrintTableRowColInfoFieldNumber = 37;
  inline const ::transMsg::SJ_PrintTableRowColInfo& sj_printtablerowcolinfo(int index) const;
  inline ::transMsg::SJ_PrintTableRowColInfo* mutable_sj_printtablerowcolinfo(int index);
  inline ::transMsg::SJ_PrintTableRowColInfo* add_sj_printtablerowcolinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableRowColInfo >&
      sj_printtablerowcolinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableRowColInfo >*
      mutable_sj_printtablerowcolinfo();

  // repeated .transMsg.SJ_PrintTableRowInfo SJ_PrintTableRowInfo = 38;
  inline int sj_printtablerowinfo_size() const;
  inline void clear_sj_printtablerowinfo();
  static const int kSJPrintTableRowInfoFieldNumber = 38;
  inline const ::transMsg::SJ_PrintTableRowInfo& sj_printtablerowinfo(int index) const;
  inline ::transMsg::SJ_PrintTableRowInfo* mutable_sj_printtablerowinfo(int index);
  inline ::transMsg::SJ_PrintTableRowInfo* add_sj_printtablerowinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableRowInfo >&
      sj_printtablerowinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableRowInfo >*
      mutable_sj_printtablerowinfo();

  // repeated .transMsg.SJ_ProductInfo SJ_ProductInfo = 39;
  inline int sj_productinfo_size() const;
  inline void clear_sj_productinfo();
  static const int kSJProductInfoFieldNumber = 39;
  inline const ::transMsg::SJ_ProductInfo& sj_productinfo(int index) const;
  inline ::transMsg::SJ_ProductInfo* mutable_sj_productinfo(int index);
  inline ::transMsg::SJ_ProductInfo* add_sj_productinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_ProductInfo >&
      sj_productinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_ProductInfo >*
      mutable_sj_productinfo();

  // repeated .transMsg.SJ_RemarkInfo SJ_RemarkInfo = 40;
  inline int sj_remarkinfo_size() const;
  inline void clear_sj_remarkinfo();
  static const int kSJRemarkInfoFieldNumber = 40;
  inline const ::transMsg::SJ_RemarkInfo& sj_remarkinfo(int index) const;
  inline ::transMsg::SJ_RemarkInfo* mutable_sj_remarkinfo(int index);
  inline ::transMsg::SJ_RemarkInfo* add_sj_remarkinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_RemarkInfo >&
      sj_remarkinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_RemarkInfo >*
      mutable_sj_remarkinfo();

  // repeated .transMsg.SJ_ShapeInfo SJ_ShapeInfo = 41;
  inline int sj_shapeinfo_size() const;
  inline void clear_sj_shapeinfo();
  static const int kSJShapeInfoFieldNumber = 41;
  inline const ::transMsg::SJ_ShapeInfo& sj_shapeinfo(int index) const;
  inline ::transMsg::SJ_ShapeInfo* mutable_sj_shapeinfo(int index);
  inline ::transMsg::SJ_ShapeInfo* add_sj_shapeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_ShapeInfo >&
      sj_shapeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_ShapeInfo >*
      mutable_sj_shapeinfo();

  // repeated .transMsg.SJ_SkinInfo SJ_SkinInfo = 42;
  inline int sj_skininfo_size() const;
  inline void clear_sj_skininfo();
  static const int kSJSkinInfoFieldNumber = 42;
  inline const ::transMsg::SJ_SkinInfo& sj_skininfo(int index) const;
  inline ::transMsg::SJ_SkinInfo* mutable_sj_skininfo(int index);
  inline ::transMsg::SJ_SkinInfo* add_sj_skininfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_SkinInfo >&
      sj_skininfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_SkinInfo >*
      mutable_sj_skininfo();

  // repeated .transMsg.SJ_TableInfo SJ_TableInfo = 43;
  inline int sj_tableinfo_size() const;
  inline void clear_sj_tableinfo();
  static const int kSJTableInfoFieldNumber = 43;
  inline const ::transMsg::SJ_TableInfo& sj_tableinfo(int index) const;
  inline ::transMsg::SJ_TableInfo* mutable_sj_tableinfo(int index);
  inline ::transMsg::SJ_TableInfo* add_sj_tableinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TableInfo >&
      sj_tableinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TableInfo >*
      mutable_sj_tableinfo();

  // repeated .transMsg.SJ_TablePartInfo SJ_TablePartInfo = 44;
  inline int sj_tablepartinfo_size() const;
  inline void clear_sj_tablepartinfo();
  static const int kSJTablePartInfoFieldNumber = 44;
  inline const ::transMsg::SJ_TablePartInfo& sj_tablepartinfo(int index) const;
  inline ::transMsg::SJ_TablePartInfo* mutable_sj_tablepartinfo(int index);
  inline ::transMsg::SJ_TablePartInfo* add_sj_tablepartinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TablePartInfo >&
      sj_tablepartinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TablePartInfo >*
      mutable_sj_tablepartinfo();

  // repeated .transMsg.SJ_TableSideInfo SJ_TableSideInfo = 45;
  inline int sj_tablesideinfo_size() const;
  inline void clear_sj_tablesideinfo();
  static const int kSJTableSideInfoFieldNumber = 45;
  inline const ::transMsg::SJ_TableSideInfo& sj_tablesideinfo(int index) const;
  inline ::transMsg::SJ_TableSideInfo* mutable_sj_tablesideinfo(int index);
  inline ::transMsg::SJ_TableSideInfo* add_sj_tablesideinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TableSideInfo >&
      sj_tablesideinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TableSideInfo >*
      mutable_sj_tablesideinfo();

  // repeated .transMsg.SJ_WallDecorInfo SJ_WallDecorInfo = 46;
  inline int sj_walldecorinfo_size() const;
  inline void clear_sj_walldecorinfo();
  static const int kSJWallDecorInfoFieldNumber = 46;
  inline const ::transMsg::SJ_WallDecorInfo& sj_walldecorinfo(int index) const;
  inline ::transMsg::SJ_WallDecorInfo* mutable_sj_walldecorinfo(int index);
  inline ::transMsg::SJ_WallDecorInfo* add_sj_walldecorinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_WallDecorInfo >&
      sj_walldecorinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_WallDecorInfo >*
      mutable_sj_walldecorinfo();

  // repeated .transMsg.SJ_WallInfo SJ_WallInfo = 47;
  inline int sj_wallinfo_size() const;
  inline void clear_sj_wallinfo();
  static const int kSJWallInfoFieldNumber = 47;
  inline const ::transMsg::SJ_WallInfo& sj_wallinfo(int index) const;
  inline ::transMsg::SJ_WallInfo* mutable_sj_wallinfo(int index);
  inline ::transMsg::SJ_WallInfo* add_sj_wallinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_WallInfo >&
      sj_wallinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_WallInfo >*
      mutable_sj_wallinfo();

  // @@protoc_insertion_point(class_scope:transMsg.SJ_Table)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardGapInfo > sj_cabboardgapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardInfo > sj_cabboardinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardSealInfo > sj_cabboardsealinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardGapInfo > sj_cabdoorboardgapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardInfo > sj_cabdoorboardinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardSealInfo > sj_cabdoorboardsealinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorHWFInfo > sj_cabdoorhwfinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorHandleInfo > sj_cabdoorhandleinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorInfo > sj_cabdoorinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorRegionInfo > sj_cabdoorregioninfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorSlideInfo > sj_cabdoorslideinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorSystemInfo > sj_cabdoorsysteminfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFHWFInfo > sj_cabfnfhwfinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFHoleInfo > sj_cabfnfholeinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFInfo > sj_cabfnfinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFPartInfo > sj_cabfnfpartinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFPartSealInfo > sj_cabfnfpartsealinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabInfo > sj_cabinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardInfo > sj_decorboardinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardUnitInfo > sj_decorboardunitinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardUnitSealInfo > sj_decorboardunitsealinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorInfo > sj_decorinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorLineInfo > sj_decorlineinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DesignPlanInfo > sj_designplaninfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_FittingInfo > sj_fittinginfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_HWFInfo > sj_hwfinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_MarkInfo > sj_markinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_MatrixInfo > sj_matrixinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_OrderAddedInfo > sj_orderaddedinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_OrderDataInfo > sj_orderdatainfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PackInfo > sj_packinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PointInfo > sj_pointinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintElementInfo > sj_printelementinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintGroupInfo > sj_printgroupinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintInfo > sj_printinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableInfo > sj_printtableinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableRowColInfo > sj_printtablerowcolinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableRowInfo > sj_printtablerowinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_ProductInfo > sj_productinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_RemarkInfo > sj_remarkinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_ShapeInfo > sj_shapeinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_SkinInfo > sj_skininfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TableInfo > sj_tableinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TablePartInfo > sj_tablepartinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TableSideInfo > sj_tablesideinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_WallDecorInfo > sj_walldecorinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_WallInfo > sj_wallinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(47 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dSJ_2eproto();
  friend void protobuf_AssignDesc_msg_2dSJ_2eproto();
  friend void protobuf_ShutdownFile_msg_2dSJ_2eproto();

  void InitAsDefaultInstance();
  static SJ_Table* default_instance_;
};
// ===================================================================


// ===================================================================

// SJ_CabBoardGapInfo

// required int32 CabBoardGapID = 1;
inline bool SJ_CabBoardGapInfo::has_cabboardgapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_cabboardgapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabBoardGapInfo::clear_has_cabboardgapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabBoardGapInfo::clear_cabboardgapid() {
  cabboardgapid_ = 0;
  clear_has_cabboardgapid();
}
inline ::google::protobuf::int32 SJ_CabBoardGapInfo::cabboardgapid() const {
  return cabboardgapid_;
}
inline void SJ_CabBoardGapInfo::set_cabboardgapid(::google::protobuf::int32 value) {
  set_has_cabboardgapid();
  cabboardgapid_ = value;
}

// required int32 CabBoardID = 2;
inline bool SJ_CabBoardGapInfo::has_cabboardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_cabboardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabBoardGapInfo::clear_has_cabboardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabBoardGapInfo::clear_cabboardid() {
  cabboardid_ = 0;
  clear_has_cabboardid();
}
inline ::google::protobuf::int32 SJ_CabBoardGapInfo::cabboardid() const {
  return cabboardid_;
}
inline void SJ_CabBoardGapInfo::set_cabboardid(::google::protobuf::int32 value) {
  set_has_cabboardid();
  cabboardid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_CabBoardGapInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabBoardGapInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabBoardGapInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabBoardGapInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabBoardGapInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabBoardGapInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabBoardGapInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabBoardGapInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabBoardGapInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabBoardGapInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabBoardGapInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabBoardGapInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabBoardGapInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabBoardGapInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabBoardGapInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 FactoryID = 6;
inline bool SJ_CabBoardGapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabBoardGapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabBoardGapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabBoardGapInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabBoardGapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 7;
inline bool SJ_CabBoardGapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabBoardGapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabBoardGapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabBoardGapInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabBoardGapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 CabStructBoardID = 8;
inline bool SJ_CabBoardGapInfo::has_cabstructboardid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_cabstructboardid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabBoardGapInfo::clear_has_cabstructboardid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabBoardGapInfo::clear_cabstructboardid() {
  cabstructboardid_ = 0;
  clear_has_cabstructboardid();
}
inline ::google::protobuf::int32 SJ_CabBoardGapInfo::cabstructboardid() const {
  return cabstructboardid_;
}
inline void SJ_CabBoardGapInfo::set_cabstructboardid(::google::protobuf::int32 value) {
  set_has_cabstructboardid();
  cabstructboardid_ = value;
}

// required int32 CabStructBoardGapID = 9;
inline bool SJ_CabBoardGapInfo::has_cabstructboardgapid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_cabstructboardgapid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabBoardGapInfo::clear_has_cabstructboardgapid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabBoardGapInfo::clear_cabstructboardgapid() {
  cabstructboardgapid_ = 0;
  clear_has_cabstructboardgapid();
}
inline ::google::protobuf::int32 SJ_CabBoardGapInfo::cabstructboardgapid() const {
  return cabstructboardgapid_;
}
inline void SJ_CabBoardGapInfo::set_cabstructboardgapid(::google::protobuf::int32 value) {
  set_has_cabstructboardgapid();
  cabstructboardgapid_ = value;
}

// required int32 GapPos = 10;
inline bool SJ_CabBoardGapInfo::has_gappos() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_gappos() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabBoardGapInfo::clear_has_gappos() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabBoardGapInfo::clear_gappos() {
  gappos_ = 0;
  clear_has_gappos();
}
inline ::google::protobuf::int32 SJ_CabBoardGapInfo::gappos() const {
  return gappos_;
}
inline void SJ_CabBoardGapInfo::set_gappos(::google::protobuf::int32 value) {
  set_has_gappos();
  gappos_ = value;
}

// required int32 GapIndex = 11;
inline bool SJ_CabBoardGapInfo::has_gapindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_gapindex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabBoardGapInfo::clear_has_gapindex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabBoardGapInfo::clear_gapindex() {
  gapindex_ = 0;
  clear_has_gapindex();
}
inline ::google::protobuf::int32 SJ_CabBoardGapInfo::gapindex() const {
  return gapindex_;
}
inline void SJ_CabBoardGapInfo::set_gapindex(::google::protobuf::int32 value) {
  set_has_gapindex();
  gapindex_ = value;
}

// required int32 GapType = 12;
inline bool SJ_CabBoardGapInfo::has_gaptype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_gaptype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabBoardGapInfo::clear_has_gaptype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabBoardGapInfo::clear_gaptype() {
  gaptype_ = 0;
  clear_has_gaptype();
}
inline ::google::protobuf::int32 SJ_CabBoardGapInfo::gaptype() const {
  return gaptype_;
}
inline void SJ_CabBoardGapInfo::set_gaptype(::google::protobuf::int32 value) {
  set_has_gaptype();
  gaptype_ = value;
}

// required int32 GapShape = 13;
inline bool SJ_CabBoardGapInfo::has_gapshape() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_gapshape() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabBoardGapInfo::clear_has_gapshape() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabBoardGapInfo::clear_gapshape() {
  gapshape_ = 0;
  clear_has_gapshape();
}
inline ::google::protobuf::int32 SJ_CabBoardGapInfo::gapshape() const {
  return gapshape_;
}
inline void SJ_CabBoardGapInfo::set_gapshape(::google::protobuf::int32 value) {
  set_has_gapshape();
  gapshape_ = value;
}

// required double XLen = 14;
inline bool SJ_CabBoardGapInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabBoardGapInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabBoardGapInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_CabBoardGapInfo::xlen() const {
  return xlen_;
}
inline void SJ_CabBoardGapInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 15;
inline bool SJ_CabBoardGapInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabBoardGapInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabBoardGapInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_CabBoardGapInfo::ylen() const {
  return ylen_;
}
inline void SJ_CabBoardGapInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double XOffsetLen = 16;
inline bool SJ_CabBoardGapInfo::has_xoffsetlen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_xoffsetlen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabBoardGapInfo::clear_has_xoffsetlen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabBoardGapInfo::clear_xoffsetlen() {
  xoffsetlen_ = 0;
  clear_has_xoffsetlen();
}
inline double SJ_CabBoardGapInfo::xoffsetlen() const {
  return xoffsetlen_;
}
inline void SJ_CabBoardGapInfo::set_xoffsetlen(double value) {
  set_has_xoffsetlen();
  xoffsetlen_ = value;
}

// required double YOffsetLen = 17;
inline bool SJ_CabBoardGapInfo::has_yoffsetlen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_yoffsetlen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_CabBoardGapInfo::clear_has_yoffsetlen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_CabBoardGapInfo::clear_yoffsetlen() {
  yoffsetlen_ = 0;
  clear_has_yoffsetlen();
}
inline double SJ_CabBoardGapInfo::yoffsetlen() const {
  return yoffsetlen_;
}
inline void SJ_CabBoardGapInfo::set_yoffsetlen(double value) {
  set_has_yoffsetlen();
  yoffsetlen_ = value;
}

// required double ZOffsetLen = 18;
inline bool SJ_CabBoardGapInfo::has_zoffsetlen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_zoffsetlen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_CabBoardGapInfo::clear_has_zoffsetlen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_CabBoardGapInfo::clear_zoffsetlen() {
  zoffsetlen_ = 0;
  clear_has_zoffsetlen();
}
inline double SJ_CabBoardGapInfo::zoffsetlen() const {
  return zoffsetlen_;
}
inline void SJ_CabBoardGapInfo::set_zoffsetlen(double value) {
  set_has_zoffsetlen();
  zoffsetlen_ = value;
}

// required int32 CreatorID = 19;
inline bool SJ_CabBoardGapInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_CabBoardGapInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_CabBoardGapInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabBoardGapInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabBoardGapInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 20;
inline bool SJ_CabBoardGapInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_CabBoardGapInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_CabBoardGapInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabBoardGapInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabBoardGapInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 21;
inline bool SJ_CabBoardGapInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_CabBoardGapInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_CabBoardGapInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabBoardGapInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabBoardGapInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 22;
inline bool SJ_CabBoardGapInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_CabBoardGapInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_CabBoardGapInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_CabBoardGapInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabBoardGapInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabBoardGapInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_CabBoardInfo

// required int32 CabBoardID = 1;
inline bool SJ_CabBoardInfo::has_cabboardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabBoardInfo::set_has_cabboardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabBoardInfo::clear_has_cabboardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabBoardInfo::clear_cabboardid() {
  cabboardid_ = 0;
  clear_has_cabboardid();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::cabboardid() const {
  return cabboardid_;
}
inline void SJ_CabBoardInfo::set_cabboardid(::google::protobuf::int32 value) {
  set_has_cabboardid();
  cabboardid_ = value;
}

// required int32 CabID = 2;
inline bool SJ_CabBoardInfo::has_cabid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabBoardInfo::set_has_cabid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabBoardInfo::clear_has_cabid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabBoardInfo::clear_cabid() {
  cabid_ = 0;
  clear_has_cabid();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::cabid() const {
  return cabid_;
}
inline void SJ_CabBoardInfo::set_cabid(::google::protobuf::int32 value) {
  set_has_cabid();
  cabid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_CabBoardInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabBoardInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabBoardInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabBoardInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabBoardInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabBoardInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabBoardInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabBoardInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabBoardInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabBoardInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabBoardInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabBoardInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabBoardInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabBoardInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabBoardInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabBoardInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 FactoryID = 6;
inline bool SJ_CabBoardInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabBoardInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabBoardInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabBoardInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabBoardInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 7;
inline bool SJ_CabBoardInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabBoardInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabBoardInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabBoardInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabBoardInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabBoardInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 CabinetSizeID = 8;
inline bool SJ_CabBoardInfo::has_cabinetsizeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabBoardInfo::set_has_cabinetsizeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabBoardInfo::clear_has_cabinetsizeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabBoardInfo::clear_cabinetsizeid() {
  cabinetsizeid_ = 0;
  clear_has_cabinetsizeid();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::cabinetsizeid() const {
  return cabinetsizeid_;
}
inline void SJ_CabBoardInfo::set_cabinetsizeid(::google::protobuf::int32 value) {
  set_has_cabinetsizeid();
  cabinetsizeid_ = value;
}

// required int32 CabStructBoardID = 9;
inline bool SJ_CabBoardInfo::has_cabstructboardid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabBoardInfo::set_has_cabstructboardid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabBoardInfo::clear_has_cabstructboardid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabBoardInfo::clear_cabstructboardid() {
  cabstructboardid_ = 0;
  clear_has_cabstructboardid();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::cabstructboardid() const {
  return cabstructboardid_;
}
inline void SJ_CabBoardInfo::set_cabstructboardid(::google::protobuf::int32 value) {
  set_has_cabstructboardid();
  cabstructboardid_ = value;
}

// required int32 CabinetSizeBoardID = 10;
inline bool SJ_CabBoardInfo::has_cabinetsizeboardid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabBoardInfo::set_has_cabinetsizeboardid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabBoardInfo::clear_has_cabinetsizeboardid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabBoardInfo::clear_cabinetsizeboardid() {
  cabinetsizeboardid_ = 0;
  clear_has_cabinetsizeboardid();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::cabinetsizeboardid() const {
  return cabinetsizeboardid_;
}
inline void SJ_CabBoardInfo::set_cabinetsizeboardid(::google::protobuf::int32 value) {
  set_has_cabinetsizeboardid();
  cabinetsizeboardid_ = value;
}

// required int32 CabMatPlanID = 11;
inline bool SJ_CabBoardInfo::has_cabmatplanid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabBoardInfo::set_has_cabmatplanid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabBoardInfo::clear_has_cabmatplanid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabBoardInfo::clear_cabmatplanid() {
  cabmatplanid_ = 0;
  clear_has_cabmatplanid();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::cabmatplanid() const {
  return cabmatplanid_;
}
inline void SJ_CabBoardInfo::set_cabmatplanid(::google::protobuf::int32 value) {
  set_has_cabmatplanid();
  cabmatplanid_ = value;
}

// required int32 MatID = 12;
inline bool SJ_CabBoardInfo::has_matid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabBoardInfo::set_has_matid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabBoardInfo::clear_has_matid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabBoardInfo::clear_matid() {
  matid_ = 0;
  clear_has_matid();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::matid() const {
  return matid_;
}
inline void SJ_CabBoardInfo::set_matid(::google::protobuf::int32 value) {
  set_has_matid();
  matid_ = value;
}

// required int32 MatGType = 13;
inline bool SJ_CabBoardInfo::has_matgtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_matgtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabBoardInfo::clear_has_matgtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabBoardInfo::clear_matgtype() {
  matgtype_ = 0;
  clear_has_matgtype();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::matgtype() const {
  return matgtype_;
}
inline void SJ_CabBoardInfo::set_matgtype(::google::protobuf::int32 value) {
  set_has_matgtype();
  matgtype_ = value;
}

// required int32 SkinDirection = 14;
inline bool SJ_CabBoardInfo::has_skindirection() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_skindirection() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabBoardInfo::clear_has_skindirection() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabBoardInfo::clear_skindirection() {
  skindirection_ = 0;
  clear_has_skindirection();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::skindirection() const {
  return skindirection_;
}
inline void SJ_CabBoardInfo::set_skindirection(::google::protobuf::int32 value) {
  set_has_skindirection();
  skindirection_ = value;
}

// required int32 SealRuleID = 15;
inline bool SJ_CabBoardInfo::has_sealruleid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_sealruleid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabBoardInfo::clear_has_sealruleid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabBoardInfo::clear_sealruleid() {
  sealruleid_ = 0;
  clear_has_sealruleid();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::sealruleid() const {
  return sealruleid_;
}
inline void SJ_CabBoardInfo::set_sealruleid(::google::protobuf::int32 value) {
  set_has_sealruleid();
  sealruleid_ = value;
}

// required double XLen = 16;
inline bool SJ_CabBoardInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabBoardInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabBoardInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_CabBoardInfo::xlen() const {
  return xlen_;
}
inline void SJ_CabBoardInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 17;
inline bool SJ_CabBoardInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_CabBoardInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_CabBoardInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_CabBoardInfo::ylen() const {
  return ylen_;
}
inline void SJ_CabBoardInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 18;
inline bool SJ_CabBoardInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_CabBoardInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_CabBoardInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_CabBoardInfo::zlen() const {
  return zlen_;
}
inline void SJ_CabBoardInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double XOffsetLen = 19;
inline bool SJ_CabBoardInfo::has_xoffsetlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_xoffsetlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_CabBoardInfo::clear_has_xoffsetlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_CabBoardInfo::clear_xoffsetlen() {
  xoffsetlen_ = 0;
  clear_has_xoffsetlen();
}
inline double SJ_CabBoardInfo::xoffsetlen() const {
  return xoffsetlen_;
}
inline void SJ_CabBoardInfo::set_xoffsetlen(double value) {
  set_has_xoffsetlen();
  xoffsetlen_ = value;
}

// required double YOffsetLen = 20;
inline bool SJ_CabBoardInfo::has_yoffsetlen() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_yoffsetlen() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_CabBoardInfo::clear_has_yoffsetlen() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_CabBoardInfo::clear_yoffsetlen() {
  yoffsetlen_ = 0;
  clear_has_yoffsetlen();
}
inline double SJ_CabBoardInfo::yoffsetlen() const {
  return yoffsetlen_;
}
inline void SJ_CabBoardInfo::set_yoffsetlen(double value) {
  set_has_yoffsetlen();
  yoffsetlen_ = value;
}

// required double ZOffsetLen = 21;
inline bool SJ_CabBoardInfo::has_zoffsetlen() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_zoffsetlen() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_CabBoardInfo::clear_has_zoffsetlen() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_CabBoardInfo::clear_zoffsetlen() {
  zoffsetlen_ = 0;
  clear_has_zoffsetlen();
}
inline double SJ_CabBoardInfo::zoffsetlen() const {
  return zoffsetlen_;
}
inline void SJ_CabBoardInfo::set_zoffsetlen(double value) {
  set_has_zoffsetlen();
  zoffsetlen_ = value;
}

// required int32 XDock = 22;
inline bool SJ_CabBoardInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_CabBoardInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_CabBoardInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::xdock() const {
  return xdock_;
}
inline void SJ_CabBoardInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 23;
inline bool SJ_CabBoardInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_CabBoardInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_CabBoardInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::ydock() const {
  return ydock_;
}
inline void SJ_CabBoardInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 24;
inline bool SJ_CabBoardInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_CabBoardInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_CabBoardInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::zdock() const {
  return zdock_;
}
inline void SJ_CabBoardInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required bool IsChangedOffset = 25;
inline bool SJ_CabBoardInfo::has_ischangedoffset() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_ischangedoffset() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_CabBoardInfo::clear_has_ischangedoffset() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_CabBoardInfo::clear_ischangedoffset() {
  ischangedoffset_ = false;
  clear_has_ischangedoffset();
}
inline bool SJ_CabBoardInfo::ischangedoffset() const {
  return ischangedoffset_;
}
inline void SJ_CabBoardInfo::set_ischangedoffset(bool value) {
  set_has_ischangedoffset();
  ischangedoffset_ = value;
}

// required bool IsFakeDel = 26;
inline bool SJ_CabBoardInfo::has_isfakedel() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_isfakedel() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_CabBoardInfo::clear_has_isfakedel() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_CabBoardInfo::clear_isfakedel() {
  isfakedel_ = false;
  clear_has_isfakedel();
}
inline bool SJ_CabBoardInfo::isfakedel() const {
  return isfakedel_;
}
inline void SJ_CabBoardInfo::set_isfakedel(bool value) {
  set_has_isfakedel();
  isfakedel_ = value;
}

// required int32 CreatorID = 27;
inline bool SJ_CabBoardInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_CabBoardInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_CabBoardInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabBoardInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 28;
inline bool SJ_CabBoardInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_CabBoardInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_CabBoardInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabBoardInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabBoardInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 29;
inline bool SJ_CabBoardInfo::has_createtime() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_createtime() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_CabBoardInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_CabBoardInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabBoardInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabBoardInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 30;
inline bool SJ_CabBoardInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SJ_CabBoardInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SJ_CabBoardInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabBoardInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabBoardInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string CabBoardName = 31;
inline bool SJ_CabBoardInfo::has_cabboardname() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SJ_CabBoardInfo::set_has_cabboardname() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SJ_CabBoardInfo::clear_has_cabboardname() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SJ_CabBoardInfo::clear_cabboardname() {
  if (cabboardname_ != &::google::protobuf::internal::kEmptyString) {
    cabboardname_->clear();
  }
  clear_has_cabboardname();
}
inline const ::std::string& SJ_CabBoardInfo::cabboardname() const {
  return *cabboardname_;
}
inline void SJ_CabBoardInfo::set_cabboardname(const ::std::string& value) {
  set_has_cabboardname();
  if (cabboardname_ == &::google::protobuf::internal::kEmptyString) {
    cabboardname_ = new ::std::string;
  }
  cabboardname_->assign(value);
}
inline void SJ_CabBoardInfo::set_cabboardname(const char* value) {
  set_has_cabboardname();
  if (cabboardname_ == &::google::protobuf::internal::kEmptyString) {
    cabboardname_ = new ::std::string;
  }
  cabboardname_->assign(value);
}
inline void SJ_CabBoardInfo::set_cabboardname(const char* value, size_t size) {
  set_has_cabboardname();
  if (cabboardname_ == &::google::protobuf::internal::kEmptyString) {
    cabboardname_ = new ::std::string;
  }
  cabboardname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_CabBoardInfo::mutable_cabboardname() {
  set_has_cabboardname();
  if (cabboardname_ == &::google::protobuf::internal::kEmptyString) {
    cabboardname_ = new ::std::string;
  }
  return cabboardname_;
}
inline ::std::string* SJ_CabBoardInfo::release_cabboardname() {
  clear_has_cabboardname();
  if (cabboardname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabboardname_;
    cabboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_CabBoardInfo::set_allocated_cabboardname(::std::string* cabboardname) {
  if (cabboardname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabboardname_;
  }
  if (cabboardname) {
    set_has_cabboardname();
    cabboardname_ = cabboardname;
  } else {
    clear_has_cabboardname();
    cabboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SJ_CabBoardSealInfo

// required int32 CabBoardSealID = 1;
inline bool SJ_CabBoardSealInfo::has_cabboardsealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabBoardSealInfo::set_has_cabboardsealid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabBoardSealInfo::clear_has_cabboardsealid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabBoardSealInfo::clear_cabboardsealid() {
  cabboardsealid_ = 0;
  clear_has_cabboardsealid();
}
inline ::google::protobuf::int32 SJ_CabBoardSealInfo::cabboardsealid() const {
  return cabboardsealid_;
}
inline void SJ_CabBoardSealInfo::set_cabboardsealid(::google::protobuf::int32 value) {
  set_has_cabboardsealid();
  cabboardsealid_ = value;
}

// required int32 CabBoardID = 2;
inline bool SJ_CabBoardSealInfo::has_cabboardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabBoardSealInfo::set_has_cabboardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabBoardSealInfo::clear_has_cabboardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabBoardSealInfo::clear_cabboardid() {
  cabboardid_ = 0;
  clear_has_cabboardid();
}
inline ::google::protobuf::int32 SJ_CabBoardSealInfo::cabboardid() const {
  return cabboardid_;
}
inline void SJ_CabBoardSealInfo::set_cabboardid(::google::protobuf::int32 value) {
  set_has_cabboardid();
  cabboardid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_CabBoardSealInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabBoardSealInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabBoardSealInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabBoardSealInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabBoardSealInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabBoardSealInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabBoardSealInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabBoardSealInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabBoardSealInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabBoardSealInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabBoardSealInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabBoardSealInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabBoardSealInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabBoardSealInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabBoardSealInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabBoardSealInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabBoardSealInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabBoardSealInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 CabStructBoardSealID = 6;
inline bool SJ_CabBoardSealInfo::has_cabstructboardsealid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabBoardSealInfo::set_has_cabstructboardsealid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabBoardSealInfo::clear_has_cabstructboardsealid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabBoardSealInfo::clear_cabstructboardsealid() {
  cabstructboardsealid_ = 0;
  clear_has_cabstructboardsealid();
}
inline ::google::protobuf::int32 SJ_CabBoardSealInfo::cabstructboardsealid() const {
  return cabstructboardsealid_;
}
inline void SJ_CabBoardSealInfo::set_cabstructboardsealid(::google::protobuf::int32 value) {
  set_has_cabstructboardsealid();
  cabstructboardsealid_ = value;
}

// required int32 CabStructBoardID = 7;
inline bool SJ_CabBoardSealInfo::has_cabstructboardid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabBoardSealInfo::set_has_cabstructboardid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabBoardSealInfo::clear_has_cabstructboardid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabBoardSealInfo::clear_cabstructboardid() {
  cabstructboardid_ = 0;
  clear_has_cabstructboardid();
}
inline ::google::protobuf::int32 SJ_CabBoardSealInfo::cabstructboardid() const {
  return cabstructboardid_;
}
inline void SJ_CabBoardSealInfo::set_cabstructboardid(::google::protobuf::int32 value) {
  set_has_cabstructboardid();
  cabstructboardid_ = value;
}

// required int32 FactoryID = 8;
inline bool SJ_CabBoardSealInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabBoardSealInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabBoardSealInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabBoardSealInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabBoardSealInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabBoardSealInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 9;
inline bool SJ_CabBoardSealInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabBoardSealInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabBoardSealInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabBoardSealInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabBoardSealInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabBoardSealInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 SealType = 10;
inline bool SJ_CabBoardSealInfo::has_sealtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabBoardSealInfo::set_has_sealtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabBoardSealInfo::clear_has_sealtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabBoardSealInfo::clear_sealtype() {
  sealtype_ = 0;
  clear_has_sealtype();
}
inline ::google::protobuf::int32 SJ_CabBoardSealInfo::sealtype() const {
  return sealtype_;
}
inline void SJ_CabBoardSealInfo::set_sealtype(::google::protobuf::int32 value) {
  set_has_sealtype();
  sealtype_ = value;
}

// required int32 SealIndex = 11;
inline bool SJ_CabBoardSealInfo::has_sealindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabBoardSealInfo::set_has_sealindex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabBoardSealInfo::clear_has_sealindex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabBoardSealInfo::clear_sealindex() {
  sealindex_ = 0;
  clear_has_sealindex();
}
inline ::google::protobuf::int32 SJ_CabBoardSealInfo::sealindex() const {
  return sealindex_;
}
inline void SJ_CabBoardSealInfo::set_sealindex(::google::protobuf::int32 value) {
  set_has_sealindex();
  sealindex_ = value;
}

// required int32 MaterialID = 12;
inline bool SJ_CabBoardSealInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabBoardSealInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabBoardSealInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabBoardSealInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 SJ_CabBoardSealInfo::materialid() const {
  return materialid_;
}
inline void SJ_CabBoardSealInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required double PreMill = 13;
inline bool SJ_CabBoardSealInfo::has_premill() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabBoardSealInfo::set_has_premill() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabBoardSealInfo::clear_has_premill() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabBoardSealInfo::clear_premill() {
  premill_ = 0;
  clear_has_premill();
}
inline double SJ_CabBoardSealInfo::premill() const {
  return premill_;
}
inline void SJ_CabBoardSealInfo::set_premill(double value) {
  set_has_premill();
  premill_ = value;
}

// -------------------------------------------------------------------

// SJ_CabDoorBoardGapInfo

// required int32 CabDoorBoardGapID = 1;
inline bool SJ_CabDoorBoardGapInfo::has_cabdoorboardgapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_cabdoorboardgapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_cabdoorboardgapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabDoorBoardGapInfo::clear_cabdoorboardgapid() {
  cabdoorboardgapid_ = 0;
  clear_has_cabdoorboardgapid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardGapInfo::cabdoorboardgapid() const {
  return cabdoorboardgapid_;
}
inline void SJ_CabDoorBoardGapInfo::set_cabdoorboardgapid(::google::protobuf::int32 value) {
  set_has_cabdoorboardgapid();
  cabdoorboardgapid_ = value;
}

// required int32 CabDoorBoardID = 2;
inline bool SJ_CabDoorBoardGapInfo::has_cabdoorboardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_cabdoorboardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_cabdoorboardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabDoorBoardGapInfo::clear_cabdoorboardid() {
  cabdoorboardid_ = 0;
  clear_has_cabdoorboardid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardGapInfo::cabdoorboardid() const {
  return cabdoorboardid_;
}
inline void SJ_CabDoorBoardGapInfo::set_cabdoorboardid(::google::protobuf::int32 value) {
  set_has_cabdoorboardid();
  cabdoorboardid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_CabDoorBoardGapInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabDoorBoardGapInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardGapInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabDoorBoardGapInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabDoorBoardGapInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabDoorBoardGapInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabDoorBoardGapInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabDoorBoardGapInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabDoorBoardGapInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabDoorBoardGapInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardGapInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabDoorBoardGapInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 DoorBoardGapID = 6;
inline bool SJ_CabDoorBoardGapInfo::has_doorboardgapid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_doorboardgapid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_doorboardgapid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabDoorBoardGapInfo::clear_doorboardgapid() {
  doorboardgapid_ = 0;
  clear_has_doorboardgapid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardGapInfo::doorboardgapid() const {
  return doorboardgapid_;
}
inline void SJ_CabDoorBoardGapInfo::set_doorboardgapid(::google::protobuf::int32 value) {
  set_has_doorboardgapid();
  doorboardgapid_ = value;
}

// required int32 DoorBoardID = 7;
inline bool SJ_CabDoorBoardGapInfo::has_doorboardid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_doorboardid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_doorboardid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabDoorBoardGapInfo::clear_doorboardid() {
  doorboardid_ = 0;
  clear_has_doorboardid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardGapInfo::doorboardid() const {
  return doorboardid_;
}
inline void SJ_CabDoorBoardGapInfo::set_doorboardid(::google::protobuf::int32 value) {
  set_has_doorboardid();
  doorboardid_ = value;
}

// required int32 FactoryID = 8;
inline bool SJ_CabDoorBoardGapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabDoorBoardGapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardGapInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabDoorBoardGapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 9;
inline bool SJ_CabDoorBoardGapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabDoorBoardGapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabDoorBoardGapInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabDoorBoardGapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 GapPos = 10;
inline bool SJ_CabDoorBoardGapInfo::has_gappos() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_gappos() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_gappos() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabDoorBoardGapInfo::clear_gappos() {
  gappos_ = 0;
  clear_has_gappos();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardGapInfo::gappos() const {
  return gappos_;
}
inline void SJ_CabDoorBoardGapInfo::set_gappos(::google::protobuf::int32 value) {
  set_has_gappos();
  gappos_ = value;
}

// required int32 GapIndex = 11;
inline bool SJ_CabDoorBoardGapInfo::has_gapindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_gapindex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_gapindex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabDoorBoardGapInfo::clear_gapindex() {
  gapindex_ = 0;
  clear_has_gapindex();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardGapInfo::gapindex() const {
  return gapindex_;
}
inline void SJ_CabDoorBoardGapInfo::set_gapindex(::google::protobuf::int32 value) {
  set_has_gapindex();
  gapindex_ = value;
}

// required int32 GapType = 12;
inline bool SJ_CabDoorBoardGapInfo::has_gaptype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_gaptype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_gaptype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabDoorBoardGapInfo::clear_gaptype() {
  gaptype_ = 0;
  clear_has_gaptype();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardGapInfo::gaptype() const {
  return gaptype_;
}
inline void SJ_CabDoorBoardGapInfo::set_gaptype(::google::protobuf::int32 value) {
  set_has_gaptype();
  gaptype_ = value;
}

// required int32 GapShape = 13;
inline bool SJ_CabDoorBoardGapInfo::has_gapshape() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_gapshape() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_gapshape() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_gapshape() {
  gapshape_ = 0;
  clear_has_gapshape();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardGapInfo::gapshape() const {
  return gapshape_;
}
inline void SJ_CabDoorBoardGapInfo::set_gapshape(::google::protobuf::int32 value) {
  set_has_gapshape();
  gapshape_ = value;
}

// required double XLen = 14;
inline bool SJ_CabDoorBoardGapInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_CabDoorBoardGapInfo::xlen() const {
  return xlen_;
}
inline void SJ_CabDoorBoardGapInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 15;
inline bool SJ_CabDoorBoardGapInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_CabDoorBoardGapInfo::ylen() const {
  return ylen_;
}
inline void SJ_CabDoorBoardGapInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double XOffsetLen = 16;
inline bool SJ_CabDoorBoardGapInfo::has_xoffsetlen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_xoffsetlen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_xoffsetlen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_xoffsetlen() {
  xoffsetlen_ = 0;
  clear_has_xoffsetlen();
}
inline double SJ_CabDoorBoardGapInfo::xoffsetlen() const {
  return xoffsetlen_;
}
inline void SJ_CabDoorBoardGapInfo::set_xoffsetlen(double value) {
  set_has_xoffsetlen();
  xoffsetlen_ = value;
}

// required double YOffsetLen = 17;
inline bool SJ_CabDoorBoardGapInfo::has_yoffsetlen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_yoffsetlen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_yoffsetlen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_yoffsetlen() {
  yoffsetlen_ = 0;
  clear_has_yoffsetlen();
}
inline double SJ_CabDoorBoardGapInfo::yoffsetlen() const {
  return yoffsetlen_;
}
inline void SJ_CabDoorBoardGapInfo::set_yoffsetlen(double value) {
  set_has_yoffsetlen();
  yoffsetlen_ = value;
}

// required double ZOffsetLen = 18;
inline bool SJ_CabDoorBoardGapInfo::has_zoffsetlen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_zoffsetlen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_zoffsetlen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_zoffsetlen() {
  zoffsetlen_ = 0;
  clear_has_zoffsetlen();
}
inline double SJ_CabDoorBoardGapInfo::zoffsetlen() const {
  return zoffsetlen_;
}
inline void SJ_CabDoorBoardGapInfo::set_zoffsetlen(double value) {
  set_has_zoffsetlen();
  zoffsetlen_ = value;
}

// required int32 CreatorID = 19;
inline bool SJ_CabDoorBoardGapInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardGapInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabDoorBoardGapInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 20;
inline bool SJ_CabDoorBoardGapInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardGapInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabDoorBoardGapInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 21;
inline bool SJ_CabDoorBoardGapInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabDoorBoardGapInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabDoorBoardGapInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 22;
inline bool SJ_CabDoorBoardGapInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_CabDoorBoardGapInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_CabDoorBoardGapInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabDoorBoardGapInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabDoorBoardGapInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_CabDoorBoardInfo

// required int32 CabDoorBoardID = 1;
inline bool SJ_CabDoorBoardInfo::has_cabdoorboardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_cabdoorboardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabDoorBoardInfo::clear_has_cabdoorboardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabDoorBoardInfo::clear_cabdoorboardid() {
  cabdoorboardid_ = 0;
  clear_has_cabdoorboardid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::cabdoorboardid() const {
  return cabdoorboardid_;
}
inline void SJ_CabDoorBoardInfo::set_cabdoorboardid(::google::protobuf::int32 value) {
  set_has_cabdoorboardid();
  cabdoorboardid_ = value;
}

// required int32 CabDoorID = 2;
inline bool SJ_CabDoorBoardInfo::has_cabdoorid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_cabdoorid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabDoorBoardInfo::clear_has_cabdoorid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabDoorBoardInfo::clear_cabdoorid() {
  cabdoorid_ = 0;
  clear_has_cabdoorid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::cabdoorid() const {
  return cabdoorid_;
}
inline void SJ_CabDoorBoardInfo::set_cabdoorid(::google::protobuf::int32 value) {
  set_has_cabdoorid();
  cabdoorid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_CabDoorBoardInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabDoorBoardInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabDoorBoardInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabDoorBoardInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabDoorBoardInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabDoorBoardInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabDoorBoardInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabDoorBoardInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabDoorBoardInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabDoorBoardInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabDoorBoardInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabDoorBoardInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabDoorBoardInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 DoorBoardID = 6;
inline bool SJ_CabDoorBoardInfo::has_doorboardid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_doorboardid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabDoorBoardInfo::clear_has_doorboardid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabDoorBoardInfo::clear_doorboardid() {
  doorboardid_ = 0;
  clear_has_doorboardid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::doorboardid() const {
  return doorboardid_;
}
inline void SJ_CabDoorBoardInfo::set_doorboardid(::google::protobuf::int32 value) {
  set_has_doorboardid();
  doorboardid_ = value;
}

// required int32 DoorID = 7;
inline bool SJ_CabDoorBoardInfo::has_doorid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_doorid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabDoorBoardInfo::clear_has_doorid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabDoorBoardInfo::clear_doorid() {
  doorid_ = 0;
  clear_has_doorid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::doorid() const {
  return doorid_;
}
inline void SJ_CabDoorBoardInfo::set_doorid(::google::protobuf::int32 value) {
  set_has_doorid();
  doorid_ = value;
}

// required int32 DoorBoardIndex = 8;
inline bool SJ_CabDoorBoardInfo::has_doorboardindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_doorboardindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabDoorBoardInfo::clear_has_doorboardindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabDoorBoardInfo::clear_doorboardindex() {
  doorboardindex_ = 0;
  clear_has_doorboardindex();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::doorboardindex() const {
  return doorboardindex_;
}
inline void SJ_CabDoorBoardInfo::set_doorboardindex(::google::protobuf::int32 value) {
  set_has_doorboardindex();
  doorboardindex_ = value;
}

// required int32 FactoryID = 9;
inline bool SJ_CabDoorBoardInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabDoorBoardInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabDoorBoardInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabDoorBoardInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 10;
inline bool SJ_CabDoorBoardInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabDoorBoardInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabDoorBoardInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabDoorBoardInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabDoorBoardInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 DoorMatPlanID = 11;
inline bool SJ_CabDoorBoardInfo::has_doormatplanid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_doormatplanid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabDoorBoardInfo::clear_has_doormatplanid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabDoorBoardInfo::clear_doormatplanid() {
  doormatplanid_ = 0;
  clear_has_doormatplanid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::doormatplanid() const {
  return doormatplanid_;
}
inline void SJ_CabDoorBoardInfo::set_doormatplanid(::google::protobuf::int32 value) {
  set_has_doormatplanid();
  doormatplanid_ = value;
}

// required int32 MatID = 12;
inline bool SJ_CabDoorBoardInfo::has_matid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_matid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabDoorBoardInfo::clear_has_matid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabDoorBoardInfo::clear_matid() {
  matid_ = 0;
  clear_has_matid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::matid() const {
  return matid_;
}
inline void SJ_CabDoorBoardInfo::set_matid(::google::protobuf::int32 value) {
  set_has_matid();
  matid_ = value;
}

// required int32 MatGType = 13;
inline bool SJ_CabDoorBoardInfo::has_matgtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_matgtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_matgtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabDoorBoardInfo::clear_matgtype() {
  matgtype_ = 0;
  clear_has_matgtype();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::matgtype() const {
  return matgtype_;
}
inline void SJ_CabDoorBoardInfo::set_matgtype(::google::protobuf::int32 value) {
  set_has_matgtype();
  matgtype_ = value;
}

// required int32 SkinDirection = 14;
inline bool SJ_CabDoorBoardInfo::has_skindirection() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_skindirection() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_skindirection() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabDoorBoardInfo::clear_skindirection() {
  skindirection_ = 0;
  clear_has_skindirection();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::skindirection() const {
  return skindirection_;
}
inline void SJ_CabDoorBoardInfo::set_skindirection(::google::protobuf::int32 value) {
  set_has_skindirection();
  skindirection_ = value;
}

// required int32 SealRuleID = 15;
inline bool SJ_CabDoorBoardInfo::has_sealruleid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_sealruleid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_sealruleid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabDoorBoardInfo::clear_sealruleid() {
  sealruleid_ = 0;
  clear_has_sealruleid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::sealruleid() const {
  return sealruleid_;
}
inline void SJ_CabDoorBoardInfo::set_sealruleid(::google::protobuf::int32 value) {
  set_has_sealruleid();
  sealruleid_ = value;
}

// required int32 ModelID = 16;
inline bool SJ_CabDoorBoardInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabDoorBoardInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::modelid() const {
  return modelid_;
}
inline void SJ_CabDoorBoardInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required int32 XDock = 17;
inline bool SJ_CabDoorBoardInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_CabDoorBoardInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::xdock() const {
  return xdock_;
}
inline void SJ_CabDoorBoardInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 18;
inline bool SJ_CabDoorBoardInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_CabDoorBoardInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::ydock() const {
  return ydock_;
}
inline void SJ_CabDoorBoardInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 19;
inline bool SJ_CabDoorBoardInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_CabDoorBoardInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::zdock() const {
  return zdock_;
}
inline void SJ_CabDoorBoardInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required double XLen = 20;
inline bool SJ_CabDoorBoardInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_CabDoorBoardInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_CabDoorBoardInfo::xlen() const {
  return xlen_;
}
inline void SJ_CabDoorBoardInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 21;
inline bool SJ_CabDoorBoardInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_CabDoorBoardInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_CabDoorBoardInfo::ylen() const {
  return ylen_;
}
inline void SJ_CabDoorBoardInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 22;
inline bool SJ_CabDoorBoardInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_CabDoorBoardInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_CabDoorBoardInfo::zlen() const {
  return zlen_;
}
inline void SJ_CabDoorBoardInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double XOffsetLen = 23;
inline bool SJ_CabDoorBoardInfo::has_xoffsetlen() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_xoffsetlen() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_xoffsetlen() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_CabDoorBoardInfo::clear_xoffsetlen() {
  xoffsetlen_ = 0;
  clear_has_xoffsetlen();
}
inline double SJ_CabDoorBoardInfo::xoffsetlen() const {
  return xoffsetlen_;
}
inline void SJ_CabDoorBoardInfo::set_xoffsetlen(double value) {
  set_has_xoffsetlen();
  xoffsetlen_ = value;
}

// required double YOffsetLen = 24;
inline bool SJ_CabDoorBoardInfo::has_yoffsetlen() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_yoffsetlen() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_yoffsetlen() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_CabDoorBoardInfo::clear_yoffsetlen() {
  yoffsetlen_ = 0;
  clear_has_yoffsetlen();
}
inline double SJ_CabDoorBoardInfo::yoffsetlen() const {
  return yoffsetlen_;
}
inline void SJ_CabDoorBoardInfo::set_yoffsetlen(double value) {
  set_has_yoffsetlen();
  yoffsetlen_ = value;
}

// required double ZOffsetLen = 25;
inline bool SJ_CabDoorBoardInfo::has_zoffsetlen() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_zoffsetlen() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_zoffsetlen() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_CabDoorBoardInfo::clear_zoffsetlen() {
  zoffsetlen_ = 0;
  clear_has_zoffsetlen();
}
inline double SJ_CabDoorBoardInfo::zoffsetlen() const {
  return zoffsetlen_;
}
inline void SJ_CabDoorBoardInfo::set_zoffsetlen(double value) {
  set_has_zoffsetlen();
  zoffsetlen_ = value;
}

// required int32 CreatorID = 26;
inline bool SJ_CabDoorBoardInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_CabDoorBoardInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabDoorBoardInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 27;
inline bool SJ_CabDoorBoardInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_CabDoorBoardInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabDoorBoardInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 28;
inline bool SJ_CabDoorBoardInfo::has_createtime() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_createtime() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_CabDoorBoardInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabDoorBoardInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabDoorBoardInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 29;
inline bool SJ_CabDoorBoardInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_CabDoorBoardInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_CabDoorBoardInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_CabDoorBoardInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabDoorBoardInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabDoorBoardInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_CabDoorBoardSealInfo

// required int32 CabDoorBoardSealID = 1;
inline bool SJ_CabDoorBoardSealInfo::has_cabdoorboardsealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabDoorBoardSealInfo::set_has_cabdoorboardsealid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabDoorBoardSealInfo::clear_has_cabdoorboardsealid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabDoorBoardSealInfo::clear_cabdoorboardsealid() {
  cabdoorboardsealid_ = 0;
  clear_has_cabdoorboardsealid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardSealInfo::cabdoorboardsealid() const {
  return cabdoorboardsealid_;
}
inline void SJ_CabDoorBoardSealInfo::set_cabdoorboardsealid(::google::protobuf::int32 value) {
  set_has_cabdoorboardsealid();
  cabdoorboardsealid_ = value;
}

// required int32 CabDoorBoardID = 2;
inline bool SJ_CabDoorBoardSealInfo::has_cabdoorboardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabDoorBoardSealInfo::set_has_cabdoorboardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabDoorBoardSealInfo::clear_has_cabdoorboardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabDoorBoardSealInfo::clear_cabdoorboardid() {
  cabdoorboardid_ = 0;
  clear_has_cabdoorboardid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardSealInfo::cabdoorboardid() const {
  return cabdoorboardid_;
}
inline void SJ_CabDoorBoardSealInfo::set_cabdoorboardid(::google::protobuf::int32 value) {
  set_has_cabdoorboardid();
  cabdoorboardid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_CabDoorBoardSealInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabDoorBoardSealInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabDoorBoardSealInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabDoorBoardSealInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardSealInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabDoorBoardSealInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabDoorBoardSealInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabDoorBoardSealInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabDoorBoardSealInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabDoorBoardSealInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabDoorBoardSealInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabDoorBoardSealInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabDoorBoardSealInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabDoorBoardSealInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabDoorBoardSealInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabDoorBoardSealInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardSealInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabDoorBoardSealInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 DoorBoardID = 6;
inline bool SJ_CabDoorBoardSealInfo::has_doorboardid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabDoorBoardSealInfo::set_has_doorboardid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabDoorBoardSealInfo::clear_has_doorboardid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabDoorBoardSealInfo::clear_doorboardid() {
  doorboardid_ = 0;
  clear_has_doorboardid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardSealInfo::doorboardid() const {
  return doorboardid_;
}
inline void SJ_CabDoorBoardSealInfo::set_doorboardid(::google::protobuf::int32 value) {
  set_has_doorboardid();
  doorboardid_ = value;
}

// required int32 SealIndex = 7;
inline bool SJ_CabDoorBoardSealInfo::has_sealindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabDoorBoardSealInfo::set_has_sealindex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabDoorBoardSealInfo::clear_has_sealindex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabDoorBoardSealInfo::clear_sealindex() {
  sealindex_ = 0;
  clear_has_sealindex();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardSealInfo::sealindex() const {
  return sealindex_;
}
inline void SJ_CabDoorBoardSealInfo::set_sealindex(::google::protobuf::int32 value) {
  set_has_sealindex();
  sealindex_ = value;
}

// required int32 FactoryID = 8;
inline bool SJ_CabDoorBoardSealInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabDoorBoardSealInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabDoorBoardSealInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabDoorBoardSealInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardSealInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabDoorBoardSealInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 9;
inline bool SJ_CabDoorBoardSealInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabDoorBoardSealInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabDoorBoardSealInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabDoorBoardSealInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabDoorBoardSealInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabDoorBoardSealInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 SealType = 10;
inline bool SJ_CabDoorBoardSealInfo::has_sealtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabDoorBoardSealInfo::set_has_sealtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabDoorBoardSealInfo::clear_has_sealtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabDoorBoardSealInfo::clear_sealtype() {
  sealtype_ = 0;
  clear_has_sealtype();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardSealInfo::sealtype() const {
  return sealtype_;
}
inline void SJ_CabDoorBoardSealInfo::set_sealtype(::google::protobuf::int32 value) {
  set_has_sealtype();
  sealtype_ = value;
}

// required int32 MaterialID = 11;
inline bool SJ_CabDoorBoardSealInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabDoorBoardSealInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabDoorBoardSealInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabDoorBoardSealInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 SJ_CabDoorBoardSealInfo::materialid() const {
  return materialid_;
}
inline void SJ_CabDoorBoardSealInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required double PreMill = 12;
inline bool SJ_CabDoorBoardSealInfo::has_premill() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabDoorBoardSealInfo::set_has_premill() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabDoorBoardSealInfo::clear_has_premill() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabDoorBoardSealInfo::clear_premill() {
  premill_ = 0;
  clear_has_premill();
}
inline double SJ_CabDoorBoardSealInfo::premill() const {
  return premill_;
}
inline void SJ_CabDoorBoardSealInfo::set_premill(double value) {
  set_has_premill();
  premill_ = value;
}

// -------------------------------------------------------------------

// SJ_CabDoorHWFInfo

// required int32 CabDoorHWFID = 1;
inline bool SJ_CabDoorHWFInfo::has_cabdoorhwfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_cabdoorhwfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabDoorHWFInfo::clear_has_cabdoorhwfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabDoorHWFInfo::clear_cabdoorhwfid() {
  cabdoorhwfid_ = 0;
  clear_has_cabdoorhwfid();
}
inline ::google::protobuf::int32 SJ_CabDoorHWFInfo::cabdoorhwfid() const {
  return cabdoorhwfid_;
}
inline void SJ_CabDoorHWFInfo::set_cabdoorhwfid(::google::protobuf::int32 value) {
  set_has_cabdoorhwfid();
  cabdoorhwfid_ = value;
}

// required int32 CabDoorRegionID = 2;
inline bool SJ_CabDoorHWFInfo::has_cabdoorregionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_cabdoorregionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabDoorHWFInfo::clear_has_cabdoorregionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabDoorHWFInfo::clear_cabdoorregionid() {
  cabdoorregionid_ = 0;
  clear_has_cabdoorregionid();
}
inline ::google::protobuf::int32 SJ_CabDoorHWFInfo::cabdoorregionid() const {
  return cabdoorregionid_;
}
inline void SJ_CabDoorHWFInfo::set_cabdoorregionid(::google::protobuf::int32 value) {
  set_has_cabdoorregionid();
  cabdoorregionid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_CabDoorHWFInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabDoorHWFInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabDoorHWFInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabDoorHWFInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabDoorHWFInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabDoorHWFInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabDoorHWFInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabDoorHWFInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabDoorHWFInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabDoorHWFInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabDoorHWFInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabDoorHWFInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabDoorHWFInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabDoorHWFInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabDoorHWFInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 HWFittingID = 6;
inline bool SJ_CabDoorHWFInfo::has_hwfittingid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_hwfittingid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabDoorHWFInfo::clear_has_hwfittingid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabDoorHWFInfo::clear_hwfittingid() {
  hwfittingid_ = 0;
  clear_has_hwfittingid();
}
inline ::google::protobuf::int32 SJ_CabDoorHWFInfo::hwfittingid() const {
  return hwfittingid_;
}
inline void SJ_CabDoorHWFInfo::set_hwfittingid(::google::protobuf::int32 value) {
  set_has_hwfittingid();
  hwfittingid_ = value;
}

// required int32 FactoryID = 7;
inline bool SJ_CabDoorHWFInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabDoorHWFInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabDoorHWFInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabDoorHWFInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabDoorHWFInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 8;
inline bool SJ_CabDoorHWFInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabDoorHWFInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabDoorHWFInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabDoorHWFInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabDoorHWFInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 SupplyType = 9;
inline bool SJ_CabDoorHWFInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabDoorHWFInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabDoorHWFInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_CabDoorHWFInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_CabDoorHWFInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 10;
inline bool SJ_CabDoorHWFInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabDoorHWFInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabDoorHWFInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_CabDoorHWFInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_CabDoorHWFInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 SettingCountRuleID = 11;
inline bool SJ_CabDoorHWFInfo::has_settingcountruleid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_settingcountruleid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabDoorHWFInfo::clear_has_settingcountruleid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabDoorHWFInfo::clear_settingcountruleid() {
  settingcountruleid_ = 0;
  clear_has_settingcountruleid();
}
inline ::google::protobuf::int32 SJ_CabDoorHWFInfo::settingcountruleid() const {
  return settingcountruleid_;
}
inline void SJ_CabDoorHWFInfo::set_settingcountruleid(::google::protobuf::int32 value) {
  set_has_settingcountruleid();
  settingcountruleid_ = value;
}

// required int32 UseCount = 12;
inline bool SJ_CabDoorHWFInfo::has_usecount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_usecount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabDoorHWFInfo::clear_has_usecount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabDoorHWFInfo::clear_usecount() {
  usecount_ = 0;
  clear_has_usecount();
}
inline ::google::protobuf::int32 SJ_CabDoorHWFInfo::usecount() const {
  return usecount_;
}
inline void SJ_CabDoorHWFInfo::set_usecount(::google::protobuf::int32 value) {
  set_has_usecount();
  usecount_ = value;
}

// required int32 CreatorID = 13;
inline bool SJ_CabDoorHWFInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabDoorHWFInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabDoorHWFInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabDoorHWFInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabDoorHWFInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 14;
inline bool SJ_CabDoorHWFInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabDoorHWFInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabDoorHWFInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabDoorHWFInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabDoorHWFInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 15;
inline bool SJ_CabDoorHWFInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabDoorHWFInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabDoorHWFInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabDoorHWFInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabDoorHWFInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 16;
inline bool SJ_CabDoorHWFInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabDoorHWFInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabDoorHWFInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabDoorHWFInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabDoorHWFInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabDoorHWFInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_CabDoorHandleInfo

// required int32 CabDoorHandleID = 1;
inline bool SJ_CabDoorHandleInfo::has_cabdoorhandleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_cabdoorhandleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabDoorHandleInfo::clear_has_cabdoorhandleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabDoorHandleInfo::clear_cabdoorhandleid() {
  cabdoorhandleid_ = 0;
  clear_has_cabdoorhandleid();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::cabdoorhandleid() const {
  return cabdoorhandleid_;
}
inline void SJ_CabDoorHandleInfo::set_cabdoorhandleid(::google::protobuf::int32 value) {
  set_has_cabdoorhandleid();
  cabdoorhandleid_ = value;
}

// required int32 CabParentID = 2;
inline bool SJ_CabDoorHandleInfo::has_cabparentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_cabparentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabDoorHandleInfo::clear_has_cabparentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabDoorHandleInfo::clear_cabparentid() {
  cabparentid_ = 0;
  clear_has_cabparentid();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::cabparentid() const {
  return cabparentid_;
}
inline void SJ_CabDoorHandleInfo::set_cabparentid(::google::protobuf::int32 value) {
  set_has_cabparentid();
  cabparentid_ = value;
}

// required int32 ParentType = 3;
inline bool SJ_CabDoorHandleInfo::has_parenttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_parenttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabDoorHandleInfo::clear_has_parenttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabDoorHandleInfo::clear_parenttype() {
  parenttype_ = 0;
  clear_has_parenttype();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::parenttype() const {
  return parenttype_;
}
inline void SJ_CabDoorHandleInfo::set_parenttype(::google::protobuf::int32 value) {
  set_has_parenttype();
  parenttype_ = value;
}

// required int32 OrderCate = 4;
inline bool SJ_CabDoorHandleInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabDoorHandleInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabDoorHandleInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabDoorHandleInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 5;
inline bool SJ_CabDoorHandleInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabDoorHandleInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabDoorHandleInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabDoorHandleInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabDoorHandleInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 6;
inline bool SJ_CabDoorHandleInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabDoorHandleInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabDoorHandleInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabDoorHandleInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 CabDesignDoorRegionID = 7;
inline bool SJ_CabDoorHandleInfo::has_cabdesigndoorregionid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_cabdesigndoorregionid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabDoorHandleInfo::clear_has_cabdesigndoorregionid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabDoorHandleInfo::clear_cabdesigndoorregionid() {
  cabdesigndoorregionid_ = 0;
  clear_has_cabdesigndoorregionid();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::cabdesigndoorregionid() const {
  return cabdesigndoorregionid_;
}
inline void SJ_CabDoorHandleInfo::set_cabdesigndoorregionid(::google::protobuf::int32 value) {
  set_has_cabdesigndoorregionid();
  cabdesigndoorregionid_ = value;
}

// required int32 CabDesignDoorRegionHandleID = 8;
inline bool SJ_CabDoorHandleInfo::has_cabdesigndoorregionhandleid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_cabdesigndoorregionhandleid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabDoorHandleInfo::clear_has_cabdesigndoorregionhandleid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabDoorHandleInfo::clear_cabdesigndoorregionhandleid() {
  cabdesigndoorregionhandleid_ = 0;
  clear_has_cabdesigndoorregionhandleid();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::cabdesigndoorregionhandleid() const {
  return cabdesigndoorregionhandleid_;
}
inline void SJ_CabDoorHandleInfo::set_cabdesigndoorregionhandleid(::google::protobuf::int32 value) {
  set_has_cabdesigndoorregionhandleid();
  cabdesigndoorregionhandleid_ = value;
}

// required int32 OwnerID = 9;
inline bool SJ_CabDoorHandleInfo::has_ownerid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_ownerid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabDoorHandleInfo::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabDoorHandleInfo::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::ownerid() const {
  return ownerid_;
}
inline void SJ_CabDoorHandleInfo::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// required int32 DoorMatPlanID = 10;
inline bool SJ_CabDoorHandleInfo::has_doormatplanid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_doormatplanid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabDoorHandleInfo::clear_has_doormatplanid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabDoorHandleInfo::clear_doormatplanid() {
  doormatplanid_ = 0;
  clear_has_doormatplanid();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::doormatplanid() const {
  return doormatplanid_;
}
inline void SJ_CabDoorHandleInfo::set_doormatplanid(::google::protobuf::int32 value) {
  set_has_doormatplanid();
  doormatplanid_ = value;
}

// required int32 HandleID = 11;
inline bool SJ_CabDoorHandleInfo::has_handleid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_handleid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabDoorHandleInfo::clear_has_handleid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabDoorHandleInfo::clear_handleid() {
  handleid_ = 0;
  clear_has_handleid();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::handleid() const {
  return handleid_;
}
inline void SJ_CabDoorHandleInfo::set_handleid(::google::protobuf::int32 value) {
  set_has_handleid();
  handleid_ = value;
}

// required int32 FactoryID = 12;
inline bool SJ_CabDoorHandleInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabDoorHandleInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabDoorHandleInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabDoorHandleInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 13;
inline bool SJ_CabDoorHandleInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabDoorHandleInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabDoorHandleInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabDoorHandleInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 MatchType = 14;
inline bool SJ_CabDoorHandleInfo::has_matchtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_matchtype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_matchtype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabDoorHandleInfo::clear_matchtype() {
  matchtype_ = 0;
  clear_has_matchtype();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::matchtype() const {
  return matchtype_;
}
inline void SJ_CabDoorHandleInfo::set_matchtype(::google::protobuf::int32 value) {
  set_has_matchtype();
  matchtype_ = value;
}

// required bool IsChangedOffset = 15;
inline bool SJ_CabDoorHandleInfo::has_ischangedoffset() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_ischangedoffset() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_ischangedoffset() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabDoorHandleInfo::clear_ischangedoffset() {
  ischangedoffset_ = false;
  clear_has_ischangedoffset();
}
inline bool SJ_CabDoorHandleInfo::ischangedoffset() const {
  return ischangedoffset_;
}
inline void SJ_CabDoorHandleInfo::set_ischangedoffset(bool value) {
  set_has_ischangedoffset();
  ischangedoffset_ = value;
}

// required int32 SupplyType = 16;
inline bool SJ_CabDoorHandleInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabDoorHandleInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_CabDoorHandleInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 17;
inline bool SJ_CabDoorHandleInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_CabDoorHandleInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_CabDoorHandleInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 XDock = 18;
inline bool SJ_CabDoorHandleInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_CabDoorHandleInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::xdock() const {
  return xdock_;
}
inline void SJ_CabDoorHandleInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 19;
inline bool SJ_CabDoorHandleInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_CabDoorHandleInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::ydock() const {
  return ydock_;
}
inline void SJ_CabDoorHandleInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 20;
inline bool SJ_CabDoorHandleInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_CabDoorHandleInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::zdock() const {
  return zdock_;
}
inline void SJ_CabDoorHandleInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required double XLen = 21;
inline bool SJ_CabDoorHandleInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_CabDoorHandleInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_CabDoorHandleInfo::xlen() const {
  return xlen_;
}
inline void SJ_CabDoorHandleInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 22;
inline bool SJ_CabDoorHandleInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_CabDoorHandleInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_CabDoorHandleInfo::ylen() const {
  return ylen_;
}
inline void SJ_CabDoorHandleInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 23;
inline bool SJ_CabDoorHandleInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_CabDoorHandleInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_CabDoorHandleInfo::zlen() const {
  return zlen_;
}
inline void SJ_CabDoorHandleInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double RealXLen = 24;
inline bool SJ_CabDoorHandleInfo::has_realxlen() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_realxlen() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_realxlen() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_CabDoorHandleInfo::clear_realxlen() {
  realxlen_ = 0;
  clear_has_realxlen();
}
inline double SJ_CabDoorHandleInfo::realxlen() const {
  return realxlen_;
}
inline void SJ_CabDoorHandleInfo::set_realxlen(double value) {
  set_has_realxlen();
  realxlen_ = value;
}

// required double RealYLen = 25;
inline bool SJ_CabDoorHandleInfo::has_realylen() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_realylen() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_realylen() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_CabDoorHandleInfo::clear_realylen() {
  realylen_ = 0;
  clear_has_realylen();
}
inline double SJ_CabDoorHandleInfo::realylen() const {
  return realylen_;
}
inline void SJ_CabDoorHandleInfo::set_realylen(double value) {
  set_has_realylen();
  realylen_ = value;
}

// required double RealZLen = 26;
inline bool SJ_CabDoorHandleInfo::has_realzlen() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_realzlen() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_realzlen() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_CabDoorHandleInfo::clear_realzlen() {
  realzlen_ = 0;
  clear_has_realzlen();
}
inline double SJ_CabDoorHandleInfo::realzlen() const {
  return realzlen_;
}
inline void SJ_CabDoorHandleInfo::set_realzlen(double value) {
  set_has_realzlen();
  realzlen_ = value;
}

// required double XOffsetLen = 27;
inline bool SJ_CabDoorHandleInfo::has_xoffsetlen() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_xoffsetlen() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_xoffsetlen() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_CabDoorHandleInfo::clear_xoffsetlen() {
  xoffsetlen_ = 0;
  clear_has_xoffsetlen();
}
inline double SJ_CabDoorHandleInfo::xoffsetlen() const {
  return xoffsetlen_;
}
inline void SJ_CabDoorHandleInfo::set_xoffsetlen(double value) {
  set_has_xoffsetlen();
  xoffsetlen_ = value;
}

// required double YOffsetLen = 28;
inline bool SJ_CabDoorHandleInfo::has_yoffsetlen() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_yoffsetlen() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_yoffsetlen() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_CabDoorHandleInfo::clear_yoffsetlen() {
  yoffsetlen_ = 0;
  clear_has_yoffsetlen();
}
inline double SJ_CabDoorHandleInfo::yoffsetlen() const {
  return yoffsetlen_;
}
inline void SJ_CabDoorHandleInfo::set_yoffsetlen(double value) {
  set_has_yoffsetlen();
  yoffsetlen_ = value;
}

// required double ZOffsetLen = 29;
inline bool SJ_CabDoorHandleInfo::has_zoffsetlen() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_zoffsetlen() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_zoffsetlen() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_CabDoorHandleInfo::clear_zoffsetlen() {
  zoffsetlen_ = 0;
  clear_has_zoffsetlen();
}
inline double SJ_CabDoorHandleInfo::zoffsetlen() const {
  return zoffsetlen_;
}
inline void SJ_CabDoorHandleInfo::set_zoffsetlen(double value) {
  set_has_zoffsetlen();
  zoffsetlen_ = value;
}

// required double ArcZ = 30;
inline bool SJ_CabDoorHandleInfo::has_arcz() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_arcz() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_arcz() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SJ_CabDoorHandleInfo::clear_arcz() {
  arcz_ = 0;
  clear_has_arcz();
}
inline double SJ_CabDoorHandleInfo::arcz() const {
  return arcz_;
}
inline void SJ_CabDoorHandleInfo::set_arcz(double value) {
  set_has_arcz();
  arcz_ = value;
}

// required int32 CreatorID = 31;
inline bool SJ_CabDoorHandleInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SJ_CabDoorHandleInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabDoorHandleInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 32;
inline bool SJ_CabDoorHandleInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SJ_CabDoorHandleInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SJ_CabDoorHandleInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabDoorHandleInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabDoorHandleInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 33;
inline bool SJ_CabDoorHandleInfo::has_createtime() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_createtime() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SJ_CabDoorHandleInfo::clear_has_createtime() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SJ_CabDoorHandleInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabDoorHandleInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabDoorHandleInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 34;
inline bool SJ_CabDoorHandleInfo::has_updatetime() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SJ_CabDoorHandleInfo::set_has_updatetime() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SJ_CabDoorHandleInfo::clear_has_updatetime() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SJ_CabDoorHandleInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabDoorHandleInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabDoorHandleInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_CabDoorInfo

// required int32 CabDoorID = 1;
inline bool SJ_CabDoorInfo::has_cabdoorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabDoorInfo::set_has_cabdoorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabDoorInfo::clear_has_cabdoorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabDoorInfo::clear_cabdoorid() {
  cabdoorid_ = 0;
  clear_has_cabdoorid();
}
inline ::google::protobuf::int32 SJ_CabDoorInfo::cabdoorid() const {
  return cabdoorid_;
}
inline void SJ_CabDoorInfo::set_cabdoorid(::google::protobuf::int32 value) {
  set_has_cabdoorid();
  cabdoorid_ = value;
}

// required int32 CabParentID = 2;
inline bool SJ_CabDoorInfo::has_cabparentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabDoorInfo::set_has_cabparentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabDoorInfo::clear_has_cabparentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabDoorInfo::clear_cabparentid() {
  cabparentid_ = 0;
  clear_has_cabparentid();
}
inline ::google::protobuf::int32 SJ_CabDoorInfo::cabparentid() const {
  return cabparentid_;
}
inline void SJ_CabDoorInfo::set_cabparentid(::google::protobuf::int32 value) {
  set_has_cabparentid();
  cabparentid_ = value;
}

// required int32 ParentType = 3;
inline bool SJ_CabDoorInfo::has_parenttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabDoorInfo::set_has_parenttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabDoorInfo::clear_has_parenttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabDoorInfo::clear_parenttype() {
  parenttype_ = 0;
  clear_has_parenttype();
}
inline ::google::protobuf::int32 SJ_CabDoorInfo::parenttype() const {
  return parenttype_;
}
inline void SJ_CabDoorInfo::set_parenttype(::google::protobuf::int32 value) {
  set_has_parenttype();
  parenttype_ = value;
}

// required int32 OrderCate = 4;
inline bool SJ_CabDoorInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabDoorInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabDoorInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabDoorInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabDoorInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabDoorInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 5;
inline bool SJ_CabDoorInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabDoorInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabDoorInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabDoorInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabDoorInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabDoorInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 6;
inline bool SJ_CabDoorInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabDoorInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabDoorInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabDoorInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabDoorInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabDoorInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 OwnerID = 7;
inline bool SJ_CabDoorInfo::has_ownerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabDoorInfo::set_has_ownerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabDoorInfo::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabDoorInfo::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 SJ_CabDoorInfo::ownerid() const {
  return ownerid_;
}
inline void SJ_CabDoorInfo::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// required int32 DoorMatPlanID = 8;
inline bool SJ_CabDoorInfo::has_doormatplanid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabDoorInfo::set_has_doormatplanid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabDoorInfo::clear_has_doormatplanid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabDoorInfo::clear_doormatplanid() {
  doormatplanid_ = 0;
  clear_has_doormatplanid();
}
inline ::google::protobuf::int32 SJ_CabDoorInfo::doormatplanid() const {
  return doormatplanid_;
}
inline void SJ_CabDoorInfo::set_doormatplanid(::google::protobuf::int32 value) {
  set_has_doormatplanid();
  doormatplanid_ = value;
}

// required int32 DoorID = 9;
inline bool SJ_CabDoorInfo::has_doorid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabDoorInfo::set_has_doorid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabDoorInfo::clear_has_doorid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabDoorInfo::clear_doorid() {
  doorid_ = 0;
  clear_has_doorid();
}
inline ::google::protobuf::int32 SJ_CabDoorInfo::doorid() const {
  return doorid_;
}
inline void SJ_CabDoorInfo::set_doorid(::google::protobuf::int32 value) {
  set_has_doorid();
  doorid_ = value;
}

// required int32 FactoryID = 10;
inline bool SJ_CabDoorInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabDoorInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabDoorInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabDoorInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabDoorInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabDoorInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 11;
inline bool SJ_CabDoorInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabDoorInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabDoorInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabDoorInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabDoorInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabDoorInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required double XLen = 12;
inline bool SJ_CabDoorInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabDoorInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabDoorInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabDoorInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_CabDoorInfo::xlen() const {
  return xlen_;
}
inline void SJ_CabDoorInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 13;
inline bool SJ_CabDoorInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabDoorInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabDoorInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabDoorInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_CabDoorInfo::ylen() const {
  return ylen_;
}
inline void SJ_CabDoorInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 14;
inline bool SJ_CabDoorInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabDoorInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabDoorInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabDoorInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_CabDoorInfo::zlen() const {
  return zlen_;
}
inline void SJ_CabDoorInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required int32 CreatorID = 15;
inline bool SJ_CabDoorInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabDoorInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabDoorInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabDoorInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabDoorInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabDoorInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 16;
inline bool SJ_CabDoorInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabDoorInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabDoorInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabDoorInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabDoorInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabDoorInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 17;
inline bool SJ_CabDoorInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_CabDoorInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_CabDoorInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_CabDoorInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabDoorInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabDoorInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 18;
inline bool SJ_CabDoorInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_CabDoorInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_CabDoorInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_CabDoorInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabDoorInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabDoorInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_CabDoorRegionInfo

// required int32 CabDoorRegionID = 1;
inline bool SJ_CabDoorRegionInfo::has_cabdoorregionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_cabdoorregionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabDoorRegionInfo::clear_has_cabdoorregionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabDoorRegionInfo::clear_cabdoorregionid() {
  cabdoorregionid_ = 0;
  clear_has_cabdoorregionid();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::cabdoorregionid() const {
  return cabdoorregionid_;
}
inline void SJ_CabDoorRegionInfo::set_cabdoorregionid(::google::protobuf::int32 value) {
  set_has_cabdoorregionid();
  cabdoorregionid_ = value;
}

// required int32 CabDoorSystemID = 2;
inline bool SJ_CabDoorRegionInfo::has_cabdoorsystemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_cabdoorsystemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabDoorRegionInfo::clear_has_cabdoorsystemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabDoorRegionInfo::clear_cabdoorsystemid() {
  cabdoorsystemid_ = 0;
  clear_has_cabdoorsystemid();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::cabdoorsystemid() const {
  return cabdoorsystemid_;
}
inline void SJ_CabDoorRegionInfo::set_cabdoorsystemid(::google::protobuf::int32 value) {
  set_has_cabdoorsystemid();
  cabdoorsystemid_ = value;
}

// required int32 ParentCabRegionID = 3;
inline bool SJ_CabDoorRegionInfo::has_parentcabregionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_parentcabregionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabDoorRegionInfo::clear_has_parentcabregionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabDoorRegionInfo::clear_parentcabregionid() {
  parentcabregionid_ = 0;
  clear_has_parentcabregionid();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::parentcabregionid() const {
  return parentcabregionid_;
}
inline void SJ_CabDoorRegionInfo::set_parentcabregionid(::google::protobuf::int32 value) {
  set_has_parentcabregionid();
  parentcabregionid_ = value;
}

// required int32 OrderCate = 4;
inline bool SJ_CabDoorRegionInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabDoorRegionInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabDoorRegionInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabDoorRegionInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 5;
inline bool SJ_CabDoorRegionInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabDoorRegionInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabDoorRegionInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabDoorRegionInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabDoorRegionInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 6;
inline bool SJ_CabDoorRegionInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabDoorRegionInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabDoorRegionInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabDoorRegionInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 DoorSystemRegionID = 7;
inline bool SJ_CabDoorRegionInfo::has_doorsystemregionid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_doorsystemregionid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabDoorRegionInfo::clear_has_doorsystemregionid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabDoorRegionInfo::clear_doorsystemregionid() {
  doorsystemregionid_ = 0;
  clear_has_doorsystemregionid();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::doorsystemregionid() const {
  return doorsystemregionid_;
}
inline void SJ_CabDoorRegionInfo::set_doorsystemregionid(::google::protobuf::int32 value) {
  set_has_doorsystemregionid();
  doorsystemregionid_ = value;
}

// required int32 DoorSystemID = 8;
inline bool SJ_CabDoorRegionInfo::has_doorsystemid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_doorsystemid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabDoorRegionInfo::clear_has_doorsystemid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabDoorRegionInfo::clear_doorsystemid() {
  doorsystemid_ = 0;
  clear_has_doorsystemid();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::doorsystemid() const {
  return doorsystemid_;
}
inline void SJ_CabDoorRegionInfo::set_doorsystemid(::google::protobuf::int32 value) {
  set_has_doorsystemid();
  doorsystemid_ = value;
}

// required int32 CabDesignDoorRegionID = 9;
inline bool SJ_CabDoorRegionInfo::has_cabdesigndoorregionid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_cabdesigndoorregionid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabDoorRegionInfo::clear_has_cabdesigndoorregionid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabDoorRegionInfo::clear_cabdesigndoorregionid() {
  cabdesigndoorregionid_ = 0;
  clear_has_cabdesigndoorregionid();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::cabdesigndoorregionid() const {
  return cabdesigndoorregionid_;
}
inline void SJ_CabDoorRegionInfo::set_cabdesigndoorregionid(::google::protobuf::int32 value) {
  set_has_cabdesigndoorregionid();
  cabdesigndoorregionid_ = value;
}

// required int32 CabDesignDoorSystemID = 10;
inline bool SJ_CabDoorRegionInfo::has_cabdesigndoorsystemid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_cabdesigndoorsystemid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabDoorRegionInfo::clear_has_cabdesigndoorsystemid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabDoorRegionInfo::clear_cabdesigndoorsystemid() {
  cabdesigndoorsystemid_ = 0;
  clear_has_cabdesigndoorsystemid();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::cabdesigndoorsystemid() const {
  return cabdesigndoorsystemid_;
}
inline void SJ_CabDoorRegionInfo::set_cabdesigndoorsystemid(::google::protobuf::int32 value) {
  set_has_cabdesigndoorsystemid();
  cabdesigndoorsystemid_ = value;
}

// required int32 CabDesignID = 11;
inline bool SJ_CabDoorRegionInfo::has_cabdesignid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_cabdesignid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabDoorRegionInfo::clear_has_cabdesignid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabDoorRegionInfo::clear_cabdesignid() {
  cabdesignid_ = 0;
  clear_has_cabdesignid();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::cabdesignid() const {
  return cabdesignid_;
}
inline void SJ_CabDoorRegionInfo::set_cabdesignid(::google::protobuf::int32 value) {
  set_has_cabdesignid();
  cabdesignid_ = value;
}

// required int32 FactoryID = 12;
inline bool SJ_CabDoorRegionInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabDoorRegionInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabDoorRegionInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabDoorRegionInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 13;
inline bool SJ_CabDoorRegionInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabDoorRegionInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabDoorRegionInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabDoorRegionInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required bool IsUserDefineSize = 14;
inline bool SJ_CabDoorRegionInfo::has_isuserdefinesize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_isuserdefinesize() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_isuserdefinesize() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabDoorRegionInfo::clear_isuserdefinesize() {
  isuserdefinesize_ = false;
  clear_has_isuserdefinesize();
}
inline bool SJ_CabDoorRegionInfo::isuserdefinesize() const {
  return isuserdefinesize_;
}
inline void SJ_CabDoorRegionInfo::set_isuserdefinesize(bool value) {
  set_has_isuserdefinesize();
  isuserdefinesize_ = value;
}

// required bool IsUserDefinePos = 15;
inline bool SJ_CabDoorRegionInfo::has_isuserdefinepos() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_isuserdefinepos() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_isuserdefinepos() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabDoorRegionInfo::clear_isuserdefinepos() {
  isuserdefinepos_ = false;
  clear_has_isuserdefinepos();
}
inline bool SJ_CabDoorRegionInfo::isuserdefinepos() const {
  return isuserdefinepos_;
}
inline void SJ_CabDoorRegionInfo::set_isuserdefinepos(bool value) {
  set_has_isuserdefinepos();
  isuserdefinepos_ = value;
}

// required int32 XDock = 16;
inline bool SJ_CabDoorRegionInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabDoorRegionInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::xdock() const {
  return xdock_;
}
inline void SJ_CabDoorRegionInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 17;
inline bool SJ_CabDoorRegionInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_CabDoorRegionInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::ydock() const {
  return ydock_;
}
inline void SJ_CabDoorRegionInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 18;
inline bool SJ_CabDoorRegionInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_CabDoorRegionInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::zdock() const {
  return zdock_;
}
inline void SJ_CabDoorRegionInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required double XLen = 19;
inline bool SJ_CabDoorRegionInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_CabDoorRegionInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_CabDoorRegionInfo::xlen() const {
  return xlen_;
}
inline void SJ_CabDoorRegionInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 20;
inline bool SJ_CabDoorRegionInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_CabDoorRegionInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_CabDoorRegionInfo::ylen() const {
  return ylen_;
}
inline void SJ_CabDoorRegionInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 21;
inline bool SJ_CabDoorRegionInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_CabDoorRegionInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_CabDoorRegionInfo::zlen() const {
  return zlen_;
}
inline void SJ_CabDoorRegionInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double XAdjustLen = 22;
inline bool SJ_CabDoorRegionInfo::has_xadjustlen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_xadjustlen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_xadjustlen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_CabDoorRegionInfo::clear_xadjustlen() {
  xadjustlen_ = 0;
  clear_has_xadjustlen();
}
inline double SJ_CabDoorRegionInfo::xadjustlen() const {
  return xadjustlen_;
}
inline void SJ_CabDoorRegionInfo::set_xadjustlen(double value) {
  set_has_xadjustlen();
  xadjustlen_ = value;
}

// required double YAdjustLen = 23;
inline bool SJ_CabDoorRegionInfo::has_yadjustlen() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_yadjustlen() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_yadjustlen() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_CabDoorRegionInfo::clear_yadjustlen() {
  yadjustlen_ = 0;
  clear_has_yadjustlen();
}
inline double SJ_CabDoorRegionInfo::yadjustlen() const {
  return yadjustlen_;
}
inline void SJ_CabDoorRegionInfo::set_yadjustlen(double value) {
  set_has_yadjustlen();
  yadjustlen_ = value;
}

// required double RealXLen = 24;
inline bool SJ_CabDoorRegionInfo::has_realxlen() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_realxlen() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_realxlen() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_CabDoorRegionInfo::clear_realxlen() {
  realxlen_ = 0;
  clear_has_realxlen();
}
inline double SJ_CabDoorRegionInfo::realxlen() const {
  return realxlen_;
}
inline void SJ_CabDoorRegionInfo::set_realxlen(double value) {
  set_has_realxlen();
  realxlen_ = value;
}

// required double RealYLen = 25;
inline bool SJ_CabDoorRegionInfo::has_realylen() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_realylen() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_realylen() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_CabDoorRegionInfo::clear_realylen() {
  realylen_ = 0;
  clear_has_realylen();
}
inline double SJ_CabDoorRegionInfo::realylen() const {
  return realylen_;
}
inline void SJ_CabDoorRegionInfo::set_realylen(double value) {
  set_has_realylen();
  realylen_ = value;
}

// required double RealZLen = 26;
inline bool SJ_CabDoorRegionInfo::has_realzlen() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_realzlen() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_realzlen() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_CabDoorRegionInfo::clear_realzlen() {
  realzlen_ = 0;
  clear_has_realzlen();
}
inline double SJ_CabDoorRegionInfo::realzlen() const {
  return realzlen_;
}
inline void SJ_CabDoorRegionInfo::set_realzlen(double value) {
  set_has_realzlen();
  realzlen_ = value;
}

// required double CutXLen = 27;
inline bool SJ_CabDoorRegionInfo::has_cutxlen() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_cutxlen() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_cutxlen() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_CabDoorRegionInfo::clear_cutxlen() {
  cutxlen_ = 0;
  clear_has_cutxlen();
}
inline double SJ_CabDoorRegionInfo::cutxlen() const {
  return cutxlen_;
}
inline void SJ_CabDoorRegionInfo::set_cutxlen(double value) {
  set_has_cutxlen();
  cutxlen_ = value;
}

// required double CutYLen = 28;
inline bool SJ_CabDoorRegionInfo::has_cutylen() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_cutylen() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_cutylen() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_CabDoorRegionInfo::clear_cutylen() {
  cutylen_ = 0;
  clear_has_cutylen();
}
inline double SJ_CabDoorRegionInfo::cutylen() const {
  return cutylen_;
}
inline void SJ_CabDoorRegionInfo::set_cutylen(double value) {
  set_has_cutylen();
  cutylen_ = value;
}

// required double XOffsetLen = 29;
inline bool SJ_CabDoorRegionInfo::has_xoffsetlen() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_xoffsetlen() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_xoffsetlen() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_CabDoorRegionInfo::clear_xoffsetlen() {
  xoffsetlen_ = 0;
  clear_has_xoffsetlen();
}
inline double SJ_CabDoorRegionInfo::xoffsetlen() const {
  return xoffsetlen_;
}
inline void SJ_CabDoorRegionInfo::set_xoffsetlen(double value) {
  set_has_xoffsetlen();
  xoffsetlen_ = value;
}

// required double YOffsetLen = 30;
inline bool SJ_CabDoorRegionInfo::has_yoffsetlen() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_yoffsetlen() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_yoffsetlen() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SJ_CabDoorRegionInfo::clear_yoffsetlen() {
  yoffsetlen_ = 0;
  clear_has_yoffsetlen();
}
inline double SJ_CabDoorRegionInfo::yoffsetlen() const {
  return yoffsetlen_;
}
inline void SJ_CabDoorRegionInfo::set_yoffsetlen(double value) {
  set_has_yoffsetlen();
  yoffsetlen_ = value;
}

// required double ZOffsetLen = 31;
inline bool SJ_CabDoorRegionInfo::has_zoffsetlen() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_zoffsetlen() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_zoffsetlen() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SJ_CabDoorRegionInfo::clear_zoffsetlen() {
  zoffsetlen_ = 0;
  clear_has_zoffsetlen();
}
inline double SJ_CabDoorRegionInfo::zoffsetlen() const {
  return zoffsetlen_;
}
inline void SJ_CabDoorRegionInfo::set_zoffsetlen(double value) {
  set_has_zoffsetlen();
  zoffsetlen_ = value;
}

// required double RealXOffsetLen = 32;
inline bool SJ_CabDoorRegionInfo::has_realxoffsetlen() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_realxoffsetlen() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SJ_CabDoorRegionInfo::clear_has_realxoffsetlen() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SJ_CabDoorRegionInfo::clear_realxoffsetlen() {
  realxoffsetlen_ = 0;
  clear_has_realxoffsetlen();
}
inline double SJ_CabDoorRegionInfo::realxoffsetlen() const {
  return realxoffsetlen_;
}
inline void SJ_CabDoorRegionInfo::set_realxoffsetlen(double value) {
  set_has_realxoffsetlen();
  realxoffsetlen_ = value;
}

// required double RealYOffsetLen = 33;
inline bool SJ_CabDoorRegionInfo::has_realyoffsetlen() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_realyoffsetlen() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SJ_CabDoorRegionInfo::clear_has_realyoffsetlen() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SJ_CabDoorRegionInfo::clear_realyoffsetlen() {
  realyoffsetlen_ = 0;
  clear_has_realyoffsetlen();
}
inline double SJ_CabDoorRegionInfo::realyoffsetlen() const {
  return realyoffsetlen_;
}
inline void SJ_CabDoorRegionInfo::set_realyoffsetlen(double value) {
  set_has_realyoffsetlen();
  realyoffsetlen_ = value;
}

// required double RealZOffsetLen = 34;
inline bool SJ_CabDoorRegionInfo::has_realzoffsetlen() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_realzoffsetlen() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SJ_CabDoorRegionInfo::clear_has_realzoffsetlen() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SJ_CabDoorRegionInfo::clear_realzoffsetlen() {
  realzoffsetlen_ = 0;
  clear_has_realzoffsetlen();
}
inline double SJ_CabDoorRegionInfo::realzoffsetlen() const {
  return realzoffsetlen_;
}
inline void SJ_CabDoorRegionInfo::set_realzoffsetlen(double value) {
  set_has_realzoffsetlen();
  realzoffsetlen_ = value;
}

// required int32 CreatorID = 35;
inline bool SJ_CabDoorRegionInfo::has_creatorid() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_creatorid() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SJ_CabDoorRegionInfo::clear_has_creatorid() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SJ_CabDoorRegionInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabDoorRegionInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 36;
inline bool SJ_CabDoorRegionInfo::has_updaterid() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_updaterid() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SJ_CabDoorRegionInfo::clear_has_updaterid() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SJ_CabDoorRegionInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabDoorRegionInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabDoorRegionInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 37;
inline bool SJ_CabDoorRegionInfo::has_createtime() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_createtime() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SJ_CabDoorRegionInfo::clear_has_createtime() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SJ_CabDoorRegionInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabDoorRegionInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabDoorRegionInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 38;
inline bool SJ_CabDoorRegionInfo::has_updatetime() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SJ_CabDoorRegionInfo::set_has_updatetime() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SJ_CabDoorRegionInfo::clear_has_updatetime() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SJ_CabDoorRegionInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabDoorRegionInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabDoorRegionInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_CabDoorSlideInfo

// required int32 CabDoorSlideID = 1;
inline bool SJ_CabDoorSlideInfo::has_cabdoorslideid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_cabdoorslideid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabDoorSlideInfo::clear_has_cabdoorslideid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabDoorSlideInfo::clear_cabdoorslideid() {
  cabdoorslideid_ = 0;
  clear_has_cabdoorslideid();
}
inline ::google::protobuf::int32 SJ_CabDoorSlideInfo::cabdoorslideid() const {
  return cabdoorslideid_;
}
inline void SJ_CabDoorSlideInfo::set_cabdoorslideid(::google::protobuf::int32 value) {
  set_has_cabdoorslideid();
  cabdoorslideid_ = value;
}

// required int32 CabDoorRegionID = 2;
inline bool SJ_CabDoorSlideInfo::has_cabdoorregionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_cabdoorregionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabDoorSlideInfo::clear_has_cabdoorregionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabDoorSlideInfo::clear_cabdoorregionid() {
  cabdoorregionid_ = 0;
  clear_has_cabdoorregionid();
}
inline ::google::protobuf::int32 SJ_CabDoorSlideInfo::cabdoorregionid() const {
  return cabdoorregionid_;
}
inline void SJ_CabDoorSlideInfo::set_cabdoorregionid(::google::protobuf::int32 value) {
  set_has_cabdoorregionid();
  cabdoorregionid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_CabDoorSlideInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabDoorSlideInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabDoorSlideInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabDoorSlideInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabDoorSlideInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabDoorSlideInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabDoorSlideInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabDoorSlideInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabDoorSlideInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabDoorSlideInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabDoorSlideInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabDoorSlideInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabDoorSlideInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabDoorSlideInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabDoorSlideInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 DoorSystemRegionID = 6;
inline bool SJ_CabDoorSlideInfo::has_doorsystemregionid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_doorsystemregionid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabDoorSlideInfo::clear_has_doorsystemregionid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabDoorSlideInfo::clear_doorsystemregionid() {
  doorsystemregionid_ = 0;
  clear_has_doorsystemregionid();
}
inline ::google::protobuf::int32 SJ_CabDoorSlideInfo::doorsystemregionid() const {
  return doorsystemregionid_;
}
inline void SJ_CabDoorSlideInfo::set_doorsystemregionid(::google::protobuf::int32 value) {
  set_has_doorsystemregionid();
  doorsystemregionid_ = value;
}

// required int32 SlideID = 7;
inline bool SJ_CabDoorSlideInfo::has_slideid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_slideid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabDoorSlideInfo::clear_has_slideid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabDoorSlideInfo::clear_slideid() {
  slideid_ = 0;
  clear_has_slideid();
}
inline ::google::protobuf::int32 SJ_CabDoorSlideInfo::slideid() const {
  return slideid_;
}
inline void SJ_CabDoorSlideInfo::set_slideid(::google::protobuf::int32 value) {
  set_has_slideid();
  slideid_ = value;
}

// required int32 GTypeID = 8;
inline bool SJ_CabDoorSlideInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabDoorSlideInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabDoorSlideInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_CabDoorSlideInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_CabDoorSlideInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 FactoryID = 9;
inline bool SJ_CabDoorSlideInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabDoorSlideInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabDoorSlideInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabDoorSlideInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabDoorSlideInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 10;
inline bool SJ_CabDoorSlideInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabDoorSlideInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabDoorSlideInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabDoorSlideInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabDoorSlideInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 SlidePosition = 11;
inline bool SJ_CabDoorSlideInfo::has_slideposition() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_slideposition() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabDoorSlideInfo::clear_has_slideposition() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabDoorSlideInfo::clear_slideposition() {
  slideposition_ = 0;
  clear_has_slideposition();
}
inline ::google::protobuf::int32 SJ_CabDoorSlideInfo::slideposition() const {
  return slideposition_;
}
inline void SJ_CabDoorSlideInfo::set_slideposition(::google::protobuf::int32 value) {
  set_has_slideposition();
  slideposition_ = value;
}

// required int32 SupplyType = 12;
inline bool SJ_CabDoorSlideInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabDoorSlideInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabDoorSlideInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_CabDoorSlideInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_CabDoorSlideInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required double XLen = 13;
inline bool SJ_CabDoorSlideInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabDoorSlideInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabDoorSlideInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_CabDoorSlideInfo::xlen() const {
  return xlen_;
}
inline void SJ_CabDoorSlideInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 14;
inline bool SJ_CabDoorSlideInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabDoorSlideInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabDoorSlideInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_CabDoorSlideInfo::ylen() const {
  return ylen_;
}
inline void SJ_CabDoorSlideInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 15;
inline bool SJ_CabDoorSlideInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabDoorSlideInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabDoorSlideInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_CabDoorSlideInfo::zlen() const {
  return zlen_;
}
inline void SJ_CabDoorSlideInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double RealXLen = 16;
inline bool SJ_CabDoorSlideInfo::has_realxlen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_realxlen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabDoorSlideInfo::clear_has_realxlen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabDoorSlideInfo::clear_realxlen() {
  realxlen_ = 0;
  clear_has_realxlen();
}
inline double SJ_CabDoorSlideInfo::realxlen() const {
  return realxlen_;
}
inline void SJ_CabDoorSlideInfo::set_realxlen(double value) {
  set_has_realxlen();
  realxlen_ = value;
}

// required double RealYLen = 17;
inline bool SJ_CabDoorSlideInfo::has_realylen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_realylen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_CabDoorSlideInfo::clear_has_realylen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_CabDoorSlideInfo::clear_realylen() {
  realylen_ = 0;
  clear_has_realylen();
}
inline double SJ_CabDoorSlideInfo::realylen() const {
  return realylen_;
}
inline void SJ_CabDoorSlideInfo::set_realylen(double value) {
  set_has_realylen();
  realylen_ = value;
}

// required double RealZLen = 18;
inline bool SJ_CabDoorSlideInfo::has_realzlen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_realzlen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_CabDoorSlideInfo::clear_has_realzlen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_CabDoorSlideInfo::clear_realzlen() {
  realzlen_ = 0;
  clear_has_realzlen();
}
inline double SJ_CabDoorSlideInfo::realzlen() const {
  return realzlen_;
}
inline void SJ_CabDoorSlideInfo::set_realzlen(double value) {
  set_has_realzlen();
  realzlen_ = value;
}

// required double XOffsetLen = 19;
inline bool SJ_CabDoorSlideInfo::has_xoffsetlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_xoffsetlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_CabDoorSlideInfo::clear_has_xoffsetlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_CabDoorSlideInfo::clear_xoffsetlen() {
  xoffsetlen_ = 0;
  clear_has_xoffsetlen();
}
inline double SJ_CabDoorSlideInfo::xoffsetlen() const {
  return xoffsetlen_;
}
inline void SJ_CabDoorSlideInfo::set_xoffsetlen(double value) {
  set_has_xoffsetlen();
  xoffsetlen_ = value;
}

// required double YOffsetLen = 20;
inline bool SJ_CabDoorSlideInfo::has_yoffsetlen() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_yoffsetlen() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_CabDoorSlideInfo::clear_has_yoffsetlen() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_CabDoorSlideInfo::clear_yoffsetlen() {
  yoffsetlen_ = 0;
  clear_has_yoffsetlen();
}
inline double SJ_CabDoorSlideInfo::yoffsetlen() const {
  return yoffsetlen_;
}
inline void SJ_CabDoorSlideInfo::set_yoffsetlen(double value) {
  set_has_yoffsetlen();
  yoffsetlen_ = value;
}

// required double ZOffsetLen = 21;
inline bool SJ_CabDoorSlideInfo::has_zoffsetlen() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_zoffsetlen() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_CabDoorSlideInfo::clear_has_zoffsetlen() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_CabDoorSlideInfo::clear_zoffsetlen() {
  zoffsetlen_ = 0;
  clear_has_zoffsetlen();
}
inline double SJ_CabDoorSlideInfo::zoffsetlen() const {
  return zoffsetlen_;
}
inline void SJ_CabDoorSlideInfo::set_zoffsetlen(double value) {
  set_has_zoffsetlen();
  zoffsetlen_ = value;
}

// required int32 CreatorID = 22;
inline bool SJ_CabDoorSlideInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_CabDoorSlideInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_CabDoorSlideInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabDoorSlideInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabDoorSlideInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 23;
inline bool SJ_CabDoorSlideInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_CabDoorSlideInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_CabDoorSlideInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabDoorSlideInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabDoorSlideInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 24;
inline bool SJ_CabDoorSlideInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_CabDoorSlideInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_CabDoorSlideInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabDoorSlideInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabDoorSlideInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 25;
inline bool SJ_CabDoorSlideInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_CabDoorSlideInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_CabDoorSlideInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_CabDoorSlideInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabDoorSlideInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabDoorSlideInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_CabDoorSystemInfo

// required int32 CabDoorSystemID = 1;
inline bool SJ_CabDoorSystemInfo::has_cabdoorsystemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_cabdoorsystemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabDoorSystemInfo::clear_has_cabdoorsystemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabDoorSystemInfo::clear_cabdoorsystemid() {
  cabdoorsystemid_ = 0;
  clear_has_cabdoorsystemid();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::cabdoorsystemid() const {
  return cabdoorsystemid_;
}
inline void SJ_CabDoorSystemInfo::set_cabdoorsystemid(::google::protobuf::int32 value) {
  set_has_cabdoorsystemid();
  cabdoorsystemid_ = value;
}

// required int32 CabID = 2;
inline bool SJ_CabDoorSystemInfo::has_cabid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_cabid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabDoorSystemInfo::clear_has_cabid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabDoorSystemInfo::clear_cabid() {
  cabid_ = 0;
  clear_has_cabid();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::cabid() const {
  return cabid_;
}
inline void SJ_CabDoorSystemInfo::set_cabid(::google::protobuf::int32 value) {
  set_has_cabid();
  cabid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_CabDoorSystemInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabDoorSystemInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabDoorSystemInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabDoorSystemInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabDoorSystemInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabDoorSystemInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabDoorSystemInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabDoorSystemInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabDoorSystemInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabDoorSystemInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabDoorSystemInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabDoorSystemInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabDoorSystemInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 CabDesignDoorSystemID = 6;
inline bool SJ_CabDoorSystemInfo::has_cabdesigndoorsystemid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_cabdesigndoorsystemid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabDoorSystemInfo::clear_has_cabdesigndoorsystemid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabDoorSystemInfo::clear_cabdesigndoorsystemid() {
  cabdesigndoorsystemid_ = 0;
  clear_has_cabdesigndoorsystemid();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::cabdesigndoorsystemid() const {
  return cabdesigndoorsystemid_;
}
inline void SJ_CabDoorSystemInfo::set_cabdesigndoorsystemid(::google::protobuf::int32 value) {
  set_has_cabdesigndoorsystemid();
  cabdesigndoorsystemid_ = value;
}

// required int32 CabDesignID = 7;
inline bool SJ_CabDoorSystemInfo::has_cabdesignid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_cabdesignid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabDoorSystemInfo::clear_has_cabdesignid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabDoorSystemInfo::clear_cabdesignid() {
  cabdesignid_ = 0;
  clear_has_cabdesignid();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::cabdesignid() const {
  return cabdesignid_;
}
inline void SJ_CabDoorSystemInfo::set_cabdesignid(::google::protobuf::int32 value) {
  set_has_cabdesignid();
  cabdesignid_ = value;
}

// required int32 FactoryID = 8;
inline bool SJ_CabDoorSystemInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabDoorSystemInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabDoorSystemInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabDoorSystemInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 9;
inline bool SJ_CabDoorSystemInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabDoorSystemInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabDoorSystemInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabDoorSystemInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabDoorSystemInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 DoorSystemID = 10;
inline bool SJ_CabDoorSystemInfo::has_doorsystemid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_doorsystemid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabDoorSystemInfo::clear_has_doorsystemid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabDoorSystemInfo::clear_doorsystemid() {
  doorsystemid_ = 0;
  clear_has_doorsystemid();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::doorsystemid() const {
  return doorsystemid_;
}
inline void SJ_CabDoorSystemInfo::set_doorsystemid(::google::protobuf::int32 value) {
  set_has_doorsystemid();
  doorsystemid_ = value;
}

// required int32 DoorMatPlanID = 11;
inline bool SJ_CabDoorSystemInfo::has_doormatplanid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_doormatplanid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabDoorSystemInfo::clear_has_doormatplanid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabDoorSystemInfo::clear_doormatplanid() {
  doormatplanid_ = 0;
  clear_has_doormatplanid();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::doormatplanid() const {
  return doormatplanid_;
}
inline void SJ_CabDoorSystemInfo::set_doormatplanid(::google::protobuf::int32 value) {
  set_has_doormatplanid();
  doormatplanid_ = value;
}

// required int32 SupplyType = 12;
inline bool SJ_CabDoorSystemInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabDoorSystemInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabDoorSystemInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_CabDoorSystemInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required bool IsFakeDel = 13;
inline bool SJ_CabDoorSystemInfo::has_isfakedel() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_isfakedel() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_isfakedel() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabDoorSystemInfo::clear_isfakedel() {
  isfakedel_ = false;
  clear_has_isfakedel();
}
inline bool SJ_CabDoorSystemInfo::isfakedel() const {
  return isfakedel_;
}
inline void SJ_CabDoorSystemInfo::set_isfakedel(bool value) {
  set_has_isfakedel();
  isfakedel_ = value;
}

// required int32 XDock = 14;
inline bool SJ_CabDoorSystemInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabDoorSystemInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::xdock() const {
  return xdock_;
}
inline void SJ_CabDoorSystemInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 15;
inline bool SJ_CabDoorSystemInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabDoorSystemInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::ydock() const {
  return ydock_;
}
inline void SJ_CabDoorSystemInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 16;
inline bool SJ_CabDoorSystemInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabDoorSystemInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::zdock() const {
  return zdock_;
}
inline void SJ_CabDoorSystemInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required double XLen = 17;
inline bool SJ_CabDoorSystemInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_CabDoorSystemInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_CabDoorSystemInfo::xlen() const {
  return xlen_;
}
inline void SJ_CabDoorSystemInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 18;
inline bool SJ_CabDoorSystemInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_CabDoorSystemInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_CabDoorSystemInfo::ylen() const {
  return ylen_;
}
inline void SJ_CabDoorSystemInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 19;
inline bool SJ_CabDoorSystemInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_CabDoorSystemInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_CabDoorSystemInfo::zlen() const {
  return zlen_;
}
inline void SJ_CabDoorSystemInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double XAdjustLen = 20;
inline bool SJ_CabDoorSystemInfo::has_xadjustlen() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_xadjustlen() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_xadjustlen() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_CabDoorSystemInfo::clear_xadjustlen() {
  xadjustlen_ = 0;
  clear_has_xadjustlen();
}
inline double SJ_CabDoorSystemInfo::xadjustlen() const {
  return xadjustlen_;
}
inline void SJ_CabDoorSystemInfo::set_xadjustlen(double value) {
  set_has_xadjustlen();
  xadjustlen_ = value;
}

// required double YAdjustLen = 21;
inline bool SJ_CabDoorSystemInfo::has_yadjustlen() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_yadjustlen() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_yadjustlen() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_CabDoorSystemInfo::clear_yadjustlen() {
  yadjustlen_ = 0;
  clear_has_yadjustlen();
}
inline double SJ_CabDoorSystemInfo::yadjustlen() const {
  return yadjustlen_;
}
inline void SJ_CabDoorSystemInfo::set_yadjustlen(double value) {
  set_has_yadjustlen();
  yadjustlen_ = value;
}

// required double RealXLen = 22;
inline bool SJ_CabDoorSystemInfo::has_realxlen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_realxlen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_realxlen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_CabDoorSystemInfo::clear_realxlen() {
  realxlen_ = 0;
  clear_has_realxlen();
}
inline double SJ_CabDoorSystemInfo::realxlen() const {
  return realxlen_;
}
inline void SJ_CabDoorSystemInfo::set_realxlen(double value) {
  set_has_realxlen();
  realxlen_ = value;
}

// required double RealYLen = 23;
inline bool SJ_CabDoorSystemInfo::has_realylen() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_realylen() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_realylen() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_CabDoorSystemInfo::clear_realylen() {
  realylen_ = 0;
  clear_has_realylen();
}
inline double SJ_CabDoorSystemInfo::realylen() const {
  return realylen_;
}
inline void SJ_CabDoorSystemInfo::set_realylen(double value) {
  set_has_realylen();
  realylen_ = value;
}

// required double RealZLen = 24;
inline bool SJ_CabDoorSystemInfo::has_realzlen() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_realzlen() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_realzlen() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_CabDoorSystemInfo::clear_realzlen() {
  realzlen_ = 0;
  clear_has_realzlen();
}
inline double SJ_CabDoorSystemInfo::realzlen() const {
  return realzlen_;
}
inline void SJ_CabDoorSystemInfo::set_realzlen(double value) {
  set_has_realzlen();
  realzlen_ = value;
}

// required double XOffsetLen = 25;
inline bool SJ_CabDoorSystemInfo::has_xoffsetlen() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_xoffsetlen() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_xoffsetlen() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_CabDoorSystemInfo::clear_xoffsetlen() {
  xoffsetlen_ = 0;
  clear_has_xoffsetlen();
}
inline double SJ_CabDoorSystemInfo::xoffsetlen() const {
  return xoffsetlen_;
}
inline void SJ_CabDoorSystemInfo::set_xoffsetlen(double value) {
  set_has_xoffsetlen();
  xoffsetlen_ = value;
}

// required double YOffsetLen = 26;
inline bool SJ_CabDoorSystemInfo::has_yoffsetlen() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_yoffsetlen() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_yoffsetlen() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_CabDoorSystemInfo::clear_yoffsetlen() {
  yoffsetlen_ = 0;
  clear_has_yoffsetlen();
}
inline double SJ_CabDoorSystemInfo::yoffsetlen() const {
  return yoffsetlen_;
}
inline void SJ_CabDoorSystemInfo::set_yoffsetlen(double value) {
  set_has_yoffsetlen();
  yoffsetlen_ = value;
}

// required double ZOffsetLen = 27;
inline bool SJ_CabDoorSystemInfo::has_zoffsetlen() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_zoffsetlen() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_zoffsetlen() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_CabDoorSystemInfo::clear_zoffsetlen() {
  zoffsetlen_ = 0;
  clear_has_zoffsetlen();
}
inline double SJ_CabDoorSystemInfo::zoffsetlen() const {
  return zoffsetlen_;
}
inline void SJ_CabDoorSystemInfo::set_zoffsetlen(double value) {
  set_has_zoffsetlen();
  zoffsetlen_ = value;
}

// required double RealXOffsetLen = 28;
inline bool SJ_CabDoorSystemInfo::has_realxoffsetlen() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_realxoffsetlen() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_realxoffsetlen() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_CabDoorSystemInfo::clear_realxoffsetlen() {
  realxoffsetlen_ = 0;
  clear_has_realxoffsetlen();
}
inline double SJ_CabDoorSystemInfo::realxoffsetlen() const {
  return realxoffsetlen_;
}
inline void SJ_CabDoorSystemInfo::set_realxoffsetlen(double value) {
  set_has_realxoffsetlen();
  realxoffsetlen_ = value;
}

// required double RealYOffsetLen = 29;
inline bool SJ_CabDoorSystemInfo::has_realyoffsetlen() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_realyoffsetlen() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_realyoffsetlen() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_CabDoorSystemInfo::clear_realyoffsetlen() {
  realyoffsetlen_ = 0;
  clear_has_realyoffsetlen();
}
inline double SJ_CabDoorSystemInfo::realyoffsetlen() const {
  return realyoffsetlen_;
}
inline void SJ_CabDoorSystemInfo::set_realyoffsetlen(double value) {
  set_has_realyoffsetlen();
  realyoffsetlen_ = value;
}

// required double RealZOffsetLen = 30;
inline bool SJ_CabDoorSystemInfo::has_realzoffsetlen() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_realzoffsetlen() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_realzoffsetlen() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SJ_CabDoorSystemInfo::clear_realzoffsetlen() {
  realzoffsetlen_ = 0;
  clear_has_realzoffsetlen();
}
inline double SJ_CabDoorSystemInfo::realzoffsetlen() const {
  return realzoffsetlen_;
}
inline void SJ_CabDoorSystemInfo::set_realzoffsetlen(double value) {
  set_has_realzoffsetlen();
  realzoffsetlen_ = value;
}

// required int32 CreatorID = 31;
inline bool SJ_CabDoorSystemInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SJ_CabDoorSystemInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabDoorSystemInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 32;
inline bool SJ_CabDoorSystemInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SJ_CabDoorSystemInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SJ_CabDoorSystemInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabDoorSystemInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabDoorSystemInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 33;
inline bool SJ_CabDoorSystemInfo::has_createtime() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_createtime() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SJ_CabDoorSystemInfo::clear_has_createtime() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SJ_CabDoorSystemInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabDoorSystemInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabDoorSystemInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 34;
inline bool SJ_CabDoorSystemInfo::has_updatetime() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SJ_CabDoorSystemInfo::set_has_updatetime() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SJ_CabDoorSystemInfo::clear_has_updatetime() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SJ_CabDoorSystemInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabDoorSystemInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabDoorSystemInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_CabFNFHWFInfo

// required int32 CabFNFHWFID = 1;
inline bool SJ_CabFNFHWFInfo::has_cabfnfhwfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_cabfnfhwfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabFNFHWFInfo::clear_has_cabfnfhwfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabFNFHWFInfo::clear_cabfnfhwfid() {
  cabfnfhwfid_ = 0;
  clear_has_cabfnfhwfid();
}
inline ::google::protobuf::int32 SJ_CabFNFHWFInfo::cabfnfhwfid() const {
  return cabfnfhwfid_;
}
inline void SJ_CabFNFHWFInfo::set_cabfnfhwfid(::google::protobuf::int32 value) {
  set_has_cabfnfhwfid();
  cabfnfhwfid_ = value;
}

// required int32 CabFNFID = 2;
inline bool SJ_CabFNFHWFInfo::has_cabfnfid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_cabfnfid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabFNFHWFInfo::clear_has_cabfnfid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabFNFHWFInfo::clear_cabfnfid() {
  cabfnfid_ = 0;
  clear_has_cabfnfid();
}
inline ::google::protobuf::int32 SJ_CabFNFHWFInfo::cabfnfid() const {
  return cabfnfid_;
}
inline void SJ_CabFNFHWFInfo::set_cabfnfid(::google::protobuf::int32 value) {
  set_has_cabfnfid();
  cabfnfid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_CabFNFHWFInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabFNFHWFInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabFNFHWFInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabFNFHWFInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabFNFHWFInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabFNFHWFInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabFNFHWFInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabFNFHWFInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabFNFHWFInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabFNFHWFInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabFNFHWFInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabFNFHWFInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabFNFHWFInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabFNFHWFInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabFNFHWFInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 FNFittingID = 6;
inline bool SJ_CabFNFHWFInfo::has_fnfittingid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_fnfittingid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabFNFHWFInfo::clear_has_fnfittingid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabFNFHWFInfo::clear_fnfittingid() {
  fnfittingid_ = 0;
  clear_has_fnfittingid();
}
inline ::google::protobuf::int32 SJ_CabFNFHWFInfo::fnfittingid() const {
  return fnfittingid_;
}
inline void SJ_CabFNFHWFInfo::set_fnfittingid(::google::protobuf::int32 value) {
  set_has_fnfittingid();
  fnfittingid_ = value;
}

// required int32 HWFittingID = 7;
inline bool SJ_CabFNFHWFInfo::has_hwfittingid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_hwfittingid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabFNFHWFInfo::clear_has_hwfittingid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabFNFHWFInfo::clear_hwfittingid() {
  hwfittingid_ = 0;
  clear_has_hwfittingid();
}
inline ::google::protobuf::int32 SJ_CabFNFHWFInfo::hwfittingid() const {
  return hwfittingid_;
}
inline void SJ_CabFNFHWFInfo::set_hwfittingid(::google::protobuf::int32 value) {
  set_has_hwfittingid();
  hwfittingid_ = value;
}

// required int32 FittingType = 8;
inline bool SJ_CabFNFHWFInfo::has_fittingtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_fittingtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabFNFHWFInfo::clear_has_fittingtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabFNFHWFInfo::clear_fittingtype() {
  fittingtype_ = 0;
  clear_has_fittingtype();
}
inline ::google::protobuf::int32 SJ_CabFNFHWFInfo::fittingtype() const {
  return fittingtype_;
}
inline void SJ_CabFNFHWFInfo::set_fittingtype(::google::protobuf::int32 value) {
  set_has_fittingtype();
  fittingtype_ = value;
}

// required int32 FactoryID = 9;
inline bool SJ_CabFNFHWFInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabFNFHWFInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabFNFHWFInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabFNFHWFInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabFNFHWFInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 10;
inline bool SJ_CabFNFHWFInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabFNFHWFInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabFNFHWFInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabFNFHWFInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabFNFHWFInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 IsFakeDel = 11;
inline bool SJ_CabFNFHWFInfo::has_isfakedel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_isfakedel() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabFNFHWFInfo::clear_has_isfakedel() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabFNFHWFInfo::clear_isfakedel() {
  isfakedel_ = 0;
  clear_has_isfakedel();
}
inline ::google::protobuf::int32 SJ_CabFNFHWFInfo::isfakedel() const {
  return isfakedel_;
}
inline void SJ_CabFNFHWFInfo::set_isfakedel(::google::protobuf::int32 value) {
  set_has_isfakedel();
  isfakedel_ = value;
}

// required int32 UseCount = 12;
inline bool SJ_CabFNFHWFInfo::has_usecount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_usecount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabFNFHWFInfo::clear_has_usecount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabFNFHWFInfo::clear_usecount() {
  usecount_ = 0;
  clear_has_usecount();
}
inline ::google::protobuf::int32 SJ_CabFNFHWFInfo::usecount() const {
  return usecount_;
}
inline void SJ_CabFNFHWFInfo::set_usecount(::google::protobuf::int32 value) {
  set_has_usecount();
  usecount_ = value;
}

// required int32 CreatorID = 13;
inline bool SJ_CabFNFHWFInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabFNFHWFInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabFNFHWFInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabFNFHWFInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabFNFHWFInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 14;
inline bool SJ_CabFNFHWFInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabFNFHWFInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabFNFHWFInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabFNFHWFInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabFNFHWFInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 15;
inline bool SJ_CabFNFHWFInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabFNFHWFInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabFNFHWFInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabFNFHWFInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabFNFHWFInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 16;
inline bool SJ_CabFNFHWFInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabFNFHWFInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabFNFHWFInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabFNFHWFInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabFNFHWFInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabFNFHWFInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_CabFNFHoleInfo

// required int32 CabFNFHoleID = 1;
inline bool SJ_CabFNFHoleInfo::has_cabfnfholeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_cabfnfholeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabFNFHoleInfo::clear_has_cabfnfholeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabFNFHoleInfo::clear_cabfnfholeid() {
  cabfnfholeid_ = 0;
  clear_has_cabfnfholeid();
}
inline ::google::protobuf::int32 SJ_CabFNFHoleInfo::cabfnfholeid() const {
  return cabfnfholeid_;
}
inline void SJ_CabFNFHoleInfo::set_cabfnfholeid(::google::protobuf::int32 value) {
  set_has_cabfnfholeid();
  cabfnfholeid_ = value;
}

// required int32 CabFNFID = 2;
inline bool SJ_CabFNFHoleInfo::has_cabfnfid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_cabfnfid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabFNFHoleInfo::clear_has_cabfnfid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabFNFHoleInfo::clear_cabfnfid() {
  cabfnfid_ = 0;
  clear_has_cabfnfid();
}
inline ::google::protobuf::int32 SJ_CabFNFHoleInfo::cabfnfid() const {
  return cabfnfid_;
}
inline void SJ_CabFNFHoleInfo::set_cabfnfid(::google::protobuf::int32 value) {
  set_has_cabfnfid();
  cabfnfid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_CabFNFHoleInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabFNFHoleInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabFNFHoleInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabFNFHoleInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabFNFHoleInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabFNFHoleInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabFNFHoleInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabFNFHoleInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabFNFHoleInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabFNFHoleInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabFNFHoleInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabFNFHoleInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabFNFHoleInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabFNFHoleInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabFNFHoleInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 HoleID = 6;
inline bool SJ_CabFNFHoleInfo::has_holeid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_holeid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabFNFHoleInfo::clear_has_holeid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabFNFHoleInfo::clear_holeid() {
  holeid_ = 0;
  clear_has_holeid();
}
inline ::google::protobuf::int32 SJ_CabFNFHoleInfo::holeid() const {
  return holeid_;
}
inline void SJ_CabFNFHoleInfo::set_holeid(::google::protobuf::int32 value) {
  set_has_holeid();
  holeid_ = value;
}

// required int32 FNFittingID = 7;
inline bool SJ_CabFNFHoleInfo::has_fnfittingid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_fnfittingid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabFNFHoleInfo::clear_has_fnfittingid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabFNFHoleInfo::clear_fnfittingid() {
  fnfittingid_ = 0;
  clear_has_fnfittingid();
}
inline ::google::protobuf::int32 SJ_CabFNFHoleInfo::fnfittingid() const {
  return fnfittingid_;
}
inline void SJ_CabFNFHoleInfo::set_fnfittingid(::google::protobuf::int32 value) {
  set_has_fnfittingid();
  fnfittingid_ = value;
}

// required int32 FactoryID = 8;
inline bool SJ_CabFNFHoleInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabFNFHoleInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabFNFHoleInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabFNFHoleInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabFNFHoleInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 9;
inline bool SJ_CabFNFHoleInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabFNFHoleInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabFNFHoleInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabFNFHoleInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabFNFHoleInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 HoleTypeID = 10;
inline bool SJ_CabFNFHoleInfo::has_holetypeid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_holetypeid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabFNFHoleInfo::clear_has_holetypeid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabFNFHoleInfo::clear_holetypeid() {
  holetypeid_ = 0;
  clear_has_holetypeid();
}
inline ::google::protobuf::int32 SJ_CabFNFHoleInfo::holetypeid() const {
  return holetypeid_;
}
inline void SJ_CabFNFHoleInfo::set_holetypeid(::google::protobuf::int32 value) {
  set_has_holetypeid();
  holetypeid_ = value;
}

// required int32 HolePicID = 11;
inline bool SJ_CabFNFHoleInfo::has_holepicid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_holepicid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabFNFHoleInfo::clear_has_holepicid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabFNFHoleInfo::clear_holepicid() {
  holepicid_ = 0;
  clear_has_holepicid();
}
inline ::google::protobuf::int32 SJ_CabFNFHoleInfo::holepicid() const {
  return holepicid_;
}
inline void SJ_CabFNFHoleInfo::set_holepicid(::google::protobuf::int32 value) {
  set_has_holepicid();
  holepicid_ = value;
}

// required double XLen = 12;
inline bool SJ_CabFNFHoleInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabFNFHoleInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabFNFHoleInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_CabFNFHoleInfo::xlen() const {
  return xlen_;
}
inline void SJ_CabFNFHoleInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 13;
inline bool SJ_CabFNFHoleInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabFNFHoleInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabFNFHoleInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_CabFNFHoleInfo::ylen() const {
  return ylen_;
}
inline void SJ_CabFNFHoleInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double OverHeight = 14;
inline bool SJ_CabFNFHoleInfo::has_overheight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_overheight() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabFNFHoleInfo::clear_has_overheight() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabFNFHoleInfo::clear_overheight() {
  overheight_ = 0;
  clear_has_overheight();
}
inline double SJ_CabFNFHoleInfo::overheight() const {
  return overheight_;
}
inline void SJ_CabFNFHoleInfo::set_overheight(double value) {
  set_has_overheight();
  overheight_ = value;
}

// required double MinXDistance = 15;
inline bool SJ_CabFNFHoleInfo::has_minxdistance() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_minxdistance() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabFNFHoleInfo::clear_has_minxdistance() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabFNFHoleInfo::clear_minxdistance() {
  minxdistance_ = 0;
  clear_has_minxdistance();
}
inline double SJ_CabFNFHoleInfo::minxdistance() const {
  return minxdistance_;
}
inline void SJ_CabFNFHoleInfo::set_minxdistance(double value) {
  set_has_minxdistance();
  minxdistance_ = value;
}

// required double MinZDistance = 16;
inline bool SJ_CabFNFHoleInfo::has_minzdistance() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabFNFHoleInfo::set_has_minzdistance() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabFNFHoleInfo::clear_has_minzdistance() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabFNFHoleInfo::clear_minzdistance() {
  minzdistance_ = 0;
  clear_has_minzdistance();
}
inline double SJ_CabFNFHoleInfo::minzdistance() const {
  return minzdistance_;
}
inline void SJ_CabFNFHoleInfo::set_minzdistance(double value) {
  set_has_minzdistance();
  minzdistance_ = value;
}

// -------------------------------------------------------------------

// SJ_CabFNFInfo

// required int32 CabFNFID = 1;
inline bool SJ_CabFNFInfo::has_cabfnfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabFNFInfo::set_has_cabfnfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabFNFInfo::clear_has_cabfnfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabFNFInfo::clear_cabfnfid() {
  cabfnfid_ = 0;
  clear_has_cabfnfid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::cabfnfid() const {
  return cabfnfid_;
}
inline void SJ_CabFNFInfo::set_cabfnfid(::google::protobuf::int32 value) {
  set_has_cabfnfid();
  cabfnfid_ = value;
}

// required int32 DesignOwnerID = 2;
inline bool SJ_CabFNFInfo::has_designownerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabFNFInfo::set_has_designownerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabFNFInfo::clear_has_designownerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabFNFInfo::clear_designownerid() {
  designownerid_ = 0;
  clear_has_designownerid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::designownerid() const {
  return designownerid_;
}
inline void SJ_CabFNFInfo::set_designownerid(::google::protobuf::int32 value) {
  set_has_designownerid();
  designownerid_ = value;
}

// required int32 DesignOwnerGTypeID = 3;
inline bool SJ_CabFNFInfo::has_designownergtypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabFNFInfo::set_has_designownergtypeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabFNFInfo::clear_has_designownergtypeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabFNFInfo::clear_designownergtypeid() {
  designownergtypeid_ = 0;
  clear_has_designownergtypeid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::designownergtypeid() const {
  return designownergtypeid_;
}
inline void SJ_CabFNFInfo::set_designownergtypeid(::google::protobuf::int32 value) {
  set_has_designownergtypeid();
  designownergtypeid_ = value;
}

// required int32 OrderCate = 4;
inline bool SJ_CabFNFInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabFNFInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabFNFInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabFNFInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabFNFInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabFNFInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabFNFInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabFNFInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabFNFInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabFNFInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 6;
inline bool SJ_CabFNFInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabFNFInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabFNFInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabFNFInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabFNFInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabFNFInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 ContainerID = 7;
inline bool SJ_CabFNFInfo::has_containerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabFNFInfo::set_has_containerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabFNFInfo::clear_has_containerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabFNFInfo::clear_containerid() {
  containerid_ = 0;
  clear_has_containerid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::containerid() const {
  return containerid_;
}
inline void SJ_CabFNFInfo::set_containerid(::google::protobuf::int32 value) {
  set_has_containerid();
  containerid_ = value;
}

// required int32 ContainerGTypeID = 8;
inline bool SJ_CabFNFInfo::has_containergtypeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabFNFInfo::set_has_containergtypeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabFNFInfo::clear_has_containergtypeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabFNFInfo::clear_containergtypeid() {
  containergtypeid_ = 0;
  clear_has_containergtypeid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::containergtypeid() const {
  return containergtypeid_;
}
inline void SJ_CabFNFInfo::set_containergtypeid(::google::protobuf::int32 value) {
  set_has_containergtypeid();
  containergtypeid_ = value;
}

// required int32 CabDesignFNFittingID = 9;
inline bool SJ_CabFNFInfo::has_cabdesignfnfittingid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabFNFInfo::set_has_cabdesignfnfittingid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabFNFInfo::clear_has_cabdesignfnfittingid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabFNFInfo::clear_cabdesignfnfittingid() {
  cabdesignfnfittingid_ = 0;
  clear_has_cabdesignfnfittingid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::cabdesignfnfittingid() const {
  return cabdesignfnfittingid_;
}
inline void SJ_CabFNFInfo::set_cabdesignfnfittingid(::google::protobuf::int32 value) {
  set_has_cabdesignfnfittingid();
  cabdesignfnfittingid_ = value;
}

// required int32 FNFittingID = 10;
inline bool SJ_CabFNFInfo::has_fnfittingid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabFNFInfo::set_has_fnfittingid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabFNFInfo::clear_has_fnfittingid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabFNFInfo::clear_fnfittingid() {
  fnfittingid_ = 0;
  clear_has_fnfittingid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::fnfittingid() const {
  return fnfittingid_;
}
inline void SJ_CabFNFInfo::set_fnfittingid(::google::protobuf::int32 value) {
  set_has_fnfittingid();
  fnfittingid_ = value;
}

// required int32 FactoryID = 11;
inline bool SJ_CabFNFInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabFNFInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabFNFInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabFNFInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabFNFInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 12;
inline bool SJ_CabFNFInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabFNFInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabFNFInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabFNFInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabFNFInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabFNFInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 DockObjID = 13;
inline bool SJ_CabFNFInfo::has_dockobjid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_dockobjid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabFNFInfo::clear_has_dockobjid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabFNFInfo::clear_dockobjid() {
  dockobjid_ = 0;
  clear_has_dockobjid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::dockobjid() const {
  return dockobjid_;
}
inline void SJ_CabFNFInfo::set_dockobjid(::google::protobuf::int32 value) {
  set_has_dockobjid();
  dockobjid_ = value;
}

// required int32 DockObjType = 14;
inline bool SJ_CabFNFInfo::has_dockobjtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_dockobjtype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabFNFInfo::clear_has_dockobjtype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabFNFInfo::clear_dockobjtype() {
  dockobjtype_ = 0;
  clear_has_dockobjtype();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::dockobjtype() const {
  return dockobjtype_;
}
inline void SJ_CabFNFInfo::set_dockobjtype(::google::protobuf::int32 value) {
  set_has_dockobjtype();
  dockobjtype_ = value;
}

// required double DockXPos = 15;
inline bool SJ_CabFNFInfo::has_dockxpos() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_dockxpos() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabFNFInfo::clear_has_dockxpos() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabFNFInfo::clear_dockxpos() {
  dockxpos_ = 0;
  clear_has_dockxpos();
}
inline double SJ_CabFNFInfo::dockxpos() const {
  return dockxpos_;
}
inline void SJ_CabFNFInfo::set_dockxpos(double value) {
  set_has_dockxpos();
  dockxpos_ = value;
}

// required double DockYPos = 16;
inline bool SJ_CabFNFInfo::has_dockypos() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_dockypos() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabFNFInfo::clear_has_dockypos() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabFNFInfo::clear_dockypos() {
  dockypos_ = 0;
  clear_has_dockypos();
}
inline double SJ_CabFNFInfo::dockypos() const {
  return dockypos_;
}
inline void SJ_CabFNFInfo::set_dockypos(double value) {
  set_has_dockypos();
  dockypos_ = value;
}

// required bool HasMark = 17;
inline bool SJ_CabFNFInfo::has_hasmark() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_hasmark() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_CabFNFInfo::clear_has_hasmark() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_CabFNFInfo::clear_hasmark() {
  hasmark_ = false;
  clear_has_hasmark();
}
inline bool SJ_CabFNFInfo::hasmark() const {
  return hasmark_;
}
inline void SJ_CabFNFInfo::set_hasmark(bool value) {
  set_has_hasmark();
  hasmark_ = value;
}

// required bool IsFakeDel = 18;
inline bool SJ_CabFNFInfo::has_isfakedel() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_isfakedel() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_CabFNFInfo::clear_has_isfakedel() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_CabFNFInfo::clear_isfakedel() {
  isfakedel_ = false;
  clear_has_isfakedel();
}
inline bool SJ_CabFNFInfo::isfakedel() const {
  return isfakedel_;
}
inline void SJ_CabFNFInfo::set_isfakedel(bool value) {
  set_has_isfakedel();
  isfakedel_ = value;
}

// required bool IsVisible = 19;
inline bool SJ_CabFNFInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_CabFNFInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_CabFNFInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_CabFNFInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_CabFNFInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 20;
inline bool SJ_CabFNFInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_CabFNFInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_CabFNFInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_CabFNFInfo::islocked() const {
  return islocked_;
}
inline void SJ_CabFNFInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required int32 MaterialID = 21;
inline bool SJ_CabFNFInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_CabFNFInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_CabFNFInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::materialid() const {
  return materialid_;
}
inline void SJ_CabFNFInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required int32 SupplyType = 22;
inline bool SJ_CabFNFInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_CabFNFInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_CabFNFInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_CabFNFInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 23;
inline bool SJ_CabFNFInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_CabFNFInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_CabFNFInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_CabFNFInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 XDock = 24;
inline bool SJ_CabFNFInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_CabFNFInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_CabFNFInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::xdock() const {
  return xdock_;
}
inline void SJ_CabFNFInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 25;
inline bool SJ_CabFNFInfo::has_ydock() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_ydock() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_CabFNFInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_CabFNFInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::ydock() const {
  return ydock_;
}
inline void SJ_CabFNFInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 26;
inline bool SJ_CabFNFInfo::has_zdock() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_zdock() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_CabFNFInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_CabFNFInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::zdock() const {
  return zdock_;
}
inline void SJ_CabFNFInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required double XLen = 27;
inline bool SJ_CabFNFInfo::has_xlen() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_xlen() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_CabFNFInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_CabFNFInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_CabFNFInfo::xlen() const {
  return xlen_;
}
inline void SJ_CabFNFInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 28;
inline bool SJ_CabFNFInfo::has_ylen() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_ylen() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_CabFNFInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_CabFNFInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_CabFNFInfo::ylen() const {
  return ylen_;
}
inline void SJ_CabFNFInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 29;
inline bool SJ_CabFNFInfo::has_zlen() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_zlen() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_CabFNFInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_CabFNFInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_CabFNFInfo::zlen() const {
  return zlen_;
}
inline void SJ_CabFNFInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double RealXLen = 30;
inline bool SJ_CabFNFInfo::has_realxlen() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_realxlen() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SJ_CabFNFInfo::clear_has_realxlen() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SJ_CabFNFInfo::clear_realxlen() {
  realxlen_ = 0;
  clear_has_realxlen();
}
inline double SJ_CabFNFInfo::realxlen() const {
  return realxlen_;
}
inline void SJ_CabFNFInfo::set_realxlen(double value) {
  set_has_realxlen();
  realxlen_ = value;
}

// required double RealYLen = 31;
inline bool SJ_CabFNFInfo::has_realylen() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_realylen() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SJ_CabFNFInfo::clear_has_realylen() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SJ_CabFNFInfo::clear_realylen() {
  realylen_ = 0;
  clear_has_realylen();
}
inline double SJ_CabFNFInfo::realylen() const {
  return realylen_;
}
inline void SJ_CabFNFInfo::set_realylen(double value) {
  set_has_realylen();
  realylen_ = value;
}

// required double RealZLen = 32;
inline bool SJ_CabFNFInfo::has_realzlen() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SJ_CabFNFInfo::set_has_realzlen() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SJ_CabFNFInfo::clear_has_realzlen() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SJ_CabFNFInfo::clear_realzlen() {
  realzlen_ = 0;
  clear_has_realzlen();
}
inline double SJ_CabFNFInfo::realzlen() const {
  return realzlen_;
}
inline void SJ_CabFNFInfo::set_realzlen(double value) {
  set_has_realzlen();
  realzlen_ = value;
}

// required double XOffsetLen = 33;
inline bool SJ_CabFNFInfo::has_xoffsetlen() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SJ_CabFNFInfo::set_has_xoffsetlen() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SJ_CabFNFInfo::clear_has_xoffsetlen() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SJ_CabFNFInfo::clear_xoffsetlen() {
  xoffsetlen_ = 0;
  clear_has_xoffsetlen();
}
inline double SJ_CabFNFInfo::xoffsetlen() const {
  return xoffsetlen_;
}
inline void SJ_CabFNFInfo::set_xoffsetlen(double value) {
  set_has_xoffsetlen();
  xoffsetlen_ = value;
}

// required double YOffsetLen = 34;
inline bool SJ_CabFNFInfo::has_yoffsetlen() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SJ_CabFNFInfo::set_has_yoffsetlen() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SJ_CabFNFInfo::clear_has_yoffsetlen() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SJ_CabFNFInfo::clear_yoffsetlen() {
  yoffsetlen_ = 0;
  clear_has_yoffsetlen();
}
inline double SJ_CabFNFInfo::yoffsetlen() const {
  return yoffsetlen_;
}
inline void SJ_CabFNFInfo::set_yoffsetlen(double value) {
  set_has_yoffsetlen();
  yoffsetlen_ = value;
}

// required double ZOffsetLen = 35;
inline bool SJ_CabFNFInfo::has_zoffsetlen() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SJ_CabFNFInfo::set_has_zoffsetlen() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SJ_CabFNFInfo::clear_has_zoffsetlen() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SJ_CabFNFInfo::clear_zoffsetlen() {
  zoffsetlen_ = 0;
  clear_has_zoffsetlen();
}
inline double SJ_CabFNFInfo::zoffsetlen() const {
  return zoffsetlen_;
}
inline void SJ_CabFNFInfo::set_zoffsetlen(double value) {
  set_has_zoffsetlen();
  zoffsetlen_ = value;
}

// required double YPos = 36;
inline bool SJ_CabFNFInfo::has_ypos() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SJ_CabFNFInfo::set_has_ypos() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SJ_CabFNFInfo::clear_has_ypos() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SJ_CabFNFInfo::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline double SJ_CabFNFInfo::ypos() const {
  return ypos_;
}
inline void SJ_CabFNFInfo::set_ypos(double value) {
  set_has_ypos();
  ypos_ = value;
}

// required int32 CreatorID = 37;
inline bool SJ_CabFNFInfo::has_creatorid() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SJ_CabFNFInfo::set_has_creatorid() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SJ_CabFNFInfo::clear_has_creatorid() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SJ_CabFNFInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabFNFInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 38;
inline bool SJ_CabFNFInfo::has_updaterid() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SJ_CabFNFInfo::set_has_updaterid() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SJ_CabFNFInfo::clear_has_updaterid() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SJ_CabFNFInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabFNFInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabFNFInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 39;
inline bool SJ_CabFNFInfo::has_createtime() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SJ_CabFNFInfo::set_has_createtime() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SJ_CabFNFInfo::clear_has_createtime() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SJ_CabFNFInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabFNFInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabFNFInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 40;
inline bool SJ_CabFNFInfo::has_updatetime() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SJ_CabFNFInfo::set_has_updatetime() {
  _has_bits_[1] |= 0x00000080u;
}
inline void SJ_CabFNFInfo::clear_has_updatetime() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void SJ_CabFNFInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabFNFInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabFNFInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string UserMemo = 41;
inline bool SJ_CabFNFInfo::has_usermemo() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void SJ_CabFNFInfo::set_has_usermemo() {
  _has_bits_[1] |= 0x00000100u;
}
inline void SJ_CabFNFInfo::clear_has_usermemo() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void SJ_CabFNFInfo::clear_usermemo() {
  if (usermemo_ != &::google::protobuf::internal::kEmptyString) {
    usermemo_->clear();
  }
  clear_has_usermemo();
}
inline const ::std::string& SJ_CabFNFInfo::usermemo() const {
  return *usermemo_;
}
inline void SJ_CabFNFInfo::set_usermemo(const ::std::string& value) {
  set_has_usermemo();
  if (usermemo_ == &::google::protobuf::internal::kEmptyString) {
    usermemo_ = new ::std::string;
  }
  usermemo_->assign(value);
}
inline void SJ_CabFNFInfo::set_usermemo(const char* value) {
  set_has_usermemo();
  if (usermemo_ == &::google::protobuf::internal::kEmptyString) {
    usermemo_ = new ::std::string;
  }
  usermemo_->assign(value);
}
inline void SJ_CabFNFInfo::set_usermemo(const char* value, size_t size) {
  set_has_usermemo();
  if (usermemo_ == &::google::protobuf::internal::kEmptyString) {
    usermemo_ = new ::std::string;
  }
  usermemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_CabFNFInfo::mutable_usermemo() {
  set_has_usermemo();
  if (usermemo_ == &::google::protobuf::internal::kEmptyString) {
    usermemo_ = new ::std::string;
  }
  return usermemo_;
}
inline ::std::string* SJ_CabFNFInfo::release_usermemo() {
  clear_has_usermemo();
  if (usermemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usermemo_;
    usermemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_CabFNFInfo::set_allocated_usermemo(::std::string* usermemo) {
  if (usermemo_ != &::google::protobuf::internal::kEmptyString) {
    delete usermemo_;
  }
  if (usermemo) {
    set_has_usermemo();
    usermemo_ = usermemo;
  } else {
    clear_has_usermemo();
    usermemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SJ_CabFNFPartInfo

// required int32 CabFNFPartID = 1;
inline bool SJ_CabFNFPartInfo::has_cabfnfpartid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_cabfnfpartid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabFNFPartInfo::clear_has_cabfnfpartid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabFNFPartInfo::clear_cabfnfpartid() {
  cabfnfpartid_ = 0;
  clear_has_cabfnfpartid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::cabfnfpartid() const {
  return cabfnfpartid_;
}
inline void SJ_CabFNFPartInfo::set_cabfnfpartid(::google::protobuf::int32 value) {
  set_has_cabfnfpartid();
  cabfnfpartid_ = value;
}

// required int32 CabFNFID = 2;
inline bool SJ_CabFNFPartInfo::has_cabfnfid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_cabfnfid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabFNFPartInfo::clear_has_cabfnfid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabFNFPartInfo::clear_cabfnfid() {
  cabfnfid_ = 0;
  clear_has_cabfnfid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::cabfnfid() const {
  return cabfnfid_;
}
inline void SJ_CabFNFPartInfo::set_cabfnfid(::google::protobuf::int32 value) {
  set_has_cabfnfid();
  cabfnfid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_CabFNFPartInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabFNFPartInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabFNFPartInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabFNFPartInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabFNFPartInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabFNFPartInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabFNFPartInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabFNFPartInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabFNFPartInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabFNFPartInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabFNFPartInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabFNFPartInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabFNFPartInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 FNFittingPartID = 6;
inline bool SJ_CabFNFPartInfo::has_fnfittingpartid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_fnfittingpartid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabFNFPartInfo::clear_has_fnfittingpartid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabFNFPartInfo::clear_fnfittingpartid() {
  fnfittingpartid_ = 0;
  clear_has_fnfittingpartid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::fnfittingpartid() const {
  return fnfittingpartid_;
}
inline void SJ_CabFNFPartInfo::set_fnfittingpartid(::google::protobuf::int32 value) {
  set_has_fnfittingpartid();
  fnfittingpartid_ = value;
}

// required int32 FNFittingID = 7;
inline bool SJ_CabFNFPartInfo::has_fnfittingid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_fnfittingid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabFNFPartInfo::clear_has_fnfittingid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabFNFPartInfo::clear_fnfittingid() {
  fnfittingid_ = 0;
  clear_has_fnfittingid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::fnfittingid() const {
  return fnfittingid_;
}
inline void SJ_CabFNFPartInfo::set_fnfittingid(::google::protobuf::int32 value) {
  set_has_fnfittingid();
  fnfittingid_ = value;
}

// required int32 FactoryID = 8;
inline bool SJ_CabFNFPartInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabFNFPartInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabFNFPartInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabFNFPartInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 9;
inline bool SJ_CabFNFPartInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabFNFPartInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabFNFPartInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabFNFPartInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabFNFPartInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 HWFittingID = 10;
inline bool SJ_CabFNFPartInfo::has_hwfittingid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_hwfittingid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabFNFPartInfo::clear_has_hwfittingid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabFNFPartInfo::clear_hwfittingid() {
  hwfittingid_ = 0;
  clear_has_hwfittingid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::hwfittingid() const {
  return hwfittingid_;
}
inline void SJ_CabFNFPartInfo::set_hwfittingid(::google::protobuf::int32 value) {
  set_has_hwfittingid();
  hwfittingid_ = value;
}

// required int32 MaterialID = 11;
inline bool SJ_CabFNFPartInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabFNFPartInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabFNFPartInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::materialid() const {
  return materialid_;
}
inline void SJ_CabFNFPartInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required int32 SealRuleID = 12;
inline bool SJ_CabFNFPartInfo::has_sealruleid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_sealruleid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabFNFPartInfo::clear_has_sealruleid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabFNFPartInfo::clear_sealruleid() {
  sealruleid_ = 0;
  clear_has_sealruleid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::sealruleid() const {
  return sealruleid_;
}
inline void SJ_CabFNFPartInfo::set_sealruleid(::google::protobuf::int32 value) {
  set_has_sealruleid();
  sealruleid_ = value;
}

// required int32 PartType = 13;
inline bool SJ_CabFNFPartInfo::has_parttype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_parttype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabFNFPartInfo::clear_has_parttype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabFNFPartInfo::clear_parttype() {
  parttype_ = 0;
  clear_has_parttype();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::parttype() const {
  return parttype_;
}
inline void SJ_CabFNFPartInfo::set_parttype(::google::protobuf::int32 value) {
  set_has_parttype();
  parttype_ = value;
}

// required int32 SupplyType = 14;
inline bool SJ_CabFNFPartInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabFNFPartInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabFNFPartInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_CabFNFPartInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 15;
inline bool SJ_CabFNFPartInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabFNFPartInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabFNFPartInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_CabFNFPartInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 ModelID = 16;
inline bool SJ_CabFNFPartInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabFNFPartInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabFNFPartInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::modelid() const {
  return modelid_;
}
inline void SJ_CabFNFPartInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required double XLen = 17;
inline bool SJ_CabFNFPartInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_CabFNFPartInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_CabFNFPartInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_CabFNFPartInfo::xlen() const {
  return xlen_;
}
inline void SJ_CabFNFPartInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 18;
inline bool SJ_CabFNFPartInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_CabFNFPartInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_CabFNFPartInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_CabFNFPartInfo::ylen() const {
  return ylen_;
}
inline void SJ_CabFNFPartInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 19;
inline bool SJ_CabFNFPartInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_CabFNFPartInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_CabFNFPartInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_CabFNFPartInfo::zlen() const {
  return zlen_;
}
inline void SJ_CabFNFPartInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double RealXLen = 20;
inline bool SJ_CabFNFPartInfo::has_realxlen() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_realxlen() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_CabFNFPartInfo::clear_has_realxlen() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_CabFNFPartInfo::clear_realxlen() {
  realxlen_ = 0;
  clear_has_realxlen();
}
inline double SJ_CabFNFPartInfo::realxlen() const {
  return realxlen_;
}
inline void SJ_CabFNFPartInfo::set_realxlen(double value) {
  set_has_realxlen();
  realxlen_ = value;
}

// required double RealYLen = 21;
inline bool SJ_CabFNFPartInfo::has_realylen() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_realylen() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_CabFNFPartInfo::clear_has_realylen() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_CabFNFPartInfo::clear_realylen() {
  realylen_ = 0;
  clear_has_realylen();
}
inline double SJ_CabFNFPartInfo::realylen() const {
  return realylen_;
}
inline void SJ_CabFNFPartInfo::set_realylen(double value) {
  set_has_realylen();
  realylen_ = value;
}

// required double RealZLen = 22;
inline bool SJ_CabFNFPartInfo::has_realzlen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_realzlen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_CabFNFPartInfo::clear_has_realzlen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_CabFNFPartInfo::clear_realzlen() {
  realzlen_ = 0;
  clear_has_realzlen();
}
inline double SJ_CabFNFPartInfo::realzlen() const {
  return realzlen_;
}
inline void SJ_CabFNFPartInfo::set_realzlen(double value) {
  set_has_realzlen();
  realzlen_ = value;
}

// required double XOffsetLen = 23;
inline bool SJ_CabFNFPartInfo::has_xoffsetlen() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_xoffsetlen() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_CabFNFPartInfo::clear_has_xoffsetlen() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_CabFNFPartInfo::clear_xoffsetlen() {
  xoffsetlen_ = 0;
  clear_has_xoffsetlen();
}
inline double SJ_CabFNFPartInfo::xoffsetlen() const {
  return xoffsetlen_;
}
inline void SJ_CabFNFPartInfo::set_xoffsetlen(double value) {
  set_has_xoffsetlen();
  xoffsetlen_ = value;
}

// required double YOffsetLen = 24;
inline bool SJ_CabFNFPartInfo::has_yoffsetlen() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_yoffsetlen() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_CabFNFPartInfo::clear_has_yoffsetlen() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_CabFNFPartInfo::clear_yoffsetlen() {
  yoffsetlen_ = 0;
  clear_has_yoffsetlen();
}
inline double SJ_CabFNFPartInfo::yoffsetlen() const {
  return yoffsetlen_;
}
inline void SJ_CabFNFPartInfo::set_yoffsetlen(double value) {
  set_has_yoffsetlen();
  yoffsetlen_ = value;
}

// required double ZOffsetLen = 25;
inline bool SJ_CabFNFPartInfo::has_zoffsetlen() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_zoffsetlen() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_CabFNFPartInfo::clear_has_zoffsetlen() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_CabFNFPartInfo::clear_zoffsetlen() {
  zoffsetlen_ = 0;
  clear_has_zoffsetlen();
}
inline double SJ_CabFNFPartInfo::zoffsetlen() const {
  return zoffsetlen_;
}
inline void SJ_CabFNFPartInfo::set_zoffsetlen(double value) {
  set_has_zoffsetlen();
  zoffsetlen_ = value;
}

// required int32 CreatorID = 26;
inline bool SJ_CabFNFPartInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_CabFNFPartInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_CabFNFPartInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabFNFPartInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 27;
inline bool SJ_CabFNFPartInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_CabFNFPartInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_CabFNFPartInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabFNFPartInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 28;
inline bool SJ_CabFNFPartInfo::has_createtime() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_createtime() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_CabFNFPartInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_CabFNFPartInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabFNFPartInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabFNFPartInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 29;
inline bool SJ_CabFNFPartInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_CabFNFPartInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_CabFNFPartInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_CabFNFPartInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabFNFPartInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabFNFPartInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_CabFNFPartSealInfo

// required int32 CabFNFPartSealID = 1;
inline bool SJ_CabFNFPartSealInfo::has_cabfnfpartsealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabFNFPartSealInfo::set_has_cabfnfpartsealid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabFNFPartSealInfo::clear_has_cabfnfpartsealid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabFNFPartSealInfo::clear_cabfnfpartsealid() {
  cabfnfpartsealid_ = 0;
  clear_has_cabfnfpartsealid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartSealInfo::cabfnfpartsealid() const {
  return cabfnfpartsealid_;
}
inline void SJ_CabFNFPartSealInfo::set_cabfnfpartsealid(::google::protobuf::int32 value) {
  set_has_cabfnfpartsealid();
  cabfnfpartsealid_ = value;
}

// required int32 CabFNFPartID = 2;
inline bool SJ_CabFNFPartSealInfo::has_cabfnfpartid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabFNFPartSealInfo::set_has_cabfnfpartid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabFNFPartSealInfo::clear_has_cabfnfpartid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabFNFPartSealInfo::clear_cabfnfpartid() {
  cabfnfpartid_ = 0;
  clear_has_cabfnfpartid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartSealInfo::cabfnfpartid() const {
  return cabfnfpartid_;
}
inline void SJ_CabFNFPartSealInfo::set_cabfnfpartid(::google::protobuf::int32 value) {
  set_has_cabfnfpartid();
  cabfnfpartid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_CabFNFPartSealInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabFNFPartSealInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabFNFPartSealInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabFNFPartSealInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabFNFPartSealInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabFNFPartSealInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabFNFPartSealInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabFNFPartSealInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabFNFPartSealInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabFNFPartSealInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabFNFPartSealInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabFNFPartSealInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_CabFNFPartSealInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabFNFPartSealInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabFNFPartSealInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabFNFPartSealInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartSealInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabFNFPartSealInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 FactoryID = 6;
inline bool SJ_CabFNFPartSealInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabFNFPartSealInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabFNFPartSealInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabFNFPartSealInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartSealInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabFNFPartSealInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 7;
inline bool SJ_CabFNFPartSealInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabFNFPartSealInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabFNFPartSealInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabFNFPartSealInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabFNFPartSealInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabFNFPartSealInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FNFittingPartID = 8;
inline bool SJ_CabFNFPartSealInfo::has_fnfittingpartid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabFNFPartSealInfo::set_has_fnfittingpartid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabFNFPartSealInfo::clear_has_fnfittingpartid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabFNFPartSealInfo::clear_fnfittingpartid() {
  fnfittingpartid_ = 0;
  clear_has_fnfittingpartid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartSealInfo::fnfittingpartid() const {
  return fnfittingpartid_;
}
inline void SJ_CabFNFPartSealInfo::set_fnfittingpartid(::google::protobuf::int32 value) {
  set_has_fnfittingpartid();
  fnfittingpartid_ = value;
}

// required int32 SealType = 9;
inline bool SJ_CabFNFPartSealInfo::has_sealtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabFNFPartSealInfo::set_has_sealtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabFNFPartSealInfo::clear_has_sealtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabFNFPartSealInfo::clear_sealtype() {
  sealtype_ = 0;
  clear_has_sealtype();
}
inline ::google::protobuf::int32 SJ_CabFNFPartSealInfo::sealtype() const {
  return sealtype_;
}
inline void SJ_CabFNFPartSealInfo::set_sealtype(::google::protobuf::int32 value) {
  set_has_sealtype();
  sealtype_ = value;
}

// required int32 SealIndex = 10;
inline bool SJ_CabFNFPartSealInfo::has_sealindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabFNFPartSealInfo::set_has_sealindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabFNFPartSealInfo::clear_has_sealindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabFNFPartSealInfo::clear_sealindex() {
  sealindex_ = 0;
  clear_has_sealindex();
}
inline ::google::protobuf::int32 SJ_CabFNFPartSealInfo::sealindex() const {
  return sealindex_;
}
inline void SJ_CabFNFPartSealInfo::set_sealindex(::google::protobuf::int32 value) {
  set_has_sealindex();
  sealindex_ = value;
}

// required int32 MaterialID = 11;
inline bool SJ_CabFNFPartSealInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabFNFPartSealInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabFNFPartSealInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabFNFPartSealInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 SJ_CabFNFPartSealInfo::materialid() const {
  return materialid_;
}
inline void SJ_CabFNFPartSealInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required double PreMill = 12;
inline bool SJ_CabFNFPartSealInfo::has_premill() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabFNFPartSealInfo::set_has_premill() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabFNFPartSealInfo::clear_has_premill() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabFNFPartSealInfo::clear_premill() {
  premill_ = 0;
  clear_has_premill();
}
inline double SJ_CabFNFPartSealInfo::premill() const {
  return premill_;
}
inline void SJ_CabFNFPartSealInfo::set_premill(double value) {
  set_has_premill();
  premill_ = value;
}

// -------------------------------------------------------------------

// SJ_CabInfo

// required int32 CabID = 1;
inline bool SJ_CabInfo::has_cabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_CabInfo::set_has_cabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_CabInfo::clear_has_cabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_CabInfo::clear_cabid() {
  cabid_ = 0;
  clear_has_cabid();
}
inline ::google::protobuf::int32 SJ_CabInfo::cabid() const {
  return cabid_;
}
inline void SJ_CabInfo::set_cabid(::google::protobuf::int32 value) {
  set_has_cabid();
  cabid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_CabInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_CabInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_CabInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_CabInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_CabInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_CabInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_CabInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_CabInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_CabInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_CabInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_CabInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_CabInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_CabInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_CabInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_CabInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_CabInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_CabInfo::orderid() const {
  return orderid_;
}
inline void SJ_CabInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 CabDesignID = 5;
inline bool SJ_CabInfo::has_cabdesignid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_CabInfo::set_has_cabdesignid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_CabInfo::clear_has_cabdesignid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_CabInfo::clear_cabdesignid() {
  cabdesignid_ = 0;
  clear_has_cabdesignid();
}
inline ::google::protobuf::int32 SJ_CabInfo::cabdesignid() const {
  return cabdesignid_;
}
inline void SJ_CabInfo::set_cabdesignid(::google::protobuf::int32 value) {
  set_has_cabdesignid();
  cabdesignid_ = value;
}

// required int32 CabinetSizeID = 6;
inline bool SJ_CabInfo::has_cabinetsizeid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_CabInfo::set_has_cabinetsizeid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_CabInfo::clear_has_cabinetsizeid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_CabInfo::clear_cabinetsizeid() {
  cabinetsizeid_ = 0;
  clear_has_cabinetsizeid();
}
inline ::google::protobuf::int32 SJ_CabInfo::cabinetsizeid() const {
  return cabinetsizeid_;
}
inline void SJ_CabInfo::set_cabinetsizeid(::google::protobuf::int32 value) {
  set_has_cabinetsizeid();
  cabinetsizeid_ = value;
}

// required int32 CabStructID = 7;
inline bool SJ_CabInfo::has_cabstructid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_CabInfo::set_has_cabstructid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_CabInfo::clear_has_cabstructid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_CabInfo::clear_cabstructid() {
  cabstructid_ = 0;
  clear_has_cabstructid();
}
inline ::google::protobuf::int32 SJ_CabInfo::cabstructid() const {
  return cabstructid_;
}
inline void SJ_CabInfo::set_cabstructid(::google::protobuf::int32 value) {
  set_has_cabstructid();
  cabstructid_ = value;
}

// required int32 FactoryID = 8;
inline bool SJ_CabInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_CabInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_CabInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_CabInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_CabInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_CabInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 9;
inline bool SJ_CabInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_CabInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_CabInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_CabInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_CabInfo::vercode() const {
  return vercode_;
}
inline void SJ_CabInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 CabMatPlanID = 10;
inline bool SJ_CabInfo::has_cabmatplanid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_CabInfo::set_has_cabmatplanid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_CabInfo::clear_has_cabmatplanid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_CabInfo::clear_cabmatplanid() {
  cabmatplanid_ = 0;
  clear_has_cabmatplanid();
}
inline ::google::protobuf::int32 SJ_CabInfo::cabmatplanid() const {
  return cabmatplanid_;
}
inline void SJ_CabInfo::set_cabmatplanid(::google::protobuf::int32 value) {
  set_has_cabmatplanid();
  cabmatplanid_ = value;
}

// required int32 SealRuleID = 11;
inline bool SJ_CabInfo::has_sealruleid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_CabInfo::set_has_sealruleid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_CabInfo::clear_has_sealruleid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_CabInfo::clear_sealruleid() {
  sealruleid_ = 0;
  clear_has_sealruleid();
}
inline ::google::protobuf::int32 SJ_CabInfo::sealruleid() const {
  return sealruleid_;
}
inline void SJ_CabInfo::set_sealruleid(::google::protobuf::int32 value) {
  set_has_sealruleid();
  sealruleid_ = value;
}

// required int32 DockObjID = 12;
inline bool SJ_CabInfo::has_dockobjid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_CabInfo::set_has_dockobjid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_CabInfo::clear_has_dockobjid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_CabInfo::clear_dockobjid() {
  dockobjid_ = 0;
  clear_has_dockobjid();
}
inline ::google::protobuf::int32 SJ_CabInfo::dockobjid() const {
  return dockobjid_;
}
inline void SJ_CabInfo::set_dockobjid(::google::protobuf::int32 value) {
  set_has_dockobjid();
  dockobjid_ = value;
}

// required int32 DockObjType = 13;
inline bool SJ_CabInfo::has_dockobjtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_CabInfo::set_has_dockobjtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_CabInfo::clear_has_dockobjtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_CabInfo::clear_dockobjtype() {
  dockobjtype_ = 0;
  clear_has_dockobjtype();
}
inline ::google::protobuf::int32 SJ_CabInfo::dockobjtype() const {
  return dockobjtype_;
}
inline void SJ_CabInfo::set_dockobjtype(::google::protobuf::int32 value) {
  set_has_dockobjtype();
  dockobjtype_ = value;
}

// required double DockXPos = 14;
inline bool SJ_CabInfo::has_dockxpos() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_CabInfo::set_has_dockxpos() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_CabInfo::clear_has_dockxpos() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_CabInfo::clear_dockxpos() {
  dockxpos_ = 0;
  clear_has_dockxpos();
}
inline double SJ_CabInfo::dockxpos() const {
  return dockxpos_;
}
inline void SJ_CabInfo::set_dockxpos(double value) {
  set_has_dockxpos();
  dockxpos_ = value;
}

// required double DockYPos = 15;
inline bool SJ_CabInfo::has_dockypos() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_CabInfo::set_has_dockypos() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_CabInfo::clear_has_dockypos() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_CabInfo::clear_dockypos() {
  dockypos_ = 0;
  clear_has_dockypos();
}
inline double SJ_CabInfo::dockypos() const {
  return dockypos_;
}
inline void SJ_CabInfo::set_dockypos(double value) {
  set_has_dockypos();
  dockypos_ = value;
}

// required double XLen = 16;
inline bool SJ_CabInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_CabInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_CabInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_CabInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_CabInfo::xlen() const {
  return xlen_;
}
inline void SJ_CabInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 17;
inline bool SJ_CabInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_CabInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_CabInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_CabInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_CabInfo::ylen() const {
  return ylen_;
}
inline void SJ_CabInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 18;
inline bool SJ_CabInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_CabInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_CabInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_CabInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_CabInfo::zlen() const {
  return zlen_;
}
inline void SJ_CabInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double ShapeXLen = 19;
inline bool SJ_CabInfo::has_shapexlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_CabInfo::set_has_shapexlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_CabInfo::clear_has_shapexlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_CabInfo::clear_shapexlen() {
  shapexlen_ = 0;
  clear_has_shapexlen();
}
inline double SJ_CabInfo::shapexlen() const {
  return shapexlen_;
}
inline void SJ_CabInfo::set_shapexlen(double value) {
  set_has_shapexlen();
  shapexlen_ = value;
}

// required double ShapeZLen = 20;
inline bool SJ_CabInfo::has_shapezlen() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_CabInfo::set_has_shapezlen() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_CabInfo::clear_has_shapezlen() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_CabInfo::clear_shapezlen() {
  shapezlen_ = 0;
  clear_has_shapezlen();
}
inline double SJ_CabInfo::shapezlen() const {
  return shapezlen_;
}
inline void SJ_CabInfo::set_shapezlen(double value) {
  set_has_shapezlen();
  shapezlen_ = value;
}

// required double GapXLen = 21;
inline bool SJ_CabInfo::has_gapxlen() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_CabInfo::set_has_gapxlen() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_CabInfo::clear_has_gapxlen() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_CabInfo::clear_gapxlen() {
  gapxlen_ = 0;
  clear_has_gapxlen();
}
inline double SJ_CabInfo::gapxlen() const {
  return gapxlen_;
}
inline void SJ_CabInfo::set_gapxlen(double value) {
  set_has_gapxlen();
  gapxlen_ = value;
}

// required double GapYLen = 22;
inline bool SJ_CabInfo::has_gapylen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_CabInfo::set_has_gapylen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_CabInfo::clear_has_gapylen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_CabInfo::clear_gapylen() {
  gapylen_ = 0;
  clear_has_gapylen();
}
inline double SJ_CabInfo::gapylen() const {
  return gapylen_;
}
inline void SJ_CabInfo::set_gapylen(double value) {
  set_has_gapylen();
  gapylen_ = value;
}

// required double GapZLen = 23;
inline bool SJ_CabInfo::has_gapzlen() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_CabInfo::set_has_gapzlen() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_CabInfo::clear_has_gapzlen() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_CabInfo::clear_gapzlen() {
  gapzlen_ = 0;
  clear_has_gapzlen();
}
inline double SJ_CabInfo::gapzlen() const {
  return gapzlen_;
}
inline void SJ_CabInfo::set_gapzlen(double value) {
  set_has_gapzlen();
  gapzlen_ = value;
}

// required double YPos = 24;
inline bool SJ_CabInfo::has_ypos() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_CabInfo::set_has_ypos() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_CabInfo::clear_has_ypos() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_CabInfo::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline double SJ_CabInfo::ypos() const {
  return ypos_;
}
inline void SJ_CabInfo::set_ypos(double value) {
  set_has_ypos();
  ypos_ = value;
}

// required int32 FootID = 25;
inline bool SJ_CabInfo::has_footid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_CabInfo::set_has_footid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_CabInfo::clear_has_footid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_CabInfo::clear_footid() {
  footid_ = 0;
  clear_has_footid();
}
inline ::google::protobuf::int32 SJ_CabInfo::footid() const {
  return footid_;
}
inline void SJ_CabInfo::set_footid(::google::protobuf::int32 value) {
  set_has_footid();
  footid_ = value;
}

// required int32 FootCount = 26;
inline bool SJ_CabInfo::has_footcount() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_CabInfo::set_has_footcount() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_CabInfo::clear_has_footcount() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_CabInfo::clear_footcount() {
  footcount_ = 0;
  clear_has_footcount();
}
inline ::google::protobuf::int32 SJ_CabInfo::footcount() const {
  return footcount_;
}
inline void SJ_CabInfo::set_footcount(::google::protobuf::int32 value) {
  set_has_footcount();
  footcount_ = value;
}

// required double FootYLen = 27;
inline bool SJ_CabInfo::has_footylen() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_CabInfo::set_has_footylen() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_CabInfo::clear_has_footylen() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_CabInfo::clear_footylen() {
  footylen_ = 0;
  clear_has_footylen();
}
inline double SJ_CabInfo::footylen() const {
  return footylen_;
}
inline void SJ_CabInfo::set_footylen(double value) {
  set_has_footylen();
  footylen_ = value;
}

// required bool IsStandard = 28;
inline bool SJ_CabInfo::has_isstandard() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_CabInfo::set_has_isstandard() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_CabInfo::clear_has_isstandard() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_CabInfo::clear_isstandard() {
  isstandard_ = false;
  clear_has_isstandard();
}
inline bool SJ_CabInfo::isstandard() const {
  return isstandard_;
}
inline void SJ_CabInfo::set_isstandard(bool value) {
  set_has_isstandard();
  isstandard_ = value;
}

// required bool HasMark = 29;
inline bool SJ_CabInfo::has_hasmark() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_CabInfo::set_has_hasmark() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_CabInfo::clear_has_hasmark() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_CabInfo::clear_hasmark() {
  hasmark_ = false;
  clear_has_hasmark();
}
inline bool SJ_CabInfo::hasmark() const {
  return hasmark_;
}
inline void SJ_CabInfo::set_hasmark(bool value) {
  set_has_hasmark();
  hasmark_ = value;
}

// required bool IsVisible = 30;
inline bool SJ_CabInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SJ_CabInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SJ_CabInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SJ_CabInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_CabInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_CabInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 31;
inline bool SJ_CabInfo::has_islocked() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SJ_CabInfo::set_has_islocked() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SJ_CabInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SJ_CabInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_CabInfo::islocked() const {
  return islocked_;
}
inline void SJ_CabInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required int32 CreatorID = 32;
inline bool SJ_CabInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SJ_CabInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SJ_CabInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SJ_CabInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_CabInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_CabInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 33;
inline bool SJ_CabInfo::has_updaterid() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SJ_CabInfo::set_has_updaterid() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SJ_CabInfo::clear_has_updaterid() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SJ_CabInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_CabInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_CabInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 34;
inline bool SJ_CabInfo::has_createtime() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SJ_CabInfo::set_has_createtime() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SJ_CabInfo::clear_has_createtime() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SJ_CabInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_CabInfo::createtime() const {
  return createtime_;
}
inline void SJ_CabInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 35;
inline bool SJ_CabInfo::has_updatetime() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SJ_CabInfo::set_has_updatetime() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SJ_CabInfo::clear_has_updatetime() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SJ_CabInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_CabInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_CabInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_DecorBoardInfo

// required int32 DesignDecorBoardID = 1;
inline bool SJ_DecorBoardInfo::has_designdecorboardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_designdecorboardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_DecorBoardInfo::clear_has_designdecorboardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_DecorBoardInfo::clear_designdecorboardid() {
  designdecorboardid_ = 0;
  clear_has_designdecorboardid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::designdecorboardid() const {
  return designdecorboardid_;
}
inline void SJ_DecorBoardInfo::set_designdecorboardid(::google::protobuf::int32 value) {
  set_has_designdecorboardid();
  designdecorboardid_ = value;
}

// required int32 DesignPlanID = 2;
inline bool SJ_DecorBoardInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_DecorBoardInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_DecorBoardInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_DecorBoardInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 DesignParentID = 3;
inline bool SJ_DecorBoardInfo::has_designparentid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_designparentid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_DecorBoardInfo::clear_has_designparentid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_DecorBoardInfo::clear_designparentid() {
  designparentid_ = 0;
  clear_has_designparentid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::designparentid() const {
  return designparentid_;
}
inline void SJ_DecorBoardInfo::set_designparentid(::google::protobuf::int32 value) {
  set_has_designparentid();
  designparentid_ = value;
}

// required int32 OrderCate = 4;
inline bool SJ_DecorBoardInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_DecorBoardInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_DecorBoardInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_DecorBoardInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 5;
inline bool SJ_DecorBoardInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_DecorBoardInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_DecorBoardInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_DecorBoardInfo::orderid() const {
  return orderid_;
}
inline void SJ_DecorBoardInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DecorBoardID = 6;
inline bool SJ_DecorBoardInfo::has_decorboardid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_decorboardid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_DecorBoardInfo::clear_has_decorboardid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_DecorBoardInfo::clear_decorboardid() {
  decorboardid_ = 0;
  clear_has_decorboardid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::decorboardid() const {
  return decorboardid_;
}
inline void SJ_DecorBoardInfo::set_decorboardid(::google::protobuf::int32 value) {
  set_has_decorboardid();
  decorboardid_ = value;
}

// required int32 DecorParentID = 7;
inline bool SJ_DecorBoardInfo::has_decorparentid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_decorparentid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_DecorBoardInfo::clear_has_decorparentid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_DecorBoardInfo::clear_decorparentid() {
  decorparentid_ = 0;
  clear_has_decorparentid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::decorparentid() const {
  return decorparentid_;
}
inline void SJ_DecorBoardInfo::set_decorparentid(::google::protobuf::int32 value) {
  set_has_decorparentid();
  decorparentid_ = value;
}

// required int32 FactoryID = 8;
inline bool SJ_DecorBoardInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_DecorBoardInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_DecorBoardInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_DecorBoardInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 9;
inline bool SJ_DecorBoardInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_DecorBoardInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_DecorBoardInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_DecorBoardInfo::vercode() const {
  return vercode_;
}
inline void SJ_DecorBoardInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 GroupID = 10;
inline bool SJ_DecorBoardInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_DecorBoardInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_DecorBoardInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::groupid() const {
  return groupid_;
}
inline void SJ_DecorBoardInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 GroupIndex = 11;
inline bool SJ_DecorBoardInfo::has_groupindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_groupindex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_DecorBoardInfo::clear_has_groupindex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_DecorBoardInfo::clear_groupindex() {
  groupindex_ = 0;
  clear_has_groupindex();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::groupindex() const {
  return groupindex_;
}
inline void SJ_DecorBoardInfo::set_groupindex(::google::protobuf::int32 value) {
  set_has_groupindex();
  groupindex_ = value;
}

// required int32 GTypeID = 12;
inline bool SJ_DecorBoardInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_DecorBoardInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_DecorBoardInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_DecorBoardInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required bool IsAutoFit = 13;
inline bool SJ_DecorBoardInfo::has_isautofit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_isautofit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_DecorBoardInfo::clear_has_isautofit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_DecorBoardInfo::clear_isautofit() {
  isautofit_ = false;
  clear_has_isautofit();
}
inline bool SJ_DecorBoardInfo::isautofit() const {
  return isautofit_;
}
inline void SJ_DecorBoardInfo::set_isautofit(bool value) {
  set_has_isautofit();
  isautofit_ = value;
}

// required bool HasMark = 14;
inline bool SJ_DecorBoardInfo::has_hasmark() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_hasmark() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_DecorBoardInfo::clear_has_hasmark() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_DecorBoardInfo::clear_hasmark() {
  hasmark_ = false;
  clear_has_hasmark();
}
inline bool SJ_DecorBoardInfo::hasmark() const {
  return hasmark_;
}
inline void SJ_DecorBoardInfo::set_hasmark(bool value) {
  set_has_hasmark();
  hasmark_ = value;
}

// required bool IsVisible = 15;
inline bool SJ_DecorBoardInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_DecorBoardInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_DecorBoardInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_DecorBoardInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_DecorBoardInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 16;
inline bool SJ_DecorBoardInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_DecorBoardInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_DecorBoardInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_DecorBoardInfo::islocked() const {
  return islocked_;
}
inline void SJ_DecorBoardInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required bool IsChangedSize = 17;
inline bool SJ_DecorBoardInfo::has_ischangedsize() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_ischangedsize() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_DecorBoardInfo::clear_has_ischangedsize() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_DecorBoardInfo::clear_ischangedsize() {
  ischangedsize_ = false;
  clear_has_ischangedsize();
}
inline bool SJ_DecorBoardInfo::ischangedsize() const {
  return ischangedsize_;
}
inline void SJ_DecorBoardInfo::set_ischangedsize(bool value) {
  set_has_ischangedsize();
  ischangedsize_ = value;
}

// required bool IsDragIn = 18;
inline bool SJ_DecorBoardInfo::has_isdragin() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_isdragin() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_DecorBoardInfo::clear_has_isdragin() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_DecorBoardInfo::clear_isdragin() {
  isdragin_ = false;
  clear_has_isdragin();
}
inline bool SJ_DecorBoardInfo::isdragin() const {
  return isdragin_;
}
inline void SJ_DecorBoardInfo::set_isdragin(bool value) {
  set_has_isdragin();
  isdragin_ = value;
}

// required int32 DoorMatPlanID = 19;
inline bool SJ_DecorBoardInfo::has_doormatplanid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_doormatplanid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_DecorBoardInfo::clear_has_doormatplanid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_DecorBoardInfo::clear_doormatplanid() {
  doormatplanid_ = 0;
  clear_has_doormatplanid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::doormatplanid() const {
  return doormatplanid_;
}
inline void SJ_DecorBoardInfo::set_doormatplanid(::google::protobuf::int32 value) {
  set_has_doormatplanid();
  doormatplanid_ = value;
}

// required int32 CabMatPlanID = 20;
inline bool SJ_DecorBoardInfo::has_cabmatplanid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_cabmatplanid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_DecorBoardInfo::clear_has_cabmatplanid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_DecorBoardInfo::clear_cabmatplanid() {
  cabmatplanid_ = 0;
  clear_has_cabmatplanid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::cabmatplanid() const {
  return cabmatplanid_;
}
inline void SJ_DecorBoardInfo::set_cabmatplanid(::google::protobuf::int32 value) {
  set_has_cabmatplanid();
  cabmatplanid_ = value;
}

// required int32 DoorID = 21;
inline bool SJ_DecorBoardInfo::has_doorid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_doorid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_DecorBoardInfo::clear_has_doorid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_DecorBoardInfo::clear_doorid() {
  doorid_ = 0;
  clear_has_doorid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::doorid() const {
  return doorid_;
}
inline void SJ_DecorBoardInfo::set_doorid(::google::protobuf::int32 value) {
  set_has_doorid();
  doorid_ = value;
}

// required int32 TargetType = 22;
inline bool SJ_DecorBoardInfo::has_targettype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_targettype() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_DecorBoardInfo::clear_has_targettype() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_DecorBoardInfo::clear_targettype() {
  targettype_ = 0;
  clear_has_targettype();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::targettype() const {
  return targettype_;
}
inline void SJ_DecorBoardInfo::set_targettype(::google::protobuf::int32 value) {
  set_has_targettype();
  targettype_ = value;
}

// required int32 DockObjID = 23;
inline bool SJ_DecorBoardInfo::has_dockobjid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_dockobjid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_DecorBoardInfo::clear_has_dockobjid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_DecorBoardInfo::clear_dockobjid() {
  dockobjid_ = 0;
  clear_has_dockobjid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::dockobjid() const {
  return dockobjid_;
}
inline void SJ_DecorBoardInfo::set_dockobjid(::google::protobuf::int32 value) {
  set_has_dockobjid();
  dockobjid_ = value;
}

// required int32 DockObjType = 24;
inline bool SJ_DecorBoardInfo::has_dockobjtype() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_dockobjtype() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_DecorBoardInfo::clear_has_dockobjtype() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_DecorBoardInfo::clear_dockobjtype() {
  dockobjtype_ = 0;
  clear_has_dockobjtype();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::dockobjtype() const {
  return dockobjtype_;
}
inline void SJ_DecorBoardInfo::set_dockobjtype(::google::protobuf::int32 value) {
  set_has_dockobjtype();
  dockobjtype_ = value;
}

// required double DockXPos = 25;
inline bool SJ_DecorBoardInfo::has_dockxpos() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_dockxpos() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_DecorBoardInfo::clear_has_dockxpos() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_DecorBoardInfo::clear_dockxpos() {
  dockxpos_ = 0;
  clear_has_dockxpos();
}
inline double SJ_DecorBoardInfo::dockxpos() const {
  return dockxpos_;
}
inline void SJ_DecorBoardInfo::set_dockxpos(double value) {
  set_has_dockxpos();
  dockxpos_ = value;
}

// required double DockYPos = 26;
inline bool SJ_DecorBoardInfo::has_dockypos() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_dockypos() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_DecorBoardInfo::clear_has_dockypos() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_DecorBoardInfo::clear_dockypos() {
  dockypos_ = 0;
  clear_has_dockypos();
}
inline double SJ_DecorBoardInfo::dockypos() const {
  return dockypos_;
}
inline void SJ_DecorBoardInfo::set_dockypos(double value) {
  set_has_dockypos();
  dockypos_ = value;
}

// required int32 MatID = 27;
inline bool SJ_DecorBoardInfo::has_matid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_matid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_DecorBoardInfo::clear_has_matid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_DecorBoardInfo::clear_matid() {
  matid_ = 0;
  clear_has_matid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::matid() const {
  return matid_;
}
inline void SJ_DecorBoardInfo::set_matid(::google::protobuf::int32 value) {
  set_has_matid();
  matid_ = value;
}

// required int32 MatGType = 28;
inline bool SJ_DecorBoardInfo::has_matgtype() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_matgtype() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_DecorBoardInfo::clear_has_matgtype() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_DecorBoardInfo::clear_matgtype() {
  matgtype_ = 0;
  clear_has_matgtype();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::matgtype() const {
  return matgtype_;
}
inline void SJ_DecorBoardInfo::set_matgtype(::google::protobuf::int32 value) {
  set_has_matgtype();
  matgtype_ = value;
}

// required int32 SupplyType = 29;
inline bool SJ_DecorBoardInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_DecorBoardInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_DecorBoardInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_DecorBoardInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 ModelID = 30;
inline bool SJ_DecorBoardInfo::has_modelid() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_modelid() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SJ_DecorBoardInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SJ_DecorBoardInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::modelid() const {
  return modelid_;
}
inline void SJ_DecorBoardInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required double YPos = 31;
inline bool SJ_DecorBoardInfo::has_ypos() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_ypos() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SJ_DecorBoardInfo::clear_has_ypos() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SJ_DecorBoardInfo::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline double SJ_DecorBoardInfo::ypos() const {
  return ypos_;
}
inline void SJ_DecorBoardInfo::set_ypos(double value) {
  set_has_ypos();
  ypos_ = value;
}

// required double XLen = 32;
inline bool SJ_DecorBoardInfo::has_xlen() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_xlen() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SJ_DecorBoardInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SJ_DecorBoardInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_DecorBoardInfo::xlen() const {
  return xlen_;
}
inline void SJ_DecorBoardInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 33;
inline bool SJ_DecorBoardInfo::has_ylen() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_ylen() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SJ_DecorBoardInfo::clear_has_ylen() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SJ_DecorBoardInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_DecorBoardInfo::ylen() const {
  return ylen_;
}
inline void SJ_DecorBoardInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 34;
inline bool SJ_DecorBoardInfo::has_zlen() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_zlen() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SJ_DecorBoardInfo::clear_has_zlen() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SJ_DecorBoardInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_DecorBoardInfo::zlen() const {
  return zlen_;
}
inline void SJ_DecorBoardInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double XOffsetLen = 35;
inline bool SJ_DecorBoardInfo::has_xoffsetlen() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_xoffsetlen() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SJ_DecorBoardInfo::clear_has_xoffsetlen() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SJ_DecorBoardInfo::clear_xoffsetlen() {
  xoffsetlen_ = 0;
  clear_has_xoffsetlen();
}
inline double SJ_DecorBoardInfo::xoffsetlen() const {
  return xoffsetlen_;
}
inline void SJ_DecorBoardInfo::set_xoffsetlen(double value) {
  set_has_xoffsetlen();
  xoffsetlen_ = value;
}

// required double YOffsetLen = 36;
inline bool SJ_DecorBoardInfo::has_yoffsetlen() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_yoffsetlen() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SJ_DecorBoardInfo::clear_has_yoffsetlen() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SJ_DecorBoardInfo::clear_yoffsetlen() {
  yoffsetlen_ = 0;
  clear_has_yoffsetlen();
}
inline double SJ_DecorBoardInfo::yoffsetlen() const {
  return yoffsetlen_;
}
inline void SJ_DecorBoardInfo::set_yoffsetlen(double value) {
  set_has_yoffsetlen();
  yoffsetlen_ = value;
}

// required double ZOffsetLen = 37;
inline bool SJ_DecorBoardInfo::has_zoffsetlen() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_zoffsetlen() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SJ_DecorBoardInfo::clear_has_zoffsetlen() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SJ_DecorBoardInfo::clear_zoffsetlen() {
  zoffsetlen_ = 0;
  clear_has_zoffsetlen();
}
inline double SJ_DecorBoardInfo::zoffsetlen() const {
  return zoffsetlen_;
}
inline void SJ_DecorBoardInfo::set_zoffsetlen(double value) {
  set_has_zoffsetlen();
  zoffsetlen_ = value;
}

// required int32 CreatorID = 38;
inline bool SJ_DecorBoardInfo::has_creatorid() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_creatorid() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SJ_DecorBoardInfo::clear_has_creatorid() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SJ_DecorBoardInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_DecorBoardInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 39;
inline bool SJ_DecorBoardInfo::has_updaterid() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_updaterid() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SJ_DecorBoardInfo::clear_has_updaterid() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SJ_DecorBoardInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_DecorBoardInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_DecorBoardInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 40;
inline bool SJ_DecorBoardInfo::has_createtime() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_createtime() {
  _has_bits_[1] |= 0x00000080u;
}
inline void SJ_DecorBoardInfo::clear_has_createtime() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void SJ_DecorBoardInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_DecorBoardInfo::createtime() const {
  return createtime_;
}
inline void SJ_DecorBoardInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 41;
inline bool SJ_DecorBoardInfo::has_updatetime() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void SJ_DecorBoardInfo::set_has_updatetime() {
  _has_bits_[1] |= 0x00000100u;
}
inline void SJ_DecorBoardInfo::clear_has_updatetime() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void SJ_DecorBoardInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_DecorBoardInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_DecorBoardInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_DecorBoardUnitInfo

// required int32 DesignDecorBoardUnitID = 1;
inline bool SJ_DecorBoardUnitInfo::has_designdecorboardunitid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_designdecorboardunitid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_designdecorboardunitid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_DecorBoardUnitInfo::clear_designdecorboardunitid() {
  designdecorboardunitid_ = 0;
  clear_has_designdecorboardunitid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::designdecorboardunitid() const {
  return designdecorboardunitid_;
}
inline void SJ_DecorBoardUnitInfo::set_designdecorboardunitid(::google::protobuf::int32 value) {
  set_has_designdecorboardunitid();
  designdecorboardunitid_ = value;
}

// required int32 DesignDecorBoardID = 2;
inline bool SJ_DecorBoardUnitInfo::has_designdecorboardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_designdecorboardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_designdecorboardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_DecorBoardUnitInfo::clear_designdecorboardid() {
  designdecorboardid_ = 0;
  clear_has_designdecorboardid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::designdecorboardid() const {
  return designdecorboardid_;
}
inline void SJ_DecorBoardUnitInfo::set_designdecorboardid(::google::protobuf::int32 value) {
  set_has_designdecorboardid();
  designdecorboardid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_DecorBoardUnitInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_DecorBoardUnitInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_DecorBoardUnitInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_DecorBoardUnitInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_DecorBoardUnitInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_DecorBoardUnitInfo::orderid() const {
  return orderid_;
}
inline void SJ_DecorBoardUnitInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_DecorBoardUnitInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_DecorBoardUnitInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_DecorBoardUnitInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 DecorBoardUnitID = 6;
inline bool SJ_DecorBoardUnitInfo::has_decorboardunitid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_decorboardunitid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_decorboardunitid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_DecorBoardUnitInfo::clear_decorboardunitid() {
  decorboardunitid_ = 0;
  clear_has_decorboardunitid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::decorboardunitid() const {
  return decorboardunitid_;
}
inline void SJ_DecorBoardUnitInfo::set_decorboardunitid(::google::protobuf::int32 value) {
  set_has_decorboardunitid();
  decorboardunitid_ = value;
}

// required int32 DecorBoardID = 7;
inline bool SJ_DecorBoardUnitInfo::has_decorboardid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_decorboardid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_decorboardid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_DecorBoardUnitInfo::clear_decorboardid() {
  decorboardid_ = 0;
  clear_has_decorboardid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::decorboardid() const {
  return decorboardid_;
}
inline void SJ_DecorBoardUnitInfo::set_decorboardid(::google::protobuf::int32 value) {
  set_has_decorboardid();
  decorboardid_ = value;
}

// required int32 DecorBoardUnitIndex = 8;
inline bool SJ_DecorBoardUnitInfo::has_decorboardunitindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_decorboardunitindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_decorboardunitindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_DecorBoardUnitInfo::clear_decorboardunitindex() {
  decorboardunitindex_ = 0;
  clear_has_decorboardunitindex();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::decorboardunitindex() const {
  return decorboardunitindex_;
}
inline void SJ_DecorBoardUnitInfo::set_decorboardunitindex(::google::protobuf::int32 value) {
  set_has_decorboardunitindex();
  decorboardunitindex_ = value;
}

// required int32 FactoryID = 9;
inline bool SJ_DecorBoardUnitInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_DecorBoardUnitInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_DecorBoardUnitInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 10;
inline bool SJ_DecorBoardUnitInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_DecorBoardUnitInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_DecorBoardUnitInfo::vercode() const {
  return vercode_;
}
inline void SJ_DecorBoardUnitInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required bool IsUseDoor = 11;
inline bool SJ_DecorBoardUnitInfo::has_isusedoor() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_isusedoor() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_isusedoor() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_DecorBoardUnitInfo::clear_isusedoor() {
  isusedoor_ = false;
  clear_has_isusedoor();
}
inline bool SJ_DecorBoardUnitInfo::isusedoor() const {
  return isusedoor_;
}
inline void SJ_DecorBoardUnitInfo::set_isusedoor(bool value) {
  set_has_isusedoor();
  isusedoor_ = value;
}

// required int32 DoorMatPlanID = 12;
inline bool SJ_DecorBoardUnitInfo::has_doormatplanid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_doormatplanid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_doormatplanid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_DecorBoardUnitInfo::clear_doormatplanid() {
  doormatplanid_ = 0;
  clear_has_doormatplanid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::doormatplanid() const {
  return doormatplanid_;
}
inline void SJ_DecorBoardUnitInfo::set_doormatplanid(::google::protobuf::int32 value) {
  set_has_doormatplanid();
  doormatplanid_ = value;
}

// required int32 CabMatPlanID = 13;
inline bool SJ_DecorBoardUnitInfo::has_cabmatplanid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_cabmatplanid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_cabmatplanid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_DecorBoardUnitInfo::clear_cabmatplanid() {
  cabmatplanid_ = 0;
  clear_has_cabmatplanid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::cabmatplanid() const {
  return cabmatplanid_;
}
inline void SJ_DecorBoardUnitInfo::set_cabmatplanid(::google::protobuf::int32 value) {
  set_has_cabmatplanid();
  cabmatplanid_ = value;
}

// required int32 DoorID = 14;
inline bool SJ_DecorBoardUnitInfo::has_doorid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_doorid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_doorid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_DecorBoardUnitInfo::clear_doorid() {
  doorid_ = 0;
  clear_has_doorid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::doorid() const {
  return doorid_;
}
inline void SJ_DecorBoardUnitInfo::set_doorid(::google::protobuf::int32 value) {
  set_has_doorid();
  doorid_ = value;
}

// required int32 TargetType = 15;
inline bool SJ_DecorBoardUnitInfo::has_targettype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_targettype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_targettype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_DecorBoardUnitInfo::clear_targettype() {
  targettype_ = 0;
  clear_has_targettype();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::targettype() const {
  return targettype_;
}
inline void SJ_DecorBoardUnitInfo::set_targettype(::google::protobuf::int32 value) {
  set_has_targettype();
  targettype_ = value;
}

// required int32 MatID = 16;
inline bool SJ_DecorBoardUnitInfo::has_matid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_matid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_matid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_DecorBoardUnitInfo::clear_matid() {
  matid_ = 0;
  clear_has_matid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::matid() const {
  return matid_;
}
inline void SJ_DecorBoardUnitInfo::set_matid(::google::protobuf::int32 value) {
  set_has_matid();
  matid_ = value;
}

// required int32 MatGType = 17;
inline bool SJ_DecorBoardUnitInfo::has_matgtype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_matgtype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_matgtype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_DecorBoardUnitInfo::clear_matgtype() {
  matgtype_ = 0;
  clear_has_matgtype();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::matgtype() const {
  return matgtype_;
}
inline void SJ_DecorBoardUnitInfo::set_matgtype(::google::protobuf::int32 value) {
  set_has_matgtype();
  matgtype_ = value;
}

// required int32 SupplyType = 18;
inline bool SJ_DecorBoardUnitInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_DecorBoardUnitInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_DecorBoardUnitInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 SealRuleID = 19;
inline bool SJ_DecorBoardUnitInfo::has_sealruleid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_sealruleid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_sealruleid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_DecorBoardUnitInfo::clear_sealruleid() {
  sealruleid_ = 0;
  clear_has_sealruleid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::sealruleid() const {
  return sealruleid_;
}
inline void SJ_DecorBoardUnitInfo::set_sealruleid(::google::protobuf::int32 value) {
  set_has_sealruleid();
  sealruleid_ = value;
}

// required int32 ModelID = 20;
inline bool SJ_DecorBoardUnitInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_DecorBoardUnitInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::modelid() const {
  return modelid_;
}
inline void SJ_DecorBoardUnitInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required double XLen = 21;
inline bool SJ_DecorBoardUnitInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_DecorBoardUnitInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_DecorBoardUnitInfo::xlen() const {
  return xlen_;
}
inline void SJ_DecorBoardUnitInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 22;
inline bool SJ_DecorBoardUnitInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_DecorBoardUnitInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_DecorBoardUnitInfo::ylen() const {
  return ylen_;
}
inline void SJ_DecorBoardUnitInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 23;
inline bool SJ_DecorBoardUnitInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_DecorBoardUnitInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_DecorBoardUnitInfo::zlen() const {
  return zlen_;
}
inline void SJ_DecorBoardUnitInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double XOffsetLen = 24;
inline bool SJ_DecorBoardUnitInfo::has_xoffsetlen() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_xoffsetlen() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_xoffsetlen() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_DecorBoardUnitInfo::clear_xoffsetlen() {
  xoffsetlen_ = 0;
  clear_has_xoffsetlen();
}
inline double SJ_DecorBoardUnitInfo::xoffsetlen() const {
  return xoffsetlen_;
}
inline void SJ_DecorBoardUnitInfo::set_xoffsetlen(double value) {
  set_has_xoffsetlen();
  xoffsetlen_ = value;
}

// required double YOffsetLen = 25;
inline bool SJ_DecorBoardUnitInfo::has_yoffsetlen() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_yoffsetlen() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_yoffsetlen() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_DecorBoardUnitInfo::clear_yoffsetlen() {
  yoffsetlen_ = 0;
  clear_has_yoffsetlen();
}
inline double SJ_DecorBoardUnitInfo::yoffsetlen() const {
  return yoffsetlen_;
}
inline void SJ_DecorBoardUnitInfo::set_yoffsetlen(double value) {
  set_has_yoffsetlen();
  yoffsetlen_ = value;
}

// required double ZOffsetLen = 26;
inline bool SJ_DecorBoardUnitInfo::has_zoffsetlen() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_zoffsetlen() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_zoffsetlen() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_DecorBoardUnitInfo::clear_zoffsetlen() {
  zoffsetlen_ = 0;
  clear_has_zoffsetlen();
}
inline double SJ_DecorBoardUnitInfo::zoffsetlen() const {
  return zoffsetlen_;
}
inline void SJ_DecorBoardUnitInfo::set_zoffsetlen(double value) {
  set_has_zoffsetlen();
  zoffsetlen_ = value;
}

// required int32 CreatorID = 27;
inline bool SJ_DecorBoardUnitInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_DecorBoardUnitInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_DecorBoardUnitInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 28;
inline bool SJ_DecorBoardUnitInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_DecorBoardUnitInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_DecorBoardUnitInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 29;
inline bool SJ_DecorBoardUnitInfo::has_createtime() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_createtime() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_DecorBoardUnitInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_DecorBoardUnitInfo::createtime() const {
  return createtime_;
}
inline void SJ_DecorBoardUnitInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 30;
inline bool SJ_DecorBoardUnitInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SJ_DecorBoardUnitInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SJ_DecorBoardUnitInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SJ_DecorBoardUnitInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_DecorBoardUnitInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_DecorBoardUnitInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_DecorBoardUnitSealInfo

// required int32 DesignDecorBoardUnitSealID = 1;
inline bool SJ_DecorBoardUnitSealInfo::has_designdecorboardunitsealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_DecorBoardUnitSealInfo::set_has_designdecorboardunitsealid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_has_designdecorboardunitsealid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_designdecorboardunitsealid() {
  designdecorboardunitsealid_ = 0;
  clear_has_designdecorboardunitsealid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitSealInfo::designdecorboardunitsealid() const {
  return designdecorboardunitsealid_;
}
inline void SJ_DecorBoardUnitSealInfo::set_designdecorboardunitsealid(::google::protobuf::int32 value) {
  set_has_designdecorboardunitsealid();
  designdecorboardunitsealid_ = value;
}

// required int32 DesignDecorBoardUnitID = 2;
inline bool SJ_DecorBoardUnitSealInfo::has_designdecorboardunitid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_DecorBoardUnitSealInfo::set_has_designdecorboardunitid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_has_designdecorboardunitid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_designdecorboardunitid() {
  designdecorboardunitid_ = 0;
  clear_has_designdecorboardunitid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitSealInfo::designdecorboardunitid() const {
  return designdecorboardunitid_;
}
inline void SJ_DecorBoardUnitSealInfo::set_designdecorboardunitid(::google::protobuf::int32 value) {
  set_has_designdecorboardunitid();
  designdecorboardunitid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_DecorBoardUnitSealInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_DecorBoardUnitSealInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitSealInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_DecorBoardUnitSealInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_DecorBoardUnitSealInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_DecorBoardUnitSealInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_DecorBoardUnitSealInfo::orderid() const {
  return orderid_;
}
inline void SJ_DecorBoardUnitSealInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_DecorBoardUnitSealInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_DecorBoardUnitSealInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitSealInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_DecorBoardUnitSealInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 FactoryID = 6;
inline bool SJ_DecorBoardUnitSealInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_DecorBoardUnitSealInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitSealInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_DecorBoardUnitSealInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 7;
inline bool SJ_DecorBoardUnitSealInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_DecorBoardUnitSealInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_DecorBoardUnitSealInfo::vercode() const {
  return vercode_;
}
inline void SJ_DecorBoardUnitSealInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 DecorBoardUnitID = 8;
inline bool SJ_DecorBoardUnitSealInfo::has_decorboardunitid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_DecorBoardUnitSealInfo::set_has_decorboardunitid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_has_decorboardunitid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_decorboardunitid() {
  decorboardunitid_ = 0;
  clear_has_decorboardunitid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitSealInfo::decorboardunitid() const {
  return decorboardunitid_;
}
inline void SJ_DecorBoardUnitSealInfo::set_decorboardunitid(::google::protobuf::int32 value) {
  set_has_decorboardunitid();
  decorboardunitid_ = value;
}

// required int32 DecorBoardUnitSealID = 9;
inline bool SJ_DecorBoardUnitSealInfo::has_decorboardunitsealid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_DecorBoardUnitSealInfo::set_has_decorboardunitsealid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_has_decorboardunitsealid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_decorboardunitsealid() {
  decorboardunitsealid_ = 0;
  clear_has_decorboardunitsealid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitSealInfo::decorboardunitsealid() const {
  return decorboardunitsealid_;
}
inline void SJ_DecorBoardUnitSealInfo::set_decorboardunitsealid(::google::protobuf::int32 value) {
  set_has_decorboardunitsealid();
  decorboardunitsealid_ = value;
}

// required int32 SealIndex = 10;
inline bool SJ_DecorBoardUnitSealInfo::has_sealindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_DecorBoardUnitSealInfo::set_has_sealindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_has_sealindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_sealindex() {
  sealindex_ = 0;
  clear_has_sealindex();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitSealInfo::sealindex() const {
  return sealindex_;
}
inline void SJ_DecorBoardUnitSealInfo::set_sealindex(::google::protobuf::int32 value) {
  set_has_sealindex();
  sealindex_ = value;
}

// required int32 SealType = 11;
inline bool SJ_DecorBoardUnitSealInfo::has_sealtype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_DecorBoardUnitSealInfo::set_has_sealtype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_has_sealtype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_sealtype() {
  sealtype_ = 0;
  clear_has_sealtype();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitSealInfo::sealtype() const {
  return sealtype_;
}
inline void SJ_DecorBoardUnitSealInfo::set_sealtype(::google::protobuf::int32 value) {
  set_has_sealtype();
  sealtype_ = value;
}

// required int32 MaterialID = 12;
inline bool SJ_DecorBoardUnitSealInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_DecorBoardUnitSealInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 SJ_DecorBoardUnitSealInfo::materialid() const {
  return materialid_;
}
inline void SJ_DecorBoardUnitSealInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required double PreMill = 13;
inline bool SJ_DecorBoardUnitSealInfo::has_premill() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_DecorBoardUnitSealInfo::set_has_premill() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_has_premill() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_DecorBoardUnitSealInfo::clear_premill() {
  premill_ = 0;
  clear_has_premill();
}
inline double SJ_DecorBoardUnitSealInfo::premill() const {
  return premill_;
}
inline void SJ_DecorBoardUnitSealInfo::set_premill(double value) {
  set_has_premill();
  premill_ = value;
}

// -------------------------------------------------------------------

// SJ_DecorInfo

// required int32 DesignDecorID = 1;
inline bool SJ_DecorInfo::has_designdecorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_DecorInfo::set_has_designdecorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_DecorInfo::clear_has_designdecorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_DecorInfo::clear_designdecorid() {
  designdecorid_ = 0;
  clear_has_designdecorid();
}
inline ::google::protobuf::int32 SJ_DecorInfo::designdecorid() const {
  return designdecorid_;
}
inline void SJ_DecorInfo::set_designdecorid(::google::protobuf::int32 value) {
  set_has_designdecorid();
  designdecorid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_DecorInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_DecorInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_DecorInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_DecorInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_DecorInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_DecorInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_DecorInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_DecorInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_DecorInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_DecorInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_DecorInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_DecorInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_DecorInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_DecorInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_DecorInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_DecorInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_DecorInfo::orderid() const {
  return orderid_;
}
inline void SJ_DecorInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DecorID = 5;
inline bool SJ_DecorInfo::has_decorid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_DecorInfo::set_has_decorid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_DecorInfo::clear_has_decorid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_DecorInfo::clear_decorid() {
  decorid_ = 0;
  clear_has_decorid();
}
inline ::google::protobuf::int32 SJ_DecorInfo::decorid() const {
  return decorid_;
}
inline void SJ_DecorInfo::set_decorid(::google::protobuf::int32 value) {
  set_has_decorid();
  decorid_ = value;
}

// required int32 FactoryID = 6;
inline bool SJ_DecorInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_DecorInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_DecorInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_DecorInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_DecorInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_DecorInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 7;
inline bool SJ_DecorInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_DecorInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_DecorInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_DecorInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_DecorInfo::vercode() const {
  return vercode_;
}
inline void SJ_DecorInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required bool HasMark = 8;
inline bool SJ_DecorInfo::has_hasmark() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_DecorInfo::set_has_hasmark() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_DecorInfo::clear_has_hasmark() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_DecorInfo::clear_hasmark() {
  hasmark_ = false;
  clear_has_hasmark();
}
inline bool SJ_DecorInfo::hasmark() const {
  return hasmark_;
}
inline void SJ_DecorInfo::set_hasmark(bool value) {
  set_has_hasmark();
  hasmark_ = value;
}

// required bool IsVisible = 9;
inline bool SJ_DecorInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_DecorInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_DecorInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_DecorInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_DecorInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_DecorInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 10;
inline bool SJ_DecorInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_DecorInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_DecorInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_DecorInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_DecorInfo::islocked() const {
  return islocked_;
}
inline void SJ_DecorInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required int32 SupplyType = 11;
inline bool SJ_DecorInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_DecorInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_DecorInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_DecorInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_DecorInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_DecorInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 12;
inline bool SJ_DecorInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_DecorInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_DecorInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_DecorInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_DecorInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_DecorInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 DockObjID = 13;
inline bool SJ_DecorInfo::has_dockobjid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_DecorInfo::set_has_dockobjid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_DecorInfo::clear_has_dockobjid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_DecorInfo::clear_dockobjid() {
  dockobjid_ = 0;
  clear_has_dockobjid();
}
inline ::google::protobuf::int32 SJ_DecorInfo::dockobjid() const {
  return dockobjid_;
}
inline void SJ_DecorInfo::set_dockobjid(::google::protobuf::int32 value) {
  set_has_dockobjid();
  dockobjid_ = value;
}

// required int32 DockObjType = 14;
inline bool SJ_DecorInfo::has_dockobjtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_DecorInfo::set_has_dockobjtype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_DecorInfo::clear_has_dockobjtype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_DecorInfo::clear_dockobjtype() {
  dockobjtype_ = 0;
  clear_has_dockobjtype();
}
inline ::google::protobuf::int32 SJ_DecorInfo::dockobjtype() const {
  return dockobjtype_;
}
inline void SJ_DecorInfo::set_dockobjtype(::google::protobuf::int32 value) {
  set_has_dockobjtype();
  dockobjtype_ = value;
}

// required double DockXPos = 15;
inline bool SJ_DecorInfo::has_dockxpos() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_DecorInfo::set_has_dockxpos() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_DecorInfo::clear_has_dockxpos() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_DecorInfo::clear_dockxpos() {
  dockxpos_ = 0;
  clear_has_dockxpos();
}
inline double SJ_DecorInfo::dockxpos() const {
  return dockxpos_;
}
inline void SJ_DecorInfo::set_dockxpos(double value) {
  set_has_dockxpos();
  dockxpos_ = value;
}

// required double DockYPos = 16;
inline bool SJ_DecorInfo::has_dockypos() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_DecorInfo::set_has_dockypos() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_DecorInfo::clear_has_dockypos() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_DecorInfo::clear_dockypos() {
  dockypos_ = 0;
  clear_has_dockypos();
}
inline double SJ_DecorInfo::dockypos() const {
  return dockypos_;
}
inline void SJ_DecorInfo::set_dockypos(double value) {
  set_has_dockypos();
  dockypos_ = value;
}

// required double XLen = 17;
inline bool SJ_DecorInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_DecorInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_DecorInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_DecorInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_DecorInfo::xlen() const {
  return xlen_;
}
inline void SJ_DecorInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 18;
inline bool SJ_DecorInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_DecorInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_DecorInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_DecorInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_DecorInfo::ylen() const {
  return ylen_;
}
inline void SJ_DecorInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 19;
inline bool SJ_DecorInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_DecorInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_DecorInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_DecorInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_DecorInfo::zlen() const {
  return zlen_;
}
inline void SJ_DecorInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double YPos = 20;
inline bool SJ_DecorInfo::has_ypos() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_DecorInfo::set_has_ypos() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_DecorInfo::clear_has_ypos() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_DecorInfo::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline double SJ_DecorInfo::ypos() const {
  return ypos_;
}
inline void SJ_DecorInfo::set_ypos(double value) {
  set_has_ypos();
  ypos_ = value;
}

// required int32 CreatorID = 21;
inline bool SJ_DecorInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_DecorInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_DecorInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_DecorInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_DecorInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_DecorInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 22;
inline bool SJ_DecorInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_DecorInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_DecorInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_DecorInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_DecorInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_DecorInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 23;
inline bool SJ_DecorInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_DecorInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_DecorInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_DecorInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_DecorInfo::createtime() const {
  return createtime_;
}
inline void SJ_DecorInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 24;
inline bool SJ_DecorInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_DecorInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_DecorInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_DecorInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_DecorInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_DecorInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_DecorLineInfo

// required int32 DesignDecorLineID = 1;
inline bool SJ_DecorLineInfo::has_designdecorlineid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_DecorLineInfo::set_has_designdecorlineid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_DecorLineInfo::clear_has_designdecorlineid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_DecorLineInfo::clear_designdecorlineid() {
  designdecorlineid_ = 0;
  clear_has_designdecorlineid();
}
inline ::google::protobuf::int32 SJ_DecorLineInfo::designdecorlineid() const {
  return designdecorlineid_;
}
inline void SJ_DecorLineInfo::set_designdecorlineid(::google::protobuf::int32 value) {
  set_has_designdecorlineid();
  designdecorlineid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_DecorLineInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_DecorLineInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_DecorLineInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_DecorLineInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_DecorLineInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_DecorLineInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_DecorLineInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_DecorLineInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_DecorLineInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_DecorLineInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_DecorLineInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_DecorLineInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_DecorLineInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_DecorLineInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_DecorLineInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_DecorLineInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_DecorLineInfo::orderid() const {
  return orderid_;
}
inline void SJ_DecorLineInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DecorLineID = 5;
inline bool SJ_DecorLineInfo::has_decorlineid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_DecorLineInfo::set_has_decorlineid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_DecorLineInfo::clear_has_decorlineid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_DecorLineInfo::clear_decorlineid() {
  decorlineid_ = 0;
  clear_has_decorlineid();
}
inline ::google::protobuf::int32 SJ_DecorLineInfo::decorlineid() const {
  return decorlineid_;
}
inline void SJ_DecorLineInfo::set_decorlineid(::google::protobuf::int32 value) {
  set_has_decorlineid();
  decorlineid_ = value;
}

// required int32 FactoryID = 6;
inline bool SJ_DecorLineInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_DecorLineInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_DecorLineInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_DecorLineInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_DecorLineInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_DecorLineInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 7;
inline bool SJ_DecorLineInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_DecorLineInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_DecorLineInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_DecorLineInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_DecorLineInfo::vercode() const {
  return vercode_;
}
inline void SJ_DecorLineInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 GTypeID = 8;
inline bool SJ_DecorLineInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_DecorLineInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_DecorLineInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_DecorLineInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_DecorLineInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_DecorLineInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 DockObjID = 9;
inline bool SJ_DecorLineInfo::has_dockobjid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_DecorLineInfo::set_has_dockobjid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_DecorLineInfo::clear_has_dockobjid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_DecorLineInfo::clear_dockobjid() {
  dockobjid_ = 0;
  clear_has_dockobjid();
}
inline ::google::protobuf::int32 SJ_DecorLineInfo::dockobjid() const {
  return dockobjid_;
}
inline void SJ_DecorLineInfo::set_dockobjid(::google::protobuf::int32 value) {
  set_has_dockobjid();
  dockobjid_ = value;
}

// required int32 DockObjType = 10;
inline bool SJ_DecorLineInfo::has_dockobjtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_DecorLineInfo::set_has_dockobjtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_DecorLineInfo::clear_has_dockobjtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_DecorLineInfo::clear_dockobjtype() {
  dockobjtype_ = 0;
  clear_has_dockobjtype();
}
inline ::google::protobuf::int32 SJ_DecorLineInfo::dockobjtype() const {
  return dockobjtype_;
}
inline void SJ_DecorLineInfo::set_dockobjtype(::google::protobuf::int32 value) {
  set_has_dockobjtype();
  dockobjtype_ = value;
}

// required double DockXPos = 11;
inline bool SJ_DecorLineInfo::has_dockxpos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_DecorLineInfo::set_has_dockxpos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_DecorLineInfo::clear_has_dockxpos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_DecorLineInfo::clear_dockxpos() {
  dockxpos_ = 0;
  clear_has_dockxpos();
}
inline double SJ_DecorLineInfo::dockxpos() const {
  return dockxpos_;
}
inline void SJ_DecorLineInfo::set_dockxpos(double value) {
  set_has_dockxpos();
  dockxpos_ = value;
}

// required double DockYPos = 12;
inline bool SJ_DecorLineInfo::has_dockypos() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_DecorLineInfo::set_has_dockypos() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_DecorLineInfo::clear_has_dockypos() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_DecorLineInfo::clear_dockypos() {
  dockypos_ = 0;
  clear_has_dockypos();
}
inline double SJ_DecorLineInfo::dockypos() const {
  return dockypos_;
}
inline void SJ_DecorLineInfo::set_dockypos(double value) {
  set_has_dockypos();
  dockypos_ = value;
}

// required int32 MaterialID = 13;
inline bool SJ_DecorLineInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_DecorLineInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_DecorLineInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_DecorLineInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 SJ_DecorLineInfo::materialid() const {
  return materialid_;
}
inline void SJ_DecorLineInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required bool HasMark = 14;
inline bool SJ_DecorLineInfo::has_hasmark() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_DecorLineInfo::set_has_hasmark() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_DecorLineInfo::clear_has_hasmark() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_DecorLineInfo::clear_hasmark() {
  hasmark_ = false;
  clear_has_hasmark();
}
inline bool SJ_DecorLineInfo::hasmark() const {
  return hasmark_;
}
inline void SJ_DecorLineInfo::set_hasmark(bool value) {
  set_has_hasmark();
  hasmark_ = value;
}

// required bool IsVisible = 15;
inline bool SJ_DecorLineInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_DecorLineInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_DecorLineInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_DecorLineInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_DecorLineInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_DecorLineInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 16;
inline bool SJ_DecorLineInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_DecorLineInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_DecorLineInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_DecorLineInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_DecorLineInfo::islocked() const {
  return islocked_;
}
inline void SJ_DecorLineInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required double XLen = 17;
inline bool SJ_DecorLineInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_DecorLineInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_DecorLineInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_DecorLineInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_DecorLineInfo::xlen() const {
  return xlen_;
}
inline void SJ_DecorLineInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 18;
inline bool SJ_DecorLineInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_DecorLineInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_DecorLineInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_DecorLineInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_DecorLineInfo::ylen() const {
  return ylen_;
}
inline void SJ_DecorLineInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 19;
inline bool SJ_DecorLineInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_DecorLineInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_DecorLineInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_DecorLineInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_DecorLineInfo::zlen() const {
  return zlen_;
}
inline void SJ_DecorLineInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required int32 CreatorID = 20;
inline bool SJ_DecorLineInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_DecorLineInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_DecorLineInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_DecorLineInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_DecorLineInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_DecorLineInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 21;
inline bool SJ_DecorLineInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_DecorLineInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_DecorLineInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_DecorLineInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_DecorLineInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_DecorLineInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 22;
inline bool SJ_DecorLineInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_DecorLineInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_DecorLineInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_DecorLineInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_DecorLineInfo::createtime() const {
  return createtime_;
}
inline void SJ_DecorLineInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 23;
inline bool SJ_DecorLineInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_DecorLineInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_DecorLineInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_DecorLineInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_DecorLineInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_DecorLineInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_DesignPlanInfo

// required int32 DesignPlanID = 1;
inline bool SJ_DesignPlanInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_DesignPlanInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_DesignPlanInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_DesignPlanInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_DesignPlanInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_DesignPlanInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_DesignPlanInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_DesignPlanInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_DesignPlanInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_DesignPlanInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 3;
inline bool SJ_DesignPlanInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_DesignPlanInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_DesignPlanInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_DesignPlanInfo::orderid() const {
  return orderid_;
}
inline void SJ_DesignPlanInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 FactoryID = 4;
inline bool SJ_DesignPlanInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_DesignPlanInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_DesignPlanInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_DesignPlanInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_DesignPlanInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 5;
inline bool SJ_DesignPlanInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_DesignPlanInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_DesignPlanInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_DesignPlanInfo::vercode() const {
  return vercode_;
}
inline void SJ_DesignPlanInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required double CurScale = 6;
inline bool SJ_DesignPlanInfo::has_curscale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_curscale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_DesignPlanInfo::clear_has_curscale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_DesignPlanInfo::clear_curscale() {
  curscale_ = 0;
  clear_has_curscale();
}
inline double SJ_DesignPlanInfo::curscale() const {
  return curscale_;
}
inline void SJ_DesignPlanInfo::set_curscale(double value) {
  set_has_curscale();
  curscale_ = value;
}

// required bool IsActive = 7;
inline bool SJ_DesignPlanInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_DesignPlanInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_DesignPlanInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool SJ_DesignPlanInfo::isactive() const {
  return isactive_;
}
inline void SJ_DesignPlanInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required int32 SkyDecorID = 8;
inline bool SJ_DesignPlanInfo::has_skydecorid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_skydecorid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_DesignPlanInfo::clear_has_skydecorid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_DesignPlanInfo::clear_skydecorid() {
  skydecorid_ = 0;
  clear_has_skydecorid();
}
inline ::google::protobuf::int32 SJ_DesignPlanInfo::skydecorid() const {
  return skydecorid_;
}
inline void SJ_DesignPlanInfo::set_skydecorid(::google::protobuf::int32 value) {
  set_has_skydecorid();
  skydecorid_ = value;
}

// required int32 FloorDecorID = 9;
inline bool SJ_DesignPlanInfo::has_floordecorid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_floordecorid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_DesignPlanInfo::clear_has_floordecorid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_DesignPlanInfo::clear_floordecorid() {
  floordecorid_ = 0;
  clear_has_floordecorid();
}
inline ::google::protobuf::int32 SJ_DesignPlanInfo::floordecorid() const {
  return floordecorid_;
}
inline void SJ_DesignPlanInfo::set_floordecorid(::google::protobuf::int32 value) {
  set_has_floordecorid();
  floordecorid_ = value;
}

// required int32 WallDecorID = 10;
inline bool SJ_DesignPlanInfo::has_walldecorid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_walldecorid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_DesignPlanInfo::clear_has_walldecorid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_DesignPlanInfo::clear_walldecorid() {
  walldecorid_ = 0;
  clear_has_walldecorid();
}
inline ::google::protobuf::int32 SJ_DesignPlanInfo::walldecorid() const {
  return walldecorid_;
}
inline void SJ_DesignPlanInfo::set_walldecorid(::google::protobuf::int32 value) {
  set_has_walldecorid();
  walldecorid_ = value;
}

// required int32 DesignerID = 11;
inline bool SJ_DesignPlanInfo::has_designerid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_designerid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_DesignPlanInfo::clear_has_designerid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_DesignPlanInfo::clear_designerid() {
  designerid_ = 0;
  clear_has_designerid();
}
inline ::google::protobuf::int32 SJ_DesignPlanInfo::designerid() const {
  return designerid_;
}
inline void SJ_DesignPlanInfo::set_designerid(::google::protobuf::int32 value) {
  set_has_designerid();
  designerid_ = value;
}

// required int32 UpdaterID = 12;
inline bool SJ_DesignPlanInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_DesignPlanInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_DesignPlanInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_DesignPlanInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_DesignPlanInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 13;
inline bool SJ_DesignPlanInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_DesignPlanInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_DesignPlanInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_DesignPlanInfo::createtime() const {
  return createtime_;
}
inline void SJ_DesignPlanInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 14;
inline bool SJ_DesignPlanInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_DesignPlanInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_DesignPlanInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_DesignPlanInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_DesignPlanInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string DesignPlanName = 15;
inline bool SJ_DesignPlanInfo::has_designplanname() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_designplanname() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_DesignPlanInfo::clear_has_designplanname() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_DesignPlanInfo::clear_designplanname() {
  if (designplanname_ != &::google::protobuf::internal::kEmptyString) {
    designplanname_->clear();
  }
  clear_has_designplanname();
}
inline const ::std::string& SJ_DesignPlanInfo::designplanname() const {
  return *designplanname_;
}
inline void SJ_DesignPlanInfo::set_designplanname(const ::std::string& value) {
  set_has_designplanname();
  if (designplanname_ == &::google::protobuf::internal::kEmptyString) {
    designplanname_ = new ::std::string;
  }
  designplanname_->assign(value);
}
inline void SJ_DesignPlanInfo::set_designplanname(const char* value) {
  set_has_designplanname();
  if (designplanname_ == &::google::protobuf::internal::kEmptyString) {
    designplanname_ = new ::std::string;
  }
  designplanname_->assign(value);
}
inline void SJ_DesignPlanInfo::set_designplanname(const char* value, size_t size) {
  set_has_designplanname();
  if (designplanname_ == &::google::protobuf::internal::kEmptyString) {
    designplanname_ = new ::std::string;
  }
  designplanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_DesignPlanInfo::mutable_designplanname() {
  set_has_designplanname();
  if (designplanname_ == &::google::protobuf::internal::kEmptyString) {
    designplanname_ = new ::std::string;
  }
  return designplanname_;
}
inline ::std::string* SJ_DesignPlanInfo::release_designplanname() {
  clear_has_designplanname();
  if (designplanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = designplanname_;
    designplanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_DesignPlanInfo::set_allocated_designplanname(::std::string* designplanname) {
  if (designplanname_ != &::google::protobuf::internal::kEmptyString) {
    delete designplanname_;
  }
  if (designplanname) {
    set_has_designplanname();
    designplanname_ = designplanname;
  } else {
    clear_has_designplanname();
    designplanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DesignPlanMemo = 16;
inline bool SJ_DesignPlanInfo::has_designplanmemo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_DesignPlanInfo::set_has_designplanmemo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_DesignPlanInfo::clear_has_designplanmemo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_DesignPlanInfo::clear_designplanmemo() {
  if (designplanmemo_ != &::google::protobuf::internal::kEmptyString) {
    designplanmemo_->clear();
  }
  clear_has_designplanmemo();
}
inline const ::std::string& SJ_DesignPlanInfo::designplanmemo() const {
  return *designplanmemo_;
}
inline void SJ_DesignPlanInfo::set_designplanmemo(const ::std::string& value) {
  set_has_designplanmemo();
  if (designplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    designplanmemo_ = new ::std::string;
  }
  designplanmemo_->assign(value);
}
inline void SJ_DesignPlanInfo::set_designplanmemo(const char* value) {
  set_has_designplanmemo();
  if (designplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    designplanmemo_ = new ::std::string;
  }
  designplanmemo_->assign(value);
}
inline void SJ_DesignPlanInfo::set_designplanmemo(const char* value, size_t size) {
  set_has_designplanmemo();
  if (designplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    designplanmemo_ = new ::std::string;
  }
  designplanmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_DesignPlanInfo::mutable_designplanmemo() {
  set_has_designplanmemo();
  if (designplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    designplanmemo_ = new ::std::string;
  }
  return designplanmemo_;
}
inline ::std::string* SJ_DesignPlanInfo::release_designplanmemo() {
  clear_has_designplanmemo();
  if (designplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = designplanmemo_;
    designplanmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_DesignPlanInfo::set_allocated_designplanmemo(::std::string* designplanmemo) {
  if (designplanmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete designplanmemo_;
  }
  if (designplanmemo) {
    set_has_designplanmemo();
    designplanmemo_ = designplanmemo;
  } else {
    clear_has_designplanmemo();
    designplanmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SJ_FittingInfo

// required int32 DesignFittingID = 1;
inline bool SJ_FittingInfo::has_designfittingid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_FittingInfo::set_has_designfittingid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_FittingInfo::clear_has_designfittingid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_FittingInfo::clear_designfittingid() {
  designfittingid_ = 0;
  clear_has_designfittingid();
}
inline ::google::protobuf::int32 SJ_FittingInfo::designfittingid() const {
  return designfittingid_;
}
inline void SJ_FittingInfo::set_designfittingid(::google::protobuf::int32 value) {
  set_has_designfittingid();
  designfittingid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_FittingInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_FittingInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_FittingInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_FittingInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_FittingInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_FittingInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_FittingInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_FittingInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_FittingInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_FittingInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_FittingInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_FittingInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_FittingInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_FittingInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_FittingInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_FittingInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_FittingInfo::orderid() const {
  return orderid_;
}
inline void SJ_FittingInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 FactoryID = 5;
inline bool SJ_FittingInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_FittingInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_FittingInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_FittingInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_FittingInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_FittingInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 6;
inline bool SJ_FittingInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_FittingInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_FittingInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_FittingInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_FittingInfo::vercode() const {
  return vercode_;
}
inline void SJ_FittingInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FittingID = 7;
inline bool SJ_FittingInfo::has_fittingid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_FittingInfo::set_has_fittingid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_FittingInfo::clear_has_fittingid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_FittingInfo::clear_fittingid() {
  fittingid_ = 0;
  clear_has_fittingid();
}
inline ::google::protobuf::int32 SJ_FittingInfo::fittingid() const {
  return fittingid_;
}
inline void SJ_FittingInfo::set_fittingid(::google::protobuf::int32 value) {
  set_has_fittingid();
  fittingid_ = value;
}

// required int32 GTypeID = 8;
inline bool SJ_FittingInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_FittingInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_FittingInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_FittingInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_FittingInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_FittingInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 SupplyType = 9;
inline bool SJ_FittingInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_FittingInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_FittingInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_FittingInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_FittingInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_FittingInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 FittingCount = 10;
inline bool SJ_FittingInfo::has_fittingcount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_FittingInfo::set_has_fittingcount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_FittingInfo::clear_has_fittingcount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_FittingInfo::clear_fittingcount() {
  fittingcount_ = 0;
  clear_has_fittingcount();
}
inline ::google::protobuf::int32 SJ_FittingInfo::fittingcount() const {
  return fittingcount_;
}
inline void SJ_FittingInfo::set_fittingcount(::google::protobuf::int32 value) {
  set_has_fittingcount();
  fittingcount_ = value;
}

// required int32 CreatorID = 11;
inline bool SJ_FittingInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_FittingInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_FittingInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_FittingInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_FittingInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_FittingInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 12;
inline bool SJ_FittingInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_FittingInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_FittingInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_FittingInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_FittingInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_FittingInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 13;
inline bool SJ_FittingInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_FittingInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_FittingInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_FittingInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_FittingInfo::createtime() const {
  return createtime_;
}
inline void SJ_FittingInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 14;
inline bool SJ_FittingInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_FittingInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_FittingInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_FittingInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_FittingInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_FittingInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_HWFInfo

// required int32 DesignHWFID = 1;
inline bool SJ_HWFInfo::has_designhwfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_HWFInfo::set_has_designhwfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_HWFInfo::clear_has_designhwfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_HWFInfo::clear_designhwfid() {
  designhwfid_ = 0;
  clear_has_designhwfid();
}
inline ::google::protobuf::int32 SJ_HWFInfo::designhwfid() const {
  return designhwfid_;
}
inline void SJ_HWFInfo::set_designhwfid(::google::protobuf::int32 value) {
  set_has_designhwfid();
  designhwfid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_HWFInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_HWFInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_HWFInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_HWFInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_HWFInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_HWFInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_HWFInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_HWFInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_HWFInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_HWFInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_HWFInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_HWFInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_HWFInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_HWFInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_HWFInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_HWFInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_HWFInfo::orderid() const {
  return orderid_;
}
inline void SJ_HWFInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 HWFittingID = 5;
inline bool SJ_HWFInfo::has_hwfittingid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_HWFInfo::set_has_hwfittingid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_HWFInfo::clear_has_hwfittingid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_HWFInfo::clear_hwfittingid() {
  hwfittingid_ = 0;
  clear_has_hwfittingid();
}
inline ::google::protobuf::int32 SJ_HWFInfo::hwfittingid() const {
  return hwfittingid_;
}
inline void SJ_HWFInfo::set_hwfittingid(::google::protobuf::int32 value) {
  set_has_hwfittingid();
  hwfittingid_ = value;
}

// required int32 FactoryID = 6;
inline bool SJ_HWFInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_HWFInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_HWFInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_HWFInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_HWFInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_HWFInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 7;
inline bool SJ_HWFInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_HWFInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_HWFInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_HWFInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_HWFInfo::vercode() const {
  return vercode_;
}
inline void SJ_HWFInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 SupplyType = 8;
inline bool SJ_HWFInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_HWFInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_HWFInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_HWFInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_HWFInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_HWFInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 9;
inline bool SJ_HWFInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_HWFInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_HWFInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_HWFInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_HWFInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_HWFInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 UseCount = 10;
inline bool SJ_HWFInfo::has_usecount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_HWFInfo::set_has_usecount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_HWFInfo::clear_has_usecount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_HWFInfo::clear_usecount() {
  usecount_ = 0;
  clear_has_usecount();
}
inline ::google::protobuf::int32 SJ_HWFInfo::usecount() const {
  return usecount_;
}
inline void SJ_HWFInfo::set_usecount(::google::protobuf::int32 value) {
  set_has_usecount();
  usecount_ = value;
}

// required int32 CreatorID = 11;
inline bool SJ_HWFInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_HWFInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_HWFInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_HWFInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_HWFInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_HWFInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 12;
inline bool SJ_HWFInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_HWFInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_HWFInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_HWFInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_HWFInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_HWFInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 13;
inline bool SJ_HWFInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_HWFInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_HWFInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_HWFInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_HWFInfo::createtime() const {
  return createtime_;
}
inline void SJ_HWFInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 14;
inline bool SJ_HWFInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_HWFInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_HWFInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_HWFInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_HWFInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_HWFInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_MarkInfo

// required int32 DesignMarkID = 1;
inline bool SJ_MarkInfo::has_designmarkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_MarkInfo::set_has_designmarkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_MarkInfo::clear_has_designmarkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_MarkInfo::clear_designmarkid() {
  designmarkid_ = 0;
  clear_has_designmarkid();
}
inline ::google::protobuf::int32 SJ_MarkInfo::designmarkid() const {
  return designmarkid_;
}
inline void SJ_MarkInfo::set_designmarkid(::google::protobuf::int32 value) {
  set_has_designmarkid();
  designmarkid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_MarkInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_MarkInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_MarkInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_MarkInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_MarkInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_MarkInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_MarkInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_MarkInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_MarkInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_MarkInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_MarkInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_MarkInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_MarkInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_MarkInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_MarkInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_MarkInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_MarkInfo::orderid() const {
  return orderid_;
}
inline void SJ_MarkInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPrintID = 5;
inline bool SJ_MarkInfo::has_designprintid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_MarkInfo::set_has_designprintid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_MarkInfo::clear_has_designprintid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_MarkInfo::clear_designprintid() {
  designprintid_ = 0;
  clear_has_designprintid();
}
inline ::google::protobuf::int32 SJ_MarkInfo::designprintid() const {
  return designprintid_;
}
inline void SJ_MarkInfo::set_designprintid(::google::protobuf::int32 value) {
  set_has_designprintid();
  designprintid_ = value;
}

// required int32 PrintID = 6;
inline bool SJ_MarkInfo::has_printid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_MarkInfo::set_has_printid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_MarkInfo::clear_has_printid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_MarkInfo::clear_printid() {
  printid_ = 0;
  clear_has_printid();
}
inline ::google::protobuf::int32 SJ_MarkInfo::printid() const {
  return printid_;
}
inline void SJ_MarkInfo::set_printid(::google::protobuf::int32 value) {
  set_has_printid();
  printid_ = value;
}

// required int32 ViewType = 7;
inline bool SJ_MarkInfo::has_viewtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_MarkInfo::set_has_viewtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_MarkInfo::clear_has_viewtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_MarkInfo::clear_viewtype() {
  viewtype_ = 0;
  clear_has_viewtype();
}
inline ::google::protobuf::int32 SJ_MarkInfo::viewtype() const {
  return viewtype_;
}
inline void SJ_MarkInfo::set_viewtype(::google::protobuf::int32 value) {
  set_has_viewtype();
  viewtype_ = value;
}

// required int32 DockObjID = 8;
inline bool SJ_MarkInfo::has_dockobjid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_MarkInfo::set_has_dockobjid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_MarkInfo::clear_has_dockobjid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_MarkInfo::clear_dockobjid() {
  dockobjid_ = 0;
  clear_has_dockobjid();
}
inline ::google::protobuf::int32 SJ_MarkInfo::dockobjid() const {
  return dockobjid_;
}
inline void SJ_MarkInfo::set_dockobjid(::google::protobuf::int32 value) {
  set_has_dockobjid();
  dockobjid_ = value;
}

// required int32 DockObjType = 9;
inline bool SJ_MarkInfo::has_dockobjtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_MarkInfo::set_has_dockobjtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_MarkInfo::clear_has_dockobjtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_MarkInfo::clear_dockobjtype() {
  dockobjtype_ = 0;
  clear_has_dockobjtype();
}
inline ::google::protobuf::int32 SJ_MarkInfo::dockobjtype() const {
  return dockobjtype_;
}
inline void SJ_MarkInfo::set_dockobjtype(::google::protobuf::int32 value) {
  set_has_dockobjtype();
  dockobjtype_ = value;
}

// required int32 MarkType = 10;
inline bool SJ_MarkInfo::has_marktype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_MarkInfo::set_has_marktype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_MarkInfo::clear_has_marktype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_MarkInfo::clear_marktype() {
  marktype_ = 0;
  clear_has_marktype();
}
inline ::google::protobuf::int32 SJ_MarkInfo::marktype() const {
  return marktype_;
}
inline void SJ_MarkInfo::set_marktype(::google::protobuf::int32 value) {
  set_has_marktype();
  marktype_ = value;
}

// required int32 FontSize = 11;
inline bool SJ_MarkInfo::has_fontsize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_MarkInfo::set_has_fontsize() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_MarkInfo::clear_has_fontsize() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_MarkInfo::clear_fontsize() {
  fontsize_ = 0;
  clear_has_fontsize();
}
inline ::google::protobuf::int32 SJ_MarkInfo::fontsize() const {
  return fontsize_;
}
inline void SJ_MarkInfo::set_fontsize(::google::protobuf::int32 value) {
  set_has_fontsize();
  fontsize_ = value;
}

// required double StartX = 12;
inline bool SJ_MarkInfo::has_startx() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_MarkInfo::set_has_startx() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_MarkInfo::clear_has_startx() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_MarkInfo::clear_startx() {
  startx_ = 0;
  clear_has_startx();
}
inline double SJ_MarkInfo::startx() const {
  return startx_;
}
inline void SJ_MarkInfo::set_startx(double value) {
  set_has_startx();
  startx_ = value;
}

// required double StartY = 13;
inline bool SJ_MarkInfo::has_starty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_MarkInfo::set_has_starty() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_MarkInfo::clear_has_starty() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_MarkInfo::clear_starty() {
  starty_ = 0;
  clear_has_starty();
}
inline double SJ_MarkInfo::starty() const {
  return starty_;
}
inline void SJ_MarkInfo::set_starty(double value) {
  set_has_starty();
  starty_ = value;
}

// required double OffsetX = 14;
inline bool SJ_MarkInfo::has_offsetx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_MarkInfo::set_has_offsetx() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_MarkInfo::clear_has_offsetx() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_MarkInfo::clear_offsetx() {
  offsetx_ = 0;
  clear_has_offsetx();
}
inline double SJ_MarkInfo::offsetx() const {
  return offsetx_;
}
inline void SJ_MarkInfo::set_offsetx(double value) {
  set_has_offsetx();
  offsetx_ = value;
}

// required double OffsetY = 15;
inline bool SJ_MarkInfo::has_offsety() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_MarkInfo::set_has_offsety() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_MarkInfo::clear_has_offsety() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_MarkInfo::clear_offsety() {
  offsety_ = 0;
  clear_has_offsety();
}
inline double SJ_MarkInfo::offsety() const {
  return offsety_;
}
inline void SJ_MarkInfo::set_offsety(double value) {
  set_has_offsety();
  offsety_ = value;
}

// required double StopX = 16;
inline bool SJ_MarkInfo::has_stopx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_MarkInfo::set_has_stopx() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_MarkInfo::clear_has_stopx() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_MarkInfo::clear_stopx() {
  stopx_ = 0;
  clear_has_stopx();
}
inline double SJ_MarkInfo::stopx() const {
  return stopx_;
}
inline void SJ_MarkInfo::set_stopx(double value) {
  set_has_stopx();
  stopx_ = value;
}

// required double StopY = 17;
inline bool SJ_MarkInfo::has_stopy() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_MarkInfo::set_has_stopy() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_MarkInfo::clear_has_stopy() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_MarkInfo::clear_stopy() {
  stopy_ = 0;
  clear_has_stopy();
}
inline double SJ_MarkInfo::stopy() const {
  return stopy_;
}
inline void SJ_MarkInfo::set_stopy(double value) {
  set_has_stopy();
  stopy_ = value;
}

// required double TopLeftX = 18;
inline bool SJ_MarkInfo::has_topleftx() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_MarkInfo::set_has_topleftx() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_MarkInfo::clear_has_topleftx() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_MarkInfo::clear_topleftx() {
  topleftx_ = 0;
  clear_has_topleftx();
}
inline double SJ_MarkInfo::topleftx() const {
  return topleftx_;
}
inline void SJ_MarkInfo::set_topleftx(double value) {
  set_has_topleftx();
  topleftx_ = value;
}

// required double TopLeftY = 19;
inline bool SJ_MarkInfo::has_toplefty() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_MarkInfo::set_has_toplefty() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_MarkInfo::clear_has_toplefty() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_MarkInfo::clear_toplefty() {
  toplefty_ = 0;
  clear_has_toplefty();
}
inline double SJ_MarkInfo::toplefty() const {
  return toplefty_;
}
inline void SJ_MarkInfo::set_toplefty(double value) {
  set_has_toplefty();
  toplefty_ = value;
}

// required double Width = 20;
inline bool SJ_MarkInfo::has_width() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_MarkInfo::set_has_width() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_MarkInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_MarkInfo::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double SJ_MarkInfo::width() const {
  return width_;
}
inline void SJ_MarkInfo::set_width(double value) {
  set_has_width();
  width_ = value;
}

// required double Height = 21;
inline bool SJ_MarkInfo::has_height() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_MarkInfo::set_has_height() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_MarkInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_MarkInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double SJ_MarkInfo::height() const {
  return height_;
}
inline void SJ_MarkInfo::set_height(double value) {
  set_has_height();
  height_ = value;
}

// required bool IsVisible = 22;
inline bool SJ_MarkInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_MarkInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_MarkInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_MarkInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_MarkInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_MarkInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 23;
inline bool SJ_MarkInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_MarkInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_MarkInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_MarkInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_MarkInfo::islocked() const {
  return islocked_;
}
inline void SJ_MarkInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required bool EditSign = 24;
inline bool SJ_MarkInfo::has_editsign() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_MarkInfo::set_has_editsign() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_MarkInfo::clear_has_editsign() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_MarkInfo::clear_editsign() {
  editsign_ = false;
  clear_has_editsign();
}
inline bool SJ_MarkInfo::editsign() const {
  return editsign_;
}
inline void SJ_MarkInfo::set_editsign(bool value) {
  set_has_editsign();
  editsign_ = value;
}

// required bool StrickOut = 25;
inline bool SJ_MarkInfo::has_strickout() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_MarkInfo::set_has_strickout() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_MarkInfo::clear_has_strickout() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_MarkInfo::clear_strickout() {
  strickout_ = false;
  clear_has_strickout();
}
inline bool SJ_MarkInfo::strickout() const {
  return strickout_;
}
inline void SJ_MarkInfo::set_strickout(bool value) {
  set_has_strickout();
  strickout_ = value;
}

// required bool UnderLine = 26;
inline bool SJ_MarkInfo::has_underline() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_MarkInfo::set_has_underline() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_MarkInfo::clear_has_underline() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_MarkInfo::clear_underline() {
  underline_ = false;
  clear_has_underline();
}
inline bool SJ_MarkInfo::underline() const {
  return underline_;
}
inline void SJ_MarkInfo::set_underline(bool value) {
  set_has_underline();
  underline_ = value;
}

// required bool Italic = 27;
inline bool SJ_MarkInfo::has_italic() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_MarkInfo::set_has_italic() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_MarkInfo::clear_has_italic() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_MarkInfo::clear_italic() {
  italic_ = false;
  clear_has_italic();
}
inline bool SJ_MarkInfo::italic() const {
  return italic_;
}
inline void SJ_MarkInfo::set_italic(bool value) {
  set_has_italic();
  italic_ = value;
}

// required bool Bold = 28;
inline bool SJ_MarkInfo::has_bold() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_MarkInfo::set_has_bold() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_MarkInfo::clear_has_bold() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_MarkInfo::clear_bold() {
  bold_ = false;
  clear_has_bold();
}
inline bool SJ_MarkInfo::bold() const {
  return bold_;
}
inline void SJ_MarkInfo::set_bold(bool value) {
  set_has_bold();
  bold_ = value;
}

// required int64 BGColor = 29;
inline bool SJ_MarkInfo::has_bgcolor() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_MarkInfo::set_has_bgcolor() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_MarkInfo::clear_has_bgcolor() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_MarkInfo::clear_bgcolor() {
  bgcolor_ = GOOGLE_LONGLONG(0);
  clear_has_bgcolor();
}
inline ::google::protobuf::int64 SJ_MarkInfo::bgcolor() const {
  return bgcolor_;
}
inline void SJ_MarkInfo::set_bgcolor(::google::protobuf::int64 value) {
  set_has_bgcolor();
  bgcolor_ = value;
}

// required int64 FontColor = 30;
inline bool SJ_MarkInfo::has_fontcolor() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SJ_MarkInfo::set_has_fontcolor() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SJ_MarkInfo::clear_has_fontcolor() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SJ_MarkInfo::clear_fontcolor() {
  fontcolor_ = GOOGLE_LONGLONG(0);
  clear_has_fontcolor();
}
inline ::google::protobuf::int64 SJ_MarkInfo::fontcolor() const {
  return fontcolor_;
}
inline void SJ_MarkInfo::set_fontcolor(::google::protobuf::int64 value) {
  set_has_fontcolor();
  fontcolor_ = value;
}

// required int32 CreatorID = 31;
inline bool SJ_MarkInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SJ_MarkInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SJ_MarkInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SJ_MarkInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_MarkInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_MarkInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 32;
inline bool SJ_MarkInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SJ_MarkInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SJ_MarkInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SJ_MarkInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_MarkInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_MarkInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 33;
inline bool SJ_MarkInfo::has_createtime() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SJ_MarkInfo::set_has_createtime() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SJ_MarkInfo::clear_has_createtime() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SJ_MarkInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_MarkInfo::createtime() const {
  return createtime_;
}
inline void SJ_MarkInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 34;
inline bool SJ_MarkInfo::has_updatetime() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SJ_MarkInfo::set_has_updatetime() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SJ_MarkInfo::clear_has_updatetime() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SJ_MarkInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_MarkInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_MarkInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string FaceName = 35;
inline bool SJ_MarkInfo::has_facename() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SJ_MarkInfo::set_has_facename() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SJ_MarkInfo::clear_has_facename() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SJ_MarkInfo::clear_facename() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    facename_->clear();
  }
  clear_has_facename();
}
inline const ::std::string& SJ_MarkInfo::facename() const {
  return *facename_;
}
inline void SJ_MarkInfo::set_facename(const ::std::string& value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void SJ_MarkInfo::set_facename(const char* value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void SJ_MarkInfo::set_facename(const char* value, size_t size) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_MarkInfo::mutable_facename() {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  return facename_;
}
inline ::std::string* SJ_MarkInfo::release_facename() {
  clear_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facename_;
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_MarkInfo::set_allocated_facename(::std::string* facename) {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (facename) {
    set_has_facename();
    facename_ = facename;
  } else {
    clear_has_facename();
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string RemarkText = 36;
inline bool SJ_MarkInfo::has_remarktext() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SJ_MarkInfo::set_has_remarktext() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SJ_MarkInfo::clear_has_remarktext() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SJ_MarkInfo::clear_remarktext() {
  if (remarktext_ != &::google::protobuf::internal::kEmptyString) {
    remarktext_->clear();
  }
  clear_has_remarktext();
}
inline const ::std::string& SJ_MarkInfo::remarktext() const {
  return *remarktext_;
}
inline void SJ_MarkInfo::set_remarktext(const ::std::string& value) {
  set_has_remarktext();
  if (remarktext_ == &::google::protobuf::internal::kEmptyString) {
    remarktext_ = new ::std::string;
  }
  remarktext_->assign(value);
}
inline void SJ_MarkInfo::set_remarktext(const char* value) {
  set_has_remarktext();
  if (remarktext_ == &::google::protobuf::internal::kEmptyString) {
    remarktext_ = new ::std::string;
  }
  remarktext_->assign(value);
}
inline void SJ_MarkInfo::set_remarktext(const char* value, size_t size) {
  set_has_remarktext();
  if (remarktext_ == &::google::protobuf::internal::kEmptyString) {
    remarktext_ = new ::std::string;
  }
  remarktext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_MarkInfo::mutable_remarktext() {
  set_has_remarktext();
  if (remarktext_ == &::google::protobuf::internal::kEmptyString) {
    remarktext_ = new ::std::string;
  }
  return remarktext_;
}
inline ::std::string* SJ_MarkInfo::release_remarktext() {
  clear_has_remarktext();
  if (remarktext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remarktext_;
    remarktext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_MarkInfo::set_allocated_remarktext(::std::string* remarktext) {
  if (remarktext_ != &::google::protobuf::internal::kEmptyString) {
    delete remarktext_;
  }
  if (remarktext) {
    set_has_remarktext();
    remarktext_ = remarktext;
  } else {
    clear_has_remarktext();
    remarktext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SJ_MatrixInfo

// required int64 OrderID = 1;
inline bool SJ_MatrixInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_MatrixInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_MatrixInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_MatrixInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_MatrixInfo::orderid() const {
  return orderid_;
}
inline void SJ_MatrixInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_MatrixInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_MatrixInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_MatrixInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_MatrixInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_MatrixInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_MatrixInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_MatrixInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_MatrixInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_MatrixInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_MatrixInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_MatrixInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_MatrixInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 FactoryID = 4;
inline bool SJ_MatrixInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_MatrixInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_MatrixInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_MatrixInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_MatrixInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_MatrixInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 5;
inline bool SJ_MatrixInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_MatrixInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_MatrixInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_MatrixInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_MatrixInfo::vercode() const {
  return vercode_;
}
inline void SJ_MatrixInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int64 TransObjID = 6;
inline bool SJ_MatrixInfo::has_transobjid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_MatrixInfo::set_has_transobjid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_MatrixInfo::clear_has_transobjid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_MatrixInfo::clear_transobjid() {
  transobjid_ = GOOGLE_LONGLONG(0);
  clear_has_transobjid();
}
inline ::google::protobuf::int64 SJ_MatrixInfo::transobjid() const {
  return transobjid_;
}
inline void SJ_MatrixInfo::set_transobjid(::google::protobuf::int64 value) {
  set_has_transobjid();
  transobjid_ = value;
}

// required int32 TransObjType = 7;
inline bool SJ_MatrixInfo::has_transobjtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_MatrixInfo::set_has_transobjtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_MatrixInfo::clear_has_transobjtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_MatrixInfo::clear_transobjtype() {
  transobjtype_ = 0;
  clear_has_transobjtype();
}
inline ::google::protobuf::int32 SJ_MatrixInfo::transobjtype() const {
  return transobjtype_;
}
inline void SJ_MatrixInfo::set_transobjtype(::google::protobuf::int32 value) {
  set_has_transobjtype();
  transobjtype_ = value;
}

// required int32 MajorCurSel = 8;
inline bool SJ_MatrixInfo::has_majorcursel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_MatrixInfo::set_has_majorcursel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_MatrixInfo::clear_has_majorcursel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_MatrixInfo::clear_majorcursel() {
  majorcursel_ = 0;
  clear_has_majorcursel();
}
inline ::google::protobuf::int32 SJ_MatrixInfo::majorcursel() const {
  return majorcursel_;
}
inline void SJ_MatrixInfo::set_majorcursel(::google::protobuf::int32 value) {
  set_has_majorcursel();
  majorcursel_ = value;
}

// required int32 MinorCurSel = 9;
inline bool SJ_MatrixInfo::has_minorcursel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_MatrixInfo::set_has_minorcursel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_MatrixInfo::clear_has_minorcursel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_MatrixInfo::clear_minorcursel() {
  minorcursel_ = 0;
  clear_has_minorcursel();
}
inline ::google::protobuf::int32 SJ_MatrixInfo::minorcursel() const {
  return minorcursel_;
}
inline void SJ_MatrixInfo::set_minorcursel(::google::protobuf::int32 value) {
  set_has_minorcursel();
  minorcursel_ = value;
}

// required int32 MatCurIndex = 10;
inline bool SJ_MatrixInfo::has_matcurindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_MatrixInfo::set_has_matcurindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_MatrixInfo::clear_has_matcurindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_MatrixInfo::clear_matcurindex() {
  matcurindex_ = 0;
  clear_has_matcurindex();
}
inline ::google::protobuf::int32 SJ_MatrixInfo::matcurindex() const {
  return matcurindex_;
}
inline void SJ_MatrixInfo::set_matcurindex(::google::protobuf::int32 value) {
  set_has_matcurindex();
  matcurindex_ = value;
}

// required int32 CabMatPlanID = 11;
inline bool SJ_MatrixInfo::has_cabmatplanid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_MatrixInfo::set_has_cabmatplanid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_MatrixInfo::clear_has_cabmatplanid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_MatrixInfo::clear_cabmatplanid() {
  cabmatplanid_ = 0;
  clear_has_cabmatplanid();
}
inline ::google::protobuf::int32 SJ_MatrixInfo::cabmatplanid() const {
  return cabmatplanid_;
}
inline void SJ_MatrixInfo::set_cabmatplanid(::google::protobuf::int32 value) {
  set_has_cabmatplanid();
  cabmatplanid_ = value;
}

// required double M11 = 12;
inline bool SJ_MatrixInfo::has_m11() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_MatrixInfo::set_has_m11() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_MatrixInfo::clear_has_m11() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_MatrixInfo::clear_m11() {
  m11_ = 0;
  clear_has_m11();
}
inline double SJ_MatrixInfo::m11() const {
  return m11_;
}
inline void SJ_MatrixInfo::set_m11(double value) {
  set_has_m11();
  m11_ = value;
}

// required double M12 = 13;
inline bool SJ_MatrixInfo::has_m12() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_MatrixInfo::set_has_m12() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_MatrixInfo::clear_has_m12() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_MatrixInfo::clear_m12() {
  m12_ = 0;
  clear_has_m12();
}
inline double SJ_MatrixInfo::m12() const {
  return m12_;
}
inline void SJ_MatrixInfo::set_m12(double value) {
  set_has_m12();
  m12_ = value;
}

// required double M13 = 14;
inline bool SJ_MatrixInfo::has_m13() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_MatrixInfo::set_has_m13() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_MatrixInfo::clear_has_m13() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_MatrixInfo::clear_m13() {
  m13_ = 0;
  clear_has_m13();
}
inline double SJ_MatrixInfo::m13() const {
  return m13_;
}
inline void SJ_MatrixInfo::set_m13(double value) {
  set_has_m13();
  m13_ = value;
}

// required double M21 = 15;
inline bool SJ_MatrixInfo::has_m21() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_MatrixInfo::set_has_m21() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_MatrixInfo::clear_has_m21() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_MatrixInfo::clear_m21() {
  m21_ = 0;
  clear_has_m21();
}
inline double SJ_MatrixInfo::m21() const {
  return m21_;
}
inline void SJ_MatrixInfo::set_m21(double value) {
  set_has_m21();
  m21_ = value;
}

// required double M22 = 16;
inline bool SJ_MatrixInfo::has_m22() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_MatrixInfo::set_has_m22() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_MatrixInfo::clear_has_m22() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_MatrixInfo::clear_m22() {
  m22_ = 0;
  clear_has_m22();
}
inline double SJ_MatrixInfo::m22() const {
  return m22_;
}
inline void SJ_MatrixInfo::set_m22(double value) {
  set_has_m22();
  m22_ = value;
}

// required double M23 = 17;
inline bool SJ_MatrixInfo::has_m23() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_MatrixInfo::set_has_m23() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_MatrixInfo::clear_has_m23() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_MatrixInfo::clear_m23() {
  m23_ = 0;
  clear_has_m23();
}
inline double SJ_MatrixInfo::m23() const {
  return m23_;
}
inline void SJ_MatrixInfo::set_m23(double value) {
  set_has_m23();
  m23_ = value;
}

// required double M31 = 18;
inline bool SJ_MatrixInfo::has_m31() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_MatrixInfo::set_has_m31() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_MatrixInfo::clear_has_m31() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_MatrixInfo::clear_m31() {
  m31_ = 0;
  clear_has_m31();
}
inline double SJ_MatrixInfo::m31() const {
  return m31_;
}
inline void SJ_MatrixInfo::set_m31(double value) {
  set_has_m31();
  m31_ = value;
}

// required double M32 = 19;
inline bool SJ_MatrixInfo::has_m32() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_MatrixInfo::set_has_m32() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_MatrixInfo::clear_has_m32() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_MatrixInfo::clear_m32() {
  m32_ = 0;
  clear_has_m32();
}
inline double SJ_MatrixInfo::m32() const {
  return m32_;
}
inline void SJ_MatrixInfo::set_m32(double value) {
  set_has_m32();
  m32_ = value;
}

// required double M33 = 20;
inline bool SJ_MatrixInfo::has_m33() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_MatrixInfo::set_has_m33() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_MatrixInfo::clear_has_m33() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_MatrixInfo::clear_m33() {
  m33_ = 0;
  clear_has_m33();
}
inline double SJ_MatrixInfo::m33() const {
  return m33_;
}
inline void SJ_MatrixInfo::set_m33(double value) {
  set_has_m33();
  m33_ = value;
}

// required double M41 = 21;
inline bool SJ_MatrixInfo::has_m41() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_MatrixInfo::set_has_m41() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_MatrixInfo::clear_has_m41() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_MatrixInfo::clear_m41() {
  m41_ = 0;
  clear_has_m41();
}
inline double SJ_MatrixInfo::m41() const {
  return m41_;
}
inline void SJ_MatrixInfo::set_m41(double value) {
  set_has_m41();
  m41_ = value;
}

// required double M42 = 22;
inline bool SJ_MatrixInfo::has_m42() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_MatrixInfo::set_has_m42() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_MatrixInfo::clear_has_m42() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_MatrixInfo::clear_m42() {
  m42_ = 0;
  clear_has_m42();
}
inline double SJ_MatrixInfo::m42() const {
  return m42_;
}
inline void SJ_MatrixInfo::set_m42(double value) {
  set_has_m42();
  m42_ = value;
}

// required double M43 = 23;
inline bool SJ_MatrixInfo::has_m43() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_MatrixInfo::set_has_m43() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_MatrixInfo::clear_has_m43() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_MatrixInfo::clear_m43() {
  m43_ = 0;
  clear_has_m43();
}
inline double SJ_MatrixInfo::m43() const {
  return m43_;
}
inline void SJ_MatrixInfo::set_m43(double value) {
  set_has_m43();
  m43_ = value;
}

// required double M44 = 24;
inline bool SJ_MatrixInfo::has_m44() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_MatrixInfo::set_has_m44() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_MatrixInfo::clear_has_m44() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_MatrixInfo::clear_m44() {
  m44_ = 0;
  clear_has_m44();
}
inline double SJ_MatrixInfo::m44() const {
  return m44_;
}
inline void SJ_MatrixInfo::set_m44(double value) {
  set_has_m44();
  m44_ = value;
}

// -------------------------------------------------------------------

// SJ_OrderAddedInfo

// required int32 OrderAddedID = 1;
inline bool SJ_OrderAddedInfo::has_orderaddedid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_OrderAddedInfo::set_has_orderaddedid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_OrderAddedInfo::clear_has_orderaddedid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_OrderAddedInfo::clear_orderaddedid() {
  orderaddedid_ = 0;
  clear_has_orderaddedid();
}
inline ::google::protobuf::int32 SJ_OrderAddedInfo::orderaddedid() const {
  return orderaddedid_;
}
inline void SJ_OrderAddedInfo::set_orderaddedid(::google::protobuf::int32 value) {
  set_has_orderaddedid();
  orderaddedid_ = value;
}

// required int64 OrderID = 2;
inline bool SJ_OrderAddedInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_OrderAddedInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_OrderAddedInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_OrderAddedInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_OrderAddedInfo::orderid() const {
  return orderid_;
}
inline void SJ_OrderAddedInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_OrderAddedInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_OrderAddedInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_OrderAddedInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_OrderAddedInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_OrderAddedInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_OrderAddedInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 FactoryID = 4;
inline bool SJ_OrderAddedInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_OrderAddedInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_OrderAddedInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_OrderAddedInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_OrderAddedInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_OrderAddedInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 UseCount = 5;
inline bool SJ_OrderAddedInfo::has_usecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_OrderAddedInfo::set_has_usecount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_OrderAddedInfo::clear_has_usecount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_OrderAddedInfo::clear_usecount() {
  usecount_ = 0;
  clear_has_usecount();
}
inline ::google::protobuf::int32 SJ_OrderAddedInfo::usecount() const {
  return usecount_;
}
inline void SJ_OrderAddedInfo::set_usecount(::google::protobuf::int32 value) {
  set_has_usecount();
  usecount_ = value;
}

// required double UnitPrice = 6;
inline bool SJ_OrderAddedInfo::has_unitprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_OrderAddedInfo::set_has_unitprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_OrderAddedInfo::clear_has_unitprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_OrderAddedInfo::clear_unitprice() {
  unitprice_ = 0;
  clear_has_unitprice();
}
inline double SJ_OrderAddedInfo::unitprice() const {
  return unitprice_;
}
inline void SJ_OrderAddedInfo::set_unitprice(double value) {
  set_has_unitprice();
  unitprice_ = value;
}

// required int64 CreateTime = 7;
inline bool SJ_OrderAddedInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_OrderAddedInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_OrderAddedInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_OrderAddedInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_OrderAddedInfo::createtime() const {
  return createtime_;
}
inline void SJ_OrderAddedInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 8;
inline bool SJ_OrderAddedInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_OrderAddedInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_OrderAddedInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_OrderAddedInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_OrderAddedInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_OrderAddedInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string AddedName = 9;
inline bool SJ_OrderAddedInfo::has_addedname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_OrderAddedInfo::set_has_addedname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_OrderAddedInfo::clear_has_addedname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_OrderAddedInfo::clear_addedname() {
  if (addedname_ != &::google::protobuf::internal::kEmptyString) {
    addedname_->clear();
  }
  clear_has_addedname();
}
inline const ::std::string& SJ_OrderAddedInfo::addedname() const {
  return *addedname_;
}
inline void SJ_OrderAddedInfo::set_addedname(const ::std::string& value) {
  set_has_addedname();
  if (addedname_ == &::google::protobuf::internal::kEmptyString) {
    addedname_ = new ::std::string;
  }
  addedname_->assign(value);
}
inline void SJ_OrderAddedInfo::set_addedname(const char* value) {
  set_has_addedname();
  if (addedname_ == &::google::protobuf::internal::kEmptyString) {
    addedname_ = new ::std::string;
  }
  addedname_->assign(value);
}
inline void SJ_OrderAddedInfo::set_addedname(const char* value, size_t size) {
  set_has_addedname();
  if (addedname_ == &::google::protobuf::internal::kEmptyString) {
    addedname_ = new ::std::string;
  }
  addedname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderAddedInfo::mutable_addedname() {
  set_has_addedname();
  if (addedname_ == &::google::protobuf::internal::kEmptyString) {
    addedname_ = new ::std::string;
  }
  return addedname_;
}
inline ::std::string* SJ_OrderAddedInfo::release_addedname() {
  clear_has_addedname();
  if (addedname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addedname_;
    addedname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderAddedInfo::set_allocated_addedname(::std::string* addedname) {
  if (addedname_ != &::google::protobuf::internal::kEmptyString) {
    delete addedname_;
  }
  if (addedname) {
    set_has_addedname();
    addedname_ = addedname;
  } else {
    clear_has_addedname();
    addedname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string MatName = 10;
inline bool SJ_OrderAddedInfo::has_matname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_OrderAddedInfo::set_has_matname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_OrderAddedInfo::clear_has_matname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_OrderAddedInfo::clear_matname() {
  if (matname_ != &::google::protobuf::internal::kEmptyString) {
    matname_->clear();
  }
  clear_has_matname();
}
inline const ::std::string& SJ_OrderAddedInfo::matname() const {
  return *matname_;
}
inline void SJ_OrderAddedInfo::set_matname(const ::std::string& value) {
  set_has_matname();
  if (matname_ == &::google::protobuf::internal::kEmptyString) {
    matname_ = new ::std::string;
  }
  matname_->assign(value);
}
inline void SJ_OrderAddedInfo::set_matname(const char* value) {
  set_has_matname();
  if (matname_ == &::google::protobuf::internal::kEmptyString) {
    matname_ = new ::std::string;
  }
  matname_->assign(value);
}
inline void SJ_OrderAddedInfo::set_matname(const char* value, size_t size) {
  set_has_matname();
  if (matname_ == &::google::protobuf::internal::kEmptyString) {
    matname_ = new ::std::string;
  }
  matname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderAddedInfo::mutable_matname() {
  set_has_matname();
  if (matname_ == &::google::protobuf::internal::kEmptyString) {
    matname_ = new ::std::string;
  }
  return matname_;
}
inline ::std::string* SJ_OrderAddedInfo::release_matname() {
  clear_has_matname();
  if (matname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = matname_;
    matname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderAddedInfo::set_allocated_matname(::std::string* matname) {
  if (matname_ != &::google::protobuf::internal::kEmptyString) {
    delete matname_;
  }
  if (matname) {
    set_has_matname();
    matname_ = matname;
  } else {
    clear_has_matname();
    matname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string UnitName = 11;
inline bool SJ_OrderAddedInfo::has_unitname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_OrderAddedInfo::set_has_unitname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_OrderAddedInfo::clear_has_unitname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_OrderAddedInfo::clear_unitname() {
  if (unitname_ != &::google::protobuf::internal::kEmptyString) {
    unitname_->clear();
  }
  clear_has_unitname();
}
inline const ::std::string& SJ_OrderAddedInfo::unitname() const {
  return *unitname_;
}
inline void SJ_OrderAddedInfo::set_unitname(const ::std::string& value) {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void SJ_OrderAddedInfo::set_unitname(const char* value) {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void SJ_OrderAddedInfo::set_unitname(const char* value, size_t size) {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderAddedInfo::mutable_unitname() {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    unitname_ = new ::std::string;
  }
  return unitname_;
}
inline ::std::string* SJ_OrderAddedInfo::release_unitname() {
  clear_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitname_;
    unitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderAddedInfo::set_allocated_unitname(::std::string* unitname) {
  if (unitname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitname_;
  }
  if (unitname) {
    set_has_unitname();
    unitname_ = unitname;
  } else {
    clear_has_unitname();
    unitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string SpecName = 12;
inline bool SJ_OrderAddedInfo::has_specname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_OrderAddedInfo::set_has_specname() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_OrderAddedInfo::clear_has_specname() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_OrderAddedInfo::clear_specname() {
  if (specname_ != &::google::protobuf::internal::kEmptyString) {
    specname_->clear();
  }
  clear_has_specname();
}
inline const ::std::string& SJ_OrderAddedInfo::specname() const {
  return *specname_;
}
inline void SJ_OrderAddedInfo::set_specname(const ::std::string& value) {
  set_has_specname();
  if (specname_ == &::google::protobuf::internal::kEmptyString) {
    specname_ = new ::std::string;
  }
  specname_->assign(value);
}
inline void SJ_OrderAddedInfo::set_specname(const char* value) {
  set_has_specname();
  if (specname_ == &::google::protobuf::internal::kEmptyString) {
    specname_ = new ::std::string;
  }
  specname_->assign(value);
}
inline void SJ_OrderAddedInfo::set_specname(const char* value, size_t size) {
  set_has_specname();
  if (specname_ == &::google::protobuf::internal::kEmptyString) {
    specname_ = new ::std::string;
  }
  specname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderAddedInfo::mutable_specname() {
  set_has_specname();
  if (specname_ == &::google::protobuf::internal::kEmptyString) {
    specname_ = new ::std::string;
  }
  return specname_;
}
inline ::std::string* SJ_OrderAddedInfo::release_specname() {
  clear_has_specname();
  if (specname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = specname_;
    specname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderAddedInfo::set_allocated_specname(::std::string* specname) {
  if (specname_ != &::google::protobuf::internal::kEmptyString) {
    delete specname_;
  }
  if (specname) {
    set_has_specname();
    specname_ = specname;
  } else {
    clear_has_specname();
    specname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string AttachFileName = 13;
inline bool SJ_OrderAddedInfo::has_attachfilename() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_OrderAddedInfo::set_has_attachfilename() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_OrderAddedInfo::clear_has_attachfilename() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_OrderAddedInfo::clear_attachfilename() {
  if (attachfilename_ != &::google::protobuf::internal::kEmptyString) {
    attachfilename_->clear();
  }
  clear_has_attachfilename();
}
inline const ::std::string& SJ_OrderAddedInfo::attachfilename() const {
  return *attachfilename_;
}
inline void SJ_OrderAddedInfo::set_attachfilename(const ::std::string& value) {
  set_has_attachfilename();
  if (attachfilename_ == &::google::protobuf::internal::kEmptyString) {
    attachfilename_ = new ::std::string;
  }
  attachfilename_->assign(value);
}
inline void SJ_OrderAddedInfo::set_attachfilename(const char* value) {
  set_has_attachfilename();
  if (attachfilename_ == &::google::protobuf::internal::kEmptyString) {
    attachfilename_ = new ::std::string;
  }
  attachfilename_->assign(value);
}
inline void SJ_OrderAddedInfo::set_attachfilename(const char* value, size_t size) {
  set_has_attachfilename();
  if (attachfilename_ == &::google::protobuf::internal::kEmptyString) {
    attachfilename_ = new ::std::string;
  }
  attachfilename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderAddedInfo::mutable_attachfilename() {
  set_has_attachfilename();
  if (attachfilename_ == &::google::protobuf::internal::kEmptyString) {
    attachfilename_ = new ::std::string;
  }
  return attachfilename_;
}
inline ::std::string* SJ_OrderAddedInfo::release_attachfilename() {
  clear_has_attachfilename();
  if (attachfilename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attachfilename_;
    attachfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderAddedInfo::set_allocated_attachfilename(::std::string* attachfilename) {
  if (attachfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete attachfilename_;
  }
  if (attachfilename) {
    set_has_attachfilename();
    attachfilename_ = attachfilename;
  } else {
    clear_has_attachfilename();
    attachfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SJ_OrderDataInfo

// required int64 OrderID = 1;
inline bool SJ_OrderDataInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_OrderDataInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_OrderDataInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_OrderDataInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_OrderDataInfo::orderid() const {
  return orderid_;
}
inline void SJ_OrderDataInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_OrderDataInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_OrderDataInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_OrderDataInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_OrderDataInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_OrderDataInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_OrderDataInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 FactoryID = 3;
inline bool SJ_OrderDataInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_OrderDataInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_OrderDataInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_OrderDataInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_OrderDataInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_OrderDataInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 ShopID = 4;
inline bool SJ_OrderDataInfo::has_shopid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_OrderDataInfo::set_has_shopid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_OrderDataInfo::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_OrderDataInfo::clear_shopid() {
  shopid_ = 0;
  clear_has_shopid();
}
inline ::google::protobuf::int32 SJ_OrderDataInfo::shopid() const {
  return shopid_;
}
inline void SJ_OrderDataInfo::set_shopid(::google::protobuf::int32 value) {
  set_has_shopid();
  shopid_ = value;
}

// required int32 MaxMetaID = 5;
inline bool SJ_OrderDataInfo::has_maxmetaid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_OrderDataInfo::set_has_maxmetaid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_OrderDataInfo::clear_has_maxmetaid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_OrderDataInfo::clear_maxmetaid() {
  maxmetaid_ = 0;
  clear_has_maxmetaid();
}
inline ::google::protobuf::int32 SJ_OrderDataInfo::maxmetaid() const {
  return maxmetaid_;
}
inline void SJ_OrderDataInfo::set_maxmetaid(::google::protobuf::int32 value) {
  set_has_maxmetaid();
  maxmetaid_ = value;
}

// required int32 DesignerID = 6;
inline bool SJ_OrderDataInfo::has_designerid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_OrderDataInfo::set_has_designerid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_OrderDataInfo::clear_has_designerid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_OrderDataInfo::clear_designerid() {
  designerid_ = 0;
  clear_has_designerid();
}
inline ::google::protobuf::int32 SJ_OrderDataInfo::designerid() const {
  return designerid_;
}
inline void SJ_OrderDataInfo::set_designerid(::google::protobuf::int32 value) {
  set_has_designerid();
  designerid_ = value;
}

// required int32 SellerID = 7;
inline bool SJ_OrderDataInfo::has_sellerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_OrderDataInfo::set_has_sellerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_OrderDataInfo::clear_has_sellerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_OrderDataInfo::clear_sellerid() {
  sellerid_ = 0;
  clear_has_sellerid();
}
inline ::google::protobuf::int32 SJ_OrderDataInfo::sellerid() const {
  return sellerid_;
}
inline void SJ_OrderDataInfo::set_sellerid(::google::protobuf::int32 value) {
  set_has_sellerid();
  sellerid_ = value;
}

// required int32 PreSurveyorID = 8;
inline bool SJ_OrderDataInfo::has_presurveyorid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_OrderDataInfo::set_has_presurveyorid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_OrderDataInfo::clear_has_presurveyorid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_OrderDataInfo::clear_presurveyorid() {
  presurveyorid_ = 0;
  clear_has_presurveyorid();
}
inline ::google::protobuf::int32 SJ_OrderDataInfo::presurveyorid() const {
  return presurveyorid_;
}
inline void SJ_OrderDataInfo::set_presurveyorid(::google::protobuf::int32 value) {
  set_has_presurveyorid();
  presurveyorid_ = value;
}

// required int32 ReSurveyorID = 9;
inline bool SJ_OrderDataInfo::has_resurveyorid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_OrderDataInfo::set_has_resurveyorid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_OrderDataInfo::clear_has_resurveyorid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_OrderDataInfo::clear_resurveyorid() {
  resurveyorid_ = 0;
  clear_has_resurveyorid();
}
inline ::google::protobuf::int32 SJ_OrderDataInfo::resurveyorid() const {
  return resurveyorid_;
}
inline void SJ_OrderDataInfo::set_resurveyorid(::google::protobuf::int32 value) {
  set_has_resurveyorid();
  resurveyorid_ = value;
}

// required bool IsNew = 10;
inline bool SJ_OrderDataInfo::has_isnew() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_OrderDataInfo::set_has_isnew() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_OrderDataInfo::clear_has_isnew() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_OrderDataInfo::clear_isnew() {
  isnew_ = false;
  clear_has_isnew();
}
inline bool SJ_OrderDataInfo::isnew() const {
  return isnew_;
}
inline void SJ_OrderDataInfo::set_isnew(bool value) {
  set_has_isnew();
  isnew_ = value;
}

// required bool IsShare = 11;
inline bool SJ_OrderDataInfo::has_isshare() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_OrderDataInfo::set_has_isshare() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_OrderDataInfo::clear_has_isshare() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_OrderDataInfo::clear_isshare() {
  isshare_ = false;
  clear_has_isshare();
}
inline bool SJ_OrderDataInfo::isshare() const {
  return isshare_;
}
inline void SJ_OrderDataInfo::set_isshare(bool value) {
  set_has_isshare();
  isshare_ = value;
}

// required bool IsUpload = 12;
inline bool SJ_OrderDataInfo::has_isupload() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_OrderDataInfo::set_has_isupload() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_OrderDataInfo::clear_has_isupload() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_OrderDataInfo::clear_isupload() {
  isupload_ = false;
  clear_has_isupload();
}
inline bool SJ_OrderDataInfo::isupload() const {
  return isupload_;
}
inline void SJ_OrderDataInfo::set_isupload(bool value) {
  set_has_isupload();
  isupload_ = value;
}

// required int64 CreateTime = 13;
inline bool SJ_OrderDataInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_OrderDataInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_OrderDataInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_OrderDataInfo::createtime() const {
  return createtime_;
}
inline void SJ_OrderDataInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 PreSurveyTime = 14;
inline bool SJ_OrderDataInfo::has_presurveytime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_presurveytime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_OrderDataInfo::clear_has_presurveytime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_OrderDataInfo::clear_presurveytime() {
  presurveytime_ = GOOGLE_LONGLONG(0);
  clear_has_presurveytime();
}
inline ::google::protobuf::int64 SJ_OrderDataInfo::presurveytime() const {
  return presurveytime_;
}
inline void SJ_OrderDataInfo::set_presurveytime(::google::protobuf::int64 value) {
  set_has_presurveytime();
  presurveytime_ = value;
}

// required int64 ReSurveyTime = 15;
inline bool SJ_OrderDataInfo::has_resurveytime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_resurveytime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_OrderDataInfo::clear_has_resurveytime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_OrderDataInfo::clear_resurveytime() {
  resurveytime_ = GOOGLE_LONGLONG(0);
  clear_has_resurveytime();
}
inline ::google::protobuf::int64 SJ_OrderDataInfo::resurveytime() const {
  return resurveytime_;
}
inline void SJ_OrderDataInfo::set_resurveytime(::google::protobuf::int64 value) {
  set_has_resurveytime();
  resurveytime_ = value;
}

// required int64 OrderTime = 16;
inline bool SJ_OrderDataInfo::has_ordertime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_ordertime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_OrderDataInfo::clear_has_ordertime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_OrderDataInfo::clear_ordertime() {
  ordertime_ = GOOGLE_LONGLONG(0);
  clear_has_ordertime();
}
inline ::google::protobuf::int64 SJ_OrderDataInfo::ordertime() const {
  return ordertime_;
}
inline void SJ_OrderDataInfo::set_ordertime(::google::protobuf::int64 value) {
  set_has_ordertime();
  ordertime_ = value;
}

// required int64 DeliveryTime = 17;
inline bool SJ_OrderDataInfo::has_deliverytime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_deliverytime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_OrderDataInfo::clear_has_deliverytime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_OrderDataInfo::clear_deliverytime() {
  deliverytime_ = GOOGLE_LONGLONG(0);
  clear_has_deliverytime();
}
inline ::google::protobuf::int64 SJ_OrderDataInfo::deliverytime() const {
  return deliverytime_;
}
inline void SJ_OrderDataInfo::set_deliverytime(::google::protobuf::int64 value) {
  set_has_deliverytime();
  deliverytime_ = value;
}

// required int64 InstallTime = 18;
inline bool SJ_OrderDataInfo::has_installtime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_installtime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_OrderDataInfo::clear_has_installtime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_OrderDataInfo::clear_installtime() {
  installtime_ = GOOGLE_LONGLONG(0);
  clear_has_installtime();
}
inline ::google::protobuf::int64 SJ_OrderDataInfo::installtime() const {
  return installtime_;
}
inline void SJ_OrderDataInfo::set_installtime(::google::protobuf::int64 value) {
  set_has_installtime();
  installtime_ = value;
}

// required string GeoCode = 19;
inline bool SJ_OrderDataInfo::has_geocode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_geocode() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_OrderDataInfo::clear_has_geocode() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_OrderDataInfo::clear_geocode() {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    geocode_->clear();
  }
  clear_has_geocode();
}
inline const ::std::string& SJ_OrderDataInfo::geocode() const {
  return *geocode_;
}
inline void SJ_OrderDataInfo::set_geocode(const ::std::string& value) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(value);
}
inline void SJ_OrderDataInfo::set_geocode(const char* value) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(value);
}
inline void SJ_OrderDataInfo::set_geocode(const char* value, size_t size) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderDataInfo::mutable_geocode() {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  return geocode_;
}
inline ::std::string* SJ_OrderDataInfo::release_geocode() {
  clear_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = geocode_;
    geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderDataInfo::set_allocated_geocode(::std::string* geocode) {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    delete geocode_;
  }
  if (geocode) {
    set_has_geocode();
    geocode_ = geocode;
  } else {
    clear_has_geocode();
    geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OrderTitle = 20;
inline bool SJ_OrderDataInfo::has_ordertitle() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_ordertitle() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_OrderDataInfo::clear_has_ordertitle() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_OrderDataInfo::clear_ordertitle() {
  if (ordertitle_ != &::google::protobuf::internal::kEmptyString) {
    ordertitle_->clear();
  }
  clear_has_ordertitle();
}
inline const ::std::string& SJ_OrderDataInfo::ordertitle() const {
  return *ordertitle_;
}
inline void SJ_OrderDataInfo::set_ordertitle(const ::std::string& value) {
  set_has_ordertitle();
  if (ordertitle_ == &::google::protobuf::internal::kEmptyString) {
    ordertitle_ = new ::std::string;
  }
  ordertitle_->assign(value);
}
inline void SJ_OrderDataInfo::set_ordertitle(const char* value) {
  set_has_ordertitle();
  if (ordertitle_ == &::google::protobuf::internal::kEmptyString) {
    ordertitle_ = new ::std::string;
  }
  ordertitle_->assign(value);
}
inline void SJ_OrderDataInfo::set_ordertitle(const char* value, size_t size) {
  set_has_ordertitle();
  if (ordertitle_ == &::google::protobuf::internal::kEmptyString) {
    ordertitle_ = new ::std::string;
  }
  ordertitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderDataInfo::mutable_ordertitle() {
  set_has_ordertitle();
  if (ordertitle_ == &::google::protobuf::internal::kEmptyString) {
    ordertitle_ = new ::std::string;
  }
  return ordertitle_;
}
inline ::std::string* SJ_OrderDataInfo::release_ordertitle() {
  clear_has_ordertitle();
  if (ordertitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ordertitle_;
    ordertitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderDataInfo::set_allocated_ordertitle(::std::string* ordertitle) {
  if (ordertitle_ != &::google::protobuf::internal::kEmptyString) {
    delete ordertitle_;
  }
  if (ordertitle) {
    set_has_ordertitle();
    ordertitle_ = ordertitle;
  } else {
    clear_has_ordertitle();
    ordertitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CustomerName = 21;
inline bool SJ_OrderDataInfo::has_customername() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_customername() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_OrderDataInfo::clear_has_customername() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_OrderDataInfo::clear_customername() {
  if (customername_ != &::google::protobuf::internal::kEmptyString) {
    customername_->clear();
  }
  clear_has_customername();
}
inline const ::std::string& SJ_OrderDataInfo::customername() const {
  return *customername_;
}
inline void SJ_OrderDataInfo::set_customername(const ::std::string& value) {
  set_has_customername();
  if (customername_ == &::google::protobuf::internal::kEmptyString) {
    customername_ = new ::std::string;
  }
  customername_->assign(value);
}
inline void SJ_OrderDataInfo::set_customername(const char* value) {
  set_has_customername();
  if (customername_ == &::google::protobuf::internal::kEmptyString) {
    customername_ = new ::std::string;
  }
  customername_->assign(value);
}
inline void SJ_OrderDataInfo::set_customername(const char* value, size_t size) {
  set_has_customername();
  if (customername_ == &::google::protobuf::internal::kEmptyString) {
    customername_ = new ::std::string;
  }
  customername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderDataInfo::mutable_customername() {
  set_has_customername();
  if (customername_ == &::google::protobuf::internal::kEmptyString) {
    customername_ = new ::std::string;
  }
  return customername_;
}
inline ::std::string* SJ_OrderDataInfo::release_customername() {
  clear_has_customername();
  if (customername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customername_;
    customername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderDataInfo::set_allocated_customername(::std::string* customername) {
  if (customername_ != &::google::protobuf::internal::kEmptyString) {
    delete customername_;
  }
  if (customername) {
    set_has_customername();
    customername_ = customername;
  } else {
    clear_has_customername();
    customername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CustomerTel = 22;
inline bool SJ_OrderDataInfo::has_customertel() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_customertel() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_OrderDataInfo::clear_has_customertel() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_OrderDataInfo::clear_customertel() {
  if (customertel_ != &::google::protobuf::internal::kEmptyString) {
    customertel_->clear();
  }
  clear_has_customertel();
}
inline const ::std::string& SJ_OrderDataInfo::customertel() const {
  return *customertel_;
}
inline void SJ_OrderDataInfo::set_customertel(const ::std::string& value) {
  set_has_customertel();
  if (customertel_ == &::google::protobuf::internal::kEmptyString) {
    customertel_ = new ::std::string;
  }
  customertel_->assign(value);
}
inline void SJ_OrderDataInfo::set_customertel(const char* value) {
  set_has_customertel();
  if (customertel_ == &::google::protobuf::internal::kEmptyString) {
    customertel_ = new ::std::string;
  }
  customertel_->assign(value);
}
inline void SJ_OrderDataInfo::set_customertel(const char* value, size_t size) {
  set_has_customertel();
  if (customertel_ == &::google::protobuf::internal::kEmptyString) {
    customertel_ = new ::std::string;
  }
  customertel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderDataInfo::mutable_customertel() {
  set_has_customertel();
  if (customertel_ == &::google::protobuf::internal::kEmptyString) {
    customertel_ = new ::std::string;
  }
  return customertel_;
}
inline ::std::string* SJ_OrderDataInfo::release_customertel() {
  clear_has_customertel();
  if (customertel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customertel_;
    customertel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderDataInfo::set_allocated_customertel(::std::string* customertel) {
  if (customertel_ != &::google::protobuf::internal::kEmptyString) {
    delete customertel_;
  }
  if (customertel) {
    set_has_customertel();
    customertel_ = customertel;
  } else {
    clear_has_customertel();
    customertel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CustomerPostcode = 23;
inline bool SJ_OrderDataInfo::has_customerpostcode() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_customerpostcode() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_OrderDataInfo::clear_has_customerpostcode() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_OrderDataInfo::clear_customerpostcode() {
  if (customerpostcode_ != &::google::protobuf::internal::kEmptyString) {
    customerpostcode_->clear();
  }
  clear_has_customerpostcode();
}
inline const ::std::string& SJ_OrderDataInfo::customerpostcode() const {
  return *customerpostcode_;
}
inline void SJ_OrderDataInfo::set_customerpostcode(const ::std::string& value) {
  set_has_customerpostcode();
  if (customerpostcode_ == &::google::protobuf::internal::kEmptyString) {
    customerpostcode_ = new ::std::string;
  }
  customerpostcode_->assign(value);
}
inline void SJ_OrderDataInfo::set_customerpostcode(const char* value) {
  set_has_customerpostcode();
  if (customerpostcode_ == &::google::protobuf::internal::kEmptyString) {
    customerpostcode_ = new ::std::string;
  }
  customerpostcode_->assign(value);
}
inline void SJ_OrderDataInfo::set_customerpostcode(const char* value, size_t size) {
  set_has_customerpostcode();
  if (customerpostcode_ == &::google::protobuf::internal::kEmptyString) {
    customerpostcode_ = new ::std::string;
  }
  customerpostcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderDataInfo::mutable_customerpostcode() {
  set_has_customerpostcode();
  if (customerpostcode_ == &::google::protobuf::internal::kEmptyString) {
    customerpostcode_ = new ::std::string;
  }
  return customerpostcode_;
}
inline ::std::string* SJ_OrderDataInfo::release_customerpostcode() {
  clear_has_customerpostcode();
  if (customerpostcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customerpostcode_;
    customerpostcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderDataInfo::set_allocated_customerpostcode(::std::string* customerpostcode) {
  if (customerpostcode_ != &::google::protobuf::internal::kEmptyString) {
    delete customerpostcode_;
  }
  if (customerpostcode) {
    set_has_customerpostcode();
    customerpostcode_ = customerpostcode;
  } else {
    clear_has_customerpostcode();
    customerpostcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CustomerQQ = 24;
inline bool SJ_OrderDataInfo::has_customerqq() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_customerqq() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_OrderDataInfo::clear_has_customerqq() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_OrderDataInfo::clear_customerqq() {
  if (customerqq_ != &::google::protobuf::internal::kEmptyString) {
    customerqq_->clear();
  }
  clear_has_customerqq();
}
inline const ::std::string& SJ_OrderDataInfo::customerqq() const {
  return *customerqq_;
}
inline void SJ_OrderDataInfo::set_customerqq(const ::std::string& value) {
  set_has_customerqq();
  if (customerqq_ == &::google::protobuf::internal::kEmptyString) {
    customerqq_ = new ::std::string;
  }
  customerqq_->assign(value);
}
inline void SJ_OrderDataInfo::set_customerqq(const char* value) {
  set_has_customerqq();
  if (customerqq_ == &::google::protobuf::internal::kEmptyString) {
    customerqq_ = new ::std::string;
  }
  customerqq_->assign(value);
}
inline void SJ_OrderDataInfo::set_customerqq(const char* value, size_t size) {
  set_has_customerqq();
  if (customerqq_ == &::google::protobuf::internal::kEmptyString) {
    customerqq_ = new ::std::string;
  }
  customerqq_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderDataInfo::mutable_customerqq() {
  set_has_customerqq();
  if (customerqq_ == &::google::protobuf::internal::kEmptyString) {
    customerqq_ = new ::std::string;
  }
  return customerqq_;
}
inline ::std::string* SJ_OrderDataInfo::release_customerqq() {
  clear_has_customerqq();
  if (customerqq_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customerqq_;
    customerqq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderDataInfo::set_allocated_customerqq(::std::string* customerqq) {
  if (customerqq_ != &::google::protobuf::internal::kEmptyString) {
    delete customerqq_;
  }
  if (customerqq) {
    set_has_customerqq();
    customerqq_ = customerqq;
  } else {
    clear_has_customerqq();
    customerqq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CustomerEmail = 25;
inline bool SJ_OrderDataInfo::has_customeremail() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_customeremail() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_OrderDataInfo::clear_has_customeremail() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_OrderDataInfo::clear_customeremail() {
  if (customeremail_ != &::google::protobuf::internal::kEmptyString) {
    customeremail_->clear();
  }
  clear_has_customeremail();
}
inline const ::std::string& SJ_OrderDataInfo::customeremail() const {
  return *customeremail_;
}
inline void SJ_OrderDataInfo::set_customeremail(const ::std::string& value) {
  set_has_customeremail();
  if (customeremail_ == &::google::protobuf::internal::kEmptyString) {
    customeremail_ = new ::std::string;
  }
  customeremail_->assign(value);
}
inline void SJ_OrderDataInfo::set_customeremail(const char* value) {
  set_has_customeremail();
  if (customeremail_ == &::google::protobuf::internal::kEmptyString) {
    customeremail_ = new ::std::string;
  }
  customeremail_->assign(value);
}
inline void SJ_OrderDataInfo::set_customeremail(const char* value, size_t size) {
  set_has_customeremail();
  if (customeremail_ == &::google::protobuf::internal::kEmptyString) {
    customeremail_ = new ::std::string;
  }
  customeremail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderDataInfo::mutable_customeremail() {
  set_has_customeremail();
  if (customeremail_ == &::google::protobuf::internal::kEmptyString) {
    customeremail_ = new ::std::string;
  }
  return customeremail_;
}
inline ::std::string* SJ_OrderDataInfo::release_customeremail() {
  clear_has_customeremail();
  if (customeremail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customeremail_;
    customeremail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderDataInfo::set_allocated_customeremail(::std::string* customeremail) {
  if (customeremail_ != &::google::protobuf::internal::kEmptyString) {
    delete customeremail_;
  }
  if (customeremail) {
    set_has_customeremail();
    customeremail_ = customeremail;
  } else {
    clear_has_customeremail();
    customeremail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string InstallAddress = 26;
inline bool SJ_OrderDataInfo::has_installaddress() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_installaddress() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_OrderDataInfo::clear_has_installaddress() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_OrderDataInfo::clear_installaddress() {
  if (installaddress_ != &::google::protobuf::internal::kEmptyString) {
    installaddress_->clear();
  }
  clear_has_installaddress();
}
inline const ::std::string& SJ_OrderDataInfo::installaddress() const {
  return *installaddress_;
}
inline void SJ_OrderDataInfo::set_installaddress(const ::std::string& value) {
  set_has_installaddress();
  if (installaddress_ == &::google::protobuf::internal::kEmptyString) {
    installaddress_ = new ::std::string;
  }
  installaddress_->assign(value);
}
inline void SJ_OrderDataInfo::set_installaddress(const char* value) {
  set_has_installaddress();
  if (installaddress_ == &::google::protobuf::internal::kEmptyString) {
    installaddress_ = new ::std::string;
  }
  installaddress_->assign(value);
}
inline void SJ_OrderDataInfo::set_installaddress(const char* value, size_t size) {
  set_has_installaddress();
  if (installaddress_ == &::google::protobuf::internal::kEmptyString) {
    installaddress_ = new ::std::string;
  }
  installaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderDataInfo::mutable_installaddress() {
  set_has_installaddress();
  if (installaddress_ == &::google::protobuf::internal::kEmptyString) {
    installaddress_ = new ::std::string;
  }
  return installaddress_;
}
inline ::std::string* SJ_OrderDataInfo::release_installaddress() {
  clear_has_installaddress();
  if (installaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = installaddress_;
    installaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderDataInfo::set_allocated_installaddress(::std::string* installaddress) {
  if (installaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete installaddress_;
  }
  if (installaddress) {
    set_has_installaddress();
    installaddress_ = installaddress;
  } else {
    clear_has_installaddress();
    installaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OrderMemo = 27;
inline bool SJ_OrderDataInfo::has_ordermemo() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_ordermemo() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_OrderDataInfo::clear_has_ordermemo() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_OrderDataInfo::clear_ordermemo() {
  if (ordermemo_ != &::google::protobuf::internal::kEmptyString) {
    ordermemo_->clear();
  }
  clear_has_ordermemo();
}
inline const ::std::string& SJ_OrderDataInfo::ordermemo() const {
  return *ordermemo_;
}
inline void SJ_OrderDataInfo::set_ordermemo(const ::std::string& value) {
  set_has_ordermemo();
  if (ordermemo_ == &::google::protobuf::internal::kEmptyString) {
    ordermemo_ = new ::std::string;
  }
  ordermemo_->assign(value);
}
inline void SJ_OrderDataInfo::set_ordermemo(const char* value) {
  set_has_ordermemo();
  if (ordermemo_ == &::google::protobuf::internal::kEmptyString) {
    ordermemo_ = new ::std::string;
  }
  ordermemo_->assign(value);
}
inline void SJ_OrderDataInfo::set_ordermemo(const char* value, size_t size) {
  set_has_ordermemo();
  if (ordermemo_ == &::google::protobuf::internal::kEmptyString) {
    ordermemo_ = new ::std::string;
  }
  ordermemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderDataInfo::mutable_ordermemo() {
  set_has_ordermemo();
  if (ordermemo_ == &::google::protobuf::internal::kEmptyString) {
    ordermemo_ = new ::std::string;
  }
  return ordermemo_;
}
inline ::std::string* SJ_OrderDataInfo::release_ordermemo() {
  clear_has_ordermemo();
  if (ordermemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ordermemo_;
    ordermemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderDataInfo::set_allocated_ordermemo(::std::string* ordermemo) {
  if (ordermemo_ != &::google::protobuf::internal::kEmptyString) {
    delete ordermemo_;
  }
  if (ordermemo) {
    set_has_ordermemo();
    ordermemo_ = ordermemo;
  } else {
    clear_has_ordermemo();
    ordermemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string AttachFilePath = 28;
inline bool SJ_OrderDataInfo::has_attachfilepath() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_OrderDataInfo::set_has_attachfilepath() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_OrderDataInfo::clear_has_attachfilepath() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_OrderDataInfo::clear_attachfilepath() {
  if (attachfilepath_ != &::google::protobuf::internal::kEmptyString) {
    attachfilepath_->clear();
  }
  clear_has_attachfilepath();
}
inline const ::std::string& SJ_OrderDataInfo::attachfilepath() const {
  return *attachfilepath_;
}
inline void SJ_OrderDataInfo::set_attachfilepath(const ::std::string& value) {
  set_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    attachfilepath_ = new ::std::string;
  }
  attachfilepath_->assign(value);
}
inline void SJ_OrderDataInfo::set_attachfilepath(const char* value) {
  set_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    attachfilepath_ = new ::std::string;
  }
  attachfilepath_->assign(value);
}
inline void SJ_OrderDataInfo::set_attachfilepath(const char* value, size_t size) {
  set_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    attachfilepath_ = new ::std::string;
  }
  attachfilepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_OrderDataInfo::mutable_attachfilepath() {
  set_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    attachfilepath_ = new ::std::string;
  }
  return attachfilepath_;
}
inline ::std::string* SJ_OrderDataInfo::release_attachfilepath() {
  clear_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attachfilepath_;
    attachfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_OrderDataInfo::set_allocated_attachfilepath(::std::string* attachfilepath) {
  if (attachfilepath_ != &::google::protobuf::internal::kEmptyString) {
    delete attachfilepath_;
  }
  if (attachfilepath) {
    set_has_attachfilepath();
    attachfilepath_ = attachfilepath;
  } else {
    clear_has_attachfilepath();
    attachfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SJ_PackInfo

// required int32 DesignPackID = 1;
inline bool SJ_PackInfo::has_designpackid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_PackInfo::set_has_designpackid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_PackInfo::clear_has_designpackid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_PackInfo::clear_designpackid() {
  designpackid_ = 0;
  clear_has_designpackid();
}
inline ::google::protobuf::int32 SJ_PackInfo::designpackid() const {
  return designpackid_;
}
inline void SJ_PackInfo::set_designpackid(::google::protobuf::int32 value) {
  set_has_designpackid();
  designpackid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_PackInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_PackInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_PackInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_PackInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_PackInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_PackInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_PackInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_PackInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_PackInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_PackInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_PackInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_PackInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_PackInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_PackInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_PackInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_PackInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_PackInfo::orderid() const {
  return orderid_;
}
inline void SJ_PackInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 FittingPackID = 5;
inline bool SJ_PackInfo::has_fittingpackid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_PackInfo::set_has_fittingpackid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_PackInfo::clear_has_fittingpackid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_PackInfo::clear_fittingpackid() {
  fittingpackid_ = 0;
  clear_has_fittingpackid();
}
inline ::google::protobuf::int32 SJ_PackInfo::fittingpackid() const {
  return fittingpackid_;
}
inline void SJ_PackInfo::set_fittingpackid(::google::protobuf::int32 value) {
  set_has_fittingpackid();
  fittingpackid_ = value;
}

// required int32 FactoryID = 6;
inline bool SJ_PackInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_PackInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_PackInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_PackInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_PackInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_PackInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 7;
inline bool SJ_PackInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_PackInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_PackInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_PackInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_PackInfo::vercode() const {
  return vercode_;
}
inline void SJ_PackInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required bool IsSeparate = 8;
inline bool SJ_PackInfo::has_isseparate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_PackInfo::set_has_isseparate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_PackInfo::clear_has_isseparate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_PackInfo::clear_isseparate() {
  isseparate_ = false;
  clear_has_isseparate();
}
inline bool SJ_PackInfo::isseparate() const {
  return isseparate_;
}
inline void SJ_PackInfo::set_isseparate(bool value) {
  set_has_isseparate();
  isseparate_ = value;
}

// required int32 UseCount = 9;
inline bool SJ_PackInfo::has_usecount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_PackInfo::set_has_usecount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_PackInfo::clear_has_usecount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_PackInfo::clear_usecount() {
  usecount_ = 0;
  clear_has_usecount();
}
inline ::google::protobuf::int32 SJ_PackInfo::usecount() const {
  return usecount_;
}
inline void SJ_PackInfo::set_usecount(::google::protobuf::int32 value) {
  set_has_usecount();
  usecount_ = value;
}

// required int32 CreatorID = 10;
inline bool SJ_PackInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_PackInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_PackInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_PackInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_PackInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_PackInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 11;
inline bool SJ_PackInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_PackInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_PackInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_PackInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_PackInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_PackInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 12;
inline bool SJ_PackInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_PackInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_PackInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_PackInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_PackInfo::createtime() const {
  return createtime_;
}
inline void SJ_PackInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 13;
inline bool SJ_PackInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_PackInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_PackInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_PackInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_PackInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_PackInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_PointInfo

// required int32 DesignPlanID = 1;
inline bool SJ_PointInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_PointInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_PointInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_PointInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_PointInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_PointInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_PointInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_PointInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_PointInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_PointInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_PointInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_PointInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 3;
inline bool SJ_PointInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_PointInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_PointInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_PointInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_PointInfo::orderid() const {
  return orderid_;
}
inline void SJ_PointInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 FactoryID = 4;
inline bool SJ_PointInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_PointInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_PointInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_PointInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_PointInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_PointInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 5;
inline bool SJ_PointInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_PointInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_PointInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_PointInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_PointInfo::vercode() const {
  return vercode_;
}
inline void SJ_PointInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 TransObjID = 6;
inline bool SJ_PointInfo::has_transobjid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_PointInfo::set_has_transobjid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_PointInfo::clear_has_transobjid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_PointInfo::clear_transobjid() {
  transobjid_ = 0;
  clear_has_transobjid();
}
inline ::google::protobuf::int32 SJ_PointInfo::transobjid() const {
  return transobjid_;
}
inline void SJ_PointInfo::set_transobjid(::google::protobuf::int32 value) {
  set_has_transobjid();
  transobjid_ = value;
}

// required int32 TransObjType = 7;
inline bool SJ_PointInfo::has_transobjtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_PointInfo::set_has_transobjtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_PointInfo::clear_has_transobjtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_PointInfo::clear_transobjtype() {
  transobjtype_ = 0;
  clear_has_transobjtype();
}
inline ::google::protobuf::int32 SJ_PointInfo::transobjtype() const {
  return transobjtype_;
}
inline void SJ_PointInfo::set_transobjtype(::google::protobuf::int32 value) {
  set_has_transobjtype();
  transobjtype_ = value;
}

// required int32 PointIndex = 8;
inline bool SJ_PointInfo::has_pointindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_PointInfo::set_has_pointindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_PointInfo::clear_has_pointindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_PointInfo::clear_pointindex() {
  pointindex_ = 0;
  clear_has_pointindex();
}
inline ::google::protobuf::int32 SJ_PointInfo::pointindex() const {
  return pointindex_;
}
inline void SJ_PointInfo::set_pointindex(::google::protobuf::int32 value) {
  set_has_pointindex();
  pointindex_ = value;
}

// required double CoordX = 9;
inline bool SJ_PointInfo::has_coordx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_PointInfo::set_has_coordx() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_PointInfo::clear_has_coordx() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_PointInfo::clear_coordx() {
  coordx_ = 0;
  clear_has_coordx();
}
inline double SJ_PointInfo::coordx() const {
  return coordx_;
}
inline void SJ_PointInfo::set_coordx(double value) {
  set_has_coordx();
  coordx_ = value;
}

// required double CoordY = 10;
inline bool SJ_PointInfo::has_coordy() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_PointInfo::set_has_coordy() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_PointInfo::clear_has_coordy() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_PointInfo::clear_coordy() {
  coordy_ = 0;
  clear_has_coordy();
}
inline double SJ_PointInfo::coordy() const {
  return coordy_;
}
inline void SJ_PointInfo::set_coordy(double value) {
  set_has_coordy();
  coordy_ = value;
}

// required double CoordZ = 11;
inline bool SJ_PointInfo::has_coordz() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_PointInfo::set_has_coordz() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_PointInfo::clear_has_coordz() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_PointInfo::clear_coordz() {
  coordz_ = 0;
  clear_has_coordz();
}
inline double SJ_PointInfo::coordz() const {
  return coordz_;
}
inline void SJ_PointInfo::set_coordz(double value) {
  set_has_coordz();
  coordz_ = value;
}

// -------------------------------------------------------------------

// SJ_PrintElementInfo

// required int32 DesignPrintElementID = 1;
inline bool SJ_PrintElementInfo::has_designprintelementid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_PrintElementInfo::set_has_designprintelementid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_PrintElementInfo::clear_has_designprintelementid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_PrintElementInfo::clear_designprintelementid() {
  designprintelementid_ = 0;
  clear_has_designprintelementid();
}
inline ::google::protobuf::int32 SJ_PrintElementInfo::designprintelementid() const {
  return designprintelementid_;
}
inline void SJ_PrintElementInfo::set_designprintelementid(::google::protobuf::int32 value) {
  set_has_designprintelementid();
  designprintelementid_ = value;
}

// required int32 DesignPrintGroupID = 2;
inline bool SJ_PrintElementInfo::has_designprintgroupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_PrintElementInfo::set_has_designprintgroupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_PrintElementInfo::clear_has_designprintgroupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_PrintElementInfo::clear_designprintgroupid() {
  designprintgroupid_ = 0;
  clear_has_designprintgroupid();
}
inline ::google::protobuf::int32 SJ_PrintElementInfo::designprintgroupid() const {
  return designprintgroupid_;
}
inline void SJ_PrintElementInfo::set_designprintgroupid(::google::protobuf::int32 value) {
  set_has_designprintgroupid();
  designprintgroupid_ = value;
}

// required int32 DesignPrintID = 3;
inline bool SJ_PrintElementInfo::has_designprintid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_PrintElementInfo::set_has_designprintid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_PrintElementInfo::clear_has_designprintid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_PrintElementInfo::clear_designprintid() {
  designprintid_ = 0;
  clear_has_designprintid();
}
inline ::google::protobuf::int32 SJ_PrintElementInfo::designprintid() const {
  return designprintid_;
}
inline void SJ_PrintElementInfo::set_designprintid(::google::protobuf::int32 value) {
  set_has_designprintid();
  designprintid_ = value;
}

// required int32 OrderCate = 4;
inline bool SJ_PrintElementInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_PrintElementInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_PrintElementInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_PrintElementInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_PrintElementInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_PrintElementInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_PrintElementInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_PrintElementInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_PrintElementInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_PrintElementInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_PrintElementInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_PrintElementInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 6;
inline bool SJ_PrintElementInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_PrintElementInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_PrintElementInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_PrintElementInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_PrintElementInfo::orderid() const {
  return orderid_;
}
inline void SJ_PrintElementInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 ObjType = 7;
inline bool SJ_PrintElementInfo::has_objtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_PrintElementInfo::set_has_objtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_PrintElementInfo::clear_has_objtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_PrintElementInfo::clear_objtype() {
  objtype_ = 0;
  clear_has_objtype();
}
inline ::google::protobuf::int32 SJ_PrintElementInfo::objtype() const {
  return objtype_;
}
inline void SJ_PrintElementInfo::set_objtype(::google::protobuf::int32 value) {
  set_has_objtype();
  objtype_ = value;
}

// required int32 ObjID = 8;
inline bool SJ_PrintElementInfo::has_objid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_PrintElementInfo::set_has_objid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_PrintElementInfo::clear_has_objid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_PrintElementInfo::clear_objid() {
  objid_ = 0;
  clear_has_objid();
}
inline ::google::protobuf::int32 SJ_PrintElementInfo::objid() const {
  return objid_;
}
inline void SJ_PrintElementInfo::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
}

// required int32 PrintGroupID = 9;
inline bool SJ_PrintElementInfo::has_printgroupid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_PrintElementInfo::set_has_printgroupid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_PrintElementInfo::clear_has_printgroupid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_PrintElementInfo::clear_printgroupid() {
  printgroupid_ = 0;
  clear_has_printgroupid();
}
inline ::google::protobuf::int32 SJ_PrintElementInfo::printgroupid() const {
  return printgroupid_;
}
inline void SJ_PrintElementInfo::set_printgroupid(::google::protobuf::int32 value) {
  set_has_printgroupid();
  printgroupid_ = value;
}

// required int32 ViewType = 10;
inline bool SJ_PrintElementInfo::has_viewtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_PrintElementInfo::set_has_viewtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_PrintElementInfo::clear_has_viewtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_PrintElementInfo::clear_viewtype() {
  viewtype_ = 0;
  clear_has_viewtype();
}
inline ::google::protobuf::int32 SJ_PrintElementInfo::viewtype() const {
  return viewtype_;
}
inline void SJ_PrintElementInfo::set_viewtype(::google::protobuf::int32 value) {
  set_has_viewtype();
  viewtype_ = value;
}

// required bool IsVisible = 11;
inline bool SJ_PrintElementInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_PrintElementInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_PrintElementInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_PrintElementInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_PrintElementInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_PrintElementInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 12;
inline bool SJ_PrintElementInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_PrintElementInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_PrintElementInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_PrintElementInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_PrintElementInfo::islocked() const {
  return islocked_;
}
inline void SJ_PrintElementInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required int32 CreatorID = 13;
inline bool SJ_PrintElementInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_PrintElementInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_PrintElementInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_PrintElementInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_PrintElementInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_PrintElementInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 14;
inline bool SJ_PrintElementInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_PrintElementInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_PrintElementInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_PrintElementInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_PrintElementInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_PrintElementInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 15;
inline bool SJ_PrintElementInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_PrintElementInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_PrintElementInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_PrintElementInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_PrintElementInfo::createtime() const {
  return createtime_;
}
inline void SJ_PrintElementInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 16;
inline bool SJ_PrintElementInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_PrintElementInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_PrintElementInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_PrintElementInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_PrintElementInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_PrintElementInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_PrintGroupInfo

// required int32 DesignPrintGroupID = 1;
inline bool SJ_PrintGroupInfo::has_designprintgroupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_designprintgroupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_PrintGroupInfo::clear_has_designprintgroupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_PrintGroupInfo::clear_designprintgroupid() {
  designprintgroupid_ = 0;
  clear_has_designprintgroupid();
}
inline ::google::protobuf::int32 SJ_PrintGroupInfo::designprintgroupid() const {
  return designprintgroupid_;
}
inline void SJ_PrintGroupInfo::set_designprintgroupid(::google::protobuf::int32 value) {
  set_has_designprintgroupid();
  designprintgroupid_ = value;
}

// required int32 DesignPrintID = 2;
inline bool SJ_PrintGroupInfo::has_designprintid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_designprintid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_PrintGroupInfo::clear_has_designprintid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_PrintGroupInfo::clear_designprintid() {
  designprintid_ = 0;
  clear_has_designprintid();
}
inline ::google::protobuf::int32 SJ_PrintGroupInfo::designprintid() const {
  return designprintid_;
}
inline void SJ_PrintGroupInfo::set_designprintid(::google::protobuf::int32 value) {
  set_has_designprintid();
  designprintid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_PrintGroupInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_PrintGroupInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_PrintGroupInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_PrintGroupInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_PrintGroupInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 4;
inline bool SJ_PrintGroupInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_PrintGroupInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_PrintGroupInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_PrintGroupInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_PrintGroupInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 5;
inline bool SJ_PrintGroupInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_PrintGroupInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_PrintGroupInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_PrintGroupInfo::orderid() const {
  return orderid_;
}
inline void SJ_PrintGroupInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 PrintID = 6;
inline bool SJ_PrintGroupInfo::has_printid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_printid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_PrintGroupInfo::clear_has_printid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_PrintGroupInfo::clear_printid() {
  printid_ = 0;
  clear_has_printid();
}
inline ::google::protobuf::int32 SJ_PrintGroupInfo::printid() const {
  return printid_;
}
inline void SJ_PrintGroupInfo::set_printid(::google::protobuf::int32 value) {
  set_has_printid();
  printid_ = value;
}

// required int32 PrintGroupID = 7;
inline bool SJ_PrintGroupInfo::has_printgroupid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_printgroupid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_PrintGroupInfo::clear_has_printgroupid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_PrintGroupInfo::clear_printgroupid() {
  printgroupid_ = 0;
  clear_has_printgroupid();
}
inline ::google::protobuf::int32 SJ_PrintGroupInfo::printgroupid() const {
  return printgroupid_;
}
inline void SJ_PrintGroupInfo::set_printgroupid(::google::protobuf::int32 value) {
  set_has_printgroupid();
  printgroupid_ = value;
}

// required bool ManyViewPort = 8;
inline bool SJ_PrintGroupInfo::has_manyviewport() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_manyviewport() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_PrintGroupInfo::clear_has_manyviewport() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_PrintGroupInfo::clear_manyviewport() {
  manyviewport_ = false;
  clear_has_manyviewport();
}
inline bool SJ_PrintGroupInfo::manyviewport() const {
  return manyviewport_;
}
inline void SJ_PrintGroupInfo::set_manyviewport(bool value) {
  set_has_manyviewport();
  manyviewport_ = value;
}

// required int32 FrameStyle = 9;
inline bool SJ_PrintGroupInfo::has_framestyle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_framestyle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_PrintGroupInfo::clear_has_framestyle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_PrintGroupInfo::clear_framestyle() {
  framestyle_ = 0;
  clear_has_framestyle();
}
inline ::google::protobuf::int32 SJ_PrintGroupInfo::framestyle() const {
  return framestyle_;
}
inline void SJ_PrintGroupInfo::set_framestyle(::google::protobuf::int32 value) {
  set_has_framestyle();
  framestyle_ = value;
}

// required int32 FrameColorR = 10;
inline bool SJ_PrintGroupInfo::has_framecolorr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_framecolorr() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_PrintGroupInfo::clear_has_framecolorr() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_PrintGroupInfo::clear_framecolorr() {
  framecolorr_ = 0;
  clear_has_framecolorr();
}
inline ::google::protobuf::int32 SJ_PrintGroupInfo::framecolorr() const {
  return framecolorr_;
}
inline void SJ_PrintGroupInfo::set_framecolorr(::google::protobuf::int32 value) {
  set_has_framecolorr();
  framecolorr_ = value;
}

// required int32 FrameColorG = 11;
inline bool SJ_PrintGroupInfo::has_framecolorg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_framecolorg() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_PrintGroupInfo::clear_has_framecolorg() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_PrintGroupInfo::clear_framecolorg() {
  framecolorg_ = 0;
  clear_has_framecolorg();
}
inline ::google::protobuf::int32 SJ_PrintGroupInfo::framecolorg() const {
  return framecolorg_;
}
inline void SJ_PrintGroupInfo::set_framecolorg(::google::protobuf::int32 value) {
  set_has_framecolorg();
  framecolorg_ = value;
}

// required int32 FrameColorB = 12;
inline bool SJ_PrintGroupInfo::has_framecolorb() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_framecolorb() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_PrintGroupInfo::clear_has_framecolorb() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_PrintGroupInfo::clear_framecolorb() {
  framecolorb_ = 0;
  clear_has_framecolorb();
}
inline ::google::protobuf::int32 SJ_PrintGroupInfo::framecolorb() const {
  return framecolorb_;
}
inline void SJ_PrintGroupInfo::set_framecolorb(::google::protobuf::int32 value) {
  set_has_framecolorb();
  framecolorb_ = value;
}

// required int32 FrameColorA = 13;
inline bool SJ_PrintGroupInfo::has_framecolora() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_framecolora() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_PrintGroupInfo::clear_has_framecolora() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_PrintGroupInfo::clear_framecolora() {
  framecolora_ = 0;
  clear_has_framecolora();
}
inline ::google::protobuf::int32 SJ_PrintGroupInfo::framecolora() const {
  return framecolora_;
}
inline void SJ_PrintGroupInfo::set_framecolora(::google::protobuf::int32 value) {
  set_has_framecolora();
  framecolora_ = value;
}

// required double FrameWidth = 14;
inline bool SJ_PrintGroupInfo::has_framewidth() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_framewidth() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_PrintGroupInfo::clear_has_framewidth() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_PrintGroupInfo::clear_framewidth() {
  framewidth_ = 0;
  clear_has_framewidth();
}
inline double SJ_PrintGroupInfo::framewidth() const {
  return framewidth_;
}
inline void SJ_PrintGroupInfo::set_framewidth(double value) {
  set_has_framewidth();
  framewidth_ = value;
}

// required double LeftX = 15;
inline bool SJ_PrintGroupInfo::has_leftx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_leftx() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_PrintGroupInfo::clear_has_leftx() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_PrintGroupInfo::clear_leftx() {
  leftx_ = 0;
  clear_has_leftx();
}
inline double SJ_PrintGroupInfo::leftx() const {
  return leftx_;
}
inline void SJ_PrintGroupInfo::set_leftx(double value) {
  set_has_leftx();
  leftx_ = value;
}

// required double RightY = 16;
inline bool SJ_PrintGroupInfo::has_righty() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_righty() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_PrintGroupInfo::clear_has_righty() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_PrintGroupInfo::clear_righty() {
  righty_ = 0;
  clear_has_righty();
}
inline double SJ_PrintGroupInfo::righty() const {
  return righty_;
}
inline void SJ_PrintGroupInfo::set_righty(double value) {
  set_has_righty();
  righty_ = value;
}

// required double ScaleX = 17;
inline bool SJ_PrintGroupInfo::has_scalex() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_scalex() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_PrintGroupInfo::clear_has_scalex() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_PrintGroupInfo::clear_scalex() {
  scalex_ = 0;
  clear_has_scalex();
}
inline double SJ_PrintGroupInfo::scalex() const {
  return scalex_;
}
inline void SJ_PrintGroupInfo::set_scalex(double value) {
  set_has_scalex();
  scalex_ = value;
}

// required double ScaleY = 18;
inline bool SJ_PrintGroupInfo::has_scaley() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_scaley() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_PrintGroupInfo::clear_has_scaley() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_PrintGroupInfo::clear_scaley() {
  scaley_ = 0;
  clear_has_scaley();
}
inline double SJ_PrintGroupInfo::scaley() const {
  return scaley_;
}
inline void SJ_PrintGroupInfo::set_scaley(double value) {
  set_has_scaley();
  scaley_ = value;
}

// required double ScaleOffsetX = 19;
inline bool SJ_PrintGroupInfo::has_scaleoffsetx() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_scaleoffsetx() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_PrintGroupInfo::clear_has_scaleoffsetx() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_PrintGroupInfo::clear_scaleoffsetx() {
  scaleoffsetx_ = 0;
  clear_has_scaleoffsetx();
}
inline double SJ_PrintGroupInfo::scaleoffsetx() const {
  return scaleoffsetx_;
}
inline void SJ_PrintGroupInfo::set_scaleoffsetx(double value) {
  set_has_scaleoffsetx();
  scaleoffsetx_ = value;
}

// required double ScaleOffsetY = 20;
inline bool SJ_PrintGroupInfo::has_scaleoffsety() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_scaleoffsety() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_PrintGroupInfo::clear_has_scaleoffsety() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_PrintGroupInfo::clear_scaleoffsety() {
  scaleoffsety_ = 0;
  clear_has_scaleoffsety();
}
inline double SJ_PrintGroupInfo::scaleoffsety() const {
  return scaleoffsety_;
}
inline void SJ_PrintGroupInfo::set_scaleoffsety(double value) {
  set_has_scaleoffsety();
  scaleoffsety_ = value;
}

// required double ScaleFactor = 21;
inline bool SJ_PrintGroupInfo::has_scalefactor() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_scalefactor() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_PrintGroupInfo::clear_has_scalefactor() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_PrintGroupInfo::clear_scalefactor() {
  scalefactor_ = 0;
  clear_has_scalefactor();
}
inline double SJ_PrintGroupInfo::scalefactor() const {
  return scalefactor_;
}
inline void SJ_PrintGroupInfo::set_scalefactor(double value) {
  set_has_scalefactor();
  scalefactor_ = value;
}

// required bool IsVisible = 22;
inline bool SJ_PrintGroupInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_PrintGroupInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_PrintGroupInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_PrintGroupInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_PrintGroupInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 23;
inline bool SJ_PrintGroupInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_PrintGroupInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_PrintGroupInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_PrintGroupInfo::islocked() const {
  return islocked_;
}
inline void SJ_PrintGroupInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required int32 CreatorID = 24;
inline bool SJ_PrintGroupInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_PrintGroupInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_PrintGroupInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_PrintGroupInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_PrintGroupInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 25;
inline bool SJ_PrintGroupInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_PrintGroupInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_PrintGroupInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_PrintGroupInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_PrintGroupInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 26;
inline bool SJ_PrintGroupInfo::has_createtime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_createtime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_PrintGroupInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_PrintGroupInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_PrintGroupInfo::createtime() const {
  return createtime_;
}
inline void SJ_PrintGroupInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 27;
inline bool SJ_PrintGroupInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_PrintGroupInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_PrintGroupInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_PrintGroupInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_PrintGroupInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_PrintGroupInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_PrintInfo

// required int32 DesignPrintID = 1;
inline bool SJ_PrintInfo::has_designprintid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_PrintInfo::set_has_designprintid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_PrintInfo::clear_has_designprintid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_PrintInfo::clear_designprintid() {
  designprintid_ = 0;
  clear_has_designprintid();
}
inline ::google::protobuf::int32 SJ_PrintInfo::designprintid() const {
  return designprintid_;
}
inline void SJ_PrintInfo::set_designprintid(::google::protobuf::int32 value) {
  set_has_designprintid();
  designprintid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_PrintInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_PrintInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_PrintInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_PrintInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_PrintInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_PrintInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_PrintInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_PrintInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_PrintInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_PrintInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_PrintInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_PrintInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_PrintInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_PrintInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_PrintInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_PrintInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_PrintInfo::orderid() const {
  return orderid_;
}
inline void SJ_PrintInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 PrintID = 5;
inline bool SJ_PrintInfo::has_printid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_PrintInfo::set_has_printid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_PrintInfo::clear_has_printid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_PrintInfo::clear_printid() {
  printid_ = 0;
  clear_has_printid();
}
inline ::google::protobuf::int32 SJ_PrintInfo::printid() const {
  return printid_;
}
inline void SJ_PrintInfo::set_printid(::google::protobuf::int32 value) {
  set_has_printid();
  printid_ = value;
}

// required int32 PageBorderStyle = 6;
inline bool SJ_PrintInfo::has_pageborderstyle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_PrintInfo::set_has_pageborderstyle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_PrintInfo::clear_has_pageborderstyle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_PrintInfo::clear_pageborderstyle() {
  pageborderstyle_ = 0;
  clear_has_pageborderstyle();
}
inline ::google::protobuf::int32 SJ_PrintInfo::pageborderstyle() const {
  return pageborderstyle_;
}
inline void SJ_PrintInfo::set_pageborderstyle(::google::protobuf::int32 value) {
  set_has_pageborderstyle();
  pageborderstyle_ = value;
}

// required int64 PageBorderColor = 7;
inline bool SJ_PrintInfo::has_pagebordercolor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_PrintInfo::set_has_pagebordercolor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_PrintInfo::clear_has_pagebordercolor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_PrintInfo::clear_pagebordercolor() {
  pagebordercolor_ = GOOGLE_LONGLONG(0);
  clear_has_pagebordercolor();
}
inline ::google::protobuf::int64 SJ_PrintInfo::pagebordercolor() const {
  return pagebordercolor_;
}
inline void SJ_PrintInfo::set_pagebordercolor(::google::protobuf::int64 value) {
  set_has_pagebordercolor();
  pagebordercolor_ = value;
}

// required double PageBorderWidth = 8;
inline bool SJ_PrintInfo::has_pageborderwidth() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_PrintInfo::set_has_pageborderwidth() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_PrintInfo::clear_has_pageborderwidth() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_PrintInfo::clear_pageborderwidth() {
  pageborderwidth_ = 0;
  clear_has_pageborderwidth();
}
inline double SJ_PrintInfo::pageborderwidth() const {
  return pageborderwidth_;
}
inline void SJ_PrintInfo::set_pageborderwidth(double value) {
  set_has_pageborderwidth();
  pageborderwidth_ = value;
}

// required double ShaderPicTopX = 9;
inline bool SJ_PrintInfo::has_shaderpictopx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_PrintInfo::set_has_shaderpictopx() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_PrintInfo::clear_has_shaderpictopx() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_PrintInfo::clear_shaderpictopx() {
  shaderpictopx_ = 0;
  clear_has_shaderpictopx();
}
inline double SJ_PrintInfo::shaderpictopx() const {
  return shaderpictopx_;
}
inline void SJ_PrintInfo::set_shaderpictopx(double value) {
  set_has_shaderpictopx();
  shaderpictopx_ = value;
}

// required double ShaderPicTopY = 10;
inline bool SJ_PrintInfo::has_shaderpictopy() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_PrintInfo::set_has_shaderpictopy() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_PrintInfo::clear_has_shaderpictopy() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_PrintInfo::clear_shaderpictopy() {
  shaderpictopy_ = 0;
  clear_has_shaderpictopy();
}
inline double SJ_PrintInfo::shaderpictopy() const {
  return shaderpictopy_;
}
inline void SJ_PrintInfo::set_shaderpictopy(double value) {
  set_has_shaderpictopy();
  shaderpictopy_ = value;
}

// required double ShaderPicHeight = 11;
inline bool SJ_PrintInfo::has_shaderpicheight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_PrintInfo::set_has_shaderpicheight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_PrintInfo::clear_has_shaderpicheight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_PrintInfo::clear_shaderpicheight() {
  shaderpicheight_ = 0;
  clear_has_shaderpicheight();
}
inline double SJ_PrintInfo::shaderpicheight() const {
  return shaderpicheight_;
}
inline void SJ_PrintInfo::set_shaderpicheight(double value) {
  set_has_shaderpicheight();
  shaderpicheight_ = value;
}

// required double ShaderPicWidth = 12;
inline bool SJ_PrintInfo::has_shaderpicwidth() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_PrintInfo::set_has_shaderpicwidth() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_PrintInfo::clear_has_shaderpicwidth() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_PrintInfo::clear_shaderpicwidth() {
  shaderpicwidth_ = 0;
  clear_has_shaderpicwidth();
}
inline double SJ_PrintInfo::shaderpicwidth() const {
  return shaderpicwidth_;
}
inline void SJ_PrintInfo::set_shaderpicwidth(double value) {
  set_has_shaderpicwidth();
  shaderpicwidth_ = value;
}

// required int32 CreatorID = 13;
inline bool SJ_PrintInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_PrintInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_PrintInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_PrintInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_PrintInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_PrintInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 14;
inline bool SJ_PrintInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_PrintInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_PrintInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_PrintInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_PrintInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_PrintInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 15;
inline bool SJ_PrintInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_PrintInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_PrintInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_PrintInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_PrintInfo::createtime() const {
  return createtime_;
}
inline void SJ_PrintInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 16;
inline bool SJ_PrintInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_PrintInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_PrintInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_PrintInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_PrintInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_PrintInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string PrintName = 17;
inline bool SJ_PrintInfo::has_printname() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_PrintInfo::set_has_printname() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_PrintInfo::clear_has_printname() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_PrintInfo::clear_printname() {
  if (printname_ != &::google::protobuf::internal::kEmptyString) {
    printname_->clear();
  }
  clear_has_printname();
}
inline const ::std::string& SJ_PrintInfo::printname() const {
  return *printname_;
}
inline void SJ_PrintInfo::set_printname(const ::std::string& value) {
  set_has_printname();
  if (printname_ == &::google::protobuf::internal::kEmptyString) {
    printname_ = new ::std::string;
  }
  printname_->assign(value);
}
inline void SJ_PrintInfo::set_printname(const char* value) {
  set_has_printname();
  if (printname_ == &::google::protobuf::internal::kEmptyString) {
    printname_ = new ::std::string;
  }
  printname_->assign(value);
}
inline void SJ_PrintInfo::set_printname(const char* value, size_t size) {
  set_has_printname();
  if (printname_ == &::google::protobuf::internal::kEmptyString) {
    printname_ = new ::std::string;
  }
  printname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintInfo::mutable_printname() {
  set_has_printname();
  if (printname_ == &::google::protobuf::internal::kEmptyString) {
    printname_ = new ::std::string;
  }
  return printname_;
}
inline ::std::string* SJ_PrintInfo::release_printname() {
  clear_has_printname();
  if (printname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printname_;
    printname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintInfo::set_allocated_printname(::std::string* printname) {
  if (printname_ != &::google::protobuf::internal::kEmptyString) {
    delete printname_;
  }
  if (printname) {
    set_has_printname();
    printname_ = printname;
  } else {
    clear_has_printname();
    printname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ShaderPicPath = 18;
inline bool SJ_PrintInfo::has_shaderpicpath() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_PrintInfo::set_has_shaderpicpath() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_PrintInfo::clear_has_shaderpicpath() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_PrintInfo::clear_shaderpicpath() {
  if (shaderpicpath_ != &::google::protobuf::internal::kEmptyString) {
    shaderpicpath_->clear();
  }
  clear_has_shaderpicpath();
}
inline const ::std::string& SJ_PrintInfo::shaderpicpath() const {
  return *shaderpicpath_;
}
inline void SJ_PrintInfo::set_shaderpicpath(const ::std::string& value) {
  set_has_shaderpicpath();
  if (shaderpicpath_ == &::google::protobuf::internal::kEmptyString) {
    shaderpicpath_ = new ::std::string;
  }
  shaderpicpath_->assign(value);
}
inline void SJ_PrintInfo::set_shaderpicpath(const char* value) {
  set_has_shaderpicpath();
  if (shaderpicpath_ == &::google::protobuf::internal::kEmptyString) {
    shaderpicpath_ = new ::std::string;
  }
  shaderpicpath_->assign(value);
}
inline void SJ_PrintInfo::set_shaderpicpath(const char* value, size_t size) {
  set_has_shaderpicpath();
  if (shaderpicpath_ == &::google::protobuf::internal::kEmptyString) {
    shaderpicpath_ = new ::std::string;
  }
  shaderpicpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintInfo::mutable_shaderpicpath() {
  set_has_shaderpicpath();
  if (shaderpicpath_ == &::google::protobuf::internal::kEmptyString) {
    shaderpicpath_ = new ::std::string;
  }
  return shaderpicpath_;
}
inline ::std::string* SJ_PrintInfo::release_shaderpicpath() {
  clear_has_shaderpicpath();
  if (shaderpicpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shaderpicpath_;
    shaderpicpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintInfo::set_allocated_shaderpicpath(::std::string* shaderpicpath) {
  if (shaderpicpath_ != &::google::protobuf::internal::kEmptyString) {
    delete shaderpicpath_;
  }
  if (shaderpicpath) {
    set_has_shaderpicpath();
    shaderpicpath_ = shaderpicpath;
  } else {
    clear_has_shaderpicpath();
    shaderpicpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SJ_PrintTableInfo

// required int32 DesignPrintTableID = 1;
inline bool SJ_PrintTableInfo::has_designprinttableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_PrintTableInfo::set_has_designprinttableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_PrintTableInfo::clear_has_designprinttableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_PrintTableInfo::clear_designprinttableid() {
  designprinttableid_ = 0;
  clear_has_designprinttableid();
}
inline ::google::protobuf::int32 SJ_PrintTableInfo::designprinttableid() const {
  return designprinttableid_;
}
inline void SJ_PrintTableInfo::set_designprinttableid(::google::protobuf::int32 value) {
  set_has_designprinttableid();
  designprinttableid_ = value;
}

// required int32 DesignPrintID = 2;
inline bool SJ_PrintTableInfo::has_designprintid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_PrintTableInfo::set_has_designprintid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_PrintTableInfo::clear_has_designprintid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_PrintTableInfo::clear_designprintid() {
  designprintid_ = 0;
  clear_has_designprintid();
}
inline ::google::protobuf::int32 SJ_PrintTableInfo::designprintid() const {
  return designprintid_;
}
inline void SJ_PrintTableInfo::set_designprintid(::google::protobuf::int32 value) {
  set_has_designprintid();
  designprintid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_PrintTableInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_PrintTableInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_PrintTableInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_PrintTableInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_PrintTableInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_PrintTableInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_PrintTableInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_PrintTableInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_PrintTableInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_PrintTableInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_PrintTableInfo::orderid() const {
  return orderid_;
}
inline void SJ_PrintTableInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_PrintTableInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_PrintTableInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_PrintTableInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_PrintTableInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_PrintTableInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_PrintTableInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 TableSign = 6;
inline bool SJ_PrintTableInfo::has_tablesign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_PrintTableInfo::set_has_tablesign() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_PrintTableInfo::clear_has_tablesign() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_PrintTableInfo::clear_tablesign() {
  tablesign_ = 0;
  clear_has_tablesign();
}
inline ::google::protobuf::int32 SJ_PrintTableInfo::tablesign() const {
  return tablesign_;
}
inline void SJ_PrintTableInfo::set_tablesign(::google::protobuf::int32 value) {
  set_has_tablesign();
  tablesign_ = value;
}

// required int32 WhichLine = 7;
inline bool SJ_PrintTableInfo::has_whichline() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_PrintTableInfo::set_has_whichline() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_PrintTableInfo::clear_has_whichline() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_PrintTableInfo::clear_whichline() {
  whichline_ = 0;
  clear_has_whichline();
}
inline ::google::protobuf::int32 SJ_PrintTableInfo::whichline() const {
  return whichline_;
}
inline void SJ_PrintTableInfo::set_whichline(::google::protobuf::int32 value) {
  set_has_whichline();
  whichline_ = value;
}

// required int32 Align = 8;
inline bool SJ_PrintTableInfo::has_align() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_PrintTableInfo::set_has_align() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_PrintTableInfo::clear_has_align() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_PrintTableInfo::clear_align() {
  align_ = 0;
  clear_has_align();
}
inline ::google::protobuf::int32 SJ_PrintTableInfo::align() const {
  return align_;
}
inline void SJ_PrintTableInfo::set_align(::google::protobuf::int32 value) {
  set_has_align();
  align_ = value;
}

// required int32 LogoSign = 9;
inline bool SJ_PrintTableInfo::has_logosign() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_PrintTableInfo::set_has_logosign() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_PrintTableInfo::clear_has_logosign() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_PrintTableInfo::clear_logosign() {
  logosign_ = 0;
  clear_has_logosign();
}
inline ::google::protobuf::int32 SJ_PrintTableInfo::logosign() const {
  return logosign_;
}
inline void SJ_PrintTableInfo::set_logosign(::google::protobuf::int32 value) {
  set_has_logosign();
  logosign_ = value;
}

// required int32 TextPos = 10;
inline bool SJ_PrintTableInfo::has_textpos() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_PrintTableInfo::set_has_textpos() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_PrintTableInfo::clear_has_textpos() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_PrintTableInfo::clear_textpos() {
  textpos_ = 0;
  clear_has_textpos();
}
inline ::google::protobuf::int32 SJ_PrintTableInfo::textpos() const {
  return textpos_;
}
inline void SJ_PrintTableInfo::set_textpos(::google::protobuf::int32 value) {
  set_has_textpos();
  textpos_ = value;
}

// required bool SetLine = 11;
inline bool SJ_PrintTableInfo::has_setline() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_PrintTableInfo::set_has_setline() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_PrintTableInfo::clear_has_setline() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_PrintTableInfo::clear_setline() {
  setline_ = false;
  clear_has_setline();
}
inline bool SJ_PrintTableInfo::setline() const {
  return setline_;
}
inline void SJ_PrintTableInfo::set_setline(bool value) {
  set_has_setline();
  setline_ = value;
}

// required bool HasLogo = 12;
inline bool SJ_PrintTableInfo::has_haslogo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_PrintTableInfo::set_has_haslogo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_PrintTableInfo::clear_has_haslogo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_PrintTableInfo::clear_haslogo() {
  haslogo_ = false;
  clear_has_haslogo();
}
inline bool SJ_PrintTableInfo::haslogo() const {
  return haslogo_;
}
inline void SJ_PrintTableInfo::set_haslogo(bool value) {
  set_has_haslogo();
  haslogo_ = value;
}

// required bool IsSelected = 13;
inline bool SJ_PrintTableInfo::has_isselected() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_isselected() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_PrintTableInfo::clear_has_isselected() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_PrintTableInfo::clear_isselected() {
  isselected_ = false;
  clear_has_isselected();
}
inline bool SJ_PrintTableInfo::isselected() const {
  return isselected_;
}
inline void SJ_PrintTableInfo::set_isselected(bool value) {
  set_has_isselected();
  isselected_ = value;
}

// required bool LineUp = 14;
inline bool SJ_PrintTableInfo::has_lineup() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_lineup() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_PrintTableInfo::clear_has_lineup() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_PrintTableInfo::clear_lineup() {
  lineup_ = false;
  clear_has_lineup();
}
inline bool SJ_PrintTableInfo::lineup() const {
  return lineup_;
}
inline void SJ_PrintTableInfo::set_lineup(bool value) {
  set_has_lineup();
  lineup_ = value;
}

// required bool LineDown = 15;
inline bool SJ_PrintTableInfo::has_linedown() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_linedown() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_PrintTableInfo::clear_has_linedown() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_PrintTableInfo::clear_linedown() {
  linedown_ = false;
  clear_has_linedown();
}
inline bool SJ_PrintTableInfo::linedown() const {
  return linedown_;
}
inline void SJ_PrintTableInfo::set_linedown(bool value) {
  set_has_linedown();
  linedown_ = value;
}

// required bool LineLeft = 16;
inline bool SJ_PrintTableInfo::has_lineleft() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_lineleft() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_PrintTableInfo::clear_has_lineleft() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_PrintTableInfo::clear_lineleft() {
  lineleft_ = false;
  clear_has_lineleft();
}
inline bool SJ_PrintTableInfo::lineleft() const {
  return lineleft_;
}
inline void SJ_PrintTableInfo::set_lineleft(bool value) {
  set_has_lineleft();
  lineleft_ = value;
}

// required bool LineRight = 17;
inline bool SJ_PrintTableInfo::has_lineright() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_lineright() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_PrintTableInfo::clear_has_lineright() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_PrintTableInfo::clear_lineright() {
  lineright_ = false;
  clear_has_lineright();
}
inline bool SJ_PrintTableInfo::lineright() const {
  return lineright_;
}
inline void SJ_PrintTableInfo::set_lineright(bool value) {
  set_has_lineright();
  lineright_ = value;
}

// required int32 LineUpSign = 18;
inline bool SJ_PrintTableInfo::has_lineupsign() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_lineupsign() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_PrintTableInfo::clear_has_lineupsign() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_PrintTableInfo::clear_lineupsign() {
  lineupsign_ = 0;
  clear_has_lineupsign();
}
inline ::google::protobuf::int32 SJ_PrintTableInfo::lineupsign() const {
  return lineupsign_;
}
inline void SJ_PrintTableInfo::set_lineupsign(::google::protobuf::int32 value) {
  set_has_lineupsign();
  lineupsign_ = value;
}

// required int32 LineDownSign = 19;
inline bool SJ_PrintTableInfo::has_linedownsign() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_linedownsign() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_PrintTableInfo::clear_has_linedownsign() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_PrintTableInfo::clear_linedownsign() {
  linedownsign_ = 0;
  clear_has_linedownsign();
}
inline ::google::protobuf::int32 SJ_PrintTableInfo::linedownsign() const {
  return linedownsign_;
}
inline void SJ_PrintTableInfo::set_linedownsign(::google::protobuf::int32 value) {
  set_has_linedownsign();
  linedownsign_ = value;
}

// required int32 LineLeftSign = 20;
inline bool SJ_PrintTableInfo::has_lineleftsign() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_lineleftsign() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_PrintTableInfo::clear_has_lineleftsign() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_PrintTableInfo::clear_lineleftsign() {
  lineleftsign_ = 0;
  clear_has_lineleftsign();
}
inline ::google::protobuf::int32 SJ_PrintTableInfo::lineleftsign() const {
  return lineleftsign_;
}
inline void SJ_PrintTableInfo::set_lineleftsign(::google::protobuf::int32 value) {
  set_has_lineleftsign();
  lineleftsign_ = value;
}

// required int32 LineRightSign = 21;
inline bool SJ_PrintTableInfo::has_linerightsign() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_linerightsign() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_PrintTableInfo::clear_has_linerightsign() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_PrintTableInfo::clear_linerightsign() {
  linerightsign_ = 0;
  clear_has_linerightsign();
}
inline ::google::protobuf::int32 SJ_PrintTableInfo::linerightsign() const {
  return linerightsign_;
}
inline void SJ_PrintTableInfo::set_linerightsign(::google::protobuf::int32 value) {
  set_has_linerightsign();
  linerightsign_ = value;
}

// required double LineWidth = 22;
inline bool SJ_PrintTableInfo::has_linewidth() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_linewidth() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_PrintTableInfo::clear_has_linewidth() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_PrintTableInfo::clear_linewidth() {
  linewidth_ = 0;
  clear_has_linewidth();
}
inline double SJ_PrintTableInfo::linewidth() const {
  return linewidth_;
}
inline void SJ_PrintTableInfo::set_linewidth(double value) {
  set_has_linewidth();
  linewidth_ = value;
}

// required double LeftTopX = 23;
inline bool SJ_PrintTableInfo::has_lefttopx() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_lefttopx() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_PrintTableInfo::clear_has_lefttopx() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_PrintTableInfo::clear_lefttopx() {
  lefttopx_ = 0;
  clear_has_lefttopx();
}
inline double SJ_PrintTableInfo::lefttopx() const {
  return lefttopx_;
}
inline void SJ_PrintTableInfo::set_lefttopx(double value) {
  set_has_lefttopx();
  lefttopx_ = value;
}

// required double LeftTopY = 24;
inline bool SJ_PrintTableInfo::has_lefttopy() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_lefttopy() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_PrintTableInfo::clear_has_lefttopy() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_PrintTableInfo::clear_lefttopy() {
  lefttopy_ = 0;
  clear_has_lefttopy();
}
inline double SJ_PrintTableInfo::lefttopy() const {
  return lefttopy_;
}
inline void SJ_PrintTableInfo::set_lefttopy(double value) {
  set_has_lefttopy();
  lefttopy_ = value;
}

// required double XLen = 25;
inline bool SJ_PrintTableInfo::has_xlen() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_xlen() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_PrintTableInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_PrintTableInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_PrintTableInfo::xlen() const {
  return xlen_;
}
inline void SJ_PrintTableInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 26;
inline bool SJ_PrintTableInfo::has_ylen() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_ylen() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_PrintTableInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_PrintTableInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_PrintTableInfo::ylen() const {
  return ylen_;
}
inline void SJ_PrintTableInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double LineUpWidth = 27;
inline bool SJ_PrintTableInfo::has_lineupwidth() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_lineupwidth() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_PrintTableInfo::clear_has_lineupwidth() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_PrintTableInfo::clear_lineupwidth() {
  lineupwidth_ = 0;
  clear_has_lineupwidth();
}
inline double SJ_PrintTableInfo::lineupwidth() const {
  return lineupwidth_;
}
inline void SJ_PrintTableInfo::set_lineupwidth(double value) {
  set_has_lineupwidth();
  lineupwidth_ = value;
}

// required double LineDownWidth = 28;
inline bool SJ_PrintTableInfo::has_linedownwidth() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_linedownwidth() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_PrintTableInfo::clear_has_linedownwidth() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_PrintTableInfo::clear_linedownwidth() {
  linedownwidth_ = 0;
  clear_has_linedownwidth();
}
inline double SJ_PrintTableInfo::linedownwidth() const {
  return linedownwidth_;
}
inline void SJ_PrintTableInfo::set_linedownwidth(double value) {
  set_has_linedownwidth();
  linedownwidth_ = value;
}

// required double LineRightWidth = 29;
inline bool SJ_PrintTableInfo::has_linerightwidth() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_linerightwidth() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_PrintTableInfo::clear_has_linerightwidth() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_PrintTableInfo::clear_linerightwidth() {
  linerightwidth_ = 0;
  clear_has_linerightwidth();
}
inline double SJ_PrintTableInfo::linerightwidth() const {
  return linerightwidth_;
}
inline void SJ_PrintTableInfo::set_linerightwidth(double value) {
  set_has_linerightwidth();
  linerightwidth_ = value;
}

// required double LineLeftWidth = 30;
inline bool SJ_PrintTableInfo::has_lineleftwidth() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_lineleftwidth() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SJ_PrintTableInfo::clear_has_lineleftwidth() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SJ_PrintTableInfo::clear_lineleftwidth() {
  lineleftwidth_ = 0;
  clear_has_lineleftwidth();
}
inline double SJ_PrintTableInfo::lineleftwidth() const {
  return lineleftwidth_;
}
inline void SJ_PrintTableInfo::set_lineleftwidth(double value) {
  set_has_lineleftwidth();
  lineleftwidth_ = value;
}

// required string FaceName = 31;
inline bool SJ_PrintTableInfo::has_facename() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_facename() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SJ_PrintTableInfo::clear_has_facename() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SJ_PrintTableInfo::clear_facename() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    facename_->clear();
  }
  clear_has_facename();
}
inline const ::std::string& SJ_PrintTableInfo::facename() const {
  return *facename_;
}
inline void SJ_PrintTableInfo::set_facename(const ::std::string& value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void SJ_PrintTableInfo::set_facename(const char* value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void SJ_PrintTableInfo::set_facename(const char* value, size_t size) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintTableInfo::mutable_facename() {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  return facename_;
}
inline ::std::string* SJ_PrintTableInfo::release_facename() {
  clear_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facename_;
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintTableInfo::set_allocated_facename(::std::string* facename) {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (facename) {
    set_has_facename();
    facename_ = facename;
  } else {
    clear_has_facename();
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string LogoPath = 32;
inline bool SJ_PrintTableInfo::has_logopath() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SJ_PrintTableInfo::set_has_logopath() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SJ_PrintTableInfo::clear_has_logopath() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SJ_PrintTableInfo::clear_logopath() {
  if (logopath_ != &::google::protobuf::internal::kEmptyString) {
    logopath_->clear();
  }
  clear_has_logopath();
}
inline const ::std::string& SJ_PrintTableInfo::logopath() const {
  return *logopath_;
}
inline void SJ_PrintTableInfo::set_logopath(const ::std::string& value) {
  set_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    logopath_ = new ::std::string;
  }
  logopath_->assign(value);
}
inline void SJ_PrintTableInfo::set_logopath(const char* value) {
  set_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    logopath_ = new ::std::string;
  }
  logopath_->assign(value);
}
inline void SJ_PrintTableInfo::set_logopath(const char* value, size_t size) {
  set_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    logopath_ = new ::std::string;
  }
  logopath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintTableInfo::mutable_logopath() {
  set_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    logopath_ = new ::std::string;
  }
  return logopath_;
}
inline ::std::string* SJ_PrintTableInfo::release_logopath() {
  clear_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logopath_;
    logopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintTableInfo::set_allocated_logopath(::std::string* logopath) {
  if (logopath_ != &::google::protobuf::internal::kEmptyString) {
    delete logopath_;
  }
  if (logopath) {
    set_has_logopath();
    logopath_ = logopath;
  } else {
    clear_has_logopath();
    logopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string SerialPath = 33;
inline bool SJ_PrintTableInfo::has_serialpath() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SJ_PrintTableInfo::set_has_serialpath() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SJ_PrintTableInfo::clear_has_serialpath() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SJ_PrintTableInfo::clear_serialpath() {
  if (serialpath_ != &::google::protobuf::internal::kEmptyString) {
    serialpath_->clear();
  }
  clear_has_serialpath();
}
inline const ::std::string& SJ_PrintTableInfo::serialpath() const {
  return *serialpath_;
}
inline void SJ_PrintTableInfo::set_serialpath(const ::std::string& value) {
  set_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    serialpath_ = new ::std::string;
  }
  serialpath_->assign(value);
}
inline void SJ_PrintTableInfo::set_serialpath(const char* value) {
  set_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    serialpath_ = new ::std::string;
  }
  serialpath_->assign(value);
}
inline void SJ_PrintTableInfo::set_serialpath(const char* value, size_t size) {
  set_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    serialpath_ = new ::std::string;
  }
  serialpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintTableInfo::mutable_serialpath() {
  set_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    serialpath_ = new ::std::string;
  }
  return serialpath_;
}
inline ::std::string* SJ_PrintTableInfo::release_serialpath() {
  clear_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialpath_;
    serialpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintTableInfo::set_allocated_serialpath(::std::string* serialpath) {
  if (serialpath_ != &::google::protobuf::internal::kEmptyString) {
    delete serialpath_;
  }
  if (serialpath) {
    set_has_serialpath();
    serialpath_ = serialpath;
  } else {
    clear_has_serialpath();
    serialpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string TextValue = 34;
inline bool SJ_PrintTableInfo::has_textvalue() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SJ_PrintTableInfo::set_has_textvalue() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SJ_PrintTableInfo::clear_has_textvalue() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SJ_PrintTableInfo::clear_textvalue() {
  if (textvalue_ != &::google::protobuf::internal::kEmptyString) {
    textvalue_->clear();
  }
  clear_has_textvalue();
}
inline const ::std::string& SJ_PrintTableInfo::textvalue() const {
  return *textvalue_;
}
inline void SJ_PrintTableInfo::set_textvalue(const ::std::string& value) {
  set_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    textvalue_ = new ::std::string;
  }
  textvalue_->assign(value);
}
inline void SJ_PrintTableInfo::set_textvalue(const char* value) {
  set_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    textvalue_ = new ::std::string;
  }
  textvalue_->assign(value);
}
inline void SJ_PrintTableInfo::set_textvalue(const char* value, size_t size) {
  set_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    textvalue_ = new ::std::string;
  }
  textvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintTableInfo::mutable_textvalue() {
  set_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    textvalue_ = new ::std::string;
  }
  return textvalue_;
}
inline ::std::string* SJ_PrintTableInfo::release_textvalue() {
  clear_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = textvalue_;
    textvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintTableInfo::set_allocated_textvalue(::std::string* textvalue) {
  if (textvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete textvalue_;
  }
  if (textvalue) {
    set_has_textvalue();
    textvalue_ = textvalue;
  } else {
    clear_has_textvalue();
    textvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SJ_PrintTableRowColInfo

// required int32 DesignPrintTableRowColID = 1;
inline bool SJ_PrintTableRowColInfo::has_designprinttablerowcolid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_designprinttablerowcolid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_PrintTableRowColInfo::clear_has_designprinttablerowcolid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_PrintTableRowColInfo::clear_designprinttablerowcolid() {
  designprinttablerowcolid_ = 0;
  clear_has_designprinttablerowcolid();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::designprinttablerowcolid() const {
  return designprinttablerowcolid_;
}
inline void SJ_PrintTableRowColInfo::set_designprinttablerowcolid(::google::protobuf::int32 value) {
  set_has_designprinttablerowcolid();
  designprinttablerowcolid_ = value;
}

// required int32 DesignPrintTableRowID = 2;
inline bool SJ_PrintTableRowColInfo::has_designprinttablerowid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_designprinttablerowid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_PrintTableRowColInfo::clear_has_designprinttablerowid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_PrintTableRowColInfo::clear_designprinttablerowid() {
  designprinttablerowid_ = 0;
  clear_has_designprinttablerowid();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::designprinttablerowid() const {
  return designprinttablerowid_;
}
inline void SJ_PrintTableRowColInfo::set_designprinttablerowid(::google::protobuf::int32 value) {
  set_has_designprinttablerowid();
  designprinttablerowid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_PrintTableRowColInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_PrintTableRowColInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_PrintTableRowColInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_PrintTableRowColInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_PrintTableRowColInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_PrintTableRowColInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_PrintTableRowColInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_PrintTableRowColInfo::orderid() const {
  return orderid_;
}
inline void SJ_PrintTableRowColInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_PrintTableRowColInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_PrintTableRowColInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_PrintTableRowColInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_PrintTableRowColInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 TableSign = 6;
inline bool SJ_PrintTableRowColInfo::has_tablesign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_tablesign() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_PrintTableRowColInfo::clear_has_tablesign() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_PrintTableRowColInfo::clear_tablesign() {
  tablesign_ = 0;
  clear_has_tablesign();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::tablesign() const {
  return tablesign_;
}
inline void SJ_PrintTableRowColInfo::set_tablesign(::google::protobuf::int32 value) {
  set_has_tablesign();
  tablesign_ = value;
}

// required int32 RowNumber = 7;
inline bool SJ_PrintTableRowColInfo::has_rownumber() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_rownumber() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_PrintTableRowColInfo::clear_has_rownumber() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_PrintTableRowColInfo::clear_rownumber() {
  rownumber_ = 0;
  clear_has_rownumber();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::rownumber() const {
  return rownumber_;
}
inline void SJ_PrintTableRowColInfo::set_rownumber(::google::protobuf::int32 value) {
  set_has_rownumber();
  rownumber_ = value;
}

// required int32 ColNumber = 8;
inline bool SJ_PrintTableRowColInfo::has_colnumber() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_colnumber() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_PrintTableRowColInfo::clear_has_colnumber() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_PrintTableRowColInfo::clear_colnumber() {
  colnumber_ = 0;
  clear_has_colnumber();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::colnumber() const {
  return colnumber_;
}
inline void SJ_PrintTableRowColInfo::set_colnumber(::google::protobuf::int32 value) {
  set_has_colnumber();
  colnumber_ = value;
}

// required int32 WhichLine = 9;
inline bool SJ_PrintTableRowColInfo::has_whichline() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_whichline() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_PrintTableRowColInfo::clear_has_whichline() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_PrintTableRowColInfo::clear_whichline() {
  whichline_ = 0;
  clear_has_whichline();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::whichline() const {
  return whichline_;
}
inline void SJ_PrintTableRowColInfo::set_whichline(::google::protobuf::int32 value) {
  set_has_whichline();
  whichline_ = value;
}

// required int32 Align = 10;
inline bool SJ_PrintTableRowColInfo::has_align() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_align() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_PrintTableRowColInfo::clear_has_align() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_PrintTableRowColInfo::clear_align() {
  align_ = 0;
  clear_has_align();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::align() const {
  return align_;
}
inline void SJ_PrintTableRowColInfo::set_align(::google::protobuf::int32 value) {
  set_has_align();
  align_ = value;
}

// required int32 LogoSign = 11;
inline bool SJ_PrintTableRowColInfo::has_logosign() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_logosign() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_PrintTableRowColInfo::clear_has_logosign() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_PrintTableRowColInfo::clear_logosign() {
  logosign_ = 0;
  clear_has_logosign();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::logosign() const {
  return logosign_;
}
inline void SJ_PrintTableRowColInfo::set_logosign(::google::protobuf::int32 value) {
  set_has_logosign();
  logosign_ = value;
}

// required int32 TextPos = 12;
inline bool SJ_PrintTableRowColInfo::has_textpos() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_textpos() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_PrintTableRowColInfo::clear_has_textpos() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_PrintTableRowColInfo::clear_textpos() {
  textpos_ = 0;
  clear_has_textpos();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::textpos() const {
  return textpos_;
}
inline void SJ_PrintTableRowColInfo::set_textpos(::google::protobuf::int32 value) {
  set_has_textpos();
  textpos_ = value;
}

// required bool SetLine = 13;
inline bool SJ_PrintTableRowColInfo::has_setline() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_setline() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_setline() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_PrintTableRowColInfo::clear_setline() {
  setline_ = false;
  clear_has_setline();
}
inline bool SJ_PrintTableRowColInfo::setline() const {
  return setline_;
}
inline void SJ_PrintTableRowColInfo::set_setline(bool value) {
  set_has_setline();
  setline_ = value;
}

// required bool HasLogo = 14;
inline bool SJ_PrintTableRowColInfo::has_haslogo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_haslogo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_haslogo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_PrintTableRowColInfo::clear_haslogo() {
  haslogo_ = false;
  clear_has_haslogo();
}
inline bool SJ_PrintTableRowColInfo::haslogo() const {
  return haslogo_;
}
inline void SJ_PrintTableRowColInfo::set_haslogo(bool value) {
  set_has_haslogo();
  haslogo_ = value;
}

// required bool IsSelected = 15;
inline bool SJ_PrintTableRowColInfo::has_isselected() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_isselected() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_isselected() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_PrintTableRowColInfo::clear_isselected() {
  isselected_ = false;
  clear_has_isselected();
}
inline bool SJ_PrintTableRowColInfo::isselected() const {
  return isselected_;
}
inline void SJ_PrintTableRowColInfo::set_isselected(bool value) {
  set_has_isselected();
  isselected_ = value;
}

// required bool LineUp = 16;
inline bool SJ_PrintTableRowColInfo::has_lineup() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_lineup() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_lineup() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_PrintTableRowColInfo::clear_lineup() {
  lineup_ = false;
  clear_has_lineup();
}
inline bool SJ_PrintTableRowColInfo::lineup() const {
  return lineup_;
}
inline void SJ_PrintTableRowColInfo::set_lineup(bool value) {
  set_has_lineup();
  lineup_ = value;
}

// required bool LineDown = 17;
inline bool SJ_PrintTableRowColInfo::has_linedown() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_linedown() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_linedown() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_PrintTableRowColInfo::clear_linedown() {
  linedown_ = false;
  clear_has_linedown();
}
inline bool SJ_PrintTableRowColInfo::linedown() const {
  return linedown_;
}
inline void SJ_PrintTableRowColInfo::set_linedown(bool value) {
  set_has_linedown();
  linedown_ = value;
}

// required bool LineLeft = 18;
inline bool SJ_PrintTableRowColInfo::has_lineleft() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_lineleft() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_lineleft() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_PrintTableRowColInfo::clear_lineleft() {
  lineleft_ = false;
  clear_has_lineleft();
}
inline bool SJ_PrintTableRowColInfo::lineleft() const {
  return lineleft_;
}
inline void SJ_PrintTableRowColInfo::set_lineleft(bool value) {
  set_has_lineleft();
  lineleft_ = value;
}

// required bool LineRight = 19;
inline bool SJ_PrintTableRowColInfo::has_lineright() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_lineright() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_lineright() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_PrintTableRowColInfo::clear_lineright() {
  lineright_ = false;
  clear_has_lineright();
}
inline bool SJ_PrintTableRowColInfo::lineright() const {
  return lineright_;
}
inline void SJ_PrintTableRowColInfo::set_lineright(bool value) {
  set_has_lineright();
  lineright_ = value;
}

// required int32 LineUpSign = 20;
inline bool SJ_PrintTableRowColInfo::has_lineupsign() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_lineupsign() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_lineupsign() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_PrintTableRowColInfo::clear_lineupsign() {
  lineupsign_ = 0;
  clear_has_lineupsign();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::lineupsign() const {
  return lineupsign_;
}
inline void SJ_PrintTableRowColInfo::set_lineupsign(::google::protobuf::int32 value) {
  set_has_lineupsign();
  lineupsign_ = value;
}

// required int32 LineDownSign = 21;
inline bool SJ_PrintTableRowColInfo::has_linedownsign() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_linedownsign() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_linedownsign() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_PrintTableRowColInfo::clear_linedownsign() {
  linedownsign_ = 0;
  clear_has_linedownsign();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::linedownsign() const {
  return linedownsign_;
}
inline void SJ_PrintTableRowColInfo::set_linedownsign(::google::protobuf::int32 value) {
  set_has_linedownsign();
  linedownsign_ = value;
}

// required int32 LineLeftSign = 22;
inline bool SJ_PrintTableRowColInfo::has_lineleftsign() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_lineleftsign() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_lineleftsign() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_PrintTableRowColInfo::clear_lineleftsign() {
  lineleftsign_ = 0;
  clear_has_lineleftsign();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::lineleftsign() const {
  return lineleftsign_;
}
inline void SJ_PrintTableRowColInfo::set_lineleftsign(::google::protobuf::int32 value) {
  set_has_lineleftsign();
  lineleftsign_ = value;
}

// required int32 LineRightSign = 23;
inline bool SJ_PrintTableRowColInfo::has_linerightsign() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_linerightsign() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_linerightsign() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_PrintTableRowColInfo::clear_linerightsign() {
  linerightsign_ = 0;
  clear_has_linerightsign();
}
inline ::google::protobuf::int32 SJ_PrintTableRowColInfo::linerightsign() const {
  return linerightsign_;
}
inline void SJ_PrintTableRowColInfo::set_linerightsign(::google::protobuf::int32 value) {
  set_has_linerightsign();
  linerightsign_ = value;
}

// required double LineWidth = 24;
inline bool SJ_PrintTableRowColInfo::has_linewidth() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_linewidth() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_linewidth() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_PrintTableRowColInfo::clear_linewidth() {
  linewidth_ = 0;
  clear_has_linewidth();
}
inline double SJ_PrintTableRowColInfo::linewidth() const {
  return linewidth_;
}
inline void SJ_PrintTableRowColInfo::set_linewidth(double value) {
  set_has_linewidth();
  linewidth_ = value;
}

// required double LeftTopX = 25;
inline bool SJ_PrintTableRowColInfo::has_lefttopx() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_lefttopx() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_lefttopx() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_PrintTableRowColInfo::clear_lefttopx() {
  lefttopx_ = 0;
  clear_has_lefttopx();
}
inline double SJ_PrintTableRowColInfo::lefttopx() const {
  return lefttopx_;
}
inline void SJ_PrintTableRowColInfo::set_lefttopx(double value) {
  set_has_lefttopx();
  lefttopx_ = value;
}

// required double LeftTopY = 26;
inline bool SJ_PrintTableRowColInfo::has_lefttopy() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_lefttopy() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_lefttopy() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_PrintTableRowColInfo::clear_lefttopy() {
  lefttopy_ = 0;
  clear_has_lefttopy();
}
inline double SJ_PrintTableRowColInfo::lefttopy() const {
  return lefttopy_;
}
inline void SJ_PrintTableRowColInfo::set_lefttopy(double value) {
  set_has_lefttopy();
  lefttopy_ = value;
}

// required double XLen = 27;
inline bool SJ_PrintTableRowColInfo::has_xlen() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_xlen() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_PrintTableRowColInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_PrintTableRowColInfo::xlen() const {
  return xlen_;
}
inline void SJ_PrintTableRowColInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 28;
inline bool SJ_PrintTableRowColInfo::has_ylen() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_ylen() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_PrintTableRowColInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_PrintTableRowColInfo::ylen() const {
  return ylen_;
}
inline void SJ_PrintTableRowColInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double LineUpWidth = 29;
inline bool SJ_PrintTableRowColInfo::has_lineupwidth() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_lineupwidth() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_lineupwidth() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_PrintTableRowColInfo::clear_lineupwidth() {
  lineupwidth_ = 0;
  clear_has_lineupwidth();
}
inline double SJ_PrintTableRowColInfo::lineupwidth() const {
  return lineupwidth_;
}
inline void SJ_PrintTableRowColInfo::set_lineupwidth(double value) {
  set_has_lineupwidth();
  lineupwidth_ = value;
}

// required double LineDownWidth = 30;
inline bool SJ_PrintTableRowColInfo::has_linedownwidth() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_linedownwidth() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_linedownwidth() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SJ_PrintTableRowColInfo::clear_linedownwidth() {
  linedownwidth_ = 0;
  clear_has_linedownwidth();
}
inline double SJ_PrintTableRowColInfo::linedownwidth() const {
  return linedownwidth_;
}
inline void SJ_PrintTableRowColInfo::set_linedownwidth(double value) {
  set_has_linedownwidth();
  linedownwidth_ = value;
}

// required double LineRightWidth = 31;
inline bool SJ_PrintTableRowColInfo::has_linerightwidth() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_linerightwidth() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_linerightwidth() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SJ_PrintTableRowColInfo::clear_linerightwidth() {
  linerightwidth_ = 0;
  clear_has_linerightwidth();
}
inline double SJ_PrintTableRowColInfo::linerightwidth() const {
  return linerightwidth_;
}
inline void SJ_PrintTableRowColInfo::set_linerightwidth(double value) {
  set_has_linerightwidth();
  linerightwidth_ = value;
}

// required double LineLeftWidth = 32;
inline bool SJ_PrintTableRowColInfo::has_lineleftwidth() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_lineleftwidth() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SJ_PrintTableRowColInfo::clear_has_lineleftwidth() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SJ_PrintTableRowColInfo::clear_lineleftwidth() {
  lineleftwidth_ = 0;
  clear_has_lineleftwidth();
}
inline double SJ_PrintTableRowColInfo::lineleftwidth() const {
  return lineleftwidth_;
}
inline void SJ_PrintTableRowColInfo::set_lineleftwidth(double value) {
  set_has_lineleftwidth();
  lineleftwidth_ = value;
}

// required string FaceName = 33;
inline bool SJ_PrintTableRowColInfo::has_facename() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_facename() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SJ_PrintTableRowColInfo::clear_has_facename() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SJ_PrintTableRowColInfo::clear_facename() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    facename_->clear();
  }
  clear_has_facename();
}
inline const ::std::string& SJ_PrintTableRowColInfo::facename() const {
  return *facename_;
}
inline void SJ_PrintTableRowColInfo::set_facename(const ::std::string& value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void SJ_PrintTableRowColInfo::set_facename(const char* value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void SJ_PrintTableRowColInfo::set_facename(const char* value, size_t size) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintTableRowColInfo::mutable_facename() {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  return facename_;
}
inline ::std::string* SJ_PrintTableRowColInfo::release_facename() {
  clear_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facename_;
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintTableRowColInfo::set_allocated_facename(::std::string* facename) {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (facename) {
    set_has_facename();
    facename_ = facename;
  } else {
    clear_has_facename();
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string LogoPath = 34;
inline bool SJ_PrintTableRowColInfo::has_logopath() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_logopath() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SJ_PrintTableRowColInfo::clear_has_logopath() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SJ_PrintTableRowColInfo::clear_logopath() {
  if (logopath_ != &::google::protobuf::internal::kEmptyString) {
    logopath_->clear();
  }
  clear_has_logopath();
}
inline const ::std::string& SJ_PrintTableRowColInfo::logopath() const {
  return *logopath_;
}
inline void SJ_PrintTableRowColInfo::set_logopath(const ::std::string& value) {
  set_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    logopath_ = new ::std::string;
  }
  logopath_->assign(value);
}
inline void SJ_PrintTableRowColInfo::set_logopath(const char* value) {
  set_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    logopath_ = new ::std::string;
  }
  logopath_->assign(value);
}
inline void SJ_PrintTableRowColInfo::set_logopath(const char* value, size_t size) {
  set_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    logopath_ = new ::std::string;
  }
  logopath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintTableRowColInfo::mutable_logopath() {
  set_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    logopath_ = new ::std::string;
  }
  return logopath_;
}
inline ::std::string* SJ_PrintTableRowColInfo::release_logopath() {
  clear_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logopath_;
    logopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintTableRowColInfo::set_allocated_logopath(::std::string* logopath) {
  if (logopath_ != &::google::protobuf::internal::kEmptyString) {
    delete logopath_;
  }
  if (logopath) {
    set_has_logopath();
    logopath_ = logopath;
  } else {
    clear_has_logopath();
    logopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string SerialPath = 35;
inline bool SJ_PrintTableRowColInfo::has_serialpath() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_serialpath() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SJ_PrintTableRowColInfo::clear_has_serialpath() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SJ_PrintTableRowColInfo::clear_serialpath() {
  if (serialpath_ != &::google::protobuf::internal::kEmptyString) {
    serialpath_->clear();
  }
  clear_has_serialpath();
}
inline const ::std::string& SJ_PrintTableRowColInfo::serialpath() const {
  return *serialpath_;
}
inline void SJ_PrintTableRowColInfo::set_serialpath(const ::std::string& value) {
  set_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    serialpath_ = new ::std::string;
  }
  serialpath_->assign(value);
}
inline void SJ_PrintTableRowColInfo::set_serialpath(const char* value) {
  set_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    serialpath_ = new ::std::string;
  }
  serialpath_->assign(value);
}
inline void SJ_PrintTableRowColInfo::set_serialpath(const char* value, size_t size) {
  set_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    serialpath_ = new ::std::string;
  }
  serialpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintTableRowColInfo::mutable_serialpath() {
  set_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    serialpath_ = new ::std::string;
  }
  return serialpath_;
}
inline ::std::string* SJ_PrintTableRowColInfo::release_serialpath() {
  clear_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialpath_;
    serialpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintTableRowColInfo::set_allocated_serialpath(::std::string* serialpath) {
  if (serialpath_ != &::google::protobuf::internal::kEmptyString) {
    delete serialpath_;
  }
  if (serialpath) {
    set_has_serialpath();
    serialpath_ = serialpath;
  } else {
    clear_has_serialpath();
    serialpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string TextValue = 36;
inline bool SJ_PrintTableRowColInfo::has_textvalue() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SJ_PrintTableRowColInfo::set_has_textvalue() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SJ_PrintTableRowColInfo::clear_has_textvalue() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SJ_PrintTableRowColInfo::clear_textvalue() {
  if (textvalue_ != &::google::protobuf::internal::kEmptyString) {
    textvalue_->clear();
  }
  clear_has_textvalue();
}
inline const ::std::string& SJ_PrintTableRowColInfo::textvalue() const {
  return *textvalue_;
}
inline void SJ_PrintTableRowColInfo::set_textvalue(const ::std::string& value) {
  set_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    textvalue_ = new ::std::string;
  }
  textvalue_->assign(value);
}
inline void SJ_PrintTableRowColInfo::set_textvalue(const char* value) {
  set_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    textvalue_ = new ::std::string;
  }
  textvalue_->assign(value);
}
inline void SJ_PrintTableRowColInfo::set_textvalue(const char* value, size_t size) {
  set_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    textvalue_ = new ::std::string;
  }
  textvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintTableRowColInfo::mutable_textvalue() {
  set_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    textvalue_ = new ::std::string;
  }
  return textvalue_;
}
inline ::std::string* SJ_PrintTableRowColInfo::release_textvalue() {
  clear_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = textvalue_;
    textvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintTableRowColInfo::set_allocated_textvalue(::std::string* textvalue) {
  if (textvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete textvalue_;
  }
  if (textvalue) {
    set_has_textvalue();
    textvalue_ = textvalue;
  } else {
    clear_has_textvalue();
    textvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SJ_PrintTableRowInfo

// required int32 DesignPrintTableRowID = 1;
inline bool SJ_PrintTableRowInfo::has_designprinttablerowid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_designprinttablerowid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_PrintTableRowInfo::clear_has_designprinttablerowid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_PrintTableRowInfo::clear_designprinttablerowid() {
  designprinttablerowid_ = 0;
  clear_has_designprinttablerowid();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::designprinttablerowid() const {
  return designprinttablerowid_;
}
inline void SJ_PrintTableRowInfo::set_designprinttablerowid(::google::protobuf::int32 value) {
  set_has_designprinttablerowid();
  designprinttablerowid_ = value;
}

// required int32 DesignPrintTableID = 2;
inline bool SJ_PrintTableRowInfo::has_designprinttableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_designprinttableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_PrintTableRowInfo::clear_has_designprinttableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_PrintTableRowInfo::clear_designprinttableid() {
  designprinttableid_ = 0;
  clear_has_designprinttableid();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::designprinttableid() const {
  return designprinttableid_;
}
inline void SJ_PrintTableRowInfo::set_designprinttableid(::google::protobuf::int32 value) {
  set_has_designprinttableid();
  designprinttableid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_PrintTableRowInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_PrintTableRowInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_PrintTableRowInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_PrintTableRowInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_PrintTableRowInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_PrintTableRowInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_PrintTableRowInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_PrintTableRowInfo::orderid() const {
  return orderid_;
}
inline void SJ_PrintTableRowInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_PrintTableRowInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_PrintTableRowInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_PrintTableRowInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_PrintTableRowInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 TableSign = 6;
inline bool SJ_PrintTableRowInfo::has_tablesign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_tablesign() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_PrintTableRowInfo::clear_has_tablesign() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_PrintTableRowInfo::clear_tablesign() {
  tablesign_ = 0;
  clear_has_tablesign();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::tablesign() const {
  return tablesign_;
}
inline void SJ_PrintTableRowInfo::set_tablesign(::google::protobuf::int32 value) {
  set_has_tablesign();
  tablesign_ = value;
}

// required int32 RowNumber = 7;
inline bool SJ_PrintTableRowInfo::has_rownumber() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_rownumber() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_PrintTableRowInfo::clear_has_rownumber() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_PrintTableRowInfo::clear_rownumber() {
  rownumber_ = 0;
  clear_has_rownumber();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::rownumber() const {
  return rownumber_;
}
inline void SJ_PrintTableRowInfo::set_rownumber(::google::protobuf::int32 value) {
  set_has_rownumber();
  rownumber_ = value;
}

// required int32 WhichLine = 8;
inline bool SJ_PrintTableRowInfo::has_whichline() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_whichline() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_PrintTableRowInfo::clear_has_whichline() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_PrintTableRowInfo::clear_whichline() {
  whichline_ = 0;
  clear_has_whichline();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::whichline() const {
  return whichline_;
}
inline void SJ_PrintTableRowInfo::set_whichline(::google::protobuf::int32 value) {
  set_has_whichline();
  whichline_ = value;
}

// required int32 Align = 9;
inline bool SJ_PrintTableRowInfo::has_align() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_align() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_PrintTableRowInfo::clear_has_align() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_PrintTableRowInfo::clear_align() {
  align_ = 0;
  clear_has_align();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::align() const {
  return align_;
}
inline void SJ_PrintTableRowInfo::set_align(::google::protobuf::int32 value) {
  set_has_align();
  align_ = value;
}

// required int32 LogoSign = 10;
inline bool SJ_PrintTableRowInfo::has_logosign() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_logosign() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_PrintTableRowInfo::clear_has_logosign() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_PrintTableRowInfo::clear_logosign() {
  logosign_ = 0;
  clear_has_logosign();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::logosign() const {
  return logosign_;
}
inline void SJ_PrintTableRowInfo::set_logosign(::google::protobuf::int32 value) {
  set_has_logosign();
  logosign_ = value;
}

// required int32 TextPos = 11;
inline bool SJ_PrintTableRowInfo::has_textpos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_textpos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_PrintTableRowInfo::clear_has_textpos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_PrintTableRowInfo::clear_textpos() {
  textpos_ = 0;
  clear_has_textpos();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::textpos() const {
  return textpos_;
}
inline void SJ_PrintTableRowInfo::set_textpos(::google::protobuf::int32 value) {
  set_has_textpos();
  textpos_ = value;
}

// required bool SetLine = 12;
inline bool SJ_PrintTableRowInfo::has_setline() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_setline() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_PrintTableRowInfo::clear_has_setline() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_PrintTableRowInfo::clear_setline() {
  setline_ = false;
  clear_has_setline();
}
inline bool SJ_PrintTableRowInfo::setline() const {
  return setline_;
}
inline void SJ_PrintTableRowInfo::set_setline(bool value) {
  set_has_setline();
  setline_ = value;
}

// required bool HasLogo = 13;
inline bool SJ_PrintTableRowInfo::has_haslogo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_haslogo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_PrintTableRowInfo::clear_has_haslogo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_PrintTableRowInfo::clear_haslogo() {
  haslogo_ = false;
  clear_has_haslogo();
}
inline bool SJ_PrintTableRowInfo::haslogo() const {
  return haslogo_;
}
inline void SJ_PrintTableRowInfo::set_haslogo(bool value) {
  set_has_haslogo();
  haslogo_ = value;
}

// required bool IsSelected = 14;
inline bool SJ_PrintTableRowInfo::has_isselected() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_isselected() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_PrintTableRowInfo::clear_has_isselected() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_PrintTableRowInfo::clear_isselected() {
  isselected_ = false;
  clear_has_isselected();
}
inline bool SJ_PrintTableRowInfo::isselected() const {
  return isselected_;
}
inline void SJ_PrintTableRowInfo::set_isselected(bool value) {
  set_has_isselected();
  isselected_ = value;
}

// required bool LineUp = 15;
inline bool SJ_PrintTableRowInfo::has_lineup() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_lineup() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_PrintTableRowInfo::clear_has_lineup() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_PrintTableRowInfo::clear_lineup() {
  lineup_ = false;
  clear_has_lineup();
}
inline bool SJ_PrintTableRowInfo::lineup() const {
  return lineup_;
}
inline void SJ_PrintTableRowInfo::set_lineup(bool value) {
  set_has_lineup();
  lineup_ = value;
}

// required bool LineDown = 16;
inline bool SJ_PrintTableRowInfo::has_linedown() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_linedown() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_PrintTableRowInfo::clear_has_linedown() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_PrintTableRowInfo::clear_linedown() {
  linedown_ = false;
  clear_has_linedown();
}
inline bool SJ_PrintTableRowInfo::linedown() const {
  return linedown_;
}
inline void SJ_PrintTableRowInfo::set_linedown(bool value) {
  set_has_linedown();
  linedown_ = value;
}

// required bool LineLeft = 17;
inline bool SJ_PrintTableRowInfo::has_lineleft() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_lineleft() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_PrintTableRowInfo::clear_has_lineleft() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_PrintTableRowInfo::clear_lineleft() {
  lineleft_ = false;
  clear_has_lineleft();
}
inline bool SJ_PrintTableRowInfo::lineleft() const {
  return lineleft_;
}
inline void SJ_PrintTableRowInfo::set_lineleft(bool value) {
  set_has_lineleft();
  lineleft_ = value;
}

// required bool LineRight = 18;
inline bool SJ_PrintTableRowInfo::has_lineright() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_lineright() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_PrintTableRowInfo::clear_has_lineright() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_PrintTableRowInfo::clear_lineright() {
  lineright_ = false;
  clear_has_lineright();
}
inline bool SJ_PrintTableRowInfo::lineright() const {
  return lineright_;
}
inline void SJ_PrintTableRowInfo::set_lineright(bool value) {
  set_has_lineright();
  lineright_ = value;
}

// required int32 LineUpSign = 19;
inline bool SJ_PrintTableRowInfo::has_lineupsign() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_lineupsign() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_PrintTableRowInfo::clear_has_lineupsign() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_PrintTableRowInfo::clear_lineupsign() {
  lineupsign_ = 0;
  clear_has_lineupsign();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::lineupsign() const {
  return lineupsign_;
}
inline void SJ_PrintTableRowInfo::set_lineupsign(::google::protobuf::int32 value) {
  set_has_lineupsign();
  lineupsign_ = value;
}

// required int32 LineDownSign = 20;
inline bool SJ_PrintTableRowInfo::has_linedownsign() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_linedownsign() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_PrintTableRowInfo::clear_has_linedownsign() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_PrintTableRowInfo::clear_linedownsign() {
  linedownsign_ = 0;
  clear_has_linedownsign();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::linedownsign() const {
  return linedownsign_;
}
inline void SJ_PrintTableRowInfo::set_linedownsign(::google::protobuf::int32 value) {
  set_has_linedownsign();
  linedownsign_ = value;
}

// required int32 LineLeftSign = 21;
inline bool SJ_PrintTableRowInfo::has_lineleftsign() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_lineleftsign() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_PrintTableRowInfo::clear_has_lineleftsign() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_PrintTableRowInfo::clear_lineleftsign() {
  lineleftsign_ = 0;
  clear_has_lineleftsign();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::lineleftsign() const {
  return lineleftsign_;
}
inline void SJ_PrintTableRowInfo::set_lineleftsign(::google::protobuf::int32 value) {
  set_has_lineleftsign();
  lineleftsign_ = value;
}

// required int32 LineRightSign = 22;
inline bool SJ_PrintTableRowInfo::has_linerightsign() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_linerightsign() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_PrintTableRowInfo::clear_has_linerightsign() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_PrintTableRowInfo::clear_linerightsign() {
  linerightsign_ = 0;
  clear_has_linerightsign();
}
inline ::google::protobuf::int32 SJ_PrintTableRowInfo::linerightsign() const {
  return linerightsign_;
}
inline void SJ_PrintTableRowInfo::set_linerightsign(::google::protobuf::int32 value) {
  set_has_linerightsign();
  linerightsign_ = value;
}

// required double LineWidth = 23;
inline bool SJ_PrintTableRowInfo::has_linewidth() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_linewidth() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_PrintTableRowInfo::clear_has_linewidth() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_PrintTableRowInfo::clear_linewidth() {
  linewidth_ = 0;
  clear_has_linewidth();
}
inline double SJ_PrintTableRowInfo::linewidth() const {
  return linewidth_;
}
inline void SJ_PrintTableRowInfo::set_linewidth(double value) {
  set_has_linewidth();
  linewidth_ = value;
}

// required double LeftTopX = 24;
inline bool SJ_PrintTableRowInfo::has_lefttopx() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_lefttopx() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_PrintTableRowInfo::clear_has_lefttopx() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_PrintTableRowInfo::clear_lefttopx() {
  lefttopx_ = 0;
  clear_has_lefttopx();
}
inline double SJ_PrintTableRowInfo::lefttopx() const {
  return lefttopx_;
}
inline void SJ_PrintTableRowInfo::set_lefttopx(double value) {
  set_has_lefttopx();
  lefttopx_ = value;
}

// required double LeftTopY = 25;
inline bool SJ_PrintTableRowInfo::has_lefttopy() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_lefttopy() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_PrintTableRowInfo::clear_has_lefttopy() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_PrintTableRowInfo::clear_lefttopy() {
  lefttopy_ = 0;
  clear_has_lefttopy();
}
inline double SJ_PrintTableRowInfo::lefttopy() const {
  return lefttopy_;
}
inline void SJ_PrintTableRowInfo::set_lefttopy(double value) {
  set_has_lefttopy();
  lefttopy_ = value;
}

// required double XLen = 26;
inline bool SJ_PrintTableRowInfo::has_xlen() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_xlen() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_PrintTableRowInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_PrintTableRowInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_PrintTableRowInfo::xlen() const {
  return xlen_;
}
inline void SJ_PrintTableRowInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 27;
inline bool SJ_PrintTableRowInfo::has_ylen() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_ylen() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_PrintTableRowInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_PrintTableRowInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_PrintTableRowInfo::ylen() const {
  return ylen_;
}
inline void SJ_PrintTableRowInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double LineUpWidth = 28;
inline bool SJ_PrintTableRowInfo::has_lineupwidth() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_lineupwidth() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_PrintTableRowInfo::clear_has_lineupwidth() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_PrintTableRowInfo::clear_lineupwidth() {
  lineupwidth_ = 0;
  clear_has_lineupwidth();
}
inline double SJ_PrintTableRowInfo::lineupwidth() const {
  return lineupwidth_;
}
inline void SJ_PrintTableRowInfo::set_lineupwidth(double value) {
  set_has_lineupwidth();
  lineupwidth_ = value;
}

// required double LineDownWidth = 29;
inline bool SJ_PrintTableRowInfo::has_linedownwidth() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_linedownwidth() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_PrintTableRowInfo::clear_has_linedownwidth() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_PrintTableRowInfo::clear_linedownwidth() {
  linedownwidth_ = 0;
  clear_has_linedownwidth();
}
inline double SJ_PrintTableRowInfo::linedownwidth() const {
  return linedownwidth_;
}
inline void SJ_PrintTableRowInfo::set_linedownwidth(double value) {
  set_has_linedownwidth();
  linedownwidth_ = value;
}

// required double LineRightWidth = 30;
inline bool SJ_PrintTableRowInfo::has_linerightwidth() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_linerightwidth() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SJ_PrintTableRowInfo::clear_has_linerightwidth() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SJ_PrintTableRowInfo::clear_linerightwidth() {
  linerightwidth_ = 0;
  clear_has_linerightwidth();
}
inline double SJ_PrintTableRowInfo::linerightwidth() const {
  return linerightwidth_;
}
inline void SJ_PrintTableRowInfo::set_linerightwidth(double value) {
  set_has_linerightwidth();
  linerightwidth_ = value;
}

// required double LineLeftWidth = 31;
inline bool SJ_PrintTableRowInfo::has_lineleftwidth() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_lineleftwidth() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SJ_PrintTableRowInfo::clear_has_lineleftwidth() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SJ_PrintTableRowInfo::clear_lineleftwidth() {
  lineleftwidth_ = 0;
  clear_has_lineleftwidth();
}
inline double SJ_PrintTableRowInfo::lineleftwidth() const {
  return lineleftwidth_;
}
inline void SJ_PrintTableRowInfo::set_lineleftwidth(double value) {
  set_has_lineleftwidth();
  lineleftwidth_ = value;
}

// required string FaceName = 32;
inline bool SJ_PrintTableRowInfo::has_facename() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_facename() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SJ_PrintTableRowInfo::clear_has_facename() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SJ_PrintTableRowInfo::clear_facename() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    facename_->clear();
  }
  clear_has_facename();
}
inline const ::std::string& SJ_PrintTableRowInfo::facename() const {
  return *facename_;
}
inline void SJ_PrintTableRowInfo::set_facename(const ::std::string& value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void SJ_PrintTableRowInfo::set_facename(const char* value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void SJ_PrintTableRowInfo::set_facename(const char* value, size_t size) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintTableRowInfo::mutable_facename() {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  return facename_;
}
inline ::std::string* SJ_PrintTableRowInfo::release_facename() {
  clear_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facename_;
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintTableRowInfo::set_allocated_facename(::std::string* facename) {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (facename) {
    set_has_facename();
    facename_ = facename;
  } else {
    clear_has_facename();
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string LogoPath = 33;
inline bool SJ_PrintTableRowInfo::has_logopath() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_logopath() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SJ_PrintTableRowInfo::clear_has_logopath() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SJ_PrintTableRowInfo::clear_logopath() {
  if (logopath_ != &::google::protobuf::internal::kEmptyString) {
    logopath_->clear();
  }
  clear_has_logopath();
}
inline const ::std::string& SJ_PrintTableRowInfo::logopath() const {
  return *logopath_;
}
inline void SJ_PrintTableRowInfo::set_logopath(const ::std::string& value) {
  set_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    logopath_ = new ::std::string;
  }
  logopath_->assign(value);
}
inline void SJ_PrintTableRowInfo::set_logopath(const char* value) {
  set_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    logopath_ = new ::std::string;
  }
  logopath_->assign(value);
}
inline void SJ_PrintTableRowInfo::set_logopath(const char* value, size_t size) {
  set_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    logopath_ = new ::std::string;
  }
  logopath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintTableRowInfo::mutable_logopath() {
  set_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    logopath_ = new ::std::string;
  }
  return logopath_;
}
inline ::std::string* SJ_PrintTableRowInfo::release_logopath() {
  clear_has_logopath();
  if (logopath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logopath_;
    logopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintTableRowInfo::set_allocated_logopath(::std::string* logopath) {
  if (logopath_ != &::google::protobuf::internal::kEmptyString) {
    delete logopath_;
  }
  if (logopath) {
    set_has_logopath();
    logopath_ = logopath;
  } else {
    clear_has_logopath();
    logopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string SerialPath = 34;
inline bool SJ_PrintTableRowInfo::has_serialpath() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_serialpath() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SJ_PrintTableRowInfo::clear_has_serialpath() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SJ_PrintTableRowInfo::clear_serialpath() {
  if (serialpath_ != &::google::protobuf::internal::kEmptyString) {
    serialpath_->clear();
  }
  clear_has_serialpath();
}
inline const ::std::string& SJ_PrintTableRowInfo::serialpath() const {
  return *serialpath_;
}
inline void SJ_PrintTableRowInfo::set_serialpath(const ::std::string& value) {
  set_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    serialpath_ = new ::std::string;
  }
  serialpath_->assign(value);
}
inline void SJ_PrintTableRowInfo::set_serialpath(const char* value) {
  set_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    serialpath_ = new ::std::string;
  }
  serialpath_->assign(value);
}
inline void SJ_PrintTableRowInfo::set_serialpath(const char* value, size_t size) {
  set_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    serialpath_ = new ::std::string;
  }
  serialpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintTableRowInfo::mutable_serialpath() {
  set_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    serialpath_ = new ::std::string;
  }
  return serialpath_;
}
inline ::std::string* SJ_PrintTableRowInfo::release_serialpath() {
  clear_has_serialpath();
  if (serialpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialpath_;
    serialpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintTableRowInfo::set_allocated_serialpath(::std::string* serialpath) {
  if (serialpath_ != &::google::protobuf::internal::kEmptyString) {
    delete serialpath_;
  }
  if (serialpath) {
    set_has_serialpath();
    serialpath_ = serialpath;
  } else {
    clear_has_serialpath();
    serialpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string TextValue = 35;
inline bool SJ_PrintTableRowInfo::has_textvalue() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SJ_PrintTableRowInfo::set_has_textvalue() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SJ_PrintTableRowInfo::clear_has_textvalue() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SJ_PrintTableRowInfo::clear_textvalue() {
  if (textvalue_ != &::google::protobuf::internal::kEmptyString) {
    textvalue_->clear();
  }
  clear_has_textvalue();
}
inline const ::std::string& SJ_PrintTableRowInfo::textvalue() const {
  return *textvalue_;
}
inline void SJ_PrintTableRowInfo::set_textvalue(const ::std::string& value) {
  set_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    textvalue_ = new ::std::string;
  }
  textvalue_->assign(value);
}
inline void SJ_PrintTableRowInfo::set_textvalue(const char* value) {
  set_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    textvalue_ = new ::std::string;
  }
  textvalue_->assign(value);
}
inline void SJ_PrintTableRowInfo::set_textvalue(const char* value, size_t size) {
  set_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    textvalue_ = new ::std::string;
  }
  textvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_PrintTableRowInfo::mutable_textvalue() {
  set_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    textvalue_ = new ::std::string;
  }
  return textvalue_;
}
inline ::std::string* SJ_PrintTableRowInfo::release_textvalue() {
  clear_has_textvalue();
  if (textvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = textvalue_;
    textvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_PrintTableRowInfo::set_allocated_textvalue(::std::string* textvalue) {
  if (textvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete textvalue_;
  }
  if (textvalue) {
    set_has_textvalue();
    textvalue_ = textvalue;
  } else {
    clear_has_textvalue();
    textvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SJ_ProductInfo

// required int32 DesignProductID = 1;
inline bool SJ_ProductInfo::has_designproductid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_ProductInfo::set_has_designproductid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_ProductInfo::clear_has_designproductid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_ProductInfo::clear_designproductid() {
  designproductid_ = 0;
  clear_has_designproductid();
}
inline ::google::protobuf::int32 SJ_ProductInfo::designproductid() const {
  return designproductid_;
}
inline void SJ_ProductInfo::set_designproductid(::google::protobuf::int32 value) {
  set_has_designproductid();
  designproductid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_ProductInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_ProductInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_ProductInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_ProductInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_ProductInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_ProductInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_ProductInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_ProductInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_ProductInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_ProductInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_ProductInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_ProductInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_ProductInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_ProductInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_ProductInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_ProductInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_ProductInfo::orderid() const {
  return orderid_;
}
inline void SJ_ProductInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 ProductID = 5;
inline bool SJ_ProductInfo::has_productid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_ProductInfo::set_has_productid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_ProductInfo::clear_has_productid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_ProductInfo::clear_productid() {
  productid_ = 0;
  clear_has_productid();
}
inline ::google::protobuf::int32 SJ_ProductInfo::productid() const {
  return productid_;
}
inline void SJ_ProductInfo::set_productid(::google::protobuf::int32 value) {
  set_has_productid();
  productid_ = value;
}

// required int32 FactoryID = 6;
inline bool SJ_ProductInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_ProductInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_ProductInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_ProductInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_ProductInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_ProductInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 7;
inline bool SJ_ProductInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_ProductInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_ProductInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_ProductInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_ProductInfo::vercode() const {
  return vercode_;
}
inline void SJ_ProductInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required bool HasMark = 8;
inline bool SJ_ProductInfo::has_hasmark() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_ProductInfo::set_has_hasmark() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_ProductInfo::clear_has_hasmark() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_ProductInfo::clear_hasmark() {
  hasmark_ = false;
  clear_has_hasmark();
}
inline bool SJ_ProductInfo::hasmark() const {
  return hasmark_;
}
inline void SJ_ProductInfo::set_hasmark(bool value) {
  set_has_hasmark();
  hasmark_ = value;
}

// required bool IsVisible = 9;
inline bool SJ_ProductInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_ProductInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_ProductInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_ProductInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_ProductInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_ProductInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 10;
inline bool SJ_ProductInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_ProductInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_ProductInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_ProductInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_ProductInfo::islocked() const {
  return islocked_;
}
inline void SJ_ProductInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required int32 SupplyType = 11;
inline bool SJ_ProductInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_ProductInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_ProductInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_ProductInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_ProductInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_ProductInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 12;
inline bool SJ_ProductInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_ProductInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_ProductInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_ProductInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_ProductInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_ProductInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 DockObjID = 13;
inline bool SJ_ProductInfo::has_dockobjid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_ProductInfo::set_has_dockobjid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_ProductInfo::clear_has_dockobjid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_ProductInfo::clear_dockobjid() {
  dockobjid_ = 0;
  clear_has_dockobjid();
}
inline ::google::protobuf::int32 SJ_ProductInfo::dockobjid() const {
  return dockobjid_;
}
inline void SJ_ProductInfo::set_dockobjid(::google::protobuf::int32 value) {
  set_has_dockobjid();
  dockobjid_ = value;
}

// required int32 DockObjType = 14;
inline bool SJ_ProductInfo::has_dockobjtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_ProductInfo::set_has_dockobjtype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_ProductInfo::clear_has_dockobjtype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_ProductInfo::clear_dockobjtype() {
  dockobjtype_ = 0;
  clear_has_dockobjtype();
}
inline ::google::protobuf::int32 SJ_ProductInfo::dockobjtype() const {
  return dockobjtype_;
}
inline void SJ_ProductInfo::set_dockobjtype(::google::protobuf::int32 value) {
  set_has_dockobjtype();
  dockobjtype_ = value;
}

// required double DockXPos = 15;
inline bool SJ_ProductInfo::has_dockxpos() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_ProductInfo::set_has_dockxpos() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_ProductInfo::clear_has_dockxpos() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_ProductInfo::clear_dockxpos() {
  dockxpos_ = 0;
  clear_has_dockxpos();
}
inline double SJ_ProductInfo::dockxpos() const {
  return dockxpos_;
}
inline void SJ_ProductInfo::set_dockxpos(double value) {
  set_has_dockxpos();
  dockxpos_ = value;
}

// required double DockYPos = 16;
inline bool SJ_ProductInfo::has_dockypos() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_ProductInfo::set_has_dockypos() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_ProductInfo::clear_has_dockypos() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_ProductInfo::clear_dockypos() {
  dockypos_ = 0;
  clear_has_dockypos();
}
inline double SJ_ProductInfo::dockypos() const {
  return dockypos_;
}
inline void SJ_ProductInfo::set_dockypos(double value) {
  set_has_dockypos();
  dockypos_ = value;
}

// required double XLen = 17;
inline bool SJ_ProductInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_ProductInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_ProductInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_ProductInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_ProductInfo::xlen() const {
  return xlen_;
}
inline void SJ_ProductInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 18;
inline bool SJ_ProductInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_ProductInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_ProductInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_ProductInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_ProductInfo::ylen() const {
  return ylen_;
}
inline void SJ_ProductInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 19;
inline bool SJ_ProductInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_ProductInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_ProductInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_ProductInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_ProductInfo::zlen() const {
  return zlen_;
}
inline void SJ_ProductInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double YPos = 20;
inline bool SJ_ProductInfo::has_ypos() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_ProductInfo::set_has_ypos() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_ProductInfo::clear_has_ypos() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_ProductInfo::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline double SJ_ProductInfo::ypos() const {
  return ypos_;
}
inline void SJ_ProductInfo::set_ypos(double value) {
  set_has_ypos();
  ypos_ = value;
}

// required int32 CreatorID = 21;
inline bool SJ_ProductInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_ProductInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_ProductInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_ProductInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_ProductInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_ProductInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 22;
inline bool SJ_ProductInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_ProductInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_ProductInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_ProductInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_ProductInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_ProductInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 23;
inline bool SJ_ProductInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_ProductInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_ProductInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_ProductInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_ProductInfo::createtime() const {
  return createtime_;
}
inline void SJ_ProductInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 24;
inline bool SJ_ProductInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_ProductInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_ProductInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_ProductInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_ProductInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_ProductInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_RemarkInfo

// required int32 DesignRemarkID = 1;
inline bool SJ_RemarkInfo::has_designremarkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_RemarkInfo::set_has_designremarkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_RemarkInfo::clear_has_designremarkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_RemarkInfo::clear_designremarkid() {
  designremarkid_ = 0;
  clear_has_designremarkid();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::designremarkid() const {
  return designremarkid_;
}
inline void SJ_RemarkInfo::set_designremarkid(::google::protobuf::int32 value) {
  set_has_designremarkid();
  designremarkid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_RemarkInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_RemarkInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_RemarkInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_RemarkInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_RemarkInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_RemarkInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_RemarkInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_RemarkInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_RemarkInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_RemarkInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_RemarkInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_RemarkInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_RemarkInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_RemarkInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_RemarkInfo::orderid() const {
  return orderid_;
}
inline void SJ_RemarkInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPrintID = 5;
inline bool SJ_RemarkInfo::has_designprintid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_RemarkInfo::set_has_designprintid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_RemarkInfo::clear_has_designprintid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_RemarkInfo::clear_designprintid() {
  designprintid_ = 0;
  clear_has_designprintid();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::designprintid() const {
  return designprintid_;
}
inline void SJ_RemarkInfo::set_designprintid(::google::protobuf::int32 value) {
  set_has_designprintid();
  designprintid_ = value;
}

// required int32 PrintID = 6;
inline bool SJ_RemarkInfo::has_printid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_RemarkInfo::set_has_printid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_RemarkInfo::clear_has_printid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_RemarkInfo::clear_printid() {
  printid_ = 0;
  clear_has_printid();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::printid() const {
  return printid_;
}
inline void SJ_RemarkInfo::set_printid(::google::protobuf::int32 value) {
  set_has_printid();
  printid_ = value;
}

// required int32 ViewType = 7;
inline bool SJ_RemarkInfo::has_viewtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_RemarkInfo::set_has_viewtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_RemarkInfo::clear_has_viewtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_RemarkInfo::clear_viewtype() {
  viewtype_ = 0;
  clear_has_viewtype();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::viewtype() const {
  return viewtype_;
}
inline void SJ_RemarkInfo::set_viewtype(::google::protobuf::int32 value) {
  set_has_viewtype();
  viewtype_ = value;
}

// required int64 BGColor = 8;
inline bool SJ_RemarkInfo::has_bgcolor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_RemarkInfo::set_has_bgcolor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_RemarkInfo::clear_has_bgcolor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_RemarkInfo::clear_bgcolor() {
  bgcolor_ = GOOGLE_LONGLONG(0);
  clear_has_bgcolor();
}
inline ::google::protobuf::int64 SJ_RemarkInfo::bgcolor() const {
  return bgcolor_;
}
inline void SJ_RemarkInfo::set_bgcolor(::google::protobuf::int64 value) {
  set_has_bgcolor();
  bgcolor_ = value;
}

// required int64 ForeColor = 9;
inline bool SJ_RemarkInfo::has_forecolor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_RemarkInfo::set_has_forecolor() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_RemarkInfo::clear_has_forecolor() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_RemarkInfo::clear_forecolor() {
  forecolor_ = GOOGLE_LONGLONG(0);
  clear_has_forecolor();
}
inline ::google::protobuf::int64 SJ_RemarkInfo::forecolor() const {
  return forecolor_;
}
inline void SJ_RemarkInfo::set_forecolor(::google::protobuf::int64 value) {
  set_has_forecolor();
  forecolor_ = value;
}

// required int32 FontSize = 10;
inline bool SJ_RemarkInfo::has_fontsize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_RemarkInfo::set_has_fontsize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_RemarkInfo::clear_has_fontsize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_RemarkInfo::clear_fontsize() {
  fontsize_ = 0;
  clear_has_fontsize();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::fontsize() const {
  return fontsize_;
}
inline void SJ_RemarkInfo::set_fontsize(::google::protobuf::int32 value) {
  set_has_fontsize();
  fontsize_ = value;
}

// required int32 FontStyle = 11;
inline bool SJ_RemarkInfo::has_fontstyle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_RemarkInfo::set_has_fontstyle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_RemarkInfo::clear_has_fontstyle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_RemarkInfo::clear_fontstyle() {
  fontstyle_ = 0;
  clear_has_fontstyle();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::fontstyle() const {
  return fontstyle_;
}
inline void SJ_RemarkInfo::set_fontstyle(::google::protobuf::int32 value) {
  set_has_fontstyle();
  fontstyle_ = value;
}

// required int32 LineSpace = 12;
inline bool SJ_RemarkInfo::has_linespace() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_RemarkInfo::set_has_linespace() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_RemarkInfo::clear_has_linespace() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_RemarkInfo::clear_linespace() {
  linespace_ = 0;
  clear_has_linespace();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::linespace() const {
  return linespace_;
}
inline void SJ_RemarkInfo::set_linespace(::google::protobuf::int32 value) {
  set_has_linespace();
  linespace_ = value;
}

// required int32 ArrowID = 13;
inline bool SJ_RemarkInfo::has_arrowid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_RemarkInfo::set_has_arrowid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_RemarkInfo::clear_has_arrowid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_RemarkInfo::clear_arrowid() {
  arrowid_ = 0;
  clear_has_arrowid();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::arrowid() const {
  return arrowid_;
}
inline void SJ_RemarkInfo::set_arrowid(::google::protobuf::int32 value) {
  set_has_arrowid();
  arrowid_ = value;
}

// required int32 ArrowStyle = 14;
inline bool SJ_RemarkInfo::has_arrowstyle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_RemarkInfo::set_has_arrowstyle() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_RemarkInfo::clear_has_arrowstyle() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_RemarkInfo::clear_arrowstyle() {
  arrowstyle_ = 0;
  clear_has_arrowstyle();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::arrowstyle() const {
  return arrowstyle_;
}
inline void SJ_RemarkInfo::set_arrowstyle(::google::protobuf::int32 value) {
  set_has_arrowstyle();
  arrowstyle_ = value;
}

// required int32 FrameStyle = 15;
inline bool SJ_RemarkInfo::has_framestyle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_RemarkInfo::set_has_framestyle() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_RemarkInfo::clear_has_framestyle() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_RemarkInfo::clear_framestyle() {
  framestyle_ = 0;
  clear_has_framestyle();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::framestyle() const {
  return framestyle_;
}
inline void SJ_RemarkInfo::set_framestyle(::google::protobuf::int32 value) {
  set_has_framestyle();
  framestyle_ = value;
}

// required int64 FrameColor = 16;
inline bool SJ_RemarkInfo::has_framecolor() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_RemarkInfo::set_has_framecolor() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_RemarkInfo::clear_has_framecolor() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_RemarkInfo::clear_framecolor() {
  framecolor_ = GOOGLE_LONGLONG(0);
  clear_has_framecolor();
}
inline ::google::protobuf::int64 SJ_RemarkInfo::framecolor() const {
  return framecolor_;
}
inline void SJ_RemarkInfo::set_framecolor(::google::protobuf::int64 value) {
  set_has_framecolor();
  framecolor_ = value;
}

// required int32 DirectLine = 17;
inline bool SJ_RemarkInfo::has_directline() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_RemarkInfo::set_has_directline() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_RemarkInfo::clear_has_directline() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_RemarkInfo::clear_directline() {
  directline_ = 0;
  clear_has_directline();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::directline() const {
  return directline_;
}
inline void SJ_RemarkInfo::set_directline(::google::protobuf::int32 value) {
  set_has_directline();
  directline_ = value;
}

// required int32 DirectStyle = 18;
inline bool SJ_RemarkInfo::has_directstyle() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_RemarkInfo::set_has_directstyle() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_RemarkInfo::clear_has_directstyle() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_RemarkInfo::clear_directstyle() {
  directstyle_ = 0;
  clear_has_directstyle();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::directstyle() const {
  return directstyle_;
}
inline void SJ_RemarkInfo::set_directstyle(::google::protobuf::int32 value) {
  set_has_directstyle();
  directstyle_ = value;
}

// required int32 DirectLineStyle = 19;
inline bool SJ_RemarkInfo::has_directlinestyle() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_RemarkInfo::set_has_directlinestyle() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_RemarkInfo::clear_has_directlinestyle() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_RemarkInfo::clear_directlinestyle() {
  directlinestyle_ = 0;
  clear_has_directlinestyle();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::directlinestyle() const {
  return directlinestyle_;
}
inline void SJ_RemarkInfo::set_directlinestyle(::google::protobuf::int32 value) {
  set_has_directlinestyle();
  directlinestyle_ = value;
}

// required int32 CommentFrameStyle = 20;
inline bool SJ_RemarkInfo::has_commentframestyle() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_RemarkInfo::set_has_commentframestyle() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_RemarkInfo::clear_has_commentframestyle() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_RemarkInfo::clear_commentframestyle() {
  commentframestyle_ = 0;
  clear_has_commentframestyle();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::commentframestyle() const {
  return commentframestyle_;
}
inline void SJ_RemarkInfo::set_commentframestyle(::google::protobuf::int32 value) {
  set_has_commentframestyle();
  commentframestyle_ = value;
}

// required bool IsSingleMode = 21;
inline bool SJ_RemarkInfo::has_issinglemode() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_RemarkInfo::set_has_issinglemode() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_RemarkInfo::clear_has_issinglemode() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_RemarkInfo::clear_issinglemode() {
  issinglemode_ = false;
  clear_has_issinglemode();
}
inline bool SJ_RemarkInfo::issinglemode() const {
  return issinglemode_;
}
inline void SJ_RemarkInfo::set_issinglemode(bool value) {
  set_has_issinglemode();
  issinglemode_ = value;
}

// required bool IsVisible = 22;
inline bool SJ_RemarkInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_RemarkInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_RemarkInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_RemarkInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_RemarkInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_RemarkInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 23;
inline bool SJ_RemarkInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_RemarkInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_RemarkInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_RemarkInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_RemarkInfo::islocked() const {
  return islocked_;
}
inline void SJ_RemarkInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required bool StrickOut = 24;
inline bool SJ_RemarkInfo::has_strickout() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_RemarkInfo::set_has_strickout() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_RemarkInfo::clear_has_strickout() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_RemarkInfo::clear_strickout() {
  strickout_ = false;
  clear_has_strickout();
}
inline bool SJ_RemarkInfo::strickout() const {
  return strickout_;
}
inline void SJ_RemarkInfo::set_strickout(bool value) {
  set_has_strickout();
  strickout_ = value;
}

// required bool UnderLine = 25;
inline bool SJ_RemarkInfo::has_underline() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_RemarkInfo::set_has_underline() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_RemarkInfo::clear_has_underline() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_RemarkInfo::clear_underline() {
  underline_ = false;
  clear_has_underline();
}
inline bool SJ_RemarkInfo::underline() const {
  return underline_;
}
inline void SJ_RemarkInfo::set_underline(bool value) {
  set_has_underline();
  underline_ = value;
}

// required bool Italic = 26;
inline bool SJ_RemarkInfo::has_italic() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_RemarkInfo::set_has_italic() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_RemarkInfo::clear_has_italic() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_RemarkInfo::clear_italic() {
  italic_ = false;
  clear_has_italic();
}
inline bool SJ_RemarkInfo::italic() const {
  return italic_;
}
inline void SJ_RemarkInfo::set_italic(bool value) {
  set_has_italic();
  italic_ = value;
}

// required bool Bold = 27;
inline bool SJ_RemarkInfo::has_bold() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_RemarkInfo::set_has_bold() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_RemarkInfo::clear_has_bold() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_RemarkInfo::clear_bold() {
  bold_ = false;
  clear_has_bold();
}
inline bool SJ_RemarkInfo::bold() const {
  return bold_;
}
inline void SJ_RemarkInfo::set_bold(bool value) {
  set_has_bold();
  bold_ = value;
}

// required double FrameWidth = 28;
inline bool SJ_RemarkInfo::has_framewidth() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_RemarkInfo::set_has_framewidth() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_RemarkInfo::clear_has_framewidth() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_RemarkInfo::clear_framewidth() {
  framewidth_ = 0;
  clear_has_framewidth();
}
inline double SJ_RemarkInfo::framewidth() const {
  return framewidth_;
}
inline void SJ_RemarkInfo::set_framewidth(double value) {
  set_has_framewidth();
  framewidth_ = value;
}

// required double ArrowX = 29;
inline bool SJ_RemarkInfo::has_arrowx() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_RemarkInfo::set_has_arrowx() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_RemarkInfo::clear_has_arrowx() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_RemarkInfo::clear_arrowx() {
  arrowx_ = 0;
  clear_has_arrowx();
}
inline double SJ_RemarkInfo::arrowx() const {
  return arrowx_;
}
inline void SJ_RemarkInfo::set_arrowx(double value) {
  set_has_arrowx();
  arrowx_ = value;
}

// required double ArrowY = 30;
inline bool SJ_RemarkInfo::has_arrowy() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SJ_RemarkInfo::set_has_arrowy() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SJ_RemarkInfo::clear_has_arrowy() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SJ_RemarkInfo::clear_arrowy() {
  arrowy_ = 0;
  clear_has_arrowy();
}
inline double SJ_RemarkInfo::arrowy() const {
  return arrowy_;
}
inline void SJ_RemarkInfo::set_arrowy(double value) {
  set_has_arrowy();
  arrowy_ = value;
}

// required double StartX = 31;
inline bool SJ_RemarkInfo::has_startx() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SJ_RemarkInfo::set_has_startx() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SJ_RemarkInfo::clear_has_startx() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SJ_RemarkInfo::clear_startx() {
  startx_ = 0;
  clear_has_startx();
}
inline double SJ_RemarkInfo::startx() const {
  return startx_;
}
inline void SJ_RemarkInfo::set_startx(double value) {
  set_has_startx();
  startx_ = value;
}

// required double StartY = 32;
inline bool SJ_RemarkInfo::has_starty() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SJ_RemarkInfo::set_has_starty() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SJ_RemarkInfo::clear_has_starty() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SJ_RemarkInfo::clear_starty() {
  starty_ = 0;
  clear_has_starty();
}
inline double SJ_RemarkInfo::starty() const {
  return starty_;
}
inline void SJ_RemarkInfo::set_starty(double value) {
  set_has_starty();
  starty_ = value;
}

// required int32 CreatorID = 33;
inline bool SJ_RemarkInfo::has_creatorid() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SJ_RemarkInfo::set_has_creatorid() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SJ_RemarkInfo::clear_has_creatorid() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SJ_RemarkInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_RemarkInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 34;
inline bool SJ_RemarkInfo::has_updaterid() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SJ_RemarkInfo::set_has_updaterid() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SJ_RemarkInfo::clear_has_updaterid() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SJ_RemarkInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_RemarkInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_RemarkInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 35;
inline bool SJ_RemarkInfo::has_createtime() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SJ_RemarkInfo::set_has_createtime() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SJ_RemarkInfo::clear_has_createtime() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SJ_RemarkInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_RemarkInfo::createtime() const {
  return createtime_;
}
inline void SJ_RemarkInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 36;
inline bool SJ_RemarkInfo::has_updatetime() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SJ_RemarkInfo::set_has_updatetime() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SJ_RemarkInfo::clear_has_updatetime() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SJ_RemarkInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_RemarkInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_RemarkInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string FaceName = 37;
inline bool SJ_RemarkInfo::has_facename() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SJ_RemarkInfo::set_has_facename() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SJ_RemarkInfo::clear_has_facename() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SJ_RemarkInfo::clear_facename() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    facename_->clear();
  }
  clear_has_facename();
}
inline const ::std::string& SJ_RemarkInfo::facename() const {
  return *facename_;
}
inline void SJ_RemarkInfo::set_facename(const ::std::string& value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void SJ_RemarkInfo::set_facename(const char* value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void SJ_RemarkInfo::set_facename(const char* value, size_t size) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_RemarkInfo::mutable_facename() {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  return facename_;
}
inline ::std::string* SJ_RemarkInfo::release_facename() {
  clear_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facename_;
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_RemarkInfo::set_allocated_facename(::std::string* facename) {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (facename) {
    set_has_facename();
    facename_ = facename;
  } else {
    clear_has_facename();
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string RemarkText = 38;
inline bool SJ_RemarkInfo::has_remarktext() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SJ_RemarkInfo::set_has_remarktext() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SJ_RemarkInfo::clear_has_remarktext() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SJ_RemarkInfo::clear_remarktext() {
  if (remarktext_ != &::google::protobuf::internal::kEmptyString) {
    remarktext_->clear();
  }
  clear_has_remarktext();
}
inline const ::std::string& SJ_RemarkInfo::remarktext() const {
  return *remarktext_;
}
inline void SJ_RemarkInfo::set_remarktext(const ::std::string& value) {
  set_has_remarktext();
  if (remarktext_ == &::google::protobuf::internal::kEmptyString) {
    remarktext_ = new ::std::string;
  }
  remarktext_->assign(value);
}
inline void SJ_RemarkInfo::set_remarktext(const char* value) {
  set_has_remarktext();
  if (remarktext_ == &::google::protobuf::internal::kEmptyString) {
    remarktext_ = new ::std::string;
  }
  remarktext_->assign(value);
}
inline void SJ_RemarkInfo::set_remarktext(const char* value, size_t size) {
  set_has_remarktext();
  if (remarktext_ == &::google::protobuf::internal::kEmptyString) {
    remarktext_ = new ::std::string;
  }
  remarktext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_RemarkInfo::mutable_remarktext() {
  set_has_remarktext();
  if (remarktext_ == &::google::protobuf::internal::kEmptyString) {
    remarktext_ = new ::std::string;
  }
  return remarktext_;
}
inline ::std::string* SJ_RemarkInfo::release_remarktext() {
  clear_has_remarktext();
  if (remarktext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remarktext_;
    remarktext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_RemarkInfo::set_allocated_remarktext(::std::string* remarktext) {
  if (remarktext_ != &::google::protobuf::internal::kEmptyString) {
    delete remarktext_;
  }
  if (remarktext) {
    set_has_remarktext();
    remarktext_ = remarktext;
  } else {
    clear_has_remarktext();
    remarktext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SJ_ShapeInfo

// required int32 DesignShapeID = 1;
inline bool SJ_ShapeInfo::has_designshapeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_ShapeInfo::set_has_designshapeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_ShapeInfo::clear_has_designshapeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_ShapeInfo::clear_designshapeid() {
  designshapeid_ = 0;
  clear_has_designshapeid();
}
inline ::google::protobuf::int32 SJ_ShapeInfo::designshapeid() const {
  return designshapeid_;
}
inline void SJ_ShapeInfo::set_designshapeid(::google::protobuf::int32 value) {
  set_has_designshapeid();
  designshapeid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_ShapeInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_ShapeInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_ShapeInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_ShapeInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_ShapeInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_ShapeInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_ShapeInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_ShapeInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_ShapeInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_ShapeInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_ShapeInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_ShapeInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_ShapeInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_ShapeInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_ShapeInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_ShapeInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_ShapeInfo::orderid() const {
  return orderid_;
}
inline void SJ_ShapeInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPrintID = 5;
inline bool SJ_ShapeInfo::has_designprintid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_ShapeInfo::set_has_designprintid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_ShapeInfo::clear_has_designprintid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_ShapeInfo::clear_designprintid() {
  designprintid_ = 0;
  clear_has_designprintid();
}
inline ::google::protobuf::int32 SJ_ShapeInfo::designprintid() const {
  return designprintid_;
}
inline void SJ_ShapeInfo::set_designprintid(::google::protobuf::int32 value) {
  set_has_designprintid();
  designprintid_ = value;
}

// required int32 PrintID = 6;
inline bool SJ_ShapeInfo::has_printid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_ShapeInfo::set_has_printid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_ShapeInfo::clear_has_printid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_ShapeInfo::clear_printid() {
  printid_ = 0;
  clear_has_printid();
}
inline ::google::protobuf::int32 SJ_ShapeInfo::printid() const {
  return printid_;
}
inline void SJ_ShapeInfo::set_printid(::google::protobuf::int32 value) {
  set_has_printid();
  printid_ = value;
}

// required int32 ViewType = 7;
inline bool SJ_ShapeInfo::has_viewtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_ShapeInfo::set_has_viewtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_ShapeInfo::clear_has_viewtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_ShapeInfo::clear_viewtype() {
  viewtype_ = 0;
  clear_has_viewtype();
}
inline ::google::protobuf::int32 SJ_ShapeInfo::viewtype() const {
  return viewtype_;
}
inline void SJ_ShapeInfo::set_viewtype(::google::protobuf::int32 value) {
  set_has_viewtype();
  viewtype_ = value;
}

// required int32 ShapeType = 8;
inline bool SJ_ShapeInfo::has_shapetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_ShapeInfo::set_has_shapetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_ShapeInfo::clear_has_shapetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_ShapeInfo::clear_shapetype() {
  shapetype_ = 0;
  clear_has_shapetype();
}
inline ::google::protobuf::int32 SJ_ShapeInfo::shapetype() const {
  return shapetype_;
}
inline void SJ_ShapeInfo::set_shapetype(::google::protobuf::int32 value) {
  set_has_shapetype();
  shapetype_ = value;
}

// required int32 LineWidth = 9;
inline bool SJ_ShapeInfo::has_linewidth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_ShapeInfo::set_has_linewidth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_ShapeInfo::clear_has_linewidth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_ShapeInfo::clear_linewidth() {
  linewidth_ = 0;
  clear_has_linewidth();
}
inline ::google::protobuf::int32 SJ_ShapeInfo::linewidth() const {
  return linewidth_;
}
inline void SJ_ShapeInfo::set_linewidth(::google::protobuf::int32 value) {
  set_has_linewidth();
  linewidth_ = value;
}

// required int32 LineStyle = 10;
inline bool SJ_ShapeInfo::has_linestyle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_ShapeInfo::set_has_linestyle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_ShapeInfo::clear_has_linestyle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_ShapeInfo::clear_linestyle() {
  linestyle_ = 0;
  clear_has_linestyle();
}
inline ::google::protobuf::int32 SJ_ShapeInfo::linestyle() const {
  return linestyle_;
}
inline void SJ_ShapeInfo::set_linestyle(::google::protobuf::int32 value) {
  set_has_linestyle();
  linestyle_ = value;
}

// required double StartX = 11;
inline bool SJ_ShapeInfo::has_startx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_ShapeInfo::set_has_startx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_ShapeInfo::clear_has_startx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_ShapeInfo::clear_startx() {
  startx_ = 0;
  clear_has_startx();
}
inline double SJ_ShapeInfo::startx() const {
  return startx_;
}
inline void SJ_ShapeInfo::set_startx(double value) {
  set_has_startx();
  startx_ = value;
}

// required double StartY = 12;
inline bool SJ_ShapeInfo::has_starty() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_ShapeInfo::set_has_starty() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_ShapeInfo::clear_has_starty() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_ShapeInfo::clear_starty() {
  starty_ = 0;
  clear_has_starty();
}
inline double SJ_ShapeInfo::starty() const {
  return starty_;
}
inline void SJ_ShapeInfo::set_starty(double value) {
  set_has_starty();
  starty_ = value;
}

// required double StopX = 13;
inline bool SJ_ShapeInfo::has_stopx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_ShapeInfo::set_has_stopx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_ShapeInfo::clear_has_stopx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_ShapeInfo::clear_stopx() {
  stopx_ = 0;
  clear_has_stopx();
}
inline double SJ_ShapeInfo::stopx() const {
  return stopx_;
}
inline void SJ_ShapeInfo::set_stopx(double value) {
  set_has_stopx();
  stopx_ = value;
}

// required double StopY = 14;
inline bool SJ_ShapeInfo::has_stopy() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_ShapeInfo::set_has_stopy() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_ShapeInfo::clear_has_stopy() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_ShapeInfo::clear_stopy() {
  stopy_ = 0;
  clear_has_stopy();
}
inline double SJ_ShapeInfo::stopy() const {
  return stopy_;
}
inline void SJ_ShapeInfo::set_stopy(double value) {
  set_has_stopy();
  stopy_ = value;
}

// required bool IsVisible = 15;
inline bool SJ_ShapeInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_ShapeInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_ShapeInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_ShapeInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_ShapeInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_ShapeInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 16;
inline bool SJ_ShapeInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_ShapeInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_ShapeInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_ShapeInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_ShapeInfo::islocked() const {
  return islocked_;
}
inline void SJ_ShapeInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required int32 CreatorID = 17;
inline bool SJ_ShapeInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_ShapeInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_ShapeInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_ShapeInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_ShapeInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_ShapeInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 18;
inline bool SJ_ShapeInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_ShapeInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_ShapeInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_ShapeInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_ShapeInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_ShapeInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 19;
inline bool SJ_ShapeInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_ShapeInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_ShapeInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_ShapeInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_ShapeInfo::createtime() const {
  return createtime_;
}
inline void SJ_ShapeInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 20;
inline bool SJ_ShapeInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_ShapeInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_ShapeInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_ShapeInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_ShapeInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_ShapeInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string AttachFilePath = 21;
inline bool SJ_ShapeInfo::has_attachfilepath() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_ShapeInfo::set_has_attachfilepath() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_ShapeInfo::clear_has_attachfilepath() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_ShapeInfo::clear_attachfilepath() {
  if (attachfilepath_ != &::google::protobuf::internal::kEmptyString) {
    attachfilepath_->clear();
  }
  clear_has_attachfilepath();
}
inline const ::std::string& SJ_ShapeInfo::attachfilepath() const {
  return *attachfilepath_;
}
inline void SJ_ShapeInfo::set_attachfilepath(const ::std::string& value) {
  set_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    attachfilepath_ = new ::std::string;
  }
  attachfilepath_->assign(value);
}
inline void SJ_ShapeInfo::set_attachfilepath(const char* value) {
  set_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    attachfilepath_ = new ::std::string;
  }
  attachfilepath_->assign(value);
}
inline void SJ_ShapeInfo::set_attachfilepath(const char* value, size_t size) {
  set_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    attachfilepath_ = new ::std::string;
  }
  attachfilepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SJ_ShapeInfo::mutable_attachfilepath() {
  set_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    attachfilepath_ = new ::std::string;
  }
  return attachfilepath_;
}
inline ::std::string* SJ_ShapeInfo::release_attachfilepath() {
  clear_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attachfilepath_;
    attachfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SJ_ShapeInfo::set_allocated_attachfilepath(::std::string* attachfilepath) {
  if (attachfilepath_ != &::google::protobuf::internal::kEmptyString) {
    delete attachfilepath_;
  }
  if (attachfilepath) {
    set_has_attachfilepath();
    attachfilepath_ = attachfilepath;
  } else {
    clear_has_attachfilepath();
    attachfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SJ_SkinInfo

// required int32 DesignSkinID = 1;
inline bool SJ_SkinInfo::has_designskinid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_SkinInfo::set_has_designskinid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_SkinInfo::clear_has_designskinid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_SkinInfo::clear_designskinid() {
  designskinid_ = 0;
  clear_has_designskinid();
}
inline ::google::protobuf::int32 SJ_SkinInfo::designskinid() const {
  return designskinid_;
}
inline void SJ_SkinInfo::set_designskinid(::google::protobuf::int32 value) {
  set_has_designskinid();
  designskinid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_SkinInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_SkinInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_SkinInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_SkinInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_SkinInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_SkinInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_SkinInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_SkinInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_SkinInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_SkinInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_SkinInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_SkinInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_SkinInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_SkinInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_SkinInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_SkinInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_SkinInfo::orderid() const {
  return orderid_;
}
inline void SJ_SkinInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DecorID = 5;
inline bool SJ_SkinInfo::has_decorid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_SkinInfo::set_has_decorid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_SkinInfo::clear_has_decorid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_SkinInfo::clear_decorid() {
  decorid_ = 0;
  clear_has_decorid();
}
inline ::google::protobuf::int32 SJ_SkinInfo::decorid() const {
  return decorid_;
}
inline void SJ_SkinInfo::set_decorid(::google::protobuf::int32 value) {
  set_has_decorid();
  decorid_ = value;
}

// required int32 FactoryID = 6;
inline bool SJ_SkinInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_SkinInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_SkinInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_SkinInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_SkinInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_SkinInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 7;
inline bool SJ_SkinInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_SkinInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_SkinInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_SkinInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_SkinInfo::vercode() const {
  return vercode_;
}
inline void SJ_SkinInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 GTypeID = 8;
inline bool SJ_SkinInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_SkinInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_SkinInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_SkinInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_SkinInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_SkinInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required bool HasMark = 9;
inline bool SJ_SkinInfo::has_hasmark() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_SkinInfo::set_has_hasmark() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_SkinInfo::clear_has_hasmark() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_SkinInfo::clear_hasmark() {
  hasmark_ = false;
  clear_has_hasmark();
}
inline bool SJ_SkinInfo::hasmark() const {
  return hasmark_;
}
inline void SJ_SkinInfo::set_hasmark(bool value) {
  set_has_hasmark();
  hasmark_ = value;
}

// required bool IsVisible = 10;
inline bool SJ_SkinInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_SkinInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_SkinInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_SkinInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_SkinInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_SkinInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 11;
inline bool SJ_SkinInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_SkinInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_SkinInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_SkinInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_SkinInfo::islocked() const {
  return islocked_;
}
inline void SJ_SkinInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required double XLen = 12;
inline bool SJ_SkinInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_SkinInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_SkinInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_SkinInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_SkinInfo::xlen() const {
  return xlen_;
}
inline void SJ_SkinInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 13;
inline bool SJ_SkinInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_SkinInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_SkinInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_SkinInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_SkinInfo::ylen() const {
  return ylen_;
}
inline void SJ_SkinInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 14;
inline bool SJ_SkinInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_SkinInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_SkinInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_SkinInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_SkinInfo::zlen() const {
  return zlen_;
}
inline void SJ_SkinInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double GroundLen = 15;
inline bool SJ_SkinInfo::has_groundlen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_SkinInfo::set_has_groundlen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_SkinInfo::clear_has_groundlen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_SkinInfo::clear_groundlen() {
  groundlen_ = 0;
  clear_has_groundlen();
}
inline double SJ_SkinInfo::groundlen() const {
  return groundlen_;
}
inline void SJ_SkinInfo::set_groundlen(double value) {
  set_has_groundlen();
  groundlen_ = value;
}

// required int32 CreatorID = 16;
inline bool SJ_SkinInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_SkinInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_SkinInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_SkinInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_SkinInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_SkinInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 17;
inline bool SJ_SkinInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_SkinInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_SkinInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_SkinInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_SkinInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_SkinInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 18;
inline bool SJ_SkinInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_SkinInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_SkinInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_SkinInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_SkinInfo::createtime() const {
  return createtime_;
}
inline void SJ_SkinInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 19;
inline bool SJ_SkinInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_SkinInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_SkinInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_SkinInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_SkinInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_SkinInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_TableInfo

// required int32 DesignTableID = 1;
inline bool SJ_TableInfo::has_designtableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_TableInfo::set_has_designtableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_TableInfo::clear_has_designtableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_TableInfo::clear_designtableid() {
  designtableid_ = 0;
  clear_has_designtableid();
}
inline ::google::protobuf::int32 SJ_TableInfo::designtableid() const {
  return designtableid_;
}
inline void SJ_TableInfo::set_designtableid(::google::protobuf::int32 value) {
  set_has_designtableid();
  designtableid_ = value;
}

// required int32 OrderCate = 2;
inline bool SJ_TableInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_TableInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_TableInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_TableInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_TableInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_TableInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int32 DesignPlanID = 3;
inline bool SJ_TableInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_TableInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_TableInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_TableInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_TableInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_TableInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_TableInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_TableInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_TableInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_TableInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_TableInfo::orderid() const {
  return orderid_;
}
inline void SJ_TableInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 TableID = 5;
inline bool SJ_TableInfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_TableInfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_TableInfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_TableInfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 SJ_TableInfo::tableid() const {
  return tableid_;
}
inline void SJ_TableInfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// required int32 FactoryID = 6;
inline bool SJ_TableInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_TableInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_TableInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_TableInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_TableInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_TableInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 7;
inline bool SJ_TableInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_TableInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_TableInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_TableInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_TableInfo::vercode() const {
  return vercode_;
}
inline void SJ_TableInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 TableIndex = 8;
inline bool SJ_TableInfo::has_tableindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_TableInfo::set_has_tableindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_TableInfo::clear_has_tableindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_TableInfo::clear_tableindex() {
  tableindex_ = 0;
  clear_has_tableindex();
}
inline ::google::protobuf::int32 SJ_TableInfo::tableindex() const {
  return tableindex_;
}
inline void SJ_TableInfo::set_tableindex(::google::protobuf::int32 value) {
  set_has_tableindex();
  tableindex_ = value;
}

// required bool HasMark = 9;
inline bool SJ_TableInfo::has_hasmark() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_TableInfo::set_has_hasmark() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_TableInfo::clear_has_hasmark() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_TableInfo::clear_hasmark() {
  hasmark_ = false;
  clear_has_hasmark();
}
inline bool SJ_TableInfo::hasmark() const {
  return hasmark_;
}
inline void SJ_TableInfo::set_hasmark(bool value) {
  set_has_hasmark();
  hasmark_ = value;
}

// required bool IsVisible = 10;
inline bool SJ_TableInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_TableInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_TableInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_TableInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_TableInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_TableInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 11;
inline bool SJ_TableInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_TableInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_TableInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_TableInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_TableInfo::islocked() const {
  return islocked_;
}
inline void SJ_TableInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required int32 SupplyType = 12;
inline bool SJ_TableInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_TableInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_TableInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_TableInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_TableInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_TableInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 13;
inline bool SJ_TableInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_TableInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_TableInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_TableInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_TableInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_TableInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required double ZLen = 14;
inline bool SJ_TableInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_TableInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_TableInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_TableInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_TableInfo::zlen() const {
  return zlen_;
}
inline void SJ_TableInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double YPos = 15;
inline bool SJ_TableInfo::has_ypos() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_TableInfo::set_has_ypos() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_TableInfo::clear_has_ypos() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_TableInfo::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline double SJ_TableInfo::ypos() const {
  return ypos_;
}
inline void SJ_TableInfo::set_ypos(double value) {
  set_has_ypos();
  ypos_ = value;
}

// required int32 CreatorID = 16;
inline bool SJ_TableInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_TableInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_TableInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_TableInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_TableInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_TableInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 17;
inline bool SJ_TableInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_TableInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_TableInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_TableInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_TableInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_TableInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 18;
inline bool SJ_TableInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_TableInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_TableInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_TableInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_TableInfo::createtime() const {
  return createtime_;
}
inline void SJ_TableInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 19;
inline bool SJ_TableInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_TableInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_TableInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_TableInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_TableInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_TableInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_TablePartInfo

// required int32 DesignTablePartID = 1;
inline bool SJ_TablePartInfo::has_designtablepartid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_TablePartInfo::set_has_designtablepartid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_TablePartInfo::clear_has_designtablepartid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_TablePartInfo::clear_designtablepartid() {
  designtablepartid_ = 0;
  clear_has_designtablepartid();
}
inline ::google::protobuf::int32 SJ_TablePartInfo::designtablepartid() const {
  return designtablepartid_;
}
inline void SJ_TablePartInfo::set_designtablepartid(::google::protobuf::int32 value) {
  set_has_designtablepartid();
  designtablepartid_ = value;
}

// required int32 DesignTableID = 2;
inline bool SJ_TablePartInfo::has_designtableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_TablePartInfo::set_has_designtableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_TablePartInfo::clear_has_designtableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_TablePartInfo::clear_designtableid() {
  designtableid_ = 0;
  clear_has_designtableid();
}
inline ::google::protobuf::int32 SJ_TablePartInfo::designtableid() const {
  return designtableid_;
}
inline void SJ_TablePartInfo::set_designtableid(::google::protobuf::int32 value) {
  set_has_designtableid();
  designtableid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_TablePartInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_TablePartInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_TablePartInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_TablePartInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_TablePartInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_TablePartInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_TablePartInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_TablePartInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_TablePartInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_TablePartInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_TablePartInfo::orderid() const {
  return orderid_;
}
inline void SJ_TablePartInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_TablePartInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_TablePartInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_TablePartInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_TablePartInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_TablePartInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_TablePartInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 DecorLineID = 6;
inline bool SJ_TablePartInfo::has_decorlineid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_TablePartInfo::set_has_decorlineid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_TablePartInfo::clear_has_decorlineid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_TablePartInfo::clear_decorlineid() {
  decorlineid_ = 0;
  clear_has_decorlineid();
}
inline ::google::protobuf::int32 SJ_TablePartInfo::decorlineid() const {
  return decorlineid_;
}
inline void SJ_TablePartInfo::set_decorlineid(::google::protobuf::int32 value) {
  set_has_decorlineid();
  decorlineid_ = value;
}

// required int32 FactoryID = 7;
inline bool SJ_TablePartInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_TablePartInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_TablePartInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_TablePartInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_TablePartInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_TablePartInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 8;
inline bool SJ_TablePartInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_TablePartInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_TablePartInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_TablePartInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_TablePartInfo::vercode() const {
  return vercode_;
}
inline void SJ_TablePartInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 TableSideIndex = 9;
inline bool SJ_TablePartInfo::has_tablesideindex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_TablePartInfo::set_has_tablesideindex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_TablePartInfo::clear_has_tablesideindex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_TablePartInfo::clear_tablesideindex() {
  tablesideindex_ = 0;
  clear_has_tablesideindex();
}
inline ::google::protobuf::int32 SJ_TablePartInfo::tablesideindex() const {
  return tablesideindex_;
}
inline void SJ_TablePartInfo::set_tablesideindex(::google::protobuf::int32 value) {
  set_has_tablesideindex();
  tablesideindex_ = value;
}

// required bool IsUserSetYLen = 10;
inline bool SJ_TablePartInfo::has_isusersetylen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_TablePartInfo::set_has_isusersetylen() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_TablePartInfo::clear_has_isusersetylen() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_TablePartInfo::clear_isusersetylen() {
  isusersetylen_ = false;
  clear_has_isusersetylen();
}
inline bool SJ_TablePartInfo::isusersetylen() const {
  return isusersetylen_;
}
inline void SJ_TablePartInfo::set_isusersetylen(bool value) {
  set_has_isusersetylen();
  isusersetylen_ = value;
}

// required int32 GTypeID = 11;
inline bool SJ_TablePartInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_TablePartInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_TablePartInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_TablePartInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_TablePartInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_TablePartInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 MaterialID = 12;
inline bool SJ_TablePartInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_TablePartInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_TablePartInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_TablePartInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 SJ_TablePartInfo::materialid() const {
  return materialid_;
}
inline void SJ_TablePartInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required int32 ModelID = 13;
inline bool SJ_TablePartInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_TablePartInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_TablePartInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_TablePartInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 SJ_TablePartInfo::modelid() const {
  return modelid_;
}
inline void SJ_TablePartInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required double XLen = 14;
inline bool SJ_TablePartInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_TablePartInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_TablePartInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_TablePartInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_TablePartInfo::xlen() const {
  return xlen_;
}
inline void SJ_TablePartInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 15;
inline bool SJ_TablePartInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_TablePartInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_TablePartInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_TablePartInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_TablePartInfo::ylen() const {
  return ylen_;
}
inline void SJ_TablePartInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 16;
inline bool SJ_TablePartInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_TablePartInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_TablePartInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_TablePartInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_TablePartInfo::zlen() const {
  return zlen_;
}
inline void SJ_TablePartInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required int32 DefaultYLen = 17;
inline bool SJ_TablePartInfo::has_defaultylen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_TablePartInfo::set_has_defaultylen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_TablePartInfo::clear_has_defaultylen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_TablePartInfo::clear_defaultylen() {
  defaultylen_ = 0;
  clear_has_defaultylen();
}
inline ::google::protobuf::int32 SJ_TablePartInfo::defaultylen() const {
  return defaultylen_;
}
inline void SJ_TablePartInfo::set_defaultylen(::google::protobuf::int32 value) {
  set_has_defaultylen();
  defaultylen_ = value;
}

// required int32 CreatorID = 18;
inline bool SJ_TablePartInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_TablePartInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_TablePartInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_TablePartInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_TablePartInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_TablePartInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 19;
inline bool SJ_TablePartInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_TablePartInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_TablePartInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_TablePartInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_TablePartInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_TablePartInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 20;
inline bool SJ_TablePartInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_TablePartInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_TablePartInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_TablePartInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_TablePartInfo::createtime() const {
  return createtime_;
}
inline void SJ_TablePartInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 21;
inline bool SJ_TablePartInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_TablePartInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_TablePartInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_TablePartInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_TablePartInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_TablePartInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_TableSideInfo

// required int32 DesignTableSideID = 1;
inline bool SJ_TableSideInfo::has_designtablesideid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_TableSideInfo::set_has_designtablesideid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_TableSideInfo::clear_has_designtablesideid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_TableSideInfo::clear_designtablesideid() {
  designtablesideid_ = 0;
  clear_has_designtablesideid();
}
inline ::google::protobuf::int32 SJ_TableSideInfo::designtablesideid() const {
  return designtablesideid_;
}
inline void SJ_TableSideInfo::set_designtablesideid(::google::protobuf::int32 value) {
  set_has_designtablesideid();
  designtablesideid_ = value;
}

// required int32 DesignTableID = 2;
inline bool SJ_TableSideInfo::has_designtableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_TableSideInfo::set_has_designtableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_TableSideInfo::clear_has_designtableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_TableSideInfo::clear_designtableid() {
  designtableid_ = 0;
  clear_has_designtableid();
}
inline ::google::protobuf::int32 SJ_TableSideInfo::designtableid() const {
  return designtableid_;
}
inline void SJ_TableSideInfo::set_designtableid(::google::protobuf::int32 value) {
  set_has_designtableid();
  designtableid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_TableSideInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_TableSideInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_TableSideInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_TableSideInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_TableSideInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_TableSideInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_TableSideInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_TableSideInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_TableSideInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_TableSideInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_TableSideInfo::orderid() const {
  return orderid_;
}
inline void SJ_TableSideInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_TableSideInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_TableSideInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_TableSideInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_TableSideInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_TableSideInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_TableSideInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 TableTopID = 6;
inline bool SJ_TableSideInfo::has_tabletopid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_TableSideInfo::set_has_tabletopid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_TableSideInfo::clear_has_tabletopid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_TableSideInfo::clear_tabletopid() {
  tabletopid_ = 0;
  clear_has_tabletopid();
}
inline ::google::protobuf::int32 SJ_TableSideInfo::tabletopid() const {
  return tabletopid_;
}
inline void SJ_TableSideInfo::set_tabletopid(::google::protobuf::int32 value) {
  set_has_tabletopid();
  tabletopid_ = value;
}

// required int32 TableTopSideID = 7;
inline bool SJ_TableSideInfo::has_tabletopsideid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_TableSideInfo::set_has_tabletopsideid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_TableSideInfo::clear_has_tabletopsideid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_TableSideInfo::clear_tabletopsideid() {
  tabletopsideid_ = 0;
  clear_has_tabletopsideid();
}
inline ::google::protobuf::int32 SJ_TableSideInfo::tabletopsideid() const {
  return tabletopsideid_;
}
inline void SJ_TableSideInfo::set_tabletopsideid(::google::protobuf::int32 value) {
  set_has_tabletopsideid();
  tabletopsideid_ = value;
}

// required int32 FactoryID = 8;
inline bool SJ_TableSideInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_TableSideInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_TableSideInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_TableSideInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_TableSideInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_TableSideInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 9;
inline bool SJ_TableSideInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_TableSideInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_TableSideInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_TableSideInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_TableSideInfo::vercode() const {
  return vercode_;
}
inline void SJ_TableSideInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 TableSideIndex = 10;
inline bool SJ_TableSideInfo::has_tablesideindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_TableSideInfo::set_has_tablesideindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_TableSideInfo::clear_has_tablesideindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_TableSideInfo::clear_tablesideindex() {
  tablesideindex_ = 0;
  clear_has_tablesideindex();
}
inline ::google::protobuf::int32 SJ_TableSideInfo::tablesideindex() const {
  return tablesideindex_;
}
inline void SJ_TableSideInfo::set_tablesideindex(::google::protobuf::int32 value) {
  set_has_tablesideindex();
  tablesideindex_ = value;
}

// required bool IsUseTableMat = 11;
inline bool SJ_TableSideInfo::has_isusetablemat() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_TableSideInfo::set_has_isusetablemat() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_TableSideInfo::clear_has_isusetablemat() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_TableSideInfo::clear_isusetablemat() {
  isusetablemat_ = false;
  clear_has_isusetablemat();
}
inline bool SJ_TableSideInfo::isusetablemat() const {
  return isusetablemat_;
}
inline void SJ_TableSideInfo::set_isusetablemat(bool value) {
  set_has_isusetablemat();
  isusetablemat_ = value;
}

// required int32 MaterialID = 12;
inline bool SJ_TableSideInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_TableSideInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_TableSideInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_TableSideInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 SJ_TableSideInfo::materialid() const {
  return materialid_;
}
inline void SJ_TableSideInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required int32 CreatorID = 13;
inline bool SJ_TableSideInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_TableSideInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_TableSideInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_TableSideInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_TableSideInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_TableSideInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 14;
inline bool SJ_TableSideInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_TableSideInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_TableSideInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_TableSideInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_TableSideInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_TableSideInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 15;
inline bool SJ_TableSideInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_TableSideInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_TableSideInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_TableSideInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_TableSideInfo::createtime() const {
  return createtime_;
}
inline void SJ_TableSideInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 16;
inline bool SJ_TableSideInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_TableSideInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_TableSideInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_TableSideInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_TableSideInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_TableSideInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_WallDecorInfo

// required int32 DesignWallDecorID = 1;
inline bool SJ_WallDecorInfo::has_designwalldecorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_WallDecorInfo::set_has_designwalldecorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_WallDecorInfo::clear_has_designwalldecorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_WallDecorInfo::clear_designwalldecorid() {
  designwalldecorid_ = 0;
  clear_has_designwalldecorid();
}
inline ::google::protobuf::int32 SJ_WallDecorInfo::designwalldecorid() const {
  return designwalldecorid_;
}
inline void SJ_WallDecorInfo::set_designwalldecorid(::google::protobuf::int32 value) {
  set_has_designwalldecorid();
  designwalldecorid_ = value;
}

// required int32 DesignWallID = 2;
inline bool SJ_WallDecorInfo::has_designwallid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_WallDecorInfo::set_has_designwallid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_WallDecorInfo::clear_has_designwallid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_WallDecorInfo::clear_designwallid() {
  designwallid_ = 0;
  clear_has_designwallid();
}
inline ::google::protobuf::int32 SJ_WallDecorInfo::designwallid() const {
  return designwallid_;
}
inline void SJ_WallDecorInfo::set_designwallid(::google::protobuf::int32 value) {
  set_has_designwallid();
  designwallid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_WallDecorInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_WallDecorInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_WallDecorInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_WallDecorInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_WallDecorInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_WallDecorInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_WallDecorInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_WallDecorInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_WallDecorInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_WallDecorInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_WallDecorInfo::orderid() const {
  return orderid_;
}
inline void SJ_WallDecorInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 DesignPlanID = 5;
inline bool SJ_WallDecorInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_WallDecorInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_WallDecorInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_WallDecorInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_WallDecorInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_WallDecorInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 DecorID = 6;
inline bool SJ_WallDecorInfo::has_decorid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_WallDecorInfo::set_has_decorid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_WallDecorInfo::clear_has_decorid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_WallDecorInfo::clear_decorid() {
  decorid_ = 0;
  clear_has_decorid();
}
inline ::google::protobuf::int32 SJ_WallDecorInfo::decorid() const {
  return decorid_;
}
inline void SJ_WallDecorInfo::set_decorid(::google::protobuf::int32 value) {
  set_has_decorid();
  decorid_ = value;
}

// required int32 FactoryID = 7;
inline bool SJ_WallDecorInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_WallDecorInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_WallDecorInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_WallDecorInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_WallDecorInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_WallDecorInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 8;
inline bool SJ_WallDecorInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_WallDecorInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_WallDecorInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_WallDecorInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_WallDecorInfo::vercode() const {
  return vercode_;
}
inline void SJ_WallDecorInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required bool IsModelRevers = 9;
inline bool SJ_WallDecorInfo::has_ismodelrevers() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_WallDecorInfo::set_has_ismodelrevers() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_WallDecorInfo::clear_has_ismodelrevers() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_WallDecorInfo::clear_ismodelrevers() {
  ismodelrevers_ = false;
  clear_has_ismodelrevers();
}
inline bool SJ_WallDecorInfo::ismodelrevers() const {
  return ismodelrevers_;
}
inline void SJ_WallDecorInfo::set_ismodelrevers(bool value) {
  set_has_ismodelrevers();
  ismodelrevers_ = value;
}

// required bool IsVisible = 10;
inline bool SJ_WallDecorInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_WallDecorInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_WallDecorInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_WallDecorInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_WallDecorInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_WallDecorInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 11;
inline bool SJ_WallDecorInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_WallDecorInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_WallDecorInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_WallDecorInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_WallDecorInfo::islocked() const {
  return islocked_;
}
inline void SJ_WallDecorInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required int32 SupplyType = 12;
inline bool SJ_WallDecorInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_WallDecorInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_WallDecorInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_WallDecorInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 SJ_WallDecorInfo::supplytype() const {
  return supplytype_;
}
inline void SJ_WallDecorInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 13;
inline bool SJ_WallDecorInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_WallDecorInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_WallDecorInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_WallDecorInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 SJ_WallDecorInfo::gtypeid() const {
  return gtypeid_;
}
inline void SJ_WallDecorInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required double XLen = 14;
inline bool SJ_WallDecorInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_WallDecorInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_WallDecorInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_WallDecorInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_WallDecorInfo::xlen() const {
  return xlen_;
}
inline void SJ_WallDecorInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 15;
inline bool SJ_WallDecorInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_WallDecorInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_WallDecorInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_WallDecorInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_WallDecorInfo::ylen() const {
  return ylen_;
}
inline void SJ_WallDecorInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 16;
inline bool SJ_WallDecorInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_WallDecorInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_WallDecorInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_WallDecorInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_WallDecorInfo::zlen() const {
  return zlen_;
}
inline void SJ_WallDecorInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double OffsetXLen = 17;
inline bool SJ_WallDecorInfo::has_offsetxlen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_WallDecorInfo::set_has_offsetxlen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_WallDecorInfo::clear_has_offsetxlen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_WallDecorInfo::clear_offsetxlen() {
  offsetxlen_ = 0;
  clear_has_offsetxlen();
}
inline double SJ_WallDecorInfo::offsetxlen() const {
  return offsetxlen_;
}
inline void SJ_WallDecorInfo::set_offsetxlen(double value) {
  set_has_offsetxlen();
  offsetxlen_ = value;
}

// required double OffsetYLen = 18;
inline bool SJ_WallDecorInfo::has_offsetylen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_WallDecorInfo::set_has_offsetylen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_WallDecorInfo::clear_has_offsetylen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_WallDecorInfo::clear_offsetylen() {
  offsetylen_ = 0;
  clear_has_offsetylen();
}
inline double SJ_WallDecorInfo::offsetylen() const {
  return offsetylen_;
}
inline void SJ_WallDecorInfo::set_offsetylen(double value) {
  set_has_offsetylen();
  offsetylen_ = value;
}

// required double OffsetZLen = 19;
inline bool SJ_WallDecorInfo::has_offsetzlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_WallDecorInfo::set_has_offsetzlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_WallDecorInfo::clear_has_offsetzlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_WallDecorInfo::clear_offsetzlen() {
  offsetzlen_ = 0;
  clear_has_offsetzlen();
}
inline double SJ_WallDecorInfo::offsetzlen() const {
  return offsetzlen_;
}
inline void SJ_WallDecorInfo::set_offsetzlen(double value) {
  set_has_offsetzlen();
  offsetzlen_ = value;
}

// required int32 CreatorID = 20;
inline bool SJ_WallDecorInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_WallDecorInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_WallDecorInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_WallDecorInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_WallDecorInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_WallDecorInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 21;
inline bool SJ_WallDecorInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_WallDecorInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_WallDecorInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_WallDecorInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_WallDecorInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_WallDecorInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 22;
inline bool SJ_WallDecorInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_WallDecorInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_WallDecorInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_WallDecorInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_WallDecorInfo::createtime() const {
  return createtime_;
}
inline void SJ_WallDecorInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 23;
inline bool SJ_WallDecorInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_WallDecorInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_WallDecorInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_WallDecorInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_WallDecorInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_WallDecorInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_WallInfo

// required int32 DesignWallID = 1;
inline bool SJ_WallInfo::has_designwallid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SJ_WallInfo::set_has_designwallid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SJ_WallInfo::clear_has_designwallid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SJ_WallInfo::clear_designwallid() {
  designwallid_ = 0;
  clear_has_designwallid();
}
inline ::google::protobuf::int32 SJ_WallInfo::designwallid() const {
  return designwallid_;
}
inline void SJ_WallInfo::set_designwallid(::google::protobuf::int32 value) {
  set_has_designwallid();
  designwallid_ = value;
}

// required int32 DesignPlanID = 2;
inline bool SJ_WallInfo::has_designplanid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SJ_WallInfo::set_has_designplanid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SJ_WallInfo::clear_has_designplanid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SJ_WallInfo::clear_designplanid() {
  designplanid_ = 0;
  clear_has_designplanid();
}
inline ::google::protobuf::int32 SJ_WallInfo::designplanid() const {
  return designplanid_;
}
inline void SJ_WallInfo::set_designplanid(::google::protobuf::int32 value) {
  set_has_designplanid();
  designplanid_ = value;
}

// required int32 OrderCate = 3;
inline bool SJ_WallInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SJ_WallInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SJ_WallInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SJ_WallInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 SJ_WallInfo::ordercate() const {
  return ordercate_;
}
inline void SJ_WallInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 4;
inline bool SJ_WallInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SJ_WallInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SJ_WallInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SJ_WallInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 SJ_WallInfo::orderid() const {
  return orderid_;
}
inline void SJ_WallInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 FactoryID = 5;
inline bool SJ_WallInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SJ_WallInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SJ_WallInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SJ_WallInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 SJ_WallInfo::factoryid() const {
  return factoryid_;
}
inline void SJ_WallInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 6;
inline bool SJ_WallInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SJ_WallInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SJ_WallInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SJ_WallInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 SJ_WallInfo::vercode() const {
  return vercode_;
}
inline void SJ_WallInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 WallType = 7;
inline bool SJ_WallInfo::has_walltype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SJ_WallInfo::set_has_walltype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SJ_WallInfo::clear_has_walltype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SJ_WallInfo::clear_walltype() {
  walltype_ = 0;
  clear_has_walltype();
}
inline ::google::protobuf::int32 SJ_WallInfo::walltype() const {
  return walltype_;
}
inline void SJ_WallInfo::set_walltype(::google::protobuf::int32 value) {
  set_has_walltype();
  walltype_ = value;
}

// required int32 WallIndex = 8;
inline bool SJ_WallInfo::has_wallindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SJ_WallInfo::set_has_wallindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SJ_WallInfo::clear_has_wallindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SJ_WallInfo::clear_wallindex() {
  wallindex_ = 0;
  clear_has_wallindex();
}
inline ::google::protobuf::int32 SJ_WallInfo::wallindex() const {
  return wallindex_;
}
inline void SJ_WallInfo::set_wallindex(::google::protobuf::int32 value) {
  set_has_wallindex();
  wallindex_ = value;
}

// required int32 GroupID = 9;
inline bool SJ_WallInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SJ_WallInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SJ_WallInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SJ_WallInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 SJ_WallInfo::groupid() const {
  return groupid_;
}
inline void SJ_WallInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 DockObjID = 10;
inline bool SJ_WallInfo::has_dockobjid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SJ_WallInfo::set_has_dockobjid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SJ_WallInfo::clear_has_dockobjid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SJ_WallInfo::clear_dockobjid() {
  dockobjid_ = 0;
  clear_has_dockobjid();
}
inline ::google::protobuf::int32 SJ_WallInfo::dockobjid() const {
  return dockobjid_;
}
inline void SJ_WallInfo::set_dockobjid(::google::protobuf::int32 value) {
  set_has_dockobjid();
  dockobjid_ = value;
}

// required double DockXPos = 11;
inline bool SJ_WallInfo::has_dockxpos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SJ_WallInfo::set_has_dockxpos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SJ_WallInfo::clear_has_dockxpos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SJ_WallInfo::clear_dockxpos() {
  dockxpos_ = 0;
  clear_has_dockxpos();
}
inline double SJ_WallInfo::dockxpos() const {
  return dockxpos_;
}
inline void SJ_WallInfo::set_dockxpos(double value) {
  set_has_dockxpos();
  dockxpos_ = value;
}

// required double DockYPos = 12;
inline bool SJ_WallInfo::has_dockypos() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SJ_WallInfo::set_has_dockypos() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SJ_WallInfo::clear_has_dockypos() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SJ_WallInfo::clear_dockypos() {
  dockypos_ = 0;
  clear_has_dockypos();
}
inline double SJ_WallInfo::dockypos() const {
  return dockypos_;
}
inline void SJ_WallInfo::set_dockypos(double value) {
  set_has_dockypos();
  dockypos_ = value;
}

// required int32 DecorID = 13;
inline bool SJ_WallInfo::has_decorid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SJ_WallInfo::set_has_decorid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SJ_WallInfo::clear_has_decorid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SJ_WallInfo::clear_decorid() {
  decorid_ = 0;
  clear_has_decorid();
}
inline ::google::protobuf::int32 SJ_WallInfo::decorid() const {
  return decorid_;
}
inline void SJ_WallInfo::set_decorid(::google::protobuf::int32 value) {
  set_has_decorid();
  decorid_ = value;
}

// required int32 GridStyle = 14;
inline bool SJ_WallInfo::has_gridstyle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SJ_WallInfo::set_has_gridstyle() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SJ_WallInfo::clear_has_gridstyle() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SJ_WallInfo::clear_gridstyle() {
  gridstyle_ = 0;
  clear_has_gridstyle();
}
inline ::google::protobuf::int32 SJ_WallInfo::gridstyle() const {
  return gridstyle_;
}
inline void SJ_WallInfo::set_gridstyle(::google::protobuf::int32 value) {
  set_has_gridstyle();
  gridstyle_ = value;
}

// required bool HasMark = 15;
inline bool SJ_WallInfo::has_hasmark() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SJ_WallInfo::set_has_hasmark() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SJ_WallInfo::clear_has_hasmark() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SJ_WallInfo::clear_hasmark() {
  hasmark_ = false;
  clear_has_hasmark();
}
inline bool SJ_WallInfo::hasmark() const {
  return hasmark_;
}
inline void SJ_WallInfo::set_hasmark(bool value) {
  set_has_hasmark();
  hasmark_ = value;
}

// required bool IsVisible = 16;
inline bool SJ_WallInfo::has_isvisible() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SJ_WallInfo::set_has_isvisible() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SJ_WallInfo::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SJ_WallInfo::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool SJ_WallInfo::isvisible() const {
  return isvisible_;
}
inline void SJ_WallInfo::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// required bool IsLocked = 17;
inline bool SJ_WallInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SJ_WallInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SJ_WallInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SJ_WallInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool SJ_WallInfo::islocked() const {
  return islocked_;
}
inline void SJ_WallInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// required double StartX = 18;
inline bool SJ_WallInfo::has_startx() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SJ_WallInfo::set_has_startx() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SJ_WallInfo::clear_has_startx() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SJ_WallInfo::clear_startx() {
  startx_ = 0;
  clear_has_startx();
}
inline double SJ_WallInfo::startx() const {
  return startx_;
}
inline void SJ_WallInfo::set_startx(double value) {
  set_has_startx();
  startx_ = value;
}

// required double StartY = 19;
inline bool SJ_WallInfo::has_starty() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SJ_WallInfo::set_has_starty() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SJ_WallInfo::clear_has_starty() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SJ_WallInfo::clear_starty() {
  starty_ = 0;
  clear_has_starty();
}
inline double SJ_WallInfo::starty() const {
  return starty_;
}
inline void SJ_WallInfo::set_starty(double value) {
  set_has_starty();
  starty_ = value;
}

// required double EndX = 20;
inline bool SJ_WallInfo::has_endx() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SJ_WallInfo::set_has_endx() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SJ_WallInfo::clear_has_endx() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SJ_WallInfo::clear_endx() {
  endx_ = 0;
  clear_has_endx();
}
inline double SJ_WallInfo::endx() const {
  return endx_;
}
inline void SJ_WallInfo::set_endx(double value) {
  set_has_endx();
  endx_ = value;
}

// required double EndY = 21;
inline bool SJ_WallInfo::has_endy() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SJ_WallInfo::set_has_endy() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SJ_WallInfo::clear_has_endy() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SJ_WallInfo::clear_endy() {
  endy_ = 0;
  clear_has_endy();
}
inline double SJ_WallInfo::endy() const {
  return endy_;
}
inline void SJ_WallInfo::set_endy(double value) {
  set_has_endy();
  endy_ = value;
}

// required double XLen = 22;
inline bool SJ_WallInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SJ_WallInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SJ_WallInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SJ_WallInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double SJ_WallInfo::xlen() const {
  return xlen_;
}
inline void SJ_WallInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 23;
inline bool SJ_WallInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SJ_WallInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SJ_WallInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SJ_WallInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double SJ_WallInfo::ylen() const {
  return ylen_;
}
inline void SJ_WallInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 24;
inline bool SJ_WallInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SJ_WallInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SJ_WallInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SJ_WallInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double SJ_WallInfo::zlen() const {
  return zlen_;
}
inline void SJ_WallInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double GroundLen = 25;
inline bool SJ_WallInfo::has_groundlen() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SJ_WallInfo::set_has_groundlen() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SJ_WallInfo::clear_has_groundlen() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SJ_WallInfo::clear_groundlen() {
  groundlen_ = 0;
  clear_has_groundlen();
}
inline double SJ_WallInfo::groundlen() const {
  return groundlen_;
}
inline void SJ_WallInfo::set_groundlen(double value) {
  set_has_groundlen();
  groundlen_ = value;
}

// required int32 CreatorID = 26;
inline bool SJ_WallInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SJ_WallInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SJ_WallInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SJ_WallInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 SJ_WallInfo::creatorid() const {
  return creatorid_;
}
inline void SJ_WallInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 27;
inline bool SJ_WallInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SJ_WallInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SJ_WallInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SJ_WallInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 SJ_WallInfo::updaterid() const {
  return updaterid_;
}
inline void SJ_WallInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 28;
inline bool SJ_WallInfo::has_createtime() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SJ_WallInfo::set_has_createtime() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SJ_WallInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SJ_WallInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 SJ_WallInfo::createtime() const {
  return createtime_;
}
inline void SJ_WallInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 29;
inline bool SJ_WallInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SJ_WallInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SJ_WallInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SJ_WallInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 SJ_WallInfo::updatetime() const {
  return updatetime_;
}
inline void SJ_WallInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// SJ_Table

// repeated .transMsg.SJ_CabBoardGapInfo SJ_CabBoardGapInfo = 1;
inline int SJ_Table::sj_cabboardgapinfo_size() const {
  return sj_cabboardgapinfo_.size();
}
inline void SJ_Table::clear_sj_cabboardgapinfo() {
  sj_cabboardgapinfo_.Clear();
}
inline const ::transMsg::SJ_CabBoardGapInfo& SJ_Table::sj_cabboardgapinfo(int index) const {
  return sj_cabboardgapinfo_.Get(index);
}
inline ::transMsg::SJ_CabBoardGapInfo* SJ_Table::mutable_sj_cabboardgapinfo(int index) {
  return sj_cabboardgapinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabBoardGapInfo* SJ_Table::add_sj_cabboardgapinfo() {
  return sj_cabboardgapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardGapInfo >&
SJ_Table::sj_cabboardgapinfo() const {
  return sj_cabboardgapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardGapInfo >*
SJ_Table::mutable_sj_cabboardgapinfo() {
  return &sj_cabboardgapinfo_;
}

// repeated .transMsg.SJ_CabBoardInfo SJ_CabBoardInfo = 2;
inline int SJ_Table::sj_cabboardinfo_size() const {
  return sj_cabboardinfo_.size();
}
inline void SJ_Table::clear_sj_cabboardinfo() {
  sj_cabboardinfo_.Clear();
}
inline const ::transMsg::SJ_CabBoardInfo& SJ_Table::sj_cabboardinfo(int index) const {
  return sj_cabboardinfo_.Get(index);
}
inline ::transMsg::SJ_CabBoardInfo* SJ_Table::mutable_sj_cabboardinfo(int index) {
  return sj_cabboardinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabBoardInfo* SJ_Table::add_sj_cabboardinfo() {
  return sj_cabboardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardInfo >&
SJ_Table::sj_cabboardinfo() const {
  return sj_cabboardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardInfo >*
SJ_Table::mutable_sj_cabboardinfo() {
  return &sj_cabboardinfo_;
}

// repeated .transMsg.SJ_CabBoardSealInfo SJ_CabBoardSealInfo = 3;
inline int SJ_Table::sj_cabboardsealinfo_size() const {
  return sj_cabboardsealinfo_.size();
}
inline void SJ_Table::clear_sj_cabboardsealinfo() {
  sj_cabboardsealinfo_.Clear();
}
inline const ::transMsg::SJ_CabBoardSealInfo& SJ_Table::sj_cabboardsealinfo(int index) const {
  return sj_cabboardsealinfo_.Get(index);
}
inline ::transMsg::SJ_CabBoardSealInfo* SJ_Table::mutable_sj_cabboardsealinfo(int index) {
  return sj_cabboardsealinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabBoardSealInfo* SJ_Table::add_sj_cabboardsealinfo() {
  return sj_cabboardsealinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardSealInfo >&
SJ_Table::sj_cabboardsealinfo() const {
  return sj_cabboardsealinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabBoardSealInfo >*
SJ_Table::mutable_sj_cabboardsealinfo() {
  return &sj_cabboardsealinfo_;
}

// repeated .transMsg.SJ_CabDoorBoardGapInfo SJ_CabDoorBoardGapInfo = 4;
inline int SJ_Table::sj_cabdoorboardgapinfo_size() const {
  return sj_cabdoorboardgapinfo_.size();
}
inline void SJ_Table::clear_sj_cabdoorboardgapinfo() {
  sj_cabdoorboardgapinfo_.Clear();
}
inline const ::transMsg::SJ_CabDoorBoardGapInfo& SJ_Table::sj_cabdoorboardgapinfo(int index) const {
  return sj_cabdoorboardgapinfo_.Get(index);
}
inline ::transMsg::SJ_CabDoorBoardGapInfo* SJ_Table::mutable_sj_cabdoorboardgapinfo(int index) {
  return sj_cabdoorboardgapinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabDoorBoardGapInfo* SJ_Table::add_sj_cabdoorboardgapinfo() {
  return sj_cabdoorboardgapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardGapInfo >&
SJ_Table::sj_cabdoorboardgapinfo() const {
  return sj_cabdoorboardgapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardGapInfo >*
SJ_Table::mutable_sj_cabdoorboardgapinfo() {
  return &sj_cabdoorboardgapinfo_;
}

// repeated .transMsg.SJ_CabDoorBoardInfo SJ_CabDoorBoardInfo = 5;
inline int SJ_Table::sj_cabdoorboardinfo_size() const {
  return sj_cabdoorboardinfo_.size();
}
inline void SJ_Table::clear_sj_cabdoorboardinfo() {
  sj_cabdoorboardinfo_.Clear();
}
inline const ::transMsg::SJ_CabDoorBoardInfo& SJ_Table::sj_cabdoorboardinfo(int index) const {
  return sj_cabdoorboardinfo_.Get(index);
}
inline ::transMsg::SJ_CabDoorBoardInfo* SJ_Table::mutable_sj_cabdoorboardinfo(int index) {
  return sj_cabdoorboardinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabDoorBoardInfo* SJ_Table::add_sj_cabdoorboardinfo() {
  return sj_cabdoorboardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardInfo >&
SJ_Table::sj_cabdoorboardinfo() const {
  return sj_cabdoorboardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardInfo >*
SJ_Table::mutable_sj_cabdoorboardinfo() {
  return &sj_cabdoorboardinfo_;
}

// repeated .transMsg.SJ_CabDoorBoardSealInfo SJ_CabDoorBoardSealInfo = 6;
inline int SJ_Table::sj_cabdoorboardsealinfo_size() const {
  return sj_cabdoorboardsealinfo_.size();
}
inline void SJ_Table::clear_sj_cabdoorboardsealinfo() {
  sj_cabdoorboardsealinfo_.Clear();
}
inline const ::transMsg::SJ_CabDoorBoardSealInfo& SJ_Table::sj_cabdoorboardsealinfo(int index) const {
  return sj_cabdoorboardsealinfo_.Get(index);
}
inline ::transMsg::SJ_CabDoorBoardSealInfo* SJ_Table::mutable_sj_cabdoorboardsealinfo(int index) {
  return sj_cabdoorboardsealinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabDoorBoardSealInfo* SJ_Table::add_sj_cabdoorboardsealinfo() {
  return sj_cabdoorboardsealinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardSealInfo >&
SJ_Table::sj_cabdoorboardsealinfo() const {
  return sj_cabdoorboardsealinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorBoardSealInfo >*
SJ_Table::mutable_sj_cabdoorboardsealinfo() {
  return &sj_cabdoorboardsealinfo_;
}

// repeated .transMsg.SJ_CabDoorHWFInfo SJ_CabDoorHWFInfo = 7;
inline int SJ_Table::sj_cabdoorhwfinfo_size() const {
  return sj_cabdoorhwfinfo_.size();
}
inline void SJ_Table::clear_sj_cabdoorhwfinfo() {
  sj_cabdoorhwfinfo_.Clear();
}
inline const ::transMsg::SJ_CabDoorHWFInfo& SJ_Table::sj_cabdoorhwfinfo(int index) const {
  return sj_cabdoorhwfinfo_.Get(index);
}
inline ::transMsg::SJ_CabDoorHWFInfo* SJ_Table::mutable_sj_cabdoorhwfinfo(int index) {
  return sj_cabdoorhwfinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabDoorHWFInfo* SJ_Table::add_sj_cabdoorhwfinfo() {
  return sj_cabdoorhwfinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorHWFInfo >&
SJ_Table::sj_cabdoorhwfinfo() const {
  return sj_cabdoorhwfinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorHWFInfo >*
SJ_Table::mutable_sj_cabdoorhwfinfo() {
  return &sj_cabdoorhwfinfo_;
}

// repeated .transMsg.SJ_CabDoorHandleInfo SJ_CabDoorHandleInfo = 8;
inline int SJ_Table::sj_cabdoorhandleinfo_size() const {
  return sj_cabdoorhandleinfo_.size();
}
inline void SJ_Table::clear_sj_cabdoorhandleinfo() {
  sj_cabdoorhandleinfo_.Clear();
}
inline const ::transMsg::SJ_CabDoorHandleInfo& SJ_Table::sj_cabdoorhandleinfo(int index) const {
  return sj_cabdoorhandleinfo_.Get(index);
}
inline ::transMsg::SJ_CabDoorHandleInfo* SJ_Table::mutable_sj_cabdoorhandleinfo(int index) {
  return sj_cabdoorhandleinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabDoorHandleInfo* SJ_Table::add_sj_cabdoorhandleinfo() {
  return sj_cabdoorhandleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorHandleInfo >&
SJ_Table::sj_cabdoorhandleinfo() const {
  return sj_cabdoorhandleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorHandleInfo >*
SJ_Table::mutable_sj_cabdoorhandleinfo() {
  return &sj_cabdoorhandleinfo_;
}

// repeated .transMsg.SJ_CabDoorInfo SJ_CabDoorInfo = 9;
inline int SJ_Table::sj_cabdoorinfo_size() const {
  return sj_cabdoorinfo_.size();
}
inline void SJ_Table::clear_sj_cabdoorinfo() {
  sj_cabdoorinfo_.Clear();
}
inline const ::transMsg::SJ_CabDoorInfo& SJ_Table::sj_cabdoorinfo(int index) const {
  return sj_cabdoorinfo_.Get(index);
}
inline ::transMsg::SJ_CabDoorInfo* SJ_Table::mutable_sj_cabdoorinfo(int index) {
  return sj_cabdoorinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabDoorInfo* SJ_Table::add_sj_cabdoorinfo() {
  return sj_cabdoorinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorInfo >&
SJ_Table::sj_cabdoorinfo() const {
  return sj_cabdoorinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorInfo >*
SJ_Table::mutable_sj_cabdoorinfo() {
  return &sj_cabdoorinfo_;
}

// repeated .transMsg.SJ_CabDoorRegionInfo SJ_CabDoorRegionInfo = 10;
inline int SJ_Table::sj_cabdoorregioninfo_size() const {
  return sj_cabdoorregioninfo_.size();
}
inline void SJ_Table::clear_sj_cabdoorregioninfo() {
  sj_cabdoorregioninfo_.Clear();
}
inline const ::transMsg::SJ_CabDoorRegionInfo& SJ_Table::sj_cabdoorregioninfo(int index) const {
  return sj_cabdoorregioninfo_.Get(index);
}
inline ::transMsg::SJ_CabDoorRegionInfo* SJ_Table::mutable_sj_cabdoorregioninfo(int index) {
  return sj_cabdoorregioninfo_.Mutable(index);
}
inline ::transMsg::SJ_CabDoorRegionInfo* SJ_Table::add_sj_cabdoorregioninfo() {
  return sj_cabdoorregioninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorRegionInfo >&
SJ_Table::sj_cabdoorregioninfo() const {
  return sj_cabdoorregioninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorRegionInfo >*
SJ_Table::mutable_sj_cabdoorregioninfo() {
  return &sj_cabdoorregioninfo_;
}

// repeated .transMsg.SJ_CabDoorSlideInfo SJ_CabDoorSlideInfo = 11;
inline int SJ_Table::sj_cabdoorslideinfo_size() const {
  return sj_cabdoorslideinfo_.size();
}
inline void SJ_Table::clear_sj_cabdoorslideinfo() {
  sj_cabdoorslideinfo_.Clear();
}
inline const ::transMsg::SJ_CabDoorSlideInfo& SJ_Table::sj_cabdoorslideinfo(int index) const {
  return sj_cabdoorslideinfo_.Get(index);
}
inline ::transMsg::SJ_CabDoorSlideInfo* SJ_Table::mutable_sj_cabdoorslideinfo(int index) {
  return sj_cabdoorslideinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabDoorSlideInfo* SJ_Table::add_sj_cabdoorslideinfo() {
  return sj_cabdoorslideinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorSlideInfo >&
SJ_Table::sj_cabdoorslideinfo() const {
  return sj_cabdoorslideinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorSlideInfo >*
SJ_Table::mutable_sj_cabdoorslideinfo() {
  return &sj_cabdoorslideinfo_;
}

// repeated .transMsg.SJ_CabDoorSystemInfo SJ_CabDoorSystemInfo = 12;
inline int SJ_Table::sj_cabdoorsysteminfo_size() const {
  return sj_cabdoorsysteminfo_.size();
}
inline void SJ_Table::clear_sj_cabdoorsysteminfo() {
  sj_cabdoorsysteminfo_.Clear();
}
inline const ::transMsg::SJ_CabDoorSystemInfo& SJ_Table::sj_cabdoorsysteminfo(int index) const {
  return sj_cabdoorsysteminfo_.Get(index);
}
inline ::transMsg::SJ_CabDoorSystemInfo* SJ_Table::mutable_sj_cabdoorsysteminfo(int index) {
  return sj_cabdoorsysteminfo_.Mutable(index);
}
inline ::transMsg::SJ_CabDoorSystemInfo* SJ_Table::add_sj_cabdoorsysteminfo() {
  return sj_cabdoorsysteminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorSystemInfo >&
SJ_Table::sj_cabdoorsysteminfo() const {
  return sj_cabdoorsysteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabDoorSystemInfo >*
SJ_Table::mutable_sj_cabdoorsysteminfo() {
  return &sj_cabdoorsysteminfo_;
}

// repeated .transMsg.SJ_CabFNFHWFInfo SJ_CabFNFHWFInfo = 13;
inline int SJ_Table::sj_cabfnfhwfinfo_size() const {
  return sj_cabfnfhwfinfo_.size();
}
inline void SJ_Table::clear_sj_cabfnfhwfinfo() {
  sj_cabfnfhwfinfo_.Clear();
}
inline const ::transMsg::SJ_CabFNFHWFInfo& SJ_Table::sj_cabfnfhwfinfo(int index) const {
  return sj_cabfnfhwfinfo_.Get(index);
}
inline ::transMsg::SJ_CabFNFHWFInfo* SJ_Table::mutable_sj_cabfnfhwfinfo(int index) {
  return sj_cabfnfhwfinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabFNFHWFInfo* SJ_Table::add_sj_cabfnfhwfinfo() {
  return sj_cabfnfhwfinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFHWFInfo >&
SJ_Table::sj_cabfnfhwfinfo() const {
  return sj_cabfnfhwfinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFHWFInfo >*
SJ_Table::mutable_sj_cabfnfhwfinfo() {
  return &sj_cabfnfhwfinfo_;
}

// repeated .transMsg.SJ_CabFNFHoleInfo SJ_CabFNFHoleInfo = 14;
inline int SJ_Table::sj_cabfnfholeinfo_size() const {
  return sj_cabfnfholeinfo_.size();
}
inline void SJ_Table::clear_sj_cabfnfholeinfo() {
  sj_cabfnfholeinfo_.Clear();
}
inline const ::transMsg::SJ_CabFNFHoleInfo& SJ_Table::sj_cabfnfholeinfo(int index) const {
  return sj_cabfnfholeinfo_.Get(index);
}
inline ::transMsg::SJ_CabFNFHoleInfo* SJ_Table::mutable_sj_cabfnfholeinfo(int index) {
  return sj_cabfnfholeinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabFNFHoleInfo* SJ_Table::add_sj_cabfnfholeinfo() {
  return sj_cabfnfholeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFHoleInfo >&
SJ_Table::sj_cabfnfholeinfo() const {
  return sj_cabfnfholeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFHoleInfo >*
SJ_Table::mutable_sj_cabfnfholeinfo() {
  return &sj_cabfnfholeinfo_;
}

// repeated .transMsg.SJ_CabFNFInfo SJ_CabFNFInfo = 15;
inline int SJ_Table::sj_cabfnfinfo_size() const {
  return sj_cabfnfinfo_.size();
}
inline void SJ_Table::clear_sj_cabfnfinfo() {
  sj_cabfnfinfo_.Clear();
}
inline const ::transMsg::SJ_CabFNFInfo& SJ_Table::sj_cabfnfinfo(int index) const {
  return sj_cabfnfinfo_.Get(index);
}
inline ::transMsg::SJ_CabFNFInfo* SJ_Table::mutable_sj_cabfnfinfo(int index) {
  return sj_cabfnfinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabFNFInfo* SJ_Table::add_sj_cabfnfinfo() {
  return sj_cabfnfinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFInfo >&
SJ_Table::sj_cabfnfinfo() const {
  return sj_cabfnfinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFInfo >*
SJ_Table::mutable_sj_cabfnfinfo() {
  return &sj_cabfnfinfo_;
}

// repeated .transMsg.SJ_CabFNFPartInfo SJ_CabFNFPartInfo = 16;
inline int SJ_Table::sj_cabfnfpartinfo_size() const {
  return sj_cabfnfpartinfo_.size();
}
inline void SJ_Table::clear_sj_cabfnfpartinfo() {
  sj_cabfnfpartinfo_.Clear();
}
inline const ::transMsg::SJ_CabFNFPartInfo& SJ_Table::sj_cabfnfpartinfo(int index) const {
  return sj_cabfnfpartinfo_.Get(index);
}
inline ::transMsg::SJ_CabFNFPartInfo* SJ_Table::mutable_sj_cabfnfpartinfo(int index) {
  return sj_cabfnfpartinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabFNFPartInfo* SJ_Table::add_sj_cabfnfpartinfo() {
  return sj_cabfnfpartinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFPartInfo >&
SJ_Table::sj_cabfnfpartinfo() const {
  return sj_cabfnfpartinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFPartInfo >*
SJ_Table::mutable_sj_cabfnfpartinfo() {
  return &sj_cabfnfpartinfo_;
}

// repeated .transMsg.SJ_CabFNFPartSealInfo SJ_CabFNFPartSealInfo = 17;
inline int SJ_Table::sj_cabfnfpartsealinfo_size() const {
  return sj_cabfnfpartsealinfo_.size();
}
inline void SJ_Table::clear_sj_cabfnfpartsealinfo() {
  sj_cabfnfpartsealinfo_.Clear();
}
inline const ::transMsg::SJ_CabFNFPartSealInfo& SJ_Table::sj_cabfnfpartsealinfo(int index) const {
  return sj_cabfnfpartsealinfo_.Get(index);
}
inline ::transMsg::SJ_CabFNFPartSealInfo* SJ_Table::mutable_sj_cabfnfpartsealinfo(int index) {
  return sj_cabfnfpartsealinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabFNFPartSealInfo* SJ_Table::add_sj_cabfnfpartsealinfo() {
  return sj_cabfnfpartsealinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFPartSealInfo >&
SJ_Table::sj_cabfnfpartsealinfo() const {
  return sj_cabfnfpartsealinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabFNFPartSealInfo >*
SJ_Table::mutable_sj_cabfnfpartsealinfo() {
  return &sj_cabfnfpartsealinfo_;
}

// repeated .transMsg.SJ_CabInfo SJ_CabInfo = 18;
inline int SJ_Table::sj_cabinfo_size() const {
  return sj_cabinfo_.size();
}
inline void SJ_Table::clear_sj_cabinfo() {
  sj_cabinfo_.Clear();
}
inline const ::transMsg::SJ_CabInfo& SJ_Table::sj_cabinfo(int index) const {
  return sj_cabinfo_.Get(index);
}
inline ::transMsg::SJ_CabInfo* SJ_Table::mutable_sj_cabinfo(int index) {
  return sj_cabinfo_.Mutable(index);
}
inline ::transMsg::SJ_CabInfo* SJ_Table::add_sj_cabinfo() {
  return sj_cabinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabInfo >&
SJ_Table::sj_cabinfo() const {
  return sj_cabinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_CabInfo >*
SJ_Table::mutable_sj_cabinfo() {
  return &sj_cabinfo_;
}

// repeated .transMsg.SJ_DecorBoardInfo SJ_DecorBoardInfo = 19;
inline int SJ_Table::sj_decorboardinfo_size() const {
  return sj_decorboardinfo_.size();
}
inline void SJ_Table::clear_sj_decorboardinfo() {
  sj_decorboardinfo_.Clear();
}
inline const ::transMsg::SJ_DecorBoardInfo& SJ_Table::sj_decorboardinfo(int index) const {
  return sj_decorboardinfo_.Get(index);
}
inline ::transMsg::SJ_DecorBoardInfo* SJ_Table::mutable_sj_decorboardinfo(int index) {
  return sj_decorboardinfo_.Mutable(index);
}
inline ::transMsg::SJ_DecorBoardInfo* SJ_Table::add_sj_decorboardinfo() {
  return sj_decorboardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardInfo >&
SJ_Table::sj_decorboardinfo() const {
  return sj_decorboardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardInfo >*
SJ_Table::mutable_sj_decorboardinfo() {
  return &sj_decorboardinfo_;
}

// repeated .transMsg.SJ_DecorBoardUnitInfo SJ_DecorBoardUnitInfo = 20;
inline int SJ_Table::sj_decorboardunitinfo_size() const {
  return sj_decorboardunitinfo_.size();
}
inline void SJ_Table::clear_sj_decorboardunitinfo() {
  sj_decorboardunitinfo_.Clear();
}
inline const ::transMsg::SJ_DecorBoardUnitInfo& SJ_Table::sj_decorboardunitinfo(int index) const {
  return sj_decorboardunitinfo_.Get(index);
}
inline ::transMsg::SJ_DecorBoardUnitInfo* SJ_Table::mutable_sj_decorboardunitinfo(int index) {
  return sj_decorboardunitinfo_.Mutable(index);
}
inline ::transMsg::SJ_DecorBoardUnitInfo* SJ_Table::add_sj_decorboardunitinfo() {
  return sj_decorboardunitinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardUnitInfo >&
SJ_Table::sj_decorboardunitinfo() const {
  return sj_decorboardunitinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardUnitInfo >*
SJ_Table::mutable_sj_decorboardunitinfo() {
  return &sj_decorboardunitinfo_;
}

// repeated .transMsg.SJ_DecorBoardUnitSealInfo SJ_DecorBoardUnitSealInfo = 21;
inline int SJ_Table::sj_decorboardunitsealinfo_size() const {
  return sj_decorboardunitsealinfo_.size();
}
inline void SJ_Table::clear_sj_decorboardunitsealinfo() {
  sj_decorboardunitsealinfo_.Clear();
}
inline const ::transMsg::SJ_DecorBoardUnitSealInfo& SJ_Table::sj_decorboardunitsealinfo(int index) const {
  return sj_decorboardunitsealinfo_.Get(index);
}
inline ::transMsg::SJ_DecorBoardUnitSealInfo* SJ_Table::mutable_sj_decorboardunitsealinfo(int index) {
  return sj_decorboardunitsealinfo_.Mutable(index);
}
inline ::transMsg::SJ_DecorBoardUnitSealInfo* SJ_Table::add_sj_decorboardunitsealinfo() {
  return sj_decorboardunitsealinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardUnitSealInfo >&
SJ_Table::sj_decorboardunitsealinfo() const {
  return sj_decorboardunitsealinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorBoardUnitSealInfo >*
SJ_Table::mutable_sj_decorboardunitsealinfo() {
  return &sj_decorboardunitsealinfo_;
}

// repeated .transMsg.SJ_DecorInfo SJ_DecorInfo = 22;
inline int SJ_Table::sj_decorinfo_size() const {
  return sj_decorinfo_.size();
}
inline void SJ_Table::clear_sj_decorinfo() {
  sj_decorinfo_.Clear();
}
inline const ::transMsg::SJ_DecorInfo& SJ_Table::sj_decorinfo(int index) const {
  return sj_decorinfo_.Get(index);
}
inline ::transMsg::SJ_DecorInfo* SJ_Table::mutable_sj_decorinfo(int index) {
  return sj_decorinfo_.Mutable(index);
}
inline ::transMsg::SJ_DecorInfo* SJ_Table::add_sj_decorinfo() {
  return sj_decorinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorInfo >&
SJ_Table::sj_decorinfo() const {
  return sj_decorinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorInfo >*
SJ_Table::mutable_sj_decorinfo() {
  return &sj_decorinfo_;
}

// repeated .transMsg.SJ_DecorLineInfo SJ_DecorLineInfo = 23;
inline int SJ_Table::sj_decorlineinfo_size() const {
  return sj_decorlineinfo_.size();
}
inline void SJ_Table::clear_sj_decorlineinfo() {
  sj_decorlineinfo_.Clear();
}
inline const ::transMsg::SJ_DecorLineInfo& SJ_Table::sj_decorlineinfo(int index) const {
  return sj_decorlineinfo_.Get(index);
}
inline ::transMsg::SJ_DecorLineInfo* SJ_Table::mutable_sj_decorlineinfo(int index) {
  return sj_decorlineinfo_.Mutable(index);
}
inline ::transMsg::SJ_DecorLineInfo* SJ_Table::add_sj_decorlineinfo() {
  return sj_decorlineinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorLineInfo >&
SJ_Table::sj_decorlineinfo() const {
  return sj_decorlineinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DecorLineInfo >*
SJ_Table::mutable_sj_decorlineinfo() {
  return &sj_decorlineinfo_;
}

// repeated .transMsg.SJ_DesignPlanInfo SJ_DesignPlanInfo = 24;
inline int SJ_Table::sj_designplaninfo_size() const {
  return sj_designplaninfo_.size();
}
inline void SJ_Table::clear_sj_designplaninfo() {
  sj_designplaninfo_.Clear();
}
inline const ::transMsg::SJ_DesignPlanInfo& SJ_Table::sj_designplaninfo(int index) const {
  return sj_designplaninfo_.Get(index);
}
inline ::transMsg::SJ_DesignPlanInfo* SJ_Table::mutable_sj_designplaninfo(int index) {
  return sj_designplaninfo_.Mutable(index);
}
inline ::transMsg::SJ_DesignPlanInfo* SJ_Table::add_sj_designplaninfo() {
  return sj_designplaninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DesignPlanInfo >&
SJ_Table::sj_designplaninfo() const {
  return sj_designplaninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_DesignPlanInfo >*
SJ_Table::mutable_sj_designplaninfo() {
  return &sj_designplaninfo_;
}

// repeated .transMsg.SJ_FittingInfo SJ_FittingInfo = 25;
inline int SJ_Table::sj_fittinginfo_size() const {
  return sj_fittinginfo_.size();
}
inline void SJ_Table::clear_sj_fittinginfo() {
  sj_fittinginfo_.Clear();
}
inline const ::transMsg::SJ_FittingInfo& SJ_Table::sj_fittinginfo(int index) const {
  return sj_fittinginfo_.Get(index);
}
inline ::transMsg::SJ_FittingInfo* SJ_Table::mutable_sj_fittinginfo(int index) {
  return sj_fittinginfo_.Mutable(index);
}
inline ::transMsg::SJ_FittingInfo* SJ_Table::add_sj_fittinginfo() {
  return sj_fittinginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_FittingInfo >&
SJ_Table::sj_fittinginfo() const {
  return sj_fittinginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_FittingInfo >*
SJ_Table::mutable_sj_fittinginfo() {
  return &sj_fittinginfo_;
}

// repeated .transMsg.SJ_HWFInfo SJ_HWFInfo = 26;
inline int SJ_Table::sj_hwfinfo_size() const {
  return sj_hwfinfo_.size();
}
inline void SJ_Table::clear_sj_hwfinfo() {
  sj_hwfinfo_.Clear();
}
inline const ::transMsg::SJ_HWFInfo& SJ_Table::sj_hwfinfo(int index) const {
  return sj_hwfinfo_.Get(index);
}
inline ::transMsg::SJ_HWFInfo* SJ_Table::mutable_sj_hwfinfo(int index) {
  return sj_hwfinfo_.Mutable(index);
}
inline ::transMsg::SJ_HWFInfo* SJ_Table::add_sj_hwfinfo() {
  return sj_hwfinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_HWFInfo >&
SJ_Table::sj_hwfinfo() const {
  return sj_hwfinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_HWFInfo >*
SJ_Table::mutable_sj_hwfinfo() {
  return &sj_hwfinfo_;
}

// repeated .transMsg.SJ_MarkInfo SJ_MarkInfo = 27;
inline int SJ_Table::sj_markinfo_size() const {
  return sj_markinfo_.size();
}
inline void SJ_Table::clear_sj_markinfo() {
  sj_markinfo_.Clear();
}
inline const ::transMsg::SJ_MarkInfo& SJ_Table::sj_markinfo(int index) const {
  return sj_markinfo_.Get(index);
}
inline ::transMsg::SJ_MarkInfo* SJ_Table::mutable_sj_markinfo(int index) {
  return sj_markinfo_.Mutable(index);
}
inline ::transMsg::SJ_MarkInfo* SJ_Table::add_sj_markinfo() {
  return sj_markinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_MarkInfo >&
SJ_Table::sj_markinfo() const {
  return sj_markinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_MarkInfo >*
SJ_Table::mutable_sj_markinfo() {
  return &sj_markinfo_;
}

// repeated .transMsg.SJ_MatrixInfo SJ_MatrixInfo = 28;
inline int SJ_Table::sj_matrixinfo_size() const {
  return sj_matrixinfo_.size();
}
inline void SJ_Table::clear_sj_matrixinfo() {
  sj_matrixinfo_.Clear();
}
inline const ::transMsg::SJ_MatrixInfo& SJ_Table::sj_matrixinfo(int index) const {
  return sj_matrixinfo_.Get(index);
}
inline ::transMsg::SJ_MatrixInfo* SJ_Table::mutable_sj_matrixinfo(int index) {
  return sj_matrixinfo_.Mutable(index);
}
inline ::transMsg::SJ_MatrixInfo* SJ_Table::add_sj_matrixinfo() {
  return sj_matrixinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_MatrixInfo >&
SJ_Table::sj_matrixinfo() const {
  return sj_matrixinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_MatrixInfo >*
SJ_Table::mutable_sj_matrixinfo() {
  return &sj_matrixinfo_;
}

// repeated .transMsg.SJ_OrderAddedInfo SJ_OrderAddedInfo = 29;
inline int SJ_Table::sj_orderaddedinfo_size() const {
  return sj_orderaddedinfo_.size();
}
inline void SJ_Table::clear_sj_orderaddedinfo() {
  sj_orderaddedinfo_.Clear();
}
inline const ::transMsg::SJ_OrderAddedInfo& SJ_Table::sj_orderaddedinfo(int index) const {
  return sj_orderaddedinfo_.Get(index);
}
inline ::transMsg::SJ_OrderAddedInfo* SJ_Table::mutable_sj_orderaddedinfo(int index) {
  return sj_orderaddedinfo_.Mutable(index);
}
inline ::transMsg::SJ_OrderAddedInfo* SJ_Table::add_sj_orderaddedinfo() {
  return sj_orderaddedinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_OrderAddedInfo >&
SJ_Table::sj_orderaddedinfo() const {
  return sj_orderaddedinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_OrderAddedInfo >*
SJ_Table::mutable_sj_orderaddedinfo() {
  return &sj_orderaddedinfo_;
}

// repeated .transMsg.SJ_OrderDataInfo SJ_OrderDataInfo = 30;
inline int SJ_Table::sj_orderdatainfo_size() const {
  return sj_orderdatainfo_.size();
}
inline void SJ_Table::clear_sj_orderdatainfo() {
  sj_orderdatainfo_.Clear();
}
inline const ::transMsg::SJ_OrderDataInfo& SJ_Table::sj_orderdatainfo(int index) const {
  return sj_orderdatainfo_.Get(index);
}
inline ::transMsg::SJ_OrderDataInfo* SJ_Table::mutable_sj_orderdatainfo(int index) {
  return sj_orderdatainfo_.Mutable(index);
}
inline ::transMsg::SJ_OrderDataInfo* SJ_Table::add_sj_orderdatainfo() {
  return sj_orderdatainfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_OrderDataInfo >&
SJ_Table::sj_orderdatainfo() const {
  return sj_orderdatainfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_OrderDataInfo >*
SJ_Table::mutable_sj_orderdatainfo() {
  return &sj_orderdatainfo_;
}

// repeated .transMsg.SJ_PackInfo SJ_PackInfo = 31;
inline int SJ_Table::sj_packinfo_size() const {
  return sj_packinfo_.size();
}
inline void SJ_Table::clear_sj_packinfo() {
  sj_packinfo_.Clear();
}
inline const ::transMsg::SJ_PackInfo& SJ_Table::sj_packinfo(int index) const {
  return sj_packinfo_.Get(index);
}
inline ::transMsg::SJ_PackInfo* SJ_Table::mutable_sj_packinfo(int index) {
  return sj_packinfo_.Mutable(index);
}
inline ::transMsg::SJ_PackInfo* SJ_Table::add_sj_packinfo() {
  return sj_packinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PackInfo >&
SJ_Table::sj_packinfo() const {
  return sj_packinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PackInfo >*
SJ_Table::mutable_sj_packinfo() {
  return &sj_packinfo_;
}

// repeated .transMsg.SJ_PointInfo SJ_PointInfo = 32;
inline int SJ_Table::sj_pointinfo_size() const {
  return sj_pointinfo_.size();
}
inline void SJ_Table::clear_sj_pointinfo() {
  sj_pointinfo_.Clear();
}
inline const ::transMsg::SJ_PointInfo& SJ_Table::sj_pointinfo(int index) const {
  return sj_pointinfo_.Get(index);
}
inline ::transMsg::SJ_PointInfo* SJ_Table::mutable_sj_pointinfo(int index) {
  return sj_pointinfo_.Mutable(index);
}
inline ::transMsg::SJ_PointInfo* SJ_Table::add_sj_pointinfo() {
  return sj_pointinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PointInfo >&
SJ_Table::sj_pointinfo() const {
  return sj_pointinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PointInfo >*
SJ_Table::mutable_sj_pointinfo() {
  return &sj_pointinfo_;
}

// repeated .transMsg.SJ_PrintElementInfo SJ_PrintElementInfo = 33;
inline int SJ_Table::sj_printelementinfo_size() const {
  return sj_printelementinfo_.size();
}
inline void SJ_Table::clear_sj_printelementinfo() {
  sj_printelementinfo_.Clear();
}
inline const ::transMsg::SJ_PrintElementInfo& SJ_Table::sj_printelementinfo(int index) const {
  return sj_printelementinfo_.Get(index);
}
inline ::transMsg::SJ_PrintElementInfo* SJ_Table::mutable_sj_printelementinfo(int index) {
  return sj_printelementinfo_.Mutable(index);
}
inline ::transMsg::SJ_PrintElementInfo* SJ_Table::add_sj_printelementinfo() {
  return sj_printelementinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintElementInfo >&
SJ_Table::sj_printelementinfo() const {
  return sj_printelementinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintElementInfo >*
SJ_Table::mutable_sj_printelementinfo() {
  return &sj_printelementinfo_;
}

// repeated .transMsg.SJ_PrintGroupInfo SJ_PrintGroupInfo = 34;
inline int SJ_Table::sj_printgroupinfo_size() const {
  return sj_printgroupinfo_.size();
}
inline void SJ_Table::clear_sj_printgroupinfo() {
  sj_printgroupinfo_.Clear();
}
inline const ::transMsg::SJ_PrintGroupInfo& SJ_Table::sj_printgroupinfo(int index) const {
  return sj_printgroupinfo_.Get(index);
}
inline ::transMsg::SJ_PrintGroupInfo* SJ_Table::mutable_sj_printgroupinfo(int index) {
  return sj_printgroupinfo_.Mutable(index);
}
inline ::transMsg::SJ_PrintGroupInfo* SJ_Table::add_sj_printgroupinfo() {
  return sj_printgroupinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintGroupInfo >&
SJ_Table::sj_printgroupinfo() const {
  return sj_printgroupinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintGroupInfo >*
SJ_Table::mutable_sj_printgroupinfo() {
  return &sj_printgroupinfo_;
}

// repeated .transMsg.SJ_PrintInfo SJ_PrintInfo = 35;
inline int SJ_Table::sj_printinfo_size() const {
  return sj_printinfo_.size();
}
inline void SJ_Table::clear_sj_printinfo() {
  sj_printinfo_.Clear();
}
inline const ::transMsg::SJ_PrintInfo& SJ_Table::sj_printinfo(int index) const {
  return sj_printinfo_.Get(index);
}
inline ::transMsg::SJ_PrintInfo* SJ_Table::mutable_sj_printinfo(int index) {
  return sj_printinfo_.Mutable(index);
}
inline ::transMsg::SJ_PrintInfo* SJ_Table::add_sj_printinfo() {
  return sj_printinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintInfo >&
SJ_Table::sj_printinfo() const {
  return sj_printinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintInfo >*
SJ_Table::mutable_sj_printinfo() {
  return &sj_printinfo_;
}

// repeated .transMsg.SJ_PrintTableInfo SJ_PrintTableInfo = 36;
inline int SJ_Table::sj_printtableinfo_size() const {
  return sj_printtableinfo_.size();
}
inline void SJ_Table::clear_sj_printtableinfo() {
  sj_printtableinfo_.Clear();
}
inline const ::transMsg::SJ_PrintTableInfo& SJ_Table::sj_printtableinfo(int index) const {
  return sj_printtableinfo_.Get(index);
}
inline ::transMsg::SJ_PrintTableInfo* SJ_Table::mutable_sj_printtableinfo(int index) {
  return sj_printtableinfo_.Mutable(index);
}
inline ::transMsg::SJ_PrintTableInfo* SJ_Table::add_sj_printtableinfo() {
  return sj_printtableinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableInfo >&
SJ_Table::sj_printtableinfo() const {
  return sj_printtableinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableInfo >*
SJ_Table::mutable_sj_printtableinfo() {
  return &sj_printtableinfo_;
}

// repeated .transMsg.SJ_PrintTableRowColInfo SJ_PrintTableRowColInfo = 37;
inline int SJ_Table::sj_printtablerowcolinfo_size() const {
  return sj_printtablerowcolinfo_.size();
}
inline void SJ_Table::clear_sj_printtablerowcolinfo() {
  sj_printtablerowcolinfo_.Clear();
}
inline const ::transMsg::SJ_PrintTableRowColInfo& SJ_Table::sj_printtablerowcolinfo(int index) const {
  return sj_printtablerowcolinfo_.Get(index);
}
inline ::transMsg::SJ_PrintTableRowColInfo* SJ_Table::mutable_sj_printtablerowcolinfo(int index) {
  return sj_printtablerowcolinfo_.Mutable(index);
}
inline ::transMsg::SJ_PrintTableRowColInfo* SJ_Table::add_sj_printtablerowcolinfo() {
  return sj_printtablerowcolinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableRowColInfo >&
SJ_Table::sj_printtablerowcolinfo() const {
  return sj_printtablerowcolinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableRowColInfo >*
SJ_Table::mutable_sj_printtablerowcolinfo() {
  return &sj_printtablerowcolinfo_;
}

// repeated .transMsg.SJ_PrintTableRowInfo SJ_PrintTableRowInfo = 38;
inline int SJ_Table::sj_printtablerowinfo_size() const {
  return sj_printtablerowinfo_.size();
}
inline void SJ_Table::clear_sj_printtablerowinfo() {
  sj_printtablerowinfo_.Clear();
}
inline const ::transMsg::SJ_PrintTableRowInfo& SJ_Table::sj_printtablerowinfo(int index) const {
  return sj_printtablerowinfo_.Get(index);
}
inline ::transMsg::SJ_PrintTableRowInfo* SJ_Table::mutable_sj_printtablerowinfo(int index) {
  return sj_printtablerowinfo_.Mutable(index);
}
inline ::transMsg::SJ_PrintTableRowInfo* SJ_Table::add_sj_printtablerowinfo() {
  return sj_printtablerowinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableRowInfo >&
SJ_Table::sj_printtablerowinfo() const {
  return sj_printtablerowinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_PrintTableRowInfo >*
SJ_Table::mutable_sj_printtablerowinfo() {
  return &sj_printtablerowinfo_;
}

// repeated .transMsg.SJ_ProductInfo SJ_ProductInfo = 39;
inline int SJ_Table::sj_productinfo_size() const {
  return sj_productinfo_.size();
}
inline void SJ_Table::clear_sj_productinfo() {
  sj_productinfo_.Clear();
}
inline const ::transMsg::SJ_ProductInfo& SJ_Table::sj_productinfo(int index) const {
  return sj_productinfo_.Get(index);
}
inline ::transMsg::SJ_ProductInfo* SJ_Table::mutable_sj_productinfo(int index) {
  return sj_productinfo_.Mutable(index);
}
inline ::transMsg::SJ_ProductInfo* SJ_Table::add_sj_productinfo() {
  return sj_productinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_ProductInfo >&
SJ_Table::sj_productinfo() const {
  return sj_productinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_ProductInfo >*
SJ_Table::mutable_sj_productinfo() {
  return &sj_productinfo_;
}

// repeated .transMsg.SJ_RemarkInfo SJ_RemarkInfo = 40;
inline int SJ_Table::sj_remarkinfo_size() const {
  return sj_remarkinfo_.size();
}
inline void SJ_Table::clear_sj_remarkinfo() {
  sj_remarkinfo_.Clear();
}
inline const ::transMsg::SJ_RemarkInfo& SJ_Table::sj_remarkinfo(int index) const {
  return sj_remarkinfo_.Get(index);
}
inline ::transMsg::SJ_RemarkInfo* SJ_Table::mutable_sj_remarkinfo(int index) {
  return sj_remarkinfo_.Mutable(index);
}
inline ::transMsg::SJ_RemarkInfo* SJ_Table::add_sj_remarkinfo() {
  return sj_remarkinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_RemarkInfo >&
SJ_Table::sj_remarkinfo() const {
  return sj_remarkinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_RemarkInfo >*
SJ_Table::mutable_sj_remarkinfo() {
  return &sj_remarkinfo_;
}

// repeated .transMsg.SJ_ShapeInfo SJ_ShapeInfo = 41;
inline int SJ_Table::sj_shapeinfo_size() const {
  return sj_shapeinfo_.size();
}
inline void SJ_Table::clear_sj_shapeinfo() {
  sj_shapeinfo_.Clear();
}
inline const ::transMsg::SJ_ShapeInfo& SJ_Table::sj_shapeinfo(int index) const {
  return sj_shapeinfo_.Get(index);
}
inline ::transMsg::SJ_ShapeInfo* SJ_Table::mutable_sj_shapeinfo(int index) {
  return sj_shapeinfo_.Mutable(index);
}
inline ::transMsg::SJ_ShapeInfo* SJ_Table::add_sj_shapeinfo() {
  return sj_shapeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_ShapeInfo >&
SJ_Table::sj_shapeinfo() const {
  return sj_shapeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_ShapeInfo >*
SJ_Table::mutable_sj_shapeinfo() {
  return &sj_shapeinfo_;
}

// repeated .transMsg.SJ_SkinInfo SJ_SkinInfo = 42;
inline int SJ_Table::sj_skininfo_size() const {
  return sj_skininfo_.size();
}
inline void SJ_Table::clear_sj_skininfo() {
  sj_skininfo_.Clear();
}
inline const ::transMsg::SJ_SkinInfo& SJ_Table::sj_skininfo(int index) const {
  return sj_skininfo_.Get(index);
}
inline ::transMsg::SJ_SkinInfo* SJ_Table::mutable_sj_skininfo(int index) {
  return sj_skininfo_.Mutable(index);
}
inline ::transMsg::SJ_SkinInfo* SJ_Table::add_sj_skininfo() {
  return sj_skininfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_SkinInfo >&
SJ_Table::sj_skininfo() const {
  return sj_skininfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_SkinInfo >*
SJ_Table::mutable_sj_skininfo() {
  return &sj_skininfo_;
}

// repeated .transMsg.SJ_TableInfo SJ_TableInfo = 43;
inline int SJ_Table::sj_tableinfo_size() const {
  return sj_tableinfo_.size();
}
inline void SJ_Table::clear_sj_tableinfo() {
  sj_tableinfo_.Clear();
}
inline const ::transMsg::SJ_TableInfo& SJ_Table::sj_tableinfo(int index) const {
  return sj_tableinfo_.Get(index);
}
inline ::transMsg::SJ_TableInfo* SJ_Table::mutable_sj_tableinfo(int index) {
  return sj_tableinfo_.Mutable(index);
}
inline ::transMsg::SJ_TableInfo* SJ_Table::add_sj_tableinfo() {
  return sj_tableinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TableInfo >&
SJ_Table::sj_tableinfo() const {
  return sj_tableinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TableInfo >*
SJ_Table::mutable_sj_tableinfo() {
  return &sj_tableinfo_;
}

// repeated .transMsg.SJ_TablePartInfo SJ_TablePartInfo = 44;
inline int SJ_Table::sj_tablepartinfo_size() const {
  return sj_tablepartinfo_.size();
}
inline void SJ_Table::clear_sj_tablepartinfo() {
  sj_tablepartinfo_.Clear();
}
inline const ::transMsg::SJ_TablePartInfo& SJ_Table::sj_tablepartinfo(int index) const {
  return sj_tablepartinfo_.Get(index);
}
inline ::transMsg::SJ_TablePartInfo* SJ_Table::mutable_sj_tablepartinfo(int index) {
  return sj_tablepartinfo_.Mutable(index);
}
inline ::transMsg::SJ_TablePartInfo* SJ_Table::add_sj_tablepartinfo() {
  return sj_tablepartinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TablePartInfo >&
SJ_Table::sj_tablepartinfo() const {
  return sj_tablepartinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TablePartInfo >*
SJ_Table::mutable_sj_tablepartinfo() {
  return &sj_tablepartinfo_;
}

// repeated .transMsg.SJ_TableSideInfo SJ_TableSideInfo = 45;
inline int SJ_Table::sj_tablesideinfo_size() const {
  return sj_tablesideinfo_.size();
}
inline void SJ_Table::clear_sj_tablesideinfo() {
  sj_tablesideinfo_.Clear();
}
inline const ::transMsg::SJ_TableSideInfo& SJ_Table::sj_tablesideinfo(int index) const {
  return sj_tablesideinfo_.Get(index);
}
inline ::transMsg::SJ_TableSideInfo* SJ_Table::mutable_sj_tablesideinfo(int index) {
  return sj_tablesideinfo_.Mutable(index);
}
inline ::transMsg::SJ_TableSideInfo* SJ_Table::add_sj_tablesideinfo() {
  return sj_tablesideinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TableSideInfo >&
SJ_Table::sj_tablesideinfo() const {
  return sj_tablesideinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_TableSideInfo >*
SJ_Table::mutable_sj_tablesideinfo() {
  return &sj_tablesideinfo_;
}

// repeated .transMsg.SJ_WallDecorInfo SJ_WallDecorInfo = 46;
inline int SJ_Table::sj_walldecorinfo_size() const {
  return sj_walldecorinfo_.size();
}
inline void SJ_Table::clear_sj_walldecorinfo() {
  sj_walldecorinfo_.Clear();
}
inline const ::transMsg::SJ_WallDecorInfo& SJ_Table::sj_walldecorinfo(int index) const {
  return sj_walldecorinfo_.Get(index);
}
inline ::transMsg::SJ_WallDecorInfo* SJ_Table::mutable_sj_walldecorinfo(int index) {
  return sj_walldecorinfo_.Mutable(index);
}
inline ::transMsg::SJ_WallDecorInfo* SJ_Table::add_sj_walldecorinfo() {
  return sj_walldecorinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_WallDecorInfo >&
SJ_Table::sj_walldecorinfo() const {
  return sj_walldecorinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_WallDecorInfo >*
SJ_Table::mutable_sj_walldecorinfo() {
  return &sj_walldecorinfo_;
}

// repeated .transMsg.SJ_WallInfo SJ_WallInfo = 47;
inline int SJ_Table::sj_wallinfo_size() const {
  return sj_wallinfo_.size();
}
inline void SJ_Table::clear_sj_wallinfo() {
  sj_wallinfo_.Clear();
}
inline const ::transMsg::SJ_WallInfo& SJ_Table::sj_wallinfo(int index) const {
  return sj_wallinfo_.Get(index);
}
inline ::transMsg::SJ_WallInfo* SJ_Table::mutable_sj_wallinfo(int index) {
  return sj_wallinfo_.Mutable(index);
}
inline ::transMsg::SJ_WallInfo* SJ_Table::add_sj_wallinfo() {
  return sj_wallinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_WallInfo >&
SJ_Table::sj_wallinfo() const {
  return sj_wallinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::SJ_WallInfo >*
SJ_Table::mutable_sj_wallinfo() {
  return &sj_wallinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2dSJ_2eproto__INCLUDED
