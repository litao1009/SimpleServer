// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DownloadRes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DownloadRes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

namespace {

const ::google::protobuf::Descriptor* QDownloadRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QDownloadRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADownloadRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADownloadRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DownloadRes_2eproto() {
  protobuf_AddDesc_DownloadRes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DownloadRes.proto");
  GOOGLE_CHECK(file != NULL);
  QDownloadRes_descriptor_ = file->message_type(0);
  static const int QDownloadRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadRes, filehashs_),
  };
  QDownloadRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QDownloadRes_descriptor_,
      QDownloadRes::default_instance_,
      QDownloadRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QDownloadRes));
  ADownloadRes_descriptor_ = file->message_type(1);
  static const int ADownloadRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADownloadRes, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADownloadRes, passedhashs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADownloadRes, rejectedhashs_),
  };
  ADownloadRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ADownloadRes_descriptor_,
      ADownloadRes::default_instance_,
      ADownloadRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADownloadRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADownloadRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ADownloadRes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DownloadRes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QDownloadRes_descriptor_, &QDownloadRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ADownloadRes_descriptor_, &ADownloadRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DownloadRes_2eproto() {
  delete QDownloadRes::default_instance_;
  delete QDownloadRes_reflection_;
  delete ADownloadRes::default_instance_;
  delete ADownloadRes_reflection_;
}

void protobuf_AddDesc_DownloadRes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::transMsg::protobuf_AddDesc_EReturnStatus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021DownloadRes.proto\022\010transMsg\032\023EReturnSt"
    "atus.proto\"!\n\014QDownloadRes\022\021\n\tFileHashs\030"
    "\001 \003(\014\"b\n\014ADownloadRes\022&\n\005Stats\030\001 \002(\0162\027.t"
    "ransMsg.EReturnStatus\022\023\n\013PassedHashs\030\002 \003"
    "(\014\022\025\n\rRejectedHashs\030\003 \003(\014", 185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DownloadRes.proto", &protobuf_RegisterTypes);
  QDownloadRes::default_instance_ = new QDownloadRes();
  ADownloadRes::default_instance_ = new ADownloadRes();
  QDownloadRes::default_instance_->InitAsDefaultInstance();
  ADownloadRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DownloadRes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DownloadRes_2eproto {
  StaticDescriptorInitializer_DownloadRes_2eproto() {
    protobuf_AddDesc_DownloadRes_2eproto();
  }
} static_descriptor_initializer_DownloadRes_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int QDownloadRes::kFileHashsFieldNumber;
#endif  // !_MSC_VER

QDownloadRes::QDownloadRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QDownloadRes::InitAsDefaultInstance() {
}

QDownloadRes::QDownloadRes(const QDownloadRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QDownloadRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QDownloadRes::~QDownloadRes() {
  SharedDtor();
}

void QDownloadRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QDownloadRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QDownloadRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QDownloadRes_descriptor_;
}

const QDownloadRes& QDownloadRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadRes_2eproto();
  return *default_instance_;
}

QDownloadRes* QDownloadRes::default_instance_ = NULL;

QDownloadRes* QDownloadRes::New() const {
  return new QDownloadRes;
}

void QDownloadRes::Clear() {
  filehashs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QDownloadRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes FileHashs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileHashs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_filehashs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_FileHashs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QDownloadRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes FileHashs = 1;
  for (int i = 0; i < this->filehashs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->filehashs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QDownloadRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes FileHashs = 1;
  for (int i = 0; i < this->filehashs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->filehashs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QDownloadRes::ByteSize() const {
  int total_size = 0;

  // repeated bytes FileHashs = 1;
  total_size += 1 * this->filehashs_size();
  for (int i = 0; i < this->filehashs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->filehashs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QDownloadRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QDownloadRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QDownloadRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QDownloadRes::MergeFrom(const QDownloadRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  filehashs_.MergeFrom(from.filehashs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QDownloadRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QDownloadRes::CopyFrom(const QDownloadRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QDownloadRes::IsInitialized() const {

  return true;
}

void QDownloadRes::Swap(QDownloadRes* other) {
  if (other != this) {
    filehashs_.Swap(&other->filehashs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QDownloadRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QDownloadRes_descriptor_;
  metadata.reflection = QDownloadRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ADownloadRes::kStatsFieldNumber;
const int ADownloadRes::kPassedHashsFieldNumber;
const int ADownloadRes::kRejectedHashsFieldNumber;
#endif  // !_MSC_VER

ADownloadRes::ADownloadRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ADownloadRes::InitAsDefaultInstance() {
}

ADownloadRes::ADownloadRes(const ADownloadRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ADownloadRes::SharedCtor() {
  _cached_size_ = 0;
  stats_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADownloadRes::~ADownloadRes() {
  SharedDtor();
}

void ADownloadRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ADownloadRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADownloadRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADownloadRes_descriptor_;
}

const ADownloadRes& ADownloadRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadRes_2eproto();
  return *default_instance_;
}

ADownloadRes* ADownloadRes::default_instance_ = NULL;

ADownloadRes* ADownloadRes::New() const {
  return new ADownloadRes;
}

void ADownloadRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stats_ = 0;
  }
  passedhashs_.Clear();
  rejectedhashs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ADownloadRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transMsg.EReturnStatus Stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transMsg::EReturnStatus_IsValid(value)) {
            set_stats(static_cast< ::transMsg::EReturnStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PassedHashs;
        break;
      }

      // repeated bytes PassedHashs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PassedHashs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_passedhashs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PassedHashs;
        if (input->ExpectTag(26)) goto parse_RejectedHashs;
        break;
      }

      // repeated bytes RejectedHashs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RejectedHashs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_rejectedhashs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RejectedHashs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ADownloadRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stats(), output);
  }

  // repeated bytes PassedHashs = 2;
  for (int i = 0; i < this->passedhashs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->passedhashs(i), output);
  }

  // repeated bytes RejectedHashs = 3;
  for (int i = 0; i < this->rejectedhashs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->rejectedhashs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ADownloadRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stats(), target);
  }

  // repeated bytes PassedHashs = 2;
  for (int i = 0; i < this->passedhashs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->passedhashs(i), target);
  }

  // repeated bytes RejectedHashs = 3;
  for (int i = 0; i < this->rejectedhashs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->rejectedhashs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ADownloadRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transMsg.EReturnStatus Stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stats());
    }

  }
  // repeated bytes PassedHashs = 2;
  total_size += 1 * this->passedhashs_size();
  for (int i = 0; i < this->passedhashs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->passedhashs(i));
  }

  // repeated bytes RejectedHashs = 3;
  total_size += 1 * this->rejectedhashs_size();
  for (int i = 0; i < this->rejectedhashs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->rejectedhashs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADownloadRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ADownloadRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ADownloadRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ADownloadRes::MergeFrom(const ADownloadRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  passedhashs_.MergeFrom(from.passedhashs_);
  rejectedhashs_.MergeFrom(from.rejectedhashs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      set_stats(from.stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ADownloadRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADownloadRes::CopyFrom(const ADownloadRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADownloadRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ADownloadRes::Swap(ADownloadRes* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    passedhashs_.Swap(&other->passedhashs_);
    rejectedhashs_.Swap(&other->rejectedhashs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ADownloadRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADownloadRes_descriptor_;
  metadata.reflection = ADownloadRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

// @@protoc_insertion_point(global_scope)
