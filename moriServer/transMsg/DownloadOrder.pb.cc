// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DownloadOrder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DownloadOrder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

namespace {

const ::google::protobuf::Descriptor* SDownloadOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SDownloadOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* QDownloadOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QDownloadOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADownloadOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADownloadOrder_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DownloadOrder_2eproto() {
  protobuf_AddDesc_DownloadOrder_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DownloadOrder.proto");
  GOOGLE_CHECK(file != NULL);
  SDownloadOrder_descriptor_ = file->message_type(0);
  static const int SDownloadOrder_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDownloadOrder, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDownloadOrder, ordertable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDownloadOrder, gl_orderinfo_),
  };
  SDownloadOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SDownloadOrder_descriptor_,
      SDownloadOrder::default_instance_,
      SDownloadOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDownloadOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDownloadOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SDownloadOrder));
  QDownloadOrder_descriptor_ = file->message_type(1);
  static const int QDownloadOrder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadOrder, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadOrder, orderid_),
  };
  QDownloadOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QDownloadOrder_descriptor_,
      QDownloadOrder::default_instance_,
      QDownloadOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QDownloadOrder));
  ADownloadOrder_descriptor_ = file->message_type(2);
  static const int ADownloadOrder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADownloadOrder, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADownloadOrder, downloadorder_),
  };
  ADownloadOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ADownloadOrder_descriptor_,
      ADownloadOrder::default_instance_,
      ADownloadOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADownloadOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADownloadOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ADownloadOrder));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DownloadOrder_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SDownloadOrder_descriptor_, &SDownloadOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QDownloadOrder_descriptor_, &QDownloadOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ADownloadOrder_descriptor_, &ADownloadOrder::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DownloadOrder_2eproto() {
  delete SDownloadOrder::default_instance_;
  delete SDownloadOrder_reflection_;
  delete QDownloadOrder::default_instance_;
  delete QDownloadOrder_reflection_;
  delete ADownloadOrder::default_instance_;
  delete ADownloadOrder_reflection_;
}

void protobuf_AddDesc_DownloadOrder_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::transMsg::protobuf_AddDesc_EReturnStatus_2eproto();
  ::transMsg::protobuf_AddDesc_ETableType_2eproto();
  ::transMsg::protobuf_AddDesc_msg_2dGL_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023DownloadOrder.proto\022\010transMsg\032\023EReturn"
    "Status.proto\032\020ETableType.proto\032\014msg-GL.p"
    "roto\"{\n\016SDownloadOrder\022\'\n\tTableType\030\001 \002("
    "\0162\024.transMsg.ETableType\022\022\n\nOrderTable\030e "
    "\002(\014\022,\n\014GL_OrderInfo\030f \002(\0132\026.transMsg.GL_"
    "OrderInfo\"J\n\016QDownloadOrder\022\'\n\tTableType"
    "\030\001 \002(\0162\024.transMsg.ETableType\022\017\n\007OrderID\030"
    "\002 \002(\003\"i\n\016ADownloadOrder\022&\n\005Stats\030\001 \002(\0162\027"
    ".transMsg.EReturnStatus\022/\n\rDownloadOrder"
    "\030e \001(\0132\030.transMsg.SDownloadOrder", 392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DownloadOrder.proto", &protobuf_RegisterTypes);
  SDownloadOrder::default_instance_ = new SDownloadOrder();
  QDownloadOrder::default_instance_ = new QDownloadOrder();
  ADownloadOrder::default_instance_ = new ADownloadOrder();
  SDownloadOrder::default_instance_->InitAsDefaultInstance();
  QDownloadOrder::default_instance_->InitAsDefaultInstance();
  ADownloadOrder::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DownloadOrder_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DownloadOrder_2eproto {
  StaticDescriptorInitializer_DownloadOrder_2eproto() {
    protobuf_AddDesc_DownloadOrder_2eproto();
  }
} static_descriptor_initializer_DownloadOrder_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SDownloadOrder::kTableTypeFieldNumber;
const int SDownloadOrder::kOrderTableFieldNumber;
const int SDownloadOrder::kGLOrderInfoFieldNumber;
#endif  // !_MSC_VER

SDownloadOrder::SDownloadOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SDownloadOrder::InitAsDefaultInstance() {
  gl_orderinfo_ = const_cast< ::transMsg::GL_OrderInfo*>(&::transMsg::GL_OrderInfo::default_instance());
}

SDownloadOrder::SDownloadOrder(const SDownloadOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SDownloadOrder::SharedCtor() {
  _cached_size_ = 0;
  tabletype_ = 1;
  ordertable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gl_orderinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SDownloadOrder::~SDownloadOrder() {
  SharedDtor();
}

void SDownloadOrder::SharedDtor() {
  if (ordertable_ != &::google::protobuf::internal::kEmptyString) {
    delete ordertable_;
  }
  if (this != default_instance_) {
    delete gl_orderinfo_;
  }
}

void SDownloadOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SDownloadOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SDownloadOrder_descriptor_;
}

const SDownloadOrder& SDownloadOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadOrder_2eproto();
  return *default_instance_;
}

SDownloadOrder* SDownloadOrder::default_instance_ = NULL;

SDownloadOrder* SDownloadOrder::New() const {
  return new SDownloadOrder;
}

void SDownloadOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tabletype_ = 1;
    if (has_ordertable()) {
      if (ordertable_ != &::google::protobuf::internal::kEmptyString) {
        ordertable_->clear();
      }
    }
    if (has_gl_orderinfo()) {
      if (gl_orderinfo_ != NULL) gl_orderinfo_->::transMsg::GL_OrderInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SDownloadOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transMsg.ETableType TableType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transMsg::ETableType_IsValid(value)) {
            set_tabletype(static_cast< ::transMsg::ETableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_OrderTable;
        break;
      }

      // required bytes OrderTable = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ordertable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_GL_OrderInfo;
        break;
      }

      // required .transMsg.GL_OrderInfo GL_OrderInfo = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_OrderInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gl_orderinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SDownloadOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transMsg.ETableType TableType = 1;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tabletype(), output);
  }

  // required bytes OrderTable = 101;
  if (has_ordertable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      101, this->ordertable(), output);
  }

  // required .transMsg.GL_OrderInfo GL_OrderInfo = 102;
  if (has_gl_orderinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->gl_orderinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SDownloadOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transMsg.ETableType TableType = 1;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tabletype(), target);
  }

  // required bytes OrderTable = 101;
  if (has_ordertable()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        101, this->ordertable(), target);
  }

  // required .transMsg.GL_OrderInfo GL_OrderInfo = 102;
  if (has_gl_orderinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->gl_orderinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SDownloadOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transMsg.ETableType TableType = 1;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tabletype());
    }

    // required bytes OrderTable = 101;
    if (has_ordertable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ordertable());
    }

    // required .transMsg.GL_OrderInfo GL_OrderInfo = 102;
    if (has_gl_orderinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gl_orderinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SDownloadOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SDownloadOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SDownloadOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SDownloadOrder::MergeFrom(const SDownloadOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_ordertable()) {
      set_ordertable(from.ordertable());
    }
    if (from.has_gl_orderinfo()) {
      mutable_gl_orderinfo()->::transMsg::GL_OrderInfo::MergeFrom(from.gl_orderinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SDownloadOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDownloadOrder::CopyFrom(const SDownloadOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDownloadOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SDownloadOrder::Swap(SDownloadOrder* other) {
  if (other != this) {
    std::swap(tabletype_, other->tabletype_);
    std::swap(ordertable_, other->ordertable_);
    std::swap(gl_orderinfo_, other->gl_orderinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SDownloadOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SDownloadOrder_descriptor_;
  metadata.reflection = SDownloadOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QDownloadOrder::kTableTypeFieldNumber;
const int QDownloadOrder::kOrderIDFieldNumber;
#endif  // !_MSC_VER

QDownloadOrder::QDownloadOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QDownloadOrder::InitAsDefaultInstance() {
}

QDownloadOrder::QDownloadOrder(const QDownloadOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QDownloadOrder::SharedCtor() {
  _cached_size_ = 0;
  tabletype_ = 1;
  orderid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QDownloadOrder::~QDownloadOrder() {
  SharedDtor();
}

void QDownloadOrder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QDownloadOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QDownloadOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QDownloadOrder_descriptor_;
}

const QDownloadOrder& QDownloadOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadOrder_2eproto();
  return *default_instance_;
}

QDownloadOrder* QDownloadOrder::default_instance_ = NULL;

QDownloadOrder* QDownloadOrder::New() const {
  return new QDownloadOrder;
}

void QDownloadOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tabletype_ = 1;
    orderid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QDownloadOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transMsg.ETableType TableType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transMsg::ETableType_IsValid(value)) {
            set_tabletype(static_cast< ::transMsg::ETableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QDownloadOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transMsg.ETableType TableType = 1;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tabletype(), output);
  }

  // required int64 OrderID = 2;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->orderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QDownloadOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transMsg.ETableType TableType = 1;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tabletype(), target);
  }

  // required int64 OrderID = 2;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->orderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QDownloadOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transMsg.ETableType TableType = 1;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tabletype());
    }

    // required int64 OrderID = 2;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QDownloadOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QDownloadOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QDownloadOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QDownloadOrder::MergeFrom(const QDownloadOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QDownloadOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QDownloadOrder::CopyFrom(const QDownloadOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QDownloadOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QDownloadOrder::Swap(QDownloadOrder* other) {
  if (other != this) {
    std::swap(tabletype_, other->tabletype_);
    std::swap(orderid_, other->orderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QDownloadOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QDownloadOrder_descriptor_;
  metadata.reflection = QDownloadOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ADownloadOrder::kStatsFieldNumber;
const int ADownloadOrder::kDownloadOrderFieldNumber;
#endif  // !_MSC_VER

ADownloadOrder::ADownloadOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ADownloadOrder::InitAsDefaultInstance() {
  downloadorder_ = const_cast< ::transMsg::SDownloadOrder*>(&::transMsg::SDownloadOrder::default_instance());
}

ADownloadOrder::ADownloadOrder(const ADownloadOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ADownloadOrder::SharedCtor() {
  _cached_size_ = 0;
  stats_ = 0;
  downloadorder_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADownloadOrder::~ADownloadOrder() {
  SharedDtor();
}

void ADownloadOrder::SharedDtor() {
  if (this != default_instance_) {
    delete downloadorder_;
  }
}

void ADownloadOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADownloadOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADownloadOrder_descriptor_;
}

const ADownloadOrder& ADownloadOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadOrder_2eproto();
  return *default_instance_;
}

ADownloadOrder* ADownloadOrder::default_instance_ = NULL;

ADownloadOrder* ADownloadOrder::New() const {
  return new ADownloadOrder;
}

void ADownloadOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stats_ = 0;
    if (has_downloadorder()) {
      if (downloadorder_ != NULL) downloadorder_->::transMsg::SDownloadOrder::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ADownloadOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transMsg.EReturnStatus Stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transMsg::EReturnStatus_IsValid(value)) {
            set_stats(static_cast< ::transMsg::EReturnStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_DownloadOrder;
        break;
      }

      // optional .transMsg.SDownloadOrder DownloadOrder = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DownloadOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_downloadorder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ADownloadOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stats(), output);
  }

  // optional .transMsg.SDownloadOrder DownloadOrder = 101;
  if (has_downloadorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->downloadorder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ADownloadOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stats(), target);
  }

  // optional .transMsg.SDownloadOrder DownloadOrder = 101;
  if (has_downloadorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->downloadorder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ADownloadOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transMsg.EReturnStatus Stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stats());
    }

    // optional .transMsg.SDownloadOrder DownloadOrder = 101;
    if (has_downloadorder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->downloadorder());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADownloadOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ADownloadOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ADownloadOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ADownloadOrder::MergeFrom(const ADownloadOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      set_stats(from.stats());
    }
    if (from.has_downloadorder()) {
      mutable_downloadorder()->::transMsg::SDownloadOrder::MergeFrom(from.downloadorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ADownloadOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADownloadOrder::CopyFrom(const ADownloadOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADownloadOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_downloadorder()) {
    if (!this->downloadorder().IsInitialized()) return false;
  }
  return true;
}

void ADownloadOrder::Swap(ADownloadOrder* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    std::swap(downloadorder_, other->downloadorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ADownloadOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADownloadOrder_descriptor_;
  metadata.reflection = ADownloadOrder_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

// @@protoc_insertion_point(global_scope)
