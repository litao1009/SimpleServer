// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EOrderState.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EOrderState.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace order {

namespace {

const ::google::protobuf::EnumDescriptor* EOrderState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_EOrderState_2eproto() {
  protobuf_AddDesc_EOrderState_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EOrderState.proto");
  GOOGLE_CHECK(file != NULL);
  EOrderState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EOrderState_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_EOrderState_2eproto() {
}

void protobuf_AddDesc_EOrderState_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021EOrderState.proto\022\005order*\212\006\n\013EOrderSta"
    "te\022\024\n\020EOS_LOCAL_UNSAVE\020\001\022\022\n\016EOS_LOCAL_SA"
    "VE\020\002\022\014\n\010EOS_SAVE\020\003\022\031\n\025EOS_SHOP_EXAMINE_W"
    "AIT\020\004\022\033\n\027EOS_SHOP_EXAMINE_DURING\020\005\022\031\n\025EO"
    "S_SHOP_EXAMINE_FAIL\020\006\022\031\n\025EOS_SHOP_EXAMIN"
    "E_DONE\020\007\022\034\n\030EOS_FACTORY_EXAMINE_WAIT\020\010\022$"
    "\n EOS_FACTORY_GRAPH_EXAMINE_DURING\020\t\022\"\n\036"
    "EOS_FACTORY_GRAPH_EXAMINE_DONE\020\n\022\"\n\036EOS_"
    "FACTORY_GRAPH_EXAMINE_FAIL\020\013\022\036\n\032EOS_FACT"
    "ORY_DECOMPOSE_WAIT\020\014\022 \n\034EOS_FACTORY_DECO"
    "MPOSE_DURING\020\r\022\036\n\032EOS_FACTORY_DECOMPOSE_"
    "FAIL\020\016\022!\n\035EOS_FACTORY_LIST_EXAMINE_WAIT\020"
    "\017\022#\n\037EOS_FACTORY_LIST_EXAMINE_DURING\020\020\022!"
    "\n\035EOS_FACTORY_LIST_EXAMINE_FAIL\020\021\022\017\n\013EOS"
    "_ZB_SAVE\020\025\022\026\n\022EOS_ZB_COMMIT_WAIT\020\026\022\034\n\030EO"
    "S_ZB_LIST_EXAMINE_WAIT\020\027\022\036\n\032EOS_ZB_LIST_"
    "EXAMINE_DURING\020\030\022\034\n\030EOS_ZB_LIST_EXAMINE_"
    "FAIL\020\031\022$\n EOS_FACTORY_FINANCE_EXAMINE_WA"
    "IT\020\035\022$\n EOS_FACTORY_FINANCE_EXAMINE_DONE"
    "\020\036\022\014\n\010EOS_DROP\020\037\022\016\n\nEOS_DELETE\020 \022\r\n\tEOS_"
    "COUNT\020!", 807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EOrderState.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EOrderState_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EOrderState_2eproto {
  StaticDescriptorInitializer_EOrderState_2eproto() {
    protobuf_AddDesc_EOrderState_2eproto();
  }
} static_descriptor_initializer_EOrderState_2eproto_;
const ::google::protobuf::EnumDescriptor* EOrderState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOrderState_descriptor_;
}
bool EOrderState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace order

// @@protoc_insertion_point(global_scope)
