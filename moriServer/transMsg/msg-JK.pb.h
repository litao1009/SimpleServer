// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg-JK.proto

#ifndef PROTOBUF_msg_2dJK_2eproto__INCLUDED
#define PROTOBUF_msg_2dJK_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_2dJK_2eproto();
void protobuf_AssignDesc_msg_2dJK_2eproto();
void protobuf_ShutdownFile_msg_2dJK_2eproto();

class JK_CabBoardMatInfo;
class JK_CabBoardMatSkinInfo;
class JK_CabDesignBoardSealEdgeInfo;
class JK_CabDesignBoardSealInfo;
class JK_CabDesignDoorRegionHandleInfo;
class JK_CabDesignDoorRegionInfo;
class JK_CabDesignDoorSystemInfo;
class JK_CabDesignFNFittingInfo;
class JK_CabDesignFNFittingMapInfo;
class JK_CabDesignFootInfo;
class JK_CabDesignInfo;
class JK_CabDesignMatInfo;
class JK_CabMatPlanInfo;
class JK_CabStructBoardGapInfo;
class JK_CabStructBoardInfo;
class JK_CabStructBoardSealInfo;
class JK_CabStructGapInfo;
class JK_CabStructInfo;
class JK_CabStructMatPlanMapInfo;
class JK_CabinetSizeBoardInfo;
class JK_CabinetSizeInfo;
class JK_CabinetSizeStructBoardInfo;
class JK_DecorBoardFrameMapInfo;
class JK_DecorBoardInfo;
class JK_DecorBoardMatInfo;
class JK_DecorBoardUnitInfo;
class JK_DecorBoardUnitMatInfo;
class JK_DecorBoardUnitSealInfo;
class JK_DecorInfo;
class JK_DecorLineInfo;
class JK_DecorLineMatInfo;
class JK_DecorUnitHWFittingMapInfo;
class JK_DoorBoardGapInfo;
class JK_DoorBoardInfo;
class JK_DoorBoardMatMapInfo;
class JK_DoorBoardSealInfo;
class JK_DoorInfo;
class JK_DoorMatMapInfo;
class JK_DoorMatPlanHandleMapInfo;
class JK_DoorMatPlanInfo;
class JK_DoorRegionHWFittingMapInfo;
class JK_DoorSystemInfo;
class JK_DoorSystemMatMapInfo;
class JK_DoorSystemRegionDoorMapInfo;
class JK_DoorSystemRegionInfo;
class JK_DoorSystemRegionSlideMapInfo;
class JK_DoorSystemRegionSlidePositionSizeInfo;
class JK_FNFittingInfo;
class JK_FNFittingMatInfo;
class JK_FNFittingPartInfo;
class JK_FNFittingPartMatInfo;
class JK_FNFittingPartSealInfo;
class JK_FittingInfo;
class JK_FittingRuleInfo;
class JK_FormulaConstInfo;
class JK_GroupInfo;
class JK_HWFittingInfo;
class JK_HoleRuleInfo;
class JK_MaterialInfo;
class JK_MaterialSealRuleMapInfo;
class JK_ModelInfo;
class JK_NumberRuleInfo;
class JK_PackageInfo;
class JK_PackageMapInfo;
class JK_ProductInfo;
class JK_ProductSeriesInfo;
class JK_ProductSeriesValidInfo;
class JK_ResourceInfo;
class JK_SealRuleInfo;
class JK_SysConfigInfo;
class JK_SysRuleConfigInfo;
class JK_SysRuleTypeInfo;
class JK_TableTopSideInfo;
class JK_Table;

// ===================================================================

class JK_CabBoardMatInfo : public ::google::protobuf::Message {
 public:
  JK_CabBoardMatInfo();
  virtual ~JK_CabBoardMatInfo();

  JK_CabBoardMatInfo(const JK_CabBoardMatInfo& from);

  inline JK_CabBoardMatInfo& operator=(const JK_CabBoardMatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabBoardMatInfo& default_instance();

  void Swap(JK_CabBoardMatInfo* other);

  // implements Message ----------------------------------------------

  JK_CabBoardMatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabBoardMatInfo& from);
  void MergeFrom(const JK_CabBoardMatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabMatPlanID = 1;
  inline bool has_cabmatplanid() const;
  inline void clear_cabmatplanid();
  static const int kCabMatPlanIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabmatplanid() const;
  inline void set_cabmatplanid(::google::protobuf::int32 value);

  // required int32 CabStructBoardID = 2;
  inline bool has_cabstructboardid() const;
  inline void clear_cabstructboardid();
  static const int kCabStructBoardIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabstructboardid() const;
  inline void set_cabstructboardid(::google::protobuf::int32 value);

  // required bool IsDefault = 3;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 3;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int32 MatID = 4;
  inline bool has_matid() const;
  inline void clear_matid();
  static const int kMatIDFieldNumber = 4;
  inline ::google::protobuf::int32 matid() const;
  inline void set_matid(::google::protobuf::int32 value);

  // required int32 MatGType = 5;
  inline bool has_matgtype() const;
  inline void clear_matgtype();
  static const int kMatGTypeFieldNumber = 5;
  inline ::google::protobuf::int32 matgtype() const;
  inline void set_matgtype(::google::protobuf::int32 value);

  // required int32 SealRuleID = 6;
  inline bool has_sealruleid() const;
  inline void clear_sealruleid();
  static const int kSealRuleIDFieldNumber = 6;
  inline ::google::protobuf::int32 sealruleid() const;
  inline void set_sealruleid(::google::protobuf::int32 value);

  // required int32 SkinDirection = 7;
  inline bool has_skindirection() const;
  inline void clear_skindirection();
  static const int kSkinDirectionFieldNumber = 7;
  inline ::google::protobuf::int32 skindirection() const;
  inline void set_skindirection(::google::protobuf::int32 value);

  // required int64 VerCode = 8;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 8;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 9;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 9;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required bool IsUseDefaultSkinDirection = 10;
  inline bool has_isusedefaultskindirection() const;
  inline void clear_isusedefaultskindirection();
  static const int kIsUseDefaultSkinDirectionFieldNumber = 10;
  inline bool isusedefaultskindirection() const;
  inline void set_isusedefaultskindirection(bool value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabBoardMatInfo)
 private:
  inline void set_has_cabmatplanid();
  inline void clear_has_cabmatplanid();
  inline void set_has_cabstructboardid();
  inline void clear_has_cabstructboardid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_matid();
  inline void clear_has_matid();
  inline void set_has_matgtype();
  inline void clear_has_matgtype();
  inline void set_has_sealruleid();
  inline void clear_has_sealruleid();
  inline void set_has_skindirection();
  inline void clear_has_skindirection();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_isusedefaultskindirection();
  inline void clear_has_isusedefaultskindirection();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabmatplanid_;
  ::google::protobuf::int32 cabstructboardid_;
  ::google::protobuf::int32 matid_;
  ::google::protobuf::int32 matgtype_;
  ::google::protobuf::int32 sealruleid_;
  bool isdefault_;
  bool isusedefaultskindirection_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 skindirection_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabBoardMatInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabBoardMatSkinInfo : public ::google::protobuf::Message {
 public:
  JK_CabBoardMatSkinInfo();
  virtual ~JK_CabBoardMatSkinInfo();

  JK_CabBoardMatSkinInfo(const JK_CabBoardMatSkinInfo& from);

  inline JK_CabBoardMatSkinInfo& operator=(const JK_CabBoardMatSkinInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabBoardMatSkinInfo& default_instance();

  void Swap(JK_CabBoardMatSkinInfo* other);

  // implements Message ----------------------------------------------

  JK_CabBoardMatSkinInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabBoardMatSkinInfo& from);
  void MergeFrom(const JK_CabBoardMatSkinInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabMatPlanID = 1;
  inline bool has_cabmatplanid() const;
  inline void clear_cabmatplanid();
  static const int kCabMatPlanIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabmatplanid() const;
  inline void set_cabmatplanid(::google::protobuf::int32 value);

  // required int32 CabStructBoardID = 2;
  inline bool has_cabstructboardid() const;
  inline void clear_cabstructboardid();
  static const int kCabStructBoardIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabstructboardid() const;
  inline void set_cabstructboardid(::google::protobuf::int32 value);

  // required int32 SkinDirection = 3;
  inline bool has_skindirection() const;
  inline void clear_skindirection();
  static const int kSkinDirectionFieldNumber = 3;
  inline ::google::protobuf::int32 skindirection() const;
  inline void set_skindirection(::google::protobuf::int32 value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required bool IsUseDefaultSkinDirection = 6;
  inline bool has_isusedefaultskindirection() const;
  inline void clear_isusedefaultskindirection();
  static const int kIsUseDefaultSkinDirectionFieldNumber = 6;
  inline bool isusedefaultskindirection() const;
  inline void set_isusedefaultskindirection(bool value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabBoardMatSkinInfo)
 private:
  inline void set_has_cabmatplanid();
  inline void clear_has_cabmatplanid();
  inline void set_has_cabstructboardid();
  inline void clear_has_cabstructboardid();
  inline void set_has_skindirection();
  inline void clear_has_skindirection();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_isusedefaultskindirection();
  inline void clear_has_isusedefaultskindirection();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabmatplanid_;
  ::google::protobuf::int32 cabstructboardid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 skindirection_;
  ::google::protobuf::int32 factoryid_;
  bool isusedefaultskindirection_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabBoardMatSkinInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabDesignBoardSealEdgeInfo : public ::google::protobuf::Message {
 public:
  JK_CabDesignBoardSealEdgeInfo();
  virtual ~JK_CabDesignBoardSealEdgeInfo();

  JK_CabDesignBoardSealEdgeInfo(const JK_CabDesignBoardSealEdgeInfo& from);

  inline JK_CabDesignBoardSealEdgeInfo& operator=(const JK_CabDesignBoardSealEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabDesignBoardSealEdgeInfo& default_instance();

  void Swap(JK_CabDesignBoardSealEdgeInfo* other);

  // implements Message ----------------------------------------------

  JK_CabDesignBoardSealEdgeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabDesignBoardSealEdgeInfo& from);
  void MergeFrom(const JK_CabDesignBoardSealEdgeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDesignBoardSealID = 1;
  inline bool has_cabdesignboardsealid() const;
  inline void clear_cabdesignboardsealid();
  static const int kCabDesignBoardSealIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdesignboardsealid() const;
  inline void set_cabdesignboardsealid(::google::protobuf::int32 value);

  // required int32 SealIndex = 2;
  inline bool has_sealindex() const;
  inline void clear_sealindex();
  static const int kSealIndexFieldNumber = 2;
  inline ::google::protobuf::int32 sealindex() const;
  inline void set_sealindex(::google::protobuf::int32 value);

  // required int32 SealMatID = 3;
  inline bool has_sealmatid() const;
  inline void clear_sealmatid();
  static const int kSealMatIDFieldNumber = 3;
  inline ::google::protobuf::int32 sealmatid() const;
  inline void set_sealmatid(::google::protobuf::int32 value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabDesignBoardSealEdgeInfo)
 private:
  inline void set_has_cabdesignboardsealid();
  inline void clear_has_cabdesignboardsealid();
  inline void set_has_sealindex();
  inline void clear_has_sealindex();
  inline void set_has_sealmatid();
  inline void clear_has_sealmatid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdesignboardsealid_;
  ::google::protobuf::int32 sealindex_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 sealmatid_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabDesignBoardSealEdgeInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabDesignBoardSealInfo : public ::google::protobuf::Message {
 public:
  JK_CabDesignBoardSealInfo();
  virtual ~JK_CabDesignBoardSealInfo();

  JK_CabDesignBoardSealInfo(const JK_CabDesignBoardSealInfo& from);

  inline JK_CabDesignBoardSealInfo& operator=(const JK_CabDesignBoardSealInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabDesignBoardSealInfo& default_instance();

  void Swap(JK_CabDesignBoardSealInfo* other);

  // implements Message ----------------------------------------------

  JK_CabDesignBoardSealInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabDesignBoardSealInfo& from);
  void MergeFrom(const JK_CabDesignBoardSealInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDesignBoardSealID = 1;
  inline bool has_cabdesignboardsealid() const;
  inline void clear_cabdesignboardsealid();
  static const int kCabDesignBoardSealIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdesignboardsealid() const;
  inline void set_cabdesignboardsealid(::google::protobuf::int32 value);

  // required int32 CabStructBoardID = 2;
  inline bool has_cabstructboardid() const;
  inline void clear_cabstructboardid();
  static const int kCabStructBoardIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabstructboardid() const;
  inline void set_cabstructboardid(::google::protobuf::int32 value);

  // required int32 CabStructID = 3;
  inline bool has_cabstructid() const;
  inline void clear_cabstructid();
  static const int kCabStructIDFieldNumber = 3;
  inline ::google::protobuf::int32 cabstructid() const;
  inline void set_cabstructid(::google::protobuf::int32 value);

  // required int32 CabDesignID = 4;
  inline bool has_cabdesignid() const;
  inline void clear_cabdesignid();
  static const int kCabDesignIDFieldNumber = 4;
  inline ::google::protobuf::int32 cabdesignid() const;
  inline void set_cabdesignid(::google::protobuf::int32 value);

  // required int32 MaterialID = 5;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 5;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required int64 VerCode = 6;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 6;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 7;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 7;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabDesignBoardSealInfo)
 private:
  inline void set_has_cabdesignboardsealid();
  inline void clear_has_cabdesignboardsealid();
  inline void set_has_cabstructboardid();
  inline void clear_has_cabstructboardid();
  inline void set_has_cabstructid();
  inline void clear_has_cabstructid();
  inline void set_has_cabdesignid();
  inline void clear_has_cabdesignid();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdesignboardsealid_;
  ::google::protobuf::int32 cabstructboardid_;
  ::google::protobuf::int32 cabstructid_;
  ::google::protobuf::int32 cabdesignid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 materialid_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabDesignBoardSealInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabDesignDoorRegionHandleInfo : public ::google::protobuf::Message {
 public:
  JK_CabDesignDoorRegionHandleInfo();
  virtual ~JK_CabDesignDoorRegionHandleInfo();

  JK_CabDesignDoorRegionHandleInfo(const JK_CabDesignDoorRegionHandleInfo& from);

  inline JK_CabDesignDoorRegionHandleInfo& operator=(const JK_CabDesignDoorRegionHandleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabDesignDoorRegionHandleInfo& default_instance();

  void Swap(JK_CabDesignDoorRegionHandleInfo* other);

  // implements Message ----------------------------------------------

  JK_CabDesignDoorRegionHandleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabDesignDoorRegionHandleInfo& from);
  void MergeFrom(const JK_CabDesignDoorRegionHandleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDesignDoorRegionHandleID = 1;
  inline bool has_cabdesigndoorregionhandleid() const;
  inline void clear_cabdesigndoorregionhandleid();
  static const int kCabDesignDoorRegionHandleIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdesigndoorregionhandleid() const;
  inline void set_cabdesigndoorregionhandleid(::google::protobuf::int32 value);

  // required int32 CabDesignDoorRegionID = 2;
  inline bool has_cabdesigndoorregionid() const;
  inline void clear_cabdesigndoorregionid();
  static const int kCabDesignDoorRegionIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabdesigndoorregionid() const;
  inline void set_cabdesigndoorregionid(::google::protobuf::int32 value);

  // required int32 XDock = 3;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 3;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 4;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 4;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 5;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 5;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required string XOffsetFormula = 6;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 6;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 7;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 7;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 8;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 8;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required int64 VerCode = 9;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 9;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 10;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 10;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required double ArcZ = 11;
  inline bool has_arcz() const;
  inline void clear_arcz();
  static const int kArcZFieldNumber = 11;
  inline double arcz() const;
  inline void set_arcz(double value);

  // required int32 HandleID = 12;
  inline bool has_handleid() const;
  inline void clear_handleid();
  static const int kHandleIDFieldNumber = 12;
  inline ::google::protobuf::int32 handleid() const;
  inline void set_handleid(::google::protobuf::int32 value);

  // required int32 MatchType = 13;
  inline bool has_matchtype() const;
  inline void clear_matchtype();
  static const int kMatchTypeFieldNumber = 13;
  inline ::google::protobuf::int32 matchtype() const;
  inline void set_matchtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabDesignDoorRegionHandleInfo)
 private:
  inline void set_has_cabdesigndoorregionhandleid();
  inline void clear_has_cabdesigndoorregionhandleid();
  inline void set_has_cabdesigndoorregionid();
  inline void clear_has_cabdesigndoorregionid();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_arcz();
  inline void clear_has_arcz();
  inline void set_has_handleid();
  inline void clear_has_handleid();
  inline void set_has_matchtype();
  inline void clear_has_matchtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdesigndoorregionhandleid_;
  ::google::protobuf::int32 cabdesigndoorregionid_;
  ::google::protobuf::int32 xdock_;
  ::google::protobuf::int32 ydock_;
  ::std::string* xoffsetformula_;
  ::std::string* yoffsetformula_;
  ::google::protobuf::int32 zdock_;
  ::google::protobuf::int32 factoryid_;
  ::std::string* zoffsetformula_;
  ::google::protobuf::int64 vercode_;
  double arcz_;
  ::google::protobuf::int32 handleid_;
  ::google::protobuf::int32 matchtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabDesignDoorRegionHandleInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabDesignDoorRegionInfo : public ::google::protobuf::Message {
 public:
  JK_CabDesignDoorRegionInfo();
  virtual ~JK_CabDesignDoorRegionInfo();

  JK_CabDesignDoorRegionInfo(const JK_CabDesignDoorRegionInfo& from);

  inline JK_CabDesignDoorRegionInfo& operator=(const JK_CabDesignDoorRegionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabDesignDoorRegionInfo& default_instance();

  void Swap(JK_CabDesignDoorRegionInfo* other);

  // implements Message ----------------------------------------------

  JK_CabDesignDoorRegionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabDesignDoorRegionInfo& from);
  void MergeFrom(const JK_CabDesignDoorRegionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDesignDoorRegionID = 1;
  inline bool has_cabdesigndoorregionid() const;
  inline void clear_cabdesigndoorregionid();
  static const int kCabDesignDoorRegionIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdesigndoorregionid() const;
  inline void set_cabdesigndoorregionid(::google::protobuf::int32 value);

  // required int32 CabDesignID = 2;
  inline bool has_cabdesignid() const;
  inline void clear_cabdesignid();
  static const int kCabDesignIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabdesignid() const;
  inline void set_cabdesignid(::google::protobuf::int32 value);

  // required bool IsDel = 3;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 3;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsGroup = 4;
  inline bool has_isgroup() const;
  inline void clear_isgroup();
  static const int kIsGroupFieldNumber = 4;
  inline bool isgroup() const;
  inline void set_isgroup(bool value);

  // required double XLen = 5;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 5;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 6;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 6;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required bool IsCanResize = 7;
  inline bool has_iscanresize() const;
  inline void clear_iscanresize();
  static const int kIsCanResizeFieldNumber = 7;
  inline bool iscanresize() const;
  inline void set_iscanresize(bool value);

  // required double MinXLen = 8;
  inline bool has_minxlen() const;
  inline void clear_minxlen();
  static const int kMinXLenFieldNumber = 8;
  inline double minxlen() const;
  inline void set_minxlen(double value);

  // required double MaxXLen = 9;
  inline bool has_maxxlen() const;
  inline void clear_maxxlen();
  static const int kMaxXLenFieldNumber = 9;
  inline double maxxlen() const;
  inline void set_maxxlen(double value);

  // required double XLenStep = 10;
  inline bool has_xlenstep() const;
  inline void clear_xlenstep();
  static const int kXLenStepFieldNumber = 10;
  inline double xlenstep() const;
  inline void set_xlenstep(double value);

  // required double MinYLen = 11;
  inline bool has_minylen() const;
  inline void clear_minylen();
  static const int kMinYLenFieldNumber = 11;
  inline double minylen() const;
  inline void set_minylen(double value);

  // required double MaxYLen = 12;
  inline bool has_maxylen() const;
  inline void clear_maxylen();
  static const int kMaxYLenFieldNumber = 12;
  inline double maxylen() const;
  inline void set_maxylen(double value);

  // required double YLenStep = 13;
  inline bool has_ylenstep() const;
  inline void clear_ylenstep();
  static const int kYLenStepFieldNumber = 13;
  inline double ylenstep() const;
  inline void set_ylenstep(double value);

  // required int32 DefaultMatID = 14;
  inline bool has_defaultmatid() const;
  inline void clear_defaultmatid();
  static const int kDefaultMatIDFieldNumber = 14;
  inline ::google::protobuf::int32 defaultmatid() const;
  inline void set_defaultmatid(::google::protobuf::int32 value);

  // required int32 DefaultModelID = 15;
  inline bool has_defaultmodelid() const;
  inline void clear_defaultmodelid();
  static const int kDefaultModelIDFieldNumber = 15;
  inline ::google::protobuf::int32 defaultmodelid() const;
  inline void set_defaultmodelid(::google::protobuf::int32 value);

  // required int64 VerCode = 16;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 16;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 17;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 17;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 DefaultDoorID = 18;
  inline bool has_defaultdoorid() const;
  inline void clear_defaultdoorid();
  static const int kDefaultDoorIDFieldNumber = 18;
  inline ::google::protobuf::int32 defaultdoorid() const;
  inline void set_defaultdoorid(::google::protobuf::int32 value);

  // required int32 CabDesignDoorSystemID = 19;
  inline bool has_cabdesigndoorsystemid() const;
  inline void clear_cabdesigndoorsystemid();
  static const int kCabDesignDoorSystemIDFieldNumber = 19;
  inline ::google::protobuf::int32 cabdesigndoorsystemid() const;
  inline void set_cabdesigndoorsystemid(::google::protobuf::int32 value);

  // required int32 DoorSystemID = 20;
  inline bool has_doorsystemid() const;
  inline void clear_doorsystemid();
  static const int kDoorSystemIDFieldNumber = 20;
  inline ::google::protobuf::int32 doorsystemid() const;
  inline void set_doorsystemid(::google::protobuf::int32 value);

  // required bool IsUseDefaultSize = 21;
  inline bool has_isusedefaultsize() const;
  inline void clear_isusedefaultsize();
  static const int kIsUseDefaultSizeFieldNumber = 21;
  inline bool isusedefaultsize() const;
  inline void set_isusedefaultsize(bool value);

  // required bool IsUseCutFormula = 22;
  inline bool has_isusecutformula() const;
  inline void clear_isusecutformula();
  static const int kIsUseCutFormulaFieldNumber = 22;
  inline bool isusecutformula() const;
  inline void set_isusecutformula(bool value);

  // required int32 DoorRegionID = 23;
  inline bool has_doorregionid() const;
  inline void clear_doorregionid();
  static const int kDoorRegionIDFieldNumber = 23;
  inline ::google::protobuf::int32 doorregionid() const;
  inline void set_doorregionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabDesignDoorRegionInfo)
 private:
  inline void set_has_cabdesigndoorregionid();
  inline void clear_has_cabdesigndoorregionid();
  inline void set_has_cabdesignid();
  inline void clear_has_cabdesignid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isgroup();
  inline void clear_has_isgroup();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_iscanresize();
  inline void clear_has_iscanresize();
  inline void set_has_minxlen();
  inline void clear_has_minxlen();
  inline void set_has_maxxlen();
  inline void clear_has_maxxlen();
  inline void set_has_xlenstep();
  inline void clear_has_xlenstep();
  inline void set_has_minylen();
  inline void clear_has_minylen();
  inline void set_has_maxylen();
  inline void clear_has_maxylen();
  inline void set_has_ylenstep();
  inline void clear_has_ylenstep();
  inline void set_has_defaultmatid();
  inline void clear_has_defaultmatid();
  inline void set_has_defaultmodelid();
  inline void clear_has_defaultmodelid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_defaultdoorid();
  inline void clear_has_defaultdoorid();
  inline void set_has_cabdesigndoorsystemid();
  inline void clear_has_cabdesigndoorsystemid();
  inline void set_has_doorsystemid();
  inline void clear_has_doorsystemid();
  inline void set_has_isusedefaultsize();
  inline void clear_has_isusedefaultsize();
  inline void set_has_isusecutformula();
  inline void clear_has_isusecutformula();
  inline void set_has_doorregionid();
  inline void clear_has_doorregionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdesigndoorregionid_;
  ::google::protobuf::int32 cabdesignid_;
  double xlen_;
  double ylen_;
  double minxlen_;
  double maxxlen_;
  bool isdel_;
  bool isgroup_;
  bool iscanresize_;
  bool isusedefaultsize_;
  ::google::protobuf::int32 defaultmatid_;
  double xlenstep_;
  double minylen_;
  double maxylen_;
  double ylenstep_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 defaultmodelid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 defaultdoorid_;
  ::google::protobuf::int32 cabdesigndoorsystemid_;
  ::google::protobuf::int32 doorsystemid_;
  bool isusecutformula_;
  ::google::protobuf::int32 doorregionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabDesignDoorRegionInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabDesignDoorSystemInfo : public ::google::protobuf::Message {
 public:
  JK_CabDesignDoorSystemInfo();
  virtual ~JK_CabDesignDoorSystemInfo();

  JK_CabDesignDoorSystemInfo(const JK_CabDesignDoorSystemInfo& from);

  inline JK_CabDesignDoorSystemInfo& operator=(const JK_CabDesignDoorSystemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabDesignDoorSystemInfo& default_instance();

  void Swap(JK_CabDesignDoorSystemInfo* other);

  // implements Message ----------------------------------------------

  JK_CabDesignDoorSystemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabDesignDoorSystemInfo& from);
  void MergeFrom(const JK_CabDesignDoorSystemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDesignDoorSystemID = 1;
  inline bool has_cabdesigndoorsystemid() const;
  inline void clear_cabdesigndoorsystemid();
  static const int kCabDesignDoorSystemIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdesigndoorsystemid() const;
  inline void set_cabdesigndoorsystemid(::google::protobuf::int32 value);

  // required int32 CabDesignID = 2;
  inline bool has_cabdesignid() const;
  inline void clear_cabdesignid();
  static const int kCabDesignIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabdesignid() const;
  inline void set_cabdesignid(::google::protobuf::int32 value);

  // required bool IsDel = 3;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 3;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 DoorSystemID = 6;
  inline bool has_doorsystemid() const;
  inline void clear_doorsystemid();
  static const int kDoorSystemIDFieldNumber = 6;
  inline ::google::protobuf::int32 doorsystemid() const;
  inline void set_doorsystemid(::google::protobuf::int32 value);

  // required int32 InstallFaceType = 7;
  inline bool has_installfacetype() const;
  inline void clear_installfacetype();
  static const int kInstallFaceTypeFieldNumber = 7;
  inline ::google::protobuf::int32 installfacetype() const;
  inline void set_installfacetype(::google::protobuf::int32 value);

  // required double XAdjustLen = 8;
  inline bool has_xadjustlen() const;
  inline void clear_xadjustlen();
  static const int kXAdjustLenFieldNumber = 8;
  inline double xadjustlen() const;
  inline void set_xadjustlen(double value);

  // required double YAdjustLen = 9;
  inline bool has_yadjustlen() const;
  inline void clear_yadjustlen();
  static const int kYAdjustLenFieldNumber = 9;
  inline double yadjustlen() const;
  inline void set_yadjustlen(double value);

  // required int32 XDock = 10;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 10;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 11;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 11;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 12;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 12;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required string XOffsetFormula = 13;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 13;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 14;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 14;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 15;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 15;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required int32 CreatorID = 16;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 16;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 17;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 17;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 18;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 18;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 19;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 19;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required bool IsCanDel = 20;
  inline bool has_iscandel() const;
  inline void clear_iscandel();
  static const int kIsCanDelFieldNumber = 20;
  inline bool iscandel() const;
  inline void set_iscandel(bool value);

  // required string XFormula = 21;
  inline bool has_xformula() const;
  inline void clear_xformula();
  static const int kXFormulaFieldNumber = 21;
  inline const ::std::string& xformula() const;
  inline void set_xformula(const ::std::string& value);
  inline void set_xformula(const char* value);
  inline void set_xformula(const char* value, size_t size);
  inline ::std::string* mutable_xformula();
  inline ::std::string* release_xformula();
  inline void set_allocated_xformula(::std::string* xformula);

  // required string YFormula = 22;
  inline bool has_yformula() const;
  inline void clear_yformula();
  static const int kYFormulaFieldNumber = 22;
  inline const ::std::string& yformula() const;
  inline void set_yformula(const ::std::string& value);
  inline void set_yformula(const char* value);
  inline void set_yformula(const char* value, size_t size);
  inline ::std::string* mutable_yformula();
  inline ::std::string* release_yformula();
  inline void set_allocated_yformula(::std::string* yformula);

  // required double ZLen = 23;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 23;
  inline double zlen() const;
  inline void set_zlen(double value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabDesignDoorSystemInfo)
 private:
  inline void set_has_cabdesigndoorsystemid();
  inline void clear_has_cabdesigndoorsystemid();
  inline void set_has_cabdesignid();
  inline void clear_has_cabdesignid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_doorsystemid();
  inline void clear_has_doorsystemid();
  inline void set_has_installfacetype();
  inline void clear_has_installfacetype();
  inline void set_has_xadjustlen();
  inline void clear_has_xadjustlen();
  inline void set_has_yadjustlen();
  inline void clear_has_yadjustlen();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_iscandel();
  inline void clear_has_iscandel();
  inline void set_has_xformula();
  inline void clear_has_xformula();
  inline void set_has_yformula();
  inline void clear_has_yformula();
  inline void set_has_zlen();
  inline void clear_has_zlen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdesigndoorsystemid_;
  ::google::protobuf::int32 cabdesignid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 doorsystemid_;
  double xadjustlen_;
  ::google::protobuf::int32 installfacetype_;
  ::google::protobuf::int32 xdock_;
  double yadjustlen_;
  ::google::protobuf::int32 ydock_;
  bool isdel_;
  bool iscandel_;
  ::std::string* xoffsetformula_;
  ::std::string* yoffsetformula_;
  ::google::protobuf::int32 zdock_;
  ::google::protobuf::int32 creatorid_;
  ::std::string* zoffsetformula_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* xformula_;
  ::std::string* yformula_;
  double zlen_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabDesignDoorSystemInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabDesignFNFittingInfo : public ::google::protobuf::Message {
 public:
  JK_CabDesignFNFittingInfo();
  virtual ~JK_CabDesignFNFittingInfo();

  JK_CabDesignFNFittingInfo(const JK_CabDesignFNFittingInfo& from);

  inline JK_CabDesignFNFittingInfo& operator=(const JK_CabDesignFNFittingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabDesignFNFittingInfo& default_instance();

  void Swap(JK_CabDesignFNFittingInfo* other);

  // implements Message ----------------------------------------------

  JK_CabDesignFNFittingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabDesignFNFittingInfo& from);
  void MergeFrom(const JK_CabDesignFNFittingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDesignFNFittingID = 1;
  inline bool has_cabdesignfnfittingid() const;
  inline void clear_cabdesignfnfittingid();
  static const int kCabDesignFNFittingIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdesignfnfittingid() const;
  inline void set_cabdesignfnfittingid(::google::protobuf::int32 value);

  // required int32 ContainerID = 2;
  inline bool has_containerid() const;
  inline void clear_containerid();
  static const int kContainerIDFieldNumber = 2;
  inline ::google::protobuf::int32 containerid() const;
  inline void set_containerid(::google::protobuf::int32 value);

  // required int32 ContainerGTypeID = 3;
  inline bool has_containergtypeid() const;
  inline void clear_containergtypeid();
  static const int kContainerGTypeIDFieldNumber = 3;
  inline ::google::protobuf::int32 containergtypeid() const;
  inline void set_containergtypeid(::google::protobuf::int32 value);

  // required bool IsCanDel = 4;
  inline bool has_iscandel() const;
  inline void clear_iscandel();
  static const int kIsCanDelFieldNumber = 4;
  inline bool iscandel() const;
  inline void set_iscandel(bool value);

  // required string XFormula = 5;
  inline bool has_xformula() const;
  inline void clear_xformula();
  static const int kXFormulaFieldNumber = 5;
  inline const ::std::string& xformula() const;
  inline void set_xformula(const ::std::string& value);
  inline void set_xformula(const char* value);
  inline void set_xformula(const char* value, size_t size);
  inline ::std::string* mutable_xformula();
  inline ::std::string* release_xformula();
  inline void set_allocated_xformula(::std::string* xformula);

  // required string YFormula = 6;
  inline bool has_yformula() const;
  inline void clear_yformula();
  static const int kYFormulaFieldNumber = 6;
  inline const ::std::string& yformula() const;
  inline void set_yformula(const ::std::string& value);
  inline void set_yformula(const char* value);
  inline void set_yformula(const char* value, size_t size);
  inline ::std::string* mutable_yformula();
  inline ::std::string* release_yformula();
  inline void set_allocated_yformula(::std::string* yformula);

  // required string ZFormula = 7;
  inline bool has_zformula() const;
  inline void clear_zformula();
  static const int kZFormulaFieldNumber = 7;
  inline const ::std::string& zformula() const;
  inline void set_zformula(const ::std::string& value);
  inline void set_zformula(const char* value);
  inline void set_zformula(const char* value, size_t size);
  inline ::std::string* mutable_zformula();
  inline ::std::string* release_zformula();
  inline void set_allocated_zformula(::std::string* zformula);

  // required int32 XDock = 8;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 8;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 9;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 9;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 10;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 10;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required string XOffsetFormula = 11;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 11;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 12;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 12;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 13;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 13;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required int64 VerCode = 14;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 14;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 15;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 15;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required bool IsDel = 16;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 16;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 CreatorID = 17;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 17;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 18;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 18;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 19;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 19;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 20;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 20;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabDesignFNFittingInfo)
 private:
  inline void set_has_cabdesignfnfittingid();
  inline void clear_has_cabdesignfnfittingid();
  inline void set_has_containerid();
  inline void clear_has_containerid();
  inline void set_has_containergtypeid();
  inline void clear_has_containergtypeid();
  inline void set_has_iscandel();
  inline void clear_has_iscandel();
  inline void set_has_xformula();
  inline void clear_has_xformula();
  inline void set_has_yformula();
  inline void clear_has_yformula();
  inline void set_has_zformula();
  inline void clear_has_zformula();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdesignfnfittingid_;
  ::google::protobuf::int32 containerid_;
  ::std::string* xformula_;
  ::google::protobuf::int32 containergtypeid_;
  ::google::protobuf::int32 xdock_;
  ::std::string* yformula_;
  ::std::string* zformula_;
  ::google::protobuf::int32 ydock_;
  ::google::protobuf::int32 zdock_;
  ::std::string* xoffsetformula_;
  bool iscandel_;
  bool isdel_;
  ::google::protobuf::int32 factoryid_;
  ::std::string* yoffsetformula_;
  ::std::string* zoffsetformula_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabDesignFNFittingInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabDesignFNFittingMapInfo : public ::google::protobuf::Message {
 public:
  JK_CabDesignFNFittingMapInfo();
  virtual ~JK_CabDesignFNFittingMapInfo();

  JK_CabDesignFNFittingMapInfo(const JK_CabDesignFNFittingMapInfo& from);

  inline JK_CabDesignFNFittingMapInfo& operator=(const JK_CabDesignFNFittingMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabDesignFNFittingMapInfo& default_instance();

  void Swap(JK_CabDesignFNFittingMapInfo* other);

  // implements Message ----------------------------------------------

  JK_CabDesignFNFittingMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabDesignFNFittingMapInfo& from);
  void MergeFrom(const JK_CabDesignFNFittingMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FNFittingID = 1;
  inline bool has_fnfittingid() const;
  inline void clear_fnfittingid();
  static const int kFNFittingIDFieldNumber = 1;
  inline ::google::protobuf::int32 fnfittingid() const;
  inline void set_fnfittingid(::google::protobuf::int32 value);

  // required int32 CabDesignFNFittingID = 2;
  inline bool has_cabdesignfnfittingid() const;
  inline void clear_cabdesignfnfittingid();
  static const int kCabDesignFNFittingIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabdesignfnfittingid() const;
  inline void set_cabdesignfnfittingid(::google::protobuf::int32 value);

  // required bool IsDefault = 3;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 3;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int32 FNType = 4;
  inline bool has_fntype() const;
  inline void clear_fntype();
  static const int kFNTypeFieldNumber = 4;
  inline ::google::protobuf::int32 fntype() const;
  inline void set_fntype(::google::protobuf::int32 value);

  // required int64 VerCode = 5;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 5;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabDesignFNFittingMapInfo)
 private:
  inline void set_has_fnfittingid();
  inline void clear_has_fnfittingid();
  inline void set_has_cabdesignfnfittingid();
  inline void clear_has_cabdesignfnfittingid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_fntype();
  inline void clear_has_fntype();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fnfittingid_;
  ::google::protobuf::int32 cabdesignfnfittingid_;
  bool isdefault_;
  ::google::protobuf::int32 fntype_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabDesignFNFittingMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabDesignFootInfo : public ::google::protobuf::Message {
 public:
  JK_CabDesignFootInfo();
  virtual ~JK_CabDesignFootInfo();

  JK_CabDesignFootInfo(const JK_CabDesignFootInfo& from);

  inline JK_CabDesignFootInfo& operator=(const JK_CabDesignFootInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabDesignFootInfo& default_instance();

  void Swap(JK_CabDesignFootInfo* other);

  // implements Message ----------------------------------------------

  JK_CabDesignFootInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabDesignFootInfo& from);
  void MergeFrom(const JK_CabDesignFootInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDesignID = 1;
  inline bool has_cabdesignid() const;
  inline void clear_cabdesignid();
  static const int kCabDesignIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdesignid() const;
  inline void set_cabdesignid(::google::protobuf::int32 value);

  // required int32 FootID = 2;
  inline bool has_footid() const;
  inline void clear_footid();
  static const int kFootIDFieldNumber = 2;
  inline ::google::protobuf::int32 footid() const;
  inline void set_footid(::google::protobuf::int32 value);

  // required bool IsDefault = 3;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 3;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabDesignFootInfo)
 private:
  inline void set_has_cabdesignid();
  inline void clear_has_cabdesignid();
  inline void set_has_footid();
  inline void clear_has_footid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdesignid_;
  ::google::protobuf::int32 footid_;
  ::google::protobuf::int64 vercode_;
  bool isdefault_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabDesignFootInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabDesignInfo : public ::google::protobuf::Message {
 public:
  JK_CabDesignInfo();
  virtual ~JK_CabDesignInfo();

  JK_CabDesignInfo(const JK_CabDesignInfo& from);

  inline JK_CabDesignInfo& operator=(const JK_CabDesignInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabDesignInfo& default_instance();

  void Swap(JK_CabDesignInfo* other);

  // implements Message ----------------------------------------------

  JK_CabDesignInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabDesignInfo& from);
  void MergeFrom(const JK_CabDesignInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDesignID = 1;
  inline bool has_cabdesignid() const;
  inline void clear_cabdesignid();
  static const int kCabDesignIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdesignid() const;
  inline void set_cabdesignid(::google::protobuf::int32 value);

  // required bool IsDel = 2;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 2;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 GroupID = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 3;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required int32 CabFunction = 4;
  inline bool has_cabfunction() const;
  inline void clear_cabfunction();
  static const int kCabFunctionFieldNumber = 4;
  inline ::google::protobuf::int32 cabfunction() const;
  inline void set_cabfunction(::google::protobuf::int32 value);

  // required int32 CabStructID = 5;
  inline bool has_cabstructid() const;
  inline void clear_cabstructid();
  static const int kCabStructIDFieldNumber = 5;
  inline ::google::protobuf::int32 cabstructid() const;
  inline void set_cabstructid(::google::protobuf::int32 value);

  // required int32 PosType = 6;
  inline bool has_postype() const;
  inline void clear_postype();
  static const int kPosTypeFieldNumber = 6;
  inline ::google::protobuf::int32 postype() const;
  inline void set_postype(::google::protobuf::int32 value);

  // required int32 FactoryID = 7;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 7;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 8;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 8;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 9;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 9;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 10;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 10;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 11;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 11;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string CabDesignCode = 12;
  inline bool has_cabdesigncode() const;
  inline void clear_cabdesigncode();
  static const int kCabDesignCodeFieldNumber = 12;
  inline const ::std::string& cabdesigncode() const;
  inline void set_cabdesigncode(const ::std::string& value);
  inline void set_cabdesigncode(const char* value);
  inline void set_cabdesigncode(const char* value, size_t size);
  inline ::std::string* mutable_cabdesigncode();
  inline ::std::string* release_cabdesigncode();
  inline void set_allocated_cabdesigncode(::std::string* cabdesigncode);

  // required string CabDesignName = 13;
  inline bool has_cabdesignname() const;
  inline void clear_cabdesignname();
  static const int kCabDesignNameFieldNumber = 13;
  inline const ::std::string& cabdesignname() const;
  inline void set_cabdesignname(const ::std::string& value);
  inline void set_cabdesignname(const char* value);
  inline void set_cabdesignname(const char* value, size_t size);
  inline ::std::string* mutable_cabdesignname();
  inline ::std::string* release_cabdesignname();
  inline void set_allocated_cabdesignname(::std::string* cabdesignname);

  // required string CabDesignMemo = 14;
  inline bool has_cabdesignmemo() const;
  inline void clear_cabdesignmemo();
  static const int kCabDesignMemoFieldNumber = 14;
  inline const ::std::string& cabdesignmemo() const;
  inline void set_cabdesignmemo(const ::std::string& value);
  inline void set_cabdesignmemo(const char* value);
  inline void set_cabdesignmemo(const char* value, size_t size);
  inline ::std::string* mutable_cabdesignmemo();
  inline ::std::string* release_cabdesignmemo();
  inline void set_allocated_cabdesignmemo(::std::string* cabdesignmemo);

  // required int64 VerCode = 15;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 15;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 PhotoID = 16;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 16;
  inline ::google::protobuf::int32 photoid() const;
  inline void set_photoid(::google::protobuf::int32 value);

  // required bool IsActive = 17;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 17;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabDesignInfo)
 private:
  inline void set_has_cabdesignid();
  inline void clear_has_cabdesignid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_cabfunction();
  inline void clear_has_cabfunction();
  inline void set_has_cabstructid();
  inline void clear_has_cabstructid();
  inline void set_has_postype();
  inline void clear_has_postype();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_cabdesigncode();
  inline void clear_has_cabdesigncode();
  inline void set_has_cabdesignname();
  inline void clear_has_cabdesignname();
  inline void set_has_cabdesignmemo();
  inline void clear_has_cabdesignmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_photoid();
  inline void clear_has_photoid();
  inline void set_has_isactive();
  inline void clear_has_isactive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdesignid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 cabfunction_;
  ::google::protobuf::int32 cabstructid_;
  ::google::protobuf::int32 postype_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  bool isdel_;
  bool isactive_;
  ::google::protobuf::int32 photoid_;
  ::std::string* cabdesigncode_;
  ::std::string* cabdesignname_;
  ::std::string* cabdesignmemo_;
  ::google::protobuf::int64 vercode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabDesignInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabDesignMatInfo : public ::google::protobuf::Message {
 public:
  JK_CabDesignMatInfo();
  virtual ~JK_CabDesignMatInfo();

  JK_CabDesignMatInfo(const JK_CabDesignMatInfo& from);

  inline JK_CabDesignMatInfo& operator=(const JK_CabDesignMatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabDesignMatInfo& default_instance();

  void Swap(JK_CabDesignMatInfo* other);

  // implements Message ----------------------------------------------

  JK_CabDesignMatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabDesignMatInfo& from);
  void MergeFrom(const JK_CabDesignMatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDesignID = 1;
  inline bool has_cabdesignid() const;
  inline void clear_cabdesignid();
  static const int kCabDesignIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdesignid() const;
  inline void set_cabdesignid(::google::protobuf::int32 value);

  // required int32 CabMatPlanID = 2;
  inline bool has_cabmatplanid() const;
  inline void clear_cabmatplanid();
  static const int kCabMatPlanIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabmatplanid() const;
  inline void set_cabmatplanid(::google::protobuf::int32 value);

  // required bool IsDefault = 3;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 3;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabDesignMatInfo)
 private:
  inline void set_has_cabdesignid();
  inline void clear_has_cabdesignid();
  inline void set_has_cabmatplanid();
  inline void clear_has_cabmatplanid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdesignid_;
  ::google::protobuf::int32 cabmatplanid_;
  ::google::protobuf::int64 vercode_;
  bool isdefault_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabDesignMatInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabMatPlanInfo : public ::google::protobuf::Message {
 public:
  JK_CabMatPlanInfo();
  virtual ~JK_CabMatPlanInfo();

  JK_CabMatPlanInfo(const JK_CabMatPlanInfo& from);

  inline JK_CabMatPlanInfo& operator=(const JK_CabMatPlanInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabMatPlanInfo& default_instance();

  void Swap(JK_CabMatPlanInfo* other);

  // implements Message ----------------------------------------------

  JK_CabMatPlanInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabMatPlanInfo& from);
  void MergeFrom(const JK_CabMatPlanInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabMatPlanID = 1;
  inline bool has_cabmatplanid() const;
  inline void clear_cabmatplanid();
  static const int kCabMatPlanIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabmatplanid() const;
  inline void set_cabmatplanid(::google::protobuf::int32 value);

  // required int32 GroupID = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required bool IsDel = 3;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 3;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 FactoryID = 4;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 4;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 MatGType = 5;
  inline bool has_matgtype() const;
  inline void clear_matgtype();
  static const int kMatGTypeFieldNumber = 5;
  inline ::google::protobuf::int32 matgtype() const;
  inline void set_matgtype(::google::protobuf::int32 value);

  // required int32 MatID = 6;
  inline bool has_matid() const;
  inline void clear_matid();
  static const int kMatIDFieldNumber = 6;
  inline ::google::protobuf::int32 matid() const;
  inline void set_matid(::google::protobuf::int32 value);

  // required int32 CreatorID = 7;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 7;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 8;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 8;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 9;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 9;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 10;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 10;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string CabMatPlanCode = 11;
  inline bool has_cabmatplancode() const;
  inline void clear_cabmatplancode();
  static const int kCabMatPlanCodeFieldNumber = 11;
  inline const ::std::string& cabmatplancode() const;
  inline void set_cabmatplancode(const ::std::string& value);
  inline void set_cabmatplancode(const char* value);
  inline void set_cabmatplancode(const char* value, size_t size);
  inline ::std::string* mutable_cabmatplancode();
  inline ::std::string* release_cabmatplancode();
  inline void set_allocated_cabmatplancode(::std::string* cabmatplancode);

  // required string CabMatPlanName = 12;
  inline bool has_cabmatplanname() const;
  inline void clear_cabmatplanname();
  static const int kCabMatPlanNameFieldNumber = 12;
  inline const ::std::string& cabmatplanname() const;
  inline void set_cabmatplanname(const ::std::string& value);
  inline void set_cabmatplanname(const char* value);
  inline void set_cabmatplanname(const char* value, size_t size);
  inline ::std::string* mutable_cabmatplanname();
  inline ::std::string* release_cabmatplanname();
  inline void set_allocated_cabmatplanname(::std::string* cabmatplanname);

  // required string CabMatPlanMemo = 13;
  inline bool has_cabmatplanmemo() const;
  inline void clear_cabmatplanmemo();
  static const int kCabMatPlanMemoFieldNumber = 13;
  inline const ::std::string& cabmatplanmemo() const;
  inline void set_cabmatplanmemo(const ::std::string& value);
  inline void set_cabmatplanmemo(const char* value);
  inline void set_cabmatplanmemo(const char* value, size_t size);
  inline ::std::string* mutable_cabmatplanmemo();
  inline ::std::string* release_cabmatplanmemo();
  inline void set_allocated_cabmatplanmemo(::std::string* cabmatplanmemo);

  // required int64 VerCode = 14;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 14;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabMatPlanInfo)
 private:
  inline void set_has_cabmatplanid();
  inline void clear_has_cabmatplanid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_matgtype();
  inline void clear_has_matgtype();
  inline void set_has_matid();
  inline void clear_has_matid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_cabmatplancode();
  inline void clear_has_cabmatplancode();
  inline void set_has_cabmatplanname();
  inline void clear_has_cabmatplanname();
  inline void set_has_cabmatplanmemo();
  inline void clear_has_cabmatplanmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabmatplanid_;
  ::google::protobuf::int32 groupid_;
  bool isdel_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 matgtype_;
  ::google::protobuf::int32 matid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* cabmatplancode_;
  ::std::string* cabmatplanname_;
  ::std::string* cabmatplanmemo_;
  ::google::protobuf::int64 vercode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabMatPlanInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabStructBoardGapInfo : public ::google::protobuf::Message {
 public:
  JK_CabStructBoardGapInfo();
  virtual ~JK_CabStructBoardGapInfo();

  JK_CabStructBoardGapInfo(const JK_CabStructBoardGapInfo& from);

  inline JK_CabStructBoardGapInfo& operator=(const JK_CabStructBoardGapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabStructBoardGapInfo& default_instance();

  void Swap(JK_CabStructBoardGapInfo* other);

  // implements Message ----------------------------------------------

  JK_CabStructBoardGapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabStructBoardGapInfo& from);
  void MergeFrom(const JK_CabStructBoardGapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabStructBoardGapID = 1;
  inline bool has_cabstructboardgapid() const;
  inline void clear_cabstructboardgapid();
  static const int kCabStructBoardGapIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabstructboardgapid() const;
  inline void set_cabstructboardgapid(::google::protobuf::int32 value);

  // required int32 CabStructBoardID = 2;
  inline bool has_cabstructboardid() const;
  inline void clear_cabstructboardid();
  static const int kCabStructBoardIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabstructboardid() const;
  inline void set_cabstructboardid(::google::protobuf::int32 value);

  // required int32 GapPos = 3;
  inline bool has_gappos() const;
  inline void clear_gappos();
  static const int kGapPosFieldNumber = 3;
  inline ::google::protobuf::int32 gappos() const;
  inline void set_gappos(::google::protobuf::int32 value);

  // required int32 GapIndex = 4;
  inline bool has_gapindex() const;
  inline void clear_gapindex();
  static const int kGapIndexFieldNumber = 4;
  inline ::google::protobuf::int32 gapindex() const;
  inline void set_gapindex(::google::protobuf::int32 value);

  // required int32 GapType = 5;
  inline bool has_gaptype() const;
  inline void clear_gaptype();
  static const int kGapTypeFieldNumber = 5;
  inline ::google::protobuf::int32 gaptype() const;
  inline void set_gaptype(::google::protobuf::int32 value);

  // required int32 GapShape = 6;
  inline bool has_gapshape() const;
  inline void clear_gapshape();
  static const int kGapShapeFieldNumber = 6;
  inline ::google::protobuf::int32 gapshape() const;
  inline void set_gapshape(::google::protobuf::int32 value);

  // required string XLenFormula = 7;
  inline bool has_xlenformula() const;
  inline void clear_xlenformula();
  static const int kXLenFormulaFieldNumber = 7;
  inline const ::std::string& xlenformula() const;
  inline void set_xlenformula(const ::std::string& value);
  inline void set_xlenformula(const char* value);
  inline void set_xlenformula(const char* value, size_t size);
  inline ::std::string* mutable_xlenformula();
  inline ::std::string* release_xlenformula();
  inline void set_allocated_xlenformula(::std::string* xlenformula);

  // required string YLenFormula = 8;
  inline bool has_ylenformula() const;
  inline void clear_ylenformula();
  static const int kYLenFormulaFieldNumber = 8;
  inline const ::std::string& ylenformula() const;
  inline void set_ylenformula(const ::std::string& value);
  inline void set_ylenformula(const char* value);
  inline void set_ylenformula(const char* value, size_t size);
  inline ::std::string* mutable_ylenformula();
  inline ::std::string* release_ylenformula();
  inline void set_allocated_ylenformula(::std::string* ylenformula);

  // required string XOffsetFormula = 9;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 9;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 10;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 10;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 11;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 11;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required int32 FactoryID = 12;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 12;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 13;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 13;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 14;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 14;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 15;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 15;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 16;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 16;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required int64 VerCode = 17;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 17;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabStructBoardGapInfo)
 private:
  inline void set_has_cabstructboardgapid();
  inline void clear_has_cabstructboardgapid();
  inline void set_has_cabstructboardid();
  inline void clear_has_cabstructboardid();
  inline void set_has_gappos();
  inline void clear_has_gappos();
  inline void set_has_gapindex();
  inline void clear_has_gapindex();
  inline void set_has_gaptype();
  inline void clear_has_gaptype();
  inline void set_has_gapshape();
  inline void clear_has_gapshape();
  inline void set_has_xlenformula();
  inline void clear_has_xlenformula();
  inline void set_has_ylenformula();
  inline void clear_has_ylenformula();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabstructboardgapid_;
  ::google::protobuf::int32 cabstructboardid_;
  ::google::protobuf::int32 gappos_;
  ::google::protobuf::int32 gapindex_;
  ::google::protobuf::int32 gaptype_;
  ::google::protobuf::int32 gapshape_;
  ::std::string* xlenformula_;
  ::std::string* ylenformula_;
  ::std::string* xoffsetformula_;
  ::std::string* yoffsetformula_;
  ::std::string* zoffsetformula_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabStructBoardGapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabStructBoardInfo : public ::google::protobuf::Message {
 public:
  JK_CabStructBoardInfo();
  virtual ~JK_CabStructBoardInfo();

  JK_CabStructBoardInfo(const JK_CabStructBoardInfo& from);

  inline JK_CabStructBoardInfo& operator=(const JK_CabStructBoardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabStructBoardInfo& default_instance();

  void Swap(JK_CabStructBoardInfo* other);

  // implements Message ----------------------------------------------

  JK_CabStructBoardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabStructBoardInfo& from);
  void MergeFrom(const JK_CabStructBoardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabStructBoardID = 1;
  inline bool has_cabstructboardid() const;
  inline void clear_cabstructboardid();
  static const int kCabStructBoardIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabstructboardid() const;
  inline void set_cabstructboardid(::google::protobuf::int32 value);

  // required int32 CabStructID = 2;
  inline bool has_cabstructid() const;
  inline void clear_cabstructid();
  static const int kCabStructIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabstructid() const;
  inline void set_cabstructid(::google::protobuf::int32 value);

  // required bool IsDel = 3;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 3;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsUseMain = 4;
  inline bool has_isusemain() const;
  inline void clear_isusemain();
  static const int kIsUseMainFieldNumber = 4;
  inline bool isusemain() const;
  inline void set_isusemain(bool value);

  // required bool IsCanRepeat = 5;
  inline bool has_iscanrepeat() const;
  inline void clear_iscanrepeat();
  static const int kIsCanRepeatFieldNumber = 5;
  inline bool iscanrepeat() const;
  inline void set_iscanrepeat(bool value);

  // required bool IsCanDel = 6;
  inline bool has_iscandel() const;
  inline void clear_iscandel();
  static const int kIsCanDelFieldNumber = 6;
  inline bool iscandel() const;
  inline void set_iscandel(bool value);

  // required string XFormula = 7;
  inline bool has_xformula() const;
  inline void clear_xformula();
  static const int kXFormulaFieldNumber = 7;
  inline const ::std::string& xformula() const;
  inline void set_xformula(const ::std::string& value);
  inline void set_xformula(const char* value);
  inline void set_xformula(const char* value, size_t size);
  inline ::std::string* mutable_xformula();
  inline ::std::string* release_xformula();
  inline void set_allocated_xformula(::std::string* xformula);

  // required string YFormula = 8;
  inline bool has_yformula() const;
  inline void clear_yformula();
  static const int kYFormulaFieldNumber = 8;
  inline const ::std::string& yformula() const;
  inline void set_yformula(const ::std::string& value);
  inline void set_yformula(const char* value);
  inline void set_yformula(const char* value, size_t size);
  inline ::std::string* mutable_yformula();
  inline ::std::string* release_yformula();
  inline void set_allocated_yformula(::std::string* yformula);

  // required double ArcX = 9;
  inline bool has_arcx() const;
  inline void clear_arcx();
  static const int kArcXFieldNumber = 9;
  inline double arcx() const;
  inline void set_arcx(double value);

  // required double ArcY = 10;
  inline bool has_arcy() const;
  inline void clear_arcy();
  static const int kArcYFieldNumber = 10;
  inline double arcy() const;
  inline void set_arcy(double value);

  // required double ArcZ = 11;
  inline bool has_arcz() const;
  inline void clear_arcz();
  static const int kArcZFieldNumber = 11;
  inline double arcz() const;
  inline void set_arcz(double value);

  // required int32 XDock = 12;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 12;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 13;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 13;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 14;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 14;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required string XOffsetFormula = 15;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 15;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 16;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 16;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 17;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 17;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required int32 FactoryID = 18;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 18;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 19;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 19;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 20;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 20;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 21;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 21;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 22;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 22;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string CabStructBoardName = 23;
  inline bool has_cabstructboardname() const;
  inline void clear_cabstructboardname();
  static const int kCabStructBoardNameFieldNumber = 23;
  inline const ::std::string& cabstructboardname() const;
  inline void set_cabstructboardname(const ::std::string& value);
  inline void set_cabstructboardname(const char* value);
  inline void set_cabstructboardname(const char* value, size_t size);
  inline ::std::string* mutable_cabstructboardname();
  inline ::std::string* release_cabstructboardname();
  inline void set_allocated_cabstructboardname(::std::string* cabstructboardname);

  // required int32 DefaultSkinDirection = 24;
  inline bool has_defaultskindirection() const;
  inline void clear_defaultskindirection();
  static const int kDefaultSkinDirectionFieldNumber = 24;
  inline ::google::protobuf::int32 defaultskindirection() const;
  inline void set_defaultskindirection(::google::protobuf::int32 value);

  // required int64 VerCode = 25;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 25;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabStructBoardInfo)
 private:
  inline void set_has_cabstructboardid();
  inline void clear_has_cabstructboardid();
  inline void set_has_cabstructid();
  inline void clear_has_cabstructid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isusemain();
  inline void clear_has_isusemain();
  inline void set_has_iscanrepeat();
  inline void clear_has_iscanrepeat();
  inline void set_has_iscandel();
  inline void clear_has_iscandel();
  inline void set_has_xformula();
  inline void clear_has_xformula();
  inline void set_has_yformula();
  inline void clear_has_yformula();
  inline void set_has_arcx();
  inline void clear_has_arcx();
  inline void set_has_arcy();
  inline void clear_has_arcy();
  inline void set_has_arcz();
  inline void clear_has_arcz();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_cabstructboardname();
  inline void clear_has_cabstructboardname();
  inline void set_has_defaultskindirection();
  inline void clear_has_defaultskindirection();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabstructboardid_;
  ::google::protobuf::int32 cabstructid_;
  bool isdel_;
  bool isusemain_;
  bool iscanrepeat_;
  bool iscandel_;
  ::google::protobuf::int32 xdock_;
  ::std::string* xformula_;
  ::std::string* yformula_;
  double arcx_;
  double arcy_;
  double arcz_;
  ::google::protobuf::int32 ydock_;
  ::google::protobuf::int32 zdock_;
  ::std::string* xoffsetformula_;
  ::std::string* yoffsetformula_;
  ::std::string* zoffsetformula_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int32 defaultskindirection_;
  ::std::string* cabstructboardname_;
  ::google::protobuf::int64 vercode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabStructBoardInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabStructBoardSealInfo : public ::google::protobuf::Message {
 public:
  JK_CabStructBoardSealInfo();
  virtual ~JK_CabStructBoardSealInfo();

  JK_CabStructBoardSealInfo(const JK_CabStructBoardSealInfo& from);

  inline JK_CabStructBoardSealInfo& operator=(const JK_CabStructBoardSealInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabStructBoardSealInfo& default_instance();

  void Swap(JK_CabStructBoardSealInfo* other);

  // implements Message ----------------------------------------------

  JK_CabStructBoardSealInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabStructBoardSealInfo& from);
  void MergeFrom(const JK_CabStructBoardSealInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabStructBoardSealID = 1;
  inline bool has_cabstructboardsealid() const;
  inline void clear_cabstructboardsealid();
  static const int kCabStructBoardSealIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabstructboardsealid() const;
  inline void set_cabstructboardsealid(::google::protobuf::int32 value);

  // required int32 SealOrder = 2;
  inline bool has_sealorder() const;
  inline void clear_sealorder();
  static const int kSealOrderFieldNumber = 2;
  inline ::google::protobuf::int32 sealorder() const;
  inline void set_sealorder(::google::protobuf::int32 value);

  // required int32 CabStructBoardID = 3;
  inline bool has_cabstructboardid() const;
  inline void clear_cabstructboardid();
  static const int kCabStructBoardIDFieldNumber = 3;
  inline ::google::protobuf::int32 cabstructboardid() const;
  inline void set_cabstructboardid(::google::protobuf::int32 value);

  // required int32 SealType = 4;
  inline bool has_sealtype() const;
  inline void clear_sealtype();
  static const int kSealTypeFieldNumber = 4;
  inline ::google::protobuf::int32 sealtype() const;
  inline void set_sealtype(::google::protobuf::int32 value);

  // required int64 VerCode = 5;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 5;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 7;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 7;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 8;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 8;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 9;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 9;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 10;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 10;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required int32 SealIndex = 11;
  inline bool has_sealindex() const;
  inline void clear_sealindex();
  static const int kSealIndexFieldNumber = 11;
  inline ::google::protobuf::int32 sealindex() const;
  inline void set_sealindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabStructBoardSealInfo)
 private:
  inline void set_has_cabstructboardsealid();
  inline void clear_has_cabstructboardsealid();
  inline void set_has_sealorder();
  inline void clear_has_sealorder();
  inline void set_has_cabstructboardid();
  inline void clear_has_cabstructboardid();
  inline void set_has_sealtype();
  inline void clear_has_sealtype();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_sealindex();
  inline void clear_has_sealindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabstructboardsealid_;
  ::google::protobuf::int32 sealorder_;
  ::google::protobuf::int32 cabstructboardid_;
  ::google::protobuf::int32 sealtype_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int32 sealindex_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabStructBoardSealInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabStructGapInfo : public ::google::protobuf::Message {
 public:
  JK_CabStructGapInfo();
  virtual ~JK_CabStructGapInfo();

  JK_CabStructGapInfo(const JK_CabStructGapInfo& from);

  inline JK_CabStructGapInfo& operator=(const JK_CabStructGapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabStructGapInfo& default_instance();

  void Swap(JK_CabStructGapInfo* other);

  // implements Message ----------------------------------------------

  JK_CabStructGapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabStructGapInfo& from);
  void MergeFrom(const JK_CabStructGapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabStructGapID = 1;
  inline bool has_cabstructgapid() const;
  inline void clear_cabstructgapid();
  static const int kCabStructGapIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabstructgapid() const;
  inline void set_cabstructgapid(::google::protobuf::int32 value);

  // required int32 CabStructID = 2;
  inline bool has_cabstructid() const;
  inline void clear_cabstructid();
  static const int kCabStructIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabstructid() const;
  inline void set_cabstructid(::google::protobuf::int32 value);

  // required bool IsDel = 3;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 3;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 FactoryID = 4;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 4;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CabGapType = 5;
  inline bool has_cabgaptype() const;
  inline void clear_cabgaptype();
  static const int kCabGapTypeFieldNumber = 5;
  inline ::google::protobuf::int32 cabgaptype() const;
  inline void set_cabgaptype(::google::protobuf::int32 value);

  // required int32 XDock = 6;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 6;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 7;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 7;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 8;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 8;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required string XOffsetFormula = 9;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 9;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 10;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 10;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 11;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 11;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required string XFormula = 12;
  inline bool has_xformula() const;
  inline void clear_xformula();
  static const int kXFormulaFieldNumber = 12;
  inline const ::std::string& xformula() const;
  inline void set_xformula(const ::std::string& value);
  inline void set_xformula(const char* value);
  inline void set_xformula(const char* value, size_t size);
  inline ::std::string* mutable_xformula();
  inline ::std::string* release_xformula();
  inline void set_allocated_xformula(::std::string* xformula);

  // required string YFormula = 13;
  inline bool has_yformula() const;
  inline void clear_yformula();
  static const int kYFormulaFieldNumber = 13;
  inline const ::std::string& yformula() const;
  inline void set_yformula(const ::std::string& value);
  inline void set_yformula(const char* value);
  inline void set_yformula(const char* value, size_t size);
  inline ::std::string* mutable_yformula();
  inline ::std::string* release_yformula();
  inline void set_allocated_yformula(::std::string* yformula);

  // required string ZFormula = 14;
  inline bool has_zformula() const;
  inline void clear_zformula();
  static const int kZFormulaFieldNumber = 14;
  inline const ::std::string& zformula() const;
  inline void set_zformula(const ::std::string& value);
  inline void set_zformula(const char* value);
  inline void set_zformula(const char* value, size_t size);
  inline ::std::string* mutable_zformula();
  inline ::std::string* release_zformula();
  inline void set_allocated_zformula(::std::string* zformula);

  // required string XVar = 15;
  inline bool has_xvar() const;
  inline void clear_xvar();
  static const int kXVarFieldNumber = 15;
  inline const ::std::string& xvar() const;
  inline void set_xvar(const ::std::string& value);
  inline void set_xvar(const char* value);
  inline void set_xvar(const char* value, size_t size);
  inline ::std::string* mutable_xvar();
  inline ::std::string* release_xvar();
  inline void set_allocated_xvar(::std::string* xvar);

  // required string YVar = 16;
  inline bool has_yvar() const;
  inline void clear_yvar();
  static const int kYVarFieldNumber = 16;
  inline const ::std::string& yvar() const;
  inline void set_yvar(const ::std::string& value);
  inline void set_yvar(const char* value);
  inline void set_yvar(const char* value, size_t size);
  inline ::std::string* mutable_yvar();
  inline ::std::string* release_yvar();
  inline void set_allocated_yvar(::std::string* yvar);

  // required string ZVar = 17;
  inline bool has_zvar() const;
  inline void clear_zvar();
  static const int kZVarFieldNumber = 17;
  inline const ::std::string& zvar() const;
  inline void set_zvar(const ::std::string& value);
  inline void set_zvar(const char* value);
  inline void set_zvar(const char* value, size_t size);
  inline ::std::string* mutable_zvar();
  inline ::std::string* release_zvar();
  inline void set_allocated_zvar(::std::string* zvar);

  // required string XVarName = 18;
  inline bool has_xvarname() const;
  inline void clear_xvarname();
  static const int kXVarNameFieldNumber = 18;
  inline const ::std::string& xvarname() const;
  inline void set_xvarname(const ::std::string& value);
  inline void set_xvarname(const char* value);
  inline void set_xvarname(const char* value, size_t size);
  inline ::std::string* mutable_xvarname();
  inline ::std::string* release_xvarname();
  inline void set_allocated_xvarname(::std::string* xvarname);

  // required string YVarName = 19;
  inline bool has_yvarname() const;
  inline void clear_yvarname();
  static const int kYVarNameFieldNumber = 19;
  inline const ::std::string& yvarname() const;
  inline void set_yvarname(const ::std::string& value);
  inline void set_yvarname(const char* value);
  inline void set_yvarname(const char* value, size_t size);
  inline ::std::string* mutable_yvarname();
  inline ::std::string* release_yvarname();
  inline void set_allocated_yvarname(::std::string* yvarname);

  // required string ZVarName = 20;
  inline bool has_zvarname() const;
  inline void clear_zvarname();
  static const int kZVarNameFieldNumber = 20;
  inline const ::std::string& zvarname() const;
  inline void set_zvarname(const ::std::string& value);
  inline void set_zvarname(const char* value);
  inline void set_zvarname(const char* value, size_t size);
  inline ::std::string* mutable_zvarname();
  inline ::std::string* release_zvarname();
  inline void set_allocated_zvarname(::std::string* zvarname);

  // required string CabStructCabStructGapCode = 21;
  inline bool has_cabstructcabstructgapcode() const;
  inline void clear_cabstructcabstructgapcode();
  static const int kCabStructCabStructGapCodeFieldNumber = 21;
  inline const ::std::string& cabstructcabstructgapcode() const;
  inline void set_cabstructcabstructgapcode(const ::std::string& value);
  inline void set_cabstructcabstructgapcode(const char* value);
  inline void set_cabstructcabstructgapcode(const char* value, size_t size);
  inline ::std::string* mutable_cabstructcabstructgapcode();
  inline ::std::string* release_cabstructcabstructgapcode();
  inline void set_allocated_cabstructcabstructgapcode(::std::string* cabstructcabstructgapcode);

  // required string CabStructGapName = 22;
  inline bool has_cabstructgapname() const;
  inline void clear_cabstructgapname();
  static const int kCabStructGapNameFieldNumber = 22;
  inline const ::std::string& cabstructgapname() const;
  inline void set_cabstructgapname(const ::std::string& value);
  inline void set_cabstructgapname(const char* value);
  inline void set_cabstructgapname(const char* value, size_t size);
  inline ::std::string* mutable_cabstructgapname();
  inline ::std::string* release_cabstructgapname();
  inline void set_allocated_cabstructgapname(::std::string* cabstructgapname);

  // required string CabStructGapMemo = 23;
  inline bool has_cabstructgapmemo() const;
  inline void clear_cabstructgapmemo();
  static const int kCabStructGapMemoFieldNumber = 23;
  inline const ::std::string& cabstructgapmemo() const;
  inline void set_cabstructgapmemo(const ::std::string& value);
  inline void set_cabstructgapmemo(const char* value);
  inline void set_cabstructgapmemo(const char* value, size_t size);
  inline ::std::string* mutable_cabstructgapmemo();
  inline ::std::string* release_cabstructgapmemo();
  inline void set_allocated_cabstructgapmemo(::std::string* cabstructgapmemo);

  // required int32 CreatorID = 24;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 24;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 25;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 25;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 26;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 26;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 27;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 27;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required int64 VerCode = 28;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 28;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabStructGapInfo)
 private:
  inline void set_has_cabstructgapid();
  inline void clear_has_cabstructgapid();
  inline void set_has_cabstructid();
  inline void clear_has_cabstructid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_cabgaptype();
  inline void clear_has_cabgaptype();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_xformula();
  inline void clear_has_xformula();
  inline void set_has_yformula();
  inline void clear_has_yformula();
  inline void set_has_zformula();
  inline void clear_has_zformula();
  inline void set_has_xvar();
  inline void clear_has_xvar();
  inline void set_has_yvar();
  inline void clear_has_yvar();
  inline void set_has_zvar();
  inline void clear_has_zvar();
  inline void set_has_xvarname();
  inline void clear_has_xvarname();
  inline void set_has_yvarname();
  inline void clear_has_yvarname();
  inline void set_has_zvarname();
  inline void clear_has_zvarname();
  inline void set_has_cabstructcabstructgapcode();
  inline void clear_has_cabstructcabstructgapcode();
  inline void set_has_cabstructgapname();
  inline void clear_has_cabstructgapname();
  inline void set_has_cabstructgapmemo();
  inline void clear_has_cabstructgapmemo();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabstructgapid_;
  ::google::protobuf::int32 cabstructid_;
  bool isdel_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 cabgaptype_;
  ::google::protobuf::int32 xdock_;
  ::google::protobuf::int32 ydock_;
  ::google::protobuf::int32 zdock_;
  ::std::string* xoffsetformula_;
  ::std::string* yoffsetformula_;
  ::std::string* zoffsetformula_;
  ::std::string* xformula_;
  ::std::string* yformula_;
  ::std::string* zformula_;
  ::std::string* xvar_;
  ::std::string* yvar_;
  ::std::string* zvar_;
  ::std::string* xvarname_;
  ::std::string* yvarname_;
  ::std::string* zvarname_;
  ::std::string* cabstructcabstructgapcode_;
  ::std::string* cabstructgapname_;
  ::std::string* cabstructgapmemo_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int64 vercode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabStructGapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabStructInfo : public ::google::protobuf::Message {
 public:
  JK_CabStructInfo();
  virtual ~JK_CabStructInfo();

  JK_CabStructInfo(const JK_CabStructInfo& from);

  inline JK_CabStructInfo& operator=(const JK_CabStructInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabStructInfo& default_instance();

  void Swap(JK_CabStructInfo* other);

  // implements Message ----------------------------------------------

  JK_CabStructInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabStructInfo& from);
  void MergeFrom(const JK_CabStructInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabStructID = 1;
  inline bool has_cabstructid() const;
  inline void clear_cabstructid();
  static const int kCabStructIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabstructid() const;
  inline void set_cabstructid(::google::protobuf::int32 value);

  // required int32 FactoryID = 2;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 2;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 3;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 3;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 GroupID = 4;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 4;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required bool IsDel = 5;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 5;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsActive = 6;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 6;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required int32 CabGapType = 7;
  inline bool has_cabgaptype() const;
  inline void clear_cabgaptype();
  static const int kCabGapTypeFieldNumber = 7;
  inline ::google::protobuf::int32 cabgaptype() const;
  inline void set_cabgaptype(::google::protobuf::int32 value);

  // required int32 CabShapeID = 8;
  inline bool has_cabshapeid() const;
  inline void clear_cabshapeid();
  static const int kCabShapeIDFieldNumber = 8;
  inline ::google::protobuf::int32 cabshapeid() const;
  inline void set_cabshapeid(::google::protobuf::int32 value);

  // required double VirtualXLen = 9;
  inline bool has_virtualxlen() const;
  inline void clear_virtualxlen();
  static const int kVirtualXLenFieldNumber = 9;
  inline double virtualxlen() const;
  inline void set_virtualxlen(double value);

  // required double VirtualYLen = 10;
  inline bool has_virtualylen() const;
  inline void clear_virtualylen();
  static const int kVirtualYLenFieldNumber = 10;
  inline double virtualylen() const;
  inline void set_virtualylen(double value);

  // required double VirtualZLen = 11;
  inline bool has_virtualzlen() const;
  inline void clear_virtualzlen();
  static const int kVirtualZLenFieldNumber = 11;
  inline double virtualzlen() const;
  inline void set_virtualzlen(double value);

  // required double VirtualShapeXLen = 12;
  inline bool has_virtualshapexlen() const;
  inline void clear_virtualshapexlen();
  static const int kVirtualShapeXLenFieldNumber = 12;
  inline double virtualshapexlen() const;
  inline void set_virtualshapexlen(double value);

  // required double VirtualShapeZLen = 13;
  inline bool has_virtualshapezlen() const;
  inline void clear_virtualshapezlen();
  static const int kVirtualShapeZLenFieldNumber = 13;
  inline double virtualshapezlen() const;
  inline void set_virtualshapezlen(double value);

  // required double VirtualGapXLen = 14;
  inline bool has_virtualgapxlen() const;
  inline void clear_virtualgapxlen();
  static const int kVirtualGapXLenFieldNumber = 14;
  inline double virtualgapxlen() const;
  inline void set_virtualgapxlen(double value);

  // required double VirtualGapYLen = 15;
  inline bool has_virtualgapylen() const;
  inline void clear_virtualgapylen();
  static const int kVirtualGapYLenFieldNumber = 15;
  inline double virtualgapylen() const;
  inline void set_virtualgapylen(double value);

  // required double VirtualGapZLen = 16;
  inline bool has_virtualgapzlen() const;
  inline void clear_virtualgapzlen();
  static const int kVirtualGapZLenFieldNumber = 16;
  inline double virtualgapzlen() const;
  inline void set_virtualgapzlen(double value);

  // required int32 CreatorID = 17;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 17;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 18;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 18;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 19;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 19;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 20;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 20;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string CabStructCode = 21;
  inline bool has_cabstructcode() const;
  inline void clear_cabstructcode();
  static const int kCabStructCodeFieldNumber = 21;
  inline const ::std::string& cabstructcode() const;
  inline void set_cabstructcode(const ::std::string& value);
  inline void set_cabstructcode(const char* value);
  inline void set_cabstructcode(const char* value, size_t size);
  inline ::std::string* mutable_cabstructcode();
  inline ::std::string* release_cabstructcode();
  inline void set_allocated_cabstructcode(::std::string* cabstructcode);

  // required string CabStructName = 22;
  inline bool has_cabstructname() const;
  inline void clear_cabstructname();
  static const int kCabStructNameFieldNumber = 22;
  inline const ::std::string& cabstructname() const;
  inline void set_cabstructname(const ::std::string& value);
  inline void set_cabstructname(const char* value);
  inline void set_cabstructname(const char* value, size_t size);
  inline ::std::string* mutable_cabstructname();
  inline ::std::string* release_cabstructname();
  inline void set_allocated_cabstructname(::std::string* cabstructname);

  // required string CabStructMemo = 23;
  inline bool has_cabstructmemo() const;
  inline void clear_cabstructmemo();
  static const int kCabStructMemoFieldNumber = 23;
  inline const ::std::string& cabstructmemo() const;
  inline void set_cabstructmemo(const ::std::string& value);
  inline void set_cabstructmemo(const char* value);
  inline void set_cabstructmemo(const char* value, size_t size);
  inline ::std::string* mutable_cabstructmemo();
  inline ::std::string* release_cabstructmemo();
  inline void set_allocated_cabstructmemo(::std::string* cabstructmemo);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabStructInfo)
 private:
  inline void set_has_cabstructid();
  inline void clear_has_cabstructid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_cabgaptype();
  inline void clear_has_cabgaptype();
  inline void set_has_cabshapeid();
  inline void clear_has_cabshapeid();
  inline void set_has_virtualxlen();
  inline void clear_has_virtualxlen();
  inline void set_has_virtualylen();
  inline void clear_has_virtualylen();
  inline void set_has_virtualzlen();
  inline void clear_has_virtualzlen();
  inline void set_has_virtualshapexlen();
  inline void clear_has_virtualshapexlen();
  inline void set_has_virtualshapezlen();
  inline void clear_has_virtualshapezlen();
  inline void set_has_virtualgapxlen();
  inline void clear_has_virtualgapxlen();
  inline void set_has_virtualgapylen();
  inline void clear_has_virtualgapylen();
  inline void set_has_virtualgapzlen();
  inline void clear_has_virtualgapzlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_cabstructcode();
  inline void clear_has_cabstructcode();
  inline void set_has_cabstructname();
  inline void clear_has_cabstructname();
  inline void set_has_cabstructmemo();
  inline void clear_has_cabstructmemo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabstructid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 groupid_;
  bool isdel_;
  bool isactive_;
  ::google::protobuf::int32 cabgaptype_;
  ::google::protobuf::int32 cabshapeid_;
  double virtualxlen_;
  double virtualylen_;
  double virtualzlen_;
  double virtualshapexlen_;
  double virtualshapezlen_;
  double virtualgapxlen_;
  double virtualgapylen_;
  double virtualgapzlen_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* cabstructcode_;
  ::std::string* cabstructname_;
  ::std::string* cabstructmemo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabStructInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabStructMatPlanMapInfo : public ::google::protobuf::Message {
 public:
  JK_CabStructMatPlanMapInfo();
  virtual ~JK_CabStructMatPlanMapInfo();

  JK_CabStructMatPlanMapInfo(const JK_CabStructMatPlanMapInfo& from);

  inline JK_CabStructMatPlanMapInfo& operator=(const JK_CabStructMatPlanMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabStructMatPlanMapInfo& default_instance();

  void Swap(JK_CabStructMatPlanMapInfo* other);

  // implements Message ----------------------------------------------

  JK_CabStructMatPlanMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabStructMatPlanMapInfo& from);
  void MergeFrom(const JK_CabStructMatPlanMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabMatPlanID = 1;
  inline bool has_cabmatplanid() const;
  inline void clear_cabmatplanid();
  static const int kCabMatPlanIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabmatplanid() const;
  inline void set_cabmatplanid(::google::protobuf::int32 value);

  // required int32 CabStructID = 2;
  inline bool has_cabstructid() const;
  inline void clear_cabstructid();
  static const int kCabStructIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabstructid() const;
  inline void set_cabstructid(::google::protobuf::int32 value);

  // required int64 VerCode = 3;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 3;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 4;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 4;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabStructMatPlanMapInfo)
 private:
  inline void set_has_cabmatplanid();
  inline void clear_has_cabmatplanid();
  inline void set_has_cabstructid();
  inline void clear_has_cabstructid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabmatplanid_;
  ::google::protobuf::int32 cabstructid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabStructMatPlanMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabinetSizeBoardInfo : public ::google::protobuf::Message {
 public:
  JK_CabinetSizeBoardInfo();
  virtual ~JK_CabinetSizeBoardInfo();

  JK_CabinetSizeBoardInfo(const JK_CabinetSizeBoardInfo& from);

  inline JK_CabinetSizeBoardInfo& operator=(const JK_CabinetSizeBoardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabinetSizeBoardInfo& default_instance();

  void Swap(JK_CabinetSizeBoardInfo* other);

  // implements Message ----------------------------------------------

  JK_CabinetSizeBoardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabinetSizeBoardInfo& from);
  void MergeFrom(const JK_CabinetSizeBoardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabinetSizeBoardID = 1;
  inline bool has_cabinetsizeboardid() const;
  inline void clear_cabinetsizeboardid();
  static const int kCabinetSizeBoardIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabinetsizeboardid() const;
  inline void set_cabinetsizeboardid(::google::protobuf::int32 value);

  // required int32 CabinetSizeID = 2;
  inline bool has_cabinetsizeid() const;
  inline void clear_cabinetsizeid();
  static const int kCabinetSizeIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabinetsizeid() const;
  inline void set_cabinetsizeid(::google::protobuf::int32 value);

  // required bool IsDel = 3;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 3;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 CabStructBoardID = 4;
  inline bool has_cabstructboardid() const;
  inline void clear_cabstructboardid();
  static const int kCabStructBoardIDFieldNumber = 4;
  inline ::google::protobuf::int32 cabstructboardid() const;
  inline void set_cabstructboardid(::google::protobuf::int32 value);

  // required bool IsCanRelocate = 5;
  inline bool has_iscanrelocate() const;
  inline void clear_iscanrelocate();
  static const int kIsCanRelocateFieldNumber = 5;
  inline bool iscanrelocate() const;
  inline void set_iscanrelocate(bool value);

  // required bool IsCanDel = 6;
  inline bool has_iscandel() const;
  inline void clear_iscandel();
  static const int kIsCanDelFieldNumber = 6;
  inline bool iscandel() const;
  inline void set_iscandel(bool value);

  // required int32 FactoryID = 7;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 7;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 CreateTime = 8;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 8;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int32 CreatorID = 9;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 9;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int64 UpdateTime = 10;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 10;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required int32 UpdaterID = 11;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 11;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int32 XDock = 12;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 12;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 13;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 13;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 14;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 14;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required string XOffsetFormula = 15;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 15;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 16;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 16;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 17;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 17;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required string CabStructBoardName = 18;
  inline bool has_cabstructboardname() const;
  inline void clear_cabstructboardname();
  static const int kCabStructBoardNameFieldNumber = 18;
  inline const ::std::string& cabstructboardname() const;
  inline void set_cabstructboardname(const ::std::string& value);
  inline void set_cabstructboardname(const char* value);
  inline void set_cabstructboardname(const char* value, size_t size);
  inline ::std::string* mutable_cabstructboardname();
  inline ::std::string* release_cabstructboardname();
  inline void set_allocated_cabstructboardname(::std::string* cabstructboardname);

  // required int64 VerCode = 19;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 19;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabinetSizeBoardInfo)
 private:
  inline void set_has_cabinetsizeboardid();
  inline void clear_has_cabinetsizeboardid();
  inline void set_has_cabinetsizeid();
  inline void clear_has_cabinetsizeid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_cabstructboardid();
  inline void clear_has_cabstructboardid();
  inline void set_has_iscanrelocate();
  inline void clear_has_iscanrelocate();
  inline void set_has_iscandel();
  inline void clear_has_iscandel();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_cabstructboardname();
  inline void clear_has_cabstructboardname();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabinetsizeboardid_;
  ::google::protobuf::int32 cabinetsizeid_;
  ::google::protobuf::int32 cabstructboardid_;
  bool isdel_;
  bool iscanrelocate_;
  bool iscandel_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int32 xdock_;
  ::google::protobuf::int32 ydock_;
  ::google::protobuf::int32 zdock_;
  ::std::string* xoffsetformula_;
  ::std::string* yoffsetformula_;
  ::std::string* zoffsetformula_;
  ::std::string* cabstructboardname_;
  ::google::protobuf::int64 vercode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabinetSizeBoardInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabinetSizeInfo : public ::google::protobuf::Message {
 public:
  JK_CabinetSizeInfo();
  virtual ~JK_CabinetSizeInfo();

  JK_CabinetSizeInfo(const JK_CabinetSizeInfo& from);

  inline JK_CabinetSizeInfo& operator=(const JK_CabinetSizeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabinetSizeInfo& default_instance();

  void Swap(JK_CabinetSizeInfo* other);

  // implements Message ----------------------------------------------

  JK_CabinetSizeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabinetSizeInfo& from);
  void MergeFrom(const JK_CabinetSizeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabDesignID = 1;
  inline bool has_cabdesignid() const;
  inline void clear_cabdesignid();
  static const int kCabDesignIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabdesignid() const;
  inline void set_cabdesignid(::google::protobuf::int32 value);

  // required bool IsDel = 2;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 2;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 CabinetSizeID = 3;
  inline bool has_cabinetsizeid() const;
  inline void clear_cabinetsizeid();
  static const int kCabinetSizeIDFieldNumber = 3;
  inline ::google::protobuf::int32 cabinetsizeid() const;
  inline void set_cabinetsizeid(::google::protobuf::int32 value);

  // required int32 PhotoID = 4;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 4;
  inline ::google::protobuf::int32 photoid() const;
  inline void set_photoid(::google::protobuf::int32 value);

  // required double XLen = 5;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 5;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 6;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 6;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 7;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 7;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required bool IsStandard = 8;
  inline bool has_isstandard() const;
  inline void clear_isstandard();
  static const int kIsStandardFieldNumber = 8;
  inline bool isstandard() const;
  inline void set_isstandard(bool value);

  // required double MinXLen = 9;
  inline bool has_minxlen() const;
  inline void clear_minxlen();
  static const int kMinXLenFieldNumber = 9;
  inline double minxlen() const;
  inline void set_minxlen(double value);

  // required double MaxXLen = 10;
  inline bool has_maxxlen() const;
  inline void clear_maxxlen();
  static const int kMaxXLenFieldNumber = 10;
  inline double maxxlen() const;
  inline void set_maxxlen(double value);

  // required double XLenStep = 11;
  inline bool has_xlenstep() const;
  inline void clear_xlenstep();
  static const int kXLenStepFieldNumber = 11;
  inline double xlenstep() const;
  inline void set_xlenstep(double value);

  // required double MinYLen = 12;
  inline bool has_minylen() const;
  inline void clear_minylen();
  static const int kMinYLenFieldNumber = 12;
  inline double minylen() const;
  inline void set_minylen(double value);

  // required double MaxYLen = 13;
  inline bool has_maxylen() const;
  inline void clear_maxylen();
  static const int kMaxYLenFieldNumber = 13;
  inline double maxylen() const;
  inline void set_maxylen(double value);

  // required double YLenStep = 14;
  inline bool has_ylenstep() const;
  inline void clear_ylenstep();
  static const int kYLenStepFieldNumber = 14;
  inline double ylenstep() const;
  inline void set_ylenstep(double value);

  // required double MinZLen = 15;
  inline bool has_minzlen() const;
  inline void clear_minzlen();
  static const int kMinZLenFieldNumber = 15;
  inline double minzlen() const;
  inline void set_minzlen(double value);

  // required double MaxZLen = 16;
  inline bool has_maxzlen() const;
  inline void clear_maxzlen();
  static const int kMaxZLenFieldNumber = 16;
  inline double maxzlen() const;
  inline void set_maxzlen(double value);

  // required double ZLenStep = 17;
  inline bool has_zlenstep() const;
  inline void clear_zlenstep();
  static const int kZLenStepFieldNumber = 17;
  inline double zlenstep() const;
  inline void set_zlenstep(double value);

  // required double ShapeXLen = 18;
  inline bool has_shapexlen() const;
  inline void clear_shapexlen();
  static const int kShapeXLenFieldNumber = 18;
  inline double shapexlen() const;
  inline void set_shapexlen(double value);

  // required double ShapeZLen = 19;
  inline bool has_shapezlen() const;
  inline void clear_shapezlen();
  static const int kShapeZLenFieldNumber = 19;
  inline double shapezlen() const;
  inline void set_shapezlen(double value);

  // required double GapXLen = 20;
  inline bool has_gapxlen() const;
  inline void clear_gapxlen();
  static const int kGapXLenFieldNumber = 20;
  inline double gapxlen() const;
  inline void set_gapxlen(double value);

  // required double GapYLen = 21;
  inline bool has_gapylen() const;
  inline void clear_gapylen();
  static const int kGapYLenFieldNumber = 21;
  inline double gapylen() const;
  inline void set_gapylen(double value);

  // required double GapZLen = 22;
  inline bool has_gapzlen() const;
  inline void clear_gapzlen();
  static const int kGapZLenFieldNumber = 22;
  inline double gapzlen() const;
  inline void set_gapzlen(double value);

  // required double ShapeMinXLen = 23;
  inline bool has_shapeminxlen() const;
  inline void clear_shapeminxlen();
  static const int kShapeMinXLenFieldNumber = 23;
  inline double shapeminxlen() const;
  inline void set_shapeminxlen(double value);

  // required double ShapeMaxXLen = 24;
  inline bool has_shapemaxxlen() const;
  inline void clear_shapemaxxlen();
  static const int kShapeMaxXLenFieldNumber = 24;
  inline double shapemaxxlen() const;
  inline void set_shapemaxxlen(double value);

  // required double ShapeXLenStep = 25;
  inline bool has_shapexlenstep() const;
  inline void clear_shapexlenstep();
  static const int kShapeXLenStepFieldNumber = 25;
  inline double shapexlenstep() const;
  inline void set_shapexlenstep(double value);

  // required double ShapeMinZLen = 26;
  inline bool has_shapeminzlen() const;
  inline void clear_shapeminzlen();
  static const int kShapeMinZLenFieldNumber = 26;
  inline double shapeminzlen() const;
  inline void set_shapeminzlen(double value);

  // required double ShapeMaxZLen = 27;
  inline bool has_shapemaxzlen() const;
  inline void clear_shapemaxzlen();
  static const int kShapeMaxZLenFieldNumber = 27;
  inline double shapemaxzlen() const;
  inline void set_shapemaxzlen(double value);

  // required double ShapeZLenStep = 28;
  inline bool has_shapezlenstep() const;
  inline void clear_shapezlenstep();
  static const int kShapeZLenStepFieldNumber = 28;
  inline double shapezlenstep() const;
  inline void set_shapezlenstep(double value);

  // required double GapMinXLen = 29;
  inline bool has_gapminxlen() const;
  inline void clear_gapminxlen();
  static const int kGapMinXLenFieldNumber = 29;
  inline double gapminxlen() const;
  inline void set_gapminxlen(double value);

  // required double GapMaxXLen = 30;
  inline bool has_gapmaxxlen() const;
  inline void clear_gapmaxxlen();
  static const int kGapMaxXLenFieldNumber = 30;
  inline double gapmaxxlen() const;
  inline void set_gapmaxxlen(double value);

  // required double GapXLenStep = 31;
  inline bool has_gapxlenstep() const;
  inline void clear_gapxlenstep();
  static const int kGapXLenStepFieldNumber = 31;
  inline double gapxlenstep() const;
  inline void set_gapxlenstep(double value);

  // required double GapMinYLen = 32;
  inline bool has_gapminylen() const;
  inline void clear_gapminylen();
  static const int kGapMinYLenFieldNumber = 32;
  inline double gapminylen() const;
  inline void set_gapminylen(double value);

  // required double GapMaxYLen = 33;
  inline bool has_gapmaxylen() const;
  inline void clear_gapmaxylen();
  static const int kGapMaxYLenFieldNumber = 33;
  inline double gapmaxylen() const;
  inline void set_gapmaxylen(double value);

  // required double GapYLenStep = 34;
  inline bool has_gapylenstep() const;
  inline void clear_gapylenstep();
  static const int kGapYLenStepFieldNumber = 34;
  inline double gapylenstep() const;
  inline void set_gapylenstep(double value);

  // required double GapMinZLen = 35;
  inline bool has_gapminzlen() const;
  inline void clear_gapminzlen();
  static const int kGapMinZLenFieldNumber = 35;
  inline double gapminzlen() const;
  inline void set_gapminzlen(double value);

  // required double GapMaxZLen = 36;
  inline bool has_gapmaxzlen() const;
  inline void clear_gapmaxzlen();
  static const int kGapMaxZLenFieldNumber = 36;
  inline double gapmaxzlen() const;
  inline void set_gapmaxzlen(double value);

  // required double GapZLenStep = 37;
  inline bool has_gapzlenstep() const;
  inline void clear_gapzlenstep();
  static const int kGapZLenStepFieldNumber = 37;
  inline double gapzlenstep() const;
  inline void set_gapzlenstep(double value);

  // required int32 FootCount = 38;
  inline bool has_footcount() const;
  inline void clear_footcount();
  static const int kFootCountFieldNumber = 38;
  inline ::google::protobuf::int32 footcount() const;
  inline void set_footcount(::google::protobuf::int32 value);

  // required bool IsSysFootRule = 39;
  inline bool has_issysfootrule() const;
  inline void clear_issysfootrule();
  static const int kIsSysFootRuleFieldNumber = 39;
  inline bool issysfootrule() const;
  inline void set_issysfootrule(bool value);

  // required int32 FactoryID = 40;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 40;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 41;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 41;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 42;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 42;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 43;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 43;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 44;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 44;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string CabinetSizeCode = 45;
  inline bool has_cabinetsizecode() const;
  inline void clear_cabinetsizecode();
  static const int kCabinetSizeCodeFieldNumber = 45;
  inline const ::std::string& cabinetsizecode() const;
  inline void set_cabinetsizecode(const ::std::string& value);
  inline void set_cabinetsizecode(const char* value);
  inline void set_cabinetsizecode(const char* value, size_t size);
  inline ::std::string* mutable_cabinetsizecode();
  inline ::std::string* release_cabinetsizecode();
  inline void set_allocated_cabinetsizecode(::std::string* cabinetsizecode);

  // required string CabinetSizeName = 46;
  inline bool has_cabinetsizename() const;
  inline void clear_cabinetsizename();
  static const int kCabinetSizeNameFieldNumber = 46;
  inline const ::std::string& cabinetsizename() const;
  inline void set_cabinetsizename(const ::std::string& value);
  inline void set_cabinetsizename(const char* value);
  inline void set_cabinetsizename(const char* value, size_t size);
  inline ::std::string* mutable_cabinetsizename();
  inline ::std::string* release_cabinetsizename();
  inline void set_allocated_cabinetsizename(::std::string* cabinetsizename);

  // required string CabinetSizeMemo = 47;
  inline bool has_cabinetsizememo() const;
  inline void clear_cabinetsizememo();
  static const int kCabinetSizeMemoFieldNumber = 47;
  inline const ::std::string& cabinetsizememo() const;
  inline void set_cabinetsizememo(const ::std::string& value);
  inline void set_cabinetsizememo(const char* value);
  inline void set_cabinetsizememo(const char* value, size_t size);
  inline ::std::string* mutable_cabinetsizememo();
  inline ::std::string* release_cabinetsizememo();
  inline void set_allocated_cabinetsizememo(::std::string* cabinetsizememo);

  // required int64 VerCode = 48;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 48;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabinetSizeInfo)
 private:
  inline void set_has_cabdesignid();
  inline void clear_has_cabdesignid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_cabinetsizeid();
  inline void clear_has_cabinetsizeid();
  inline void set_has_photoid();
  inline void clear_has_photoid();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_isstandard();
  inline void clear_has_isstandard();
  inline void set_has_minxlen();
  inline void clear_has_minxlen();
  inline void set_has_maxxlen();
  inline void clear_has_maxxlen();
  inline void set_has_xlenstep();
  inline void clear_has_xlenstep();
  inline void set_has_minylen();
  inline void clear_has_minylen();
  inline void set_has_maxylen();
  inline void clear_has_maxylen();
  inline void set_has_ylenstep();
  inline void clear_has_ylenstep();
  inline void set_has_minzlen();
  inline void clear_has_minzlen();
  inline void set_has_maxzlen();
  inline void clear_has_maxzlen();
  inline void set_has_zlenstep();
  inline void clear_has_zlenstep();
  inline void set_has_shapexlen();
  inline void clear_has_shapexlen();
  inline void set_has_shapezlen();
  inline void clear_has_shapezlen();
  inline void set_has_gapxlen();
  inline void clear_has_gapxlen();
  inline void set_has_gapylen();
  inline void clear_has_gapylen();
  inline void set_has_gapzlen();
  inline void clear_has_gapzlen();
  inline void set_has_shapeminxlen();
  inline void clear_has_shapeminxlen();
  inline void set_has_shapemaxxlen();
  inline void clear_has_shapemaxxlen();
  inline void set_has_shapexlenstep();
  inline void clear_has_shapexlenstep();
  inline void set_has_shapeminzlen();
  inline void clear_has_shapeminzlen();
  inline void set_has_shapemaxzlen();
  inline void clear_has_shapemaxzlen();
  inline void set_has_shapezlenstep();
  inline void clear_has_shapezlenstep();
  inline void set_has_gapminxlen();
  inline void clear_has_gapminxlen();
  inline void set_has_gapmaxxlen();
  inline void clear_has_gapmaxxlen();
  inline void set_has_gapxlenstep();
  inline void clear_has_gapxlenstep();
  inline void set_has_gapminylen();
  inline void clear_has_gapminylen();
  inline void set_has_gapmaxylen();
  inline void clear_has_gapmaxylen();
  inline void set_has_gapylenstep();
  inline void clear_has_gapylenstep();
  inline void set_has_gapminzlen();
  inline void clear_has_gapminzlen();
  inline void set_has_gapmaxzlen();
  inline void clear_has_gapmaxzlen();
  inline void set_has_gapzlenstep();
  inline void clear_has_gapzlenstep();
  inline void set_has_footcount();
  inline void clear_has_footcount();
  inline void set_has_issysfootrule();
  inline void clear_has_issysfootrule();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_cabinetsizecode();
  inline void clear_has_cabinetsizecode();
  inline void set_has_cabinetsizename();
  inline void clear_has_cabinetsizename();
  inline void set_has_cabinetsizememo();
  inline void clear_has_cabinetsizememo();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabdesignid_;
  ::google::protobuf::int32 cabinetsizeid_;
  double xlen_;
  double ylen_;
  double zlen_;
  double minxlen_;
  double maxxlen_;
  double xlenstep_;
  double minylen_;
  double maxylen_;
  ::google::protobuf::int32 photoid_;
  bool isdel_;
  bool isstandard_;
  bool issysfootrule_;
  double ylenstep_;
  double minzlen_;
  double maxzlen_;
  double zlenstep_;
  double shapexlen_;
  double shapezlen_;
  double gapxlen_;
  double gapylen_;
  double gapzlen_;
  double shapeminxlen_;
  double shapemaxxlen_;
  double shapexlenstep_;
  double shapeminzlen_;
  double shapemaxzlen_;
  double shapezlenstep_;
  double gapminxlen_;
  double gapmaxxlen_;
  double gapxlenstep_;
  double gapminylen_;
  double gapmaxylen_;
  double gapylenstep_;
  double gapminzlen_;
  double gapmaxzlen_;
  double gapzlenstep_;
  ::google::protobuf::int32 footcount_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* cabinetsizecode_;
  ::std::string* cabinetsizename_;
  ::std::string* cabinetsizememo_;
  ::google::protobuf::int64 vercode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(48 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabinetSizeInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_CabinetSizeStructBoardInfo : public ::google::protobuf::Message {
 public:
  JK_CabinetSizeStructBoardInfo();
  virtual ~JK_CabinetSizeStructBoardInfo();

  JK_CabinetSizeStructBoardInfo(const JK_CabinetSizeStructBoardInfo& from);

  inline JK_CabinetSizeStructBoardInfo& operator=(const JK_CabinetSizeStructBoardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_CabinetSizeStructBoardInfo& default_instance();

  void Swap(JK_CabinetSizeStructBoardInfo* other);

  // implements Message ----------------------------------------------

  JK_CabinetSizeStructBoardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_CabinetSizeStructBoardInfo& from);
  void MergeFrom(const JK_CabinetSizeStructBoardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CabStructBoardID = 1;
  inline bool has_cabstructboardid() const;
  inline void clear_cabstructboardid();
  static const int kCabStructBoardIDFieldNumber = 1;
  inline ::google::protobuf::int32 cabstructboardid() const;
  inline void set_cabstructboardid(::google::protobuf::int32 value);

  // required int32 CabinetSizeID = 2;
  inline bool has_cabinetsizeid() const;
  inline void clear_cabinetsizeid();
  static const int kCabinetSizeIDFieldNumber = 2;
  inline ::google::protobuf::int32 cabinetsizeid() const;
  inline void set_cabinetsizeid(::google::protobuf::int32 value);

  // required int64 VerCode = 3;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 3;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 4;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 4;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_CabinetSizeStructBoardInfo)
 private:
  inline void set_has_cabstructboardid();
  inline void clear_has_cabstructboardid();
  inline void set_has_cabinetsizeid();
  inline void clear_has_cabinetsizeid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cabstructboardid_;
  ::google::protobuf::int32 cabinetsizeid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_CabinetSizeStructBoardInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DecorBoardFrameMapInfo : public ::google::protobuf::Message {
 public:
  JK_DecorBoardFrameMapInfo();
  virtual ~JK_DecorBoardFrameMapInfo();

  JK_DecorBoardFrameMapInfo(const JK_DecorBoardFrameMapInfo& from);

  inline JK_DecorBoardFrameMapInfo& operator=(const JK_DecorBoardFrameMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DecorBoardFrameMapInfo& default_instance();

  void Swap(JK_DecorBoardFrameMapInfo* other);

  // implements Message ----------------------------------------------

  JK_DecorBoardFrameMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DecorBoardFrameMapInfo& from);
  void MergeFrom(const JK_DecorBoardFrameMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DecorBoardID = 1;
  inline bool has_decorboardid() const;
  inline void clear_decorboardid();
  static const int kDecorBoardIDFieldNumber = 1;
  inline ::google::protobuf::int32 decorboardid() const;
  inline void set_decorboardid(::google::protobuf::int32 value);

  // required int32 DecorFrameID = 2;
  inline bool has_decorframeid() const;
  inline void clear_decorframeid();
  static const int kDecorFrameIDFieldNumber = 2;
  inline ::google::protobuf::int32 decorframeid() const;
  inline void set_decorframeid(::google::protobuf::int32 value);

  // required bool IsDefault = 3;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 3;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DecorBoardFrameMapInfo)
 private:
  inline void set_has_decorboardid();
  inline void clear_has_decorboardid();
  inline void set_has_decorframeid();
  inline void clear_has_decorframeid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 decorboardid_;
  ::google::protobuf::int32 decorframeid_;
  ::google::protobuf::int64 vercode_;
  bool isdefault_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DecorBoardFrameMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DecorBoardInfo : public ::google::protobuf::Message {
 public:
  JK_DecorBoardInfo();
  virtual ~JK_DecorBoardInfo();

  JK_DecorBoardInfo(const JK_DecorBoardInfo& from);

  inline JK_DecorBoardInfo& operator=(const JK_DecorBoardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DecorBoardInfo& default_instance();

  void Swap(JK_DecorBoardInfo* other);

  // implements Message ----------------------------------------------

  JK_DecorBoardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DecorBoardInfo& from);
  void MergeFrom(const JK_DecorBoardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DecorBoardID = 1;
  inline bool has_decorboardid() const;
  inline void clear_decorboardid();
  static const int kDecorBoardIDFieldNumber = 1;
  inline ::google::protobuf::int32 decorboardid() const;
  inline void set_decorboardid(::google::protobuf::int32 value);

  // required int32 FactoryID = 2;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 2;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 GroupID = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 3;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required bool IsDel = 4;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 4;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsActive = 5;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 5;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required int32 CreatorID = 6;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 6;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 7;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 7;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 8;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 8;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 9;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 9;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required int32 SourceType = 10;
  inline bool has_sourcetype() const;
  inline void clear_sourcetype();
  static const int kSourceTypeFieldNumber = 10;
  inline ::google::protobuf::int32 sourcetype() const;
  inline void set_sourcetype(::google::protobuf::int32 value);

  // required double DefaultYPos = 11;
  inline bool has_defaultypos() const;
  inline void clear_defaultypos();
  static const int kDefaultYPosFieldNumber = 11;
  inline double defaultypos() const;
  inline void set_defaultypos(double value);

  // required string DecorBoardCode = 12;
  inline bool has_decorboardcode() const;
  inline void clear_decorboardcode();
  static const int kDecorBoardCodeFieldNumber = 12;
  inline const ::std::string& decorboardcode() const;
  inline void set_decorboardcode(const ::std::string& value);
  inline void set_decorboardcode(const char* value);
  inline void set_decorboardcode(const char* value, size_t size);
  inline ::std::string* mutable_decorboardcode();
  inline ::std::string* release_decorboardcode();
  inline void set_allocated_decorboardcode(::std::string* decorboardcode);

  // required string DecorBoardName = 13;
  inline bool has_decorboardname() const;
  inline void clear_decorboardname();
  static const int kDecorBoardNameFieldNumber = 13;
  inline const ::std::string& decorboardname() const;
  inline void set_decorboardname(const ::std::string& value);
  inline void set_decorboardname(const char* value);
  inline void set_decorboardname(const char* value, size_t size);
  inline ::std::string* mutable_decorboardname();
  inline ::std::string* release_decorboardname();
  inline void set_allocated_decorboardname(::std::string* decorboardname);

  // required string DecorBoardMemo = 14;
  inline bool has_decorboardmemo() const;
  inline void clear_decorboardmemo();
  static const int kDecorBoardMemoFieldNumber = 14;
  inline const ::std::string& decorboardmemo() const;
  inline void set_decorboardmemo(const ::std::string& value);
  inline void set_decorboardmemo(const char* value);
  inline void set_decorboardmemo(const char* value, size_t size);
  inline ::std::string* mutable_decorboardmemo();
  inline ::std::string* release_decorboardmemo();
  inline void set_allocated_decorboardmemo(::std::string* decorboardmemo);

  // required int64 VerCode = 15;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 15;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 GTypeID = 16;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 16;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required string XFormula = 17;
  inline bool has_xformula() const;
  inline void clear_xformula();
  static const int kXFormulaFieldNumber = 17;
  inline const ::std::string& xformula() const;
  inline void set_xformula(const ::std::string& value);
  inline void set_xformula(const char* value);
  inline void set_xformula(const char* value, size_t size);
  inline ::std::string* mutable_xformula();
  inline ::std::string* release_xformula();
  inline void set_allocated_xformula(::std::string* xformula);

  // required string YFormula = 18;
  inline bool has_yformula() const;
  inline void clear_yformula();
  static const int kYFormulaFieldNumber = 18;
  inline const ::std::string& yformula() const;
  inline void set_yformula(const ::std::string& value);
  inline void set_yformula(const char* value);
  inline void set_yformula(const char* value, size_t size);
  inline ::std::string* mutable_yformula();
  inline ::std::string* release_yformula();
  inline void set_allocated_yformula(::std::string* yformula);

  // required double ZLen = 19;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 19;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required bool IsCanResize = 20;
  inline bool has_iscanresize() const;
  inline void clear_iscanresize();
  static const int kIsCanResizeFieldNumber = 20;
  inline bool iscanresize() const;
  inline void set_iscanresize(bool value);

  // required double MinXLen = 21;
  inline bool has_minxlen() const;
  inline void clear_minxlen();
  static const int kMinXLenFieldNumber = 21;
  inline double minxlen() const;
  inline void set_minxlen(double value);

  // required double MaxXLen = 22;
  inline bool has_maxxlen() const;
  inline void clear_maxxlen();
  static const int kMaxXLenFieldNumber = 22;
  inline double maxxlen() const;
  inline void set_maxxlen(double value);

  // required double XLenStep = 23;
  inline bool has_xlenstep() const;
  inline void clear_xlenstep();
  static const int kXLenStepFieldNumber = 23;
  inline double xlenstep() const;
  inline void set_xlenstep(double value);

  // required double MinYLen = 24;
  inline bool has_minylen() const;
  inline void clear_minylen();
  static const int kMinYLenFieldNumber = 24;
  inline double minylen() const;
  inline void set_minylen(double value);

  // required double MaxYLen = 25;
  inline bool has_maxylen() const;
  inline void clear_maxylen();
  static const int kMaxYLenFieldNumber = 25;
  inline double maxylen() const;
  inline void set_maxylen(double value);

  // required double YLenStep = 26;
  inline bool has_ylenstep() const;
  inline void clear_ylenstep();
  static const int kYLenStepFieldNumber = 26;
  inline double ylenstep() const;
  inline void set_ylenstep(double value);

  // required int32 XDock = 27;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 27;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 28;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 28;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required string XOffsetFormula = 29;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 29;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 30;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 30;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 31;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 31;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required int32 PhotoID = 32;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 32;
  inline ::google::protobuf::int32 photoid() const;
  inline void set_photoid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DecorBoardInfo)
 private:
  inline void set_has_decorboardid();
  inline void clear_has_decorboardid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_sourcetype();
  inline void clear_has_sourcetype();
  inline void set_has_defaultypos();
  inline void clear_has_defaultypos();
  inline void set_has_decorboardcode();
  inline void clear_has_decorboardcode();
  inline void set_has_decorboardname();
  inline void clear_has_decorboardname();
  inline void set_has_decorboardmemo();
  inline void clear_has_decorboardmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_xformula();
  inline void clear_has_xformula();
  inline void set_has_yformula();
  inline void clear_has_yformula();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_iscanresize();
  inline void clear_has_iscanresize();
  inline void set_has_minxlen();
  inline void clear_has_minxlen();
  inline void set_has_maxxlen();
  inline void clear_has_maxxlen();
  inline void set_has_xlenstep();
  inline void clear_has_xlenstep();
  inline void set_has_minylen();
  inline void clear_has_minylen();
  inline void set_has_maxylen();
  inline void clear_has_maxylen();
  inline void set_has_ylenstep();
  inline void clear_has_ylenstep();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 decorboardid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;
  bool isdel_;
  bool isactive_;
  bool iscanresize_;
  double defaultypos_;
  ::std::string* decorboardcode_;
  ::std::string* decorboardname_;
  ::google::protobuf::int32 sourcetype_;
  ::google::protobuf::int32 gtypeid_;
  ::std::string* decorboardmemo_;
  ::google::protobuf::int64 vercode_;
  ::std::string* xformula_;
  ::std::string* yformula_;
  double zlen_;
  double minxlen_;
  double maxxlen_;
  double xlenstep_;
  double minylen_;
  double maxylen_;
  double ylenstep_;
  ::google::protobuf::int32 xdock_;
  ::google::protobuf::int32 ydock_;
  ::std::string* xoffsetformula_;
  ::std::string* yoffsetformula_;
  ::std::string* zoffsetformula_;
  ::google::protobuf::int32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DecorBoardInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DecorBoardMatInfo : public ::google::protobuf::Message {
 public:
  JK_DecorBoardMatInfo();
  virtual ~JK_DecorBoardMatInfo();

  JK_DecorBoardMatInfo(const JK_DecorBoardMatInfo& from);

  inline JK_DecorBoardMatInfo& operator=(const JK_DecorBoardMatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DecorBoardMatInfo& default_instance();

  void Swap(JK_DecorBoardMatInfo* other);

  // implements Message ----------------------------------------------

  JK_DecorBoardMatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DecorBoardMatInfo& from);
  void MergeFrom(const JK_DecorBoardMatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DecorBoardID = 1;
  inline bool has_decorboardid() const;
  inline void clear_decorboardid();
  static const int kDecorBoardIDFieldNumber = 1;
  inline ::google::protobuf::int32 decorboardid() const;
  inline void set_decorboardid(::google::protobuf::int32 value);

  // required int32 MatID = 2;
  inline bool has_matid() const;
  inline void clear_matid();
  static const int kMatIDFieldNumber = 2;
  inline ::google::protobuf::int32 matid() const;
  inline void set_matid(::google::protobuf::int32 value);

  // required int32 MatGType = 3;
  inline bool has_matgtype() const;
  inline void clear_matgtype();
  static const int kMatGTypeFieldNumber = 3;
  inline ::google::protobuf::int32 matgtype() const;
  inline void set_matgtype(::google::protobuf::int32 value);

  // required bool IsDefault = 4;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 4;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 5;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 5;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DecorBoardMatInfo)
 private:
  inline void set_has_decorboardid();
  inline void clear_has_decorboardid();
  inline void set_has_matid();
  inline void clear_has_matid();
  inline void set_has_matgtype();
  inline void clear_has_matgtype();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 decorboardid_;
  ::google::protobuf::int32 matid_;
  ::google::protobuf::int32 matgtype_;
  bool isdefault_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DecorBoardMatInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DecorBoardUnitInfo : public ::google::protobuf::Message {
 public:
  JK_DecorBoardUnitInfo();
  virtual ~JK_DecorBoardUnitInfo();

  JK_DecorBoardUnitInfo(const JK_DecorBoardUnitInfo& from);

  inline JK_DecorBoardUnitInfo& operator=(const JK_DecorBoardUnitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DecorBoardUnitInfo& default_instance();

  void Swap(JK_DecorBoardUnitInfo* other);

  // implements Message ----------------------------------------------

  JK_DecorBoardUnitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DecorBoardUnitInfo& from);
  void MergeFrom(const JK_DecorBoardUnitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DecorBoardUnitID = 1;
  inline bool has_decorboardunitid() const;
  inline void clear_decorboardunitid();
  static const int kDecorBoardUnitIDFieldNumber = 1;
  inline ::google::protobuf::int32 decorboardunitid() const;
  inline void set_decorboardunitid(::google::protobuf::int32 value);

  // required bool IsDel = 2;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 2;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 DecorBoardID = 3;
  inline bool has_decorboardid() const;
  inline void clear_decorboardid();
  static const int kDecorBoardIDFieldNumber = 3;
  inline ::google::protobuf::int32 decorboardid() const;
  inline void set_decorboardid(::google::protobuf::int32 value);

  // required int32 SplitType = 4;
  inline bool has_splittype() const;
  inline void clear_splittype();
  static const int kSplitTypeFieldNumber = 4;
  inline ::google::protobuf::int32 splittype() const;
  inline void set_splittype(::google::protobuf::int32 value);

  // required int32 SkinDirection = 5;
  inline bool has_skindirection() const;
  inline void clear_skindirection();
  static const int kSkinDirectionFieldNumber = 5;
  inline ::google::protobuf::int32 skindirection() const;
  inline void set_skindirection(::google::protobuf::int32 value);

  // required double ArcX = 6;
  inline bool has_arcx() const;
  inline void clear_arcx();
  static const int kArcXFieldNumber = 6;
  inline double arcx() const;
  inline void set_arcx(double value);

  // required double ArcY = 7;
  inline bool has_arcy() const;
  inline void clear_arcy();
  static const int kArcYFieldNumber = 7;
  inline double arcy() const;
  inline void set_arcy(double value);

  // required double ArcZ = 8;
  inline bool has_arcz() const;
  inline void clear_arcz();
  static const int kArcZFieldNumber = 8;
  inline double arcz() const;
  inline void set_arcz(double value);

  // required string XFormula = 9;
  inline bool has_xformula() const;
  inline void clear_xformula();
  static const int kXFormulaFieldNumber = 9;
  inline const ::std::string& xformula() const;
  inline void set_xformula(const ::std::string& value);
  inline void set_xformula(const char* value);
  inline void set_xformula(const char* value, size_t size);
  inline ::std::string* mutable_xformula();
  inline ::std::string* release_xformula();
  inline void set_allocated_xformula(::std::string* xformula);

  // required string YFormula = 10;
  inline bool has_yformula() const;
  inline void clear_yformula();
  static const int kYFormulaFieldNumber = 10;
  inline const ::std::string& yformula() const;
  inline void set_yformula(const ::std::string& value);
  inline void set_yformula(const char* value);
  inline void set_yformula(const char* value, size_t size);
  inline ::std::string* mutable_yformula();
  inline ::std::string* release_yformula();
  inline void set_allocated_yformula(::std::string* yformula);

  // required int32 XDock = 11;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 11;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 12;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 12;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 13;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 13;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required string XOffsetFormula = 14;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 14;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 15;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 15;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 16;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 16;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required int32 DecorBoardUnitIndex = 17;
  inline bool has_decorboardunitindex() const;
  inline void clear_decorboardunitindex();
  static const int kDecorBoardUnitIndexFieldNumber = 17;
  inline ::google::protobuf::int32 decorboardunitindex() const;
  inline void set_decorboardunitindex(::google::protobuf::int32 value);

  // required string DecorBoardUnitName = 18;
  inline bool has_decorboardunitname() const;
  inline void clear_decorboardunitname();
  static const int kDecorBoardUnitNameFieldNumber = 18;
  inline const ::std::string& decorboardunitname() const;
  inline void set_decorboardunitname(const ::std::string& value);
  inline void set_decorboardunitname(const char* value);
  inline void set_decorboardunitname(const char* value, size_t size);
  inline ::std::string* mutable_decorboardunitname();
  inline ::std::string* release_decorboardunitname();
  inline void set_allocated_decorboardunitname(::std::string* decorboardunitname);

  // required string DecorBoardUnitMemo = 19;
  inline bool has_decorboardunitmemo() const;
  inline void clear_decorboardunitmemo();
  static const int kDecorBoardUnitMemoFieldNumber = 19;
  inline const ::std::string& decorboardunitmemo() const;
  inline void set_decorboardunitmemo(const ::std::string& value);
  inline void set_decorboardunitmemo(const char* value);
  inline void set_decorboardunitmemo(const char* value, size_t size);
  inline ::std::string* mutable_decorboardunitmemo();
  inline ::std::string* release_decorboardunitmemo();
  inline void set_allocated_decorboardunitmemo(::std::string* decorboardunitmemo);

  // required int64 VerCode = 20;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 20;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 21;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 21;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 22;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 22;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 23;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 23;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 24;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 24;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 25;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 25;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required bool IsUseDefaultMat = 26;
  inline bool has_isusedefaultmat() const;
  inline void clear_isusedefaultmat();
  static const int kIsUseDefaultMatFieldNumber = 26;
  inline bool isusedefaultmat() const;
  inline void set_isusedefaultmat(bool value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DecorBoardUnitInfo)
 private:
  inline void set_has_decorboardunitid();
  inline void clear_has_decorboardunitid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_decorboardid();
  inline void clear_has_decorboardid();
  inline void set_has_splittype();
  inline void clear_has_splittype();
  inline void set_has_skindirection();
  inline void clear_has_skindirection();
  inline void set_has_arcx();
  inline void clear_has_arcx();
  inline void set_has_arcy();
  inline void clear_has_arcy();
  inline void set_has_arcz();
  inline void clear_has_arcz();
  inline void set_has_xformula();
  inline void clear_has_xformula();
  inline void set_has_yformula();
  inline void clear_has_yformula();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_decorboardunitindex();
  inline void clear_has_decorboardunitindex();
  inline void set_has_decorboardunitname();
  inline void clear_has_decorboardunitname();
  inline void set_has_decorboardunitmemo();
  inline void clear_has_decorboardunitmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_isusedefaultmat();
  inline void clear_has_isusedefaultmat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 decorboardunitid_;
  ::google::protobuf::int32 decorboardid_;
  ::google::protobuf::int32 splittype_;
  ::google::protobuf::int32 skindirection_;
  double arcx_;
  double arcy_;
  double arcz_;
  ::std::string* xformula_;
  ::std::string* yformula_;
  ::google::protobuf::int32 xdock_;
  ::google::protobuf::int32 ydock_;
  ::google::protobuf::int32 zdock_;
  bool isdel_;
  bool isusedefaultmat_;
  ::std::string* xoffsetformula_;
  ::std::string* yoffsetformula_;
  ::std::string* zoffsetformula_;
  ::std::string* decorboardunitname_;
  ::std::string* decorboardunitmemo_;
  ::google::protobuf::int32 decorboardunitindex_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DecorBoardUnitInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DecorBoardUnitMatInfo : public ::google::protobuf::Message {
 public:
  JK_DecorBoardUnitMatInfo();
  virtual ~JK_DecorBoardUnitMatInfo();

  JK_DecorBoardUnitMatInfo(const JK_DecorBoardUnitMatInfo& from);

  inline JK_DecorBoardUnitMatInfo& operator=(const JK_DecorBoardUnitMatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DecorBoardUnitMatInfo& default_instance();

  void Swap(JK_DecorBoardUnitMatInfo* other);

  // implements Message ----------------------------------------------

  JK_DecorBoardUnitMatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DecorBoardUnitMatInfo& from);
  void MergeFrom(const JK_DecorBoardUnitMatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DecorBoardUnitID = 1;
  inline bool has_decorboardunitid() const;
  inline void clear_decorboardunitid();
  static const int kDecorBoardUnitIDFieldNumber = 1;
  inline ::google::protobuf::int32 decorboardunitid() const;
  inline void set_decorboardunitid(::google::protobuf::int32 value);

  // required int32 MatID = 2;
  inline bool has_matid() const;
  inline void clear_matid();
  static const int kMatIDFieldNumber = 2;
  inline ::google::protobuf::int32 matid() const;
  inline void set_matid(::google::protobuf::int32 value);

  // required int32 MatGType = 3;
  inline bool has_matgtype() const;
  inline void clear_matgtype();
  static const int kMatGTypeFieldNumber = 3;
  inline ::google::protobuf::int32 matgtype() const;
  inline void set_matgtype(::google::protobuf::int32 value);

  // required bool IsDefault = 4;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 4;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int32 DefaultSealRuleID = 5;
  inline bool has_defaultsealruleid() const;
  inline void clear_defaultsealruleid();
  static const int kDefaultSealRuleIDFieldNumber = 5;
  inline ::google::protobuf::int32 defaultsealruleid() const;
  inline void set_defaultsealruleid(::google::protobuf::int32 value);

  // required int32 SkinDirection = 6;
  inline bool has_skindirection() const;
  inline void clear_skindirection();
  static const int kSkinDirectionFieldNumber = 6;
  inline ::google::protobuf::int32 skindirection() const;
  inline void set_skindirection(::google::protobuf::int32 value);

  // required int64 VerCode = 7;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 7;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 8;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 8;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DecorBoardUnitMatInfo)
 private:
  inline void set_has_decorboardunitid();
  inline void clear_has_decorboardunitid();
  inline void set_has_matid();
  inline void clear_has_matid();
  inline void set_has_matgtype();
  inline void clear_has_matgtype();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_defaultsealruleid();
  inline void clear_has_defaultsealruleid();
  inline void set_has_skindirection();
  inline void clear_has_skindirection();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 decorboardunitid_;
  ::google::protobuf::int32 matid_;
  ::google::protobuf::int32 matgtype_;
  bool isdefault_;
  ::google::protobuf::int32 defaultsealruleid_;
  ::google::protobuf::int32 skindirection_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DecorBoardUnitMatInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DecorBoardUnitSealInfo : public ::google::protobuf::Message {
 public:
  JK_DecorBoardUnitSealInfo();
  virtual ~JK_DecorBoardUnitSealInfo();

  JK_DecorBoardUnitSealInfo(const JK_DecorBoardUnitSealInfo& from);

  inline JK_DecorBoardUnitSealInfo& operator=(const JK_DecorBoardUnitSealInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DecorBoardUnitSealInfo& default_instance();

  void Swap(JK_DecorBoardUnitSealInfo* other);

  // implements Message ----------------------------------------------

  JK_DecorBoardUnitSealInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DecorBoardUnitSealInfo& from);
  void MergeFrom(const JK_DecorBoardUnitSealInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DecorBoardUnitID = 1;
  inline bool has_decorboardunitid() const;
  inline void clear_decorboardunitid();
  static const int kDecorBoardUnitIDFieldNumber = 1;
  inline ::google::protobuf::int32 decorboardunitid() const;
  inline void set_decorboardunitid(::google::protobuf::int32 value);

  // required int32 SealIndex = 2;
  inline bool has_sealindex() const;
  inline void clear_sealindex();
  static const int kSealIndexFieldNumber = 2;
  inline ::google::protobuf::int32 sealindex() const;
  inline void set_sealindex(::google::protobuf::int32 value);

  // required int32 SealType = 3;
  inline bool has_sealtype() const;
  inline void clear_sealtype();
  static const int kSealTypeFieldNumber = 3;
  inline ::google::protobuf::int32 sealtype() const;
  inline void set_sealtype(::google::protobuf::int32 value);

  // required int32 DefaultMaterialID = 4;
  inline bool has_defaultmaterialid() const;
  inline void clear_defaultmaterialid();
  static const int kDefaultMaterialIDFieldNumber = 4;
  inline ::google::protobuf::int32 defaultmaterialid() const;
  inline void set_defaultmaterialid(::google::protobuf::int32 value);

  // required int64 VerCode = 5;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 5;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 7;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 7;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 8;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 8;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 9;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 9;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 10;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 10;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required int32 SealOrder = 11;
  inline bool has_sealorder() const;
  inline void clear_sealorder();
  static const int kSealOrderFieldNumber = 11;
  inline ::google::protobuf::int32 sealorder() const;
  inline void set_sealorder(::google::protobuf::int32 value);

  // required int32 DecorBoardUnitSealID = 12;
  inline bool has_decorboardunitsealid() const;
  inline void clear_decorboardunitsealid();
  static const int kDecorBoardUnitSealIDFieldNumber = 12;
  inline ::google::protobuf::int32 decorboardunitsealid() const;
  inline void set_decorboardunitsealid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DecorBoardUnitSealInfo)
 private:
  inline void set_has_decorboardunitid();
  inline void clear_has_decorboardunitid();
  inline void set_has_sealindex();
  inline void clear_has_sealindex();
  inline void set_has_sealtype();
  inline void clear_has_sealtype();
  inline void set_has_defaultmaterialid();
  inline void clear_has_defaultmaterialid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_sealorder();
  inline void clear_has_sealorder();
  inline void set_has_decorboardunitsealid();
  inline void clear_has_decorboardunitsealid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 decorboardunitid_;
  ::google::protobuf::int32 sealindex_;
  ::google::protobuf::int32 sealtype_;
  ::google::protobuf::int32 defaultmaterialid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int32 sealorder_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 decorboardunitsealid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DecorBoardUnitSealInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DecorInfo : public ::google::protobuf::Message {
 public:
  JK_DecorInfo();
  virtual ~JK_DecorInfo();

  JK_DecorInfo(const JK_DecorInfo& from);

  inline JK_DecorInfo& operator=(const JK_DecorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DecorInfo& default_instance();

  void Swap(JK_DecorInfo* other);

  // implements Message ----------------------------------------------

  JK_DecorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DecorInfo& from);
  void MergeFrom(const JK_DecorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DecorID = 1;
  inline bool has_decorid() const;
  inline void clear_decorid();
  static const int kDecorIDFieldNumber = 1;
  inline ::google::protobuf::int32 decorid() const;
  inline void set_decorid(::google::protobuf::int32 value);

  // required int32 GroupID = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required int32 FactoryID = 3;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 3;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required bool IsActive = 4;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 4;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required bool IsSplit = 5;
  inline bool has_issplit() const;
  inline void clear_issplit();
  static const int kIsSplitFieldNumber = 5;
  inline bool issplit() const;
  inline void set_issplit(bool value);

  // required bool IsDel = 6;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 6;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 SupplyType = 7;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 7;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 8;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 8;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 ShowID = 9;
  inline bool has_showid() const;
  inline void clear_showid();
  static const int kShowIDFieldNumber = 9;
  inline ::google::protobuf::int32 showid() const;
  inline void set_showid(::google::protobuf::int32 value);

  // required int32 SkinID = 10;
  inline bool has_skinid() const;
  inline void clear_skinid();
  static const int kSkinIDFieldNumber = 10;
  inline ::google::protobuf::int32 skinid() const;
  inline void set_skinid(::google::protobuf::int32 value);

  // required int32 ModelID = 11;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 11;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required double XLen = 12;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 12;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 13;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 13;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 14;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 14;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required int32 CreatorID = 15;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 15;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 16;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 16;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 17;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 17;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 18;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 18;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string DecorCode = 19;
  inline bool has_decorcode() const;
  inline void clear_decorcode();
  static const int kDecorCodeFieldNumber = 19;
  inline const ::std::string& decorcode() const;
  inline void set_decorcode(const ::std::string& value);
  inline void set_decorcode(const char* value);
  inline void set_decorcode(const char* value, size_t size);
  inline ::std::string* mutable_decorcode();
  inline ::std::string* release_decorcode();
  inline void set_allocated_decorcode(::std::string* decorcode);

  // required string DecorName = 20;
  inline bool has_decorname() const;
  inline void clear_decorname();
  static const int kDecorNameFieldNumber = 20;
  inline const ::std::string& decorname() const;
  inline void set_decorname(const ::std::string& value);
  inline void set_decorname(const char* value);
  inline void set_decorname(const char* value, size_t size);
  inline ::std::string* mutable_decorname();
  inline ::std::string* release_decorname();
  inline void set_allocated_decorname(::std::string* decorname);

  // required string DecorMemo = 21;
  inline bool has_decormemo() const;
  inline void clear_decormemo();
  static const int kDecorMemoFieldNumber = 21;
  inline const ::std::string& decormemo() const;
  inline void set_decormemo(const ::std::string& value);
  inline void set_decormemo(const char* value);
  inline void set_decormemo(const char* value, size_t size);
  inline ::std::string* mutable_decormemo();
  inline ::std::string* release_decormemo();
  inline void set_allocated_decormemo(::std::string* decormemo);

  // required int64 VerCode = 22;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 22;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DecorInfo)
 private:
  inline void set_has_decorid();
  inline void clear_has_decorid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_issplit();
  inline void clear_has_issplit();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_showid();
  inline void clear_has_showid();
  inline void set_has_skinid();
  inline void clear_has_skinid();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_decorcode();
  inline void clear_has_decorcode();
  inline void set_has_decorname();
  inline void clear_has_decorname();
  inline void set_has_decormemo();
  inline void clear_has_decormemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 decorid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 factoryid_;
  bool isactive_;
  bool issplit_;
  bool isdel_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 showid_;
  ::google::protobuf::int32 skinid_;
  double xlen_;
  double ylen_;
  ::google::protobuf::int32 modelid_;
  ::google::protobuf::int32 creatorid_;
  double zlen_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* decorcode_;
  ::std::string* decorname_;
  ::std::string* decormemo_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DecorInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DecorLineInfo : public ::google::protobuf::Message {
 public:
  JK_DecorLineInfo();
  virtual ~JK_DecorLineInfo();

  JK_DecorLineInfo(const JK_DecorLineInfo& from);

  inline JK_DecorLineInfo& operator=(const JK_DecorLineInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DecorLineInfo& default_instance();

  void Swap(JK_DecorLineInfo* other);

  // implements Message ----------------------------------------------

  JK_DecorLineInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DecorLineInfo& from);
  void MergeFrom(const JK_DecorLineInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DecorLineID = 1;
  inline bool has_decorlineid() const;
  inline void clear_decorlineid();
  static const int kDecorLineIDFieldNumber = 1;
  inline ::google::protobuf::int32 decorlineid() const;
  inline void set_decorlineid(::google::protobuf::int32 value);

  // required int32 FactoryID = 2;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 2;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 GroupID = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 3;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required bool IsDel = 4;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 4;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsActive = 5;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 5;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required int32 GTypeID = 6;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 6;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 ShowID = 7;
  inline bool has_showid() const;
  inline void clear_showid();
  static const int kShowIDFieldNumber = 7;
  inline ::google::protobuf::int32 showid() const;
  inline void set_showid(::google::protobuf::int32 value);

  // required int32 ModelID = 8;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 8;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required double ZOffset = 9;
  inline bool has_zoffset() const;
  inline void clear_zoffset();
  static const int kZOffsetFieldNumber = 9;
  inline double zoffset() const;
  inline void set_zoffset(double value);

  // required int32 CreatorID = 10;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 10;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 11;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 11;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 12;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 12;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 13;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 13;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string DecorLineCode = 14;
  inline bool has_decorlinecode() const;
  inline void clear_decorlinecode();
  static const int kDecorLineCodeFieldNumber = 14;
  inline const ::std::string& decorlinecode() const;
  inline void set_decorlinecode(const ::std::string& value);
  inline void set_decorlinecode(const char* value);
  inline void set_decorlinecode(const char* value, size_t size);
  inline ::std::string* mutable_decorlinecode();
  inline ::std::string* release_decorlinecode();
  inline void set_allocated_decorlinecode(::std::string* decorlinecode);

  // required string DecorLineName = 15;
  inline bool has_decorlinename() const;
  inline void clear_decorlinename();
  static const int kDecorLineNameFieldNumber = 15;
  inline const ::std::string& decorlinename() const;
  inline void set_decorlinename(const ::std::string& value);
  inline void set_decorlinename(const char* value);
  inline void set_decorlinename(const char* value, size_t size);
  inline ::std::string* mutable_decorlinename();
  inline ::std::string* release_decorlinename();
  inline void set_allocated_decorlinename(::std::string* decorlinename);

  // required string DecorLineMemo = 16;
  inline bool has_decorlinememo() const;
  inline void clear_decorlinememo();
  static const int kDecorLineMemoFieldNumber = 16;
  inline const ::std::string& decorlinememo() const;
  inline void set_decorlinememo(const ::std::string& value);
  inline void set_decorlinememo(const char* value);
  inline void set_decorlinememo(const char* value, size_t size);
  inline ::std::string* mutable_decorlinememo();
  inline ::std::string* release_decorlinememo();
  inline void set_allocated_decorlinememo(::std::string* decorlinememo);

  // required int64 VerCode = 17;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 17;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required double DefaultYLen = 18;
  inline bool has_defaultylen() const;
  inline void clear_defaultylen();
  static const int kDefaultYLenFieldNumber = 18;
  inline double defaultylen() const;
  inline void set_defaultylen(double value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DecorLineInfo)
 private:
  inline void set_has_decorlineid();
  inline void clear_has_decorlineid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_showid();
  inline void clear_has_showid();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_zoffset();
  inline void clear_has_zoffset();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_decorlinecode();
  inline void clear_has_decorlinecode();
  inline void set_has_decorlinename();
  inline void clear_has_decorlinename();
  inline void set_has_decorlinememo();
  inline void clear_has_decorlinememo();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_defaultylen();
  inline void clear_has_defaultylen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 decorlineid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 groupid_;
  bool isdel_;
  bool isactive_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 showid_;
  double zoffset_;
  ::google::protobuf::int32 modelid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* decorlinecode_;
  ::std::string* decorlinename_;
  ::std::string* decorlinememo_;
  ::google::protobuf::int64 vercode_;
  double defaultylen_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DecorLineInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DecorLineMatInfo : public ::google::protobuf::Message {
 public:
  JK_DecorLineMatInfo();
  virtual ~JK_DecorLineMatInfo();

  JK_DecorLineMatInfo(const JK_DecorLineMatInfo& from);

  inline JK_DecorLineMatInfo& operator=(const JK_DecorLineMatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DecorLineMatInfo& default_instance();

  void Swap(JK_DecorLineMatInfo* other);

  // implements Message ----------------------------------------------

  JK_DecorLineMatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DecorLineMatInfo& from);
  void MergeFrom(const JK_DecorLineMatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DecorLineID = 1;
  inline bool has_decorlineid() const;
  inline void clear_decorlineid();
  static const int kDecorLineIDFieldNumber = 1;
  inline ::google::protobuf::int32 decorlineid() const;
  inline void set_decorlineid(::google::protobuf::int32 value);

  // required int32 MaterialID = 2;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 2;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required bool IsDefault = 3;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 3;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DecorLineMatInfo)
 private:
  inline void set_has_decorlineid();
  inline void clear_has_decorlineid();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 decorlineid_;
  ::google::protobuf::int32 materialid_;
  ::google::protobuf::int64 vercode_;
  bool isdefault_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DecorLineMatInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DecorUnitHWFittingMapInfo : public ::google::protobuf::Message {
 public:
  JK_DecorUnitHWFittingMapInfo();
  virtual ~JK_DecorUnitHWFittingMapInfo();

  JK_DecorUnitHWFittingMapInfo(const JK_DecorUnitHWFittingMapInfo& from);

  inline JK_DecorUnitHWFittingMapInfo& operator=(const JK_DecorUnitHWFittingMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DecorUnitHWFittingMapInfo& default_instance();

  void Swap(JK_DecorUnitHWFittingMapInfo* other);

  // implements Message ----------------------------------------------

  JK_DecorUnitHWFittingMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DecorUnitHWFittingMapInfo& from);
  void MergeFrom(const JK_DecorUnitHWFittingMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DecorBoardUnitID = 1;
  inline bool has_decorboardunitid() const;
  inline void clear_decorboardunitid();
  static const int kDecorBoardUnitIDFieldNumber = 1;
  inline ::google::protobuf::int32 decorboardunitid() const;
  inline void set_decorboardunitid(::google::protobuf::int32 value);

  // required int32 HWFittingID = 2;
  inline bool has_hwfittingid() const;
  inline void clear_hwfittingid();
  static const int kHWFittingIDFieldNumber = 2;
  inline ::google::protobuf::int32 hwfittingid() const;
  inline void set_hwfittingid(::google::protobuf::int32 value);

  // required bool IsDefault = 3;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 3;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DecorUnitHWFittingMapInfo)
 private:
  inline void set_has_decorboardunitid();
  inline void clear_has_decorboardunitid();
  inline void set_has_hwfittingid();
  inline void clear_has_hwfittingid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 decorboardunitid_;
  ::google::protobuf::int32 hwfittingid_;
  ::google::protobuf::int64 vercode_;
  bool isdefault_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DecorUnitHWFittingMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorBoardGapInfo : public ::google::protobuf::Message {
 public:
  JK_DoorBoardGapInfo();
  virtual ~JK_DoorBoardGapInfo();

  JK_DoorBoardGapInfo(const JK_DoorBoardGapInfo& from);

  inline JK_DoorBoardGapInfo& operator=(const JK_DoorBoardGapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorBoardGapInfo& default_instance();

  void Swap(JK_DoorBoardGapInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorBoardGapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorBoardGapInfo& from);
  void MergeFrom(const JK_DoorBoardGapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorBoardGapID = 1;
  inline bool has_doorboardgapid() const;
  inline void clear_doorboardgapid();
  static const int kDoorBoardGapIDFieldNumber = 1;
  inline ::google::protobuf::int32 doorboardgapid() const;
  inline void set_doorboardgapid(::google::protobuf::int32 value);

  // required int32 DoorBoardID = 2;
  inline bool has_doorboardid() const;
  inline void clear_doorboardid();
  static const int kDoorBoardIDFieldNumber = 2;
  inline ::google::protobuf::int32 doorboardid() const;
  inline void set_doorboardid(::google::protobuf::int32 value);

  // required int32 GapPos = 3;
  inline bool has_gappos() const;
  inline void clear_gappos();
  static const int kGapPosFieldNumber = 3;
  inline ::google::protobuf::int32 gappos() const;
  inline void set_gappos(::google::protobuf::int32 value);

  // required int32 GapIndex = 4;
  inline bool has_gapindex() const;
  inline void clear_gapindex();
  static const int kGapIndexFieldNumber = 4;
  inline ::google::protobuf::int32 gapindex() const;
  inline void set_gapindex(::google::protobuf::int32 value);

  // required int32 GapType = 5;
  inline bool has_gaptype() const;
  inline void clear_gaptype();
  static const int kGapTypeFieldNumber = 5;
  inline ::google::protobuf::int32 gaptype() const;
  inline void set_gaptype(::google::protobuf::int32 value);

  // required int32 GapShape = 6;
  inline bool has_gapshape() const;
  inline void clear_gapshape();
  static const int kGapShapeFieldNumber = 6;
  inline ::google::protobuf::int32 gapshape() const;
  inline void set_gapshape(::google::protobuf::int32 value);

  // required string XLenFormula = 7;
  inline bool has_xlenformula() const;
  inline void clear_xlenformula();
  static const int kXLenFormulaFieldNumber = 7;
  inline const ::std::string& xlenformula() const;
  inline void set_xlenformula(const ::std::string& value);
  inline void set_xlenformula(const char* value);
  inline void set_xlenformula(const char* value, size_t size);
  inline ::std::string* mutable_xlenformula();
  inline ::std::string* release_xlenformula();
  inline void set_allocated_xlenformula(::std::string* xlenformula);

  // required string YLenFormula = 8;
  inline bool has_ylenformula() const;
  inline void clear_ylenformula();
  static const int kYLenFormulaFieldNumber = 8;
  inline const ::std::string& ylenformula() const;
  inline void set_ylenformula(const ::std::string& value);
  inline void set_ylenformula(const char* value);
  inline void set_ylenformula(const char* value, size_t size);
  inline ::std::string* mutable_ylenformula();
  inline ::std::string* release_ylenformula();
  inline void set_allocated_ylenformula(::std::string* ylenformula);

  // required string XOffsetFormula = 9;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 9;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 10;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 10;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 11;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 11;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required int32 FactoryID = 12;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 12;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 13;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 13;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 14;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 14;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 15;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 15;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 16;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 16;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required int64 VerCode = 17;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 17;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorBoardGapInfo)
 private:
  inline void set_has_doorboardgapid();
  inline void clear_has_doorboardgapid();
  inline void set_has_doorboardid();
  inline void clear_has_doorboardid();
  inline void set_has_gappos();
  inline void clear_has_gappos();
  inline void set_has_gapindex();
  inline void clear_has_gapindex();
  inline void set_has_gaptype();
  inline void clear_has_gaptype();
  inline void set_has_gapshape();
  inline void clear_has_gapshape();
  inline void set_has_xlenformula();
  inline void clear_has_xlenformula();
  inline void set_has_ylenformula();
  inline void clear_has_ylenformula();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doorboardgapid_;
  ::google::protobuf::int32 doorboardid_;
  ::google::protobuf::int32 gappos_;
  ::google::protobuf::int32 gapindex_;
  ::google::protobuf::int32 gaptype_;
  ::google::protobuf::int32 gapshape_;
  ::std::string* xlenformula_;
  ::std::string* ylenformula_;
  ::std::string* xoffsetformula_;
  ::std::string* yoffsetformula_;
  ::std::string* zoffsetformula_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorBoardGapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorBoardInfo : public ::google::protobuf::Message {
 public:
  JK_DoorBoardInfo();
  virtual ~JK_DoorBoardInfo();

  JK_DoorBoardInfo(const JK_DoorBoardInfo& from);

  inline JK_DoorBoardInfo& operator=(const JK_DoorBoardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorBoardInfo& default_instance();

  void Swap(JK_DoorBoardInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorBoardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorBoardInfo& from);
  void MergeFrom(const JK_DoorBoardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorBoardID = 1;
  inline bool has_doorboardid() const;
  inline void clear_doorboardid();
  static const int kDoorBoardIDFieldNumber = 1;
  inline ::google::protobuf::int32 doorboardid() const;
  inline void set_doorboardid(::google::protobuf::int32 value);

  // required int32 DoorID = 2;
  inline bool has_doorid() const;
  inline void clear_doorid();
  static const int kDoorIDFieldNumber = 2;
  inline ::google::protobuf::int32 doorid() const;
  inline void set_doorid(::google::protobuf::int32 value);

  // required bool IsDel = 3;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 3;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsUseDefaultMat = 4;
  inline bool has_isusedefaultmat() const;
  inline void clear_isusedefaultmat();
  static const int kIsUseDefaultMatFieldNumber = 4;
  inline bool isusedefaultmat() const;
  inline void set_isusedefaultmat(bool value);

  // required int32 SplitType = 5;
  inline bool has_splittype() const;
  inline void clear_splittype();
  static const int kSplitTypeFieldNumber = 5;
  inline ::google::protobuf::int32 splittype() const;
  inline void set_splittype(::google::protobuf::int32 value);

  // required int32 SkinDirection = 6;
  inline bool has_skindirection() const;
  inline void clear_skindirection();
  static const int kSkinDirectionFieldNumber = 6;
  inline ::google::protobuf::int32 skindirection() const;
  inline void set_skindirection(::google::protobuf::int32 value);

  // required double ArcX = 7;
  inline bool has_arcx() const;
  inline void clear_arcx();
  static const int kArcXFieldNumber = 7;
  inline double arcx() const;
  inline void set_arcx(double value);

  // required double ArcY = 8;
  inline bool has_arcy() const;
  inline void clear_arcy();
  static const int kArcYFieldNumber = 8;
  inline double arcy() const;
  inline void set_arcy(double value);

  // required double ArcZ = 9;
  inline bool has_arcz() const;
  inline void clear_arcz();
  static const int kArcZFieldNumber = 9;
  inline double arcz() const;
  inline void set_arcz(double value);

  // required string XFormula = 10;
  inline bool has_xformula() const;
  inline void clear_xformula();
  static const int kXFormulaFieldNumber = 10;
  inline const ::std::string& xformula() const;
  inline void set_xformula(const ::std::string& value);
  inline void set_xformula(const char* value);
  inline void set_xformula(const char* value, size_t size);
  inline ::std::string* mutable_xformula();
  inline ::std::string* release_xformula();
  inline void set_allocated_xformula(::std::string* xformula);

  // required string YFormula = 11;
  inline bool has_yformula() const;
  inline void clear_yformula();
  static const int kYFormulaFieldNumber = 11;
  inline const ::std::string& yformula() const;
  inline void set_yformula(const ::std::string& value);
  inline void set_yformula(const char* value);
  inline void set_yformula(const char* value, size_t size);
  inline ::std::string* mutable_yformula();
  inline ::std::string* release_yformula();
  inline void set_allocated_yformula(::std::string* yformula);

  // required int32 XDock = 12;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 12;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 13;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 13;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 14;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 14;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required string XOffsetFormula = 15;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 15;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 16;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 16;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 17;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 17;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required int32 DoorBoardIndex = 18;
  inline bool has_doorboardindex() const;
  inline void clear_doorboardindex();
  static const int kDoorBoardIndexFieldNumber = 18;
  inline ::google::protobuf::int32 doorboardindex() const;
  inline void set_doorboardindex(::google::protobuf::int32 value);

  // required string DoorBoardName = 19;
  inline bool has_doorboardname() const;
  inline void clear_doorboardname();
  static const int kDoorBoardNameFieldNumber = 19;
  inline const ::std::string& doorboardname() const;
  inline void set_doorboardname(const ::std::string& value);
  inline void set_doorboardname(const char* value);
  inline void set_doorboardname(const char* value, size_t size);
  inline ::std::string* mutable_doorboardname();
  inline ::std::string* release_doorboardname();
  inline void set_allocated_doorboardname(::std::string* doorboardname);

  // required string DoorBoardMemo = 20;
  inline bool has_doorboardmemo() const;
  inline void clear_doorboardmemo();
  static const int kDoorBoardMemoFieldNumber = 20;
  inline const ::std::string& doorboardmemo() const;
  inline void set_doorboardmemo(const ::std::string& value);
  inline void set_doorboardmemo(const char* value);
  inline void set_doorboardmemo(const char* value, size_t size);
  inline ::std::string* mutable_doorboardmemo();
  inline ::std::string* release_doorboardmemo();
  inline void set_allocated_doorboardmemo(::std::string* doorboardmemo);

  // required int64 VerCode = 21;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 21;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 22;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 22;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 23;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 23;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 24;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 24;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 25;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 25;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 26;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 26;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorBoardInfo)
 private:
  inline void set_has_doorboardid();
  inline void clear_has_doorboardid();
  inline void set_has_doorid();
  inline void clear_has_doorid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isusedefaultmat();
  inline void clear_has_isusedefaultmat();
  inline void set_has_splittype();
  inline void clear_has_splittype();
  inline void set_has_skindirection();
  inline void clear_has_skindirection();
  inline void set_has_arcx();
  inline void clear_has_arcx();
  inline void set_has_arcy();
  inline void clear_has_arcy();
  inline void set_has_arcz();
  inline void clear_has_arcz();
  inline void set_has_xformula();
  inline void clear_has_xformula();
  inline void set_has_yformula();
  inline void clear_has_yformula();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_doorboardindex();
  inline void clear_has_doorboardindex();
  inline void set_has_doorboardname();
  inline void clear_has_doorboardname();
  inline void set_has_doorboardmemo();
  inline void clear_has_doorboardmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doorboardid_;
  ::google::protobuf::int32 doorid_;
  bool isdel_;
  bool isusedefaultmat_;
  ::google::protobuf::int32 splittype_;
  double arcx_;
  double arcy_;
  double arcz_;
  ::google::protobuf::int32 skindirection_;
  ::google::protobuf::int32 xdock_;
  ::std::string* xformula_;
  ::std::string* yformula_;
  ::google::protobuf::int32 ydock_;
  ::google::protobuf::int32 zdock_;
  ::std::string* xoffsetformula_;
  ::std::string* yoffsetformula_;
  ::std::string* zoffsetformula_;
  ::std::string* doorboardname_;
  ::std::string* doorboardmemo_;
  ::google::protobuf::int32 doorboardindex_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorBoardInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorBoardMatMapInfo : public ::google::protobuf::Message {
 public:
  JK_DoorBoardMatMapInfo();
  virtual ~JK_DoorBoardMatMapInfo();

  JK_DoorBoardMatMapInfo(const JK_DoorBoardMatMapInfo& from);

  inline JK_DoorBoardMatMapInfo& operator=(const JK_DoorBoardMatMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorBoardMatMapInfo& default_instance();

  void Swap(JK_DoorBoardMatMapInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorBoardMatMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorBoardMatMapInfo& from);
  void MergeFrom(const JK_DoorBoardMatMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorBoardID = 1;
  inline bool has_doorboardid() const;
  inline void clear_doorboardid();
  static const int kDoorBoardIDFieldNumber = 1;
  inline ::google::protobuf::int32 doorboardid() const;
  inline void set_doorboardid(::google::protobuf::int32 value);

  // required int32 MatID = 2;
  inline bool has_matid() const;
  inline void clear_matid();
  static const int kMatIDFieldNumber = 2;
  inline ::google::protobuf::int32 matid() const;
  inline void set_matid(::google::protobuf::int32 value);

  // required int32 MatGType = 3;
  inline bool has_matgtype() const;
  inline void clear_matgtype();
  static const int kMatGTypeFieldNumber = 3;
  inline ::google::protobuf::int32 matgtype() const;
  inline void set_matgtype(::google::protobuf::int32 value);

  // required bool IsDefault = 4;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 4;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 5;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 5;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorBoardMatMapInfo)
 private:
  inline void set_has_doorboardid();
  inline void clear_has_doorboardid();
  inline void set_has_matid();
  inline void clear_has_matid();
  inline void set_has_matgtype();
  inline void clear_has_matgtype();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doorboardid_;
  ::google::protobuf::int32 matid_;
  ::google::protobuf::int32 matgtype_;
  bool isdefault_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorBoardMatMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorBoardSealInfo : public ::google::protobuf::Message {
 public:
  JK_DoorBoardSealInfo();
  virtual ~JK_DoorBoardSealInfo();

  JK_DoorBoardSealInfo(const JK_DoorBoardSealInfo& from);

  inline JK_DoorBoardSealInfo& operator=(const JK_DoorBoardSealInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorBoardSealInfo& default_instance();

  void Swap(JK_DoorBoardSealInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorBoardSealInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorBoardSealInfo& from);
  void MergeFrom(const JK_DoorBoardSealInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorBoardID = 1;
  inline bool has_doorboardid() const;
  inline void clear_doorboardid();
  static const int kDoorBoardIDFieldNumber = 1;
  inline ::google::protobuf::int32 doorboardid() const;
  inline void set_doorboardid(::google::protobuf::int32 value);

  // required int32 SealOrder = 2;
  inline bool has_sealorder() const;
  inline void clear_sealorder();
  static const int kSealOrderFieldNumber = 2;
  inline ::google::protobuf::int32 sealorder() const;
  inline void set_sealorder(::google::protobuf::int32 value);

  // required int32 SealType = 3;
  inline bool has_sealtype() const;
  inline void clear_sealtype();
  static const int kSealTypeFieldNumber = 3;
  inline ::google::protobuf::int32 sealtype() const;
  inline void set_sealtype(::google::protobuf::int32 value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 6;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 6;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 7;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 7;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 8;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 8;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 9;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 9;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required int32 SealIndex = 10;
  inline bool has_sealindex() const;
  inline void clear_sealindex();
  static const int kSealIndexFieldNumber = 10;
  inline ::google::protobuf::int32 sealindex() const;
  inline void set_sealindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorBoardSealInfo)
 private:
  inline void set_has_doorboardid();
  inline void clear_has_doorboardid();
  inline void set_has_sealorder();
  inline void clear_has_sealorder();
  inline void set_has_sealtype();
  inline void clear_has_sealtype();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_sealindex();
  inline void clear_has_sealindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doorboardid_;
  ::google::protobuf::int32 sealorder_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 sealtype_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 sealindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorBoardSealInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorInfo : public ::google::protobuf::Message {
 public:
  JK_DoorInfo();
  virtual ~JK_DoorInfo();

  JK_DoorInfo(const JK_DoorInfo& from);

  inline JK_DoorInfo& operator=(const JK_DoorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorInfo& default_instance();

  void Swap(JK_DoorInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorInfo& from);
  void MergeFrom(const JK_DoorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorID = 1;
  inline bool has_doorid() const;
  inline void clear_doorid();
  static const int kDoorIDFieldNumber = 1;
  inline ::google::protobuf::int32 doorid() const;
  inline void set_doorid(::google::protobuf::int32 value);

  // required int32 GroupID = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required int32 FactoryID = 3;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 3;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required bool IsDel = 5;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 5;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsActive = 6;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 6;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required int32 GTypeID = 7;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 7;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 CombineType = 8;
  inline bool has_combinetype() const;
  inline void clear_combinetype();
  static const int kCombineTypeFieldNumber = 8;
  inline ::google::protobuf::int32 combinetype() const;
  inline void set_combinetype(::google::protobuf::int32 value);

  // required int32 PhotoID = 9;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 9;
  inline ::google::protobuf::int32 photoid() const;
  inline void set_photoid(::google::protobuf::int32 value);

  // required double VirtualContainerXLen = 10;
  inline bool has_virtualcontainerxlen() const;
  inline void clear_virtualcontainerxlen();
  static const int kVirtualContainerXLenFieldNumber = 10;
  inline double virtualcontainerxlen() const;
  inline void set_virtualcontainerxlen(double value);

  // required double VirtualContainerYLen = 11;
  inline bool has_virtualcontainerylen() const;
  inline void clear_virtualcontainerylen();
  static const int kVirtualContainerYLenFieldNumber = 11;
  inline double virtualcontainerylen() const;
  inline void set_virtualcontainerylen(double value);

  // required double VirtualContainerZLen = 12;
  inline bool has_virtualcontainerzlen() const;
  inline void clear_virtualcontainerzlen();
  static const int kVirtualContainerZLenFieldNumber = 12;
  inline double virtualcontainerzlen() const;
  inline void set_virtualcontainerzlen(double value);

  // required int32 CreatorID = 13;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 13;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 14;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 14;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 15;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 15;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 16;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 16;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string DoorCode = 17;
  inline bool has_doorcode() const;
  inline void clear_doorcode();
  static const int kDoorCodeFieldNumber = 17;
  inline const ::std::string& doorcode() const;
  inline void set_doorcode(const ::std::string& value);
  inline void set_doorcode(const char* value);
  inline void set_doorcode(const char* value, size_t size);
  inline ::std::string* mutable_doorcode();
  inline ::std::string* release_doorcode();
  inline void set_allocated_doorcode(::std::string* doorcode);

  // required string DoorName = 18;
  inline bool has_doorname() const;
  inline void clear_doorname();
  static const int kDoorNameFieldNumber = 18;
  inline const ::std::string& doorname() const;
  inline void set_doorname(const ::std::string& value);
  inline void set_doorname(const char* value);
  inline void set_doorname(const char* value, size_t size);
  inline ::std::string* mutable_doorname();
  inline ::std::string* release_doorname();
  inline void set_allocated_doorname(::std::string* doorname);

  // required string DoorMemo = 19;
  inline bool has_doormemo() const;
  inline void clear_doormemo();
  static const int kDoorMemoFieldNumber = 19;
  inline const ::std::string& doormemo() const;
  inline void set_doormemo(const ::std::string& value);
  inline void set_doormemo(const char* value);
  inline void set_doormemo(const char* value, size_t size);
  inline ::std::string* mutable_doormemo();
  inline ::std::string* release_doormemo();
  inline void set_allocated_doormemo(::std::string* doormemo);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorInfo)
 private:
  inline void set_has_doorid();
  inline void clear_has_doorid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_combinetype();
  inline void clear_has_combinetype();
  inline void set_has_photoid();
  inline void clear_has_photoid();
  inline void set_has_virtualcontainerxlen();
  inline void clear_has_virtualcontainerxlen();
  inline void set_has_virtualcontainerylen();
  inline void clear_has_virtualcontainerylen();
  inline void set_has_virtualcontainerzlen();
  inline void clear_has_virtualcontainerzlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_doorcode();
  inline void clear_has_doorcode();
  inline void set_has_doorname();
  inline void clear_has_doorname();
  inline void set_has_doormemo();
  inline void clear_has_doormemo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doorid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  bool isdel_;
  bool isactive_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 combinetype_;
  double virtualcontainerxlen_;
  double virtualcontainerylen_;
  ::google::protobuf::int32 photoid_;
  ::google::protobuf::int32 creatorid_;
  double virtualcontainerzlen_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* doorcode_;
  ::std::string* doorname_;
  ::std::string* doormemo_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorMatMapInfo : public ::google::protobuf::Message {
 public:
  JK_DoorMatMapInfo();
  virtual ~JK_DoorMatMapInfo();

  JK_DoorMatMapInfo(const JK_DoorMatMapInfo& from);

  inline JK_DoorMatMapInfo& operator=(const JK_DoorMatMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorMatMapInfo& default_instance();

  void Swap(JK_DoorMatMapInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorMatMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorMatMapInfo& from);
  void MergeFrom(const JK_DoorMatMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorID = 1;
  inline bool has_doorid() const;
  inline void clear_doorid();
  static const int kDoorIDFieldNumber = 1;
  inline ::google::protobuf::int32 doorid() const;
  inline void set_doorid(::google::protobuf::int32 value);

  // required int32 DoorMatPlanID = 2;
  inline bool has_doormatplanid() const;
  inline void clear_doormatplanid();
  static const int kDoorMatPlanIDFieldNumber = 2;
  inline ::google::protobuf::int32 doormatplanid() const;
  inline void set_doormatplanid(::google::protobuf::int32 value);

  // required bool IsDefault = 3;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 3;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorMatMapInfo)
 private:
  inline void set_has_doorid();
  inline void clear_has_doorid();
  inline void set_has_doormatplanid();
  inline void clear_has_doormatplanid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doorid_;
  ::google::protobuf::int32 doormatplanid_;
  ::google::protobuf::int64 vercode_;
  bool isdefault_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorMatMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorMatPlanHandleMapInfo : public ::google::protobuf::Message {
 public:
  JK_DoorMatPlanHandleMapInfo();
  virtual ~JK_DoorMatPlanHandleMapInfo();

  JK_DoorMatPlanHandleMapInfo(const JK_DoorMatPlanHandleMapInfo& from);

  inline JK_DoorMatPlanHandleMapInfo& operator=(const JK_DoorMatPlanHandleMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorMatPlanHandleMapInfo& default_instance();

  void Swap(JK_DoorMatPlanHandleMapInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorMatPlanHandleMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorMatPlanHandleMapInfo& from);
  void MergeFrom(const JK_DoorMatPlanHandleMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorMatPlanID = 1;
  inline bool has_doormatplanid() const;
  inline void clear_doormatplanid();
  static const int kDoorMatPlanIDFieldNumber = 1;
  inline ::google::protobuf::int32 doormatplanid() const;
  inline void set_doormatplanid(::google::protobuf::int32 value);

  // required int32 HandleID = 2;
  inline bool has_handleid() const;
  inline void clear_handleid();
  static const int kHandleIDFieldNumber = 2;
  inline ::google::protobuf::int32 handleid() const;
  inline void set_handleid(::google::protobuf::int32 value);

  // required int64 VerCode = 3;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 3;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 4;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 4;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorMatPlanHandleMapInfo)
 private:
  inline void set_has_doormatplanid();
  inline void clear_has_doormatplanid();
  inline void set_has_handleid();
  inline void clear_has_handleid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doormatplanid_;
  ::google::protobuf::int32 handleid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorMatPlanHandleMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorMatPlanInfo : public ::google::protobuf::Message {
 public:
  JK_DoorMatPlanInfo();
  virtual ~JK_DoorMatPlanInfo();

  JK_DoorMatPlanInfo(const JK_DoorMatPlanInfo& from);

  inline JK_DoorMatPlanInfo& operator=(const JK_DoorMatPlanInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorMatPlanInfo& default_instance();

  void Swap(JK_DoorMatPlanInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorMatPlanInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorMatPlanInfo& from);
  void MergeFrom(const JK_DoorMatPlanInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorMatPlanID = 1;
  inline bool has_doormatplanid() const;
  inline void clear_doormatplanid();
  static const int kDoorMatPlanIDFieldNumber = 1;
  inline ::google::protobuf::int32 doormatplanid() const;
  inline void set_doormatplanid(::google::protobuf::int32 value);

  // required int32 GroupID = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required bool IsDel = 3;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 3;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsActive = 4;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 4;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 6;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 6;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 7;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 7;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 8;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 8;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 9;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 9;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required int32 MatID = 10;
  inline bool has_matid() const;
  inline void clear_matid();
  static const int kMatIDFieldNumber = 10;
  inline ::google::protobuf::int32 matid() const;
  inline void set_matid(::google::protobuf::int32 value);

  // required int32 MatGType = 11;
  inline bool has_matgtype() const;
  inline void clear_matgtype();
  static const int kMatGTypeFieldNumber = 11;
  inline ::google::protobuf::int32 matgtype() const;
  inline void set_matgtype(::google::protobuf::int32 value);

  // required string DoorMatPlanCode = 12;
  inline bool has_doormatplancode() const;
  inline void clear_doormatplancode();
  static const int kDoorMatPlanCodeFieldNumber = 12;
  inline const ::std::string& doormatplancode() const;
  inline void set_doormatplancode(const ::std::string& value);
  inline void set_doormatplancode(const char* value);
  inline void set_doormatplancode(const char* value, size_t size);
  inline ::std::string* mutable_doormatplancode();
  inline ::std::string* release_doormatplancode();
  inline void set_allocated_doormatplancode(::std::string* doormatplancode);

  // required string DoorMatPlanName = 13;
  inline bool has_doormatplanname() const;
  inline void clear_doormatplanname();
  static const int kDoorMatPlanNameFieldNumber = 13;
  inline const ::std::string& doormatplanname() const;
  inline void set_doormatplanname(const ::std::string& value);
  inline void set_doormatplanname(const char* value);
  inline void set_doormatplanname(const char* value, size_t size);
  inline ::std::string* mutable_doormatplanname();
  inline ::std::string* release_doormatplanname();
  inline void set_allocated_doormatplanname(::std::string* doormatplanname);

  // required string DoorMatPlanMemo = 14;
  inline bool has_doormatplanmemo() const;
  inline void clear_doormatplanmemo();
  static const int kDoorMatPlanMemoFieldNumber = 14;
  inline const ::std::string& doormatplanmemo() const;
  inline void set_doormatplanmemo(const ::std::string& value);
  inline void set_doormatplanmemo(const char* value);
  inline void set_doormatplanmemo(const char* value, size_t size);
  inline ::std::string* mutable_doormatplanmemo();
  inline ::std::string* release_doormatplanmemo();
  inline void set_allocated_doormatplanmemo(::std::string* doormatplanmemo);

  // required int64 VerCode = 15;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 15;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 ModelID = 16;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 16;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required bool IsCanSeal = 17;
  inline bool has_iscanseal() const;
  inline void clear_iscanseal();
  static const int kIsCanSealFieldNumber = 17;
  inline bool iscanseal() const;
  inline void set_iscanseal(bool value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorMatPlanInfo)
 private:
  inline void set_has_doormatplanid();
  inline void clear_has_doormatplanid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_matid();
  inline void clear_has_matid();
  inline void set_has_matgtype();
  inline void clear_has_matgtype();
  inline void set_has_doormatplancode();
  inline void clear_has_doormatplancode();
  inline void set_has_doormatplanname();
  inline void clear_has_doormatplanname();
  inline void set_has_doormatplanmemo();
  inline void clear_has_doormatplanmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_iscanseal();
  inline void clear_has_iscanseal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doormatplanid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  bool isdel_;
  bool isactive_;
  bool iscanseal_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 matid_;
  ::google::protobuf::int32 matgtype_;
  ::std::string* doormatplancode_;
  ::std::string* doormatplanname_;
  ::std::string* doormatplanmemo_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 modelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorMatPlanInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorRegionHWFittingMapInfo : public ::google::protobuf::Message {
 public:
  JK_DoorRegionHWFittingMapInfo();
  virtual ~JK_DoorRegionHWFittingMapInfo();

  JK_DoorRegionHWFittingMapInfo(const JK_DoorRegionHWFittingMapInfo& from);

  inline JK_DoorRegionHWFittingMapInfo& operator=(const JK_DoorRegionHWFittingMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorRegionHWFittingMapInfo& default_instance();

  void Swap(JK_DoorRegionHWFittingMapInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorRegionHWFittingMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorRegionHWFittingMapInfo& from);
  void MergeFrom(const JK_DoorRegionHWFittingMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorSystemRegionID = 1;
  inline bool has_doorsystemregionid() const;
  inline void clear_doorsystemregionid();
  static const int kDoorSystemRegionIDFieldNumber = 1;
  inline ::google::protobuf::int32 doorsystemregionid() const;
  inline void set_doorsystemregionid(::google::protobuf::int32 value);

  // required int32 HWFittingID = 2;
  inline bool has_hwfittingid() const;
  inline void clear_hwfittingid();
  static const int kHWFittingIDFieldNumber = 2;
  inline ::google::protobuf::int32 hwfittingid() const;
  inline void set_hwfittingid(::google::protobuf::int32 value);

  // required bool IsDefault = 3;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 3;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorRegionHWFittingMapInfo)
 private:
  inline void set_has_doorsystemregionid();
  inline void clear_has_doorsystemregionid();
  inline void set_has_hwfittingid();
  inline void clear_has_hwfittingid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doorsystemregionid_;
  ::google::protobuf::int32 hwfittingid_;
  ::google::protobuf::int64 vercode_;
  bool isdefault_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorRegionHWFittingMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorSystemInfo : public ::google::protobuf::Message {
 public:
  JK_DoorSystemInfo();
  virtual ~JK_DoorSystemInfo();

  JK_DoorSystemInfo(const JK_DoorSystemInfo& from);

  inline JK_DoorSystemInfo& operator=(const JK_DoorSystemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorSystemInfo& default_instance();

  void Swap(JK_DoorSystemInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorSystemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorSystemInfo& from);
  void MergeFrom(const JK_DoorSystemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorSystemID = 1;
  inline bool has_doorsystemid() const;
  inline void clear_doorsystemid();
  static const int kDoorSystemIDFieldNumber = 1;
  inline ::google::protobuf::int32 doorsystemid() const;
  inline void set_doorsystemid(::google::protobuf::int32 value);

  // required int32 FactoryID = 2;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 2;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 3;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 3;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 GroupID = 4;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 4;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required bool IsDel = 5;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 5;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsActive = 6;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 6;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required int32 SupplyType = 7;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 7;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 MatchCabShape = 8;
  inline bool has_matchcabshape() const;
  inline void clear_matchcabshape();
  static const int kMatchCabShapeFieldNumber = 8;
  inline ::google::protobuf::int32 matchcabshape() const;
  inline void set_matchcabshape(::google::protobuf::int32 value);

  // required int32 InstallType = 9;
  inline bool has_installtype() const;
  inline void clear_installtype();
  static const int kInstallTypeFieldNumber = 9;
  inline ::google::protobuf::int32 installtype() const;
  inline void set_installtype(::google::protobuf::int32 value);

  // required double VirtualXLen = 10;
  inline bool has_virtualxlen() const;
  inline void clear_virtualxlen();
  static const int kVirtualXLenFieldNumber = 10;
  inline double virtualxlen() const;
  inline void set_virtualxlen(double value);

  // required double VirtualYLen = 11;
  inline bool has_virtualylen() const;
  inline void clear_virtualylen();
  static const int kVirtualYLenFieldNumber = 11;
  inline double virtualylen() const;
  inline void set_virtualylen(double value);

  // required double VirtualShapeXLen = 12;
  inline bool has_virtualshapexlen() const;
  inline void clear_virtualshapexlen();
  static const int kVirtualShapeXLenFieldNumber = 12;
  inline double virtualshapexlen() const;
  inline void set_virtualshapexlen(double value);

  // required double VirtualShapeZLen = 13;
  inline bool has_virtualshapezlen() const;
  inline void clear_virtualshapezlen();
  static const int kVirtualShapeZLenFieldNumber = 13;
  inline double virtualshapezlen() const;
  inline void set_virtualshapezlen(double value);

  // required int32 CreatorID = 14;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 14;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 15;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 15;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 16;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 16;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 17;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 17;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string DoorSystemCode = 18;
  inline bool has_doorsystemcode() const;
  inline void clear_doorsystemcode();
  static const int kDoorSystemCodeFieldNumber = 18;
  inline const ::std::string& doorsystemcode() const;
  inline void set_doorsystemcode(const ::std::string& value);
  inline void set_doorsystemcode(const char* value);
  inline void set_doorsystemcode(const char* value, size_t size);
  inline ::std::string* mutable_doorsystemcode();
  inline ::std::string* release_doorsystemcode();
  inline void set_allocated_doorsystemcode(::std::string* doorsystemcode);

  // required string DoorSystemName = 19;
  inline bool has_doorsystemname() const;
  inline void clear_doorsystemname();
  static const int kDoorSystemNameFieldNumber = 19;
  inline const ::std::string& doorsystemname() const;
  inline void set_doorsystemname(const ::std::string& value);
  inline void set_doorsystemname(const char* value);
  inline void set_doorsystemname(const char* value, size_t size);
  inline ::std::string* mutable_doorsystemname();
  inline ::std::string* release_doorsystemname();
  inline void set_allocated_doorsystemname(::std::string* doorsystemname);

  // required string DoorSystemMemo = 20;
  inline bool has_doorsystemmemo() const;
  inline void clear_doorsystemmemo();
  static const int kDoorSystemMemoFieldNumber = 20;
  inline const ::std::string& doorsystemmemo() const;
  inline void set_doorsystemmemo(const ::std::string& value);
  inline void set_doorsystemmemo(const char* value);
  inline void set_doorsystemmemo(const char* value, size_t size);
  inline ::std::string* mutable_doorsystemmemo();
  inline ::std::string* release_doorsystemmemo();
  inline void set_allocated_doorsystemmemo(::std::string* doorsystemmemo);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorSystemInfo)
 private:
  inline void set_has_doorsystemid();
  inline void clear_has_doorsystemid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_matchcabshape();
  inline void clear_has_matchcabshape();
  inline void set_has_installtype();
  inline void clear_has_installtype();
  inline void set_has_virtualxlen();
  inline void clear_has_virtualxlen();
  inline void set_has_virtualylen();
  inline void clear_has_virtualylen();
  inline void set_has_virtualshapexlen();
  inline void clear_has_virtualshapexlen();
  inline void set_has_virtualshapezlen();
  inline void clear_has_virtualshapezlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_doorsystemcode();
  inline void clear_has_doorsystemcode();
  inline void set_has_doorsystemname();
  inline void clear_has_doorsystemname();
  inline void set_has_doorsystemmemo();
  inline void clear_has_doorsystemmemo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doorsystemid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 groupid_;
  bool isdel_;
  bool isactive_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 matchcabshape_;
  double virtualxlen_;
  double virtualylen_;
  ::google::protobuf::int32 installtype_;
  ::google::protobuf::int32 creatorid_;
  double virtualshapexlen_;
  double virtualshapezlen_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* doorsystemcode_;
  ::std::string* doorsystemname_;
  ::std::string* doorsystemmemo_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorSystemInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorSystemMatMapInfo : public ::google::protobuf::Message {
 public:
  JK_DoorSystemMatMapInfo();
  virtual ~JK_DoorSystemMatMapInfo();

  JK_DoorSystemMatMapInfo(const JK_DoorSystemMatMapInfo& from);

  inline JK_DoorSystemMatMapInfo& operator=(const JK_DoorSystemMatMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorSystemMatMapInfo& default_instance();

  void Swap(JK_DoorSystemMatMapInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorSystemMatMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorSystemMatMapInfo& from);
  void MergeFrom(const JK_DoorSystemMatMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorSystemID = 1;
  inline bool has_doorsystemid() const;
  inline void clear_doorsystemid();
  static const int kDoorSystemIDFieldNumber = 1;
  inline ::google::protobuf::int32 doorsystemid() const;
  inline void set_doorsystemid(::google::protobuf::int32 value);

  // required int32 DoorMatPlanID = 2;
  inline bool has_doormatplanid() const;
  inline void clear_doormatplanid();
  static const int kDoorMatPlanIDFieldNumber = 2;
  inline ::google::protobuf::int32 doormatplanid() const;
  inline void set_doormatplanid(::google::protobuf::int32 value);

  // required bool IsDefault = 3;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 3;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorSystemMatMapInfo)
 private:
  inline void set_has_doorsystemid();
  inline void clear_has_doorsystemid();
  inline void set_has_doormatplanid();
  inline void clear_has_doormatplanid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doorsystemid_;
  ::google::protobuf::int32 doormatplanid_;
  ::google::protobuf::int64 vercode_;
  bool isdefault_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorSystemMatMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorSystemRegionDoorMapInfo : public ::google::protobuf::Message {
 public:
  JK_DoorSystemRegionDoorMapInfo();
  virtual ~JK_DoorSystemRegionDoorMapInfo();

  JK_DoorSystemRegionDoorMapInfo(const JK_DoorSystemRegionDoorMapInfo& from);

  inline JK_DoorSystemRegionDoorMapInfo& operator=(const JK_DoorSystemRegionDoorMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorSystemRegionDoorMapInfo& default_instance();

  void Swap(JK_DoorSystemRegionDoorMapInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorSystemRegionDoorMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorSystemRegionDoorMapInfo& from);
  void MergeFrom(const JK_DoorSystemRegionDoorMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorSystemRegionID = 1;
  inline bool has_doorsystemregionid() const;
  inline void clear_doorsystemregionid();
  static const int kDoorSystemRegionIDFieldNumber = 1;
  inline ::google::protobuf::int32 doorsystemregionid() const;
  inline void set_doorsystemregionid(::google::protobuf::int32 value);

  // required int32 DoorID = 2;
  inline bool has_doorid() const;
  inline void clear_doorid();
  static const int kDoorIDFieldNumber = 2;
  inline ::google::protobuf::int32 doorid() const;
  inline void set_doorid(::google::protobuf::int32 value);

  // required bool IsDefault = 3;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 3;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorSystemRegionDoorMapInfo)
 private:
  inline void set_has_doorsystemregionid();
  inline void clear_has_doorsystemregionid();
  inline void set_has_doorid();
  inline void clear_has_doorid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doorsystemregionid_;
  ::google::protobuf::int32 doorid_;
  ::google::protobuf::int64 vercode_;
  bool isdefault_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorSystemRegionDoorMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorSystemRegionInfo : public ::google::protobuf::Message {
 public:
  JK_DoorSystemRegionInfo();
  virtual ~JK_DoorSystemRegionInfo();

  JK_DoorSystemRegionInfo(const JK_DoorSystemRegionInfo& from);

  inline JK_DoorSystemRegionInfo& operator=(const JK_DoorSystemRegionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorSystemRegionInfo& default_instance();

  void Swap(JK_DoorSystemRegionInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorSystemRegionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorSystemRegionInfo& from);
  void MergeFrom(const JK_DoorSystemRegionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorSystemRegionID = 1;
  inline bool has_doorsystemregionid() const;
  inline void clear_doorsystemregionid();
  static const int kDoorSystemRegionIDFieldNumber = 1;
  inline ::google::protobuf::int32 doorsystemregionid() const;
  inline void set_doorsystemregionid(::google::protobuf::int32 value);

  // required int32 DoorSystemID = 2;
  inline bool has_doorsystemid() const;
  inline void clear_doorsystemid();
  static const int kDoorSystemIDFieldNumber = 2;
  inline ::google::protobuf::int32 doorsystemid() const;
  inline void set_doorsystemid(::google::protobuf::int32 value);

  // required int32 ParentID = 3;
  inline bool has_parentid() const;
  inline void clear_parentid();
  static const int kParentIDFieldNumber = 3;
  inline ::google::protobuf::int32 parentid() const;
  inline void set_parentid(::google::protobuf::int32 value);

  // required bool IsDel = 4;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 4;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 RegionIndex = 5;
  inline bool has_regionindex() const;
  inline void clear_regionindex();
  static const int kRegionIndexFieldNumber = 5;
  inline ::google::protobuf::int32 regionindex() const;
  inline void set_regionindex(::google::protobuf::int32 value);

  // required int32 CutDirection = 6;
  inline bool has_cutdirection() const;
  inline void clear_cutdirection();
  static const int kCutDirectionFieldNumber = 6;
  inline ::google::protobuf::int32 cutdirection() const;
  inline void set_cutdirection(::google::protobuf::int32 value);

  // required string CutFormula = 7;
  inline bool has_cutformula() const;
  inline void clear_cutformula();
  static const int kCutFormulaFieldNumber = 7;
  inline const ::std::string& cutformula() const;
  inline void set_cutformula(const ::std::string& value);
  inline void set_cutformula(const char* value);
  inline void set_cutformula(const char* value, size_t size);
  inline ::std::string* mutable_cutformula();
  inline ::std::string* release_cutformula();
  inline void set_allocated_cutformula(::std::string* cutformula);

  // required bool IsSlide = 8;
  inline bool has_isslide() const;
  inline void clear_isslide();
  static const int kIsSlideFieldNumber = 8;
  inline bool isslide() const;
  inline void set_isslide(bool value);

  // required bool IsRound = 9;
  inline bool has_isround() const;
  inline void clear_isround();
  static const int kIsRoundFieldNumber = 9;
  inline bool isround() const;
  inline void set_isround(bool value);

  // required int32 LenPrecision = 10;
  inline bool has_lenprecision() const;
  inline void clear_lenprecision();
  static const int kLenPrecisionFieldNumber = 10;
  inline ::google::protobuf::int32 lenprecision() const;
  inline void set_lenprecision(::google::protobuf::int32 value);

  // required int32 OpenDoorType = 11;
  inline bool has_opendoortype() const;
  inline void clear_opendoortype();
  static const int kOpenDoorTypeFieldNumber = 11;
  inline ::google::protobuf::int32 opendoortype() const;
  inline void set_opendoortype(::google::protobuf::int32 value);

  // required double XAdjustLen = 12;
  inline bool has_xadjustlen() const;
  inline void clear_xadjustlen();
  static const int kXAdjustLenFieldNumber = 12;
  inline double xadjustlen() const;
  inline void set_xadjustlen(double value);

  // required double YAdjustLen = 13;
  inline bool has_yadjustlen() const;
  inline void clear_yadjustlen();
  static const int kYAdjustLenFieldNumber = 13;
  inline double yadjustlen() const;
  inline void set_yadjustlen(double value);

  // required int32 XDock = 14;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 14;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 15;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 15;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 16;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 16;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required string XOffsetFormula = 17;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 17;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 18;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 18;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 19;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 19;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required bool IsCanResize = 20;
  inline bool has_iscanresize() const;
  inline void clear_iscanresize();
  static const int kIsCanResizeFieldNumber = 20;
  inline bool iscanresize() const;
  inline void set_iscanresize(bool value);

  // required int32 DoorFunction = 21;
  inline bool has_doorfunction() const;
  inline void clear_doorfunction();
  static const int kDoorFunctionFieldNumber = 21;
  inline ::google::protobuf::int32 doorfunction() const;
  inline void set_doorfunction(::google::protobuf::int32 value);

  // required int64 VerCode = 22;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 22;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 23;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 23;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 24;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 24;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 25;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 25;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 26;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 26;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 27;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 27;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required int32 HandleXDock = 28;
  inline bool has_handlexdock() const;
  inline void clear_handlexdock();
  static const int kHandleXDockFieldNumber = 28;
  inline ::google::protobuf::int32 handlexdock() const;
  inline void set_handlexdock(::google::protobuf::int32 value);

  // required int32 HandleYDock = 29;
  inline bool has_handleydock() const;
  inline void clear_handleydock();
  static const int kHandleYDockFieldNumber = 29;
  inline ::google::protobuf::int32 handleydock() const;
  inline void set_handleydock(::google::protobuf::int32 value);

  // required int32 HandleZDock = 30;
  inline bool has_handlezdock() const;
  inline void clear_handlezdock();
  static const int kHandleZDockFieldNumber = 30;
  inline ::google::protobuf::int32 handlezdock() const;
  inline void set_handlezdock(::google::protobuf::int32 value);

  // required string HandleXOffsetFormula = 31;
  inline bool has_handlexoffsetformula() const;
  inline void clear_handlexoffsetformula();
  static const int kHandleXOffsetFormulaFieldNumber = 31;
  inline const ::std::string& handlexoffsetformula() const;
  inline void set_handlexoffsetformula(const ::std::string& value);
  inline void set_handlexoffsetformula(const char* value);
  inline void set_handlexoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_handlexoffsetformula();
  inline ::std::string* release_handlexoffsetformula();
  inline void set_allocated_handlexoffsetformula(::std::string* handlexoffsetformula);

  // required string HandleYOffsetFormula = 32;
  inline bool has_handleyoffsetformula() const;
  inline void clear_handleyoffsetformula();
  static const int kHandleYOffsetFormulaFieldNumber = 32;
  inline const ::std::string& handleyoffsetformula() const;
  inline void set_handleyoffsetformula(const ::std::string& value);
  inline void set_handleyoffsetformula(const char* value);
  inline void set_handleyoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_handleyoffsetformula();
  inline ::std::string* release_handleyoffsetformula();
  inline void set_allocated_handleyoffsetformula(::std::string* handleyoffsetformula);

  // required string HandleZOffsetFormula = 33;
  inline bool has_handlezoffsetformula() const;
  inline void clear_handlezoffsetformula();
  static const int kHandleZOffsetFormulaFieldNumber = 33;
  inline const ::std::string& handlezoffsetformula() const;
  inline void set_handlezoffsetformula(const ::std::string& value);
  inline void set_handlezoffsetformula(const char* value);
  inline void set_handlezoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_handlezoffsetformula();
  inline ::std::string* release_handlezoffsetformula();
  inline void set_allocated_handlezoffsetformula(::std::string* handlezoffsetformula);

  // required double ZLen = 34;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 34;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required int32 DoorBoardMatType = 35;
  inline bool has_doorboardmattype() const;
  inline void clear_doorboardmattype();
  static const int kDoorBoardMatTypeFieldNumber = 35;
  inline ::google::protobuf::int32 doorboardmattype() const;
  inline void set_doorboardmattype(::google::protobuf::int32 value);

  // required int32 DoorBoardMatID = 36;
  inline bool has_doorboardmatid() const;
  inline void clear_doorboardmatid();
  static const int kDoorBoardMatIDFieldNumber = 36;
  inline ::google::protobuf::int32 doorboardmatid() const;
  inline void set_doorboardmatid(::google::protobuf::int32 value);

  // required bool IsUseCustomThick = 37;
  inline bool has_isusecustomthick() const;
  inline void clear_isusecustomthick();
  static const int kIsUseCustomThickFieldNumber = 37;
  inline bool isusecustomthick() const;
  inline void set_isusecustomthick(bool value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorSystemRegionInfo)
 private:
  inline void set_has_doorsystemregionid();
  inline void clear_has_doorsystemregionid();
  inline void set_has_doorsystemid();
  inline void clear_has_doorsystemid();
  inline void set_has_parentid();
  inline void clear_has_parentid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_regionindex();
  inline void clear_has_regionindex();
  inline void set_has_cutdirection();
  inline void clear_has_cutdirection();
  inline void set_has_cutformula();
  inline void clear_has_cutformula();
  inline void set_has_isslide();
  inline void clear_has_isslide();
  inline void set_has_isround();
  inline void clear_has_isround();
  inline void set_has_lenprecision();
  inline void clear_has_lenprecision();
  inline void set_has_opendoortype();
  inline void clear_has_opendoortype();
  inline void set_has_xadjustlen();
  inline void clear_has_xadjustlen();
  inline void set_has_yadjustlen();
  inline void clear_has_yadjustlen();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_iscanresize();
  inline void clear_has_iscanresize();
  inline void set_has_doorfunction();
  inline void clear_has_doorfunction();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_handlexdock();
  inline void clear_has_handlexdock();
  inline void set_has_handleydock();
  inline void clear_has_handleydock();
  inline void set_has_handlezdock();
  inline void clear_has_handlezdock();
  inline void set_has_handlexoffsetformula();
  inline void clear_has_handlexoffsetformula();
  inline void set_has_handleyoffsetformula();
  inline void clear_has_handleyoffsetformula();
  inline void set_has_handlezoffsetformula();
  inline void clear_has_handlezoffsetformula();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_doorboardmattype();
  inline void clear_has_doorboardmattype();
  inline void set_has_doorboardmatid();
  inline void clear_has_doorboardmatid();
  inline void set_has_isusecustomthick();
  inline void clear_has_isusecustomthick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doorsystemregionid_;
  ::google::protobuf::int32 doorsystemid_;
  ::google::protobuf::int32 parentid_;
  ::google::protobuf::int32 regionindex_;
  ::std::string* cutformula_;
  ::google::protobuf::int32 cutdirection_;
  ::google::protobuf::int32 lenprecision_;
  bool isdel_;
  bool isslide_;
  bool isround_;
  bool iscanresize_;
  ::google::protobuf::int32 opendoortype_;
  double xadjustlen_;
  double yadjustlen_;
  ::google::protobuf::int32 xdock_;
  ::google::protobuf::int32 ydock_;
  ::std::string* xoffsetformula_;
  ::std::string* yoffsetformula_;
  ::google::protobuf::int32 zdock_;
  ::google::protobuf::int32 doorfunction_;
  ::std::string* zoffsetformula_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int32 handlexdock_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 handleydock_;
  ::google::protobuf::int32 handlezdock_;
  ::std::string* handlexoffsetformula_;
  ::std::string* handleyoffsetformula_;
  ::std::string* handlezoffsetformula_;
  double zlen_;
  ::google::protobuf::int32 doorboardmattype_;
  ::google::protobuf::int32 doorboardmatid_;
  bool isusecustomthick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(37 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorSystemRegionInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorSystemRegionSlideMapInfo : public ::google::protobuf::Message {
 public:
  JK_DoorSystemRegionSlideMapInfo();
  virtual ~JK_DoorSystemRegionSlideMapInfo();

  JK_DoorSystemRegionSlideMapInfo(const JK_DoorSystemRegionSlideMapInfo& from);

  inline JK_DoorSystemRegionSlideMapInfo& operator=(const JK_DoorSystemRegionSlideMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorSystemRegionSlideMapInfo& default_instance();

  void Swap(JK_DoorSystemRegionSlideMapInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorSystemRegionSlideMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorSystemRegionSlideMapInfo& from);
  void MergeFrom(const JK_DoorSystemRegionSlideMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorSystemRegionID = 1;
  inline bool has_doorsystemregionid() const;
  inline void clear_doorsystemregionid();
  static const int kDoorSystemRegionIDFieldNumber = 1;
  inline ::google::protobuf::int32 doorsystemregionid() const;
  inline void set_doorsystemregionid(::google::protobuf::int32 value);

  // required int32 SlideID = 2;
  inline bool has_slideid() const;
  inline void clear_slideid();
  static const int kSlideIDFieldNumber = 2;
  inline ::google::protobuf::int32 slideid() const;
  inline void set_slideid(::google::protobuf::int32 value);

  // required int32 SlidePosition = 3;
  inline bool has_slideposition() const;
  inline void clear_slideposition();
  static const int kSlidePositionFieldNumber = 3;
  inline ::google::protobuf::int32 slideposition() const;
  inline void set_slideposition(::google::protobuf::int32 value);

  // required bool IsDefault = 4;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 4;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 5;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 5;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorSystemRegionSlideMapInfo)
 private:
  inline void set_has_doorsystemregionid();
  inline void clear_has_doorsystemregionid();
  inline void set_has_slideid();
  inline void clear_has_slideid();
  inline void set_has_slideposition();
  inline void clear_has_slideposition();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doorsystemregionid_;
  ::google::protobuf::int32 slideid_;
  ::google::protobuf::int32 slideposition_;
  bool isdefault_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorSystemRegionSlideMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_DoorSystemRegionSlidePositionSizeInfo : public ::google::protobuf::Message {
 public:
  JK_DoorSystemRegionSlidePositionSizeInfo();
  virtual ~JK_DoorSystemRegionSlidePositionSizeInfo();

  JK_DoorSystemRegionSlidePositionSizeInfo(const JK_DoorSystemRegionSlidePositionSizeInfo& from);

  inline JK_DoorSystemRegionSlidePositionSizeInfo& operator=(const JK_DoorSystemRegionSlidePositionSizeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_DoorSystemRegionSlidePositionSizeInfo& default_instance();

  void Swap(JK_DoorSystemRegionSlidePositionSizeInfo* other);

  // implements Message ----------------------------------------------

  JK_DoorSystemRegionSlidePositionSizeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_DoorSystemRegionSlidePositionSizeInfo& from);
  void MergeFrom(const JK_DoorSystemRegionSlidePositionSizeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 DoorSystemRegionID = 1;
  inline bool has_doorsystemregionid() const;
  inline void clear_doorsystemregionid();
  static const int kDoorSystemRegionIDFieldNumber = 1;
  inline ::google::protobuf::int32 doorsystemregionid() const;
  inline void set_doorsystemregionid(::google::protobuf::int32 value);

  // required int32 SlidePosition = 2;
  inline bool has_slideposition() const;
  inline void clear_slideposition();
  static const int kSlidePositionFieldNumber = 2;
  inline ::google::protobuf::int32 slideposition() const;
  inline void set_slideposition(::google::protobuf::int32 value);

  // required double XAdjustLen = 3;
  inline bool has_xadjustlen() const;
  inline void clear_xadjustlen();
  static const int kXAdjustLenFieldNumber = 3;
  inline double xadjustlen() const;
  inline void set_xadjustlen(double value);

  // required int32 XDock = 4;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 4;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 5;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 5;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 6;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 6;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required string XOffsetFormula = 7;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 7;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 8;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 8;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 9;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 9;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required int64 VerCode = 10;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 10;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 11;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 11;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 12;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 12;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 13;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 13;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 14;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 14;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 15;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 15;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_DoorSystemRegionSlidePositionSizeInfo)
 private:
  inline void set_has_doorsystemregionid();
  inline void clear_has_doorsystemregionid();
  inline void set_has_slideposition();
  inline void clear_has_slideposition();
  inline void set_has_xadjustlen();
  inline void clear_has_xadjustlen();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 doorsystemregionid_;
  ::google::protobuf::int32 slideposition_;
  double xadjustlen_;
  ::google::protobuf::int32 xdock_;
  ::google::protobuf::int32 ydock_;
  ::std::string* xoffsetformula_;
  ::std::string* yoffsetformula_;
  ::google::protobuf::int32 zdock_;
  ::google::protobuf::int32 factoryid_;
  ::std::string* zoffsetformula_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_DoorSystemRegionSlidePositionSizeInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_FNFittingInfo : public ::google::protobuf::Message {
 public:
  JK_FNFittingInfo();
  virtual ~JK_FNFittingInfo();

  JK_FNFittingInfo(const JK_FNFittingInfo& from);

  inline JK_FNFittingInfo& operator=(const JK_FNFittingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_FNFittingInfo& default_instance();

  void Swap(JK_FNFittingInfo* other);

  // implements Message ----------------------------------------------

  JK_FNFittingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_FNFittingInfo& from);
  void MergeFrom(const JK_FNFittingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FNFittingID = 1;
  inline bool has_fnfittingid() const;
  inline void clear_fnfittingid();
  static const int kFNFittingIDFieldNumber = 1;
  inline ::google::protobuf::int32 fnfittingid() const;
  inline void set_fnfittingid(::google::protobuf::int32 value);

  // required int32 FactoryID = 2;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 2;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 GroupID = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 3;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required bool IsDel = 4;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 4;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsActive = 5;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 5;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required bool IsSplit = 6;
  inline bool has_issplit() const;
  inline void clear_issplit();
  static const int kIsSplitFieldNumber = 6;
  inline bool issplit() const;
  inline void set_issplit(bool value);

  // required int32 SupplyType = 7;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 7;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 8;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 8;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required bool IsEntire = 9;
  inline bool has_isentire() const;
  inline void clear_isentire();
  static const int kIsEntireFieldNumber = 9;
  inline bool isentire() const;
  inline void set_isentire(bool value);

  // required int32 ShowID = 10;
  inline bool has_showid() const;
  inline void clear_showid();
  static const int kShowIDFieldNumber = 10;
  inline ::google::protobuf::int32 showid() const;
  inline void set_showid(::google::protobuf::int32 value);

  // required int32 ModelID = 11;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 11;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required double XLen = 12;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 12;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 13;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 13;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 14;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 14;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required double MinInstallX = 15;
  inline bool has_mininstallx() const;
  inline void clear_mininstallx();
  static const int kMinInstallXFieldNumber = 15;
  inline double mininstallx() const;
  inline void set_mininstallx(double value);

  // required double MinInstallY = 16;
  inline bool has_mininstally() const;
  inline void clear_mininstally();
  static const int kMinInstallYFieldNumber = 16;
  inline double mininstally() const;
  inline void set_mininstally(double value);

  // required double MinInstallZ = 17;
  inline bool has_mininstallz() const;
  inline void clear_mininstallz();
  static const int kMinInstallZFieldNumber = 17;
  inline double mininstallz() const;
  inline void set_mininstallz(double value);

  // required double MinXLen = 18;
  inline bool has_minxlen() const;
  inline void clear_minxlen();
  static const int kMinXLenFieldNumber = 18;
  inline double minxlen() const;
  inline void set_minxlen(double value);

  // required double MaxXLen = 19;
  inline bool has_maxxlen() const;
  inline void clear_maxxlen();
  static const int kMaxXLenFieldNumber = 19;
  inline double maxxlen() const;
  inline void set_maxxlen(double value);

  // required double MinYLen = 20;
  inline bool has_minylen() const;
  inline void clear_minylen();
  static const int kMinYLenFieldNumber = 20;
  inline double minylen() const;
  inline void set_minylen(double value);

  // required double MaxYLen = 21;
  inline bool has_maxylen() const;
  inline void clear_maxylen();
  static const int kMaxYLenFieldNumber = 21;
  inline double maxylen() const;
  inline void set_maxylen(double value);

  // required double MinZLen = 22;
  inline bool has_minzlen() const;
  inline void clear_minzlen();
  static const int kMinZLenFieldNumber = 22;
  inline double minzlen() const;
  inline void set_minzlen(double value);

  // required double MaxZLen = 23;
  inline bool has_maxzlen() const;
  inline void clear_maxzlen();
  static const int kMaxZLenFieldNumber = 23;
  inline double maxzlen() const;
  inline void set_maxzlen(double value);

  // required bool IsMatchXLen = 24;
  inline bool has_ismatchxlen() const;
  inline void clear_ismatchxlen();
  static const int kIsMatchXLenFieldNumber = 24;
  inline bool ismatchxlen() const;
  inline void set_ismatchxlen(bool value);

  // required bool IsMatchYLen = 25;
  inline bool has_ismatchylen() const;
  inline void clear_ismatchylen();
  static const int kIsMatchYLenFieldNumber = 25;
  inline bool ismatchylen() const;
  inline void set_ismatchylen(bool value);

  // required bool IsMatchZLen = 26;
  inline bool has_ismatchzlen() const;
  inline void clear_ismatchzlen();
  static const int kIsMatchZLenFieldNumber = 26;
  inline bool ismatchzlen() const;
  inline void set_ismatchzlen(bool value);

  // required double DefaultYPos = 27;
  inline bool has_defaultypos() const;
  inline void clear_defaultypos();
  static const int kDefaultYPosFieldNumber = 27;
  inline double defaultypos() const;
  inline void set_defaultypos(double value);

  // required int32 CreatorID = 28;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 28;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 29;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 29;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 30;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 30;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 31;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 31;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string FNFittingCode = 32;
  inline bool has_fnfittingcode() const;
  inline void clear_fnfittingcode();
  static const int kFNFittingCodeFieldNumber = 32;
  inline const ::std::string& fnfittingcode() const;
  inline void set_fnfittingcode(const ::std::string& value);
  inline void set_fnfittingcode(const char* value);
  inline void set_fnfittingcode(const char* value, size_t size);
  inline ::std::string* mutable_fnfittingcode();
  inline ::std::string* release_fnfittingcode();
  inline void set_allocated_fnfittingcode(::std::string* fnfittingcode);

  // required string FNFittingName = 33;
  inline bool has_fnfittingname() const;
  inline void clear_fnfittingname();
  static const int kFNFittingNameFieldNumber = 33;
  inline const ::std::string& fnfittingname() const;
  inline void set_fnfittingname(const ::std::string& value);
  inline void set_fnfittingname(const char* value);
  inline void set_fnfittingname(const char* value, size_t size);
  inline ::std::string* mutable_fnfittingname();
  inline ::std::string* release_fnfittingname();
  inline void set_allocated_fnfittingname(::std::string* fnfittingname);

  // required string FNFittingMemo = 34;
  inline bool has_fnfittingmemo() const;
  inline void clear_fnfittingmemo();
  static const int kFNFittingMemoFieldNumber = 34;
  inline const ::std::string& fnfittingmemo() const;
  inline void set_fnfittingmemo(const ::std::string& value);
  inline void set_fnfittingmemo(const char* value);
  inline void set_fnfittingmemo(const char* value, size_t size);
  inline ::std::string* mutable_fnfittingmemo();
  inline ::std::string* release_fnfittingmemo();
  inline void set_allocated_fnfittingmemo(::std::string* fnfittingmemo);

  // required int64 VerCode = 35;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 35;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_FNFittingInfo)
 private:
  inline void set_has_fnfittingid();
  inline void clear_has_fnfittingid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_issplit();
  inline void clear_has_issplit();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_isentire();
  inline void clear_has_isentire();
  inline void set_has_showid();
  inline void clear_has_showid();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_mininstallx();
  inline void clear_has_mininstallx();
  inline void set_has_mininstally();
  inline void clear_has_mininstally();
  inline void set_has_mininstallz();
  inline void clear_has_mininstallz();
  inline void set_has_minxlen();
  inline void clear_has_minxlen();
  inline void set_has_maxxlen();
  inline void clear_has_maxxlen();
  inline void set_has_minylen();
  inline void clear_has_minylen();
  inline void set_has_maxylen();
  inline void clear_has_maxylen();
  inline void set_has_minzlen();
  inline void clear_has_minzlen();
  inline void set_has_maxzlen();
  inline void clear_has_maxzlen();
  inline void set_has_ismatchxlen();
  inline void clear_has_ismatchxlen();
  inline void set_has_ismatchylen();
  inline void clear_has_ismatchylen();
  inline void set_has_ismatchzlen();
  inline void clear_has_ismatchzlen();
  inline void set_has_defaultypos();
  inline void clear_has_defaultypos();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_fnfittingcode();
  inline void clear_has_fnfittingcode();
  inline void set_has_fnfittingname();
  inline void clear_has_fnfittingname();
  inline void set_has_fnfittingmemo();
  inline void clear_has_fnfittingmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fnfittingid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 groupid_;
  bool isdel_;
  bool isactive_;
  bool issplit_;
  bool isentire_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 showid_;
  ::google::protobuf::int32 modelid_;
  double xlen_;
  double ylen_;
  double zlen_;
  double mininstallx_;
  double mininstally_;
  double mininstallz_;
  double minxlen_;
  double maxxlen_;
  double minylen_;
  double maxylen_;
  double minzlen_;
  double maxzlen_;
  bool ismatchxlen_;
  bool ismatchylen_;
  bool ismatchzlen_;
  ::google::protobuf::int32 creatorid_;
  double defaultypos_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* fnfittingcode_;
  ::std::string* fnfittingname_;
  ::std::string* fnfittingmemo_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(35 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_FNFittingInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_FNFittingMatInfo : public ::google::protobuf::Message {
 public:
  JK_FNFittingMatInfo();
  virtual ~JK_FNFittingMatInfo();

  JK_FNFittingMatInfo(const JK_FNFittingMatInfo& from);

  inline JK_FNFittingMatInfo& operator=(const JK_FNFittingMatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_FNFittingMatInfo& default_instance();

  void Swap(JK_FNFittingMatInfo* other);

  // implements Message ----------------------------------------------

  JK_FNFittingMatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_FNFittingMatInfo& from);
  void MergeFrom(const JK_FNFittingMatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FNFittingID = 1;
  inline bool has_fnfittingid() const;
  inline void clear_fnfittingid();
  static const int kFNFittingIDFieldNumber = 1;
  inline ::google::protobuf::int32 fnfittingid() const;
  inline void set_fnfittingid(::google::protobuf::int32 value);

  // required int32 MaterialID = 2;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 2;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required bool IsDefault = 3;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 3;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_FNFittingMatInfo)
 private:
  inline void set_has_fnfittingid();
  inline void clear_has_fnfittingid();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fnfittingid_;
  ::google::protobuf::int32 materialid_;
  ::google::protobuf::int64 vercode_;
  bool isdefault_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_FNFittingMatInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_FNFittingPartInfo : public ::google::protobuf::Message {
 public:
  JK_FNFittingPartInfo();
  virtual ~JK_FNFittingPartInfo();

  JK_FNFittingPartInfo(const JK_FNFittingPartInfo& from);

  inline JK_FNFittingPartInfo& operator=(const JK_FNFittingPartInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_FNFittingPartInfo& default_instance();

  void Swap(JK_FNFittingPartInfo* other);

  // implements Message ----------------------------------------------

  JK_FNFittingPartInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_FNFittingPartInfo& from);
  void MergeFrom(const JK_FNFittingPartInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FNFittingPartID = 1;
  inline bool has_fnfittingpartid() const;
  inline void clear_fnfittingpartid();
  static const int kFNFittingPartIDFieldNumber = 1;
  inline ::google::protobuf::int32 fnfittingpartid() const;
  inline void set_fnfittingpartid(::google::protobuf::int32 value);

  // required int32 PartType = 2;
  inline bool has_parttype() const;
  inline void clear_parttype();
  static const int kPartTypeFieldNumber = 2;
  inline ::google::protobuf::int32 parttype() const;
  inline void set_parttype(::google::protobuf::int32 value);

  // required bool IsDel = 3;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 3;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 FNFittingID = 4;
  inline bool has_fnfittingid() const;
  inline void clear_fnfittingid();
  static const int kFNFittingIDFieldNumber = 4;
  inline ::google::protobuf::int32 fnfittingid() const;
  inline void set_fnfittingid(::google::protobuf::int32 value);

  // required bool IsUseMain = 5;
  inline bool has_isusemain() const;
  inline void clear_isusemain();
  static const int kIsUseMainFieldNumber = 5;
  inline bool isusemain() const;
  inline void set_isusemain(bool value);

  // required int32 SkinDirection = 6;
  inline bool has_skindirection() const;
  inline void clear_skindirection();
  static const int kSkinDirectionFieldNumber = 6;
  inline ::google::protobuf::int32 skindirection() const;
  inline void set_skindirection(::google::protobuf::int32 value);

  // required int32 SplitType = 7;
  inline bool has_splittype() const;
  inline void clear_splittype();
  static const int kSplitTypeFieldNumber = 7;
  inline ::google::protobuf::int32 splittype() const;
  inline void set_splittype(::google::protobuf::int32 value);

  // required double ArcX = 8;
  inline bool has_arcx() const;
  inline void clear_arcx();
  static const int kArcXFieldNumber = 8;
  inline double arcx() const;
  inline void set_arcx(double value);

  // required double ArcY = 9;
  inline bool has_arcy() const;
  inline void clear_arcy();
  static const int kArcYFieldNumber = 9;
  inline double arcy() const;
  inline void set_arcy(double value);

  // required double ArcZ = 10;
  inline bool has_arcz() const;
  inline void clear_arcz();
  static const int kArcZFieldNumber = 10;
  inline double arcz() const;
  inline void set_arcz(double value);

  // required string XFormula = 11;
  inline bool has_xformula() const;
  inline void clear_xformula();
  static const int kXFormulaFieldNumber = 11;
  inline const ::std::string& xformula() const;
  inline void set_xformula(const ::std::string& value);
  inline void set_xformula(const char* value);
  inline void set_xformula(const char* value, size_t size);
  inline ::std::string* mutable_xformula();
  inline ::std::string* release_xformula();
  inline void set_allocated_xformula(::std::string* xformula);

  // required string YFormula = 12;
  inline bool has_yformula() const;
  inline void clear_yformula();
  static const int kYFormulaFieldNumber = 12;
  inline const ::std::string& yformula() const;
  inline void set_yformula(const ::std::string& value);
  inline void set_yformula(const char* value);
  inline void set_yformula(const char* value, size_t size);
  inline ::std::string* mutable_yformula();
  inline ::std::string* release_yformula();
  inline void set_allocated_yformula(::std::string* yformula);

  // required int32 XDock = 13;
  inline bool has_xdock() const;
  inline void clear_xdock();
  static const int kXDockFieldNumber = 13;
  inline ::google::protobuf::int32 xdock() const;
  inline void set_xdock(::google::protobuf::int32 value);

  // required int32 YDock = 14;
  inline bool has_ydock() const;
  inline void clear_ydock();
  static const int kYDockFieldNumber = 14;
  inline ::google::protobuf::int32 ydock() const;
  inline void set_ydock(::google::protobuf::int32 value);

  // required int32 ZDock = 15;
  inline bool has_zdock() const;
  inline void clear_zdock();
  static const int kZDockFieldNumber = 15;
  inline ::google::protobuf::int32 zdock() const;
  inline void set_zdock(::google::protobuf::int32 value);

  // required string XOffsetFormula = 16;
  inline bool has_xoffsetformula() const;
  inline void clear_xoffsetformula();
  static const int kXOffsetFormulaFieldNumber = 16;
  inline const ::std::string& xoffsetformula() const;
  inline void set_xoffsetformula(const ::std::string& value);
  inline void set_xoffsetformula(const char* value);
  inline void set_xoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_xoffsetformula();
  inline ::std::string* release_xoffsetformula();
  inline void set_allocated_xoffsetformula(::std::string* xoffsetformula);

  // required string YOffsetFormula = 17;
  inline bool has_yoffsetformula() const;
  inline void clear_yoffsetformula();
  static const int kYOffsetFormulaFieldNumber = 17;
  inline const ::std::string& yoffsetformula() const;
  inline void set_yoffsetformula(const ::std::string& value);
  inline void set_yoffsetformula(const char* value);
  inline void set_yoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_yoffsetformula();
  inline ::std::string* release_yoffsetformula();
  inline void set_allocated_yoffsetformula(::std::string* yoffsetformula);

  // required string ZOffsetFormula = 18;
  inline bool has_zoffsetformula() const;
  inline void clear_zoffsetformula();
  static const int kZOffsetFormulaFieldNumber = 18;
  inline const ::std::string& zoffsetformula() const;
  inline void set_zoffsetformula(const ::std::string& value);
  inline void set_zoffsetformula(const char* value);
  inline void set_zoffsetformula(const char* value, size_t size);
  inline ::std::string* mutable_zoffsetformula();
  inline ::std::string* release_zoffsetformula();
  inline void set_allocated_zoffsetformula(::std::string* zoffsetformula);

  // required string FNFittingPartCode = 19;
  inline bool has_fnfittingpartcode() const;
  inline void clear_fnfittingpartcode();
  static const int kFNFittingPartCodeFieldNumber = 19;
  inline const ::std::string& fnfittingpartcode() const;
  inline void set_fnfittingpartcode(const ::std::string& value);
  inline void set_fnfittingpartcode(const char* value);
  inline void set_fnfittingpartcode(const char* value, size_t size);
  inline ::std::string* mutable_fnfittingpartcode();
  inline ::std::string* release_fnfittingpartcode();
  inline void set_allocated_fnfittingpartcode(::std::string* fnfittingpartcode);

  // required string FNFittingPartName = 20;
  inline bool has_fnfittingpartname() const;
  inline void clear_fnfittingpartname();
  static const int kFNFittingPartNameFieldNumber = 20;
  inline const ::std::string& fnfittingpartname() const;
  inline void set_fnfittingpartname(const ::std::string& value);
  inline void set_fnfittingpartname(const char* value);
  inline void set_fnfittingpartname(const char* value, size_t size);
  inline ::std::string* mutable_fnfittingpartname();
  inline ::std::string* release_fnfittingpartname();
  inline void set_allocated_fnfittingpartname(::std::string* fnfittingpartname);

  // required string FNFittingPartMemo = 21;
  inline bool has_fnfittingpartmemo() const;
  inline void clear_fnfittingpartmemo();
  static const int kFNFittingPartMemoFieldNumber = 21;
  inline const ::std::string& fnfittingpartmemo() const;
  inline void set_fnfittingpartmemo(const ::std::string& value);
  inline void set_fnfittingpartmemo(const char* value);
  inline void set_fnfittingpartmemo(const char* value, size_t size);
  inline ::std::string* mutable_fnfittingpartmemo();
  inline ::std::string* release_fnfittingpartmemo();
  inline void set_allocated_fnfittingpartmemo(::std::string* fnfittingpartmemo);

  // required int64 VerCode = 22;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 22;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 23;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 23;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 24;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 24;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 25;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 25;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 26;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 26;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 27;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 27;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_FNFittingPartInfo)
 private:
  inline void set_has_fnfittingpartid();
  inline void clear_has_fnfittingpartid();
  inline void set_has_parttype();
  inline void clear_has_parttype();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_fnfittingid();
  inline void clear_has_fnfittingid();
  inline void set_has_isusemain();
  inline void clear_has_isusemain();
  inline void set_has_skindirection();
  inline void clear_has_skindirection();
  inline void set_has_splittype();
  inline void clear_has_splittype();
  inline void set_has_arcx();
  inline void clear_has_arcx();
  inline void set_has_arcy();
  inline void clear_has_arcy();
  inline void set_has_arcz();
  inline void clear_has_arcz();
  inline void set_has_xformula();
  inline void clear_has_xformula();
  inline void set_has_yformula();
  inline void clear_has_yformula();
  inline void set_has_xdock();
  inline void clear_has_xdock();
  inline void set_has_ydock();
  inline void clear_has_ydock();
  inline void set_has_zdock();
  inline void clear_has_zdock();
  inline void set_has_xoffsetformula();
  inline void clear_has_xoffsetformula();
  inline void set_has_yoffsetformula();
  inline void clear_has_yoffsetformula();
  inline void set_has_zoffsetformula();
  inline void clear_has_zoffsetformula();
  inline void set_has_fnfittingpartcode();
  inline void clear_has_fnfittingpartcode();
  inline void set_has_fnfittingpartname();
  inline void clear_has_fnfittingpartname();
  inline void set_has_fnfittingpartmemo();
  inline void clear_has_fnfittingpartmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fnfittingpartid_;
  ::google::protobuf::int32 parttype_;
  ::google::protobuf::int32 fnfittingid_;
  bool isdel_;
  bool isusemain_;
  ::google::protobuf::int32 skindirection_;
  ::google::protobuf::int32 splittype_;
  double arcx_;
  double arcy_;
  double arcz_;
  ::std::string* xformula_;
  ::std::string* yformula_;
  ::google::protobuf::int32 xdock_;
  ::google::protobuf::int32 ydock_;
  ::std::string* xoffsetformula_;
  ::std::string* yoffsetformula_;
  ::std::string* zoffsetformula_;
  ::std::string* fnfittingpartcode_;
  ::google::protobuf::int32 zdock_;
  ::google::protobuf::int32 factoryid_;
  ::std::string* fnfittingpartname_;
  ::std::string* fnfittingpartmemo_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_FNFittingPartInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_FNFittingPartMatInfo : public ::google::protobuf::Message {
 public:
  JK_FNFittingPartMatInfo();
  virtual ~JK_FNFittingPartMatInfo();

  JK_FNFittingPartMatInfo(const JK_FNFittingPartMatInfo& from);

  inline JK_FNFittingPartMatInfo& operator=(const JK_FNFittingPartMatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_FNFittingPartMatInfo& default_instance();

  void Swap(JK_FNFittingPartMatInfo* other);

  // implements Message ----------------------------------------------

  JK_FNFittingPartMatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_FNFittingPartMatInfo& from);
  void MergeFrom(const JK_FNFittingPartMatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FNFittingPartID = 1;
  inline bool has_fnfittingpartid() const;
  inline void clear_fnfittingpartid();
  static const int kFNFittingPartIDFieldNumber = 1;
  inline ::google::protobuf::int32 fnfittingpartid() const;
  inline void set_fnfittingpartid(::google::protobuf::int32 value);

  // required int32 MaterialID = 2;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 2;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required bool IsDefault = 3;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 3;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 MatGType = 6;
  inline bool has_matgtype() const;
  inline void clear_matgtype();
  static const int kMatGTypeFieldNumber = 6;
  inline ::google::protobuf::int32 matgtype() const;
  inline void set_matgtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_FNFittingPartMatInfo)
 private:
  inline void set_has_fnfittingpartid();
  inline void clear_has_fnfittingpartid();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_matgtype();
  inline void clear_has_matgtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fnfittingpartid_;
  ::google::protobuf::int32 materialid_;
  ::google::protobuf::int64 vercode_;
  bool isdefault_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 matgtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_FNFittingPartMatInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_FNFittingPartSealInfo : public ::google::protobuf::Message {
 public:
  JK_FNFittingPartSealInfo();
  virtual ~JK_FNFittingPartSealInfo();

  JK_FNFittingPartSealInfo(const JK_FNFittingPartSealInfo& from);

  inline JK_FNFittingPartSealInfo& operator=(const JK_FNFittingPartSealInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_FNFittingPartSealInfo& default_instance();

  void Swap(JK_FNFittingPartSealInfo* other);

  // implements Message ----------------------------------------------

  JK_FNFittingPartSealInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_FNFittingPartSealInfo& from);
  void MergeFrom(const JK_FNFittingPartSealInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FNFittingPartID = 1;
  inline bool has_fnfittingpartid() const;
  inline void clear_fnfittingpartid();
  static const int kFNFittingPartIDFieldNumber = 1;
  inline ::google::protobuf::int32 fnfittingpartid() const;
  inline void set_fnfittingpartid(::google::protobuf::int32 value);

  // required int32 SealOrder = 2;
  inline bool has_sealorder() const;
  inline void clear_sealorder();
  static const int kSealOrderFieldNumber = 2;
  inline ::google::protobuf::int32 sealorder() const;
  inline void set_sealorder(::google::protobuf::int32 value);

  // required int32 SealIndex = 3;
  inline bool has_sealindex() const;
  inline void clear_sealindex();
  static const int kSealIndexFieldNumber = 3;
  inline ::google::protobuf::int32 sealindex() const;
  inline void set_sealindex(::google::protobuf::int32 value);

  // required int32 SealType = 4;
  inline bool has_sealtype() const;
  inline void clear_sealtype();
  static const int kSealTypeFieldNumber = 4;
  inline ::google::protobuf::int32 sealtype() const;
  inline void set_sealtype(::google::protobuf::int32 value);

  // required int64 VerCode = 5;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 5;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 7;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 7;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 8;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 8;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 9;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 9;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 10;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 10;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_FNFittingPartSealInfo)
 private:
  inline void set_has_fnfittingpartid();
  inline void clear_has_fnfittingpartid();
  inline void set_has_sealorder();
  inline void clear_has_sealorder();
  inline void set_has_sealindex();
  inline void clear_has_sealindex();
  inline void set_has_sealtype();
  inline void clear_has_sealtype();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fnfittingpartid_;
  ::google::protobuf::int32 sealorder_;
  ::google::protobuf::int32 sealindex_;
  ::google::protobuf::int32 sealtype_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_FNFittingPartSealInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_FittingInfo : public ::google::protobuf::Message {
 public:
  JK_FittingInfo();
  virtual ~JK_FittingInfo();

  JK_FittingInfo(const JK_FittingInfo& from);

  inline JK_FittingInfo& operator=(const JK_FittingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_FittingInfo& default_instance();

  void Swap(JK_FittingInfo* other);

  // implements Message ----------------------------------------------

  JK_FittingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_FittingInfo& from);
  void MergeFrom(const JK_FittingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FittingID = 1;
  inline bool has_fittingid() const;
  inline void clear_fittingid();
  static const int kFittingIDFieldNumber = 1;
  inline ::google::protobuf::int32 fittingid() const;
  inline void set_fittingid(::google::protobuf::int32 value);

  // required int32 FactoryID = 2;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 2;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 GroupID = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 3;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required bool IsDel = 4;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 4;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsActive = 5;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 5;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required bool IsSplit = 6;
  inline bool has_issplit() const;
  inline void clear_issplit();
  static const int kIsSplitFieldNumber = 6;
  inline bool issplit() const;
  inline void set_issplit(bool value);

  // required int32 GTypeID = 7;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 7;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 SupplyType = 8;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 8;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 ShowID = 9;
  inline bool has_showid() const;
  inline void clear_showid();
  static const int kShowIDFieldNumber = 9;
  inline ::google::protobuf::int32 showid() const;
  inline void set_showid(::google::protobuf::int32 value);

  // required int32 CreatorID = 10;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 10;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 11;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 11;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 12;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 12;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 13;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 13;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string FittingCode = 14;
  inline bool has_fittingcode() const;
  inline void clear_fittingcode();
  static const int kFittingCodeFieldNumber = 14;
  inline const ::std::string& fittingcode() const;
  inline void set_fittingcode(const ::std::string& value);
  inline void set_fittingcode(const char* value);
  inline void set_fittingcode(const char* value, size_t size);
  inline ::std::string* mutable_fittingcode();
  inline ::std::string* release_fittingcode();
  inline void set_allocated_fittingcode(::std::string* fittingcode);

  // required string FittingName = 15;
  inline bool has_fittingname() const;
  inline void clear_fittingname();
  static const int kFittingNameFieldNumber = 15;
  inline const ::std::string& fittingname() const;
  inline void set_fittingname(const ::std::string& value);
  inline void set_fittingname(const char* value);
  inline void set_fittingname(const char* value, size_t size);
  inline ::std::string* mutable_fittingname();
  inline ::std::string* release_fittingname();
  inline void set_allocated_fittingname(::std::string* fittingname);

  // required string FittingMemo = 16;
  inline bool has_fittingmemo() const;
  inline void clear_fittingmemo();
  static const int kFittingMemoFieldNumber = 16;
  inline const ::std::string& fittingmemo() const;
  inline void set_fittingmemo(const ::std::string& value);
  inline void set_fittingmemo(const char* value);
  inline void set_fittingmemo(const char* value, size_t size);
  inline ::std::string* mutable_fittingmemo();
  inline ::std::string* release_fittingmemo();
  inline void set_allocated_fittingmemo(::std::string* fittingmemo);

  // required int64 VerCode = 17;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 17;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_FittingInfo)
 private:
  inline void set_has_fittingid();
  inline void clear_has_fittingid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_issplit();
  inline void clear_has_issplit();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_showid();
  inline void clear_has_showid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_fittingcode();
  inline void clear_has_fittingcode();
  inline void set_has_fittingname();
  inline void clear_has_fittingname();
  inline void set_has_fittingmemo();
  inline void clear_has_fittingmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fittingid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 groupid_;
  bool isdel_;
  bool isactive_;
  bool issplit_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 showid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* fittingcode_;
  ::std::string* fittingname_;
  ::std::string* fittingmemo_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_FittingInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_FittingRuleInfo : public ::google::protobuf::Message {
 public:
  JK_FittingRuleInfo();
  virtual ~JK_FittingRuleInfo();

  JK_FittingRuleInfo(const JK_FittingRuleInfo& from);

  inline JK_FittingRuleInfo& operator=(const JK_FittingRuleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_FittingRuleInfo& default_instance();

  void Swap(JK_FittingRuleInfo* other);

  // implements Message ----------------------------------------------

  JK_FittingRuleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_FittingRuleInfo& from);
  void MergeFrom(const JK_FittingRuleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FittingRuleID = 1;
  inline bool has_fittingruleid() const;
  inline void clear_fittingruleid();
  static const int kFittingRuleIDFieldNumber = 1;
  inline ::google::protobuf::int32 fittingruleid() const;
  inline void set_fittingruleid(::google::protobuf::int32 value);

  // required int32 OwnerID = 2;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwnerIDFieldNumber = 2;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // required int32 OwnerGTypeID = 3;
  inline bool has_ownergtypeid() const;
  inline void clear_ownergtypeid();
  static const int kOwnerGTypeIDFieldNumber = 3;
  inline ::google::protobuf::int32 ownergtypeid() const;
  inline void set_ownergtypeid(::google::protobuf::int32 value);

  // required bool IsDefault = 4;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 4;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required bool IsCanDel = 5;
  inline bool has_iscandel() const;
  inline void clear_iscandel();
  static const int kIsCanDelFieldNumber = 5;
  inline bool iscandel() const;
  inline void set_iscandel(bool value);

  // required double MinLen = 6;
  inline bool has_minlen() const;
  inline void clear_minlen();
  static const int kMinLenFieldNumber = 6;
  inline double minlen() const;
  inline void set_minlen(double value);

  // required double MaxLen = 7;
  inline bool has_maxlen() const;
  inline void clear_maxlen();
  static const int kMaxLenFieldNumber = 7;
  inline double maxlen() const;
  inline void set_maxlen(double value);

  // required int32 FittingID = 8;
  inline bool has_fittingid() const;
  inline void clear_fittingid();
  static const int kFittingIDFieldNumber = 8;
  inline ::google::protobuf::int32 fittingid() const;
  inline void set_fittingid(::google::protobuf::int32 value);

  // required int32 FittingType = 9;
  inline bool has_fittingtype() const;
  inline void clear_fittingtype();
  static const int kFittingTypeFieldNumber = 9;
  inline ::google::protobuf::int32 fittingtype() const;
  inline void set_fittingtype(::google::protobuf::int32 value);

  // required int32 UseCount = 10;
  inline bool has_usecount() const;
  inline void clear_usecount();
  static const int kUseCountFieldNumber = 10;
  inline ::google::protobuf::int32 usecount() const;
  inline void set_usecount(::google::protobuf::int32 value);

  // required int64 VerCode = 11;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 11;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 12;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 12;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 13;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 13;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 14;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 14;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 15;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 15;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 16;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 16;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_FittingRuleInfo)
 private:
  inline void set_has_fittingruleid();
  inline void clear_has_fittingruleid();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_ownergtypeid();
  inline void clear_has_ownergtypeid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_iscandel();
  inline void clear_has_iscandel();
  inline void set_has_minlen();
  inline void clear_has_minlen();
  inline void set_has_maxlen();
  inline void clear_has_maxlen();
  inline void set_has_fittingid();
  inline void clear_has_fittingid();
  inline void set_has_fittingtype();
  inline void clear_has_fittingtype();
  inline void set_has_usecount();
  inline void clear_has_usecount();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fittingruleid_;
  ::google::protobuf::int32 ownerid_;
  ::google::protobuf::int32 ownergtypeid_;
  bool isdefault_;
  bool iscandel_;
  double minlen_;
  double maxlen_;
  ::google::protobuf::int32 fittingid_;
  ::google::protobuf::int32 fittingtype_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 usecount_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_FittingRuleInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_FormulaConstInfo : public ::google::protobuf::Message {
 public:
  JK_FormulaConstInfo();
  virtual ~JK_FormulaConstInfo();

  JK_FormulaConstInfo(const JK_FormulaConstInfo& from);

  inline JK_FormulaConstInfo& operator=(const JK_FormulaConstInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_FormulaConstInfo& default_instance();

  void Swap(JK_FormulaConstInfo* other);

  // implements Message ----------------------------------------------

  JK_FormulaConstInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_FormulaConstInfo& from);
  void MergeFrom(const JK_FormulaConstInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FactoryID = 1;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 1;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 2;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 2;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required string ConstCode = 3;
  inline bool has_constcode() const;
  inline void clear_constcode();
  static const int kConstCodeFieldNumber = 3;
  inline const ::std::string& constcode() const;
  inline void set_constcode(const ::std::string& value);
  inline void set_constcode(const char* value);
  inline void set_constcode(const char* value, size_t size);
  inline ::std::string* mutable_constcode();
  inline ::std::string* release_constcode();
  inline void set_allocated_constcode(::std::string* constcode);

  // required string ConstText = 4;
  inline bool has_consttext() const;
  inline void clear_consttext();
  static const int kConstTextFieldNumber = 4;
  inline const ::std::string& consttext() const;
  inline void set_consttext(const ::std::string& value);
  inline void set_consttext(const char* value);
  inline void set_consttext(const char* value, size_t size);
  inline ::std::string* mutable_consttext();
  inline ::std::string* release_consttext();
  inline void set_allocated_consttext(::std::string* consttext);

  // required double ConstValue = 5;
  inline bool has_constvalue() const;
  inline void clear_constvalue();
  static const int kConstValueFieldNumber = 5;
  inline double constvalue() const;
  inline void set_constvalue(double value);

  // required int32 CreatorID = 6;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 6;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 7;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 7;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 8;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 8;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 9;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 9;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_FormulaConstInfo)
 private:
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_constcode();
  inline void clear_has_constcode();
  inline void set_has_consttext();
  inline void clear_has_consttext();
  inline void set_has_constvalue();
  inline void clear_has_constvalue();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 vercode_;
  ::std::string* constcode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::std::string* consttext_;
  double constvalue_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_FormulaConstInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_GroupInfo : public ::google::protobuf::Message {
 public:
  JK_GroupInfo();
  virtual ~JK_GroupInfo();

  JK_GroupInfo(const JK_GroupInfo& from);

  inline JK_GroupInfo& operator=(const JK_GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_GroupInfo& default_instance();

  void Swap(JK_GroupInfo* other);

  // implements Message ----------------------------------------------

  JK_GroupInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_GroupInfo& from);
  void MergeFrom(const JK_GroupInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GroupID = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 1;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required int32 ParentID = 2;
  inline bool has_parentid() const;
  inline void clear_parentid();
  static const int kParentIDFieldNumber = 2;
  inline ::google::protobuf::int32 parentid() const;
  inline void set_parentid(::google::protobuf::int32 value);

  // required int32 FactoryID = 3;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 3;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required bool IsDel = 4;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 4;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 GTypeID = 5;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 5;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 CreatorID = 6;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 6;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 7;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 7;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 8;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 8;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 9;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 9;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string GroupCode = 10;
  inline bool has_groupcode() const;
  inline void clear_groupcode();
  static const int kGroupCodeFieldNumber = 10;
  inline const ::std::string& groupcode() const;
  inline void set_groupcode(const ::std::string& value);
  inline void set_groupcode(const char* value);
  inline void set_groupcode(const char* value, size_t size);
  inline ::std::string* mutable_groupcode();
  inline ::std::string* release_groupcode();
  inline void set_allocated_groupcode(::std::string* groupcode);

  // required string GroupName = 11;
  inline bool has_groupname() const;
  inline void clear_groupname();
  static const int kGroupNameFieldNumber = 11;
  inline const ::std::string& groupname() const;
  inline void set_groupname(const ::std::string& value);
  inline void set_groupname(const char* value);
  inline void set_groupname(const char* value, size_t size);
  inline ::std::string* mutable_groupname();
  inline ::std::string* release_groupname();
  inline void set_allocated_groupname(::std::string* groupname);

  // required string GroupMemo = 12;
  inline bool has_groupmemo() const;
  inline void clear_groupmemo();
  static const int kGroupMemoFieldNumber = 12;
  inline const ::std::string& groupmemo() const;
  inline void set_groupmemo(const ::std::string& value);
  inline void set_groupmemo(const char* value);
  inline void set_groupmemo(const char* value, size_t size);
  inline ::std::string* mutable_groupmemo();
  inline ::std::string* release_groupmemo();
  inline void set_allocated_groupmemo(::std::string* groupmemo);

  // required int64 VerCode = 13;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 13;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_GroupInfo)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_parentid();
  inline void clear_has_parentid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_groupcode();
  inline void clear_has_groupcode();
  inline void set_has_groupname();
  inline void clear_has_groupname();
  inline void set_has_groupmemo();
  inline void clear_has_groupmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 parentid_;
  ::google::protobuf::int32 factoryid_;
  bool isdel_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* groupcode_;
  ::std::string* groupname_;
  ::std::string* groupmemo_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_GroupInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_HWFittingInfo : public ::google::protobuf::Message {
 public:
  JK_HWFittingInfo();
  virtual ~JK_HWFittingInfo();

  JK_HWFittingInfo(const JK_HWFittingInfo& from);

  inline JK_HWFittingInfo& operator=(const JK_HWFittingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_HWFittingInfo& default_instance();

  void Swap(JK_HWFittingInfo* other);

  // implements Message ----------------------------------------------

  JK_HWFittingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_HWFittingInfo& from);
  void MergeFrom(const JK_HWFittingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 HWFittingID = 1;
  inline bool has_hwfittingid() const;
  inline void clear_hwfittingid();
  static const int kHWFittingIDFieldNumber = 1;
  inline ::google::protobuf::int32 hwfittingid() const;
  inline void set_hwfittingid(::google::protobuf::int32 value);

  // required int32 FactoryID = 2;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 2;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 GroupID = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 3;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required bool IsDel = 4;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 4;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsActive = 5;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 5;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required bool IsSplit = 6;
  inline bool has_issplit() const;
  inline void clear_issplit();
  static const int kIsSplitFieldNumber = 6;
  inline bool issplit() const;
  inline void set_issplit(bool value);

  // required int32 SupplyType = 7;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 7;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 8;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 8;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 ShowID = 9;
  inline bool has_showid() const;
  inline void clear_showid();
  static const int kShowIDFieldNumber = 9;
  inline ::google::protobuf::int32 showid() const;
  inline void set_showid(::google::protobuf::int32 value);

  // required int32 ModelID = 10;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 10;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required double XLen = 11;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 11;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 12;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 12;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 13;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 13;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required int32 SettingCountRuleID = 14;
  inline bool has_settingcountruleid() const;
  inline void clear_settingcountruleid();
  static const int kSettingCountRuleIDFieldNumber = 14;
  inline ::google::protobuf::int32 settingcountruleid() const;
  inline void set_settingcountruleid(::google::protobuf::int32 value);

  // required bool IsMatchXLen = 15;
  inline bool has_ismatchxlen() const;
  inline void clear_ismatchxlen();
  static const int kIsMatchXLenFieldNumber = 15;
  inline bool ismatchxlen() const;
  inline void set_ismatchxlen(bool value);

  // required bool IsMatchYLen = 16;
  inline bool has_ismatchylen() const;
  inline void clear_ismatchylen();
  static const int kIsMatchYLenFieldNumber = 16;
  inline bool ismatchylen() const;
  inline void set_ismatchylen(bool value);

  // required bool IsMatchZLen = 17;
  inline bool has_ismatchzlen() const;
  inline void clear_ismatchzlen();
  static const int kIsMatchZLenFieldNumber = 17;
  inline bool ismatchzlen() const;
  inline void set_ismatchzlen(bool value);

  // required double EffectLen = 18;
  inline bool has_effectlen() const;
  inline void clear_effectlen();
  static const int kEffectLenFieldNumber = 18;
  inline double effectlen() const;
  inline void set_effectlen(double value);

  // required double XAdjustLen = 19;
  inline bool has_xadjustlen() const;
  inline void clear_xadjustlen();
  static const int kXAdjustLenFieldNumber = 19;
  inline double xadjustlen() const;
  inline void set_xadjustlen(double value);

  // required bool IsEmbed = 20;
  inline bool has_isembed() const;
  inline void clear_isembed();
  static const int kIsEmbedFieldNumber = 20;
  inline bool isembed() const;
  inline void set_isembed(bool value);

  // required int32 InstallDirection = 21;
  inline bool has_installdirection() const;
  inline void clear_installdirection();
  static const int kInstallDirectionFieldNumber = 21;
  inline ::google::protobuf::int32 installdirection() const;
  inline void set_installdirection(::google::protobuf::int32 value);

  // required int32 CreatorID = 22;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 22;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 23;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 23;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 24;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 24;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 25;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 25;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string HWFittingCode = 26;
  inline bool has_hwfittingcode() const;
  inline void clear_hwfittingcode();
  static const int kHWFittingCodeFieldNumber = 26;
  inline const ::std::string& hwfittingcode() const;
  inline void set_hwfittingcode(const ::std::string& value);
  inline void set_hwfittingcode(const char* value);
  inline void set_hwfittingcode(const char* value, size_t size);
  inline ::std::string* mutable_hwfittingcode();
  inline ::std::string* release_hwfittingcode();
  inline void set_allocated_hwfittingcode(::std::string* hwfittingcode);

  // required string HWFittingName = 27;
  inline bool has_hwfittingname() const;
  inline void clear_hwfittingname();
  static const int kHWFittingNameFieldNumber = 27;
  inline const ::std::string& hwfittingname() const;
  inline void set_hwfittingname(const ::std::string& value);
  inline void set_hwfittingname(const char* value);
  inline void set_hwfittingname(const char* value, size_t size);
  inline ::std::string* mutable_hwfittingname();
  inline ::std::string* release_hwfittingname();
  inline void set_allocated_hwfittingname(::std::string* hwfittingname);

  // required string HWFittingMemo = 28;
  inline bool has_hwfittingmemo() const;
  inline void clear_hwfittingmemo();
  static const int kHWFittingMemoFieldNumber = 28;
  inline const ::std::string& hwfittingmemo() const;
  inline void set_hwfittingmemo(const ::std::string& value);
  inline void set_hwfittingmemo(const char* value);
  inline void set_hwfittingmemo(const char* value, size_t size);
  inline ::std::string* mutable_hwfittingmemo();
  inline ::std::string* release_hwfittingmemo();
  inline void set_allocated_hwfittingmemo(::std::string* hwfittingmemo);

  // required int64 VerCode = 29;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 29;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_HWFittingInfo)
 private:
  inline void set_has_hwfittingid();
  inline void clear_has_hwfittingid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_issplit();
  inline void clear_has_issplit();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_showid();
  inline void clear_has_showid();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_settingcountruleid();
  inline void clear_has_settingcountruleid();
  inline void set_has_ismatchxlen();
  inline void clear_has_ismatchxlen();
  inline void set_has_ismatchylen();
  inline void clear_has_ismatchylen();
  inline void set_has_ismatchzlen();
  inline void clear_has_ismatchzlen();
  inline void set_has_effectlen();
  inline void clear_has_effectlen();
  inline void set_has_xadjustlen();
  inline void clear_has_xadjustlen();
  inline void set_has_isembed();
  inline void clear_has_isembed();
  inline void set_has_installdirection();
  inline void clear_has_installdirection();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_hwfittingcode();
  inline void clear_has_hwfittingcode();
  inline void set_has_hwfittingname();
  inline void clear_has_hwfittingname();
  inline void set_has_hwfittingmemo();
  inline void clear_has_hwfittingmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 hwfittingid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 supplytype_;
  bool isdel_;
  bool isactive_;
  bool issplit_;
  bool ismatchxlen_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 showid_;
  ::google::protobuf::int32 modelid_;
  double xlen_;
  double ylen_;
  double zlen_;
  ::google::protobuf::int32 settingcountruleid_;
  bool ismatchylen_;
  bool ismatchzlen_;
  bool isembed_;
  double effectlen_;
  double xadjustlen_;
  ::google::protobuf::int32 installdirection_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* hwfittingcode_;
  ::std::string* hwfittingname_;
  ::std::string* hwfittingmemo_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_HWFittingInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_HoleRuleInfo : public ::google::protobuf::Message {
 public:
  JK_HoleRuleInfo();
  virtual ~JK_HoleRuleInfo();

  JK_HoleRuleInfo(const JK_HoleRuleInfo& from);

  inline JK_HoleRuleInfo& operator=(const JK_HoleRuleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_HoleRuleInfo& default_instance();

  void Swap(JK_HoleRuleInfo* other);

  // implements Message ----------------------------------------------

  JK_HoleRuleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_HoleRuleInfo& from);
  void MergeFrom(const JK_HoleRuleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 HoleID = 1;
  inline bool has_holeid() const;
  inline void clear_holeid();
  static const int kHoleIDFieldNumber = 1;
  inline ::google::protobuf::int32 holeid() const;
  inline void set_holeid(::google::protobuf::int32 value);

  // required int32 FNFittingID = 2;
  inline bool has_fnfittingid() const;
  inline void clear_fnfittingid();
  static const int kFNFittingIDFieldNumber = 2;
  inline ::google::protobuf::int32 fnfittingid() const;
  inline void set_fnfittingid(::google::protobuf::int32 value);

  // required int32 HoleTypeID = 3;
  inline bool has_holetypeid() const;
  inline void clear_holetypeid();
  static const int kHoleTypeIDFieldNumber = 3;
  inline ::google::protobuf::int32 holetypeid() const;
  inline void set_holetypeid(::google::protobuf::int32 value);

  // required double XLen = 4;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 4;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 5;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 5;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double OverHeight = 6;
  inline bool has_overheight() const;
  inline void clear_overheight();
  static const int kOverHeightFieldNumber = 6;
  inline double overheight() const;
  inline void set_overheight(double value);

  // required int32 HolePicID = 7;
  inline bool has_holepicid() const;
  inline void clear_holepicid();
  static const int kHolePicIDFieldNumber = 7;
  inline ::google::protobuf::int32 holepicid() const;
  inline void set_holepicid(::google::protobuf::int32 value);

  // required double MinXDistance = 8;
  inline bool has_minxdistance() const;
  inline void clear_minxdistance();
  static const int kMinXDistanceFieldNumber = 8;
  inline double minxdistance() const;
  inline void set_minxdistance(double value);

  // required double MinZDistance = 9;
  inline bool has_minzdistance() const;
  inline void clear_minzdistance();
  static const int kMinZDistanceFieldNumber = 9;
  inline double minzdistance() const;
  inline void set_minzdistance(double value);

  // required int64 VerCode = 10;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 10;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 11;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 11;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 12;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 12;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 13;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 13;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 14;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 14;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 15;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 15;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_HoleRuleInfo)
 private:
  inline void set_has_holeid();
  inline void clear_has_holeid();
  inline void set_has_fnfittingid();
  inline void clear_has_fnfittingid();
  inline void set_has_holetypeid();
  inline void clear_has_holetypeid();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_overheight();
  inline void clear_has_overheight();
  inline void set_has_holepicid();
  inline void clear_has_holepicid();
  inline void set_has_minxdistance();
  inline void clear_has_minxdistance();
  inline void set_has_minzdistance();
  inline void clear_has_minzdistance();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 holeid_;
  ::google::protobuf::int32 fnfittingid_;
  double xlen_;
  double ylen_;
  ::google::protobuf::int32 holetypeid_;
  ::google::protobuf::int32 holepicid_;
  double overheight_;
  double minxdistance_;
  double minzdistance_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_HoleRuleInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_MaterialInfo : public ::google::protobuf::Message {
 public:
  JK_MaterialInfo();
  virtual ~JK_MaterialInfo();

  JK_MaterialInfo(const JK_MaterialInfo& from);

  inline JK_MaterialInfo& operator=(const JK_MaterialInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_MaterialInfo& default_instance();

  void Swap(JK_MaterialInfo* other);

  // implements Message ----------------------------------------------

  JK_MaterialInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_MaterialInfo& from);
  void MergeFrom(const JK_MaterialInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 MaterialID = 1;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 1;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required int32 FactoryID = 2;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 2;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 GroupID = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 3;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required bool IsDel = 4;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 4;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsActive = 5;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 5;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required bool IsSplit = 6;
  inline bool has_issplit() const;
  inline void clear_issplit();
  static const int kIsSplitFieldNumber = 6;
  inline bool issplit() const;
  inline void set_issplit(bool value);

  // required int32 SupplyType = 7;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 7;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 8;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 8;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 ShowID = 9;
  inline bool has_showid() const;
  inline void clear_showid();
  static const int kShowIDFieldNumber = 9;
  inline ::google::protobuf::int32 showid() const;
  inline void set_showid(::google::protobuf::int32 value);

  // required int32 ModelID = 10;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 10;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required double XLen = 11;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 11;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 12;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 12;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 13;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 13;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required bool IsMatchXLen = 14;
  inline bool has_ismatchxlen() const;
  inline void clear_ismatchxlen();
  static const int kIsMatchXLenFieldNumber = 14;
  inline bool ismatchxlen() const;
  inline void set_ismatchxlen(bool value);

  // required bool IsMatchYLen = 15;
  inline bool has_ismatchylen() const;
  inline void clear_ismatchylen();
  static const int kIsMatchYLenFieldNumber = 15;
  inline bool ismatchylen() const;
  inline void set_ismatchylen(bool value);

  // required bool IsMatchZLen = 16;
  inline bool has_ismatchzlen() const;
  inline void clear_ismatchzlen();
  static const int kIsMatchZLenFieldNumber = 16;
  inline bool ismatchzlen() const;
  inline void set_ismatchzlen(bool value);

  // required int32 SkinID = 17;
  inline bool has_skinid() const;
  inline void clear_skinid();
  static const int kSkinIDFieldNumber = 17;
  inline ::google::protobuf::int32 skinid() const;
  inline void set_skinid(::google::protobuf::int32 value);

  // required int32 SkinDirection = 18;
  inline bool has_skindirection() const;
  inline void clear_skindirection();
  static const int kSkinDirectionFieldNumber = 18;
  inline ::google::protobuf::int32 skindirection() const;
  inline void set_skindirection(::google::protobuf::int32 value);

  // required int32 TransCode = 19;
  inline bool has_transcode() const;
  inline void clear_transcode();
  static const int kTransCodeFieldNumber = 19;
  inline ::google::protobuf::int32 transcode() const;
  inline void set_transcode(::google::protobuf::int32 value);

  // required int32 CreatorID = 20;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 20;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 21;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 21;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 22;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 22;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 23;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 23;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string MaterialCode = 24;
  inline bool has_materialcode() const;
  inline void clear_materialcode();
  static const int kMaterialCodeFieldNumber = 24;
  inline const ::std::string& materialcode() const;
  inline void set_materialcode(const ::std::string& value);
  inline void set_materialcode(const char* value);
  inline void set_materialcode(const char* value, size_t size);
  inline ::std::string* mutable_materialcode();
  inline ::std::string* release_materialcode();
  inline void set_allocated_materialcode(::std::string* materialcode);

  // required string MaterialName = 25;
  inline bool has_materialname() const;
  inline void clear_materialname();
  static const int kMaterialNameFieldNumber = 25;
  inline const ::std::string& materialname() const;
  inline void set_materialname(const ::std::string& value);
  inline void set_materialname(const char* value);
  inline void set_materialname(const char* value, size_t size);
  inline ::std::string* mutable_materialname();
  inline ::std::string* release_materialname();
  inline void set_allocated_materialname(::std::string* materialname);

  // required string MaterialMemo = 26;
  inline bool has_materialmemo() const;
  inline void clear_materialmemo();
  static const int kMaterialMemoFieldNumber = 26;
  inline const ::std::string& materialmemo() const;
  inline void set_materialmemo(const ::std::string& value);
  inline void set_materialmemo(const char* value);
  inline void set_materialmemo(const char* value, size_t size);
  inline ::std::string* mutable_materialmemo();
  inline ::std::string* release_materialmemo();
  inline void set_allocated_materialmemo(::std::string* materialmemo);

  // required int64 VerCode = 27;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 27;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_MaterialInfo)
 private:
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_issplit();
  inline void clear_has_issplit();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_showid();
  inline void clear_has_showid();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_ismatchxlen();
  inline void clear_has_ismatchxlen();
  inline void set_has_ismatchylen();
  inline void clear_has_ismatchylen();
  inline void set_has_ismatchzlen();
  inline void clear_has_ismatchzlen();
  inline void set_has_skinid();
  inline void clear_has_skinid();
  inline void set_has_skindirection();
  inline void clear_has_skindirection();
  inline void set_has_transcode();
  inline void clear_has_transcode();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_materialcode();
  inline void clear_has_materialcode();
  inline void set_has_materialname();
  inline void clear_has_materialname();
  inline void set_has_materialmemo();
  inline void clear_has_materialmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 materialid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 supplytype_;
  bool isdel_;
  bool isactive_;
  bool issplit_;
  bool ismatchxlen_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 showid_;
  ::google::protobuf::int32 modelid_;
  double xlen_;
  double ylen_;
  double zlen_;
  bool ismatchylen_;
  bool ismatchzlen_;
  ::google::protobuf::int32 skinid_;
  ::google::protobuf::int32 skindirection_;
  ::google::protobuf::int32 transcode_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* materialcode_;
  ::std::string* materialname_;
  ::std::string* materialmemo_;
  ::google::protobuf::int64 vercode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_MaterialInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_MaterialSealRuleMapInfo : public ::google::protobuf::Message {
 public:
  JK_MaterialSealRuleMapInfo();
  virtual ~JK_MaterialSealRuleMapInfo();

  JK_MaterialSealRuleMapInfo(const JK_MaterialSealRuleMapInfo& from);

  inline JK_MaterialSealRuleMapInfo& operator=(const JK_MaterialSealRuleMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_MaterialSealRuleMapInfo& default_instance();

  void Swap(JK_MaterialSealRuleMapInfo* other);

  // implements Message ----------------------------------------------

  JK_MaterialSealRuleMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_MaterialSealRuleMapInfo& from);
  void MergeFrom(const JK_MaterialSealRuleMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 MaterialID = 1;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 1;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required int32 SealRuleID = 2;
  inline bool has_sealruleid() const;
  inline void clear_sealruleid();
  static const int kSealRuleIDFieldNumber = 2;
  inline ::google::protobuf::int32 sealruleid() const;
  inline void set_sealruleid(::google::protobuf::int32 value);

  // required bool IsCabDef = 3;
  inline bool has_iscabdef() const;
  inline void clear_iscabdef();
  static const int kIsCabDefFieldNumber = 3;
  inline bool iscabdef() const;
  inline void set_iscabdef(bool value);

  // required bool IsDoorDef = 4;
  inline bool has_isdoordef() const;
  inline void clear_isdoordef();
  static const int kIsDoorDefFieldNumber = 4;
  inline bool isdoordef() const;
  inline void set_isdoordef(bool value);

  // required int64 VerCode = 5;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 5;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 6;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 6;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_MaterialSealRuleMapInfo)
 private:
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_sealruleid();
  inline void clear_has_sealruleid();
  inline void set_has_iscabdef();
  inline void clear_has_iscabdef();
  inline void set_has_isdoordef();
  inline void clear_has_isdoordef();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 materialid_;
  ::google::protobuf::int32 sealruleid_;
  bool iscabdef_;
  bool isdoordef_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_MaterialSealRuleMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_ModelInfo : public ::google::protobuf::Message {
 public:
  JK_ModelInfo();
  virtual ~JK_ModelInfo();

  JK_ModelInfo(const JK_ModelInfo& from);

  inline JK_ModelInfo& operator=(const JK_ModelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_ModelInfo& default_instance();

  void Swap(JK_ModelInfo* other);

  // implements Message ----------------------------------------------

  JK_ModelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_ModelInfo& from);
  void MergeFrom(const JK_ModelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ModelID = 1;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 1;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required int32 GroupID = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required int32 FactoryID = 3;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 3;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 GTypeID = 4;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 4;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required double ArcX = 5;
  inline bool has_arcx() const;
  inline void clear_arcx();
  static const int kArcXFieldNumber = 5;
  inline double arcx() const;
  inline void set_arcx(double value);

  // required double ArcY = 6;
  inline bool has_arcy() const;
  inline void clear_arcy();
  static const int kArcYFieldNumber = 6;
  inline double arcy() const;
  inline void set_arcy(double value);

  // required double ArcZ = 7;
  inline bool has_arcz() const;
  inline void clear_arcz();
  static const int kArcZFieldNumber = 7;
  inline double arcz() const;
  inline void set_arcz(double value);

  // required bool IsDel = 8;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 8;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 CreatorID = 9;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 9;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 10;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 10;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 11;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 11;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 12;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 12;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string ModelCode = 13;
  inline bool has_modelcode() const;
  inline void clear_modelcode();
  static const int kModelCodeFieldNumber = 13;
  inline const ::std::string& modelcode() const;
  inline void set_modelcode(const ::std::string& value);
  inline void set_modelcode(const char* value);
  inline void set_modelcode(const char* value, size_t size);
  inline ::std::string* mutable_modelcode();
  inline ::std::string* release_modelcode();
  inline void set_allocated_modelcode(::std::string* modelcode);

  // required string ModelName = 14;
  inline bool has_modelname() const;
  inline void clear_modelname();
  static const int kModelNameFieldNumber = 14;
  inline const ::std::string& modelname() const;
  inline void set_modelname(const ::std::string& value);
  inline void set_modelname(const char* value);
  inline void set_modelname(const char* value, size_t size);
  inline ::std::string* mutable_modelname();
  inline ::std::string* release_modelname();
  inline void set_allocated_modelname(::std::string* modelname);

  // required string RelativePath = 15;
  inline bool has_relativepath() const;
  inline void clear_relativepath();
  static const int kRelativePathFieldNumber = 15;
  inline const ::std::string& relativepath() const;
  inline void set_relativepath(const ::std::string& value);
  inline void set_relativepath(const char* value);
  inline void set_relativepath(const char* value, size_t size);
  inline ::std::string* mutable_relativepath();
  inline ::std::string* release_relativepath();
  inline void set_allocated_relativepath(::std::string* relativepath);

  // required string ModelMemo = 16;
  inline bool has_modelmemo() const;
  inline void clear_modelmemo();
  static const int kModelMemoFieldNumber = 16;
  inline const ::std::string& modelmemo() const;
  inline void set_modelmemo(const ::std::string& value);
  inline void set_modelmemo(const char* value);
  inline void set_modelmemo(const char* value, size_t size);
  inline ::std::string* mutable_modelmemo();
  inline ::std::string* release_modelmemo();
  inline void set_allocated_modelmemo(::std::string* modelmemo);

  // required string HASHCode = 17;
  inline bool has_hashcode() const;
  inline void clear_hashcode();
  static const int kHASHCodeFieldNumber = 17;
  inline const ::std::string& hashcode() const;
  inline void set_hashcode(const ::std::string& value);
  inline void set_hashcode(const char* value);
  inline void set_hashcode(const char* value, size_t size);
  inline ::std::string* mutable_hashcode();
  inline ::std::string* release_hashcode();
  inline void set_allocated_hashcode(::std::string* hashcode);

  // required int64 VerCode = 18;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 18;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FrontViewID = 19;
  inline bool has_frontviewid() const;
  inline void clear_frontviewid();
  static const int kFrontViewIDFieldNumber = 19;
  inline ::google::protobuf::int32 frontviewid() const;
  inline void set_frontviewid(::google::protobuf::int32 value);

  // required int32 RightViewID = 20;
  inline bool has_rightviewid() const;
  inline void clear_rightviewid();
  static const int kRightViewIDFieldNumber = 20;
  inline ::google::protobuf::int32 rightviewid() const;
  inline void set_rightviewid(::google::protobuf::int32 value);

  // required int32 TopViewID = 21;
  inline bool has_topviewid() const;
  inline void clear_topviewid();
  static const int kTopViewIDFieldNumber = 21;
  inline ::google::protobuf::int32 topviewid() const;
  inline void set_topviewid(::google::protobuf::int32 value);

  // required int32 PhotoID = 22;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 22;
  inline ::google::protobuf::int32 photoid() const;
  inline void set_photoid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_ModelInfo)
 private:
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_arcx();
  inline void clear_has_arcx();
  inline void set_has_arcy();
  inline void clear_has_arcy();
  inline void set_has_arcz();
  inline void clear_has_arcz();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_modelcode();
  inline void clear_has_modelcode();
  inline void set_has_modelname();
  inline void clear_has_modelname();
  inline void set_has_relativepath();
  inline void clear_has_relativepath();
  inline void set_has_modelmemo();
  inline void clear_has_modelmemo();
  inline void set_has_hashcode();
  inline void clear_has_hashcode();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_frontviewid();
  inline void clear_has_frontviewid();
  inline void set_has_rightviewid();
  inline void clear_has_rightviewid();
  inline void set_has_topviewid();
  inline void clear_has_topviewid();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 modelid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 gtypeid_;
  double arcx_;
  double arcy_;
  double arcz_;
  bool isdel_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* modelcode_;
  ::std::string* modelname_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int32 frontviewid_;
  ::std::string* relativepath_;
  ::std::string* modelmemo_;
  ::std::string* hashcode_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 rightviewid_;
  ::google::protobuf::int32 topviewid_;
  ::google::protobuf::int32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_ModelInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_NumberRuleInfo : public ::google::protobuf::Message {
 public:
  JK_NumberRuleInfo();
  virtual ~JK_NumberRuleInfo();

  JK_NumberRuleInfo(const JK_NumberRuleInfo& from);

  inline JK_NumberRuleInfo& operator=(const JK_NumberRuleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_NumberRuleInfo& default_instance();

  void Swap(JK_NumberRuleInfo* other);

  // implements Message ----------------------------------------------

  JK_NumberRuleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_NumberRuleInfo& from);
  void MergeFrom(const JK_NumberRuleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 NumberRuleID = 1;
  inline bool has_numberruleid() const;
  inline void clear_numberruleid();
  static const int kNumberRuleIDFieldNumber = 1;
  inline ::google::protobuf::int32 numberruleid() const;
  inline void set_numberruleid(::google::protobuf::int32 value);

  // required int32 FittingID = 2;
  inline bool has_fittingid() const;
  inline void clear_fittingid();
  static const int kFittingIDFieldNumber = 2;
  inline ::google::protobuf::int32 fittingid() const;
  inline void set_fittingid(::google::protobuf::int32 value);

  // required double MinLen = 3;
  inline bool has_minlen() const;
  inline void clear_minlen();
  static const int kMinLenFieldNumber = 3;
  inline double minlen() const;
  inline void set_minlen(double value);

  // required double MaxLen = 4;
  inline bool has_maxlen() const;
  inline void clear_maxlen();
  static const int kMaxLenFieldNumber = 4;
  inline double maxlen() const;
  inline void set_maxlen(double value);

  // required int32 UseCount = 5;
  inline bool has_usecount() const;
  inline void clear_usecount();
  static const int kUseCountFieldNumber = 5;
  inline ::google::protobuf::int32 usecount() const;
  inline void set_usecount(::google::protobuf::int32 value);

  // required int64 VerCode = 6;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 6;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 7;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 7;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 8;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 8;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 9;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 9;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 10;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 10;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 11;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 11;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_NumberRuleInfo)
 private:
  inline void set_has_numberruleid();
  inline void clear_has_numberruleid();
  inline void set_has_fittingid();
  inline void clear_has_fittingid();
  inline void set_has_minlen();
  inline void clear_has_minlen();
  inline void set_has_maxlen();
  inline void clear_has_maxlen();
  inline void set_has_usecount();
  inline void clear_has_usecount();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 numberruleid_;
  ::google::protobuf::int32 fittingid_;
  double minlen_;
  double maxlen_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 usecount_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_NumberRuleInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_PackageInfo : public ::google::protobuf::Message {
 public:
  JK_PackageInfo();
  virtual ~JK_PackageInfo();

  JK_PackageInfo(const JK_PackageInfo& from);

  inline JK_PackageInfo& operator=(const JK_PackageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_PackageInfo& default_instance();

  void Swap(JK_PackageInfo* other);

  // implements Message ----------------------------------------------

  JK_PackageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_PackageInfo& from);
  void MergeFrom(const JK_PackageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FittingPackID = 1;
  inline bool has_fittingpackid() const;
  inline void clear_fittingpackid();
  static const int kFittingPackIDFieldNumber = 1;
  inline ::google::protobuf::int32 fittingpackid() const;
  inline void set_fittingpackid(::google::protobuf::int32 value);

  // required int32 FactoryID = 2;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 2;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 GroupID = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 3;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required bool IsDel = 4;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 4;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsActive = 5;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 5;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required bool IsSplit = 6;
  inline bool has_issplit() const;
  inline void clear_issplit();
  static const int kIsSplitFieldNumber = 6;
  inline bool issplit() const;
  inline void set_issplit(bool value);

  // required bool IsSeparate = 7;
  inline bool has_isseparate() const;
  inline void clear_isseparate();
  static const int kIsSeparateFieldNumber = 7;
  inline bool isseparate() const;
  inline void set_isseparate(bool value);

  // required int32 GTypeID = 8;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 8;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 CreatorID = 9;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 9;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 10;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 10;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 11;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 11;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 12;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 12;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string FittingPackCode = 13;
  inline bool has_fittingpackcode() const;
  inline void clear_fittingpackcode();
  static const int kFittingPackCodeFieldNumber = 13;
  inline const ::std::string& fittingpackcode() const;
  inline void set_fittingpackcode(const ::std::string& value);
  inline void set_fittingpackcode(const char* value);
  inline void set_fittingpackcode(const char* value, size_t size);
  inline ::std::string* mutable_fittingpackcode();
  inline ::std::string* release_fittingpackcode();
  inline void set_allocated_fittingpackcode(::std::string* fittingpackcode);

  // required string FittingPackName = 14;
  inline bool has_fittingpackname() const;
  inline void clear_fittingpackname();
  static const int kFittingPackNameFieldNumber = 14;
  inline const ::std::string& fittingpackname() const;
  inline void set_fittingpackname(const ::std::string& value);
  inline void set_fittingpackname(const char* value);
  inline void set_fittingpackname(const char* value, size_t size);
  inline ::std::string* mutable_fittingpackname();
  inline ::std::string* release_fittingpackname();
  inline void set_allocated_fittingpackname(::std::string* fittingpackname);

  // required string FittingPackMemo = 15;
  inline bool has_fittingpackmemo() const;
  inline void clear_fittingpackmemo();
  static const int kFittingPackMemoFieldNumber = 15;
  inline const ::std::string& fittingpackmemo() const;
  inline void set_fittingpackmemo(const ::std::string& value);
  inline void set_fittingpackmemo(const char* value);
  inline void set_fittingpackmemo(const char* value, size_t size);
  inline ::std::string* mutable_fittingpackmemo();
  inline ::std::string* release_fittingpackmemo();
  inline void set_allocated_fittingpackmemo(::std::string* fittingpackmemo);

  // required int64 VerCode = 16;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 16;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_PackageInfo)
 private:
  inline void set_has_fittingpackid();
  inline void clear_has_fittingpackid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_issplit();
  inline void clear_has_issplit();
  inline void set_has_isseparate();
  inline void clear_has_isseparate();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_fittingpackcode();
  inline void clear_has_fittingpackcode();
  inline void set_has_fittingpackname();
  inline void clear_has_fittingpackname();
  inline void set_has_fittingpackmemo();
  inline void clear_has_fittingpackmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fittingpackid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 groupid_;
  bool isdel_;
  bool isactive_;
  bool issplit_;
  bool isseparate_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* fittingpackcode_;
  ::std::string* fittingpackname_;
  ::std::string* fittingpackmemo_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_PackageInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_PackageMapInfo : public ::google::protobuf::Message {
 public:
  JK_PackageMapInfo();
  virtual ~JK_PackageMapInfo();

  JK_PackageMapInfo(const JK_PackageMapInfo& from);

  inline JK_PackageMapInfo& operator=(const JK_PackageMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_PackageMapInfo& default_instance();

  void Swap(JK_PackageMapInfo* other);

  // implements Message ----------------------------------------------

  JK_PackageMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_PackageMapInfo& from);
  void MergeFrom(const JK_PackageMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 PackageID = 1;
  inline bool has_packageid() const;
  inline void clear_packageid();
  static const int kPackageIDFieldNumber = 1;
  inline ::google::protobuf::int32 packageid() const;
  inline void set_packageid(::google::protobuf::int32 value);

  // required int32 FittingID = 2;
  inline bool has_fittingid() const;
  inline void clear_fittingid();
  static const int kFittingIDFieldNumber = 2;
  inline ::google::protobuf::int32 fittingid() const;
  inline void set_fittingid(::google::protobuf::int32 value);

  // required int32 FittingCount = 3;
  inline bool has_fittingcount() const;
  inline void clear_fittingcount();
  static const int kFittingCountFieldNumber = 3;
  inline ::google::protobuf::int32 fittingcount() const;
  inline void set_fittingcount(::google::protobuf::int32 value);

  // required int64 VerCode = 4;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 4;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 5;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 5;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_PackageMapInfo)
 private:
  inline void set_has_packageid();
  inline void clear_has_packageid();
  inline void set_has_fittingid();
  inline void clear_has_fittingid();
  inline void set_has_fittingcount();
  inline void clear_has_fittingcount();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 packageid_;
  ::google::protobuf::int32 fittingid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 fittingcount_;
  ::google::protobuf::int32 factoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_PackageMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_ProductInfo : public ::google::protobuf::Message {
 public:
  JK_ProductInfo();
  virtual ~JK_ProductInfo();

  JK_ProductInfo(const JK_ProductInfo& from);

  inline JK_ProductInfo& operator=(const JK_ProductInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_ProductInfo& default_instance();

  void Swap(JK_ProductInfo* other);

  // implements Message ----------------------------------------------

  JK_ProductInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_ProductInfo& from);
  void MergeFrom(const JK_ProductInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ProductID = 1;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductIDFieldNumber = 1;
  inline ::google::protobuf::int32 productid() const;
  inline void set_productid(::google::protobuf::int32 value);

  // required int32 FactoryID = 2;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 2;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 GroupID = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 3;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required bool IsDel = 4;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 4;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsActive = 5;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 5;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required bool IsSplit = 6;
  inline bool has_issplit() const;
  inline void clear_issplit();
  static const int kIsSplitFieldNumber = 6;
  inline bool issplit() const;
  inline void set_issplit(bool value);

  // required int32 SupplyType = 7;
  inline bool has_supplytype() const;
  inline void clear_supplytype();
  static const int kSupplyTypeFieldNumber = 7;
  inline ::google::protobuf::int32 supplytype() const;
  inline void set_supplytype(::google::protobuf::int32 value);

  // required int32 GTypeID = 8;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 8;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required int32 ShowID = 9;
  inline bool has_showid() const;
  inline void clear_showid();
  static const int kShowIDFieldNumber = 9;
  inline ::google::protobuf::int32 showid() const;
  inline void set_showid(::google::protobuf::int32 value);

  // required int32 ModelID = 10;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 10;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required double XLen = 11;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 11;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 12;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 12;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double ZLen = 13;
  inline bool has_zlen() const;
  inline void clear_zlen();
  static const int kZLenFieldNumber = 13;
  inline double zlen() const;
  inline void set_zlen(double value);

  // required int32 CreatorID = 14;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 14;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 15;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 15;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 16;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 16;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 17;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 17;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string ProductCode = 18;
  inline bool has_productcode() const;
  inline void clear_productcode();
  static const int kProductCodeFieldNumber = 18;
  inline const ::std::string& productcode() const;
  inline void set_productcode(const ::std::string& value);
  inline void set_productcode(const char* value);
  inline void set_productcode(const char* value, size_t size);
  inline ::std::string* mutable_productcode();
  inline ::std::string* release_productcode();
  inline void set_allocated_productcode(::std::string* productcode);

  // required string ProductName = 19;
  inline bool has_productname() const;
  inline void clear_productname();
  static const int kProductNameFieldNumber = 19;
  inline const ::std::string& productname() const;
  inline void set_productname(const ::std::string& value);
  inline void set_productname(const char* value);
  inline void set_productname(const char* value, size_t size);
  inline ::std::string* mutable_productname();
  inline ::std::string* release_productname();
  inline void set_allocated_productname(::std::string* productname);

  // required string ProductMemo = 20;
  inline bool has_productmemo() const;
  inline void clear_productmemo();
  static const int kProductMemoFieldNumber = 20;
  inline const ::std::string& productmemo() const;
  inline void set_productmemo(const ::std::string& value);
  inline void set_productmemo(const char* value);
  inline void set_productmemo(const char* value, size_t size);
  inline ::std::string* mutable_productmemo();
  inline ::std::string* release_productmemo();
  inline void set_allocated_productmemo(::std::string* productmemo);

  // required int64 VerCode = 21;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 21;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_ProductInfo)
 private:
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_issplit();
  inline void clear_has_issplit();
  inline void set_has_supplytype();
  inline void clear_has_supplytype();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_showid();
  inline void clear_has_showid();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_zlen();
  inline void clear_has_zlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_productcode();
  inline void clear_has_productcode();
  inline void set_has_productname();
  inline void clear_has_productname();
  inline void set_has_productmemo();
  inline void clear_has_productmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 productid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 groupid_;
  bool isdel_;
  bool isactive_;
  bool issplit_;
  ::google::protobuf::int32 supplytype_;
  ::google::protobuf::int32 gtypeid_;
  ::google::protobuf::int32 showid_;
  ::google::protobuf::int32 modelid_;
  double xlen_;
  double ylen_;
  double zlen_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* productcode_;
  ::std::string* productname_;
  ::std::string* productmemo_;
  ::google::protobuf::int64 vercode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_ProductInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_ProductSeriesInfo : public ::google::protobuf::Message {
 public:
  JK_ProductSeriesInfo();
  virtual ~JK_ProductSeriesInfo();

  JK_ProductSeriesInfo(const JK_ProductSeriesInfo& from);

  inline JK_ProductSeriesInfo& operator=(const JK_ProductSeriesInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_ProductSeriesInfo& default_instance();

  void Swap(JK_ProductSeriesInfo* other);

  // implements Message ----------------------------------------------

  JK_ProductSeriesInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_ProductSeriesInfo& from);
  void MergeFrom(const JK_ProductSeriesInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ProductSeriesID = 1;
  inline bool has_productseriesid() const;
  inline void clear_productseriesid();
  static const int kProductSeriesIDFieldNumber = 1;
  inline ::google::protobuf::int32 productseriesid() const;
  inline void set_productseriesid(::google::protobuf::int32 value);

  // required int32 FactoryID = 2;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 2;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 GroupID = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 3;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required bool IsDel = 4;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 4;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required bool IsActive = 5;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 5;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // required int32 CreatorID = 6;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 6;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 7;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 7;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 8;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 8;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 9;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 9;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string ProductSeriesCode = 10;
  inline bool has_productseriescode() const;
  inline void clear_productseriescode();
  static const int kProductSeriesCodeFieldNumber = 10;
  inline const ::std::string& productseriescode() const;
  inline void set_productseriescode(const ::std::string& value);
  inline void set_productseriescode(const char* value);
  inline void set_productseriescode(const char* value, size_t size);
  inline ::std::string* mutable_productseriescode();
  inline ::std::string* release_productseriescode();
  inline void set_allocated_productseriescode(::std::string* productseriescode);

  // required string ProductSeriesName = 11;
  inline bool has_productseriesname() const;
  inline void clear_productseriesname();
  static const int kProductSeriesNameFieldNumber = 11;
  inline const ::std::string& productseriesname() const;
  inline void set_productseriesname(const ::std::string& value);
  inline void set_productseriesname(const char* value);
  inline void set_productseriesname(const char* value, size_t size);
  inline ::std::string* mutable_productseriesname();
  inline ::std::string* release_productseriesname();
  inline void set_allocated_productseriesname(::std::string* productseriesname);

  // required string ProductSeriesMemo = 12;
  inline bool has_productseriesmemo() const;
  inline void clear_productseriesmemo();
  static const int kProductSeriesMemoFieldNumber = 12;
  inline const ::std::string& productseriesmemo() const;
  inline void set_productseriesmemo(const ::std::string& value);
  inline void set_productseriesmemo(const char* value);
  inline void set_productseriesmemo(const char* value, size_t size);
  inline ::std::string* mutable_productseriesmemo();
  inline ::std::string* release_productseriesmemo();
  inline void set_allocated_productseriesmemo(::std::string* productseriesmemo);

  // required int64 VerCode = 13;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 13;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_ProductSeriesInfo)
 private:
  inline void set_has_productseriesid();
  inline void clear_has_productseriesid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_productseriescode();
  inline void clear_has_productseriescode();
  inline void set_has_productseriesname();
  inline void clear_has_productseriesname();
  inline void set_has_productseriesmemo();
  inline void clear_has_productseriesmemo();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 productseriesid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 groupid_;
  bool isdel_;
  bool isactive_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* productseriescode_;
  ::std::string* productseriesname_;
  ::std::string* productseriesmemo_;
  ::google::protobuf::int64 vercode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_ProductSeriesInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_ProductSeriesValidInfo : public ::google::protobuf::Message {
 public:
  JK_ProductSeriesValidInfo();
  virtual ~JK_ProductSeriesValidInfo();

  JK_ProductSeriesValidInfo(const JK_ProductSeriesValidInfo& from);

  inline JK_ProductSeriesValidInfo& operator=(const JK_ProductSeriesValidInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_ProductSeriesValidInfo& default_instance();

  void Swap(JK_ProductSeriesValidInfo* other);

  // implements Message ----------------------------------------------

  JK_ProductSeriesValidInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_ProductSeriesValidInfo& from);
  void MergeFrom(const JK_ProductSeriesValidInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ProductSeriesID = 1;
  inline bool has_productseriesid() const;
  inline void clear_productseriesid();
  static const int kProductSeriesIDFieldNumber = 1;
  inline ::google::protobuf::int32 productseriesid() const;
  inline void set_productseriesid(::google::protobuf::int32 value);

  // required int32 ProductSeriesItemID = 2;
  inline bool has_productseriesitemid() const;
  inline void clear_productseriesitemid();
  static const int kProductSeriesItemIDFieldNumber = 2;
  inline ::google::protobuf::int32 productseriesitemid() const;
  inline void set_productseriesitemid(::google::protobuf::int32 value);

  // required int32 PSType = 3;
  inline bool has_pstype() const;
  inline void clear_pstype();
  static const int kPSTypeFieldNumber = 3;
  inline ::google::protobuf::int32 pstype() const;
  inline void set_pstype(::google::protobuf::int32 value);

  // required int32 ParentID = 4;
  inline bool has_parentid() const;
  inline void clear_parentid();
  static const int kParentIDFieldNumber = 4;
  inline ::google::protobuf::int32 parentid() const;
  inline void set_parentid(::google::protobuf::int32 value);

  // required bool IsDefault = 5;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 5;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required bool IsGroup = 6;
  inline bool has_isgroup() const;
  inline void clear_isgroup();
  static const int kIsGroupFieldNumber = 6;
  inline bool isgroup() const;
  inline void set_isgroup(bool value);

  // required int64 VerCode = 7;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 7;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 8;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 8;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 9;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 9;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 10;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 10;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 11;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 11;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 12;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 12;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required int32 DefaultItemID = 13;
  inline bool has_defaultitemid() const;
  inline void clear_defaultitemid();
  static const int kDefaultItemIDFieldNumber = 13;
  inline ::google::protobuf::int32 defaultitemid() const;
  inline void set_defaultitemid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_ProductSeriesValidInfo)
 private:
  inline void set_has_productseriesid();
  inline void clear_has_productseriesid();
  inline void set_has_productseriesitemid();
  inline void clear_has_productseriesitemid();
  inline void set_has_pstype();
  inline void clear_has_pstype();
  inline void set_has_parentid();
  inline void clear_has_parentid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_isgroup();
  inline void clear_has_isgroup();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_defaultitemid();
  inline void clear_has_defaultitemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 productseriesid_;
  ::google::protobuf::int32 productseriesitemid_;
  ::google::protobuf::int32 pstype_;
  ::google::protobuf::int32 parentid_;
  bool isdefault_;
  bool isgroup_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 defaultitemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_ProductSeriesValidInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_ResourceInfo : public ::google::protobuf::Message {
 public:
  JK_ResourceInfo();
  virtual ~JK_ResourceInfo();

  JK_ResourceInfo(const JK_ResourceInfo& from);

  inline JK_ResourceInfo& operator=(const JK_ResourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_ResourceInfo& default_instance();

  void Swap(JK_ResourceInfo* other);

  // implements Message ----------------------------------------------

  JK_ResourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_ResourceInfo& from);
  void MergeFrom(const JK_ResourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ResourceID = 1;
  inline bool has_resourceid() const;
  inline void clear_resourceid();
  static const int kResourceIDFieldNumber = 1;
  inline ::google::protobuf::int32 resourceid() const;
  inline void set_resourceid(::google::protobuf::int32 value);

  // required int32 GroupID = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // required int32 FactoryID = 3;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 3;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 GTypeID = 4;
  inline bool has_gtypeid() const;
  inline void clear_gtypeid();
  static const int kGTypeIDFieldNumber = 4;
  inline ::google::protobuf::int32 gtypeid() const;
  inline void set_gtypeid(::google::protobuf::int32 value);

  // required bool IsDel = 5;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 5;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required double XLen = 6;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 6;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 7;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 7;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required int32 CreatorID = 8;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 8;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 9;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 9;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 10;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 10;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 11;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 11;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // required string ResourceCode = 12;
  inline bool has_resourcecode() const;
  inline void clear_resourcecode();
  static const int kResourceCodeFieldNumber = 12;
  inline const ::std::string& resourcecode() const;
  inline void set_resourcecode(const ::std::string& value);
  inline void set_resourcecode(const char* value);
  inline void set_resourcecode(const char* value, size_t size);
  inline ::std::string* mutable_resourcecode();
  inline ::std::string* release_resourcecode();
  inline void set_allocated_resourcecode(::std::string* resourcecode);

  // required string ResourceName = 13;
  inline bool has_resourcename() const;
  inline void clear_resourcename();
  static const int kResourceNameFieldNumber = 13;
  inline const ::std::string& resourcename() const;
  inline void set_resourcename(const ::std::string& value);
  inline void set_resourcename(const char* value);
  inline void set_resourcename(const char* value, size_t size);
  inline ::std::string* mutable_resourcename();
  inline ::std::string* release_resourcename();
  inline void set_allocated_resourcename(::std::string* resourcename);

  // required string RelativePath = 14;
  inline bool has_relativepath() const;
  inline void clear_relativepath();
  static const int kRelativePathFieldNumber = 14;
  inline const ::std::string& relativepath() const;
  inline void set_relativepath(const ::std::string& value);
  inline void set_relativepath(const char* value);
  inline void set_relativepath(const char* value, size_t size);
  inline ::std::string* mutable_relativepath();
  inline ::std::string* release_relativepath();
  inline void set_allocated_relativepath(::std::string* relativepath);

  // required string ResourceMemo = 15;
  inline bool has_resourcememo() const;
  inline void clear_resourcememo();
  static const int kResourceMemoFieldNumber = 15;
  inline const ::std::string& resourcememo() const;
  inline void set_resourcememo(const ::std::string& value);
  inline void set_resourcememo(const char* value);
  inline void set_resourcememo(const char* value, size_t size);
  inline ::std::string* mutable_resourcememo();
  inline ::std::string* release_resourcememo();
  inline void set_allocated_resourcememo(::std::string* resourcememo);

  // required string HASHCode = 16;
  inline bool has_hashcode() const;
  inline void clear_hashcode();
  static const int kHASHCodeFieldNumber = 16;
  inline const ::std::string& hashcode() const;
  inline void set_hashcode(const ::std::string& value);
  inline void set_hashcode(const char* value);
  inline void set_hashcode(const char* value, size_t size);
  inline ::std::string* mutable_hashcode();
  inline ::std::string* release_hashcode();
  inline void set_allocated_hashcode(::std::string* hashcode);

  // required int64 VerCode = 17;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 17;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_ResourceInfo)
 private:
  inline void set_has_resourceid();
  inline void clear_has_resourceid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_gtypeid();
  inline void clear_has_gtypeid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_resourcecode();
  inline void clear_has_resourcecode();
  inline void set_has_resourcename();
  inline void clear_has_resourcename();
  inline void set_has_relativepath();
  inline void clear_has_relativepath();
  inline void set_has_resourcememo();
  inline void clear_has_resourcememo();
  inline void set_has_hashcode();
  inline void clear_has_hashcode();
  inline void set_has_vercode();
  inline void clear_has_vercode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resourceid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 gtypeid_;
  double xlen_;
  bool isdel_;
  ::google::protobuf::int32 creatorid_;
  double ylen_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::std::string* resourcecode_;
  ::std::string* resourcename_;
  ::std::string* relativepath_;
  ::std::string* resourcememo_;
  ::std::string* hashcode_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_ResourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_SealRuleInfo : public ::google::protobuf::Message {
 public:
  JK_SealRuleInfo();
  virtual ~JK_SealRuleInfo();

  JK_SealRuleInfo(const JK_SealRuleInfo& from);

  inline JK_SealRuleInfo& operator=(const JK_SealRuleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_SealRuleInfo& default_instance();

  void Swap(JK_SealRuleInfo* other);

  // implements Message ----------------------------------------------

  JK_SealRuleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_SealRuleInfo& from);
  void MergeFrom(const JK_SealRuleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 SealRuleID = 1;
  inline bool has_sealruleid() const;
  inline void clear_sealruleid();
  static const int kSealRuleIDFieldNumber = 1;
  inline ::google::protobuf::int32 sealruleid() const;
  inline void set_sealruleid(::google::protobuf::int32 value);

  // required bool IsDel = 2;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 2;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 VisibleSealID = 3;
  inline bool has_visiblesealid() const;
  inline void clear_visiblesealid();
  static const int kVisibleSealIDFieldNumber = 3;
  inline ::google::protobuf::int32 visiblesealid() const;
  inline void set_visiblesealid(::google::protobuf::int32 value);

  // required int32 InvisibleSealID = 4;
  inline bool has_invisiblesealid() const;
  inline void clear_invisiblesealid();
  static const int kInvisibleSealIDFieldNumber = 4;
  inline ::google::protobuf::int32 invisiblesealid() const;
  inline void set_invisiblesealid(::google::protobuf::int32 value);

  // required double VisPreMill = 5;
  inline bool has_vispremill() const;
  inline void clear_vispremill();
  static const int kVisPreMillFieldNumber = 5;
  inline double vispremill() const;
  inline void set_vispremill(double value);

  // required double InvisPreMill = 6;
  inline bool has_invispremill() const;
  inline void clear_invispremill();
  static const int kInvisPreMillFieldNumber = 6;
  inline double invispremill() const;
  inline void set_invispremill(double value);

  // required int32 STypeID = 7;
  inline bool has_stypeid() const;
  inline void clear_stypeid();
  static const int kSTypeIDFieldNumber = 7;
  inline ::google::protobuf::int32 stypeid() const;
  inline void set_stypeid(::google::protobuf::int32 value);

  // required string SealRuleName = 8;
  inline bool has_sealrulename() const;
  inline void clear_sealrulename();
  static const int kSealRuleNameFieldNumber = 8;
  inline const ::std::string& sealrulename() const;
  inline void set_sealrulename(const ::std::string& value);
  inline void set_sealrulename(const char* value);
  inline void set_sealrulename(const char* value, size_t size);
  inline ::std::string* mutable_sealrulename();
  inline ::std::string* release_sealrulename();
  inline void set_allocated_sealrulename(::std::string* sealrulename);

  // required int64 VerCode = 9;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 9;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 10;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 10;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 11;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 11;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 12;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 12;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 13;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 13;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 14;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 14;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_SealRuleInfo)
 private:
  inline void set_has_sealruleid();
  inline void clear_has_sealruleid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_visiblesealid();
  inline void clear_has_visiblesealid();
  inline void set_has_invisiblesealid();
  inline void clear_has_invisiblesealid();
  inline void set_has_vispremill();
  inline void clear_has_vispremill();
  inline void set_has_invispremill();
  inline void clear_has_invispremill();
  inline void set_has_stypeid();
  inline void clear_has_stypeid();
  inline void set_has_sealrulename();
  inline void clear_has_sealrulename();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 sealruleid_;
  bool isdel_;
  ::google::protobuf::int32 visiblesealid_;
  ::google::protobuf::int32 invisiblesealid_;
  double vispremill_;
  double invispremill_;
  ::std::string* sealrulename_;
  ::google::protobuf::int32 stypeid_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_SealRuleInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_SysConfigInfo : public ::google::protobuf::Message {
 public:
  JK_SysConfigInfo();
  virtual ~JK_SysConfigInfo();

  JK_SysConfigInfo(const JK_SysConfigInfo& from);

  inline JK_SysConfigInfo& operator=(const JK_SysConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_SysConfigInfo& default_instance();

  void Swap(JK_SysConfigInfo* other);

  // implements Message ----------------------------------------------

  JK_SysConfigInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_SysConfigInfo& from);
  void MergeFrom(const JK_SysConfigInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FactoryID = 1;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 1;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 2;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 2;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 ConfigID = 3;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIDFieldNumber = 3;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // required double TableFrontLen = 4;
  inline bool has_tablefrontlen() const;
  inline void clear_tablefrontlen();
  static const int kTableFrontLenFieldNumber = 4;
  inline double tablefrontlen() const;
  inline void set_tablefrontlen(double value);

  // required double TableSideLen = 5;
  inline bool has_tablesidelen() const;
  inline void clear_tablesidelen();
  static const int kTableSideLenFieldNumber = 5;
  inline double tablesidelen() const;
  inline void set_tablesidelen(double value);

  // required double BaseCabDefaultYPos = 6;
  inline bool has_basecabdefaultypos() const;
  inline void clear_basecabdefaultypos();
  static const int kBaseCabDefaultYPosFieldNumber = 6;
  inline double basecabdefaultypos() const;
  inline void set_basecabdefaultypos(double value);

  // required double BaseCabSideLen = 7;
  inline bool has_basecabsidelen() const;
  inline void clear_basecabsidelen();
  static const int kBaseCabSideLenFieldNumber = 7;
  inline double basecabsidelen() const;
  inline void set_basecabsidelen(double value);

  // required double WallCabDefaultYPos = 8;
  inline bool has_wallcabdefaultypos() const;
  inline void clear_wallcabdefaultypos();
  static const int kWallCabDefaultYPosFieldNumber = 8;
  inline double wallcabdefaultypos() const;
  inline void set_wallcabdefaultypos(double value);

  // required double WallCabSideLen = 9;
  inline bool has_wallcabsidelen() const;
  inline void clear_wallcabsidelen();
  static const int kWallCabSideLenFieldNumber = 9;
  inline double wallcabsidelen() const;
  inline void set_wallcabsidelen(double value);

  // required double ToekickFrontLen = 10;
  inline bool has_toekickfrontlen() const;
  inline void clear_toekickfrontlen();
  static const int kToekickFrontLenFieldNumber = 10;
  inline double toekickfrontlen() const;
  inline void set_toekickfrontlen(double value);

  // required double DefaultBarHeight = 11;
  inline bool has_defaultbarheight() const;
  inline void clear_defaultbarheight();
  static const int kDefaultBarHeightFieldNumber = 11;
  inline double defaultbarheight() const;
  inline void set_defaultbarheight(double value);

  // required double DefaultSealExtraLen = 12;
  inline bool has_defaultsealextralen() const;
  inline void clear_defaultsealextralen();
  static const int kDefaultSealExtraLenFieldNumber = 12;
  inline double defaultsealextralen() const;
  inline void set_defaultsealextralen(double value);

  // required double DefaultSealPreMillLen = 13;
  inline bool has_defaultsealpremilllen() const;
  inline void clear_defaultsealpremilllen();
  static const int kDefaultSealPreMillLenFieldNumber = 13;
  inline double defaultsealpremilllen() const;
  inline void set_defaultsealpremilllen(double value);

  // required double ShelfDefaultYPos = 14;
  inline bool has_shelfdefaultypos() const;
  inline void clear_shelfdefaultypos();
  static const int kShelfDefaultYPosFieldNumber = 14;
  inline double shelfdefaultypos() const;
  inline void set_shelfdefaultypos(double value);

  // required double BGPanelDefaultYPos = 15;
  inline bool has_bgpaneldefaultypos() const;
  inline void clear_bgpaneldefaultypos();
  static const int kBGPanelDefaultYPosFieldNumber = 15;
  inline double bgpaneldefaultypos() const;
  inline void set_bgpaneldefaultypos(double value);

  // required double TableToCabDefaultYLen = 16;
  inline bool has_tabletocabdefaultylen() const;
  inline void clear_tabletocabdefaultylen();
  static const int kTableToCabDefaultYLenFieldNumber = 16;
  inline double tabletocabdefaultylen() const;
  inline void set_tabletocabdefaultylen(double value);

  // required double DefaultBaseCabinetXLen = 17;
  inline bool has_defaultbasecabinetxlen() const;
  inline void clear_defaultbasecabinetxlen();
  static const int kDefaultBaseCabinetXLenFieldNumber = 17;
  inline double defaultbasecabinetxlen() const;
  inline void set_defaultbasecabinetxlen(double value);

  // required double DefaultBaseCabinetYLen = 18;
  inline bool has_defaultbasecabinetylen() const;
  inline void clear_defaultbasecabinetylen();
  static const int kDefaultBaseCabinetYLenFieldNumber = 18;
  inline double defaultbasecabinetylen() const;
  inline void set_defaultbasecabinetylen(double value);

  // required double DefaultBaseCabinetZLen = 19;
  inline bool has_defaultbasecabinetzlen() const;
  inline void clear_defaultbasecabinetzlen();
  static const int kDefaultBaseCabinetZLenFieldNumber = 19;
  inline double defaultbasecabinetzlen() const;
  inline void set_defaultbasecabinetzlen(double value);

  // required double DefaultWallCabinetXLen = 20;
  inline bool has_defaultwallcabinetxlen() const;
  inline void clear_defaultwallcabinetxlen();
  static const int kDefaultWallCabinetXLenFieldNumber = 20;
  inline double defaultwallcabinetxlen() const;
  inline void set_defaultwallcabinetxlen(double value);

  // required double DefaultWallCabinetYLen = 21;
  inline bool has_defaultwallcabinetylen() const;
  inline void clear_defaultwallcabinetylen();
  static const int kDefaultWallCabinetYLenFieldNumber = 21;
  inline double defaultwallcabinetylen() const;
  inline void set_defaultwallcabinetylen(double value);

  // required double DefaultWallCabinetZLen = 22;
  inline bool has_defaultwallcabinetzlen() const;
  inline void clear_defaultwallcabinetzlen();
  static const int kDefaultWallCabinetZLenFieldNumber = 22;
  inline double defaultwallcabinetzlen() const;
  inline void set_defaultwallcabinetzlen(double value);

  // required double DefaultLCabinetXLen = 23;
  inline bool has_defaultlcabinetxlen() const;
  inline void clear_defaultlcabinetxlen();
  static const int kDefaultLCabinetXLenFieldNumber = 23;
  inline double defaultlcabinetxlen() const;
  inline void set_defaultlcabinetxlen(double value);

  // required double DefaultLCabinetZLen = 24;
  inline bool has_defaultlcabinetzlen() const;
  inline void clear_defaultlcabinetzlen();
  static const int kDefaultLCabinetZLenFieldNumber = 24;
  inline double defaultlcabinetzlen() const;
  inline void set_defaultlcabinetzlen(double value);

  // required double DefaultCabinetBoardThick = 25;
  inline bool has_defaultcabinetboardthick() const;
  inline void clear_defaultcabinetboardthick();
  static const int kDefaultCabinetBoardThickFieldNumber = 25;
  inline double defaultcabinetboardthick() const;
  inline void set_defaultcabinetboardthick(double value);

  // required double DefaultDoorBoardThick = 26;
  inline bool has_defaultdoorboardthick() const;
  inline void clear_defaultdoorboardthick();
  static const int kDefaultDoorBoardThickFieldNumber = 26;
  inline double defaultdoorboardthick() const;
  inline void set_defaultdoorboardthick(double value);

  // required double DefaultThinBoardThick = 27;
  inline bool has_defaultthinboardthick() const;
  inline void clear_defaultthinboardthick();
  static const int kDefaultThinBoardThickFieldNumber = 27;
  inline double defaultthinboardthick() const;
  inline void set_defaultthinboardthick(double value);

  // required double DefaultDecorLineHeight = 28;
  inline bool has_defaultdecorlineheight() const;
  inline void clear_defaultdecorlineheight();
  static const int kDefaultDecorLineHeightFieldNumber = 28;
  inline double defaultdecorlineheight() const;
  inline void set_defaultdecorlineheight(double value);

  // required double DefaultDrawerXLen = 29;
  inline bool has_defaultdrawerxlen() const;
  inline void clear_defaultdrawerxlen();
  static const int kDefaultDrawerXLenFieldNumber = 29;
  inline double defaultdrawerxlen() const;
  inline void set_defaultdrawerxlen(double value);

  // required double DefaultDrawerYLen = 30;
  inline bool has_defaultdrawerylen() const;
  inline void clear_defaultdrawerylen();
  static const int kDefaultDrawerYLenFieldNumber = 30;
  inline double defaultdrawerylen() const;
  inline void set_defaultdrawerylen(double value);

  // required double DefaultDrawerZLen = 31;
  inline bool has_defaultdrawerzlen() const;
  inline void clear_defaultdrawerzlen();
  static const int kDefaultDrawerZLenFieldNumber = 31;
  inline double defaultdrawerzlen() const;
  inline void set_defaultdrawerzlen(double value);

  // required int32 CreatorID = 32;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 32;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 33;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 33;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 34;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 34;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 35;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 35;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_SysConfigInfo)
 private:
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_tablefrontlen();
  inline void clear_has_tablefrontlen();
  inline void set_has_tablesidelen();
  inline void clear_has_tablesidelen();
  inline void set_has_basecabdefaultypos();
  inline void clear_has_basecabdefaultypos();
  inline void set_has_basecabsidelen();
  inline void clear_has_basecabsidelen();
  inline void set_has_wallcabdefaultypos();
  inline void clear_has_wallcabdefaultypos();
  inline void set_has_wallcabsidelen();
  inline void clear_has_wallcabsidelen();
  inline void set_has_toekickfrontlen();
  inline void clear_has_toekickfrontlen();
  inline void set_has_defaultbarheight();
  inline void clear_has_defaultbarheight();
  inline void set_has_defaultsealextralen();
  inline void clear_has_defaultsealextralen();
  inline void set_has_defaultsealpremilllen();
  inline void clear_has_defaultsealpremilllen();
  inline void set_has_shelfdefaultypos();
  inline void clear_has_shelfdefaultypos();
  inline void set_has_bgpaneldefaultypos();
  inline void clear_has_bgpaneldefaultypos();
  inline void set_has_tabletocabdefaultylen();
  inline void clear_has_tabletocabdefaultylen();
  inline void set_has_defaultbasecabinetxlen();
  inline void clear_has_defaultbasecabinetxlen();
  inline void set_has_defaultbasecabinetylen();
  inline void clear_has_defaultbasecabinetylen();
  inline void set_has_defaultbasecabinetzlen();
  inline void clear_has_defaultbasecabinetzlen();
  inline void set_has_defaultwallcabinetxlen();
  inline void clear_has_defaultwallcabinetxlen();
  inline void set_has_defaultwallcabinetylen();
  inline void clear_has_defaultwallcabinetylen();
  inline void set_has_defaultwallcabinetzlen();
  inline void clear_has_defaultwallcabinetzlen();
  inline void set_has_defaultlcabinetxlen();
  inline void clear_has_defaultlcabinetxlen();
  inline void set_has_defaultlcabinetzlen();
  inline void clear_has_defaultlcabinetzlen();
  inline void set_has_defaultcabinetboardthick();
  inline void clear_has_defaultcabinetboardthick();
  inline void set_has_defaultdoorboardthick();
  inline void clear_has_defaultdoorboardthick();
  inline void set_has_defaultthinboardthick();
  inline void clear_has_defaultthinboardthick();
  inline void set_has_defaultdecorlineheight();
  inline void clear_has_defaultdecorlineheight();
  inline void set_has_defaultdrawerxlen();
  inline void clear_has_defaultdrawerxlen();
  inline void set_has_defaultdrawerylen();
  inline void clear_has_defaultdrawerylen();
  inline void set_has_defaultdrawerzlen();
  inline void clear_has_defaultdrawerzlen();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 configid_;
  double tablefrontlen_;
  double tablesidelen_;
  double basecabdefaultypos_;
  double basecabsidelen_;
  double wallcabdefaultypos_;
  double wallcabsidelen_;
  double toekickfrontlen_;
  double defaultbarheight_;
  double defaultsealextralen_;
  double defaultsealpremilllen_;
  double shelfdefaultypos_;
  double bgpaneldefaultypos_;
  double tabletocabdefaultylen_;
  double defaultbasecabinetxlen_;
  double defaultbasecabinetylen_;
  double defaultbasecabinetzlen_;
  double defaultwallcabinetxlen_;
  double defaultwallcabinetylen_;
  double defaultwallcabinetzlen_;
  double defaultlcabinetxlen_;
  double defaultlcabinetzlen_;
  double defaultcabinetboardthick_;
  double defaultdoorboardthick_;
  double defaultthinboardthick_;
  double defaultdecorlineheight_;
  double defaultdrawerxlen_;
  double defaultdrawerylen_;
  double defaultdrawerzlen_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(35 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_SysConfigInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_SysRuleConfigInfo : public ::google::protobuf::Message {
 public:
  JK_SysRuleConfigInfo();
  virtual ~JK_SysRuleConfigInfo();

  JK_SysRuleConfigInfo(const JK_SysRuleConfigInfo& from);

  inline JK_SysRuleConfigInfo& operator=(const JK_SysRuleConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_SysRuleConfigInfo& default_instance();

  void Swap(JK_SysRuleConfigInfo* other);

  // implements Message ----------------------------------------------

  JK_SysRuleConfigInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_SysRuleConfigInfo& from);
  void MergeFrom(const JK_SysRuleConfigInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FactoryID = 1;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 1;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 2;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 2;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required bool IsDel = 3;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 3;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 RuleConfigID = 4;
  inline bool has_ruleconfigid() const;
  inline void clear_ruleconfigid();
  static const int kRuleConfigIDFieldNumber = 4;
  inline ::google::protobuf::int32 ruleconfigid() const;
  inline void set_ruleconfigid(::google::protobuf::int32 value);

  // required int32 RuleTypeID = 5;
  inline bool has_ruletypeid() const;
  inline void clear_ruletypeid();
  static const int kRuleTypeIDFieldNumber = 5;
  inline ::google::protobuf::int32 ruletypeid() const;
  inline void set_ruletypeid(::google::protobuf::int32 value);

  // required int32 CabType = 6;
  inline bool has_cabtype() const;
  inline void clear_cabtype();
  static const int kCabTypeFieldNumber = 6;
  inline ::google::protobuf::int32 cabtype() const;
  inline void set_cabtype(::google::protobuf::int32 value);

  // required double MinXLen = 7;
  inline bool has_minxlen() const;
  inline void clear_minxlen();
  static const int kMinXLenFieldNumber = 7;
  inline double minxlen() const;
  inline void set_minxlen(double value);

  // required double MinYLen = 8;
  inline bool has_minylen() const;
  inline void clear_minylen();
  static const int kMinYLenFieldNumber = 8;
  inline double minylen() const;
  inline void set_minylen(double value);

  // required double MaxXLen = 9;
  inline bool has_maxxlen() const;
  inline void clear_maxxlen();
  static const int kMaxXLenFieldNumber = 9;
  inline double maxxlen() const;
  inline void set_maxxlen(double value);

  // required double MaxYLen = 10;
  inline bool has_maxylen() const;
  inline void clear_maxylen();
  static const int kMaxYLenFieldNumber = 10;
  inline double maxylen() const;
  inline void set_maxylen(double value);

  // required int32 UseCount = 11;
  inline bool has_usecount() const;
  inline void clear_usecount();
  static const int kUseCountFieldNumber = 11;
  inline ::google::protobuf::int32 usecount() const;
  inline void set_usecount(::google::protobuf::int32 value);

  // required int32 CreatorID = 12;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 12;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 13;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 13;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 14;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 14;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 15;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 15;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_SysRuleConfigInfo)
 private:
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_ruleconfigid();
  inline void clear_has_ruleconfigid();
  inline void set_has_ruletypeid();
  inline void clear_has_ruletypeid();
  inline void set_has_cabtype();
  inline void clear_has_cabtype();
  inline void set_has_minxlen();
  inline void clear_has_minxlen();
  inline void set_has_minylen();
  inline void clear_has_minylen();
  inline void set_has_maxxlen();
  inline void clear_has_maxxlen();
  inline void set_has_maxylen();
  inline void clear_has_maxylen();
  inline void set_has_usecount();
  inline void clear_has_usecount();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  bool isdel_;
  ::google::protobuf::int32 ruleconfigid_;
  ::google::protobuf::int32 ruletypeid_;
  double minxlen_;
  double minylen_;
  ::google::protobuf::int32 cabtype_;
  ::google::protobuf::int32 usecount_;
  double maxxlen_;
  double maxylen_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_SysRuleConfigInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_SysRuleTypeInfo : public ::google::protobuf::Message {
 public:
  JK_SysRuleTypeInfo();
  virtual ~JK_SysRuleTypeInfo();

  JK_SysRuleTypeInfo(const JK_SysRuleTypeInfo& from);

  inline JK_SysRuleTypeInfo& operator=(const JK_SysRuleTypeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_SysRuleTypeInfo& default_instance();

  void Swap(JK_SysRuleTypeInfo* other);

  // implements Message ----------------------------------------------

  JK_SysRuleTypeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_SysRuleTypeInfo& from);
  void MergeFrom(const JK_SysRuleTypeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FactoryID = 1;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 1;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 2;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 2;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 RuleTypeID = 3;
  inline bool has_ruletypeid() const;
  inline void clear_ruletypeid();
  static const int kRuleTypeIDFieldNumber = 3;
  inline ::google::protobuf::int32 ruletypeid() const;
  inline void set_ruletypeid(::google::protobuf::int32 value);

  // required bool IsDel = 4;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 4;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required string RuleTypeName = 5;
  inline bool has_ruletypename() const;
  inline void clear_ruletypename();
  static const int kRuleTypeNameFieldNumber = 5;
  inline const ::std::string& ruletypename() const;
  inline void set_ruletypename(const ::std::string& value);
  inline void set_ruletypename(const char* value);
  inline void set_ruletypename(const char* value, size_t size);
  inline ::std::string* mutable_ruletypename();
  inline ::std::string* release_ruletypename();
  inline void set_allocated_ruletypename(::std::string* ruletypename);

  // required bool IsDefault = 6;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 6;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int32 RType = 7;
  inline bool has_rtype() const;
  inline void clear_rtype();
  static const int kRTypeFieldNumber = 7;
  inline ::google::protobuf::int32 rtype() const;
  inline void set_rtype(::google::protobuf::int32 value);

  // required int32 CreatorID = 8;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 8;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 9;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 9;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 10;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 10;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 11;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 11;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_SysRuleTypeInfo)
 private:
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_ruletypeid();
  inline void clear_has_ruletypeid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_ruletypename();
  inline void clear_has_ruletypename();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_rtype();
  inline void clear_has_rtype();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 ruletypeid_;
  ::std::string* ruletypename_;
  bool isdel_;
  bool isdefault_;
  ::google::protobuf::int32 rtype_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int32 updaterid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_SysRuleTypeInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_TableTopSideInfo : public ::google::protobuf::Message {
 public:
  JK_TableTopSideInfo();
  virtual ~JK_TableTopSideInfo();

  JK_TableTopSideInfo(const JK_TableTopSideInfo& from);

  inline JK_TableTopSideInfo& operator=(const JK_TableTopSideInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_TableTopSideInfo& default_instance();

  void Swap(JK_TableTopSideInfo* other);

  // implements Message ----------------------------------------------

  JK_TableTopSideInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_TableTopSideInfo& from);
  void MergeFrom(const JK_TableTopSideInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 TableTopSideID = 1;
  inline bool has_tabletopsideid() const;
  inline void clear_tabletopsideid();
  static const int kTableTopSideIDFieldNumber = 1;
  inline ::google::protobuf::int32 tabletopsideid() const;
  inline void set_tabletopsideid(::google::protobuf::int32 value);

  // required int32 TableTopID = 2;
  inline bool has_tabletopid() const;
  inline void clear_tabletopid();
  static const int kTableTopIDFieldNumber = 2;
  inline ::google::protobuf::int32 tabletopid() const;
  inline void set_tabletopid(::google::protobuf::int32 value);

  // required bool IsDel = 3;
  inline bool has_isdel() const;
  inline void clear_isdel();
  static const int kIsDelFieldNumber = 3;
  inline bool isdel() const;
  inline void set_isdel(bool value);

  // required int32 ModelID = 4;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 4;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required int32 ShowID = 5;
  inline bool has_showid() const;
  inline void clear_showid();
  static const int kShowIDFieldNumber = 5;
  inline ::google::protobuf::int32 showid() const;
  inline void set_showid(::google::protobuf::int32 value);

  // required double SideWidth = 6;
  inline bool has_sidewidth() const;
  inline void clear_sidewidth();
  static const int kSideWidthFieldNumber = 6;
  inline double sidewidth() const;
  inline void set_sidewidth(double value);

  // required int32 MaterialID = 7;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 7;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required bool IsDefault = 8;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 8;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // required int64 VerCode = 9;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 9;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 FactoryID = 10;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 10;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 CreatorID = 11;
  inline bool has_creatorid() const;
  inline void clear_creatorid();
  static const int kCreatorIDFieldNumber = 11;
  inline ::google::protobuf::int32 creatorid() const;
  inline void set_creatorid(::google::protobuf::int32 value);

  // required int32 UpdaterID = 12;
  inline bool has_updaterid() const;
  inline void clear_updaterid();
  static const int kUpdaterIDFieldNumber = 12;
  inline ::google::protobuf::int32 updaterid() const;
  inline void set_updaterid(::google::protobuf::int32 value);

  // required int64 CreateTime = 13;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 13;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 UpdateTime = 14;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 14;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transMsg.JK_TableTopSideInfo)
 private:
  inline void set_has_tabletopsideid();
  inline void clear_has_tabletopsideid();
  inline void set_has_tabletopid();
  inline void clear_has_tabletopid();
  inline void set_has_isdel();
  inline void clear_has_isdel();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_showid();
  inline void clear_has_showid();
  inline void set_has_sidewidth();
  inline void clear_has_sidewidth();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_creatorid();
  inline void clear_has_creatorid();
  inline void set_has_updaterid();
  inline void clear_has_updaterid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tabletopsideid_;
  ::google::protobuf::int32 tabletopid_;
  ::google::protobuf::int32 modelid_;
  ::google::protobuf::int32 showid_;
  double sidewidth_;
  bool isdel_;
  bool isdefault_;
  ::google::protobuf::int32 materialid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int32 creatorid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updaterid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_TableTopSideInfo* default_instance_;
};
// -------------------------------------------------------------------

class JK_Table : public ::google::protobuf::Message {
 public:
  JK_Table();
  virtual ~JK_Table();

  JK_Table(const JK_Table& from);

  inline JK_Table& operator=(const JK_Table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JK_Table& default_instance();

  void Swap(JK_Table* other);

  // implements Message ----------------------------------------------

  JK_Table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JK_Table& from);
  void MergeFrom(const JK_Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .transMsg.JK_CabBoardMatInfo JK_CabBoardMatInfo = 1;
  inline int jk_cabboardmatinfo_size() const;
  inline void clear_jk_cabboardmatinfo();
  static const int kJKCabBoardMatInfoFieldNumber = 1;
  inline const ::transMsg::JK_CabBoardMatInfo& jk_cabboardmatinfo(int index) const;
  inline ::transMsg::JK_CabBoardMatInfo* mutable_jk_cabboardmatinfo(int index);
  inline ::transMsg::JK_CabBoardMatInfo* add_jk_cabboardmatinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabBoardMatInfo >&
      jk_cabboardmatinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabBoardMatInfo >*
      mutable_jk_cabboardmatinfo();

  // repeated .transMsg.JK_CabBoardMatSkinInfo JK_CabBoardMatSkinInfo = 2;
  inline int jk_cabboardmatskininfo_size() const;
  inline void clear_jk_cabboardmatskininfo();
  static const int kJKCabBoardMatSkinInfoFieldNumber = 2;
  inline const ::transMsg::JK_CabBoardMatSkinInfo& jk_cabboardmatskininfo(int index) const;
  inline ::transMsg::JK_CabBoardMatSkinInfo* mutable_jk_cabboardmatskininfo(int index);
  inline ::transMsg::JK_CabBoardMatSkinInfo* add_jk_cabboardmatskininfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabBoardMatSkinInfo >&
      jk_cabboardmatskininfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabBoardMatSkinInfo >*
      mutable_jk_cabboardmatskininfo();

  // repeated .transMsg.JK_CabDesignBoardSealEdgeInfo JK_CabDesignBoardSealEdgeInfo = 3;
  inline int jk_cabdesignboardsealedgeinfo_size() const;
  inline void clear_jk_cabdesignboardsealedgeinfo();
  static const int kJKCabDesignBoardSealEdgeInfoFieldNumber = 3;
  inline const ::transMsg::JK_CabDesignBoardSealEdgeInfo& jk_cabdesignboardsealedgeinfo(int index) const;
  inline ::transMsg::JK_CabDesignBoardSealEdgeInfo* mutable_jk_cabdesignboardsealedgeinfo(int index);
  inline ::transMsg::JK_CabDesignBoardSealEdgeInfo* add_jk_cabdesignboardsealedgeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignBoardSealEdgeInfo >&
      jk_cabdesignboardsealedgeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignBoardSealEdgeInfo >*
      mutable_jk_cabdesignboardsealedgeinfo();

  // repeated .transMsg.JK_CabDesignBoardSealInfo JK_CabDesignBoardSealInfo = 4;
  inline int jk_cabdesignboardsealinfo_size() const;
  inline void clear_jk_cabdesignboardsealinfo();
  static const int kJKCabDesignBoardSealInfoFieldNumber = 4;
  inline const ::transMsg::JK_CabDesignBoardSealInfo& jk_cabdesignboardsealinfo(int index) const;
  inline ::transMsg::JK_CabDesignBoardSealInfo* mutable_jk_cabdesignboardsealinfo(int index);
  inline ::transMsg::JK_CabDesignBoardSealInfo* add_jk_cabdesignboardsealinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignBoardSealInfo >&
      jk_cabdesignboardsealinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignBoardSealInfo >*
      mutable_jk_cabdesignboardsealinfo();

  // repeated .transMsg.JK_CabDesignDoorRegionHandleInfo JK_CabDesignDoorRegionHandleInfo = 5;
  inline int jk_cabdesigndoorregionhandleinfo_size() const;
  inline void clear_jk_cabdesigndoorregionhandleinfo();
  static const int kJKCabDesignDoorRegionHandleInfoFieldNumber = 5;
  inline const ::transMsg::JK_CabDesignDoorRegionHandleInfo& jk_cabdesigndoorregionhandleinfo(int index) const;
  inline ::transMsg::JK_CabDesignDoorRegionHandleInfo* mutable_jk_cabdesigndoorregionhandleinfo(int index);
  inline ::transMsg::JK_CabDesignDoorRegionHandleInfo* add_jk_cabdesigndoorregionhandleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorRegionHandleInfo >&
      jk_cabdesigndoorregionhandleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorRegionHandleInfo >*
      mutable_jk_cabdesigndoorregionhandleinfo();

  // repeated .transMsg.JK_CabDesignDoorRegionInfo JK_CabDesignDoorRegionInfo = 6;
  inline int jk_cabdesigndoorregioninfo_size() const;
  inline void clear_jk_cabdesigndoorregioninfo();
  static const int kJKCabDesignDoorRegionInfoFieldNumber = 6;
  inline const ::transMsg::JK_CabDesignDoorRegionInfo& jk_cabdesigndoorregioninfo(int index) const;
  inline ::transMsg::JK_CabDesignDoorRegionInfo* mutable_jk_cabdesigndoorregioninfo(int index);
  inline ::transMsg::JK_CabDesignDoorRegionInfo* add_jk_cabdesigndoorregioninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorRegionInfo >&
      jk_cabdesigndoorregioninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorRegionInfo >*
      mutable_jk_cabdesigndoorregioninfo();

  // repeated .transMsg.JK_CabDesignDoorSystemInfo JK_CabDesignDoorSystemInfo = 7;
  inline int jk_cabdesigndoorsysteminfo_size() const;
  inline void clear_jk_cabdesigndoorsysteminfo();
  static const int kJKCabDesignDoorSystemInfoFieldNumber = 7;
  inline const ::transMsg::JK_CabDesignDoorSystemInfo& jk_cabdesigndoorsysteminfo(int index) const;
  inline ::transMsg::JK_CabDesignDoorSystemInfo* mutable_jk_cabdesigndoorsysteminfo(int index);
  inline ::transMsg::JK_CabDesignDoorSystemInfo* add_jk_cabdesigndoorsysteminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorSystemInfo >&
      jk_cabdesigndoorsysteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorSystemInfo >*
      mutable_jk_cabdesigndoorsysteminfo();

  // repeated .transMsg.JK_CabDesignFNFittingInfo JK_CabDesignFNFittingInfo = 8;
  inline int jk_cabdesignfnfittinginfo_size() const;
  inline void clear_jk_cabdesignfnfittinginfo();
  static const int kJKCabDesignFNFittingInfoFieldNumber = 8;
  inline const ::transMsg::JK_CabDesignFNFittingInfo& jk_cabdesignfnfittinginfo(int index) const;
  inline ::transMsg::JK_CabDesignFNFittingInfo* mutable_jk_cabdesignfnfittinginfo(int index);
  inline ::transMsg::JK_CabDesignFNFittingInfo* add_jk_cabdesignfnfittinginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFNFittingInfo >&
      jk_cabdesignfnfittinginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFNFittingInfo >*
      mutable_jk_cabdesignfnfittinginfo();

  // repeated .transMsg.JK_CabDesignFNFittingMapInfo JK_CabDesignFNFittingMapInfo = 9;
  inline int jk_cabdesignfnfittingmapinfo_size() const;
  inline void clear_jk_cabdesignfnfittingmapinfo();
  static const int kJKCabDesignFNFittingMapInfoFieldNumber = 9;
  inline const ::transMsg::JK_CabDesignFNFittingMapInfo& jk_cabdesignfnfittingmapinfo(int index) const;
  inline ::transMsg::JK_CabDesignFNFittingMapInfo* mutable_jk_cabdesignfnfittingmapinfo(int index);
  inline ::transMsg::JK_CabDesignFNFittingMapInfo* add_jk_cabdesignfnfittingmapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFNFittingMapInfo >&
      jk_cabdesignfnfittingmapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFNFittingMapInfo >*
      mutable_jk_cabdesignfnfittingmapinfo();

  // repeated .transMsg.JK_CabDesignFootInfo JK_CabDesignFootInfo = 10;
  inline int jk_cabdesignfootinfo_size() const;
  inline void clear_jk_cabdesignfootinfo();
  static const int kJKCabDesignFootInfoFieldNumber = 10;
  inline const ::transMsg::JK_CabDesignFootInfo& jk_cabdesignfootinfo(int index) const;
  inline ::transMsg::JK_CabDesignFootInfo* mutable_jk_cabdesignfootinfo(int index);
  inline ::transMsg::JK_CabDesignFootInfo* add_jk_cabdesignfootinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFootInfo >&
      jk_cabdesignfootinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFootInfo >*
      mutable_jk_cabdesignfootinfo();

  // repeated .transMsg.JK_CabDesignInfo JK_CabDesignInfo = 11;
  inline int jk_cabdesigninfo_size() const;
  inline void clear_jk_cabdesigninfo();
  static const int kJKCabDesignInfoFieldNumber = 11;
  inline const ::transMsg::JK_CabDesignInfo& jk_cabdesigninfo(int index) const;
  inline ::transMsg::JK_CabDesignInfo* mutable_jk_cabdesigninfo(int index);
  inline ::transMsg::JK_CabDesignInfo* add_jk_cabdesigninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignInfo >&
      jk_cabdesigninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignInfo >*
      mutable_jk_cabdesigninfo();

  // repeated .transMsg.JK_CabDesignMatInfo JK_CabDesignMatInfo = 12;
  inline int jk_cabdesignmatinfo_size() const;
  inline void clear_jk_cabdesignmatinfo();
  static const int kJKCabDesignMatInfoFieldNumber = 12;
  inline const ::transMsg::JK_CabDesignMatInfo& jk_cabdesignmatinfo(int index) const;
  inline ::transMsg::JK_CabDesignMatInfo* mutable_jk_cabdesignmatinfo(int index);
  inline ::transMsg::JK_CabDesignMatInfo* add_jk_cabdesignmatinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignMatInfo >&
      jk_cabdesignmatinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignMatInfo >*
      mutable_jk_cabdesignmatinfo();

  // repeated .transMsg.JK_CabMatPlanInfo JK_CabMatPlanInfo = 13;
  inline int jk_cabmatplaninfo_size() const;
  inline void clear_jk_cabmatplaninfo();
  static const int kJKCabMatPlanInfoFieldNumber = 13;
  inline const ::transMsg::JK_CabMatPlanInfo& jk_cabmatplaninfo(int index) const;
  inline ::transMsg::JK_CabMatPlanInfo* mutable_jk_cabmatplaninfo(int index);
  inline ::transMsg::JK_CabMatPlanInfo* add_jk_cabmatplaninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabMatPlanInfo >&
      jk_cabmatplaninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabMatPlanInfo >*
      mutable_jk_cabmatplaninfo();

  // repeated .transMsg.JK_CabStructBoardGapInfo JK_CabStructBoardGapInfo = 14;
  inline int jk_cabstructboardgapinfo_size() const;
  inline void clear_jk_cabstructboardgapinfo();
  static const int kJKCabStructBoardGapInfoFieldNumber = 14;
  inline const ::transMsg::JK_CabStructBoardGapInfo& jk_cabstructboardgapinfo(int index) const;
  inline ::transMsg::JK_CabStructBoardGapInfo* mutable_jk_cabstructboardgapinfo(int index);
  inline ::transMsg::JK_CabStructBoardGapInfo* add_jk_cabstructboardgapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardGapInfo >&
      jk_cabstructboardgapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardGapInfo >*
      mutable_jk_cabstructboardgapinfo();

  // repeated .transMsg.JK_CabStructBoardInfo JK_CabStructBoardInfo = 15;
  inline int jk_cabstructboardinfo_size() const;
  inline void clear_jk_cabstructboardinfo();
  static const int kJKCabStructBoardInfoFieldNumber = 15;
  inline const ::transMsg::JK_CabStructBoardInfo& jk_cabstructboardinfo(int index) const;
  inline ::transMsg::JK_CabStructBoardInfo* mutable_jk_cabstructboardinfo(int index);
  inline ::transMsg::JK_CabStructBoardInfo* add_jk_cabstructboardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardInfo >&
      jk_cabstructboardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardInfo >*
      mutable_jk_cabstructboardinfo();

  // repeated .transMsg.JK_CabStructBoardSealInfo JK_CabStructBoardSealInfo = 16;
  inline int jk_cabstructboardsealinfo_size() const;
  inline void clear_jk_cabstructboardsealinfo();
  static const int kJKCabStructBoardSealInfoFieldNumber = 16;
  inline const ::transMsg::JK_CabStructBoardSealInfo& jk_cabstructboardsealinfo(int index) const;
  inline ::transMsg::JK_CabStructBoardSealInfo* mutable_jk_cabstructboardsealinfo(int index);
  inline ::transMsg::JK_CabStructBoardSealInfo* add_jk_cabstructboardsealinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardSealInfo >&
      jk_cabstructboardsealinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardSealInfo >*
      mutable_jk_cabstructboardsealinfo();

  // repeated .transMsg.JK_CabStructGapInfo JK_CabStructGapInfo = 17;
  inline int jk_cabstructgapinfo_size() const;
  inline void clear_jk_cabstructgapinfo();
  static const int kJKCabStructGapInfoFieldNumber = 17;
  inline const ::transMsg::JK_CabStructGapInfo& jk_cabstructgapinfo(int index) const;
  inline ::transMsg::JK_CabStructGapInfo* mutable_jk_cabstructgapinfo(int index);
  inline ::transMsg::JK_CabStructGapInfo* add_jk_cabstructgapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructGapInfo >&
      jk_cabstructgapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructGapInfo >*
      mutable_jk_cabstructgapinfo();

  // repeated .transMsg.JK_CabStructInfo JK_CabStructInfo = 18;
  inline int jk_cabstructinfo_size() const;
  inline void clear_jk_cabstructinfo();
  static const int kJKCabStructInfoFieldNumber = 18;
  inline const ::transMsg::JK_CabStructInfo& jk_cabstructinfo(int index) const;
  inline ::transMsg::JK_CabStructInfo* mutable_jk_cabstructinfo(int index);
  inline ::transMsg::JK_CabStructInfo* add_jk_cabstructinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructInfo >&
      jk_cabstructinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructInfo >*
      mutable_jk_cabstructinfo();

  // repeated .transMsg.JK_CabStructMatPlanMapInfo JK_CabStructMatPlanMapInfo = 19;
  inline int jk_cabstructmatplanmapinfo_size() const;
  inline void clear_jk_cabstructmatplanmapinfo();
  static const int kJKCabStructMatPlanMapInfoFieldNumber = 19;
  inline const ::transMsg::JK_CabStructMatPlanMapInfo& jk_cabstructmatplanmapinfo(int index) const;
  inline ::transMsg::JK_CabStructMatPlanMapInfo* mutable_jk_cabstructmatplanmapinfo(int index);
  inline ::transMsg::JK_CabStructMatPlanMapInfo* add_jk_cabstructmatplanmapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructMatPlanMapInfo >&
      jk_cabstructmatplanmapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructMatPlanMapInfo >*
      mutable_jk_cabstructmatplanmapinfo();

  // repeated .transMsg.JK_CabinetSizeBoardInfo JK_CabinetSizeBoardInfo = 20;
  inline int jk_cabinetsizeboardinfo_size() const;
  inline void clear_jk_cabinetsizeboardinfo();
  static const int kJKCabinetSizeBoardInfoFieldNumber = 20;
  inline const ::transMsg::JK_CabinetSizeBoardInfo& jk_cabinetsizeboardinfo(int index) const;
  inline ::transMsg::JK_CabinetSizeBoardInfo* mutable_jk_cabinetsizeboardinfo(int index);
  inline ::transMsg::JK_CabinetSizeBoardInfo* add_jk_cabinetsizeboardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeBoardInfo >&
      jk_cabinetsizeboardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeBoardInfo >*
      mutable_jk_cabinetsizeboardinfo();

  // repeated .transMsg.JK_CabinetSizeInfo JK_CabinetSizeInfo = 21;
  inline int jk_cabinetsizeinfo_size() const;
  inline void clear_jk_cabinetsizeinfo();
  static const int kJKCabinetSizeInfoFieldNumber = 21;
  inline const ::transMsg::JK_CabinetSizeInfo& jk_cabinetsizeinfo(int index) const;
  inline ::transMsg::JK_CabinetSizeInfo* mutable_jk_cabinetsizeinfo(int index);
  inline ::transMsg::JK_CabinetSizeInfo* add_jk_cabinetsizeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeInfo >&
      jk_cabinetsizeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeInfo >*
      mutable_jk_cabinetsizeinfo();

  // repeated .transMsg.JK_CabinetSizeStructBoardInfo JK_CabinetSizeStructBoardInfo = 22;
  inline int jk_cabinetsizestructboardinfo_size() const;
  inline void clear_jk_cabinetsizestructboardinfo();
  static const int kJKCabinetSizeStructBoardInfoFieldNumber = 22;
  inline const ::transMsg::JK_CabinetSizeStructBoardInfo& jk_cabinetsizestructboardinfo(int index) const;
  inline ::transMsg::JK_CabinetSizeStructBoardInfo* mutable_jk_cabinetsizestructboardinfo(int index);
  inline ::transMsg::JK_CabinetSizeStructBoardInfo* add_jk_cabinetsizestructboardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeStructBoardInfo >&
      jk_cabinetsizestructboardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeStructBoardInfo >*
      mutable_jk_cabinetsizestructboardinfo();

  // repeated .transMsg.JK_DecorBoardFrameMapInfo JK_DecorBoardFrameMapInfo = 23;
  inline int jk_decorboardframemapinfo_size() const;
  inline void clear_jk_decorboardframemapinfo();
  static const int kJKDecorBoardFrameMapInfoFieldNumber = 23;
  inline const ::transMsg::JK_DecorBoardFrameMapInfo& jk_decorboardframemapinfo(int index) const;
  inline ::transMsg::JK_DecorBoardFrameMapInfo* mutable_jk_decorboardframemapinfo(int index);
  inline ::transMsg::JK_DecorBoardFrameMapInfo* add_jk_decorboardframemapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardFrameMapInfo >&
      jk_decorboardframemapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardFrameMapInfo >*
      mutable_jk_decorboardframemapinfo();

  // repeated .transMsg.JK_DecorBoardInfo JK_DecorBoardInfo = 24;
  inline int jk_decorboardinfo_size() const;
  inline void clear_jk_decorboardinfo();
  static const int kJKDecorBoardInfoFieldNumber = 24;
  inline const ::transMsg::JK_DecorBoardInfo& jk_decorboardinfo(int index) const;
  inline ::transMsg::JK_DecorBoardInfo* mutable_jk_decorboardinfo(int index);
  inline ::transMsg::JK_DecorBoardInfo* add_jk_decorboardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardInfo >&
      jk_decorboardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardInfo >*
      mutable_jk_decorboardinfo();

  // repeated .transMsg.JK_DecorBoardMatInfo JK_DecorBoardMatInfo = 25;
  inline int jk_decorboardmatinfo_size() const;
  inline void clear_jk_decorboardmatinfo();
  static const int kJKDecorBoardMatInfoFieldNumber = 25;
  inline const ::transMsg::JK_DecorBoardMatInfo& jk_decorboardmatinfo(int index) const;
  inline ::transMsg::JK_DecorBoardMatInfo* mutable_jk_decorboardmatinfo(int index);
  inline ::transMsg::JK_DecorBoardMatInfo* add_jk_decorboardmatinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardMatInfo >&
      jk_decorboardmatinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardMatInfo >*
      mutable_jk_decorboardmatinfo();

  // repeated .transMsg.JK_DecorBoardUnitInfo JK_DecorBoardUnitInfo = 26;
  inline int jk_decorboardunitinfo_size() const;
  inline void clear_jk_decorboardunitinfo();
  static const int kJKDecorBoardUnitInfoFieldNumber = 26;
  inline const ::transMsg::JK_DecorBoardUnitInfo& jk_decorboardunitinfo(int index) const;
  inline ::transMsg::JK_DecorBoardUnitInfo* mutable_jk_decorboardunitinfo(int index);
  inline ::transMsg::JK_DecorBoardUnitInfo* add_jk_decorboardunitinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitInfo >&
      jk_decorboardunitinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitInfo >*
      mutable_jk_decorboardunitinfo();

  // repeated .transMsg.JK_DecorBoardUnitMatInfo JK_DecorBoardUnitMatInfo = 27;
  inline int jk_decorboardunitmatinfo_size() const;
  inline void clear_jk_decorboardunitmatinfo();
  static const int kJKDecorBoardUnitMatInfoFieldNumber = 27;
  inline const ::transMsg::JK_DecorBoardUnitMatInfo& jk_decorboardunitmatinfo(int index) const;
  inline ::transMsg::JK_DecorBoardUnitMatInfo* mutable_jk_decorboardunitmatinfo(int index);
  inline ::transMsg::JK_DecorBoardUnitMatInfo* add_jk_decorboardunitmatinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitMatInfo >&
      jk_decorboardunitmatinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitMatInfo >*
      mutable_jk_decorboardunitmatinfo();

  // repeated .transMsg.JK_DecorBoardUnitSealInfo JK_DecorBoardUnitSealInfo = 28;
  inline int jk_decorboardunitsealinfo_size() const;
  inline void clear_jk_decorboardunitsealinfo();
  static const int kJKDecorBoardUnitSealInfoFieldNumber = 28;
  inline const ::transMsg::JK_DecorBoardUnitSealInfo& jk_decorboardunitsealinfo(int index) const;
  inline ::transMsg::JK_DecorBoardUnitSealInfo* mutable_jk_decorboardunitsealinfo(int index);
  inline ::transMsg::JK_DecorBoardUnitSealInfo* add_jk_decorboardunitsealinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitSealInfo >&
      jk_decorboardunitsealinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitSealInfo >*
      mutable_jk_decorboardunitsealinfo();

  // repeated .transMsg.JK_DecorInfo JK_DecorInfo = 29;
  inline int jk_decorinfo_size() const;
  inline void clear_jk_decorinfo();
  static const int kJKDecorInfoFieldNumber = 29;
  inline const ::transMsg::JK_DecorInfo& jk_decorinfo(int index) const;
  inline ::transMsg::JK_DecorInfo* mutable_jk_decorinfo(int index);
  inline ::transMsg::JK_DecorInfo* add_jk_decorinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorInfo >&
      jk_decorinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorInfo >*
      mutable_jk_decorinfo();

  // repeated .transMsg.JK_DecorLineInfo JK_DecorLineInfo = 30;
  inline int jk_decorlineinfo_size() const;
  inline void clear_jk_decorlineinfo();
  static const int kJKDecorLineInfoFieldNumber = 30;
  inline const ::transMsg::JK_DecorLineInfo& jk_decorlineinfo(int index) const;
  inline ::transMsg::JK_DecorLineInfo* mutable_jk_decorlineinfo(int index);
  inline ::transMsg::JK_DecorLineInfo* add_jk_decorlineinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorLineInfo >&
      jk_decorlineinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorLineInfo >*
      mutable_jk_decorlineinfo();

  // repeated .transMsg.JK_DecorLineMatInfo JK_DecorLineMatInfo = 31;
  inline int jk_decorlinematinfo_size() const;
  inline void clear_jk_decorlinematinfo();
  static const int kJKDecorLineMatInfoFieldNumber = 31;
  inline const ::transMsg::JK_DecorLineMatInfo& jk_decorlinematinfo(int index) const;
  inline ::transMsg::JK_DecorLineMatInfo* mutable_jk_decorlinematinfo(int index);
  inline ::transMsg::JK_DecorLineMatInfo* add_jk_decorlinematinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorLineMatInfo >&
      jk_decorlinematinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorLineMatInfo >*
      mutable_jk_decorlinematinfo();

  // repeated .transMsg.JK_DecorUnitHWFittingMapInfo JK_DecorUnitHWFittingMapInfo = 32;
  inline int jk_decorunithwfittingmapinfo_size() const;
  inline void clear_jk_decorunithwfittingmapinfo();
  static const int kJKDecorUnitHWFittingMapInfoFieldNumber = 32;
  inline const ::transMsg::JK_DecorUnitHWFittingMapInfo& jk_decorunithwfittingmapinfo(int index) const;
  inline ::transMsg::JK_DecorUnitHWFittingMapInfo* mutable_jk_decorunithwfittingmapinfo(int index);
  inline ::transMsg::JK_DecorUnitHWFittingMapInfo* add_jk_decorunithwfittingmapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorUnitHWFittingMapInfo >&
      jk_decorunithwfittingmapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorUnitHWFittingMapInfo >*
      mutable_jk_decorunithwfittingmapinfo();

  // repeated .transMsg.JK_DoorBoardGapInfo JK_DoorBoardGapInfo = 33;
  inline int jk_doorboardgapinfo_size() const;
  inline void clear_jk_doorboardgapinfo();
  static const int kJKDoorBoardGapInfoFieldNumber = 33;
  inline const ::transMsg::JK_DoorBoardGapInfo& jk_doorboardgapinfo(int index) const;
  inline ::transMsg::JK_DoorBoardGapInfo* mutable_jk_doorboardgapinfo(int index);
  inline ::transMsg::JK_DoorBoardGapInfo* add_jk_doorboardgapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardGapInfo >&
      jk_doorboardgapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardGapInfo >*
      mutable_jk_doorboardgapinfo();

  // repeated .transMsg.JK_DoorBoardInfo JK_DoorBoardInfo = 34;
  inline int jk_doorboardinfo_size() const;
  inline void clear_jk_doorboardinfo();
  static const int kJKDoorBoardInfoFieldNumber = 34;
  inline const ::transMsg::JK_DoorBoardInfo& jk_doorboardinfo(int index) const;
  inline ::transMsg::JK_DoorBoardInfo* mutable_jk_doorboardinfo(int index);
  inline ::transMsg::JK_DoorBoardInfo* add_jk_doorboardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardInfo >&
      jk_doorboardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardInfo >*
      mutable_jk_doorboardinfo();

  // repeated .transMsg.JK_DoorBoardMatMapInfo JK_DoorBoardMatMapInfo = 35;
  inline int jk_doorboardmatmapinfo_size() const;
  inline void clear_jk_doorboardmatmapinfo();
  static const int kJKDoorBoardMatMapInfoFieldNumber = 35;
  inline const ::transMsg::JK_DoorBoardMatMapInfo& jk_doorboardmatmapinfo(int index) const;
  inline ::transMsg::JK_DoorBoardMatMapInfo* mutable_jk_doorboardmatmapinfo(int index);
  inline ::transMsg::JK_DoorBoardMatMapInfo* add_jk_doorboardmatmapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardMatMapInfo >&
      jk_doorboardmatmapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardMatMapInfo >*
      mutable_jk_doorboardmatmapinfo();

  // repeated .transMsg.JK_DoorBoardSealInfo JK_DoorBoardSealInfo = 36;
  inline int jk_doorboardsealinfo_size() const;
  inline void clear_jk_doorboardsealinfo();
  static const int kJKDoorBoardSealInfoFieldNumber = 36;
  inline const ::transMsg::JK_DoorBoardSealInfo& jk_doorboardsealinfo(int index) const;
  inline ::transMsg::JK_DoorBoardSealInfo* mutable_jk_doorboardsealinfo(int index);
  inline ::transMsg::JK_DoorBoardSealInfo* add_jk_doorboardsealinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardSealInfo >&
      jk_doorboardsealinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardSealInfo >*
      mutable_jk_doorboardsealinfo();

  // repeated .transMsg.JK_DoorInfo JK_DoorInfo = 37;
  inline int jk_doorinfo_size() const;
  inline void clear_jk_doorinfo();
  static const int kJKDoorInfoFieldNumber = 37;
  inline const ::transMsg::JK_DoorInfo& jk_doorinfo(int index) const;
  inline ::transMsg::JK_DoorInfo* mutable_jk_doorinfo(int index);
  inline ::transMsg::JK_DoorInfo* add_jk_doorinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorInfo >&
      jk_doorinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorInfo >*
      mutable_jk_doorinfo();

  // repeated .transMsg.JK_DoorMatMapInfo JK_DoorMatMapInfo = 38;
  inline int jk_doormatmapinfo_size() const;
  inline void clear_jk_doormatmapinfo();
  static const int kJKDoorMatMapInfoFieldNumber = 38;
  inline const ::transMsg::JK_DoorMatMapInfo& jk_doormatmapinfo(int index) const;
  inline ::transMsg::JK_DoorMatMapInfo* mutable_jk_doormatmapinfo(int index);
  inline ::transMsg::JK_DoorMatMapInfo* add_jk_doormatmapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatMapInfo >&
      jk_doormatmapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatMapInfo >*
      mutable_jk_doormatmapinfo();

  // repeated .transMsg.JK_DoorMatPlanHandleMapInfo JK_DoorMatPlanHandleMapInfo = 39;
  inline int jk_doormatplanhandlemapinfo_size() const;
  inline void clear_jk_doormatplanhandlemapinfo();
  static const int kJKDoorMatPlanHandleMapInfoFieldNumber = 39;
  inline const ::transMsg::JK_DoorMatPlanHandleMapInfo& jk_doormatplanhandlemapinfo(int index) const;
  inline ::transMsg::JK_DoorMatPlanHandleMapInfo* mutable_jk_doormatplanhandlemapinfo(int index);
  inline ::transMsg::JK_DoorMatPlanHandleMapInfo* add_jk_doormatplanhandlemapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatPlanHandleMapInfo >&
      jk_doormatplanhandlemapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatPlanHandleMapInfo >*
      mutable_jk_doormatplanhandlemapinfo();

  // repeated .transMsg.JK_DoorMatPlanInfo JK_DoorMatPlanInfo = 40;
  inline int jk_doormatplaninfo_size() const;
  inline void clear_jk_doormatplaninfo();
  static const int kJKDoorMatPlanInfoFieldNumber = 40;
  inline const ::transMsg::JK_DoorMatPlanInfo& jk_doormatplaninfo(int index) const;
  inline ::transMsg::JK_DoorMatPlanInfo* mutable_jk_doormatplaninfo(int index);
  inline ::transMsg::JK_DoorMatPlanInfo* add_jk_doormatplaninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatPlanInfo >&
      jk_doormatplaninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatPlanInfo >*
      mutable_jk_doormatplaninfo();

  // repeated .transMsg.JK_DoorRegionHWFittingMapInfo JK_DoorRegionHWFittingMapInfo = 41;
  inline int jk_doorregionhwfittingmapinfo_size() const;
  inline void clear_jk_doorregionhwfittingmapinfo();
  static const int kJKDoorRegionHWFittingMapInfoFieldNumber = 41;
  inline const ::transMsg::JK_DoorRegionHWFittingMapInfo& jk_doorregionhwfittingmapinfo(int index) const;
  inline ::transMsg::JK_DoorRegionHWFittingMapInfo* mutable_jk_doorregionhwfittingmapinfo(int index);
  inline ::transMsg::JK_DoorRegionHWFittingMapInfo* add_jk_doorregionhwfittingmapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorRegionHWFittingMapInfo >&
      jk_doorregionhwfittingmapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorRegionHWFittingMapInfo >*
      mutable_jk_doorregionhwfittingmapinfo();

  // repeated .transMsg.JK_DoorSystemInfo JK_DoorSystemInfo = 42;
  inline int jk_doorsysteminfo_size() const;
  inline void clear_jk_doorsysteminfo();
  static const int kJKDoorSystemInfoFieldNumber = 42;
  inline const ::transMsg::JK_DoorSystemInfo& jk_doorsysteminfo(int index) const;
  inline ::transMsg::JK_DoorSystemInfo* mutable_jk_doorsysteminfo(int index);
  inline ::transMsg::JK_DoorSystemInfo* add_jk_doorsysteminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemInfo >&
      jk_doorsysteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemInfo >*
      mutable_jk_doorsysteminfo();

  // repeated .transMsg.JK_DoorSystemMatMapInfo JK_DoorSystemMatMapInfo = 43;
  inline int jk_doorsystemmatmapinfo_size() const;
  inline void clear_jk_doorsystemmatmapinfo();
  static const int kJKDoorSystemMatMapInfoFieldNumber = 43;
  inline const ::transMsg::JK_DoorSystemMatMapInfo& jk_doorsystemmatmapinfo(int index) const;
  inline ::transMsg::JK_DoorSystemMatMapInfo* mutable_jk_doorsystemmatmapinfo(int index);
  inline ::transMsg::JK_DoorSystemMatMapInfo* add_jk_doorsystemmatmapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemMatMapInfo >&
      jk_doorsystemmatmapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemMatMapInfo >*
      mutable_jk_doorsystemmatmapinfo();

  // repeated .transMsg.JK_DoorSystemRegionDoorMapInfo JK_DoorSystemRegionDoorMapInfo = 44;
  inline int jk_doorsystemregiondoormapinfo_size() const;
  inline void clear_jk_doorsystemregiondoormapinfo();
  static const int kJKDoorSystemRegionDoorMapInfoFieldNumber = 44;
  inline const ::transMsg::JK_DoorSystemRegionDoorMapInfo& jk_doorsystemregiondoormapinfo(int index) const;
  inline ::transMsg::JK_DoorSystemRegionDoorMapInfo* mutable_jk_doorsystemregiondoormapinfo(int index);
  inline ::transMsg::JK_DoorSystemRegionDoorMapInfo* add_jk_doorsystemregiondoormapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionDoorMapInfo >&
      jk_doorsystemregiondoormapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionDoorMapInfo >*
      mutable_jk_doorsystemregiondoormapinfo();

  // repeated .transMsg.JK_DoorSystemRegionInfo JK_DoorSystemRegionInfo = 45;
  inline int jk_doorsystemregioninfo_size() const;
  inline void clear_jk_doorsystemregioninfo();
  static const int kJKDoorSystemRegionInfoFieldNumber = 45;
  inline const ::transMsg::JK_DoorSystemRegionInfo& jk_doorsystemregioninfo(int index) const;
  inline ::transMsg::JK_DoorSystemRegionInfo* mutable_jk_doorsystemregioninfo(int index);
  inline ::transMsg::JK_DoorSystemRegionInfo* add_jk_doorsystemregioninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionInfo >&
      jk_doorsystemregioninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionInfo >*
      mutable_jk_doorsystemregioninfo();

  // repeated .transMsg.JK_DoorSystemRegionSlideMapInfo JK_DoorSystemRegionSlideMapInfo = 46;
  inline int jk_doorsystemregionslidemapinfo_size() const;
  inline void clear_jk_doorsystemregionslidemapinfo();
  static const int kJKDoorSystemRegionSlideMapInfoFieldNumber = 46;
  inline const ::transMsg::JK_DoorSystemRegionSlideMapInfo& jk_doorsystemregionslidemapinfo(int index) const;
  inline ::transMsg::JK_DoorSystemRegionSlideMapInfo* mutable_jk_doorsystemregionslidemapinfo(int index);
  inline ::transMsg::JK_DoorSystemRegionSlideMapInfo* add_jk_doorsystemregionslidemapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionSlideMapInfo >&
      jk_doorsystemregionslidemapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionSlideMapInfo >*
      mutable_jk_doorsystemregionslidemapinfo();

  // repeated .transMsg.JK_DoorSystemRegionSlidePositionSizeInfo JK_DoorSystemRegionSlidePositionSizeInfo = 47;
  inline int jk_doorsystemregionslidepositionsizeinfo_size() const;
  inline void clear_jk_doorsystemregionslidepositionsizeinfo();
  static const int kJKDoorSystemRegionSlidePositionSizeInfoFieldNumber = 47;
  inline const ::transMsg::JK_DoorSystemRegionSlidePositionSizeInfo& jk_doorsystemregionslidepositionsizeinfo(int index) const;
  inline ::transMsg::JK_DoorSystemRegionSlidePositionSizeInfo* mutable_jk_doorsystemregionslidepositionsizeinfo(int index);
  inline ::transMsg::JK_DoorSystemRegionSlidePositionSizeInfo* add_jk_doorsystemregionslidepositionsizeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionSlidePositionSizeInfo >&
      jk_doorsystemregionslidepositionsizeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionSlidePositionSizeInfo >*
      mutable_jk_doorsystemregionslidepositionsizeinfo();

  // repeated .transMsg.JK_FNFittingInfo JK_FNFittingInfo = 48;
  inline int jk_fnfittinginfo_size() const;
  inline void clear_jk_fnfittinginfo();
  static const int kJKFNFittingInfoFieldNumber = 48;
  inline const ::transMsg::JK_FNFittingInfo& jk_fnfittinginfo(int index) const;
  inline ::transMsg::JK_FNFittingInfo* mutable_jk_fnfittinginfo(int index);
  inline ::transMsg::JK_FNFittingInfo* add_jk_fnfittinginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingInfo >&
      jk_fnfittinginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingInfo >*
      mutable_jk_fnfittinginfo();

  // repeated .transMsg.JK_FNFittingMatInfo JK_FNFittingMatInfo = 49;
  inline int jk_fnfittingmatinfo_size() const;
  inline void clear_jk_fnfittingmatinfo();
  static const int kJKFNFittingMatInfoFieldNumber = 49;
  inline const ::transMsg::JK_FNFittingMatInfo& jk_fnfittingmatinfo(int index) const;
  inline ::transMsg::JK_FNFittingMatInfo* mutable_jk_fnfittingmatinfo(int index);
  inline ::transMsg::JK_FNFittingMatInfo* add_jk_fnfittingmatinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingMatInfo >&
      jk_fnfittingmatinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingMatInfo >*
      mutable_jk_fnfittingmatinfo();

  // repeated .transMsg.JK_FNFittingPartInfo JK_FNFittingPartInfo = 50;
  inline int jk_fnfittingpartinfo_size() const;
  inline void clear_jk_fnfittingpartinfo();
  static const int kJKFNFittingPartInfoFieldNumber = 50;
  inline const ::transMsg::JK_FNFittingPartInfo& jk_fnfittingpartinfo(int index) const;
  inline ::transMsg::JK_FNFittingPartInfo* mutable_jk_fnfittingpartinfo(int index);
  inline ::transMsg::JK_FNFittingPartInfo* add_jk_fnfittingpartinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartInfo >&
      jk_fnfittingpartinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartInfo >*
      mutable_jk_fnfittingpartinfo();

  // repeated .transMsg.JK_FNFittingPartMatInfo JK_FNFittingPartMatInfo = 51;
  inline int jk_fnfittingpartmatinfo_size() const;
  inline void clear_jk_fnfittingpartmatinfo();
  static const int kJKFNFittingPartMatInfoFieldNumber = 51;
  inline const ::transMsg::JK_FNFittingPartMatInfo& jk_fnfittingpartmatinfo(int index) const;
  inline ::transMsg::JK_FNFittingPartMatInfo* mutable_jk_fnfittingpartmatinfo(int index);
  inline ::transMsg::JK_FNFittingPartMatInfo* add_jk_fnfittingpartmatinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartMatInfo >&
      jk_fnfittingpartmatinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartMatInfo >*
      mutable_jk_fnfittingpartmatinfo();

  // repeated .transMsg.JK_FNFittingPartSealInfo JK_FNFittingPartSealInfo = 52;
  inline int jk_fnfittingpartsealinfo_size() const;
  inline void clear_jk_fnfittingpartsealinfo();
  static const int kJKFNFittingPartSealInfoFieldNumber = 52;
  inline const ::transMsg::JK_FNFittingPartSealInfo& jk_fnfittingpartsealinfo(int index) const;
  inline ::transMsg::JK_FNFittingPartSealInfo* mutable_jk_fnfittingpartsealinfo(int index);
  inline ::transMsg::JK_FNFittingPartSealInfo* add_jk_fnfittingpartsealinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartSealInfo >&
      jk_fnfittingpartsealinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartSealInfo >*
      mutable_jk_fnfittingpartsealinfo();

  // repeated .transMsg.JK_FittingInfo JK_FittingInfo = 53;
  inline int jk_fittinginfo_size() const;
  inline void clear_jk_fittinginfo();
  static const int kJKFittingInfoFieldNumber = 53;
  inline const ::transMsg::JK_FittingInfo& jk_fittinginfo(int index) const;
  inline ::transMsg::JK_FittingInfo* mutable_jk_fittinginfo(int index);
  inline ::transMsg::JK_FittingInfo* add_jk_fittinginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FittingInfo >&
      jk_fittinginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FittingInfo >*
      mutable_jk_fittinginfo();

  // repeated .transMsg.JK_FittingRuleInfo JK_FittingRuleInfo = 54;
  inline int jk_fittingruleinfo_size() const;
  inline void clear_jk_fittingruleinfo();
  static const int kJKFittingRuleInfoFieldNumber = 54;
  inline const ::transMsg::JK_FittingRuleInfo& jk_fittingruleinfo(int index) const;
  inline ::transMsg::JK_FittingRuleInfo* mutable_jk_fittingruleinfo(int index);
  inline ::transMsg::JK_FittingRuleInfo* add_jk_fittingruleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FittingRuleInfo >&
      jk_fittingruleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FittingRuleInfo >*
      mutable_jk_fittingruleinfo();

  // repeated .transMsg.JK_FormulaConstInfo JK_FormulaConstInfo = 55;
  inline int jk_formulaconstinfo_size() const;
  inline void clear_jk_formulaconstinfo();
  static const int kJKFormulaConstInfoFieldNumber = 55;
  inline const ::transMsg::JK_FormulaConstInfo& jk_formulaconstinfo(int index) const;
  inline ::transMsg::JK_FormulaConstInfo* mutable_jk_formulaconstinfo(int index);
  inline ::transMsg::JK_FormulaConstInfo* add_jk_formulaconstinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FormulaConstInfo >&
      jk_formulaconstinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FormulaConstInfo >*
      mutable_jk_formulaconstinfo();

  // repeated .transMsg.JK_GroupInfo JK_GroupInfo = 56;
  inline int jk_groupinfo_size() const;
  inline void clear_jk_groupinfo();
  static const int kJKGroupInfoFieldNumber = 56;
  inline const ::transMsg::JK_GroupInfo& jk_groupinfo(int index) const;
  inline ::transMsg::JK_GroupInfo* mutable_jk_groupinfo(int index);
  inline ::transMsg::JK_GroupInfo* add_jk_groupinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_GroupInfo >&
      jk_groupinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_GroupInfo >*
      mutable_jk_groupinfo();

  // repeated .transMsg.JK_HWFittingInfo JK_HWFittingInfo = 57;
  inline int jk_hwfittinginfo_size() const;
  inline void clear_jk_hwfittinginfo();
  static const int kJKHWFittingInfoFieldNumber = 57;
  inline const ::transMsg::JK_HWFittingInfo& jk_hwfittinginfo(int index) const;
  inline ::transMsg::JK_HWFittingInfo* mutable_jk_hwfittinginfo(int index);
  inline ::transMsg::JK_HWFittingInfo* add_jk_hwfittinginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_HWFittingInfo >&
      jk_hwfittinginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_HWFittingInfo >*
      mutable_jk_hwfittinginfo();

  // repeated .transMsg.JK_HoleRuleInfo JK_HoleRuleInfo = 58;
  inline int jk_holeruleinfo_size() const;
  inline void clear_jk_holeruleinfo();
  static const int kJKHoleRuleInfoFieldNumber = 58;
  inline const ::transMsg::JK_HoleRuleInfo& jk_holeruleinfo(int index) const;
  inline ::transMsg::JK_HoleRuleInfo* mutable_jk_holeruleinfo(int index);
  inline ::transMsg::JK_HoleRuleInfo* add_jk_holeruleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_HoleRuleInfo >&
      jk_holeruleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_HoleRuleInfo >*
      mutable_jk_holeruleinfo();

  // repeated .transMsg.JK_MaterialInfo JK_MaterialInfo = 59;
  inline int jk_materialinfo_size() const;
  inline void clear_jk_materialinfo();
  static const int kJKMaterialInfoFieldNumber = 59;
  inline const ::transMsg::JK_MaterialInfo& jk_materialinfo(int index) const;
  inline ::transMsg::JK_MaterialInfo* mutable_jk_materialinfo(int index);
  inline ::transMsg::JK_MaterialInfo* add_jk_materialinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_MaterialInfo >&
      jk_materialinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_MaterialInfo >*
      mutable_jk_materialinfo();

  // repeated .transMsg.JK_MaterialSealRuleMapInfo JK_MaterialSealRuleMapInfo = 60;
  inline int jk_materialsealrulemapinfo_size() const;
  inline void clear_jk_materialsealrulemapinfo();
  static const int kJKMaterialSealRuleMapInfoFieldNumber = 60;
  inline const ::transMsg::JK_MaterialSealRuleMapInfo& jk_materialsealrulemapinfo(int index) const;
  inline ::transMsg::JK_MaterialSealRuleMapInfo* mutable_jk_materialsealrulemapinfo(int index);
  inline ::transMsg::JK_MaterialSealRuleMapInfo* add_jk_materialsealrulemapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_MaterialSealRuleMapInfo >&
      jk_materialsealrulemapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_MaterialSealRuleMapInfo >*
      mutable_jk_materialsealrulemapinfo();

  // repeated .transMsg.JK_ModelInfo JK_ModelInfo = 61;
  inline int jk_modelinfo_size() const;
  inline void clear_jk_modelinfo();
  static const int kJKModelInfoFieldNumber = 61;
  inline const ::transMsg::JK_ModelInfo& jk_modelinfo(int index) const;
  inline ::transMsg::JK_ModelInfo* mutable_jk_modelinfo(int index);
  inline ::transMsg::JK_ModelInfo* add_jk_modelinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ModelInfo >&
      jk_modelinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ModelInfo >*
      mutable_jk_modelinfo();

  // repeated .transMsg.JK_NumberRuleInfo JK_NumberRuleInfo = 62;
  inline int jk_numberruleinfo_size() const;
  inline void clear_jk_numberruleinfo();
  static const int kJKNumberRuleInfoFieldNumber = 62;
  inline const ::transMsg::JK_NumberRuleInfo& jk_numberruleinfo(int index) const;
  inline ::transMsg::JK_NumberRuleInfo* mutable_jk_numberruleinfo(int index);
  inline ::transMsg::JK_NumberRuleInfo* add_jk_numberruleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_NumberRuleInfo >&
      jk_numberruleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_NumberRuleInfo >*
      mutable_jk_numberruleinfo();

  // repeated .transMsg.JK_PackageInfo JK_PackageInfo = 63;
  inline int jk_packageinfo_size() const;
  inline void clear_jk_packageinfo();
  static const int kJKPackageInfoFieldNumber = 63;
  inline const ::transMsg::JK_PackageInfo& jk_packageinfo(int index) const;
  inline ::transMsg::JK_PackageInfo* mutable_jk_packageinfo(int index);
  inline ::transMsg::JK_PackageInfo* add_jk_packageinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_PackageInfo >&
      jk_packageinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_PackageInfo >*
      mutable_jk_packageinfo();

  // repeated .transMsg.JK_PackageMapInfo JK_PackageMapInfo = 64;
  inline int jk_packagemapinfo_size() const;
  inline void clear_jk_packagemapinfo();
  static const int kJKPackageMapInfoFieldNumber = 64;
  inline const ::transMsg::JK_PackageMapInfo& jk_packagemapinfo(int index) const;
  inline ::transMsg::JK_PackageMapInfo* mutable_jk_packagemapinfo(int index);
  inline ::transMsg::JK_PackageMapInfo* add_jk_packagemapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_PackageMapInfo >&
      jk_packagemapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_PackageMapInfo >*
      mutable_jk_packagemapinfo();

  // repeated .transMsg.JK_ProductInfo JK_ProductInfo = 65;
  inline int jk_productinfo_size() const;
  inline void clear_jk_productinfo();
  static const int kJKProductInfoFieldNumber = 65;
  inline const ::transMsg::JK_ProductInfo& jk_productinfo(int index) const;
  inline ::transMsg::JK_ProductInfo* mutable_jk_productinfo(int index);
  inline ::transMsg::JK_ProductInfo* add_jk_productinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductInfo >&
      jk_productinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductInfo >*
      mutable_jk_productinfo();

  // repeated .transMsg.JK_ProductSeriesInfo JK_ProductSeriesInfo = 66;
  inline int jk_productseriesinfo_size() const;
  inline void clear_jk_productseriesinfo();
  static const int kJKProductSeriesInfoFieldNumber = 66;
  inline const ::transMsg::JK_ProductSeriesInfo& jk_productseriesinfo(int index) const;
  inline ::transMsg::JK_ProductSeriesInfo* mutable_jk_productseriesinfo(int index);
  inline ::transMsg::JK_ProductSeriesInfo* add_jk_productseriesinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductSeriesInfo >&
      jk_productseriesinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductSeriesInfo >*
      mutable_jk_productseriesinfo();

  // repeated .transMsg.JK_ProductSeriesValidInfo JK_ProductSeriesValidInfo = 67;
  inline int jk_productseriesvalidinfo_size() const;
  inline void clear_jk_productseriesvalidinfo();
  static const int kJKProductSeriesValidInfoFieldNumber = 67;
  inline const ::transMsg::JK_ProductSeriesValidInfo& jk_productseriesvalidinfo(int index) const;
  inline ::transMsg::JK_ProductSeriesValidInfo* mutable_jk_productseriesvalidinfo(int index);
  inline ::transMsg::JK_ProductSeriesValidInfo* add_jk_productseriesvalidinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductSeriesValidInfo >&
      jk_productseriesvalidinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductSeriesValidInfo >*
      mutable_jk_productseriesvalidinfo();

  // repeated .transMsg.JK_ResourceInfo JK_ResourceInfo = 68;
  inline int jk_resourceinfo_size() const;
  inline void clear_jk_resourceinfo();
  static const int kJKResourceInfoFieldNumber = 68;
  inline const ::transMsg::JK_ResourceInfo& jk_resourceinfo(int index) const;
  inline ::transMsg::JK_ResourceInfo* mutable_jk_resourceinfo(int index);
  inline ::transMsg::JK_ResourceInfo* add_jk_resourceinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ResourceInfo >&
      jk_resourceinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ResourceInfo >*
      mutable_jk_resourceinfo();

  // repeated .transMsg.JK_SealRuleInfo JK_SealRuleInfo = 69;
  inline int jk_sealruleinfo_size() const;
  inline void clear_jk_sealruleinfo();
  static const int kJKSealRuleInfoFieldNumber = 69;
  inline const ::transMsg::JK_SealRuleInfo& jk_sealruleinfo(int index) const;
  inline ::transMsg::JK_SealRuleInfo* mutable_jk_sealruleinfo(int index);
  inline ::transMsg::JK_SealRuleInfo* add_jk_sealruleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SealRuleInfo >&
      jk_sealruleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SealRuleInfo >*
      mutable_jk_sealruleinfo();

  // repeated .transMsg.JK_SysConfigInfo JK_SysConfigInfo = 70;
  inline int jk_sysconfiginfo_size() const;
  inline void clear_jk_sysconfiginfo();
  static const int kJKSysConfigInfoFieldNumber = 70;
  inline const ::transMsg::JK_SysConfigInfo& jk_sysconfiginfo(int index) const;
  inline ::transMsg::JK_SysConfigInfo* mutable_jk_sysconfiginfo(int index);
  inline ::transMsg::JK_SysConfigInfo* add_jk_sysconfiginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysConfigInfo >&
      jk_sysconfiginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysConfigInfo >*
      mutable_jk_sysconfiginfo();

  // repeated .transMsg.JK_SysRuleConfigInfo JK_SysRuleConfigInfo = 71;
  inline int jk_sysruleconfiginfo_size() const;
  inline void clear_jk_sysruleconfiginfo();
  static const int kJKSysRuleConfigInfoFieldNumber = 71;
  inline const ::transMsg::JK_SysRuleConfigInfo& jk_sysruleconfiginfo(int index) const;
  inline ::transMsg::JK_SysRuleConfigInfo* mutable_jk_sysruleconfiginfo(int index);
  inline ::transMsg::JK_SysRuleConfigInfo* add_jk_sysruleconfiginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysRuleConfigInfo >&
      jk_sysruleconfiginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysRuleConfigInfo >*
      mutable_jk_sysruleconfiginfo();

  // repeated .transMsg.JK_SysRuleTypeInfo JK_SysRuleTypeInfo = 72;
  inline int jk_sysruletypeinfo_size() const;
  inline void clear_jk_sysruletypeinfo();
  static const int kJKSysRuleTypeInfoFieldNumber = 72;
  inline const ::transMsg::JK_SysRuleTypeInfo& jk_sysruletypeinfo(int index) const;
  inline ::transMsg::JK_SysRuleTypeInfo* mutable_jk_sysruletypeinfo(int index);
  inline ::transMsg::JK_SysRuleTypeInfo* add_jk_sysruletypeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysRuleTypeInfo >&
      jk_sysruletypeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysRuleTypeInfo >*
      mutable_jk_sysruletypeinfo();

  // repeated .transMsg.JK_TableTopSideInfo JK_TableTopSideInfo = 73;
  inline int jk_tabletopsideinfo_size() const;
  inline void clear_jk_tabletopsideinfo();
  static const int kJKTableTopSideInfoFieldNumber = 73;
  inline const ::transMsg::JK_TableTopSideInfo& jk_tabletopsideinfo(int index) const;
  inline ::transMsg::JK_TableTopSideInfo* mutable_jk_tabletopsideinfo(int index);
  inline ::transMsg::JK_TableTopSideInfo* add_jk_tabletopsideinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_TableTopSideInfo >&
      jk_tabletopsideinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_TableTopSideInfo >*
      mutable_jk_tabletopsideinfo();

  // @@protoc_insertion_point(class_scope:transMsg.JK_Table)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabBoardMatInfo > jk_cabboardmatinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabBoardMatSkinInfo > jk_cabboardmatskininfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignBoardSealEdgeInfo > jk_cabdesignboardsealedgeinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignBoardSealInfo > jk_cabdesignboardsealinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorRegionHandleInfo > jk_cabdesigndoorregionhandleinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorRegionInfo > jk_cabdesigndoorregioninfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorSystemInfo > jk_cabdesigndoorsysteminfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFNFittingInfo > jk_cabdesignfnfittinginfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFNFittingMapInfo > jk_cabdesignfnfittingmapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFootInfo > jk_cabdesignfootinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignInfo > jk_cabdesigninfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignMatInfo > jk_cabdesignmatinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabMatPlanInfo > jk_cabmatplaninfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardGapInfo > jk_cabstructboardgapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardInfo > jk_cabstructboardinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardSealInfo > jk_cabstructboardsealinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructGapInfo > jk_cabstructgapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructInfo > jk_cabstructinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructMatPlanMapInfo > jk_cabstructmatplanmapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeBoardInfo > jk_cabinetsizeboardinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeInfo > jk_cabinetsizeinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeStructBoardInfo > jk_cabinetsizestructboardinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardFrameMapInfo > jk_decorboardframemapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardInfo > jk_decorboardinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardMatInfo > jk_decorboardmatinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitInfo > jk_decorboardunitinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitMatInfo > jk_decorboardunitmatinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitSealInfo > jk_decorboardunitsealinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorInfo > jk_decorinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorLineInfo > jk_decorlineinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorLineMatInfo > jk_decorlinematinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorUnitHWFittingMapInfo > jk_decorunithwfittingmapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardGapInfo > jk_doorboardgapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardInfo > jk_doorboardinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardMatMapInfo > jk_doorboardmatmapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardSealInfo > jk_doorboardsealinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorInfo > jk_doorinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatMapInfo > jk_doormatmapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatPlanHandleMapInfo > jk_doormatplanhandlemapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatPlanInfo > jk_doormatplaninfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorRegionHWFittingMapInfo > jk_doorregionhwfittingmapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemInfo > jk_doorsysteminfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemMatMapInfo > jk_doorsystemmatmapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionDoorMapInfo > jk_doorsystemregiondoormapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionInfo > jk_doorsystemregioninfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionSlideMapInfo > jk_doorsystemregionslidemapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionSlidePositionSizeInfo > jk_doorsystemregionslidepositionsizeinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingInfo > jk_fnfittinginfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingMatInfo > jk_fnfittingmatinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartInfo > jk_fnfittingpartinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartMatInfo > jk_fnfittingpartmatinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartSealInfo > jk_fnfittingpartsealinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FittingInfo > jk_fittinginfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FittingRuleInfo > jk_fittingruleinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FormulaConstInfo > jk_formulaconstinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_GroupInfo > jk_groupinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_HWFittingInfo > jk_hwfittinginfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_HoleRuleInfo > jk_holeruleinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_MaterialInfo > jk_materialinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_MaterialSealRuleMapInfo > jk_materialsealrulemapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ModelInfo > jk_modelinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_NumberRuleInfo > jk_numberruleinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_PackageInfo > jk_packageinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_PackageMapInfo > jk_packagemapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductInfo > jk_productinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductSeriesInfo > jk_productseriesinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductSeriesValidInfo > jk_productseriesvalidinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ResourceInfo > jk_resourceinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SealRuleInfo > jk_sealruleinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysConfigInfo > jk_sysconfiginfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysRuleConfigInfo > jk_sysruleconfiginfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysRuleTypeInfo > jk_sysruletypeinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::JK_TableTopSideInfo > jk_tabletopsideinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(73 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dJK_2eproto();
  friend void protobuf_AssignDesc_msg_2dJK_2eproto();
  friend void protobuf_ShutdownFile_msg_2dJK_2eproto();

  void InitAsDefaultInstance();
  static JK_Table* default_instance_;
};
// ===================================================================


// ===================================================================

// JK_CabBoardMatInfo

// required int32 CabMatPlanID = 1;
inline bool JK_CabBoardMatInfo::has_cabmatplanid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabBoardMatInfo::set_has_cabmatplanid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabBoardMatInfo::clear_has_cabmatplanid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabBoardMatInfo::clear_cabmatplanid() {
  cabmatplanid_ = 0;
  clear_has_cabmatplanid();
}
inline ::google::protobuf::int32 JK_CabBoardMatInfo::cabmatplanid() const {
  return cabmatplanid_;
}
inline void JK_CabBoardMatInfo::set_cabmatplanid(::google::protobuf::int32 value) {
  set_has_cabmatplanid();
  cabmatplanid_ = value;
}

// required int32 CabStructBoardID = 2;
inline bool JK_CabBoardMatInfo::has_cabstructboardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabBoardMatInfo::set_has_cabstructboardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabBoardMatInfo::clear_has_cabstructboardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabBoardMatInfo::clear_cabstructboardid() {
  cabstructboardid_ = 0;
  clear_has_cabstructboardid();
}
inline ::google::protobuf::int32 JK_CabBoardMatInfo::cabstructboardid() const {
  return cabstructboardid_;
}
inline void JK_CabBoardMatInfo::set_cabstructboardid(::google::protobuf::int32 value) {
  set_has_cabstructboardid();
  cabstructboardid_ = value;
}

// required bool IsDefault = 3;
inline bool JK_CabBoardMatInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabBoardMatInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabBoardMatInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabBoardMatInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_CabBoardMatInfo::isdefault() const {
  return isdefault_;
}
inline void JK_CabBoardMatInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int32 MatID = 4;
inline bool JK_CabBoardMatInfo::has_matid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabBoardMatInfo::set_has_matid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabBoardMatInfo::clear_has_matid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabBoardMatInfo::clear_matid() {
  matid_ = 0;
  clear_has_matid();
}
inline ::google::protobuf::int32 JK_CabBoardMatInfo::matid() const {
  return matid_;
}
inline void JK_CabBoardMatInfo::set_matid(::google::protobuf::int32 value) {
  set_has_matid();
  matid_ = value;
}

// required int32 MatGType = 5;
inline bool JK_CabBoardMatInfo::has_matgtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabBoardMatInfo::set_has_matgtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabBoardMatInfo::clear_has_matgtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabBoardMatInfo::clear_matgtype() {
  matgtype_ = 0;
  clear_has_matgtype();
}
inline ::google::protobuf::int32 JK_CabBoardMatInfo::matgtype() const {
  return matgtype_;
}
inline void JK_CabBoardMatInfo::set_matgtype(::google::protobuf::int32 value) {
  set_has_matgtype();
  matgtype_ = value;
}

// required int32 SealRuleID = 6;
inline bool JK_CabBoardMatInfo::has_sealruleid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabBoardMatInfo::set_has_sealruleid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabBoardMatInfo::clear_has_sealruleid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabBoardMatInfo::clear_sealruleid() {
  sealruleid_ = 0;
  clear_has_sealruleid();
}
inline ::google::protobuf::int32 JK_CabBoardMatInfo::sealruleid() const {
  return sealruleid_;
}
inline void JK_CabBoardMatInfo::set_sealruleid(::google::protobuf::int32 value) {
  set_has_sealruleid();
  sealruleid_ = value;
}

// required int32 SkinDirection = 7;
inline bool JK_CabBoardMatInfo::has_skindirection() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabBoardMatInfo::set_has_skindirection() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabBoardMatInfo::clear_has_skindirection() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabBoardMatInfo::clear_skindirection() {
  skindirection_ = 0;
  clear_has_skindirection();
}
inline ::google::protobuf::int32 JK_CabBoardMatInfo::skindirection() const {
  return skindirection_;
}
inline void JK_CabBoardMatInfo::set_skindirection(::google::protobuf::int32 value) {
  set_has_skindirection();
  skindirection_ = value;
}

// required int64 VerCode = 8;
inline bool JK_CabBoardMatInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabBoardMatInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabBoardMatInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabBoardMatInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabBoardMatInfo::vercode() const {
  return vercode_;
}
inline void JK_CabBoardMatInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 9;
inline bool JK_CabBoardMatInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabBoardMatInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabBoardMatInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabBoardMatInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabBoardMatInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabBoardMatInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required bool IsUseDefaultSkinDirection = 10;
inline bool JK_CabBoardMatInfo::has_isusedefaultskindirection() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabBoardMatInfo::set_has_isusedefaultskindirection() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabBoardMatInfo::clear_has_isusedefaultskindirection() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabBoardMatInfo::clear_isusedefaultskindirection() {
  isusedefaultskindirection_ = false;
  clear_has_isusedefaultskindirection();
}
inline bool JK_CabBoardMatInfo::isusedefaultskindirection() const {
  return isusedefaultskindirection_;
}
inline void JK_CabBoardMatInfo::set_isusedefaultskindirection(bool value) {
  set_has_isusedefaultskindirection();
  isusedefaultskindirection_ = value;
}

// -------------------------------------------------------------------

// JK_CabBoardMatSkinInfo

// required int32 CabMatPlanID = 1;
inline bool JK_CabBoardMatSkinInfo::has_cabmatplanid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabBoardMatSkinInfo::set_has_cabmatplanid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabBoardMatSkinInfo::clear_has_cabmatplanid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabBoardMatSkinInfo::clear_cabmatplanid() {
  cabmatplanid_ = 0;
  clear_has_cabmatplanid();
}
inline ::google::protobuf::int32 JK_CabBoardMatSkinInfo::cabmatplanid() const {
  return cabmatplanid_;
}
inline void JK_CabBoardMatSkinInfo::set_cabmatplanid(::google::protobuf::int32 value) {
  set_has_cabmatplanid();
  cabmatplanid_ = value;
}

// required int32 CabStructBoardID = 2;
inline bool JK_CabBoardMatSkinInfo::has_cabstructboardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabBoardMatSkinInfo::set_has_cabstructboardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabBoardMatSkinInfo::clear_has_cabstructboardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabBoardMatSkinInfo::clear_cabstructboardid() {
  cabstructboardid_ = 0;
  clear_has_cabstructboardid();
}
inline ::google::protobuf::int32 JK_CabBoardMatSkinInfo::cabstructboardid() const {
  return cabstructboardid_;
}
inline void JK_CabBoardMatSkinInfo::set_cabstructboardid(::google::protobuf::int32 value) {
  set_has_cabstructboardid();
  cabstructboardid_ = value;
}

// required int32 SkinDirection = 3;
inline bool JK_CabBoardMatSkinInfo::has_skindirection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabBoardMatSkinInfo::set_has_skindirection() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabBoardMatSkinInfo::clear_has_skindirection() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabBoardMatSkinInfo::clear_skindirection() {
  skindirection_ = 0;
  clear_has_skindirection();
}
inline ::google::protobuf::int32 JK_CabBoardMatSkinInfo::skindirection() const {
  return skindirection_;
}
inline void JK_CabBoardMatSkinInfo::set_skindirection(::google::protobuf::int32 value) {
  set_has_skindirection();
  skindirection_ = value;
}

// required int64 VerCode = 4;
inline bool JK_CabBoardMatSkinInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabBoardMatSkinInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabBoardMatSkinInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabBoardMatSkinInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabBoardMatSkinInfo::vercode() const {
  return vercode_;
}
inline void JK_CabBoardMatSkinInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_CabBoardMatSkinInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabBoardMatSkinInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabBoardMatSkinInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabBoardMatSkinInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabBoardMatSkinInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabBoardMatSkinInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required bool IsUseDefaultSkinDirection = 6;
inline bool JK_CabBoardMatSkinInfo::has_isusedefaultskindirection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabBoardMatSkinInfo::set_has_isusedefaultskindirection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabBoardMatSkinInfo::clear_has_isusedefaultskindirection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabBoardMatSkinInfo::clear_isusedefaultskindirection() {
  isusedefaultskindirection_ = false;
  clear_has_isusedefaultskindirection();
}
inline bool JK_CabBoardMatSkinInfo::isusedefaultskindirection() const {
  return isusedefaultskindirection_;
}
inline void JK_CabBoardMatSkinInfo::set_isusedefaultskindirection(bool value) {
  set_has_isusedefaultskindirection();
  isusedefaultskindirection_ = value;
}

// -------------------------------------------------------------------

// JK_CabDesignBoardSealEdgeInfo

// required int32 CabDesignBoardSealID = 1;
inline bool JK_CabDesignBoardSealEdgeInfo::has_cabdesignboardsealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabDesignBoardSealEdgeInfo::set_has_cabdesignboardsealid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabDesignBoardSealEdgeInfo::clear_has_cabdesignboardsealid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabDesignBoardSealEdgeInfo::clear_cabdesignboardsealid() {
  cabdesignboardsealid_ = 0;
  clear_has_cabdesignboardsealid();
}
inline ::google::protobuf::int32 JK_CabDesignBoardSealEdgeInfo::cabdesignboardsealid() const {
  return cabdesignboardsealid_;
}
inline void JK_CabDesignBoardSealEdgeInfo::set_cabdesignboardsealid(::google::protobuf::int32 value) {
  set_has_cabdesignboardsealid();
  cabdesignboardsealid_ = value;
}

// required int32 SealIndex = 2;
inline bool JK_CabDesignBoardSealEdgeInfo::has_sealindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabDesignBoardSealEdgeInfo::set_has_sealindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabDesignBoardSealEdgeInfo::clear_has_sealindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabDesignBoardSealEdgeInfo::clear_sealindex() {
  sealindex_ = 0;
  clear_has_sealindex();
}
inline ::google::protobuf::int32 JK_CabDesignBoardSealEdgeInfo::sealindex() const {
  return sealindex_;
}
inline void JK_CabDesignBoardSealEdgeInfo::set_sealindex(::google::protobuf::int32 value) {
  set_has_sealindex();
  sealindex_ = value;
}

// required int32 SealMatID = 3;
inline bool JK_CabDesignBoardSealEdgeInfo::has_sealmatid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabDesignBoardSealEdgeInfo::set_has_sealmatid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabDesignBoardSealEdgeInfo::clear_has_sealmatid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabDesignBoardSealEdgeInfo::clear_sealmatid() {
  sealmatid_ = 0;
  clear_has_sealmatid();
}
inline ::google::protobuf::int32 JK_CabDesignBoardSealEdgeInfo::sealmatid() const {
  return sealmatid_;
}
inline void JK_CabDesignBoardSealEdgeInfo::set_sealmatid(::google::protobuf::int32 value) {
  set_has_sealmatid();
  sealmatid_ = value;
}

// required int64 VerCode = 4;
inline bool JK_CabDesignBoardSealEdgeInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabDesignBoardSealEdgeInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabDesignBoardSealEdgeInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabDesignBoardSealEdgeInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabDesignBoardSealEdgeInfo::vercode() const {
  return vercode_;
}
inline void JK_CabDesignBoardSealEdgeInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_CabDesignBoardSealEdgeInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabDesignBoardSealEdgeInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabDesignBoardSealEdgeInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabDesignBoardSealEdgeInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabDesignBoardSealEdgeInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabDesignBoardSealEdgeInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_CabDesignBoardSealInfo

// required int32 CabDesignBoardSealID = 1;
inline bool JK_CabDesignBoardSealInfo::has_cabdesignboardsealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabDesignBoardSealInfo::set_has_cabdesignboardsealid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabDesignBoardSealInfo::clear_has_cabdesignboardsealid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabDesignBoardSealInfo::clear_cabdesignboardsealid() {
  cabdesignboardsealid_ = 0;
  clear_has_cabdesignboardsealid();
}
inline ::google::protobuf::int32 JK_CabDesignBoardSealInfo::cabdesignboardsealid() const {
  return cabdesignboardsealid_;
}
inline void JK_CabDesignBoardSealInfo::set_cabdesignboardsealid(::google::protobuf::int32 value) {
  set_has_cabdesignboardsealid();
  cabdesignboardsealid_ = value;
}

// required int32 CabStructBoardID = 2;
inline bool JK_CabDesignBoardSealInfo::has_cabstructboardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabDesignBoardSealInfo::set_has_cabstructboardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabDesignBoardSealInfo::clear_has_cabstructboardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabDesignBoardSealInfo::clear_cabstructboardid() {
  cabstructboardid_ = 0;
  clear_has_cabstructboardid();
}
inline ::google::protobuf::int32 JK_CabDesignBoardSealInfo::cabstructboardid() const {
  return cabstructboardid_;
}
inline void JK_CabDesignBoardSealInfo::set_cabstructboardid(::google::protobuf::int32 value) {
  set_has_cabstructboardid();
  cabstructboardid_ = value;
}

// required int32 CabStructID = 3;
inline bool JK_CabDesignBoardSealInfo::has_cabstructid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabDesignBoardSealInfo::set_has_cabstructid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabDesignBoardSealInfo::clear_has_cabstructid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabDesignBoardSealInfo::clear_cabstructid() {
  cabstructid_ = 0;
  clear_has_cabstructid();
}
inline ::google::protobuf::int32 JK_CabDesignBoardSealInfo::cabstructid() const {
  return cabstructid_;
}
inline void JK_CabDesignBoardSealInfo::set_cabstructid(::google::protobuf::int32 value) {
  set_has_cabstructid();
  cabstructid_ = value;
}

// required int32 CabDesignID = 4;
inline bool JK_CabDesignBoardSealInfo::has_cabdesignid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabDesignBoardSealInfo::set_has_cabdesignid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabDesignBoardSealInfo::clear_has_cabdesignid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabDesignBoardSealInfo::clear_cabdesignid() {
  cabdesignid_ = 0;
  clear_has_cabdesignid();
}
inline ::google::protobuf::int32 JK_CabDesignBoardSealInfo::cabdesignid() const {
  return cabdesignid_;
}
inline void JK_CabDesignBoardSealInfo::set_cabdesignid(::google::protobuf::int32 value) {
  set_has_cabdesignid();
  cabdesignid_ = value;
}

// required int32 MaterialID = 5;
inline bool JK_CabDesignBoardSealInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabDesignBoardSealInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabDesignBoardSealInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabDesignBoardSealInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 JK_CabDesignBoardSealInfo::materialid() const {
  return materialid_;
}
inline void JK_CabDesignBoardSealInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required int64 VerCode = 6;
inline bool JK_CabDesignBoardSealInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabDesignBoardSealInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabDesignBoardSealInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabDesignBoardSealInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabDesignBoardSealInfo::vercode() const {
  return vercode_;
}
inline void JK_CabDesignBoardSealInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 7;
inline bool JK_CabDesignBoardSealInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabDesignBoardSealInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabDesignBoardSealInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabDesignBoardSealInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabDesignBoardSealInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabDesignBoardSealInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_CabDesignDoorRegionHandleInfo

// required int32 CabDesignDoorRegionHandleID = 1;
inline bool JK_CabDesignDoorRegionHandleInfo::has_cabdesigndoorregionhandleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_has_cabdesigndoorregionhandleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_has_cabdesigndoorregionhandleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_cabdesigndoorregionhandleid() {
  cabdesigndoorregionhandleid_ = 0;
  clear_has_cabdesigndoorregionhandleid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionHandleInfo::cabdesigndoorregionhandleid() const {
  return cabdesigndoorregionhandleid_;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_cabdesigndoorregionhandleid(::google::protobuf::int32 value) {
  set_has_cabdesigndoorregionhandleid();
  cabdesigndoorregionhandleid_ = value;
}

// required int32 CabDesignDoorRegionID = 2;
inline bool JK_CabDesignDoorRegionHandleInfo::has_cabdesigndoorregionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_has_cabdesigndoorregionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_has_cabdesigndoorregionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_cabdesigndoorregionid() {
  cabdesigndoorregionid_ = 0;
  clear_has_cabdesigndoorregionid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionHandleInfo::cabdesigndoorregionid() const {
  return cabdesigndoorregionid_;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_cabdesigndoorregionid(::google::protobuf::int32 value) {
  set_has_cabdesigndoorregionid();
  cabdesigndoorregionid_ = value;
}

// required int32 XDock = 3;
inline bool JK_CabDesignDoorRegionHandleInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionHandleInfo::xdock() const {
  return xdock_;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 4;
inline bool JK_CabDesignDoorRegionHandleInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionHandleInfo::ydock() const {
  return ydock_;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 5;
inline bool JK_CabDesignDoorRegionHandleInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionHandleInfo::zdock() const {
  return zdock_;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required string XOffsetFormula = 6;
inline bool JK_CabDesignDoorRegionHandleInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_CabDesignDoorRegionHandleInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabDesignDoorRegionHandleInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabDesignDoorRegionHandleInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignDoorRegionHandleInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_CabDesignDoorRegionHandleInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignDoorRegionHandleInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 7;
inline bool JK_CabDesignDoorRegionHandleInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_CabDesignDoorRegionHandleInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabDesignDoorRegionHandleInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabDesignDoorRegionHandleInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignDoorRegionHandleInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_CabDesignDoorRegionHandleInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignDoorRegionHandleInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 8;
inline bool JK_CabDesignDoorRegionHandleInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_CabDesignDoorRegionHandleInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabDesignDoorRegionHandleInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabDesignDoorRegionHandleInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignDoorRegionHandleInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_CabDesignDoorRegionHandleInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignDoorRegionHandleInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 9;
inline bool JK_CabDesignDoorRegionHandleInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabDesignDoorRegionHandleInfo::vercode() const {
  return vercode_;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 10;
inline bool JK_CabDesignDoorRegionHandleInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionHandleInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required double ArcZ = 11;
inline bool JK_CabDesignDoorRegionHandleInfo::has_arcz() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_has_arcz() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_has_arcz() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_arcz() {
  arcz_ = 0;
  clear_has_arcz();
}
inline double JK_CabDesignDoorRegionHandleInfo::arcz() const {
  return arcz_;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_arcz(double value) {
  set_has_arcz();
  arcz_ = value;
}

// required int32 HandleID = 12;
inline bool JK_CabDesignDoorRegionHandleInfo::has_handleid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_has_handleid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_has_handleid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_handleid() {
  handleid_ = 0;
  clear_has_handleid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionHandleInfo::handleid() const {
  return handleid_;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_handleid(::google::protobuf::int32 value) {
  set_has_handleid();
  handleid_ = value;
}

// required int32 MatchType = 13;
inline bool JK_CabDesignDoorRegionHandleInfo::has_matchtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_has_matchtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_has_matchtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_CabDesignDoorRegionHandleInfo::clear_matchtype() {
  matchtype_ = 0;
  clear_has_matchtype();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionHandleInfo::matchtype() const {
  return matchtype_;
}
inline void JK_CabDesignDoorRegionHandleInfo::set_matchtype(::google::protobuf::int32 value) {
  set_has_matchtype();
  matchtype_ = value;
}

// -------------------------------------------------------------------

// JK_CabDesignDoorRegionInfo

// required int32 CabDesignDoorRegionID = 1;
inline bool JK_CabDesignDoorRegionInfo::has_cabdesigndoorregionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_cabdesigndoorregionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_cabdesigndoorregionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabDesignDoorRegionInfo::clear_cabdesigndoorregionid() {
  cabdesigndoorregionid_ = 0;
  clear_has_cabdesigndoorregionid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionInfo::cabdesigndoorregionid() const {
  return cabdesigndoorregionid_;
}
inline void JK_CabDesignDoorRegionInfo::set_cabdesigndoorregionid(::google::protobuf::int32 value) {
  set_has_cabdesigndoorregionid();
  cabdesigndoorregionid_ = value;
}

// required int32 CabDesignID = 2;
inline bool JK_CabDesignDoorRegionInfo::has_cabdesignid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_cabdesignid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_cabdesignid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabDesignDoorRegionInfo::clear_cabdesignid() {
  cabdesignid_ = 0;
  clear_has_cabdesignid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionInfo::cabdesignid() const {
  return cabdesignid_;
}
inline void JK_CabDesignDoorRegionInfo::set_cabdesignid(::google::protobuf::int32 value) {
  set_has_cabdesignid();
  cabdesignid_ = value;
}

// required bool IsDel = 3;
inline bool JK_CabDesignDoorRegionInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabDesignDoorRegionInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_CabDesignDoorRegionInfo::isdel() const {
  return isdel_;
}
inline void JK_CabDesignDoorRegionInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsGroup = 4;
inline bool JK_CabDesignDoorRegionInfo::has_isgroup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_isgroup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_isgroup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabDesignDoorRegionInfo::clear_isgroup() {
  isgroup_ = false;
  clear_has_isgroup();
}
inline bool JK_CabDesignDoorRegionInfo::isgroup() const {
  return isgroup_;
}
inline void JK_CabDesignDoorRegionInfo::set_isgroup(bool value) {
  set_has_isgroup();
  isgroup_ = value;
}

// required double XLen = 5;
inline bool JK_CabDesignDoorRegionInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabDesignDoorRegionInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double JK_CabDesignDoorRegionInfo::xlen() const {
  return xlen_;
}
inline void JK_CabDesignDoorRegionInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 6;
inline bool JK_CabDesignDoorRegionInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabDesignDoorRegionInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double JK_CabDesignDoorRegionInfo::ylen() const {
  return ylen_;
}
inline void JK_CabDesignDoorRegionInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required bool IsCanResize = 7;
inline bool JK_CabDesignDoorRegionInfo::has_iscanresize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_iscanresize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_iscanresize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabDesignDoorRegionInfo::clear_iscanresize() {
  iscanresize_ = false;
  clear_has_iscanresize();
}
inline bool JK_CabDesignDoorRegionInfo::iscanresize() const {
  return iscanresize_;
}
inline void JK_CabDesignDoorRegionInfo::set_iscanresize(bool value) {
  set_has_iscanresize();
  iscanresize_ = value;
}

// required double MinXLen = 8;
inline bool JK_CabDesignDoorRegionInfo::has_minxlen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_minxlen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_minxlen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabDesignDoorRegionInfo::clear_minxlen() {
  minxlen_ = 0;
  clear_has_minxlen();
}
inline double JK_CabDesignDoorRegionInfo::minxlen() const {
  return minxlen_;
}
inline void JK_CabDesignDoorRegionInfo::set_minxlen(double value) {
  set_has_minxlen();
  minxlen_ = value;
}

// required double MaxXLen = 9;
inline bool JK_CabDesignDoorRegionInfo::has_maxxlen() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_maxxlen() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_maxxlen() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabDesignDoorRegionInfo::clear_maxxlen() {
  maxxlen_ = 0;
  clear_has_maxxlen();
}
inline double JK_CabDesignDoorRegionInfo::maxxlen() const {
  return maxxlen_;
}
inline void JK_CabDesignDoorRegionInfo::set_maxxlen(double value) {
  set_has_maxxlen();
  maxxlen_ = value;
}

// required double XLenStep = 10;
inline bool JK_CabDesignDoorRegionInfo::has_xlenstep() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_xlenstep() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_xlenstep() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabDesignDoorRegionInfo::clear_xlenstep() {
  xlenstep_ = 0;
  clear_has_xlenstep();
}
inline double JK_CabDesignDoorRegionInfo::xlenstep() const {
  return xlenstep_;
}
inline void JK_CabDesignDoorRegionInfo::set_xlenstep(double value) {
  set_has_xlenstep();
  xlenstep_ = value;
}

// required double MinYLen = 11;
inline bool JK_CabDesignDoorRegionInfo::has_minylen() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_minylen() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_minylen() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_CabDesignDoorRegionInfo::clear_minylen() {
  minylen_ = 0;
  clear_has_minylen();
}
inline double JK_CabDesignDoorRegionInfo::minylen() const {
  return minylen_;
}
inline void JK_CabDesignDoorRegionInfo::set_minylen(double value) {
  set_has_minylen();
  minylen_ = value;
}

// required double MaxYLen = 12;
inline bool JK_CabDesignDoorRegionInfo::has_maxylen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_maxylen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_maxylen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_CabDesignDoorRegionInfo::clear_maxylen() {
  maxylen_ = 0;
  clear_has_maxylen();
}
inline double JK_CabDesignDoorRegionInfo::maxylen() const {
  return maxylen_;
}
inline void JK_CabDesignDoorRegionInfo::set_maxylen(double value) {
  set_has_maxylen();
  maxylen_ = value;
}

// required double YLenStep = 13;
inline bool JK_CabDesignDoorRegionInfo::has_ylenstep() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_ylenstep() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_ylenstep() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_ylenstep() {
  ylenstep_ = 0;
  clear_has_ylenstep();
}
inline double JK_CabDesignDoorRegionInfo::ylenstep() const {
  return ylenstep_;
}
inline void JK_CabDesignDoorRegionInfo::set_ylenstep(double value) {
  set_has_ylenstep();
  ylenstep_ = value;
}

// required int32 DefaultMatID = 14;
inline bool JK_CabDesignDoorRegionInfo::has_defaultmatid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_defaultmatid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_defaultmatid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_defaultmatid() {
  defaultmatid_ = 0;
  clear_has_defaultmatid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionInfo::defaultmatid() const {
  return defaultmatid_;
}
inline void JK_CabDesignDoorRegionInfo::set_defaultmatid(::google::protobuf::int32 value) {
  set_has_defaultmatid();
  defaultmatid_ = value;
}

// required int32 DefaultModelID = 15;
inline bool JK_CabDesignDoorRegionInfo::has_defaultmodelid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_defaultmodelid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_defaultmodelid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_defaultmodelid() {
  defaultmodelid_ = 0;
  clear_has_defaultmodelid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionInfo::defaultmodelid() const {
  return defaultmodelid_;
}
inline void JK_CabDesignDoorRegionInfo::set_defaultmodelid(::google::protobuf::int32 value) {
  set_has_defaultmodelid();
  defaultmodelid_ = value;
}

// required int64 VerCode = 16;
inline bool JK_CabDesignDoorRegionInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabDesignDoorRegionInfo::vercode() const {
  return vercode_;
}
inline void JK_CabDesignDoorRegionInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 17;
inline bool JK_CabDesignDoorRegionInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabDesignDoorRegionInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 DefaultDoorID = 18;
inline bool JK_CabDesignDoorRegionInfo::has_defaultdoorid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_defaultdoorid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_defaultdoorid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_defaultdoorid() {
  defaultdoorid_ = 0;
  clear_has_defaultdoorid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionInfo::defaultdoorid() const {
  return defaultdoorid_;
}
inline void JK_CabDesignDoorRegionInfo::set_defaultdoorid(::google::protobuf::int32 value) {
  set_has_defaultdoorid();
  defaultdoorid_ = value;
}

// required int32 CabDesignDoorSystemID = 19;
inline bool JK_CabDesignDoorRegionInfo::has_cabdesigndoorsystemid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_cabdesigndoorsystemid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_cabdesigndoorsystemid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_cabdesigndoorsystemid() {
  cabdesigndoorsystemid_ = 0;
  clear_has_cabdesigndoorsystemid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionInfo::cabdesigndoorsystemid() const {
  return cabdesigndoorsystemid_;
}
inline void JK_CabDesignDoorRegionInfo::set_cabdesigndoorsystemid(::google::protobuf::int32 value) {
  set_has_cabdesigndoorsystemid();
  cabdesigndoorsystemid_ = value;
}

// required int32 DoorSystemID = 20;
inline bool JK_CabDesignDoorRegionInfo::has_doorsystemid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_doorsystemid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_doorsystemid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_doorsystemid() {
  doorsystemid_ = 0;
  clear_has_doorsystemid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionInfo::doorsystemid() const {
  return doorsystemid_;
}
inline void JK_CabDesignDoorRegionInfo::set_doorsystemid(::google::protobuf::int32 value) {
  set_has_doorsystemid();
  doorsystemid_ = value;
}

// required bool IsUseDefaultSize = 21;
inline bool JK_CabDesignDoorRegionInfo::has_isusedefaultsize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_isusedefaultsize() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_isusedefaultsize() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_isusedefaultsize() {
  isusedefaultsize_ = false;
  clear_has_isusedefaultsize();
}
inline bool JK_CabDesignDoorRegionInfo::isusedefaultsize() const {
  return isusedefaultsize_;
}
inline void JK_CabDesignDoorRegionInfo::set_isusedefaultsize(bool value) {
  set_has_isusedefaultsize();
  isusedefaultsize_ = value;
}

// required bool IsUseCutFormula = 22;
inline bool JK_CabDesignDoorRegionInfo::has_isusecutformula() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_isusecutformula() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_isusecutformula() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_isusecutformula() {
  isusecutformula_ = false;
  clear_has_isusecutformula();
}
inline bool JK_CabDesignDoorRegionInfo::isusecutformula() const {
  return isusecutformula_;
}
inline void JK_CabDesignDoorRegionInfo::set_isusecutformula(bool value) {
  set_has_isusecutformula();
  isusecutformula_ = value;
}

// required int32 DoorRegionID = 23;
inline bool JK_CabDesignDoorRegionInfo::has_doorregionid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_CabDesignDoorRegionInfo::set_has_doorregionid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_has_doorregionid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_CabDesignDoorRegionInfo::clear_doorregionid() {
  doorregionid_ = 0;
  clear_has_doorregionid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorRegionInfo::doorregionid() const {
  return doorregionid_;
}
inline void JK_CabDesignDoorRegionInfo::set_doorregionid(::google::protobuf::int32 value) {
  set_has_doorregionid();
  doorregionid_ = value;
}

// -------------------------------------------------------------------

// JK_CabDesignDoorSystemInfo

// required int32 CabDesignDoorSystemID = 1;
inline bool JK_CabDesignDoorSystemInfo::has_cabdesigndoorsystemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_cabdesigndoorsystemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_cabdesigndoorsystemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabDesignDoorSystemInfo::clear_cabdesigndoorsystemid() {
  cabdesigndoorsystemid_ = 0;
  clear_has_cabdesigndoorsystemid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorSystemInfo::cabdesigndoorsystemid() const {
  return cabdesigndoorsystemid_;
}
inline void JK_CabDesignDoorSystemInfo::set_cabdesigndoorsystemid(::google::protobuf::int32 value) {
  set_has_cabdesigndoorsystemid();
  cabdesigndoorsystemid_ = value;
}

// required int32 CabDesignID = 2;
inline bool JK_CabDesignDoorSystemInfo::has_cabdesignid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_cabdesignid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_cabdesignid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabDesignDoorSystemInfo::clear_cabdesignid() {
  cabdesignid_ = 0;
  clear_has_cabdesignid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorSystemInfo::cabdesignid() const {
  return cabdesignid_;
}
inline void JK_CabDesignDoorSystemInfo::set_cabdesignid(::google::protobuf::int32 value) {
  set_has_cabdesignid();
  cabdesignid_ = value;
}

// required bool IsDel = 3;
inline bool JK_CabDesignDoorSystemInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabDesignDoorSystemInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_CabDesignDoorSystemInfo::isdel() const {
  return isdel_;
}
inline void JK_CabDesignDoorSystemInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int64 VerCode = 4;
inline bool JK_CabDesignDoorSystemInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabDesignDoorSystemInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabDesignDoorSystemInfo::vercode() const {
  return vercode_;
}
inline void JK_CabDesignDoorSystemInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_CabDesignDoorSystemInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabDesignDoorSystemInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorSystemInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabDesignDoorSystemInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 DoorSystemID = 6;
inline bool JK_CabDesignDoorSystemInfo::has_doorsystemid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_doorsystemid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_doorsystemid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabDesignDoorSystemInfo::clear_doorsystemid() {
  doorsystemid_ = 0;
  clear_has_doorsystemid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorSystemInfo::doorsystemid() const {
  return doorsystemid_;
}
inline void JK_CabDesignDoorSystemInfo::set_doorsystemid(::google::protobuf::int32 value) {
  set_has_doorsystemid();
  doorsystemid_ = value;
}

// required int32 InstallFaceType = 7;
inline bool JK_CabDesignDoorSystemInfo::has_installfacetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_installfacetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_installfacetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabDesignDoorSystemInfo::clear_installfacetype() {
  installfacetype_ = 0;
  clear_has_installfacetype();
}
inline ::google::protobuf::int32 JK_CabDesignDoorSystemInfo::installfacetype() const {
  return installfacetype_;
}
inline void JK_CabDesignDoorSystemInfo::set_installfacetype(::google::protobuf::int32 value) {
  set_has_installfacetype();
  installfacetype_ = value;
}

// required double XAdjustLen = 8;
inline bool JK_CabDesignDoorSystemInfo::has_xadjustlen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_xadjustlen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_xadjustlen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabDesignDoorSystemInfo::clear_xadjustlen() {
  xadjustlen_ = 0;
  clear_has_xadjustlen();
}
inline double JK_CabDesignDoorSystemInfo::xadjustlen() const {
  return xadjustlen_;
}
inline void JK_CabDesignDoorSystemInfo::set_xadjustlen(double value) {
  set_has_xadjustlen();
  xadjustlen_ = value;
}

// required double YAdjustLen = 9;
inline bool JK_CabDesignDoorSystemInfo::has_yadjustlen() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_yadjustlen() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_yadjustlen() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabDesignDoorSystemInfo::clear_yadjustlen() {
  yadjustlen_ = 0;
  clear_has_yadjustlen();
}
inline double JK_CabDesignDoorSystemInfo::yadjustlen() const {
  return yadjustlen_;
}
inline void JK_CabDesignDoorSystemInfo::set_yadjustlen(double value) {
  set_has_yadjustlen();
  yadjustlen_ = value;
}

// required int32 XDock = 10;
inline bool JK_CabDesignDoorSystemInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabDesignDoorSystemInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 JK_CabDesignDoorSystemInfo::xdock() const {
  return xdock_;
}
inline void JK_CabDesignDoorSystemInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 11;
inline bool JK_CabDesignDoorSystemInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_CabDesignDoorSystemInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 JK_CabDesignDoorSystemInfo::ydock() const {
  return ydock_;
}
inline void JK_CabDesignDoorSystemInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 12;
inline bool JK_CabDesignDoorSystemInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_CabDesignDoorSystemInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 JK_CabDesignDoorSystemInfo::zdock() const {
  return zdock_;
}
inline void JK_CabDesignDoorSystemInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required string XOffsetFormula = 13;
inline bool JK_CabDesignDoorSystemInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_CabDesignDoorSystemInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_CabDesignDoorSystemInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabDesignDoorSystemInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabDesignDoorSystemInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignDoorSystemInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_CabDesignDoorSystemInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignDoorSystemInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 14;
inline bool JK_CabDesignDoorSystemInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_CabDesignDoorSystemInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_CabDesignDoorSystemInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabDesignDoorSystemInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabDesignDoorSystemInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignDoorSystemInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_CabDesignDoorSystemInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignDoorSystemInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 15;
inline bool JK_CabDesignDoorSystemInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_CabDesignDoorSystemInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_CabDesignDoorSystemInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabDesignDoorSystemInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabDesignDoorSystemInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignDoorSystemInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_CabDesignDoorSystemInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignDoorSystemInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 CreatorID = 16;
inline bool JK_CabDesignDoorSystemInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorSystemInfo::creatorid() const {
  return creatorid_;
}
inline void JK_CabDesignDoorSystemInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 17;
inline bool JK_CabDesignDoorSystemInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_CabDesignDoorSystemInfo::updaterid() const {
  return updaterid_;
}
inline void JK_CabDesignDoorSystemInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 18;
inline bool JK_CabDesignDoorSystemInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_CabDesignDoorSystemInfo::createtime() const {
  return createtime_;
}
inline void JK_CabDesignDoorSystemInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 19;
inline bool JK_CabDesignDoorSystemInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_CabDesignDoorSystemInfo::updatetime() const {
  return updatetime_;
}
inline void JK_CabDesignDoorSystemInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required bool IsCanDel = 20;
inline bool JK_CabDesignDoorSystemInfo::has_iscandel() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_iscandel() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_iscandel() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_iscandel() {
  iscandel_ = false;
  clear_has_iscandel();
}
inline bool JK_CabDesignDoorSystemInfo::iscandel() const {
  return iscandel_;
}
inline void JK_CabDesignDoorSystemInfo::set_iscandel(bool value) {
  set_has_iscandel();
  iscandel_ = value;
}

// required string XFormula = 21;
inline bool JK_CabDesignDoorSystemInfo::has_xformula() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_xformula() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_xformula() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_xformula() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    xformula_->clear();
  }
  clear_has_xformula();
}
inline const ::std::string& JK_CabDesignDoorSystemInfo::xformula() const {
  return *xformula_;
}
inline void JK_CabDesignDoorSystemInfo::set_xformula(const ::std::string& value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_CabDesignDoorSystemInfo::set_xformula(const char* value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_CabDesignDoorSystemInfo::set_xformula(const char* value, size_t size) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignDoorSystemInfo::mutable_xformula() {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  return xformula_;
}
inline ::std::string* JK_CabDesignDoorSystemInfo::release_xformula() {
  clear_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xformula_;
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignDoorSystemInfo::set_allocated_xformula(::std::string* xformula) {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (xformula) {
    set_has_xformula();
    xformula_ = xformula;
  } else {
    clear_has_xformula();
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YFormula = 22;
inline bool JK_CabDesignDoorSystemInfo::has_yformula() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_yformula() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_yformula() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_yformula() {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    yformula_->clear();
  }
  clear_has_yformula();
}
inline const ::std::string& JK_CabDesignDoorSystemInfo::yformula() const {
  return *yformula_;
}
inline void JK_CabDesignDoorSystemInfo::set_yformula(const ::std::string& value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_CabDesignDoorSystemInfo::set_yformula(const char* value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_CabDesignDoorSystemInfo::set_yformula(const char* value, size_t size) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignDoorSystemInfo::mutable_yformula() {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  return yformula_;
}
inline ::std::string* JK_CabDesignDoorSystemInfo::release_yformula() {
  clear_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yformula_;
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignDoorSystemInfo::set_allocated_yformula(::std::string* yformula) {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (yformula) {
    set_has_yformula();
    yformula_ = yformula;
  } else {
    clear_has_yformula();
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double ZLen = 23;
inline bool JK_CabDesignDoorSystemInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_CabDesignDoorSystemInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_CabDesignDoorSystemInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double JK_CabDesignDoorSystemInfo::zlen() const {
  return zlen_;
}
inline void JK_CabDesignDoorSystemInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// -------------------------------------------------------------------

// JK_CabDesignFNFittingInfo

// required int32 CabDesignFNFittingID = 1;
inline bool JK_CabDesignFNFittingInfo::has_cabdesignfnfittingid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_cabdesignfnfittingid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_cabdesignfnfittingid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabDesignFNFittingInfo::clear_cabdesignfnfittingid() {
  cabdesignfnfittingid_ = 0;
  clear_has_cabdesignfnfittingid();
}
inline ::google::protobuf::int32 JK_CabDesignFNFittingInfo::cabdesignfnfittingid() const {
  return cabdesignfnfittingid_;
}
inline void JK_CabDesignFNFittingInfo::set_cabdesignfnfittingid(::google::protobuf::int32 value) {
  set_has_cabdesignfnfittingid();
  cabdesignfnfittingid_ = value;
}

// required int32 ContainerID = 2;
inline bool JK_CabDesignFNFittingInfo::has_containerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_containerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_containerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabDesignFNFittingInfo::clear_containerid() {
  containerid_ = 0;
  clear_has_containerid();
}
inline ::google::protobuf::int32 JK_CabDesignFNFittingInfo::containerid() const {
  return containerid_;
}
inline void JK_CabDesignFNFittingInfo::set_containerid(::google::protobuf::int32 value) {
  set_has_containerid();
  containerid_ = value;
}

// required int32 ContainerGTypeID = 3;
inline bool JK_CabDesignFNFittingInfo::has_containergtypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_containergtypeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_containergtypeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabDesignFNFittingInfo::clear_containergtypeid() {
  containergtypeid_ = 0;
  clear_has_containergtypeid();
}
inline ::google::protobuf::int32 JK_CabDesignFNFittingInfo::containergtypeid() const {
  return containergtypeid_;
}
inline void JK_CabDesignFNFittingInfo::set_containergtypeid(::google::protobuf::int32 value) {
  set_has_containergtypeid();
  containergtypeid_ = value;
}

// required bool IsCanDel = 4;
inline bool JK_CabDesignFNFittingInfo::has_iscandel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_iscandel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_iscandel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabDesignFNFittingInfo::clear_iscandel() {
  iscandel_ = false;
  clear_has_iscandel();
}
inline bool JK_CabDesignFNFittingInfo::iscandel() const {
  return iscandel_;
}
inline void JK_CabDesignFNFittingInfo::set_iscandel(bool value) {
  set_has_iscandel();
  iscandel_ = value;
}

// required string XFormula = 5;
inline bool JK_CabDesignFNFittingInfo::has_xformula() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_xformula() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_xformula() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabDesignFNFittingInfo::clear_xformula() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    xformula_->clear();
  }
  clear_has_xformula();
}
inline const ::std::string& JK_CabDesignFNFittingInfo::xformula() const {
  return *xformula_;
}
inline void JK_CabDesignFNFittingInfo::set_xformula(const ::std::string& value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_CabDesignFNFittingInfo::set_xformula(const char* value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_CabDesignFNFittingInfo::set_xformula(const char* value, size_t size) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignFNFittingInfo::mutable_xformula() {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  return xformula_;
}
inline ::std::string* JK_CabDesignFNFittingInfo::release_xformula() {
  clear_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xformula_;
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignFNFittingInfo::set_allocated_xformula(::std::string* xformula) {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (xformula) {
    set_has_xformula();
    xformula_ = xformula;
  } else {
    clear_has_xformula();
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YFormula = 6;
inline bool JK_CabDesignFNFittingInfo::has_yformula() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_yformula() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_yformula() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabDesignFNFittingInfo::clear_yformula() {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    yformula_->clear();
  }
  clear_has_yformula();
}
inline const ::std::string& JK_CabDesignFNFittingInfo::yformula() const {
  return *yformula_;
}
inline void JK_CabDesignFNFittingInfo::set_yformula(const ::std::string& value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_CabDesignFNFittingInfo::set_yformula(const char* value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_CabDesignFNFittingInfo::set_yformula(const char* value, size_t size) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignFNFittingInfo::mutable_yformula() {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  return yformula_;
}
inline ::std::string* JK_CabDesignFNFittingInfo::release_yformula() {
  clear_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yformula_;
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignFNFittingInfo::set_allocated_yformula(::std::string* yformula) {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (yformula) {
    set_has_yformula();
    yformula_ = yformula;
  } else {
    clear_has_yformula();
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZFormula = 7;
inline bool JK_CabDesignFNFittingInfo::has_zformula() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_zformula() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_zformula() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabDesignFNFittingInfo::clear_zformula() {
  if (zformula_ != &::google::protobuf::internal::kEmptyString) {
    zformula_->clear();
  }
  clear_has_zformula();
}
inline const ::std::string& JK_CabDesignFNFittingInfo::zformula() const {
  return *zformula_;
}
inline void JK_CabDesignFNFittingInfo::set_zformula(const ::std::string& value) {
  set_has_zformula();
  if (zformula_ == &::google::protobuf::internal::kEmptyString) {
    zformula_ = new ::std::string;
  }
  zformula_->assign(value);
}
inline void JK_CabDesignFNFittingInfo::set_zformula(const char* value) {
  set_has_zformula();
  if (zformula_ == &::google::protobuf::internal::kEmptyString) {
    zformula_ = new ::std::string;
  }
  zformula_->assign(value);
}
inline void JK_CabDesignFNFittingInfo::set_zformula(const char* value, size_t size) {
  set_has_zformula();
  if (zformula_ == &::google::protobuf::internal::kEmptyString) {
    zformula_ = new ::std::string;
  }
  zformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignFNFittingInfo::mutable_zformula() {
  set_has_zformula();
  if (zformula_ == &::google::protobuf::internal::kEmptyString) {
    zformula_ = new ::std::string;
  }
  return zformula_;
}
inline ::std::string* JK_CabDesignFNFittingInfo::release_zformula() {
  clear_has_zformula();
  if (zformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zformula_;
    zformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignFNFittingInfo::set_allocated_zformula(::std::string* zformula) {
  if (zformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zformula_;
  }
  if (zformula) {
    set_has_zformula();
    zformula_ = zformula;
  } else {
    clear_has_zformula();
    zformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 XDock = 8;
inline bool JK_CabDesignFNFittingInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabDesignFNFittingInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 JK_CabDesignFNFittingInfo::xdock() const {
  return xdock_;
}
inline void JK_CabDesignFNFittingInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 9;
inline bool JK_CabDesignFNFittingInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabDesignFNFittingInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 JK_CabDesignFNFittingInfo::ydock() const {
  return ydock_;
}
inline void JK_CabDesignFNFittingInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 10;
inline bool JK_CabDesignFNFittingInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabDesignFNFittingInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 JK_CabDesignFNFittingInfo::zdock() const {
  return zdock_;
}
inline void JK_CabDesignFNFittingInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required string XOffsetFormula = 11;
inline bool JK_CabDesignFNFittingInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_CabDesignFNFittingInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_CabDesignFNFittingInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_CabDesignFNFittingInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabDesignFNFittingInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabDesignFNFittingInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignFNFittingInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_CabDesignFNFittingInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignFNFittingInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 12;
inline bool JK_CabDesignFNFittingInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_CabDesignFNFittingInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_CabDesignFNFittingInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_CabDesignFNFittingInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabDesignFNFittingInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabDesignFNFittingInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignFNFittingInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_CabDesignFNFittingInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignFNFittingInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 13;
inline bool JK_CabDesignFNFittingInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_CabDesignFNFittingInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_CabDesignFNFittingInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_CabDesignFNFittingInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabDesignFNFittingInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabDesignFNFittingInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignFNFittingInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_CabDesignFNFittingInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignFNFittingInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 14;
inline bool JK_CabDesignFNFittingInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_CabDesignFNFittingInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabDesignFNFittingInfo::vercode() const {
  return vercode_;
}
inline void JK_CabDesignFNFittingInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 15;
inline bool JK_CabDesignFNFittingInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_CabDesignFNFittingInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabDesignFNFittingInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabDesignFNFittingInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required bool IsDel = 16;
inline bool JK_CabDesignFNFittingInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_CabDesignFNFittingInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_CabDesignFNFittingInfo::isdel() const {
  return isdel_;
}
inline void JK_CabDesignFNFittingInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 CreatorID = 17;
inline bool JK_CabDesignFNFittingInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_CabDesignFNFittingInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_CabDesignFNFittingInfo::creatorid() const {
  return creatorid_;
}
inline void JK_CabDesignFNFittingInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 18;
inline bool JK_CabDesignFNFittingInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_CabDesignFNFittingInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_CabDesignFNFittingInfo::updaterid() const {
  return updaterid_;
}
inline void JK_CabDesignFNFittingInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 19;
inline bool JK_CabDesignFNFittingInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_CabDesignFNFittingInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_CabDesignFNFittingInfo::createtime() const {
  return createtime_;
}
inline void JK_CabDesignFNFittingInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 20;
inline bool JK_CabDesignFNFittingInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_CabDesignFNFittingInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_CabDesignFNFittingInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_CabDesignFNFittingInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_CabDesignFNFittingInfo::updatetime() const {
  return updatetime_;
}
inline void JK_CabDesignFNFittingInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_CabDesignFNFittingMapInfo

// required int32 FNFittingID = 1;
inline bool JK_CabDesignFNFittingMapInfo::has_fnfittingid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabDesignFNFittingMapInfo::set_has_fnfittingid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabDesignFNFittingMapInfo::clear_has_fnfittingid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabDesignFNFittingMapInfo::clear_fnfittingid() {
  fnfittingid_ = 0;
  clear_has_fnfittingid();
}
inline ::google::protobuf::int32 JK_CabDesignFNFittingMapInfo::fnfittingid() const {
  return fnfittingid_;
}
inline void JK_CabDesignFNFittingMapInfo::set_fnfittingid(::google::protobuf::int32 value) {
  set_has_fnfittingid();
  fnfittingid_ = value;
}

// required int32 CabDesignFNFittingID = 2;
inline bool JK_CabDesignFNFittingMapInfo::has_cabdesignfnfittingid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabDesignFNFittingMapInfo::set_has_cabdesignfnfittingid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabDesignFNFittingMapInfo::clear_has_cabdesignfnfittingid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabDesignFNFittingMapInfo::clear_cabdesignfnfittingid() {
  cabdesignfnfittingid_ = 0;
  clear_has_cabdesignfnfittingid();
}
inline ::google::protobuf::int32 JK_CabDesignFNFittingMapInfo::cabdesignfnfittingid() const {
  return cabdesignfnfittingid_;
}
inline void JK_CabDesignFNFittingMapInfo::set_cabdesignfnfittingid(::google::protobuf::int32 value) {
  set_has_cabdesignfnfittingid();
  cabdesignfnfittingid_ = value;
}

// required bool IsDefault = 3;
inline bool JK_CabDesignFNFittingMapInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabDesignFNFittingMapInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabDesignFNFittingMapInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabDesignFNFittingMapInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_CabDesignFNFittingMapInfo::isdefault() const {
  return isdefault_;
}
inline void JK_CabDesignFNFittingMapInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int32 FNType = 4;
inline bool JK_CabDesignFNFittingMapInfo::has_fntype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabDesignFNFittingMapInfo::set_has_fntype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabDesignFNFittingMapInfo::clear_has_fntype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabDesignFNFittingMapInfo::clear_fntype() {
  fntype_ = 0;
  clear_has_fntype();
}
inline ::google::protobuf::int32 JK_CabDesignFNFittingMapInfo::fntype() const {
  return fntype_;
}
inline void JK_CabDesignFNFittingMapInfo::set_fntype(::google::protobuf::int32 value) {
  set_has_fntype();
  fntype_ = value;
}

// required int64 VerCode = 5;
inline bool JK_CabDesignFNFittingMapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabDesignFNFittingMapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabDesignFNFittingMapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabDesignFNFittingMapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabDesignFNFittingMapInfo::vercode() const {
  return vercode_;
}
inline void JK_CabDesignFNFittingMapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 6;
inline bool JK_CabDesignFNFittingMapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabDesignFNFittingMapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabDesignFNFittingMapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabDesignFNFittingMapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabDesignFNFittingMapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabDesignFNFittingMapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_CabDesignFootInfo

// required int32 CabDesignID = 1;
inline bool JK_CabDesignFootInfo::has_cabdesignid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabDesignFootInfo::set_has_cabdesignid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabDesignFootInfo::clear_has_cabdesignid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabDesignFootInfo::clear_cabdesignid() {
  cabdesignid_ = 0;
  clear_has_cabdesignid();
}
inline ::google::protobuf::int32 JK_CabDesignFootInfo::cabdesignid() const {
  return cabdesignid_;
}
inline void JK_CabDesignFootInfo::set_cabdesignid(::google::protobuf::int32 value) {
  set_has_cabdesignid();
  cabdesignid_ = value;
}

// required int32 FootID = 2;
inline bool JK_CabDesignFootInfo::has_footid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabDesignFootInfo::set_has_footid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabDesignFootInfo::clear_has_footid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabDesignFootInfo::clear_footid() {
  footid_ = 0;
  clear_has_footid();
}
inline ::google::protobuf::int32 JK_CabDesignFootInfo::footid() const {
  return footid_;
}
inline void JK_CabDesignFootInfo::set_footid(::google::protobuf::int32 value) {
  set_has_footid();
  footid_ = value;
}

// required bool IsDefault = 3;
inline bool JK_CabDesignFootInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabDesignFootInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabDesignFootInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabDesignFootInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_CabDesignFootInfo::isdefault() const {
  return isdefault_;
}
inline void JK_CabDesignFootInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 4;
inline bool JK_CabDesignFootInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabDesignFootInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabDesignFootInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabDesignFootInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabDesignFootInfo::vercode() const {
  return vercode_;
}
inline void JK_CabDesignFootInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_CabDesignFootInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabDesignFootInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabDesignFootInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabDesignFootInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabDesignFootInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabDesignFootInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_CabDesignInfo

// required int32 CabDesignID = 1;
inline bool JK_CabDesignInfo::has_cabdesignid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabDesignInfo::set_has_cabdesignid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabDesignInfo::clear_has_cabdesignid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabDesignInfo::clear_cabdesignid() {
  cabdesignid_ = 0;
  clear_has_cabdesignid();
}
inline ::google::protobuf::int32 JK_CabDesignInfo::cabdesignid() const {
  return cabdesignid_;
}
inline void JK_CabDesignInfo::set_cabdesignid(::google::protobuf::int32 value) {
  set_has_cabdesignid();
  cabdesignid_ = value;
}

// required bool IsDel = 2;
inline bool JK_CabDesignInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabDesignInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabDesignInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabDesignInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_CabDesignInfo::isdel() const {
  return isdel_;
}
inline void JK_CabDesignInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 GroupID = 3;
inline bool JK_CabDesignInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabDesignInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabDesignInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabDesignInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_CabDesignInfo::groupid() const {
  return groupid_;
}
inline void JK_CabDesignInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 CabFunction = 4;
inline bool JK_CabDesignInfo::has_cabfunction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabDesignInfo::set_has_cabfunction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabDesignInfo::clear_has_cabfunction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabDesignInfo::clear_cabfunction() {
  cabfunction_ = 0;
  clear_has_cabfunction();
}
inline ::google::protobuf::int32 JK_CabDesignInfo::cabfunction() const {
  return cabfunction_;
}
inline void JK_CabDesignInfo::set_cabfunction(::google::protobuf::int32 value) {
  set_has_cabfunction();
  cabfunction_ = value;
}

// required int32 CabStructID = 5;
inline bool JK_CabDesignInfo::has_cabstructid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabDesignInfo::set_has_cabstructid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabDesignInfo::clear_has_cabstructid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabDesignInfo::clear_cabstructid() {
  cabstructid_ = 0;
  clear_has_cabstructid();
}
inline ::google::protobuf::int32 JK_CabDesignInfo::cabstructid() const {
  return cabstructid_;
}
inline void JK_CabDesignInfo::set_cabstructid(::google::protobuf::int32 value) {
  set_has_cabstructid();
  cabstructid_ = value;
}

// required int32 PosType = 6;
inline bool JK_CabDesignInfo::has_postype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabDesignInfo::set_has_postype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabDesignInfo::clear_has_postype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabDesignInfo::clear_postype() {
  postype_ = 0;
  clear_has_postype();
}
inline ::google::protobuf::int32 JK_CabDesignInfo::postype() const {
  return postype_;
}
inline void JK_CabDesignInfo::set_postype(::google::protobuf::int32 value) {
  set_has_postype();
  postype_ = value;
}

// required int32 FactoryID = 7;
inline bool JK_CabDesignInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabDesignInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabDesignInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabDesignInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabDesignInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabDesignInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 8;
inline bool JK_CabDesignInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabDesignInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabDesignInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabDesignInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_CabDesignInfo::creatorid() const {
  return creatorid_;
}
inline void JK_CabDesignInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 9;
inline bool JK_CabDesignInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabDesignInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabDesignInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabDesignInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_CabDesignInfo::updaterid() const {
  return updaterid_;
}
inline void JK_CabDesignInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 10;
inline bool JK_CabDesignInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabDesignInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabDesignInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabDesignInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_CabDesignInfo::createtime() const {
  return createtime_;
}
inline void JK_CabDesignInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 11;
inline bool JK_CabDesignInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_CabDesignInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_CabDesignInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_CabDesignInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_CabDesignInfo::updatetime() const {
  return updatetime_;
}
inline void JK_CabDesignInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string CabDesignCode = 12;
inline bool JK_CabDesignInfo::has_cabdesigncode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_CabDesignInfo::set_has_cabdesigncode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_CabDesignInfo::clear_has_cabdesigncode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_CabDesignInfo::clear_cabdesigncode() {
  if (cabdesigncode_ != &::google::protobuf::internal::kEmptyString) {
    cabdesigncode_->clear();
  }
  clear_has_cabdesigncode();
}
inline const ::std::string& JK_CabDesignInfo::cabdesigncode() const {
  return *cabdesigncode_;
}
inline void JK_CabDesignInfo::set_cabdesigncode(const ::std::string& value) {
  set_has_cabdesigncode();
  if (cabdesigncode_ == &::google::protobuf::internal::kEmptyString) {
    cabdesigncode_ = new ::std::string;
  }
  cabdesigncode_->assign(value);
}
inline void JK_CabDesignInfo::set_cabdesigncode(const char* value) {
  set_has_cabdesigncode();
  if (cabdesigncode_ == &::google::protobuf::internal::kEmptyString) {
    cabdesigncode_ = new ::std::string;
  }
  cabdesigncode_->assign(value);
}
inline void JK_CabDesignInfo::set_cabdesigncode(const char* value, size_t size) {
  set_has_cabdesigncode();
  if (cabdesigncode_ == &::google::protobuf::internal::kEmptyString) {
    cabdesigncode_ = new ::std::string;
  }
  cabdesigncode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignInfo::mutable_cabdesigncode() {
  set_has_cabdesigncode();
  if (cabdesigncode_ == &::google::protobuf::internal::kEmptyString) {
    cabdesigncode_ = new ::std::string;
  }
  return cabdesigncode_;
}
inline ::std::string* JK_CabDesignInfo::release_cabdesigncode() {
  clear_has_cabdesigncode();
  if (cabdesigncode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabdesigncode_;
    cabdesigncode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignInfo::set_allocated_cabdesigncode(::std::string* cabdesigncode) {
  if (cabdesigncode_ != &::google::protobuf::internal::kEmptyString) {
    delete cabdesigncode_;
  }
  if (cabdesigncode) {
    set_has_cabdesigncode();
    cabdesigncode_ = cabdesigncode;
  } else {
    clear_has_cabdesigncode();
    cabdesigncode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabDesignName = 13;
inline bool JK_CabDesignInfo::has_cabdesignname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_CabDesignInfo::set_has_cabdesignname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_CabDesignInfo::clear_has_cabdesignname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_CabDesignInfo::clear_cabdesignname() {
  if (cabdesignname_ != &::google::protobuf::internal::kEmptyString) {
    cabdesignname_->clear();
  }
  clear_has_cabdesignname();
}
inline const ::std::string& JK_CabDesignInfo::cabdesignname() const {
  return *cabdesignname_;
}
inline void JK_CabDesignInfo::set_cabdesignname(const ::std::string& value) {
  set_has_cabdesignname();
  if (cabdesignname_ == &::google::protobuf::internal::kEmptyString) {
    cabdesignname_ = new ::std::string;
  }
  cabdesignname_->assign(value);
}
inline void JK_CabDesignInfo::set_cabdesignname(const char* value) {
  set_has_cabdesignname();
  if (cabdesignname_ == &::google::protobuf::internal::kEmptyString) {
    cabdesignname_ = new ::std::string;
  }
  cabdesignname_->assign(value);
}
inline void JK_CabDesignInfo::set_cabdesignname(const char* value, size_t size) {
  set_has_cabdesignname();
  if (cabdesignname_ == &::google::protobuf::internal::kEmptyString) {
    cabdesignname_ = new ::std::string;
  }
  cabdesignname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignInfo::mutable_cabdesignname() {
  set_has_cabdesignname();
  if (cabdesignname_ == &::google::protobuf::internal::kEmptyString) {
    cabdesignname_ = new ::std::string;
  }
  return cabdesignname_;
}
inline ::std::string* JK_CabDesignInfo::release_cabdesignname() {
  clear_has_cabdesignname();
  if (cabdesignname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabdesignname_;
    cabdesignname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignInfo::set_allocated_cabdesignname(::std::string* cabdesignname) {
  if (cabdesignname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabdesignname_;
  }
  if (cabdesignname) {
    set_has_cabdesignname();
    cabdesignname_ = cabdesignname;
  } else {
    clear_has_cabdesignname();
    cabdesignname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabDesignMemo = 14;
inline bool JK_CabDesignInfo::has_cabdesignmemo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_CabDesignInfo::set_has_cabdesignmemo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_CabDesignInfo::clear_has_cabdesignmemo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_CabDesignInfo::clear_cabdesignmemo() {
  if (cabdesignmemo_ != &::google::protobuf::internal::kEmptyString) {
    cabdesignmemo_->clear();
  }
  clear_has_cabdesignmemo();
}
inline const ::std::string& JK_CabDesignInfo::cabdesignmemo() const {
  return *cabdesignmemo_;
}
inline void JK_CabDesignInfo::set_cabdesignmemo(const ::std::string& value) {
  set_has_cabdesignmemo();
  if (cabdesignmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabdesignmemo_ = new ::std::string;
  }
  cabdesignmemo_->assign(value);
}
inline void JK_CabDesignInfo::set_cabdesignmemo(const char* value) {
  set_has_cabdesignmemo();
  if (cabdesignmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabdesignmemo_ = new ::std::string;
  }
  cabdesignmemo_->assign(value);
}
inline void JK_CabDesignInfo::set_cabdesignmemo(const char* value, size_t size) {
  set_has_cabdesignmemo();
  if (cabdesignmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabdesignmemo_ = new ::std::string;
  }
  cabdesignmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabDesignInfo::mutable_cabdesignmemo() {
  set_has_cabdesignmemo();
  if (cabdesignmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabdesignmemo_ = new ::std::string;
  }
  return cabdesignmemo_;
}
inline ::std::string* JK_CabDesignInfo::release_cabdesignmemo() {
  clear_has_cabdesignmemo();
  if (cabdesignmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabdesignmemo_;
    cabdesignmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabDesignInfo::set_allocated_cabdesignmemo(::std::string* cabdesignmemo) {
  if (cabdesignmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete cabdesignmemo_;
  }
  if (cabdesignmemo) {
    set_has_cabdesignmemo();
    cabdesignmemo_ = cabdesignmemo;
  } else {
    clear_has_cabdesignmemo();
    cabdesignmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 15;
inline bool JK_CabDesignInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_CabDesignInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_CabDesignInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_CabDesignInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabDesignInfo::vercode() const {
  return vercode_;
}
inline void JK_CabDesignInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 PhotoID = 16;
inline bool JK_CabDesignInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_CabDesignInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_CabDesignInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_CabDesignInfo::clear_photoid() {
  photoid_ = 0;
  clear_has_photoid();
}
inline ::google::protobuf::int32 JK_CabDesignInfo::photoid() const {
  return photoid_;
}
inline void JK_CabDesignInfo::set_photoid(::google::protobuf::int32 value) {
  set_has_photoid();
  photoid_ = value;
}

// required bool IsActive = 17;
inline bool JK_CabDesignInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_CabDesignInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_CabDesignInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_CabDesignInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_CabDesignInfo::isactive() const {
  return isactive_;
}
inline void JK_CabDesignInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// -------------------------------------------------------------------

// JK_CabDesignMatInfo

// required int32 CabDesignID = 1;
inline bool JK_CabDesignMatInfo::has_cabdesignid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabDesignMatInfo::set_has_cabdesignid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabDesignMatInfo::clear_has_cabdesignid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabDesignMatInfo::clear_cabdesignid() {
  cabdesignid_ = 0;
  clear_has_cabdesignid();
}
inline ::google::protobuf::int32 JK_CabDesignMatInfo::cabdesignid() const {
  return cabdesignid_;
}
inline void JK_CabDesignMatInfo::set_cabdesignid(::google::protobuf::int32 value) {
  set_has_cabdesignid();
  cabdesignid_ = value;
}

// required int32 CabMatPlanID = 2;
inline bool JK_CabDesignMatInfo::has_cabmatplanid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabDesignMatInfo::set_has_cabmatplanid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabDesignMatInfo::clear_has_cabmatplanid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabDesignMatInfo::clear_cabmatplanid() {
  cabmatplanid_ = 0;
  clear_has_cabmatplanid();
}
inline ::google::protobuf::int32 JK_CabDesignMatInfo::cabmatplanid() const {
  return cabmatplanid_;
}
inline void JK_CabDesignMatInfo::set_cabmatplanid(::google::protobuf::int32 value) {
  set_has_cabmatplanid();
  cabmatplanid_ = value;
}

// required bool IsDefault = 3;
inline bool JK_CabDesignMatInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabDesignMatInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabDesignMatInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabDesignMatInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_CabDesignMatInfo::isdefault() const {
  return isdefault_;
}
inline void JK_CabDesignMatInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 4;
inline bool JK_CabDesignMatInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabDesignMatInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabDesignMatInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabDesignMatInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabDesignMatInfo::vercode() const {
  return vercode_;
}
inline void JK_CabDesignMatInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_CabDesignMatInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabDesignMatInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabDesignMatInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabDesignMatInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabDesignMatInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabDesignMatInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_CabMatPlanInfo

// required int32 CabMatPlanID = 1;
inline bool JK_CabMatPlanInfo::has_cabmatplanid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_cabmatplanid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabMatPlanInfo::clear_has_cabmatplanid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabMatPlanInfo::clear_cabmatplanid() {
  cabmatplanid_ = 0;
  clear_has_cabmatplanid();
}
inline ::google::protobuf::int32 JK_CabMatPlanInfo::cabmatplanid() const {
  return cabmatplanid_;
}
inline void JK_CabMatPlanInfo::set_cabmatplanid(::google::protobuf::int32 value) {
  set_has_cabmatplanid();
  cabmatplanid_ = value;
}

// required int32 GroupID = 2;
inline bool JK_CabMatPlanInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabMatPlanInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabMatPlanInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_CabMatPlanInfo::groupid() const {
  return groupid_;
}
inline void JK_CabMatPlanInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required bool IsDel = 3;
inline bool JK_CabMatPlanInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabMatPlanInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabMatPlanInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_CabMatPlanInfo::isdel() const {
  return isdel_;
}
inline void JK_CabMatPlanInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 FactoryID = 4;
inline bool JK_CabMatPlanInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabMatPlanInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabMatPlanInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabMatPlanInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabMatPlanInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 MatGType = 5;
inline bool JK_CabMatPlanInfo::has_matgtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_matgtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabMatPlanInfo::clear_has_matgtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabMatPlanInfo::clear_matgtype() {
  matgtype_ = 0;
  clear_has_matgtype();
}
inline ::google::protobuf::int32 JK_CabMatPlanInfo::matgtype() const {
  return matgtype_;
}
inline void JK_CabMatPlanInfo::set_matgtype(::google::protobuf::int32 value) {
  set_has_matgtype();
  matgtype_ = value;
}

// required int32 MatID = 6;
inline bool JK_CabMatPlanInfo::has_matid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_matid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabMatPlanInfo::clear_has_matid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabMatPlanInfo::clear_matid() {
  matid_ = 0;
  clear_has_matid();
}
inline ::google::protobuf::int32 JK_CabMatPlanInfo::matid() const {
  return matid_;
}
inline void JK_CabMatPlanInfo::set_matid(::google::protobuf::int32 value) {
  set_has_matid();
  matid_ = value;
}

// required int32 CreatorID = 7;
inline bool JK_CabMatPlanInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabMatPlanInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabMatPlanInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_CabMatPlanInfo::creatorid() const {
  return creatorid_;
}
inline void JK_CabMatPlanInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 8;
inline bool JK_CabMatPlanInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabMatPlanInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabMatPlanInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_CabMatPlanInfo::updaterid() const {
  return updaterid_;
}
inline void JK_CabMatPlanInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 9;
inline bool JK_CabMatPlanInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabMatPlanInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabMatPlanInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_CabMatPlanInfo::createtime() const {
  return createtime_;
}
inline void JK_CabMatPlanInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 10;
inline bool JK_CabMatPlanInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabMatPlanInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabMatPlanInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_CabMatPlanInfo::updatetime() const {
  return updatetime_;
}
inline void JK_CabMatPlanInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string CabMatPlanCode = 11;
inline bool JK_CabMatPlanInfo::has_cabmatplancode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_cabmatplancode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_CabMatPlanInfo::clear_has_cabmatplancode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_CabMatPlanInfo::clear_cabmatplancode() {
  if (cabmatplancode_ != &::google::protobuf::internal::kEmptyString) {
    cabmatplancode_->clear();
  }
  clear_has_cabmatplancode();
}
inline const ::std::string& JK_CabMatPlanInfo::cabmatplancode() const {
  return *cabmatplancode_;
}
inline void JK_CabMatPlanInfo::set_cabmatplancode(const ::std::string& value) {
  set_has_cabmatplancode();
  if (cabmatplancode_ == &::google::protobuf::internal::kEmptyString) {
    cabmatplancode_ = new ::std::string;
  }
  cabmatplancode_->assign(value);
}
inline void JK_CabMatPlanInfo::set_cabmatplancode(const char* value) {
  set_has_cabmatplancode();
  if (cabmatplancode_ == &::google::protobuf::internal::kEmptyString) {
    cabmatplancode_ = new ::std::string;
  }
  cabmatplancode_->assign(value);
}
inline void JK_CabMatPlanInfo::set_cabmatplancode(const char* value, size_t size) {
  set_has_cabmatplancode();
  if (cabmatplancode_ == &::google::protobuf::internal::kEmptyString) {
    cabmatplancode_ = new ::std::string;
  }
  cabmatplancode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabMatPlanInfo::mutable_cabmatplancode() {
  set_has_cabmatplancode();
  if (cabmatplancode_ == &::google::protobuf::internal::kEmptyString) {
    cabmatplancode_ = new ::std::string;
  }
  return cabmatplancode_;
}
inline ::std::string* JK_CabMatPlanInfo::release_cabmatplancode() {
  clear_has_cabmatplancode();
  if (cabmatplancode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabmatplancode_;
    cabmatplancode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabMatPlanInfo::set_allocated_cabmatplancode(::std::string* cabmatplancode) {
  if (cabmatplancode_ != &::google::protobuf::internal::kEmptyString) {
    delete cabmatplancode_;
  }
  if (cabmatplancode) {
    set_has_cabmatplancode();
    cabmatplancode_ = cabmatplancode;
  } else {
    clear_has_cabmatplancode();
    cabmatplancode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabMatPlanName = 12;
inline bool JK_CabMatPlanInfo::has_cabmatplanname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_cabmatplanname() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_CabMatPlanInfo::clear_has_cabmatplanname() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_CabMatPlanInfo::clear_cabmatplanname() {
  if (cabmatplanname_ != &::google::protobuf::internal::kEmptyString) {
    cabmatplanname_->clear();
  }
  clear_has_cabmatplanname();
}
inline const ::std::string& JK_CabMatPlanInfo::cabmatplanname() const {
  return *cabmatplanname_;
}
inline void JK_CabMatPlanInfo::set_cabmatplanname(const ::std::string& value) {
  set_has_cabmatplanname();
  if (cabmatplanname_ == &::google::protobuf::internal::kEmptyString) {
    cabmatplanname_ = new ::std::string;
  }
  cabmatplanname_->assign(value);
}
inline void JK_CabMatPlanInfo::set_cabmatplanname(const char* value) {
  set_has_cabmatplanname();
  if (cabmatplanname_ == &::google::protobuf::internal::kEmptyString) {
    cabmatplanname_ = new ::std::string;
  }
  cabmatplanname_->assign(value);
}
inline void JK_CabMatPlanInfo::set_cabmatplanname(const char* value, size_t size) {
  set_has_cabmatplanname();
  if (cabmatplanname_ == &::google::protobuf::internal::kEmptyString) {
    cabmatplanname_ = new ::std::string;
  }
  cabmatplanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabMatPlanInfo::mutable_cabmatplanname() {
  set_has_cabmatplanname();
  if (cabmatplanname_ == &::google::protobuf::internal::kEmptyString) {
    cabmatplanname_ = new ::std::string;
  }
  return cabmatplanname_;
}
inline ::std::string* JK_CabMatPlanInfo::release_cabmatplanname() {
  clear_has_cabmatplanname();
  if (cabmatplanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabmatplanname_;
    cabmatplanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabMatPlanInfo::set_allocated_cabmatplanname(::std::string* cabmatplanname) {
  if (cabmatplanname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabmatplanname_;
  }
  if (cabmatplanname) {
    set_has_cabmatplanname();
    cabmatplanname_ = cabmatplanname;
  } else {
    clear_has_cabmatplanname();
    cabmatplanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabMatPlanMemo = 13;
inline bool JK_CabMatPlanInfo::has_cabmatplanmemo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_cabmatplanmemo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_CabMatPlanInfo::clear_has_cabmatplanmemo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_CabMatPlanInfo::clear_cabmatplanmemo() {
  if (cabmatplanmemo_ != &::google::protobuf::internal::kEmptyString) {
    cabmatplanmemo_->clear();
  }
  clear_has_cabmatplanmemo();
}
inline const ::std::string& JK_CabMatPlanInfo::cabmatplanmemo() const {
  return *cabmatplanmemo_;
}
inline void JK_CabMatPlanInfo::set_cabmatplanmemo(const ::std::string& value) {
  set_has_cabmatplanmemo();
  if (cabmatplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabmatplanmemo_ = new ::std::string;
  }
  cabmatplanmemo_->assign(value);
}
inline void JK_CabMatPlanInfo::set_cabmatplanmemo(const char* value) {
  set_has_cabmatplanmemo();
  if (cabmatplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabmatplanmemo_ = new ::std::string;
  }
  cabmatplanmemo_->assign(value);
}
inline void JK_CabMatPlanInfo::set_cabmatplanmemo(const char* value, size_t size) {
  set_has_cabmatplanmemo();
  if (cabmatplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabmatplanmemo_ = new ::std::string;
  }
  cabmatplanmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabMatPlanInfo::mutable_cabmatplanmemo() {
  set_has_cabmatplanmemo();
  if (cabmatplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabmatplanmemo_ = new ::std::string;
  }
  return cabmatplanmemo_;
}
inline ::std::string* JK_CabMatPlanInfo::release_cabmatplanmemo() {
  clear_has_cabmatplanmemo();
  if (cabmatplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabmatplanmemo_;
    cabmatplanmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabMatPlanInfo::set_allocated_cabmatplanmemo(::std::string* cabmatplanmemo) {
  if (cabmatplanmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete cabmatplanmemo_;
  }
  if (cabmatplanmemo) {
    set_has_cabmatplanmemo();
    cabmatplanmemo_ = cabmatplanmemo;
  } else {
    clear_has_cabmatplanmemo();
    cabmatplanmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 14;
inline bool JK_CabMatPlanInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_CabMatPlanInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_CabMatPlanInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_CabMatPlanInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabMatPlanInfo::vercode() const {
  return vercode_;
}
inline void JK_CabMatPlanInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_CabStructBoardGapInfo

// required int32 CabStructBoardGapID = 1;
inline bool JK_CabStructBoardGapInfo::has_cabstructboardgapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_cabstructboardgapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabStructBoardGapInfo::clear_has_cabstructboardgapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabStructBoardGapInfo::clear_cabstructboardgapid() {
  cabstructboardgapid_ = 0;
  clear_has_cabstructboardgapid();
}
inline ::google::protobuf::int32 JK_CabStructBoardGapInfo::cabstructboardgapid() const {
  return cabstructboardgapid_;
}
inline void JK_CabStructBoardGapInfo::set_cabstructboardgapid(::google::protobuf::int32 value) {
  set_has_cabstructboardgapid();
  cabstructboardgapid_ = value;
}

// required int32 CabStructBoardID = 2;
inline bool JK_CabStructBoardGapInfo::has_cabstructboardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_cabstructboardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabStructBoardGapInfo::clear_has_cabstructboardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabStructBoardGapInfo::clear_cabstructboardid() {
  cabstructboardid_ = 0;
  clear_has_cabstructboardid();
}
inline ::google::protobuf::int32 JK_CabStructBoardGapInfo::cabstructboardid() const {
  return cabstructboardid_;
}
inline void JK_CabStructBoardGapInfo::set_cabstructboardid(::google::protobuf::int32 value) {
  set_has_cabstructboardid();
  cabstructboardid_ = value;
}

// required int32 GapPos = 3;
inline bool JK_CabStructBoardGapInfo::has_gappos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_gappos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabStructBoardGapInfo::clear_has_gappos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabStructBoardGapInfo::clear_gappos() {
  gappos_ = 0;
  clear_has_gappos();
}
inline ::google::protobuf::int32 JK_CabStructBoardGapInfo::gappos() const {
  return gappos_;
}
inline void JK_CabStructBoardGapInfo::set_gappos(::google::protobuf::int32 value) {
  set_has_gappos();
  gappos_ = value;
}

// required int32 GapIndex = 4;
inline bool JK_CabStructBoardGapInfo::has_gapindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_gapindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabStructBoardGapInfo::clear_has_gapindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabStructBoardGapInfo::clear_gapindex() {
  gapindex_ = 0;
  clear_has_gapindex();
}
inline ::google::protobuf::int32 JK_CabStructBoardGapInfo::gapindex() const {
  return gapindex_;
}
inline void JK_CabStructBoardGapInfo::set_gapindex(::google::protobuf::int32 value) {
  set_has_gapindex();
  gapindex_ = value;
}

// required int32 GapType = 5;
inline bool JK_CabStructBoardGapInfo::has_gaptype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_gaptype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabStructBoardGapInfo::clear_has_gaptype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabStructBoardGapInfo::clear_gaptype() {
  gaptype_ = 0;
  clear_has_gaptype();
}
inline ::google::protobuf::int32 JK_CabStructBoardGapInfo::gaptype() const {
  return gaptype_;
}
inline void JK_CabStructBoardGapInfo::set_gaptype(::google::protobuf::int32 value) {
  set_has_gaptype();
  gaptype_ = value;
}

// required int32 GapShape = 6;
inline bool JK_CabStructBoardGapInfo::has_gapshape() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_gapshape() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabStructBoardGapInfo::clear_has_gapshape() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabStructBoardGapInfo::clear_gapshape() {
  gapshape_ = 0;
  clear_has_gapshape();
}
inline ::google::protobuf::int32 JK_CabStructBoardGapInfo::gapshape() const {
  return gapshape_;
}
inline void JK_CabStructBoardGapInfo::set_gapshape(::google::protobuf::int32 value) {
  set_has_gapshape();
  gapshape_ = value;
}

// required string XLenFormula = 7;
inline bool JK_CabStructBoardGapInfo::has_xlenformula() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_xlenformula() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabStructBoardGapInfo::clear_has_xlenformula() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabStructBoardGapInfo::clear_xlenformula() {
  if (xlenformula_ != &::google::protobuf::internal::kEmptyString) {
    xlenformula_->clear();
  }
  clear_has_xlenformula();
}
inline const ::std::string& JK_CabStructBoardGapInfo::xlenformula() const {
  return *xlenformula_;
}
inline void JK_CabStructBoardGapInfo::set_xlenformula(const ::std::string& value) {
  set_has_xlenformula();
  if (xlenformula_ == &::google::protobuf::internal::kEmptyString) {
    xlenformula_ = new ::std::string;
  }
  xlenformula_->assign(value);
}
inline void JK_CabStructBoardGapInfo::set_xlenformula(const char* value) {
  set_has_xlenformula();
  if (xlenformula_ == &::google::protobuf::internal::kEmptyString) {
    xlenformula_ = new ::std::string;
  }
  xlenformula_->assign(value);
}
inline void JK_CabStructBoardGapInfo::set_xlenformula(const char* value, size_t size) {
  set_has_xlenformula();
  if (xlenformula_ == &::google::protobuf::internal::kEmptyString) {
    xlenformula_ = new ::std::string;
  }
  xlenformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructBoardGapInfo::mutable_xlenformula() {
  set_has_xlenformula();
  if (xlenformula_ == &::google::protobuf::internal::kEmptyString) {
    xlenformula_ = new ::std::string;
  }
  return xlenformula_;
}
inline ::std::string* JK_CabStructBoardGapInfo::release_xlenformula() {
  clear_has_xlenformula();
  if (xlenformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xlenformula_;
    xlenformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructBoardGapInfo::set_allocated_xlenformula(::std::string* xlenformula) {
  if (xlenformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xlenformula_;
  }
  if (xlenformula) {
    set_has_xlenformula();
    xlenformula_ = xlenformula;
  } else {
    clear_has_xlenformula();
    xlenformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YLenFormula = 8;
inline bool JK_CabStructBoardGapInfo::has_ylenformula() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_ylenformula() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabStructBoardGapInfo::clear_has_ylenformula() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabStructBoardGapInfo::clear_ylenformula() {
  if (ylenformula_ != &::google::protobuf::internal::kEmptyString) {
    ylenformula_->clear();
  }
  clear_has_ylenformula();
}
inline const ::std::string& JK_CabStructBoardGapInfo::ylenformula() const {
  return *ylenformula_;
}
inline void JK_CabStructBoardGapInfo::set_ylenformula(const ::std::string& value) {
  set_has_ylenformula();
  if (ylenformula_ == &::google::protobuf::internal::kEmptyString) {
    ylenformula_ = new ::std::string;
  }
  ylenformula_->assign(value);
}
inline void JK_CabStructBoardGapInfo::set_ylenformula(const char* value) {
  set_has_ylenformula();
  if (ylenformula_ == &::google::protobuf::internal::kEmptyString) {
    ylenformula_ = new ::std::string;
  }
  ylenformula_->assign(value);
}
inline void JK_CabStructBoardGapInfo::set_ylenformula(const char* value, size_t size) {
  set_has_ylenformula();
  if (ylenformula_ == &::google::protobuf::internal::kEmptyString) {
    ylenformula_ = new ::std::string;
  }
  ylenformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructBoardGapInfo::mutable_ylenformula() {
  set_has_ylenformula();
  if (ylenformula_ == &::google::protobuf::internal::kEmptyString) {
    ylenformula_ = new ::std::string;
  }
  return ylenformula_;
}
inline ::std::string* JK_CabStructBoardGapInfo::release_ylenformula() {
  clear_has_ylenformula();
  if (ylenformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ylenformula_;
    ylenformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructBoardGapInfo::set_allocated_ylenformula(::std::string* ylenformula) {
  if (ylenformula_ != &::google::protobuf::internal::kEmptyString) {
    delete ylenformula_;
  }
  if (ylenformula) {
    set_has_ylenformula();
    ylenformula_ = ylenformula;
  } else {
    clear_has_ylenformula();
    ylenformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string XOffsetFormula = 9;
inline bool JK_CabStructBoardGapInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabStructBoardGapInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabStructBoardGapInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_CabStructBoardGapInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_CabStructBoardGapInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabStructBoardGapInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabStructBoardGapInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructBoardGapInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_CabStructBoardGapInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructBoardGapInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 10;
inline bool JK_CabStructBoardGapInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabStructBoardGapInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabStructBoardGapInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_CabStructBoardGapInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_CabStructBoardGapInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabStructBoardGapInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabStructBoardGapInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructBoardGapInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_CabStructBoardGapInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructBoardGapInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 11;
inline bool JK_CabStructBoardGapInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_CabStructBoardGapInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_CabStructBoardGapInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_CabStructBoardGapInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_CabStructBoardGapInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabStructBoardGapInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabStructBoardGapInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructBoardGapInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_CabStructBoardGapInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructBoardGapInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 FactoryID = 12;
inline bool JK_CabStructBoardGapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_CabStructBoardGapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_CabStructBoardGapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabStructBoardGapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabStructBoardGapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 13;
inline bool JK_CabStructBoardGapInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_CabStructBoardGapInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_CabStructBoardGapInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_CabStructBoardGapInfo::creatorid() const {
  return creatorid_;
}
inline void JK_CabStructBoardGapInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 14;
inline bool JK_CabStructBoardGapInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_CabStructBoardGapInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_CabStructBoardGapInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_CabStructBoardGapInfo::updaterid() const {
  return updaterid_;
}
inline void JK_CabStructBoardGapInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 15;
inline bool JK_CabStructBoardGapInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_CabStructBoardGapInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_CabStructBoardGapInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_CabStructBoardGapInfo::createtime() const {
  return createtime_;
}
inline void JK_CabStructBoardGapInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 16;
inline bool JK_CabStructBoardGapInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_CabStructBoardGapInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_CabStructBoardGapInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_CabStructBoardGapInfo::updatetime() const {
  return updatetime_;
}
inline void JK_CabStructBoardGapInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required int64 VerCode = 17;
inline bool JK_CabStructBoardGapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_CabStructBoardGapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_CabStructBoardGapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_CabStructBoardGapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabStructBoardGapInfo::vercode() const {
  return vercode_;
}
inline void JK_CabStructBoardGapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_CabStructBoardInfo

// required int32 CabStructBoardID = 1;
inline bool JK_CabStructBoardInfo::has_cabstructboardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_cabstructboardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabStructBoardInfo::clear_has_cabstructboardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabStructBoardInfo::clear_cabstructboardid() {
  cabstructboardid_ = 0;
  clear_has_cabstructboardid();
}
inline ::google::protobuf::int32 JK_CabStructBoardInfo::cabstructboardid() const {
  return cabstructboardid_;
}
inline void JK_CabStructBoardInfo::set_cabstructboardid(::google::protobuf::int32 value) {
  set_has_cabstructboardid();
  cabstructboardid_ = value;
}

// required int32 CabStructID = 2;
inline bool JK_CabStructBoardInfo::has_cabstructid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_cabstructid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabStructBoardInfo::clear_has_cabstructid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabStructBoardInfo::clear_cabstructid() {
  cabstructid_ = 0;
  clear_has_cabstructid();
}
inline ::google::protobuf::int32 JK_CabStructBoardInfo::cabstructid() const {
  return cabstructid_;
}
inline void JK_CabStructBoardInfo::set_cabstructid(::google::protobuf::int32 value) {
  set_has_cabstructid();
  cabstructid_ = value;
}

// required bool IsDel = 3;
inline bool JK_CabStructBoardInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabStructBoardInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabStructBoardInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_CabStructBoardInfo::isdel() const {
  return isdel_;
}
inline void JK_CabStructBoardInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsUseMain = 4;
inline bool JK_CabStructBoardInfo::has_isusemain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_isusemain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabStructBoardInfo::clear_has_isusemain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabStructBoardInfo::clear_isusemain() {
  isusemain_ = false;
  clear_has_isusemain();
}
inline bool JK_CabStructBoardInfo::isusemain() const {
  return isusemain_;
}
inline void JK_CabStructBoardInfo::set_isusemain(bool value) {
  set_has_isusemain();
  isusemain_ = value;
}

// required bool IsCanRepeat = 5;
inline bool JK_CabStructBoardInfo::has_iscanrepeat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_iscanrepeat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabStructBoardInfo::clear_has_iscanrepeat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabStructBoardInfo::clear_iscanrepeat() {
  iscanrepeat_ = false;
  clear_has_iscanrepeat();
}
inline bool JK_CabStructBoardInfo::iscanrepeat() const {
  return iscanrepeat_;
}
inline void JK_CabStructBoardInfo::set_iscanrepeat(bool value) {
  set_has_iscanrepeat();
  iscanrepeat_ = value;
}

// required bool IsCanDel = 6;
inline bool JK_CabStructBoardInfo::has_iscandel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_iscandel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabStructBoardInfo::clear_has_iscandel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabStructBoardInfo::clear_iscandel() {
  iscandel_ = false;
  clear_has_iscandel();
}
inline bool JK_CabStructBoardInfo::iscandel() const {
  return iscandel_;
}
inline void JK_CabStructBoardInfo::set_iscandel(bool value) {
  set_has_iscandel();
  iscandel_ = value;
}

// required string XFormula = 7;
inline bool JK_CabStructBoardInfo::has_xformula() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_xformula() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabStructBoardInfo::clear_has_xformula() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabStructBoardInfo::clear_xformula() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    xformula_->clear();
  }
  clear_has_xformula();
}
inline const ::std::string& JK_CabStructBoardInfo::xformula() const {
  return *xformula_;
}
inline void JK_CabStructBoardInfo::set_xformula(const ::std::string& value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_CabStructBoardInfo::set_xformula(const char* value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_CabStructBoardInfo::set_xformula(const char* value, size_t size) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructBoardInfo::mutable_xformula() {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  return xformula_;
}
inline ::std::string* JK_CabStructBoardInfo::release_xformula() {
  clear_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xformula_;
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructBoardInfo::set_allocated_xformula(::std::string* xformula) {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (xformula) {
    set_has_xformula();
    xformula_ = xformula;
  } else {
    clear_has_xformula();
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YFormula = 8;
inline bool JK_CabStructBoardInfo::has_yformula() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_yformula() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabStructBoardInfo::clear_has_yformula() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabStructBoardInfo::clear_yformula() {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    yformula_->clear();
  }
  clear_has_yformula();
}
inline const ::std::string& JK_CabStructBoardInfo::yformula() const {
  return *yformula_;
}
inline void JK_CabStructBoardInfo::set_yformula(const ::std::string& value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_CabStructBoardInfo::set_yformula(const char* value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_CabStructBoardInfo::set_yformula(const char* value, size_t size) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructBoardInfo::mutable_yformula() {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  return yformula_;
}
inline ::std::string* JK_CabStructBoardInfo::release_yformula() {
  clear_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yformula_;
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructBoardInfo::set_allocated_yformula(::std::string* yformula) {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (yformula) {
    set_has_yformula();
    yformula_ = yformula;
  } else {
    clear_has_yformula();
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double ArcX = 9;
inline bool JK_CabStructBoardInfo::has_arcx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_arcx() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabStructBoardInfo::clear_has_arcx() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabStructBoardInfo::clear_arcx() {
  arcx_ = 0;
  clear_has_arcx();
}
inline double JK_CabStructBoardInfo::arcx() const {
  return arcx_;
}
inline void JK_CabStructBoardInfo::set_arcx(double value) {
  set_has_arcx();
  arcx_ = value;
}

// required double ArcY = 10;
inline bool JK_CabStructBoardInfo::has_arcy() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_arcy() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabStructBoardInfo::clear_has_arcy() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabStructBoardInfo::clear_arcy() {
  arcy_ = 0;
  clear_has_arcy();
}
inline double JK_CabStructBoardInfo::arcy() const {
  return arcy_;
}
inline void JK_CabStructBoardInfo::set_arcy(double value) {
  set_has_arcy();
  arcy_ = value;
}

// required double ArcZ = 11;
inline bool JK_CabStructBoardInfo::has_arcz() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_arcz() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_CabStructBoardInfo::clear_has_arcz() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_CabStructBoardInfo::clear_arcz() {
  arcz_ = 0;
  clear_has_arcz();
}
inline double JK_CabStructBoardInfo::arcz() const {
  return arcz_;
}
inline void JK_CabStructBoardInfo::set_arcz(double value) {
  set_has_arcz();
  arcz_ = value;
}

// required int32 XDock = 12;
inline bool JK_CabStructBoardInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_CabStructBoardInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_CabStructBoardInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 JK_CabStructBoardInfo::xdock() const {
  return xdock_;
}
inline void JK_CabStructBoardInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 13;
inline bool JK_CabStructBoardInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_CabStructBoardInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_CabStructBoardInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 JK_CabStructBoardInfo::ydock() const {
  return ydock_;
}
inline void JK_CabStructBoardInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 14;
inline bool JK_CabStructBoardInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_CabStructBoardInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_CabStructBoardInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 JK_CabStructBoardInfo::zdock() const {
  return zdock_;
}
inline void JK_CabStructBoardInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required string XOffsetFormula = 15;
inline bool JK_CabStructBoardInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_CabStructBoardInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_CabStructBoardInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_CabStructBoardInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_CabStructBoardInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabStructBoardInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabStructBoardInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructBoardInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_CabStructBoardInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructBoardInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 16;
inline bool JK_CabStructBoardInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_CabStructBoardInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_CabStructBoardInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_CabStructBoardInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_CabStructBoardInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabStructBoardInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabStructBoardInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructBoardInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_CabStructBoardInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructBoardInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 17;
inline bool JK_CabStructBoardInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_CabStructBoardInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_CabStructBoardInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_CabStructBoardInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_CabStructBoardInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabStructBoardInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabStructBoardInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructBoardInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_CabStructBoardInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructBoardInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 FactoryID = 18;
inline bool JK_CabStructBoardInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_CabStructBoardInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_CabStructBoardInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabStructBoardInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabStructBoardInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 19;
inline bool JK_CabStructBoardInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_CabStructBoardInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_CabStructBoardInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_CabStructBoardInfo::creatorid() const {
  return creatorid_;
}
inline void JK_CabStructBoardInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 20;
inline bool JK_CabStructBoardInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_CabStructBoardInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_CabStructBoardInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_CabStructBoardInfo::updaterid() const {
  return updaterid_;
}
inline void JK_CabStructBoardInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 21;
inline bool JK_CabStructBoardInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_CabStructBoardInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_CabStructBoardInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_CabStructBoardInfo::createtime() const {
  return createtime_;
}
inline void JK_CabStructBoardInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 22;
inline bool JK_CabStructBoardInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_CabStructBoardInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_CabStructBoardInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_CabStructBoardInfo::updatetime() const {
  return updatetime_;
}
inline void JK_CabStructBoardInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string CabStructBoardName = 23;
inline bool JK_CabStructBoardInfo::has_cabstructboardname() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_cabstructboardname() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_CabStructBoardInfo::clear_has_cabstructboardname() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_CabStructBoardInfo::clear_cabstructboardname() {
  if (cabstructboardname_ != &::google::protobuf::internal::kEmptyString) {
    cabstructboardname_->clear();
  }
  clear_has_cabstructboardname();
}
inline const ::std::string& JK_CabStructBoardInfo::cabstructboardname() const {
  return *cabstructboardname_;
}
inline void JK_CabStructBoardInfo::set_cabstructboardname(const ::std::string& value) {
  set_has_cabstructboardname();
  if (cabstructboardname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructboardname_ = new ::std::string;
  }
  cabstructboardname_->assign(value);
}
inline void JK_CabStructBoardInfo::set_cabstructboardname(const char* value) {
  set_has_cabstructboardname();
  if (cabstructboardname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructboardname_ = new ::std::string;
  }
  cabstructboardname_->assign(value);
}
inline void JK_CabStructBoardInfo::set_cabstructboardname(const char* value, size_t size) {
  set_has_cabstructboardname();
  if (cabstructboardname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructboardname_ = new ::std::string;
  }
  cabstructboardname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructBoardInfo::mutable_cabstructboardname() {
  set_has_cabstructboardname();
  if (cabstructboardname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructboardname_ = new ::std::string;
  }
  return cabstructboardname_;
}
inline ::std::string* JK_CabStructBoardInfo::release_cabstructboardname() {
  clear_has_cabstructboardname();
  if (cabstructboardname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabstructboardname_;
    cabstructboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructBoardInfo::set_allocated_cabstructboardname(::std::string* cabstructboardname) {
  if (cabstructboardname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructboardname_;
  }
  if (cabstructboardname) {
    set_has_cabstructboardname();
    cabstructboardname_ = cabstructboardname;
  } else {
    clear_has_cabstructboardname();
    cabstructboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 DefaultSkinDirection = 24;
inline bool JK_CabStructBoardInfo::has_defaultskindirection() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_defaultskindirection() {
  _has_bits_[0] |= 0x00800000u;
}
inline void JK_CabStructBoardInfo::clear_has_defaultskindirection() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void JK_CabStructBoardInfo::clear_defaultskindirection() {
  defaultskindirection_ = 0;
  clear_has_defaultskindirection();
}
inline ::google::protobuf::int32 JK_CabStructBoardInfo::defaultskindirection() const {
  return defaultskindirection_;
}
inline void JK_CabStructBoardInfo::set_defaultskindirection(::google::protobuf::int32 value) {
  set_has_defaultskindirection();
  defaultskindirection_ = value;
}

// required int64 VerCode = 25;
inline bool JK_CabStructBoardInfo::has_vercode() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void JK_CabStructBoardInfo::set_has_vercode() {
  _has_bits_[0] |= 0x01000000u;
}
inline void JK_CabStructBoardInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void JK_CabStructBoardInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabStructBoardInfo::vercode() const {
  return vercode_;
}
inline void JK_CabStructBoardInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_CabStructBoardSealInfo

// required int32 CabStructBoardSealID = 1;
inline bool JK_CabStructBoardSealInfo::has_cabstructboardsealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabStructBoardSealInfo::set_has_cabstructboardsealid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabStructBoardSealInfo::clear_has_cabstructboardsealid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabStructBoardSealInfo::clear_cabstructboardsealid() {
  cabstructboardsealid_ = 0;
  clear_has_cabstructboardsealid();
}
inline ::google::protobuf::int32 JK_CabStructBoardSealInfo::cabstructboardsealid() const {
  return cabstructboardsealid_;
}
inline void JK_CabStructBoardSealInfo::set_cabstructboardsealid(::google::protobuf::int32 value) {
  set_has_cabstructboardsealid();
  cabstructboardsealid_ = value;
}

// required int32 SealOrder = 2;
inline bool JK_CabStructBoardSealInfo::has_sealorder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabStructBoardSealInfo::set_has_sealorder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabStructBoardSealInfo::clear_has_sealorder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabStructBoardSealInfo::clear_sealorder() {
  sealorder_ = 0;
  clear_has_sealorder();
}
inline ::google::protobuf::int32 JK_CabStructBoardSealInfo::sealorder() const {
  return sealorder_;
}
inline void JK_CabStructBoardSealInfo::set_sealorder(::google::protobuf::int32 value) {
  set_has_sealorder();
  sealorder_ = value;
}

// required int32 CabStructBoardID = 3;
inline bool JK_CabStructBoardSealInfo::has_cabstructboardid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabStructBoardSealInfo::set_has_cabstructboardid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabStructBoardSealInfo::clear_has_cabstructboardid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabStructBoardSealInfo::clear_cabstructboardid() {
  cabstructboardid_ = 0;
  clear_has_cabstructboardid();
}
inline ::google::protobuf::int32 JK_CabStructBoardSealInfo::cabstructboardid() const {
  return cabstructboardid_;
}
inline void JK_CabStructBoardSealInfo::set_cabstructboardid(::google::protobuf::int32 value) {
  set_has_cabstructboardid();
  cabstructboardid_ = value;
}

// required int32 SealType = 4;
inline bool JK_CabStructBoardSealInfo::has_sealtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabStructBoardSealInfo::set_has_sealtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabStructBoardSealInfo::clear_has_sealtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabStructBoardSealInfo::clear_sealtype() {
  sealtype_ = 0;
  clear_has_sealtype();
}
inline ::google::protobuf::int32 JK_CabStructBoardSealInfo::sealtype() const {
  return sealtype_;
}
inline void JK_CabStructBoardSealInfo::set_sealtype(::google::protobuf::int32 value) {
  set_has_sealtype();
  sealtype_ = value;
}

// required int64 VerCode = 5;
inline bool JK_CabStructBoardSealInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabStructBoardSealInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabStructBoardSealInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabStructBoardSealInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabStructBoardSealInfo::vercode() const {
  return vercode_;
}
inline void JK_CabStructBoardSealInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 6;
inline bool JK_CabStructBoardSealInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabStructBoardSealInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabStructBoardSealInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabStructBoardSealInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabStructBoardSealInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabStructBoardSealInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 7;
inline bool JK_CabStructBoardSealInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabStructBoardSealInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabStructBoardSealInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabStructBoardSealInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_CabStructBoardSealInfo::creatorid() const {
  return creatorid_;
}
inline void JK_CabStructBoardSealInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 8;
inline bool JK_CabStructBoardSealInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabStructBoardSealInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabStructBoardSealInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabStructBoardSealInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_CabStructBoardSealInfo::updaterid() const {
  return updaterid_;
}
inline void JK_CabStructBoardSealInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 9;
inline bool JK_CabStructBoardSealInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabStructBoardSealInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabStructBoardSealInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabStructBoardSealInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_CabStructBoardSealInfo::createtime() const {
  return createtime_;
}
inline void JK_CabStructBoardSealInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 10;
inline bool JK_CabStructBoardSealInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabStructBoardSealInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabStructBoardSealInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabStructBoardSealInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_CabStructBoardSealInfo::updatetime() const {
  return updatetime_;
}
inline void JK_CabStructBoardSealInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required int32 SealIndex = 11;
inline bool JK_CabStructBoardSealInfo::has_sealindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_CabStructBoardSealInfo::set_has_sealindex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_CabStructBoardSealInfo::clear_has_sealindex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_CabStructBoardSealInfo::clear_sealindex() {
  sealindex_ = 0;
  clear_has_sealindex();
}
inline ::google::protobuf::int32 JK_CabStructBoardSealInfo::sealindex() const {
  return sealindex_;
}
inline void JK_CabStructBoardSealInfo::set_sealindex(::google::protobuf::int32 value) {
  set_has_sealindex();
  sealindex_ = value;
}

// -------------------------------------------------------------------

// JK_CabStructGapInfo

// required int32 CabStructGapID = 1;
inline bool JK_CabStructGapInfo::has_cabstructgapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabStructGapInfo::set_has_cabstructgapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabStructGapInfo::clear_has_cabstructgapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabStructGapInfo::clear_cabstructgapid() {
  cabstructgapid_ = 0;
  clear_has_cabstructgapid();
}
inline ::google::protobuf::int32 JK_CabStructGapInfo::cabstructgapid() const {
  return cabstructgapid_;
}
inline void JK_CabStructGapInfo::set_cabstructgapid(::google::protobuf::int32 value) {
  set_has_cabstructgapid();
  cabstructgapid_ = value;
}

// required int32 CabStructID = 2;
inline bool JK_CabStructGapInfo::has_cabstructid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabStructGapInfo::set_has_cabstructid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabStructGapInfo::clear_has_cabstructid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabStructGapInfo::clear_cabstructid() {
  cabstructid_ = 0;
  clear_has_cabstructid();
}
inline ::google::protobuf::int32 JK_CabStructGapInfo::cabstructid() const {
  return cabstructid_;
}
inline void JK_CabStructGapInfo::set_cabstructid(::google::protobuf::int32 value) {
  set_has_cabstructid();
  cabstructid_ = value;
}

// required bool IsDel = 3;
inline bool JK_CabStructGapInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabStructGapInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabStructGapInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabStructGapInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_CabStructGapInfo::isdel() const {
  return isdel_;
}
inline void JK_CabStructGapInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 FactoryID = 4;
inline bool JK_CabStructGapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabStructGapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabStructGapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabStructGapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabStructGapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabStructGapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CabGapType = 5;
inline bool JK_CabStructGapInfo::has_cabgaptype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabStructGapInfo::set_has_cabgaptype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabStructGapInfo::clear_has_cabgaptype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabStructGapInfo::clear_cabgaptype() {
  cabgaptype_ = 0;
  clear_has_cabgaptype();
}
inline ::google::protobuf::int32 JK_CabStructGapInfo::cabgaptype() const {
  return cabgaptype_;
}
inline void JK_CabStructGapInfo::set_cabgaptype(::google::protobuf::int32 value) {
  set_has_cabgaptype();
  cabgaptype_ = value;
}

// required int32 XDock = 6;
inline bool JK_CabStructGapInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabStructGapInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabStructGapInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabStructGapInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 JK_CabStructGapInfo::xdock() const {
  return xdock_;
}
inline void JK_CabStructGapInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 7;
inline bool JK_CabStructGapInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabStructGapInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabStructGapInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabStructGapInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 JK_CabStructGapInfo::ydock() const {
  return ydock_;
}
inline void JK_CabStructGapInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 8;
inline bool JK_CabStructGapInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabStructGapInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabStructGapInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabStructGapInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 JK_CabStructGapInfo::zdock() const {
  return zdock_;
}
inline void JK_CabStructGapInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required string XOffsetFormula = 9;
inline bool JK_CabStructGapInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabStructGapInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabStructGapInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabStructGapInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_CabStructGapInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_CabStructGapInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabStructGapInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabStructGapInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_CabStructGapInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 10;
inline bool JK_CabStructGapInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabStructGapInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabStructGapInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabStructGapInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_CabStructGapInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_CabStructGapInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabStructGapInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabStructGapInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_CabStructGapInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 11;
inline bool JK_CabStructGapInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_CabStructGapInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_CabStructGapInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_CabStructGapInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_CabStructGapInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_CabStructGapInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabStructGapInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabStructGapInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_CabStructGapInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string XFormula = 12;
inline bool JK_CabStructGapInfo::has_xformula() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_CabStructGapInfo::set_has_xformula() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_CabStructGapInfo::clear_has_xformula() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_CabStructGapInfo::clear_xformula() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    xformula_->clear();
  }
  clear_has_xformula();
}
inline const ::std::string& JK_CabStructGapInfo::xformula() const {
  return *xformula_;
}
inline void JK_CabStructGapInfo::set_xformula(const ::std::string& value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_CabStructGapInfo::set_xformula(const char* value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_CabStructGapInfo::set_xformula(const char* value, size_t size) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_xformula() {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  return xformula_;
}
inline ::std::string* JK_CabStructGapInfo::release_xformula() {
  clear_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xformula_;
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_xformula(::std::string* xformula) {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (xformula) {
    set_has_xformula();
    xformula_ = xformula;
  } else {
    clear_has_xformula();
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YFormula = 13;
inline bool JK_CabStructGapInfo::has_yformula() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_yformula() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_CabStructGapInfo::clear_has_yformula() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_CabStructGapInfo::clear_yformula() {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    yformula_->clear();
  }
  clear_has_yformula();
}
inline const ::std::string& JK_CabStructGapInfo::yformula() const {
  return *yformula_;
}
inline void JK_CabStructGapInfo::set_yformula(const ::std::string& value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_CabStructGapInfo::set_yformula(const char* value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_CabStructGapInfo::set_yformula(const char* value, size_t size) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_yformula() {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  return yformula_;
}
inline ::std::string* JK_CabStructGapInfo::release_yformula() {
  clear_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yformula_;
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_yformula(::std::string* yformula) {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (yformula) {
    set_has_yformula();
    yformula_ = yformula;
  } else {
    clear_has_yformula();
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZFormula = 14;
inline bool JK_CabStructGapInfo::has_zformula() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_zformula() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_CabStructGapInfo::clear_has_zformula() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_CabStructGapInfo::clear_zformula() {
  if (zformula_ != &::google::protobuf::internal::kEmptyString) {
    zformula_->clear();
  }
  clear_has_zformula();
}
inline const ::std::string& JK_CabStructGapInfo::zformula() const {
  return *zformula_;
}
inline void JK_CabStructGapInfo::set_zformula(const ::std::string& value) {
  set_has_zformula();
  if (zformula_ == &::google::protobuf::internal::kEmptyString) {
    zformula_ = new ::std::string;
  }
  zformula_->assign(value);
}
inline void JK_CabStructGapInfo::set_zformula(const char* value) {
  set_has_zformula();
  if (zformula_ == &::google::protobuf::internal::kEmptyString) {
    zformula_ = new ::std::string;
  }
  zformula_->assign(value);
}
inline void JK_CabStructGapInfo::set_zformula(const char* value, size_t size) {
  set_has_zformula();
  if (zformula_ == &::google::protobuf::internal::kEmptyString) {
    zformula_ = new ::std::string;
  }
  zformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_zformula() {
  set_has_zformula();
  if (zformula_ == &::google::protobuf::internal::kEmptyString) {
    zformula_ = new ::std::string;
  }
  return zformula_;
}
inline ::std::string* JK_CabStructGapInfo::release_zformula() {
  clear_has_zformula();
  if (zformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zformula_;
    zformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_zformula(::std::string* zformula) {
  if (zformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zformula_;
  }
  if (zformula) {
    set_has_zformula();
    zformula_ = zformula;
  } else {
    clear_has_zformula();
    zformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string XVar = 15;
inline bool JK_CabStructGapInfo::has_xvar() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_xvar() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_CabStructGapInfo::clear_has_xvar() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_CabStructGapInfo::clear_xvar() {
  if (xvar_ != &::google::protobuf::internal::kEmptyString) {
    xvar_->clear();
  }
  clear_has_xvar();
}
inline const ::std::string& JK_CabStructGapInfo::xvar() const {
  return *xvar_;
}
inline void JK_CabStructGapInfo::set_xvar(const ::std::string& value) {
  set_has_xvar();
  if (xvar_ == &::google::protobuf::internal::kEmptyString) {
    xvar_ = new ::std::string;
  }
  xvar_->assign(value);
}
inline void JK_CabStructGapInfo::set_xvar(const char* value) {
  set_has_xvar();
  if (xvar_ == &::google::protobuf::internal::kEmptyString) {
    xvar_ = new ::std::string;
  }
  xvar_->assign(value);
}
inline void JK_CabStructGapInfo::set_xvar(const char* value, size_t size) {
  set_has_xvar();
  if (xvar_ == &::google::protobuf::internal::kEmptyString) {
    xvar_ = new ::std::string;
  }
  xvar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_xvar() {
  set_has_xvar();
  if (xvar_ == &::google::protobuf::internal::kEmptyString) {
    xvar_ = new ::std::string;
  }
  return xvar_;
}
inline ::std::string* JK_CabStructGapInfo::release_xvar() {
  clear_has_xvar();
  if (xvar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xvar_;
    xvar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_xvar(::std::string* xvar) {
  if (xvar_ != &::google::protobuf::internal::kEmptyString) {
    delete xvar_;
  }
  if (xvar) {
    set_has_xvar();
    xvar_ = xvar;
  } else {
    clear_has_xvar();
    xvar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YVar = 16;
inline bool JK_CabStructGapInfo::has_yvar() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_yvar() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_CabStructGapInfo::clear_has_yvar() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_CabStructGapInfo::clear_yvar() {
  if (yvar_ != &::google::protobuf::internal::kEmptyString) {
    yvar_->clear();
  }
  clear_has_yvar();
}
inline const ::std::string& JK_CabStructGapInfo::yvar() const {
  return *yvar_;
}
inline void JK_CabStructGapInfo::set_yvar(const ::std::string& value) {
  set_has_yvar();
  if (yvar_ == &::google::protobuf::internal::kEmptyString) {
    yvar_ = new ::std::string;
  }
  yvar_->assign(value);
}
inline void JK_CabStructGapInfo::set_yvar(const char* value) {
  set_has_yvar();
  if (yvar_ == &::google::protobuf::internal::kEmptyString) {
    yvar_ = new ::std::string;
  }
  yvar_->assign(value);
}
inline void JK_CabStructGapInfo::set_yvar(const char* value, size_t size) {
  set_has_yvar();
  if (yvar_ == &::google::protobuf::internal::kEmptyString) {
    yvar_ = new ::std::string;
  }
  yvar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_yvar() {
  set_has_yvar();
  if (yvar_ == &::google::protobuf::internal::kEmptyString) {
    yvar_ = new ::std::string;
  }
  return yvar_;
}
inline ::std::string* JK_CabStructGapInfo::release_yvar() {
  clear_has_yvar();
  if (yvar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yvar_;
    yvar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_yvar(::std::string* yvar) {
  if (yvar_ != &::google::protobuf::internal::kEmptyString) {
    delete yvar_;
  }
  if (yvar) {
    set_has_yvar();
    yvar_ = yvar;
  } else {
    clear_has_yvar();
    yvar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZVar = 17;
inline bool JK_CabStructGapInfo::has_zvar() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_zvar() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_CabStructGapInfo::clear_has_zvar() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_CabStructGapInfo::clear_zvar() {
  if (zvar_ != &::google::protobuf::internal::kEmptyString) {
    zvar_->clear();
  }
  clear_has_zvar();
}
inline const ::std::string& JK_CabStructGapInfo::zvar() const {
  return *zvar_;
}
inline void JK_CabStructGapInfo::set_zvar(const ::std::string& value) {
  set_has_zvar();
  if (zvar_ == &::google::protobuf::internal::kEmptyString) {
    zvar_ = new ::std::string;
  }
  zvar_->assign(value);
}
inline void JK_CabStructGapInfo::set_zvar(const char* value) {
  set_has_zvar();
  if (zvar_ == &::google::protobuf::internal::kEmptyString) {
    zvar_ = new ::std::string;
  }
  zvar_->assign(value);
}
inline void JK_CabStructGapInfo::set_zvar(const char* value, size_t size) {
  set_has_zvar();
  if (zvar_ == &::google::protobuf::internal::kEmptyString) {
    zvar_ = new ::std::string;
  }
  zvar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_zvar() {
  set_has_zvar();
  if (zvar_ == &::google::protobuf::internal::kEmptyString) {
    zvar_ = new ::std::string;
  }
  return zvar_;
}
inline ::std::string* JK_CabStructGapInfo::release_zvar() {
  clear_has_zvar();
  if (zvar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zvar_;
    zvar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_zvar(::std::string* zvar) {
  if (zvar_ != &::google::protobuf::internal::kEmptyString) {
    delete zvar_;
  }
  if (zvar) {
    set_has_zvar();
    zvar_ = zvar;
  } else {
    clear_has_zvar();
    zvar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string XVarName = 18;
inline bool JK_CabStructGapInfo::has_xvarname() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_xvarname() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_CabStructGapInfo::clear_has_xvarname() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_CabStructGapInfo::clear_xvarname() {
  if (xvarname_ != &::google::protobuf::internal::kEmptyString) {
    xvarname_->clear();
  }
  clear_has_xvarname();
}
inline const ::std::string& JK_CabStructGapInfo::xvarname() const {
  return *xvarname_;
}
inline void JK_CabStructGapInfo::set_xvarname(const ::std::string& value) {
  set_has_xvarname();
  if (xvarname_ == &::google::protobuf::internal::kEmptyString) {
    xvarname_ = new ::std::string;
  }
  xvarname_->assign(value);
}
inline void JK_CabStructGapInfo::set_xvarname(const char* value) {
  set_has_xvarname();
  if (xvarname_ == &::google::protobuf::internal::kEmptyString) {
    xvarname_ = new ::std::string;
  }
  xvarname_->assign(value);
}
inline void JK_CabStructGapInfo::set_xvarname(const char* value, size_t size) {
  set_has_xvarname();
  if (xvarname_ == &::google::protobuf::internal::kEmptyString) {
    xvarname_ = new ::std::string;
  }
  xvarname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_xvarname() {
  set_has_xvarname();
  if (xvarname_ == &::google::protobuf::internal::kEmptyString) {
    xvarname_ = new ::std::string;
  }
  return xvarname_;
}
inline ::std::string* JK_CabStructGapInfo::release_xvarname() {
  clear_has_xvarname();
  if (xvarname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xvarname_;
    xvarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_xvarname(::std::string* xvarname) {
  if (xvarname_ != &::google::protobuf::internal::kEmptyString) {
    delete xvarname_;
  }
  if (xvarname) {
    set_has_xvarname();
    xvarname_ = xvarname;
  } else {
    clear_has_xvarname();
    xvarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YVarName = 19;
inline bool JK_CabStructGapInfo::has_yvarname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_yvarname() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_CabStructGapInfo::clear_has_yvarname() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_CabStructGapInfo::clear_yvarname() {
  if (yvarname_ != &::google::protobuf::internal::kEmptyString) {
    yvarname_->clear();
  }
  clear_has_yvarname();
}
inline const ::std::string& JK_CabStructGapInfo::yvarname() const {
  return *yvarname_;
}
inline void JK_CabStructGapInfo::set_yvarname(const ::std::string& value) {
  set_has_yvarname();
  if (yvarname_ == &::google::protobuf::internal::kEmptyString) {
    yvarname_ = new ::std::string;
  }
  yvarname_->assign(value);
}
inline void JK_CabStructGapInfo::set_yvarname(const char* value) {
  set_has_yvarname();
  if (yvarname_ == &::google::protobuf::internal::kEmptyString) {
    yvarname_ = new ::std::string;
  }
  yvarname_->assign(value);
}
inline void JK_CabStructGapInfo::set_yvarname(const char* value, size_t size) {
  set_has_yvarname();
  if (yvarname_ == &::google::protobuf::internal::kEmptyString) {
    yvarname_ = new ::std::string;
  }
  yvarname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_yvarname() {
  set_has_yvarname();
  if (yvarname_ == &::google::protobuf::internal::kEmptyString) {
    yvarname_ = new ::std::string;
  }
  return yvarname_;
}
inline ::std::string* JK_CabStructGapInfo::release_yvarname() {
  clear_has_yvarname();
  if (yvarname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yvarname_;
    yvarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_yvarname(::std::string* yvarname) {
  if (yvarname_ != &::google::protobuf::internal::kEmptyString) {
    delete yvarname_;
  }
  if (yvarname) {
    set_has_yvarname();
    yvarname_ = yvarname;
  } else {
    clear_has_yvarname();
    yvarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZVarName = 20;
inline bool JK_CabStructGapInfo::has_zvarname() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_zvarname() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_CabStructGapInfo::clear_has_zvarname() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_CabStructGapInfo::clear_zvarname() {
  if (zvarname_ != &::google::protobuf::internal::kEmptyString) {
    zvarname_->clear();
  }
  clear_has_zvarname();
}
inline const ::std::string& JK_CabStructGapInfo::zvarname() const {
  return *zvarname_;
}
inline void JK_CabStructGapInfo::set_zvarname(const ::std::string& value) {
  set_has_zvarname();
  if (zvarname_ == &::google::protobuf::internal::kEmptyString) {
    zvarname_ = new ::std::string;
  }
  zvarname_->assign(value);
}
inline void JK_CabStructGapInfo::set_zvarname(const char* value) {
  set_has_zvarname();
  if (zvarname_ == &::google::protobuf::internal::kEmptyString) {
    zvarname_ = new ::std::string;
  }
  zvarname_->assign(value);
}
inline void JK_CabStructGapInfo::set_zvarname(const char* value, size_t size) {
  set_has_zvarname();
  if (zvarname_ == &::google::protobuf::internal::kEmptyString) {
    zvarname_ = new ::std::string;
  }
  zvarname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_zvarname() {
  set_has_zvarname();
  if (zvarname_ == &::google::protobuf::internal::kEmptyString) {
    zvarname_ = new ::std::string;
  }
  return zvarname_;
}
inline ::std::string* JK_CabStructGapInfo::release_zvarname() {
  clear_has_zvarname();
  if (zvarname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zvarname_;
    zvarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_zvarname(::std::string* zvarname) {
  if (zvarname_ != &::google::protobuf::internal::kEmptyString) {
    delete zvarname_;
  }
  if (zvarname) {
    set_has_zvarname();
    zvarname_ = zvarname;
  } else {
    clear_has_zvarname();
    zvarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabStructCabStructGapCode = 21;
inline bool JK_CabStructGapInfo::has_cabstructcabstructgapcode() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_cabstructcabstructgapcode() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_CabStructGapInfo::clear_has_cabstructcabstructgapcode() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_CabStructGapInfo::clear_cabstructcabstructgapcode() {
  if (cabstructcabstructgapcode_ != &::google::protobuf::internal::kEmptyString) {
    cabstructcabstructgapcode_->clear();
  }
  clear_has_cabstructcabstructgapcode();
}
inline const ::std::string& JK_CabStructGapInfo::cabstructcabstructgapcode() const {
  return *cabstructcabstructgapcode_;
}
inline void JK_CabStructGapInfo::set_cabstructcabstructgapcode(const ::std::string& value) {
  set_has_cabstructcabstructgapcode();
  if (cabstructcabstructgapcode_ == &::google::protobuf::internal::kEmptyString) {
    cabstructcabstructgapcode_ = new ::std::string;
  }
  cabstructcabstructgapcode_->assign(value);
}
inline void JK_CabStructGapInfo::set_cabstructcabstructgapcode(const char* value) {
  set_has_cabstructcabstructgapcode();
  if (cabstructcabstructgapcode_ == &::google::protobuf::internal::kEmptyString) {
    cabstructcabstructgapcode_ = new ::std::string;
  }
  cabstructcabstructgapcode_->assign(value);
}
inline void JK_CabStructGapInfo::set_cabstructcabstructgapcode(const char* value, size_t size) {
  set_has_cabstructcabstructgapcode();
  if (cabstructcabstructgapcode_ == &::google::protobuf::internal::kEmptyString) {
    cabstructcabstructgapcode_ = new ::std::string;
  }
  cabstructcabstructgapcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_cabstructcabstructgapcode() {
  set_has_cabstructcabstructgapcode();
  if (cabstructcabstructgapcode_ == &::google::protobuf::internal::kEmptyString) {
    cabstructcabstructgapcode_ = new ::std::string;
  }
  return cabstructcabstructgapcode_;
}
inline ::std::string* JK_CabStructGapInfo::release_cabstructcabstructgapcode() {
  clear_has_cabstructcabstructgapcode();
  if (cabstructcabstructgapcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabstructcabstructgapcode_;
    cabstructcabstructgapcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_cabstructcabstructgapcode(::std::string* cabstructcabstructgapcode) {
  if (cabstructcabstructgapcode_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructcabstructgapcode_;
  }
  if (cabstructcabstructgapcode) {
    set_has_cabstructcabstructgapcode();
    cabstructcabstructgapcode_ = cabstructcabstructgapcode;
  } else {
    clear_has_cabstructcabstructgapcode();
    cabstructcabstructgapcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabStructGapName = 22;
inline bool JK_CabStructGapInfo::has_cabstructgapname() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_cabstructgapname() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_CabStructGapInfo::clear_has_cabstructgapname() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_CabStructGapInfo::clear_cabstructgapname() {
  if (cabstructgapname_ != &::google::protobuf::internal::kEmptyString) {
    cabstructgapname_->clear();
  }
  clear_has_cabstructgapname();
}
inline const ::std::string& JK_CabStructGapInfo::cabstructgapname() const {
  return *cabstructgapname_;
}
inline void JK_CabStructGapInfo::set_cabstructgapname(const ::std::string& value) {
  set_has_cabstructgapname();
  if (cabstructgapname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructgapname_ = new ::std::string;
  }
  cabstructgapname_->assign(value);
}
inline void JK_CabStructGapInfo::set_cabstructgapname(const char* value) {
  set_has_cabstructgapname();
  if (cabstructgapname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructgapname_ = new ::std::string;
  }
  cabstructgapname_->assign(value);
}
inline void JK_CabStructGapInfo::set_cabstructgapname(const char* value, size_t size) {
  set_has_cabstructgapname();
  if (cabstructgapname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructgapname_ = new ::std::string;
  }
  cabstructgapname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_cabstructgapname() {
  set_has_cabstructgapname();
  if (cabstructgapname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructgapname_ = new ::std::string;
  }
  return cabstructgapname_;
}
inline ::std::string* JK_CabStructGapInfo::release_cabstructgapname() {
  clear_has_cabstructgapname();
  if (cabstructgapname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabstructgapname_;
    cabstructgapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_cabstructgapname(::std::string* cabstructgapname) {
  if (cabstructgapname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructgapname_;
  }
  if (cabstructgapname) {
    set_has_cabstructgapname();
    cabstructgapname_ = cabstructgapname;
  } else {
    clear_has_cabstructgapname();
    cabstructgapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabStructGapMemo = 23;
inline bool JK_CabStructGapInfo::has_cabstructgapmemo() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_cabstructgapmemo() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_CabStructGapInfo::clear_has_cabstructgapmemo() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_CabStructGapInfo::clear_cabstructgapmemo() {
  if (cabstructgapmemo_ != &::google::protobuf::internal::kEmptyString) {
    cabstructgapmemo_->clear();
  }
  clear_has_cabstructgapmemo();
}
inline const ::std::string& JK_CabStructGapInfo::cabstructgapmemo() const {
  return *cabstructgapmemo_;
}
inline void JK_CabStructGapInfo::set_cabstructgapmemo(const ::std::string& value) {
  set_has_cabstructgapmemo();
  if (cabstructgapmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabstructgapmemo_ = new ::std::string;
  }
  cabstructgapmemo_->assign(value);
}
inline void JK_CabStructGapInfo::set_cabstructgapmemo(const char* value) {
  set_has_cabstructgapmemo();
  if (cabstructgapmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabstructgapmemo_ = new ::std::string;
  }
  cabstructgapmemo_->assign(value);
}
inline void JK_CabStructGapInfo::set_cabstructgapmemo(const char* value, size_t size) {
  set_has_cabstructgapmemo();
  if (cabstructgapmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabstructgapmemo_ = new ::std::string;
  }
  cabstructgapmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructGapInfo::mutable_cabstructgapmemo() {
  set_has_cabstructgapmemo();
  if (cabstructgapmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabstructgapmemo_ = new ::std::string;
  }
  return cabstructgapmemo_;
}
inline ::std::string* JK_CabStructGapInfo::release_cabstructgapmemo() {
  clear_has_cabstructgapmemo();
  if (cabstructgapmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabstructgapmemo_;
    cabstructgapmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructGapInfo::set_allocated_cabstructgapmemo(::std::string* cabstructgapmemo) {
  if (cabstructgapmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructgapmemo_;
  }
  if (cabstructgapmemo) {
    set_has_cabstructgapmemo();
    cabstructgapmemo_ = cabstructgapmemo;
  } else {
    clear_has_cabstructgapmemo();
    cabstructgapmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 CreatorID = 24;
inline bool JK_CabStructGapInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void JK_CabStructGapInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void JK_CabStructGapInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_CabStructGapInfo::creatorid() const {
  return creatorid_;
}
inline void JK_CabStructGapInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 25;
inline bool JK_CabStructGapInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void JK_CabStructGapInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void JK_CabStructGapInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_CabStructGapInfo::updaterid() const {
  return updaterid_;
}
inline void JK_CabStructGapInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 26;
inline bool JK_CabStructGapInfo::has_createtime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_createtime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void JK_CabStructGapInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void JK_CabStructGapInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_CabStructGapInfo::createtime() const {
  return createtime_;
}
inline void JK_CabStructGapInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 27;
inline bool JK_CabStructGapInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x04000000u;
}
inline void JK_CabStructGapInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void JK_CabStructGapInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_CabStructGapInfo::updatetime() const {
  return updatetime_;
}
inline void JK_CabStructGapInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required int64 VerCode = 28;
inline bool JK_CabStructGapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void JK_CabStructGapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x08000000u;
}
inline void JK_CabStructGapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void JK_CabStructGapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabStructGapInfo::vercode() const {
  return vercode_;
}
inline void JK_CabStructGapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_CabStructInfo

// required int32 CabStructID = 1;
inline bool JK_CabStructInfo::has_cabstructid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabStructInfo::set_has_cabstructid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabStructInfo::clear_has_cabstructid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabStructInfo::clear_cabstructid() {
  cabstructid_ = 0;
  clear_has_cabstructid();
}
inline ::google::protobuf::int32 JK_CabStructInfo::cabstructid() const {
  return cabstructid_;
}
inline void JK_CabStructInfo::set_cabstructid(::google::protobuf::int32 value) {
  set_has_cabstructid();
  cabstructid_ = value;
}

// required int32 FactoryID = 2;
inline bool JK_CabStructInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabStructInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabStructInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabStructInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabStructInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabStructInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 3;
inline bool JK_CabStructInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabStructInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabStructInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabStructInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabStructInfo::vercode() const {
  return vercode_;
}
inline void JK_CabStructInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 GroupID = 4;
inline bool JK_CabStructInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabStructInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabStructInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabStructInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_CabStructInfo::groupid() const {
  return groupid_;
}
inline void JK_CabStructInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required bool IsDel = 5;
inline bool JK_CabStructInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabStructInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabStructInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabStructInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_CabStructInfo::isdel() const {
  return isdel_;
}
inline void JK_CabStructInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsActive = 6;
inline bool JK_CabStructInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabStructInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabStructInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabStructInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_CabStructInfo::isactive() const {
  return isactive_;
}
inline void JK_CabStructInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required int32 CabGapType = 7;
inline bool JK_CabStructInfo::has_cabgaptype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabStructInfo::set_has_cabgaptype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabStructInfo::clear_has_cabgaptype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabStructInfo::clear_cabgaptype() {
  cabgaptype_ = 0;
  clear_has_cabgaptype();
}
inline ::google::protobuf::int32 JK_CabStructInfo::cabgaptype() const {
  return cabgaptype_;
}
inline void JK_CabStructInfo::set_cabgaptype(::google::protobuf::int32 value) {
  set_has_cabgaptype();
  cabgaptype_ = value;
}

// required int32 CabShapeID = 8;
inline bool JK_CabStructInfo::has_cabshapeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabStructInfo::set_has_cabshapeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabStructInfo::clear_has_cabshapeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabStructInfo::clear_cabshapeid() {
  cabshapeid_ = 0;
  clear_has_cabshapeid();
}
inline ::google::protobuf::int32 JK_CabStructInfo::cabshapeid() const {
  return cabshapeid_;
}
inline void JK_CabStructInfo::set_cabshapeid(::google::protobuf::int32 value) {
  set_has_cabshapeid();
  cabshapeid_ = value;
}

// required double VirtualXLen = 9;
inline bool JK_CabStructInfo::has_virtualxlen() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabStructInfo::set_has_virtualxlen() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabStructInfo::clear_has_virtualxlen() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabStructInfo::clear_virtualxlen() {
  virtualxlen_ = 0;
  clear_has_virtualxlen();
}
inline double JK_CabStructInfo::virtualxlen() const {
  return virtualxlen_;
}
inline void JK_CabStructInfo::set_virtualxlen(double value) {
  set_has_virtualxlen();
  virtualxlen_ = value;
}

// required double VirtualYLen = 10;
inline bool JK_CabStructInfo::has_virtualylen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabStructInfo::set_has_virtualylen() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabStructInfo::clear_has_virtualylen() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabStructInfo::clear_virtualylen() {
  virtualylen_ = 0;
  clear_has_virtualylen();
}
inline double JK_CabStructInfo::virtualylen() const {
  return virtualylen_;
}
inline void JK_CabStructInfo::set_virtualylen(double value) {
  set_has_virtualylen();
  virtualylen_ = value;
}

// required double VirtualZLen = 11;
inline bool JK_CabStructInfo::has_virtualzlen() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_CabStructInfo::set_has_virtualzlen() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_CabStructInfo::clear_has_virtualzlen() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_CabStructInfo::clear_virtualzlen() {
  virtualzlen_ = 0;
  clear_has_virtualzlen();
}
inline double JK_CabStructInfo::virtualzlen() const {
  return virtualzlen_;
}
inline void JK_CabStructInfo::set_virtualzlen(double value) {
  set_has_virtualzlen();
  virtualzlen_ = value;
}

// required double VirtualShapeXLen = 12;
inline bool JK_CabStructInfo::has_virtualshapexlen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_CabStructInfo::set_has_virtualshapexlen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_CabStructInfo::clear_has_virtualshapexlen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_CabStructInfo::clear_virtualshapexlen() {
  virtualshapexlen_ = 0;
  clear_has_virtualshapexlen();
}
inline double JK_CabStructInfo::virtualshapexlen() const {
  return virtualshapexlen_;
}
inline void JK_CabStructInfo::set_virtualshapexlen(double value) {
  set_has_virtualshapexlen();
  virtualshapexlen_ = value;
}

// required double VirtualShapeZLen = 13;
inline bool JK_CabStructInfo::has_virtualshapezlen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_CabStructInfo::set_has_virtualshapezlen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_CabStructInfo::clear_has_virtualshapezlen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_CabStructInfo::clear_virtualshapezlen() {
  virtualshapezlen_ = 0;
  clear_has_virtualshapezlen();
}
inline double JK_CabStructInfo::virtualshapezlen() const {
  return virtualshapezlen_;
}
inline void JK_CabStructInfo::set_virtualshapezlen(double value) {
  set_has_virtualshapezlen();
  virtualshapezlen_ = value;
}

// required double VirtualGapXLen = 14;
inline bool JK_CabStructInfo::has_virtualgapxlen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_CabStructInfo::set_has_virtualgapxlen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_CabStructInfo::clear_has_virtualgapxlen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_CabStructInfo::clear_virtualgapxlen() {
  virtualgapxlen_ = 0;
  clear_has_virtualgapxlen();
}
inline double JK_CabStructInfo::virtualgapxlen() const {
  return virtualgapxlen_;
}
inline void JK_CabStructInfo::set_virtualgapxlen(double value) {
  set_has_virtualgapxlen();
  virtualgapxlen_ = value;
}

// required double VirtualGapYLen = 15;
inline bool JK_CabStructInfo::has_virtualgapylen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_CabStructInfo::set_has_virtualgapylen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_CabStructInfo::clear_has_virtualgapylen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_CabStructInfo::clear_virtualgapylen() {
  virtualgapylen_ = 0;
  clear_has_virtualgapylen();
}
inline double JK_CabStructInfo::virtualgapylen() const {
  return virtualgapylen_;
}
inline void JK_CabStructInfo::set_virtualgapylen(double value) {
  set_has_virtualgapylen();
  virtualgapylen_ = value;
}

// required double VirtualGapZLen = 16;
inline bool JK_CabStructInfo::has_virtualgapzlen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_CabStructInfo::set_has_virtualgapzlen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_CabStructInfo::clear_has_virtualgapzlen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_CabStructInfo::clear_virtualgapzlen() {
  virtualgapzlen_ = 0;
  clear_has_virtualgapzlen();
}
inline double JK_CabStructInfo::virtualgapzlen() const {
  return virtualgapzlen_;
}
inline void JK_CabStructInfo::set_virtualgapzlen(double value) {
  set_has_virtualgapzlen();
  virtualgapzlen_ = value;
}

// required int32 CreatorID = 17;
inline bool JK_CabStructInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_CabStructInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_CabStructInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_CabStructInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_CabStructInfo::creatorid() const {
  return creatorid_;
}
inline void JK_CabStructInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 18;
inline bool JK_CabStructInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_CabStructInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_CabStructInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_CabStructInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_CabStructInfo::updaterid() const {
  return updaterid_;
}
inline void JK_CabStructInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 19;
inline bool JK_CabStructInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_CabStructInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_CabStructInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_CabStructInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_CabStructInfo::createtime() const {
  return createtime_;
}
inline void JK_CabStructInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 20;
inline bool JK_CabStructInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_CabStructInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_CabStructInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_CabStructInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_CabStructInfo::updatetime() const {
  return updatetime_;
}
inline void JK_CabStructInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string CabStructCode = 21;
inline bool JK_CabStructInfo::has_cabstructcode() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_CabStructInfo::set_has_cabstructcode() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_CabStructInfo::clear_has_cabstructcode() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_CabStructInfo::clear_cabstructcode() {
  if (cabstructcode_ != &::google::protobuf::internal::kEmptyString) {
    cabstructcode_->clear();
  }
  clear_has_cabstructcode();
}
inline const ::std::string& JK_CabStructInfo::cabstructcode() const {
  return *cabstructcode_;
}
inline void JK_CabStructInfo::set_cabstructcode(const ::std::string& value) {
  set_has_cabstructcode();
  if (cabstructcode_ == &::google::protobuf::internal::kEmptyString) {
    cabstructcode_ = new ::std::string;
  }
  cabstructcode_->assign(value);
}
inline void JK_CabStructInfo::set_cabstructcode(const char* value) {
  set_has_cabstructcode();
  if (cabstructcode_ == &::google::protobuf::internal::kEmptyString) {
    cabstructcode_ = new ::std::string;
  }
  cabstructcode_->assign(value);
}
inline void JK_CabStructInfo::set_cabstructcode(const char* value, size_t size) {
  set_has_cabstructcode();
  if (cabstructcode_ == &::google::protobuf::internal::kEmptyString) {
    cabstructcode_ = new ::std::string;
  }
  cabstructcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructInfo::mutable_cabstructcode() {
  set_has_cabstructcode();
  if (cabstructcode_ == &::google::protobuf::internal::kEmptyString) {
    cabstructcode_ = new ::std::string;
  }
  return cabstructcode_;
}
inline ::std::string* JK_CabStructInfo::release_cabstructcode() {
  clear_has_cabstructcode();
  if (cabstructcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabstructcode_;
    cabstructcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructInfo::set_allocated_cabstructcode(::std::string* cabstructcode) {
  if (cabstructcode_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructcode_;
  }
  if (cabstructcode) {
    set_has_cabstructcode();
    cabstructcode_ = cabstructcode;
  } else {
    clear_has_cabstructcode();
    cabstructcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabStructName = 22;
inline bool JK_CabStructInfo::has_cabstructname() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_CabStructInfo::set_has_cabstructname() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_CabStructInfo::clear_has_cabstructname() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_CabStructInfo::clear_cabstructname() {
  if (cabstructname_ != &::google::protobuf::internal::kEmptyString) {
    cabstructname_->clear();
  }
  clear_has_cabstructname();
}
inline const ::std::string& JK_CabStructInfo::cabstructname() const {
  return *cabstructname_;
}
inline void JK_CabStructInfo::set_cabstructname(const ::std::string& value) {
  set_has_cabstructname();
  if (cabstructname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructname_ = new ::std::string;
  }
  cabstructname_->assign(value);
}
inline void JK_CabStructInfo::set_cabstructname(const char* value) {
  set_has_cabstructname();
  if (cabstructname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructname_ = new ::std::string;
  }
  cabstructname_->assign(value);
}
inline void JK_CabStructInfo::set_cabstructname(const char* value, size_t size) {
  set_has_cabstructname();
  if (cabstructname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructname_ = new ::std::string;
  }
  cabstructname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructInfo::mutable_cabstructname() {
  set_has_cabstructname();
  if (cabstructname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructname_ = new ::std::string;
  }
  return cabstructname_;
}
inline ::std::string* JK_CabStructInfo::release_cabstructname() {
  clear_has_cabstructname();
  if (cabstructname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabstructname_;
    cabstructname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructInfo::set_allocated_cabstructname(::std::string* cabstructname) {
  if (cabstructname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructname_;
  }
  if (cabstructname) {
    set_has_cabstructname();
    cabstructname_ = cabstructname;
  } else {
    clear_has_cabstructname();
    cabstructname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabStructMemo = 23;
inline bool JK_CabStructInfo::has_cabstructmemo() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_CabStructInfo::set_has_cabstructmemo() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_CabStructInfo::clear_has_cabstructmemo() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_CabStructInfo::clear_cabstructmemo() {
  if (cabstructmemo_ != &::google::protobuf::internal::kEmptyString) {
    cabstructmemo_->clear();
  }
  clear_has_cabstructmemo();
}
inline const ::std::string& JK_CabStructInfo::cabstructmemo() const {
  return *cabstructmemo_;
}
inline void JK_CabStructInfo::set_cabstructmemo(const ::std::string& value) {
  set_has_cabstructmemo();
  if (cabstructmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabstructmemo_ = new ::std::string;
  }
  cabstructmemo_->assign(value);
}
inline void JK_CabStructInfo::set_cabstructmemo(const char* value) {
  set_has_cabstructmemo();
  if (cabstructmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabstructmemo_ = new ::std::string;
  }
  cabstructmemo_->assign(value);
}
inline void JK_CabStructInfo::set_cabstructmemo(const char* value, size_t size) {
  set_has_cabstructmemo();
  if (cabstructmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabstructmemo_ = new ::std::string;
  }
  cabstructmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabStructInfo::mutable_cabstructmemo() {
  set_has_cabstructmemo();
  if (cabstructmemo_ == &::google::protobuf::internal::kEmptyString) {
    cabstructmemo_ = new ::std::string;
  }
  return cabstructmemo_;
}
inline ::std::string* JK_CabStructInfo::release_cabstructmemo() {
  clear_has_cabstructmemo();
  if (cabstructmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabstructmemo_;
    cabstructmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabStructInfo::set_allocated_cabstructmemo(::std::string* cabstructmemo) {
  if (cabstructmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructmemo_;
  }
  if (cabstructmemo) {
    set_has_cabstructmemo();
    cabstructmemo_ = cabstructmemo;
  } else {
    clear_has_cabstructmemo();
    cabstructmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// JK_CabStructMatPlanMapInfo

// required int32 CabMatPlanID = 1;
inline bool JK_CabStructMatPlanMapInfo::has_cabmatplanid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabStructMatPlanMapInfo::set_has_cabmatplanid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabStructMatPlanMapInfo::clear_has_cabmatplanid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabStructMatPlanMapInfo::clear_cabmatplanid() {
  cabmatplanid_ = 0;
  clear_has_cabmatplanid();
}
inline ::google::protobuf::int32 JK_CabStructMatPlanMapInfo::cabmatplanid() const {
  return cabmatplanid_;
}
inline void JK_CabStructMatPlanMapInfo::set_cabmatplanid(::google::protobuf::int32 value) {
  set_has_cabmatplanid();
  cabmatplanid_ = value;
}

// required int32 CabStructID = 2;
inline bool JK_CabStructMatPlanMapInfo::has_cabstructid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabStructMatPlanMapInfo::set_has_cabstructid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabStructMatPlanMapInfo::clear_has_cabstructid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabStructMatPlanMapInfo::clear_cabstructid() {
  cabstructid_ = 0;
  clear_has_cabstructid();
}
inline ::google::protobuf::int32 JK_CabStructMatPlanMapInfo::cabstructid() const {
  return cabstructid_;
}
inline void JK_CabStructMatPlanMapInfo::set_cabstructid(::google::protobuf::int32 value) {
  set_has_cabstructid();
  cabstructid_ = value;
}

// required int64 VerCode = 3;
inline bool JK_CabStructMatPlanMapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabStructMatPlanMapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabStructMatPlanMapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabStructMatPlanMapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabStructMatPlanMapInfo::vercode() const {
  return vercode_;
}
inline void JK_CabStructMatPlanMapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 4;
inline bool JK_CabStructMatPlanMapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabStructMatPlanMapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabStructMatPlanMapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabStructMatPlanMapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabStructMatPlanMapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabStructMatPlanMapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_CabinetSizeBoardInfo

// required int32 CabinetSizeBoardID = 1;
inline bool JK_CabinetSizeBoardInfo::has_cabinetsizeboardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_cabinetsizeboardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_cabinetsizeboardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabinetSizeBoardInfo::clear_cabinetsizeboardid() {
  cabinetsizeboardid_ = 0;
  clear_has_cabinetsizeboardid();
}
inline ::google::protobuf::int32 JK_CabinetSizeBoardInfo::cabinetsizeboardid() const {
  return cabinetsizeboardid_;
}
inline void JK_CabinetSizeBoardInfo::set_cabinetsizeboardid(::google::protobuf::int32 value) {
  set_has_cabinetsizeboardid();
  cabinetsizeboardid_ = value;
}

// required int32 CabinetSizeID = 2;
inline bool JK_CabinetSizeBoardInfo::has_cabinetsizeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_cabinetsizeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_cabinetsizeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabinetSizeBoardInfo::clear_cabinetsizeid() {
  cabinetsizeid_ = 0;
  clear_has_cabinetsizeid();
}
inline ::google::protobuf::int32 JK_CabinetSizeBoardInfo::cabinetsizeid() const {
  return cabinetsizeid_;
}
inline void JK_CabinetSizeBoardInfo::set_cabinetsizeid(::google::protobuf::int32 value) {
  set_has_cabinetsizeid();
  cabinetsizeid_ = value;
}

// required bool IsDel = 3;
inline bool JK_CabinetSizeBoardInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabinetSizeBoardInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_CabinetSizeBoardInfo::isdel() const {
  return isdel_;
}
inline void JK_CabinetSizeBoardInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 CabStructBoardID = 4;
inline bool JK_CabinetSizeBoardInfo::has_cabstructboardid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_cabstructboardid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_cabstructboardid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabinetSizeBoardInfo::clear_cabstructboardid() {
  cabstructboardid_ = 0;
  clear_has_cabstructboardid();
}
inline ::google::protobuf::int32 JK_CabinetSizeBoardInfo::cabstructboardid() const {
  return cabstructboardid_;
}
inline void JK_CabinetSizeBoardInfo::set_cabstructboardid(::google::protobuf::int32 value) {
  set_has_cabstructboardid();
  cabstructboardid_ = value;
}

// required bool IsCanRelocate = 5;
inline bool JK_CabinetSizeBoardInfo::has_iscanrelocate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_iscanrelocate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_iscanrelocate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabinetSizeBoardInfo::clear_iscanrelocate() {
  iscanrelocate_ = false;
  clear_has_iscanrelocate();
}
inline bool JK_CabinetSizeBoardInfo::iscanrelocate() const {
  return iscanrelocate_;
}
inline void JK_CabinetSizeBoardInfo::set_iscanrelocate(bool value) {
  set_has_iscanrelocate();
  iscanrelocate_ = value;
}

// required bool IsCanDel = 6;
inline bool JK_CabinetSizeBoardInfo::has_iscandel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_iscandel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_iscandel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabinetSizeBoardInfo::clear_iscandel() {
  iscandel_ = false;
  clear_has_iscandel();
}
inline bool JK_CabinetSizeBoardInfo::iscandel() const {
  return iscandel_;
}
inline void JK_CabinetSizeBoardInfo::set_iscandel(bool value) {
  set_has_iscandel();
  iscandel_ = value;
}

// required int32 FactoryID = 7;
inline bool JK_CabinetSizeBoardInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabinetSizeBoardInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabinetSizeBoardInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabinetSizeBoardInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 CreateTime = 8;
inline bool JK_CabinetSizeBoardInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabinetSizeBoardInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_CabinetSizeBoardInfo::createtime() const {
  return createtime_;
}
inline void JK_CabinetSizeBoardInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int32 CreatorID = 9;
inline bool JK_CabinetSizeBoardInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabinetSizeBoardInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_CabinetSizeBoardInfo::creatorid() const {
  return creatorid_;
}
inline void JK_CabinetSizeBoardInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int64 UpdateTime = 10;
inline bool JK_CabinetSizeBoardInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabinetSizeBoardInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_CabinetSizeBoardInfo::updatetime() const {
  return updatetime_;
}
inline void JK_CabinetSizeBoardInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required int32 UpdaterID = 11;
inline bool JK_CabinetSizeBoardInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_CabinetSizeBoardInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_CabinetSizeBoardInfo::updaterid() const {
  return updaterid_;
}
inline void JK_CabinetSizeBoardInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int32 XDock = 12;
inline bool JK_CabinetSizeBoardInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_CabinetSizeBoardInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 JK_CabinetSizeBoardInfo::xdock() const {
  return xdock_;
}
inline void JK_CabinetSizeBoardInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 13;
inline bool JK_CabinetSizeBoardInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_CabinetSizeBoardInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 JK_CabinetSizeBoardInfo::ydock() const {
  return ydock_;
}
inline void JK_CabinetSizeBoardInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 14;
inline bool JK_CabinetSizeBoardInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_CabinetSizeBoardInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 JK_CabinetSizeBoardInfo::zdock() const {
  return zdock_;
}
inline void JK_CabinetSizeBoardInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required string XOffsetFormula = 15;
inline bool JK_CabinetSizeBoardInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_CabinetSizeBoardInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_CabinetSizeBoardInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_CabinetSizeBoardInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabinetSizeBoardInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_CabinetSizeBoardInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabinetSizeBoardInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_CabinetSizeBoardInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabinetSizeBoardInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 16;
inline bool JK_CabinetSizeBoardInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_CabinetSizeBoardInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_CabinetSizeBoardInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_CabinetSizeBoardInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabinetSizeBoardInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_CabinetSizeBoardInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabinetSizeBoardInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_CabinetSizeBoardInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabinetSizeBoardInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 17;
inline bool JK_CabinetSizeBoardInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_CabinetSizeBoardInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_CabinetSizeBoardInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_CabinetSizeBoardInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabinetSizeBoardInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_CabinetSizeBoardInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabinetSizeBoardInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_CabinetSizeBoardInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabinetSizeBoardInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabStructBoardName = 18;
inline bool JK_CabinetSizeBoardInfo::has_cabstructboardname() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_cabstructboardname() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_cabstructboardname() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_CabinetSizeBoardInfo::clear_cabstructboardname() {
  if (cabstructboardname_ != &::google::protobuf::internal::kEmptyString) {
    cabstructboardname_->clear();
  }
  clear_has_cabstructboardname();
}
inline const ::std::string& JK_CabinetSizeBoardInfo::cabstructboardname() const {
  return *cabstructboardname_;
}
inline void JK_CabinetSizeBoardInfo::set_cabstructboardname(const ::std::string& value) {
  set_has_cabstructboardname();
  if (cabstructboardname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructboardname_ = new ::std::string;
  }
  cabstructboardname_->assign(value);
}
inline void JK_CabinetSizeBoardInfo::set_cabstructboardname(const char* value) {
  set_has_cabstructboardname();
  if (cabstructboardname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructboardname_ = new ::std::string;
  }
  cabstructboardname_->assign(value);
}
inline void JK_CabinetSizeBoardInfo::set_cabstructboardname(const char* value, size_t size) {
  set_has_cabstructboardname();
  if (cabstructboardname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructboardname_ = new ::std::string;
  }
  cabstructboardname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabinetSizeBoardInfo::mutable_cabstructboardname() {
  set_has_cabstructboardname();
  if (cabstructboardname_ == &::google::protobuf::internal::kEmptyString) {
    cabstructboardname_ = new ::std::string;
  }
  return cabstructboardname_;
}
inline ::std::string* JK_CabinetSizeBoardInfo::release_cabstructboardname() {
  clear_has_cabstructboardname();
  if (cabstructboardname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabstructboardname_;
    cabstructboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabinetSizeBoardInfo::set_allocated_cabstructboardname(::std::string* cabstructboardname) {
  if (cabstructboardname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructboardname_;
  }
  if (cabstructboardname) {
    set_has_cabstructboardname();
    cabstructboardname_ = cabstructboardname;
  } else {
    clear_has_cabstructboardname();
    cabstructboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 19;
inline bool JK_CabinetSizeBoardInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_CabinetSizeBoardInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_CabinetSizeBoardInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_CabinetSizeBoardInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabinetSizeBoardInfo::vercode() const {
  return vercode_;
}
inline void JK_CabinetSizeBoardInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_CabinetSizeInfo

// required int32 CabDesignID = 1;
inline bool JK_CabinetSizeInfo::has_cabdesignid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_cabdesignid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabinetSizeInfo::clear_has_cabdesignid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabinetSizeInfo::clear_cabdesignid() {
  cabdesignid_ = 0;
  clear_has_cabdesignid();
}
inline ::google::protobuf::int32 JK_CabinetSizeInfo::cabdesignid() const {
  return cabdesignid_;
}
inline void JK_CabinetSizeInfo::set_cabdesignid(::google::protobuf::int32 value) {
  set_has_cabdesignid();
  cabdesignid_ = value;
}

// required bool IsDel = 2;
inline bool JK_CabinetSizeInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabinetSizeInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabinetSizeInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_CabinetSizeInfo::isdel() const {
  return isdel_;
}
inline void JK_CabinetSizeInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 CabinetSizeID = 3;
inline bool JK_CabinetSizeInfo::has_cabinetsizeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_cabinetsizeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabinetSizeInfo::clear_has_cabinetsizeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabinetSizeInfo::clear_cabinetsizeid() {
  cabinetsizeid_ = 0;
  clear_has_cabinetsizeid();
}
inline ::google::protobuf::int32 JK_CabinetSizeInfo::cabinetsizeid() const {
  return cabinetsizeid_;
}
inline void JK_CabinetSizeInfo::set_cabinetsizeid(::google::protobuf::int32 value) {
  set_has_cabinetsizeid();
  cabinetsizeid_ = value;
}

// required int32 PhotoID = 4;
inline bool JK_CabinetSizeInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabinetSizeInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabinetSizeInfo::clear_photoid() {
  photoid_ = 0;
  clear_has_photoid();
}
inline ::google::protobuf::int32 JK_CabinetSizeInfo::photoid() const {
  return photoid_;
}
inline void JK_CabinetSizeInfo::set_photoid(::google::protobuf::int32 value) {
  set_has_photoid();
  photoid_ = value;
}

// required double XLen = 5;
inline bool JK_CabinetSizeInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_CabinetSizeInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_CabinetSizeInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double JK_CabinetSizeInfo::xlen() const {
  return xlen_;
}
inline void JK_CabinetSizeInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 6;
inline bool JK_CabinetSizeInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_CabinetSizeInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_CabinetSizeInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double JK_CabinetSizeInfo::ylen() const {
  return ylen_;
}
inline void JK_CabinetSizeInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 7;
inline bool JK_CabinetSizeInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_CabinetSizeInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_CabinetSizeInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double JK_CabinetSizeInfo::zlen() const {
  return zlen_;
}
inline void JK_CabinetSizeInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required bool IsStandard = 8;
inline bool JK_CabinetSizeInfo::has_isstandard() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_isstandard() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_CabinetSizeInfo::clear_has_isstandard() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_CabinetSizeInfo::clear_isstandard() {
  isstandard_ = false;
  clear_has_isstandard();
}
inline bool JK_CabinetSizeInfo::isstandard() const {
  return isstandard_;
}
inline void JK_CabinetSizeInfo::set_isstandard(bool value) {
  set_has_isstandard();
  isstandard_ = value;
}

// required double MinXLen = 9;
inline bool JK_CabinetSizeInfo::has_minxlen() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_minxlen() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_CabinetSizeInfo::clear_has_minxlen() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_CabinetSizeInfo::clear_minxlen() {
  minxlen_ = 0;
  clear_has_minxlen();
}
inline double JK_CabinetSizeInfo::minxlen() const {
  return minxlen_;
}
inline void JK_CabinetSizeInfo::set_minxlen(double value) {
  set_has_minxlen();
  minxlen_ = value;
}

// required double MaxXLen = 10;
inline bool JK_CabinetSizeInfo::has_maxxlen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_maxxlen() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_CabinetSizeInfo::clear_has_maxxlen() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_CabinetSizeInfo::clear_maxxlen() {
  maxxlen_ = 0;
  clear_has_maxxlen();
}
inline double JK_CabinetSizeInfo::maxxlen() const {
  return maxxlen_;
}
inline void JK_CabinetSizeInfo::set_maxxlen(double value) {
  set_has_maxxlen();
  maxxlen_ = value;
}

// required double XLenStep = 11;
inline bool JK_CabinetSizeInfo::has_xlenstep() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_xlenstep() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_CabinetSizeInfo::clear_has_xlenstep() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_CabinetSizeInfo::clear_xlenstep() {
  xlenstep_ = 0;
  clear_has_xlenstep();
}
inline double JK_CabinetSizeInfo::xlenstep() const {
  return xlenstep_;
}
inline void JK_CabinetSizeInfo::set_xlenstep(double value) {
  set_has_xlenstep();
  xlenstep_ = value;
}

// required double MinYLen = 12;
inline bool JK_CabinetSizeInfo::has_minylen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_minylen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_CabinetSizeInfo::clear_has_minylen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_CabinetSizeInfo::clear_minylen() {
  minylen_ = 0;
  clear_has_minylen();
}
inline double JK_CabinetSizeInfo::minylen() const {
  return minylen_;
}
inline void JK_CabinetSizeInfo::set_minylen(double value) {
  set_has_minylen();
  minylen_ = value;
}

// required double MaxYLen = 13;
inline bool JK_CabinetSizeInfo::has_maxylen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_maxylen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_CabinetSizeInfo::clear_has_maxylen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_CabinetSizeInfo::clear_maxylen() {
  maxylen_ = 0;
  clear_has_maxylen();
}
inline double JK_CabinetSizeInfo::maxylen() const {
  return maxylen_;
}
inline void JK_CabinetSizeInfo::set_maxylen(double value) {
  set_has_maxylen();
  maxylen_ = value;
}

// required double YLenStep = 14;
inline bool JK_CabinetSizeInfo::has_ylenstep() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_ylenstep() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_CabinetSizeInfo::clear_has_ylenstep() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_CabinetSizeInfo::clear_ylenstep() {
  ylenstep_ = 0;
  clear_has_ylenstep();
}
inline double JK_CabinetSizeInfo::ylenstep() const {
  return ylenstep_;
}
inline void JK_CabinetSizeInfo::set_ylenstep(double value) {
  set_has_ylenstep();
  ylenstep_ = value;
}

// required double MinZLen = 15;
inline bool JK_CabinetSizeInfo::has_minzlen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_minzlen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_CabinetSizeInfo::clear_has_minzlen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_CabinetSizeInfo::clear_minzlen() {
  minzlen_ = 0;
  clear_has_minzlen();
}
inline double JK_CabinetSizeInfo::minzlen() const {
  return minzlen_;
}
inline void JK_CabinetSizeInfo::set_minzlen(double value) {
  set_has_minzlen();
  minzlen_ = value;
}

// required double MaxZLen = 16;
inline bool JK_CabinetSizeInfo::has_maxzlen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_maxzlen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_CabinetSizeInfo::clear_has_maxzlen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_CabinetSizeInfo::clear_maxzlen() {
  maxzlen_ = 0;
  clear_has_maxzlen();
}
inline double JK_CabinetSizeInfo::maxzlen() const {
  return maxzlen_;
}
inline void JK_CabinetSizeInfo::set_maxzlen(double value) {
  set_has_maxzlen();
  maxzlen_ = value;
}

// required double ZLenStep = 17;
inline bool JK_CabinetSizeInfo::has_zlenstep() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_zlenstep() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_CabinetSizeInfo::clear_has_zlenstep() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_CabinetSizeInfo::clear_zlenstep() {
  zlenstep_ = 0;
  clear_has_zlenstep();
}
inline double JK_CabinetSizeInfo::zlenstep() const {
  return zlenstep_;
}
inline void JK_CabinetSizeInfo::set_zlenstep(double value) {
  set_has_zlenstep();
  zlenstep_ = value;
}

// required double ShapeXLen = 18;
inline bool JK_CabinetSizeInfo::has_shapexlen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_shapexlen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_CabinetSizeInfo::clear_has_shapexlen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_CabinetSizeInfo::clear_shapexlen() {
  shapexlen_ = 0;
  clear_has_shapexlen();
}
inline double JK_CabinetSizeInfo::shapexlen() const {
  return shapexlen_;
}
inline void JK_CabinetSizeInfo::set_shapexlen(double value) {
  set_has_shapexlen();
  shapexlen_ = value;
}

// required double ShapeZLen = 19;
inline bool JK_CabinetSizeInfo::has_shapezlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_shapezlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_CabinetSizeInfo::clear_has_shapezlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_CabinetSizeInfo::clear_shapezlen() {
  shapezlen_ = 0;
  clear_has_shapezlen();
}
inline double JK_CabinetSizeInfo::shapezlen() const {
  return shapezlen_;
}
inline void JK_CabinetSizeInfo::set_shapezlen(double value) {
  set_has_shapezlen();
  shapezlen_ = value;
}

// required double GapXLen = 20;
inline bool JK_CabinetSizeInfo::has_gapxlen() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_gapxlen() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_CabinetSizeInfo::clear_has_gapxlen() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_CabinetSizeInfo::clear_gapxlen() {
  gapxlen_ = 0;
  clear_has_gapxlen();
}
inline double JK_CabinetSizeInfo::gapxlen() const {
  return gapxlen_;
}
inline void JK_CabinetSizeInfo::set_gapxlen(double value) {
  set_has_gapxlen();
  gapxlen_ = value;
}

// required double GapYLen = 21;
inline bool JK_CabinetSizeInfo::has_gapylen() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_gapylen() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_CabinetSizeInfo::clear_has_gapylen() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_CabinetSizeInfo::clear_gapylen() {
  gapylen_ = 0;
  clear_has_gapylen();
}
inline double JK_CabinetSizeInfo::gapylen() const {
  return gapylen_;
}
inline void JK_CabinetSizeInfo::set_gapylen(double value) {
  set_has_gapylen();
  gapylen_ = value;
}

// required double GapZLen = 22;
inline bool JK_CabinetSizeInfo::has_gapzlen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_gapzlen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_CabinetSizeInfo::clear_has_gapzlen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_CabinetSizeInfo::clear_gapzlen() {
  gapzlen_ = 0;
  clear_has_gapzlen();
}
inline double JK_CabinetSizeInfo::gapzlen() const {
  return gapzlen_;
}
inline void JK_CabinetSizeInfo::set_gapzlen(double value) {
  set_has_gapzlen();
  gapzlen_ = value;
}

// required double ShapeMinXLen = 23;
inline bool JK_CabinetSizeInfo::has_shapeminxlen() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_shapeminxlen() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_CabinetSizeInfo::clear_has_shapeminxlen() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_CabinetSizeInfo::clear_shapeminxlen() {
  shapeminxlen_ = 0;
  clear_has_shapeminxlen();
}
inline double JK_CabinetSizeInfo::shapeminxlen() const {
  return shapeminxlen_;
}
inline void JK_CabinetSizeInfo::set_shapeminxlen(double value) {
  set_has_shapeminxlen();
  shapeminxlen_ = value;
}

// required double ShapeMaxXLen = 24;
inline bool JK_CabinetSizeInfo::has_shapemaxxlen() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_shapemaxxlen() {
  _has_bits_[0] |= 0x00800000u;
}
inline void JK_CabinetSizeInfo::clear_has_shapemaxxlen() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void JK_CabinetSizeInfo::clear_shapemaxxlen() {
  shapemaxxlen_ = 0;
  clear_has_shapemaxxlen();
}
inline double JK_CabinetSizeInfo::shapemaxxlen() const {
  return shapemaxxlen_;
}
inline void JK_CabinetSizeInfo::set_shapemaxxlen(double value) {
  set_has_shapemaxxlen();
  shapemaxxlen_ = value;
}

// required double ShapeXLenStep = 25;
inline bool JK_CabinetSizeInfo::has_shapexlenstep() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_shapexlenstep() {
  _has_bits_[0] |= 0x01000000u;
}
inline void JK_CabinetSizeInfo::clear_has_shapexlenstep() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void JK_CabinetSizeInfo::clear_shapexlenstep() {
  shapexlenstep_ = 0;
  clear_has_shapexlenstep();
}
inline double JK_CabinetSizeInfo::shapexlenstep() const {
  return shapexlenstep_;
}
inline void JK_CabinetSizeInfo::set_shapexlenstep(double value) {
  set_has_shapexlenstep();
  shapexlenstep_ = value;
}

// required double ShapeMinZLen = 26;
inline bool JK_CabinetSizeInfo::has_shapeminzlen() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_shapeminzlen() {
  _has_bits_[0] |= 0x02000000u;
}
inline void JK_CabinetSizeInfo::clear_has_shapeminzlen() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void JK_CabinetSizeInfo::clear_shapeminzlen() {
  shapeminzlen_ = 0;
  clear_has_shapeminzlen();
}
inline double JK_CabinetSizeInfo::shapeminzlen() const {
  return shapeminzlen_;
}
inline void JK_CabinetSizeInfo::set_shapeminzlen(double value) {
  set_has_shapeminzlen();
  shapeminzlen_ = value;
}

// required double ShapeMaxZLen = 27;
inline bool JK_CabinetSizeInfo::has_shapemaxzlen() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_shapemaxzlen() {
  _has_bits_[0] |= 0x04000000u;
}
inline void JK_CabinetSizeInfo::clear_has_shapemaxzlen() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void JK_CabinetSizeInfo::clear_shapemaxzlen() {
  shapemaxzlen_ = 0;
  clear_has_shapemaxzlen();
}
inline double JK_CabinetSizeInfo::shapemaxzlen() const {
  return shapemaxzlen_;
}
inline void JK_CabinetSizeInfo::set_shapemaxzlen(double value) {
  set_has_shapemaxzlen();
  shapemaxzlen_ = value;
}

// required double ShapeZLenStep = 28;
inline bool JK_CabinetSizeInfo::has_shapezlenstep() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_shapezlenstep() {
  _has_bits_[0] |= 0x08000000u;
}
inline void JK_CabinetSizeInfo::clear_has_shapezlenstep() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void JK_CabinetSizeInfo::clear_shapezlenstep() {
  shapezlenstep_ = 0;
  clear_has_shapezlenstep();
}
inline double JK_CabinetSizeInfo::shapezlenstep() const {
  return shapezlenstep_;
}
inline void JK_CabinetSizeInfo::set_shapezlenstep(double value) {
  set_has_shapezlenstep();
  shapezlenstep_ = value;
}

// required double GapMinXLen = 29;
inline bool JK_CabinetSizeInfo::has_gapminxlen() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_gapminxlen() {
  _has_bits_[0] |= 0x10000000u;
}
inline void JK_CabinetSizeInfo::clear_has_gapminxlen() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void JK_CabinetSizeInfo::clear_gapminxlen() {
  gapminxlen_ = 0;
  clear_has_gapminxlen();
}
inline double JK_CabinetSizeInfo::gapminxlen() const {
  return gapminxlen_;
}
inline void JK_CabinetSizeInfo::set_gapminxlen(double value) {
  set_has_gapminxlen();
  gapminxlen_ = value;
}

// required double GapMaxXLen = 30;
inline bool JK_CabinetSizeInfo::has_gapmaxxlen() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_gapmaxxlen() {
  _has_bits_[0] |= 0x20000000u;
}
inline void JK_CabinetSizeInfo::clear_has_gapmaxxlen() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void JK_CabinetSizeInfo::clear_gapmaxxlen() {
  gapmaxxlen_ = 0;
  clear_has_gapmaxxlen();
}
inline double JK_CabinetSizeInfo::gapmaxxlen() const {
  return gapmaxxlen_;
}
inline void JK_CabinetSizeInfo::set_gapmaxxlen(double value) {
  set_has_gapmaxxlen();
  gapmaxxlen_ = value;
}

// required double GapXLenStep = 31;
inline bool JK_CabinetSizeInfo::has_gapxlenstep() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_gapxlenstep() {
  _has_bits_[0] |= 0x40000000u;
}
inline void JK_CabinetSizeInfo::clear_has_gapxlenstep() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void JK_CabinetSizeInfo::clear_gapxlenstep() {
  gapxlenstep_ = 0;
  clear_has_gapxlenstep();
}
inline double JK_CabinetSizeInfo::gapxlenstep() const {
  return gapxlenstep_;
}
inline void JK_CabinetSizeInfo::set_gapxlenstep(double value) {
  set_has_gapxlenstep();
  gapxlenstep_ = value;
}

// required double GapMinYLen = 32;
inline bool JK_CabinetSizeInfo::has_gapminylen() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_gapminylen() {
  _has_bits_[0] |= 0x80000000u;
}
inline void JK_CabinetSizeInfo::clear_has_gapminylen() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void JK_CabinetSizeInfo::clear_gapminylen() {
  gapminylen_ = 0;
  clear_has_gapminylen();
}
inline double JK_CabinetSizeInfo::gapminylen() const {
  return gapminylen_;
}
inline void JK_CabinetSizeInfo::set_gapminylen(double value) {
  set_has_gapminylen();
  gapminylen_ = value;
}

// required double GapMaxYLen = 33;
inline bool JK_CabinetSizeInfo::has_gapmaxylen() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_gapmaxylen() {
  _has_bits_[1] |= 0x00000001u;
}
inline void JK_CabinetSizeInfo::clear_has_gapmaxylen() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void JK_CabinetSizeInfo::clear_gapmaxylen() {
  gapmaxylen_ = 0;
  clear_has_gapmaxylen();
}
inline double JK_CabinetSizeInfo::gapmaxylen() const {
  return gapmaxylen_;
}
inline void JK_CabinetSizeInfo::set_gapmaxylen(double value) {
  set_has_gapmaxylen();
  gapmaxylen_ = value;
}

// required double GapYLenStep = 34;
inline bool JK_CabinetSizeInfo::has_gapylenstep() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_gapylenstep() {
  _has_bits_[1] |= 0x00000002u;
}
inline void JK_CabinetSizeInfo::clear_has_gapylenstep() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void JK_CabinetSizeInfo::clear_gapylenstep() {
  gapylenstep_ = 0;
  clear_has_gapylenstep();
}
inline double JK_CabinetSizeInfo::gapylenstep() const {
  return gapylenstep_;
}
inline void JK_CabinetSizeInfo::set_gapylenstep(double value) {
  set_has_gapylenstep();
  gapylenstep_ = value;
}

// required double GapMinZLen = 35;
inline bool JK_CabinetSizeInfo::has_gapminzlen() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_gapminzlen() {
  _has_bits_[1] |= 0x00000004u;
}
inline void JK_CabinetSizeInfo::clear_has_gapminzlen() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void JK_CabinetSizeInfo::clear_gapminzlen() {
  gapminzlen_ = 0;
  clear_has_gapminzlen();
}
inline double JK_CabinetSizeInfo::gapminzlen() const {
  return gapminzlen_;
}
inline void JK_CabinetSizeInfo::set_gapminzlen(double value) {
  set_has_gapminzlen();
  gapminzlen_ = value;
}

// required double GapMaxZLen = 36;
inline bool JK_CabinetSizeInfo::has_gapmaxzlen() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_gapmaxzlen() {
  _has_bits_[1] |= 0x00000008u;
}
inline void JK_CabinetSizeInfo::clear_has_gapmaxzlen() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void JK_CabinetSizeInfo::clear_gapmaxzlen() {
  gapmaxzlen_ = 0;
  clear_has_gapmaxzlen();
}
inline double JK_CabinetSizeInfo::gapmaxzlen() const {
  return gapmaxzlen_;
}
inline void JK_CabinetSizeInfo::set_gapmaxzlen(double value) {
  set_has_gapmaxzlen();
  gapmaxzlen_ = value;
}

// required double GapZLenStep = 37;
inline bool JK_CabinetSizeInfo::has_gapzlenstep() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_gapzlenstep() {
  _has_bits_[1] |= 0x00000010u;
}
inline void JK_CabinetSizeInfo::clear_has_gapzlenstep() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void JK_CabinetSizeInfo::clear_gapzlenstep() {
  gapzlenstep_ = 0;
  clear_has_gapzlenstep();
}
inline double JK_CabinetSizeInfo::gapzlenstep() const {
  return gapzlenstep_;
}
inline void JK_CabinetSizeInfo::set_gapzlenstep(double value) {
  set_has_gapzlenstep();
  gapzlenstep_ = value;
}

// required int32 FootCount = 38;
inline bool JK_CabinetSizeInfo::has_footcount() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_footcount() {
  _has_bits_[1] |= 0x00000020u;
}
inline void JK_CabinetSizeInfo::clear_has_footcount() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void JK_CabinetSizeInfo::clear_footcount() {
  footcount_ = 0;
  clear_has_footcount();
}
inline ::google::protobuf::int32 JK_CabinetSizeInfo::footcount() const {
  return footcount_;
}
inline void JK_CabinetSizeInfo::set_footcount(::google::protobuf::int32 value) {
  set_has_footcount();
  footcount_ = value;
}

// required bool IsSysFootRule = 39;
inline bool JK_CabinetSizeInfo::has_issysfootrule() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_issysfootrule() {
  _has_bits_[1] |= 0x00000040u;
}
inline void JK_CabinetSizeInfo::clear_has_issysfootrule() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void JK_CabinetSizeInfo::clear_issysfootrule() {
  issysfootrule_ = false;
  clear_has_issysfootrule();
}
inline bool JK_CabinetSizeInfo::issysfootrule() const {
  return issysfootrule_;
}
inline void JK_CabinetSizeInfo::set_issysfootrule(bool value) {
  set_has_issysfootrule();
  issysfootrule_ = value;
}

// required int32 FactoryID = 40;
inline bool JK_CabinetSizeInfo::has_factoryid() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_factoryid() {
  _has_bits_[1] |= 0x00000080u;
}
inline void JK_CabinetSizeInfo::clear_has_factoryid() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void JK_CabinetSizeInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabinetSizeInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabinetSizeInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 41;
inline bool JK_CabinetSizeInfo::has_creatorid() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_creatorid() {
  _has_bits_[1] |= 0x00000100u;
}
inline void JK_CabinetSizeInfo::clear_has_creatorid() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void JK_CabinetSizeInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_CabinetSizeInfo::creatorid() const {
  return creatorid_;
}
inline void JK_CabinetSizeInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 42;
inline bool JK_CabinetSizeInfo::has_updaterid() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_updaterid() {
  _has_bits_[1] |= 0x00000200u;
}
inline void JK_CabinetSizeInfo::clear_has_updaterid() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void JK_CabinetSizeInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_CabinetSizeInfo::updaterid() const {
  return updaterid_;
}
inline void JK_CabinetSizeInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 43;
inline bool JK_CabinetSizeInfo::has_createtime() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_createtime() {
  _has_bits_[1] |= 0x00000400u;
}
inline void JK_CabinetSizeInfo::clear_has_createtime() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void JK_CabinetSizeInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_CabinetSizeInfo::createtime() const {
  return createtime_;
}
inline void JK_CabinetSizeInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 44;
inline bool JK_CabinetSizeInfo::has_updatetime() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_updatetime() {
  _has_bits_[1] |= 0x00000800u;
}
inline void JK_CabinetSizeInfo::clear_has_updatetime() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void JK_CabinetSizeInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_CabinetSizeInfo::updatetime() const {
  return updatetime_;
}
inline void JK_CabinetSizeInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string CabinetSizeCode = 45;
inline bool JK_CabinetSizeInfo::has_cabinetsizecode() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_cabinetsizecode() {
  _has_bits_[1] |= 0x00001000u;
}
inline void JK_CabinetSizeInfo::clear_has_cabinetsizecode() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void JK_CabinetSizeInfo::clear_cabinetsizecode() {
  if (cabinetsizecode_ != &::google::protobuf::internal::kEmptyString) {
    cabinetsizecode_->clear();
  }
  clear_has_cabinetsizecode();
}
inline const ::std::string& JK_CabinetSizeInfo::cabinetsizecode() const {
  return *cabinetsizecode_;
}
inline void JK_CabinetSizeInfo::set_cabinetsizecode(const ::std::string& value) {
  set_has_cabinetsizecode();
  if (cabinetsizecode_ == &::google::protobuf::internal::kEmptyString) {
    cabinetsizecode_ = new ::std::string;
  }
  cabinetsizecode_->assign(value);
}
inline void JK_CabinetSizeInfo::set_cabinetsizecode(const char* value) {
  set_has_cabinetsizecode();
  if (cabinetsizecode_ == &::google::protobuf::internal::kEmptyString) {
    cabinetsizecode_ = new ::std::string;
  }
  cabinetsizecode_->assign(value);
}
inline void JK_CabinetSizeInfo::set_cabinetsizecode(const char* value, size_t size) {
  set_has_cabinetsizecode();
  if (cabinetsizecode_ == &::google::protobuf::internal::kEmptyString) {
    cabinetsizecode_ = new ::std::string;
  }
  cabinetsizecode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabinetSizeInfo::mutable_cabinetsizecode() {
  set_has_cabinetsizecode();
  if (cabinetsizecode_ == &::google::protobuf::internal::kEmptyString) {
    cabinetsizecode_ = new ::std::string;
  }
  return cabinetsizecode_;
}
inline ::std::string* JK_CabinetSizeInfo::release_cabinetsizecode() {
  clear_has_cabinetsizecode();
  if (cabinetsizecode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabinetsizecode_;
    cabinetsizecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabinetSizeInfo::set_allocated_cabinetsizecode(::std::string* cabinetsizecode) {
  if (cabinetsizecode_ != &::google::protobuf::internal::kEmptyString) {
    delete cabinetsizecode_;
  }
  if (cabinetsizecode) {
    set_has_cabinetsizecode();
    cabinetsizecode_ = cabinetsizecode;
  } else {
    clear_has_cabinetsizecode();
    cabinetsizecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabinetSizeName = 46;
inline bool JK_CabinetSizeInfo::has_cabinetsizename() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_cabinetsizename() {
  _has_bits_[1] |= 0x00002000u;
}
inline void JK_CabinetSizeInfo::clear_has_cabinetsizename() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void JK_CabinetSizeInfo::clear_cabinetsizename() {
  if (cabinetsizename_ != &::google::protobuf::internal::kEmptyString) {
    cabinetsizename_->clear();
  }
  clear_has_cabinetsizename();
}
inline const ::std::string& JK_CabinetSizeInfo::cabinetsizename() const {
  return *cabinetsizename_;
}
inline void JK_CabinetSizeInfo::set_cabinetsizename(const ::std::string& value) {
  set_has_cabinetsizename();
  if (cabinetsizename_ == &::google::protobuf::internal::kEmptyString) {
    cabinetsizename_ = new ::std::string;
  }
  cabinetsizename_->assign(value);
}
inline void JK_CabinetSizeInfo::set_cabinetsizename(const char* value) {
  set_has_cabinetsizename();
  if (cabinetsizename_ == &::google::protobuf::internal::kEmptyString) {
    cabinetsizename_ = new ::std::string;
  }
  cabinetsizename_->assign(value);
}
inline void JK_CabinetSizeInfo::set_cabinetsizename(const char* value, size_t size) {
  set_has_cabinetsizename();
  if (cabinetsizename_ == &::google::protobuf::internal::kEmptyString) {
    cabinetsizename_ = new ::std::string;
  }
  cabinetsizename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabinetSizeInfo::mutable_cabinetsizename() {
  set_has_cabinetsizename();
  if (cabinetsizename_ == &::google::protobuf::internal::kEmptyString) {
    cabinetsizename_ = new ::std::string;
  }
  return cabinetsizename_;
}
inline ::std::string* JK_CabinetSizeInfo::release_cabinetsizename() {
  clear_has_cabinetsizename();
  if (cabinetsizename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabinetsizename_;
    cabinetsizename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabinetSizeInfo::set_allocated_cabinetsizename(::std::string* cabinetsizename) {
  if (cabinetsizename_ != &::google::protobuf::internal::kEmptyString) {
    delete cabinetsizename_;
  }
  if (cabinetsizename) {
    set_has_cabinetsizename();
    cabinetsizename_ = cabinetsizename;
  } else {
    clear_has_cabinetsizename();
    cabinetsizename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabinetSizeMemo = 47;
inline bool JK_CabinetSizeInfo::has_cabinetsizememo() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_cabinetsizememo() {
  _has_bits_[1] |= 0x00004000u;
}
inline void JK_CabinetSizeInfo::clear_has_cabinetsizememo() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void JK_CabinetSizeInfo::clear_cabinetsizememo() {
  if (cabinetsizememo_ != &::google::protobuf::internal::kEmptyString) {
    cabinetsizememo_->clear();
  }
  clear_has_cabinetsizememo();
}
inline const ::std::string& JK_CabinetSizeInfo::cabinetsizememo() const {
  return *cabinetsizememo_;
}
inline void JK_CabinetSizeInfo::set_cabinetsizememo(const ::std::string& value) {
  set_has_cabinetsizememo();
  if (cabinetsizememo_ == &::google::protobuf::internal::kEmptyString) {
    cabinetsizememo_ = new ::std::string;
  }
  cabinetsizememo_->assign(value);
}
inline void JK_CabinetSizeInfo::set_cabinetsizememo(const char* value) {
  set_has_cabinetsizememo();
  if (cabinetsizememo_ == &::google::protobuf::internal::kEmptyString) {
    cabinetsizememo_ = new ::std::string;
  }
  cabinetsizememo_->assign(value);
}
inline void JK_CabinetSizeInfo::set_cabinetsizememo(const char* value, size_t size) {
  set_has_cabinetsizememo();
  if (cabinetsizememo_ == &::google::protobuf::internal::kEmptyString) {
    cabinetsizememo_ = new ::std::string;
  }
  cabinetsizememo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_CabinetSizeInfo::mutable_cabinetsizememo() {
  set_has_cabinetsizememo();
  if (cabinetsizememo_ == &::google::protobuf::internal::kEmptyString) {
    cabinetsizememo_ = new ::std::string;
  }
  return cabinetsizememo_;
}
inline ::std::string* JK_CabinetSizeInfo::release_cabinetsizememo() {
  clear_has_cabinetsizememo();
  if (cabinetsizememo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabinetsizememo_;
    cabinetsizememo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_CabinetSizeInfo::set_allocated_cabinetsizememo(::std::string* cabinetsizememo) {
  if (cabinetsizememo_ != &::google::protobuf::internal::kEmptyString) {
    delete cabinetsizememo_;
  }
  if (cabinetsizememo) {
    set_has_cabinetsizememo();
    cabinetsizememo_ = cabinetsizememo;
  } else {
    clear_has_cabinetsizememo();
    cabinetsizememo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 48;
inline bool JK_CabinetSizeInfo::has_vercode() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void JK_CabinetSizeInfo::set_has_vercode() {
  _has_bits_[1] |= 0x00008000u;
}
inline void JK_CabinetSizeInfo::clear_has_vercode() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void JK_CabinetSizeInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabinetSizeInfo::vercode() const {
  return vercode_;
}
inline void JK_CabinetSizeInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_CabinetSizeStructBoardInfo

// required int32 CabStructBoardID = 1;
inline bool JK_CabinetSizeStructBoardInfo::has_cabstructboardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_CabinetSizeStructBoardInfo::set_has_cabstructboardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_CabinetSizeStructBoardInfo::clear_has_cabstructboardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_CabinetSizeStructBoardInfo::clear_cabstructboardid() {
  cabstructboardid_ = 0;
  clear_has_cabstructboardid();
}
inline ::google::protobuf::int32 JK_CabinetSizeStructBoardInfo::cabstructboardid() const {
  return cabstructboardid_;
}
inline void JK_CabinetSizeStructBoardInfo::set_cabstructboardid(::google::protobuf::int32 value) {
  set_has_cabstructboardid();
  cabstructboardid_ = value;
}

// required int32 CabinetSizeID = 2;
inline bool JK_CabinetSizeStructBoardInfo::has_cabinetsizeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_CabinetSizeStructBoardInfo::set_has_cabinetsizeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_CabinetSizeStructBoardInfo::clear_has_cabinetsizeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_CabinetSizeStructBoardInfo::clear_cabinetsizeid() {
  cabinetsizeid_ = 0;
  clear_has_cabinetsizeid();
}
inline ::google::protobuf::int32 JK_CabinetSizeStructBoardInfo::cabinetsizeid() const {
  return cabinetsizeid_;
}
inline void JK_CabinetSizeStructBoardInfo::set_cabinetsizeid(::google::protobuf::int32 value) {
  set_has_cabinetsizeid();
  cabinetsizeid_ = value;
}

// required int64 VerCode = 3;
inline bool JK_CabinetSizeStructBoardInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_CabinetSizeStructBoardInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_CabinetSizeStructBoardInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_CabinetSizeStructBoardInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_CabinetSizeStructBoardInfo::vercode() const {
  return vercode_;
}
inline void JK_CabinetSizeStructBoardInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 4;
inline bool JK_CabinetSizeStructBoardInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_CabinetSizeStructBoardInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_CabinetSizeStructBoardInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_CabinetSizeStructBoardInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_CabinetSizeStructBoardInfo::factoryid() const {
  return factoryid_;
}
inline void JK_CabinetSizeStructBoardInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_DecorBoardFrameMapInfo

// required int32 DecorBoardID = 1;
inline bool JK_DecorBoardFrameMapInfo::has_decorboardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DecorBoardFrameMapInfo::set_has_decorboardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DecorBoardFrameMapInfo::clear_has_decorboardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DecorBoardFrameMapInfo::clear_decorboardid() {
  decorboardid_ = 0;
  clear_has_decorboardid();
}
inline ::google::protobuf::int32 JK_DecorBoardFrameMapInfo::decorboardid() const {
  return decorboardid_;
}
inline void JK_DecorBoardFrameMapInfo::set_decorboardid(::google::protobuf::int32 value) {
  set_has_decorboardid();
  decorboardid_ = value;
}

// required int32 DecorFrameID = 2;
inline bool JK_DecorBoardFrameMapInfo::has_decorframeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DecorBoardFrameMapInfo::set_has_decorframeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DecorBoardFrameMapInfo::clear_has_decorframeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DecorBoardFrameMapInfo::clear_decorframeid() {
  decorframeid_ = 0;
  clear_has_decorframeid();
}
inline ::google::protobuf::int32 JK_DecorBoardFrameMapInfo::decorframeid() const {
  return decorframeid_;
}
inline void JK_DecorBoardFrameMapInfo::set_decorframeid(::google::protobuf::int32 value) {
  set_has_decorframeid();
  decorframeid_ = value;
}

// required bool IsDefault = 3;
inline bool JK_DecorBoardFrameMapInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DecorBoardFrameMapInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DecorBoardFrameMapInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DecorBoardFrameMapInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_DecorBoardFrameMapInfo::isdefault() const {
  return isdefault_;
}
inline void JK_DecorBoardFrameMapInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 4;
inline bool JK_DecorBoardFrameMapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DecorBoardFrameMapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DecorBoardFrameMapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DecorBoardFrameMapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DecorBoardFrameMapInfo::vercode() const {
  return vercode_;
}
inline void JK_DecorBoardFrameMapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_DecorBoardFrameMapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DecorBoardFrameMapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DecorBoardFrameMapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DecorBoardFrameMapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DecorBoardFrameMapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DecorBoardFrameMapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_DecorBoardInfo

// required int32 DecorBoardID = 1;
inline bool JK_DecorBoardInfo::has_decorboardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DecorBoardInfo::set_has_decorboardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DecorBoardInfo::clear_has_decorboardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DecorBoardInfo::clear_decorboardid() {
  decorboardid_ = 0;
  clear_has_decorboardid();
}
inline ::google::protobuf::int32 JK_DecorBoardInfo::decorboardid() const {
  return decorboardid_;
}
inline void JK_DecorBoardInfo::set_decorboardid(::google::protobuf::int32 value) {
  set_has_decorboardid();
  decorboardid_ = value;
}

// required int32 FactoryID = 2;
inline bool JK_DecorBoardInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DecorBoardInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DecorBoardInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DecorBoardInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DecorBoardInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DecorBoardInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 GroupID = 3;
inline bool JK_DecorBoardInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DecorBoardInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DecorBoardInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DecorBoardInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_DecorBoardInfo::groupid() const {
  return groupid_;
}
inline void JK_DecorBoardInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required bool IsDel = 4;
inline bool JK_DecorBoardInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DecorBoardInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DecorBoardInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DecorBoardInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_DecorBoardInfo::isdel() const {
  return isdel_;
}
inline void JK_DecorBoardInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsActive = 5;
inline bool JK_DecorBoardInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DecorBoardInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DecorBoardInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DecorBoardInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_DecorBoardInfo::isactive() const {
  return isactive_;
}
inline void JK_DecorBoardInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required int32 CreatorID = 6;
inline bool JK_DecorBoardInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DecorBoardInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DecorBoardInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DecorBoardInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_DecorBoardInfo::creatorid() const {
  return creatorid_;
}
inline void JK_DecorBoardInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 7;
inline bool JK_DecorBoardInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DecorBoardInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DecorBoardInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DecorBoardInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_DecorBoardInfo::updaterid() const {
  return updaterid_;
}
inline void JK_DecorBoardInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 8;
inline bool JK_DecorBoardInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DecorBoardInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DecorBoardInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DecorBoardInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_DecorBoardInfo::createtime() const {
  return createtime_;
}
inline void JK_DecorBoardInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 9;
inline bool JK_DecorBoardInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_DecorBoardInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_DecorBoardInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_DecorBoardInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_DecorBoardInfo::updatetime() const {
  return updatetime_;
}
inline void JK_DecorBoardInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required int32 SourceType = 10;
inline bool JK_DecorBoardInfo::has_sourcetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_DecorBoardInfo::set_has_sourcetype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_DecorBoardInfo::clear_has_sourcetype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_DecorBoardInfo::clear_sourcetype() {
  sourcetype_ = 0;
  clear_has_sourcetype();
}
inline ::google::protobuf::int32 JK_DecorBoardInfo::sourcetype() const {
  return sourcetype_;
}
inline void JK_DecorBoardInfo::set_sourcetype(::google::protobuf::int32 value) {
  set_has_sourcetype();
  sourcetype_ = value;
}

// required double DefaultYPos = 11;
inline bool JK_DecorBoardInfo::has_defaultypos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_DecorBoardInfo::set_has_defaultypos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_DecorBoardInfo::clear_has_defaultypos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_DecorBoardInfo::clear_defaultypos() {
  defaultypos_ = 0;
  clear_has_defaultypos();
}
inline double JK_DecorBoardInfo::defaultypos() const {
  return defaultypos_;
}
inline void JK_DecorBoardInfo::set_defaultypos(double value) {
  set_has_defaultypos();
  defaultypos_ = value;
}

// required string DecorBoardCode = 12;
inline bool JK_DecorBoardInfo::has_decorboardcode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_DecorBoardInfo::set_has_decorboardcode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_DecorBoardInfo::clear_has_decorboardcode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_DecorBoardInfo::clear_decorboardcode() {
  if (decorboardcode_ != &::google::protobuf::internal::kEmptyString) {
    decorboardcode_->clear();
  }
  clear_has_decorboardcode();
}
inline const ::std::string& JK_DecorBoardInfo::decorboardcode() const {
  return *decorboardcode_;
}
inline void JK_DecorBoardInfo::set_decorboardcode(const ::std::string& value) {
  set_has_decorboardcode();
  if (decorboardcode_ == &::google::protobuf::internal::kEmptyString) {
    decorboardcode_ = new ::std::string;
  }
  decorboardcode_->assign(value);
}
inline void JK_DecorBoardInfo::set_decorboardcode(const char* value) {
  set_has_decorboardcode();
  if (decorboardcode_ == &::google::protobuf::internal::kEmptyString) {
    decorboardcode_ = new ::std::string;
  }
  decorboardcode_->assign(value);
}
inline void JK_DecorBoardInfo::set_decorboardcode(const char* value, size_t size) {
  set_has_decorboardcode();
  if (decorboardcode_ == &::google::protobuf::internal::kEmptyString) {
    decorboardcode_ = new ::std::string;
  }
  decorboardcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardInfo::mutable_decorboardcode() {
  set_has_decorboardcode();
  if (decorboardcode_ == &::google::protobuf::internal::kEmptyString) {
    decorboardcode_ = new ::std::string;
  }
  return decorboardcode_;
}
inline ::std::string* JK_DecorBoardInfo::release_decorboardcode() {
  clear_has_decorboardcode();
  if (decorboardcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = decorboardcode_;
    decorboardcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardInfo::set_allocated_decorboardcode(::std::string* decorboardcode) {
  if (decorboardcode_ != &::google::protobuf::internal::kEmptyString) {
    delete decorboardcode_;
  }
  if (decorboardcode) {
    set_has_decorboardcode();
    decorboardcode_ = decorboardcode;
  } else {
    clear_has_decorboardcode();
    decorboardcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DecorBoardName = 13;
inline bool JK_DecorBoardInfo::has_decorboardname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_decorboardname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_DecorBoardInfo::clear_has_decorboardname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_DecorBoardInfo::clear_decorboardname() {
  if (decorboardname_ != &::google::protobuf::internal::kEmptyString) {
    decorboardname_->clear();
  }
  clear_has_decorboardname();
}
inline const ::std::string& JK_DecorBoardInfo::decorboardname() const {
  return *decorboardname_;
}
inline void JK_DecorBoardInfo::set_decorboardname(const ::std::string& value) {
  set_has_decorboardname();
  if (decorboardname_ == &::google::protobuf::internal::kEmptyString) {
    decorboardname_ = new ::std::string;
  }
  decorboardname_->assign(value);
}
inline void JK_DecorBoardInfo::set_decorboardname(const char* value) {
  set_has_decorboardname();
  if (decorboardname_ == &::google::protobuf::internal::kEmptyString) {
    decorboardname_ = new ::std::string;
  }
  decorboardname_->assign(value);
}
inline void JK_DecorBoardInfo::set_decorboardname(const char* value, size_t size) {
  set_has_decorboardname();
  if (decorboardname_ == &::google::protobuf::internal::kEmptyString) {
    decorboardname_ = new ::std::string;
  }
  decorboardname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardInfo::mutable_decorboardname() {
  set_has_decorboardname();
  if (decorboardname_ == &::google::protobuf::internal::kEmptyString) {
    decorboardname_ = new ::std::string;
  }
  return decorboardname_;
}
inline ::std::string* JK_DecorBoardInfo::release_decorboardname() {
  clear_has_decorboardname();
  if (decorboardname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = decorboardname_;
    decorboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardInfo::set_allocated_decorboardname(::std::string* decorboardname) {
  if (decorboardname_ != &::google::protobuf::internal::kEmptyString) {
    delete decorboardname_;
  }
  if (decorboardname) {
    set_has_decorboardname();
    decorboardname_ = decorboardname;
  } else {
    clear_has_decorboardname();
    decorboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DecorBoardMemo = 14;
inline bool JK_DecorBoardInfo::has_decorboardmemo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_decorboardmemo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_DecorBoardInfo::clear_has_decorboardmemo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_DecorBoardInfo::clear_decorboardmemo() {
  if (decorboardmemo_ != &::google::protobuf::internal::kEmptyString) {
    decorboardmemo_->clear();
  }
  clear_has_decorboardmemo();
}
inline const ::std::string& JK_DecorBoardInfo::decorboardmemo() const {
  return *decorboardmemo_;
}
inline void JK_DecorBoardInfo::set_decorboardmemo(const ::std::string& value) {
  set_has_decorboardmemo();
  if (decorboardmemo_ == &::google::protobuf::internal::kEmptyString) {
    decorboardmemo_ = new ::std::string;
  }
  decorboardmemo_->assign(value);
}
inline void JK_DecorBoardInfo::set_decorboardmemo(const char* value) {
  set_has_decorboardmemo();
  if (decorboardmemo_ == &::google::protobuf::internal::kEmptyString) {
    decorboardmemo_ = new ::std::string;
  }
  decorboardmemo_->assign(value);
}
inline void JK_DecorBoardInfo::set_decorboardmemo(const char* value, size_t size) {
  set_has_decorboardmemo();
  if (decorboardmemo_ == &::google::protobuf::internal::kEmptyString) {
    decorboardmemo_ = new ::std::string;
  }
  decorboardmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardInfo::mutable_decorboardmemo() {
  set_has_decorboardmemo();
  if (decorboardmemo_ == &::google::protobuf::internal::kEmptyString) {
    decorboardmemo_ = new ::std::string;
  }
  return decorboardmemo_;
}
inline ::std::string* JK_DecorBoardInfo::release_decorboardmemo() {
  clear_has_decorboardmemo();
  if (decorboardmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = decorboardmemo_;
    decorboardmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardInfo::set_allocated_decorboardmemo(::std::string* decorboardmemo) {
  if (decorboardmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete decorboardmemo_;
  }
  if (decorboardmemo) {
    set_has_decorboardmemo();
    decorboardmemo_ = decorboardmemo;
  } else {
    clear_has_decorboardmemo();
    decorboardmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 15;
inline bool JK_DecorBoardInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_DecorBoardInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_DecorBoardInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DecorBoardInfo::vercode() const {
  return vercode_;
}
inline void JK_DecorBoardInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 GTypeID = 16;
inline bool JK_DecorBoardInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_DecorBoardInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_DecorBoardInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 JK_DecorBoardInfo::gtypeid() const {
  return gtypeid_;
}
inline void JK_DecorBoardInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required string XFormula = 17;
inline bool JK_DecorBoardInfo::has_xformula() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_xformula() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_DecorBoardInfo::clear_has_xformula() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_DecorBoardInfo::clear_xformula() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    xformula_->clear();
  }
  clear_has_xformula();
}
inline const ::std::string& JK_DecorBoardInfo::xformula() const {
  return *xformula_;
}
inline void JK_DecorBoardInfo::set_xformula(const ::std::string& value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_DecorBoardInfo::set_xformula(const char* value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_DecorBoardInfo::set_xformula(const char* value, size_t size) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardInfo::mutable_xformula() {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  return xformula_;
}
inline ::std::string* JK_DecorBoardInfo::release_xformula() {
  clear_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xformula_;
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardInfo::set_allocated_xformula(::std::string* xformula) {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (xformula) {
    set_has_xformula();
    xformula_ = xformula;
  } else {
    clear_has_xformula();
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YFormula = 18;
inline bool JK_DecorBoardInfo::has_yformula() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_yformula() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_DecorBoardInfo::clear_has_yformula() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_DecorBoardInfo::clear_yformula() {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    yformula_->clear();
  }
  clear_has_yformula();
}
inline const ::std::string& JK_DecorBoardInfo::yformula() const {
  return *yformula_;
}
inline void JK_DecorBoardInfo::set_yformula(const ::std::string& value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_DecorBoardInfo::set_yformula(const char* value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_DecorBoardInfo::set_yformula(const char* value, size_t size) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardInfo::mutable_yformula() {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  return yformula_;
}
inline ::std::string* JK_DecorBoardInfo::release_yformula() {
  clear_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yformula_;
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardInfo::set_allocated_yformula(::std::string* yformula) {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (yformula) {
    set_has_yformula();
    yformula_ = yformula;
  } else {
    clear_has_yformula();
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double ZLen = 19;
inline bool JK_DecorBoardInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_DecorBoardInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_DecorBoardInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double JK_DecorBoardInfo::zlen() const {
  return zlen_;
}
inline void JK_DecorBoardInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required bool IsCanResize = 20;
inline bool JK_DecorBoardInfo::has_iscanresize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_iscanresize() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_DecorBoardInfo::clear_has_iscanresize() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_DecorBoardInfo::clear_iscanresize() {
  iscanresize_ = false;
  clear_has_iscanresize();
}
inline bool JK_DecorBoardInfo::iscanresize() const {
  return iscanresize_;
}
inline void JK_DecorBoardInfo::set_iscanresize(bool value) {
  set_has_iscanresize();
  iscanresize_ = value;
}

// required double MinXLen = 21;
inline bool JK_DecorBoardInfo::has_minxlen() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_minxlen() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_DecorBoardInfo::clear_has_minxlen() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_DecorBoardInfo::clear_minxlen() {
  minxlen_ = 0;
  clear_has_minxlen();
}
inline double JK_DecorBoardInfo::minxlen() const {
  return minxlen_;
}
inline void JK_DecorBoardInfo::set_minxlen(double value) {
  set_has_minxlen();
  minxlen_ = value;
}

// required double MaxXLen = 22;
inline bool JK_DecorBoardInfo::has_maxxlen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_maxxlen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_DecorBoardInfo::clear_has_maxxlen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_DecorBoardInfo::clear_maxxlen() {
  maxxlen_ = 0;
  clear_has_maxxlen();
}
inline double JK_DecorBoardInfo::maxxlen() const {
  return maxxlen_;
}
inline void JK_DecorBoardInfo::set_maxxlen(double value) {
  set_has_maxxlen();
  maxxlen_ = value;
}

// required double XLenStep = 23;
inline bool JK_DecorBoardInfo::has_xlenstep() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_xlenstep() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_DecorBoardInfo::clear_has_xlenstep() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_DecorBoardInfo::clear_xlenstep() {
  xlenstep_ = 0;
  clear_has_xlenstep();
}
inline double JK_DecorBoardInfo::xlenstep() const {
  return xlenstep_;
}
inline void JK_DecorBoardInfo::set_xlenstep(double value) {
  set_has_xlenstep();
  xlenstep_ = value;
}

// required double MinYLen = 24;
inline bool JK_DecorBoardInfo::has_minylen() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_minylen() {
  _has_bits_[0] |= 0x00800000u;
}
inline void JK_DecorBoardInfo::clear_has_minylen() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void JK_DecorBoardInfo::clear_minylen() {
  minylen_ = 0;
  clear_has_minylen();
}
inline double JK_DecorBoardInfo::minylen() const {
  return minylen_;
}
inline void JK_DecorBoardInfo::set_minylen(double value) {
  set_has_minylen();
  minylen_ = value;
}

// required double MaxYLen = 25;
inline bool JK_DecorBoardInfo::has_maxylen() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_maxylen() {
  _has_bits_[0] |= 0x01000000u;
}
inline void JK_DecorBoardInfo::clear_has_maxylen() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void JK_DecorBoardInfo::clear_maxylen() {
  maxylen_ = 0;
  clear_has_maxylen();
}
inline double JK_DecorBoardInfo::maxylen() const {
  return maxylen_;
}
inline void JK_DecorBoardInfo::set_maxylen(double value) {
  set_has_maxylen();
  maxylen_ = value;
}

// required double YLenStep = 26;
inline bool JK_DecorBoardInfo::has_ylenstep() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_ylenstep() {
  _has_bits_[0] |= 0x02000000u;
}
inline void JK_DecorBoardInfo::clear_has_ylenstep() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void JK_DecorBoardInfo::clear_ylenstep() {
  ylenstep_ = 0;
  clear_has_ylenstep();
}
inline double JK_DecorBoardInfo::ylenstep() const {
  return ylenstep_;
}
inline void JK_DecorBoardInfo::set_ylenstep(double value) {
  set_has_ylenstep();
  ylenstep_ = value;
}

// required int32 XDock = 27;
inline bool JK_DecorBoardInfo::has_xdock() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_xdock() {
  _has_bits_[0] |= 0x04000000u;
}
inline void JK_DecorBoardInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void JK_DecorBoardInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 JK_DecorBoardInfo::xdock() const {
  return xdock_;
}
inline void JK_DecorBoardInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 28;
inline bool JK_DecorBoardInfo::has_ydock() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_ydock() {
  _has_bits_[0] |= 0x08000000u;
}
inline void JK_DecorBoardInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void JK_DecorBoardInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 JK_DecorBoardInfo::ydock() const {
  return ydock_;
}
inline void JK_DecorBoardInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required string XOffsetFormula = 29;
inline bool JK_DecorBoardInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x10000000u;
}
inline void JK_DecorBoardInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void JK_DecorBoardInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_DecorBoardInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_DecorBoardInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_DecorBoardInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_DecorBoardInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_DecorBoardInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 30;
inline bool JK_DecorBoardInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x20000000u;
}
inline void JK_DecorBoardInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void JK_DecorBoardInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_DecorBoardInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_DecorBoardInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_DecorBoardInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_DecorBoardInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_DecorBoardInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 31;
inline bool JK_DecorBoardInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x40000000u;
}
inline void JK_DecorBoardInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void JK_DecorBoardInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_DecorBoardInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_DecorBoardInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_DecorBoardInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_DecorBoardInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_DecorBoardInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 PhotoID = 32;
inline bool JK_DecorBoardInfo::has_photoid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void JK_DecorBoardInfo::set_has_photoid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void JK_DecorBoardInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void JK_DecorBoardInfo::clear_photoid() {
  photoid_ = 0;
  clear_has_photoid();
}
inline ::google::protobuf::int32 JK_DecorBoardInfo::photoid() const {
  return photoid_;
}
inline void JK_DecorBoardInfo::set_photoid(::google::protobuf::int32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// JK_DecorBoardMatInfo

// required int32 DecorBoardID = 1;
inline bool JK_DecorBoardMatInfo::has_decorboardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DecorBoardMatInfo::set_has_decorboardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DecorBoardMatInfo::clear_has_decorboardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DecorBoardMatInfo::clear_decorboardid() {
  decorboardid_ = 0;
  clear_has_decorboardid();
}
inline ::google::protobuf::int32 JK_DecorBoardMatInfo::decorboardid() const {
  return decorboardid_;
}
inline void JK_DecorBoardMatInfo::set_decorboardid(::google::protobuf::int32 value) {
  set_has_decorboardid();
  decorboardid_ = value;
}

// required int32 MatID = 2;
inline bool JK_DecorBoardMatInfo::has_matid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DecorBoardMatInfo::set_has_matid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DecorBoardMatInfo::clear_has_matid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DecorBoardMatInfo::clear_matid() {
  matid_ = 0;
  clear_has_matid();
}
inline ::google::protobuf::int32 JK_DecorBoardMatInfo::matid() const {
  return matid_;
}
inline void JK_DecorBoardMatInfo::set_matid(::google::protobuf::int32 value) {
  set_has_matid();
  matid_ = value;
}

// required int32 MatGType = 3;
inline bool JK_DecorBoardMatInfo::has_matgtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DecorBoardMatInfo::set_has_matgtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DecorBoardMatInfo::clear_has_matgtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DecorBoardMatInfo::clear_matgtype() {
  matgtype_ = 0;
  clear_has_matgtype();
}
inline ::google::protobuf::int32 JK_DecorBoardMatInfo::matgtype() const {
  return matgtype_;
}
inline void JK_DecorBoardMatInfo::set_matgtype(::google::protobuf::int32 value) {
  set_has_matgtype();
  matgtype_ = value;
}

// required bool IsDefault = 4;
inline bool JK_DecorBoardMatInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DecorBoardMatInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DecorBoardMatInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DecorBoardMatInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_DecorBoardMatInfo::isdefault() const {
  return isdefault_;
}
inline void JK_DecorBoardMatInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 5;
inline bool JK_DecorBoardMatInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DecorBoardMatInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DecorBoardMatInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DecorBoardMatInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DecorBoardMatInfo::vercode() const {
  return vercode_;
}
inline void JK_DecorBoardMatInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 6;
inline bool JK_DecorBoardMatInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DecorBoardMatInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DecorBoardMatInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DecorBoardMatInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DecorBoardMatInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DecorBoardMatInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_DecorBoardUnitInfo

// required int32 DecorBoardUnitID = 1;
inline bool JK_DecorBoardUnitInfo::has_decorboardunitid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_decorboardunitid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DecorBoardUnitInfo::clear_has_decorboardunitid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DecorBoardUnitInfo::clear_decorboardunitid() {
  decorboardunitid_ = 0;
  clear_has_decorboardunitid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitInfo::decorboardunitid() const {
  return decorboardunitid_;
}
inline void JK_DecorBoardUnitInfo::set_decorboardunitid(::google::protobuf::int32 value) {
  set_has_decorboardunitid();
  decorboardunitid_ = value;
}

// required bool IsDel = 2;
inline bool JK_DecorBoardUnitInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DecorBoardUnitInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DecorBoardUnitInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_DecorBoardUnitInfo::isdel() const {
  return isdel_;
}
inline void JK_DecorBoardUnitInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 DecorBoardID = 3;
inline bool JK_DecorBoardUnitInfo::has_decorboardid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_decorboardid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DecorBoardUnitInfo::clear_has_decorboardid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DecorBoardUnitInfo::clear_decorboardid() {
  decorboardid_ = 0;
  clear_has_decorboardid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitInfo::decorboardid() const {
  return decorboardid_;
}
inline void JK_DecorBoardUnitInfo::set_decorboardid(::google::protobuf::int32 value) {
  set_has_decorboardid();
  decorboardid_ = value;
}

// required int32 SplitType = 4;
inline bool JK_DecorBoardUnitInfo::has_splittype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_splittype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DecorBoardUnitInfo::clear_has_splittype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DecorBoardUnitInfo::clear_splittype() {
  splittype_ = 0;
  clear_has_splittype();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitInfo::splittype() const {
  return splittype_;
}
inline void JK_DecorBoardUnitInfo::set_splittype(::google::protobuf::int32 value) {
  set_has_splittype();
  splittype_ = value;
}

// required int32 SkinDirection = 5;
inline bool JK_DecorBoardUnitInfo::has_skindirection() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_skindirection() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DecorBoardUnitInfo::clear_has_skindirection() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DecorBoardUnitInfo::clear_skindirection() {
  skindirection_ = 0;
  clear_has_skindirection();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitInfo::skindirection() const {
  return skindirection_;
}
inline void JK_DecorBoardUnitInfo::set_skindirection(::google::protobuf::int32 value) {
  set_has_skindirection();
  skindirection_ = value;
}

// required double ArcX = 6;
inline bool JK_DecorBoardUnitInfo::has_arcx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_arcx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DecorBoardUnitInfo::clear_has_arcx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DecorBoardUnitInfo::clear_arcx() {
  arcx_ = 0;
  clear_has_arcx();
}
inline double JK_DecorBoardUnitInfo::arcx() const {
  return arcx_;
}
inline void JK_DecorBoardUnitInfo::set_arcx(double value) {
  set_has_arcx();
  arcx_ = value;
}

// required double ArcY = 7;
inline bool JK_DecorBoardUnitInfo::has_arcy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_arcy() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DecorBoardUnitInfo::clear_has_arcy() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DecorBoardUnitInfo::clear_arcy() {
  arcy_ = 0;
  clear_has_arcy();
}
inline double JK_DecorBoardUnitInfo::arcy() const {
  return arcy_;
}
inline void JK_DecorBoardUnitInfo::set_arcy(double value) {
  set_has_arcy();
  arcy_ = value;
}

// required double ArcZ = 8;
inline bool JK_DecorBoardUnitInfo::has_arcz() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_arcz() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DecorBoardUnitInfo::clear_has_arcz() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DecorBoardUnitInfo::clear_arcz() {
  arcz_ = 0;
  clear_has_arcz();
}
inline double JK_DecorBoardUnitInfo::arcz() const {
  return arcz_;
}
inline void JK_DecorBoardUnitInfo::set_arcz(double value) {
  set_has_arcz();
  arcz_ = value;
}

// required string XFormula = 9;
inline bool JK_DecorBoardUnitInfo::has_xformula() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_xformula() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_DecorBoardUnitInfo::clear_has_xformula() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_DecorBoardUnitInfo::clear_xformula() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    xformula_->clear();
  }
  clear_has_xformula();
}
inline const ::std::string& JK_DecorBoardUnitInfo::xformula() const {
  return *xformula_;
}
inline void JK_DecorBoardUnitInfo::set_xformula(const ::std::string& value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_xformula(const char* value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_xformula(const char* value, size_t size) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardUnitInfo::mutable_xformula() {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  return xformula_;
}
inline ::std::string* JK_DecorBoardUnitInfo::release_xformula() {
  clear_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xformula_;
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardUnitInfo::set_allocated_xformula(::std::string* xformula) {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (xformula) {
    set_has_xformula();
    xformula_ = xformula;
  } else {
    clear_has_xformula();
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YFormula = 10;
inline bool JK_DecorBoardUnitInfo::has_yformula() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_yformula() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_DecorBoardUnitInfo::clear_has_yformula() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_DecorBoardUnitInfo::clear_yformula() {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    yformula_->clear();
  }
  clear_has_yformula();
}
inline const ::std::string& JK_DecorBoardUnitInfo::yformula() const {
  return *yformula_;
}
inline void JK_DecorBoardUnitInfo::set_yformula(const ::std::string& value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_yformula(const char* value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_yformula(const char* value, size_t size) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardUnitInfo::mutable_yformula() {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  return yformula_;
}
inline ::std::string* JK_DecorBoardUnitInfo::release_yformula() {
  clear_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yformula_;
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardUnitInfo::set_allocated_yformula(::std::string* yformula) {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (yformula) {
    set_has_yformula();
    yformula_ = yformula;
  } else {
    clear_has_yformula();
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 XDock = 11;
inline bool JK_DecorBoardUnitInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_DecorBoardUnitInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_DecorBoardUnitInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitInfo::xdock() const {
  return xdock_;
}
inline void JK_DecorBoardUnitInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 12;
inline bool JK_DecorBoardUnitInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_DecorBoardUnitInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_DecorBoardUnitInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitInfo::ydock() const {
  return ydock_;
}
inline void JK_DecorBoardUnitInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 13;
inline bool JK_DecorBoardUnitInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_DecorBoardUnitInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitInfo::zdock() const {
  return zdock_;
}
inline void JK_DecorBoardUnitInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required string XOffsetFormula = 14;
inline bool JK_DecorBoardUnitInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_DecorBoardUnitInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_DecorBoardUnitInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_DecorBoardUnitInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardUnitInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_DecorBoardUnitInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardUnitInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 15;
inline bool JK_DecorBoardUnitInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_DecorBoardUnitInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_DecorBoardUnitInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_DecorBoardUnitInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardUnitInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_DecorBoardUnitInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardUnitInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 16;
inline bool JK_DecorBoardUnitInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_DecorBoardUnitInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_DecorBoardUnitInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_DecorBoardUnitInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardUnitInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_DecorBoardUnitInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardUnitInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 DecorBoardUnitIndex = 17;
inline bool JK_DecorBoardUnitInfo::has_decorboardunitindex() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_decorboardunitindex() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_decorboardunitindex() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_DecorBoardUnitInfo::clear_decorboardunitindex() {
  decorboardunitindex_ = 0;
  clear_has_decorboardunitindex();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitInfo::decorboardunitindex() const {
  return decorboardunitindex_;
}
inline void JK_DecorBoardUnitInfo::set_decorboardunitindex(::google::protobuf::int32 value) {
  set_has_decorboardunitindex();
  decorboardunitindex_ = value;
}

// required string DecorBoardUnitName = 18;
inline bool JK_DecorBoardUnitInfo::has_decorboardunitname() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_decorboardunitname() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_decorboardunitname() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_DecorBoardUnitInfo::clear_decorboardunitname() {
  if (decorboardunitname_ != &::google::protobuf::internal::kEmptyString) {
    decorboardunitname_->clear();
  }
  clear_has_decorboardunitname();
}
inline const ::std::string& JK_DecorBoardUnitInfo::decorboardunitname() const {
  return *decorboardunitname_;
}
inline void JK_DecorBoardUnitInfo::set_decorboardunitname(const ::std::string& value) {
  set_has_decorboardunitname();
  if (decorboardunitname_ == &::google::protobuf::internal::kEmptyString) {
    decorboardunitname_ = new ::std::string;
  }
  decorboardunitname_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_decorboardunitname(const char* value) {
  set_has_decorboardunitname();
  if (decorboardunitname_ == &::google::protobuf::internal::kEmptyString) {
    decorboardunitname_ = new ::std::string;
  }
  decorboardunitname_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_decorboardunitname(const char* value, size_t size) {
  set_has_decorboardunitname();
  if (decorboardunitname_ == &::google::protobuf::internal::kEmptyString) {
    decorboardunitname_ = new ::std::string;
  }
  decorboardunitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardUnitInfo::mutable_decorboardunitname() {
  set_has_decorboardunitname();
  if (decorboardunitname_ == &::google::protobuf::internal::kEmptyString) {
    decorboardunitname_ = new ::std::string;
  }
  return decorboardunitname_;
}
inline ::std::string* JK_DecorBoardUnitInfo::release_decorboardunitname() {
  clear_has_decorboardunitname();
  if (decorboardunitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = decorboardunitname_;
    decorboardunitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardUnitInfo::set_allocated_decorboardunitname(::std::string* decorboardunitname) {
  if (decorboardunitname_ != &::google::protobuf::internal::kEmptyString) {
    delete decorboardunitname_;
  }
  if (decorboardunitname) {
    set_has_decorboardunitname();
    decorboardunitname_ = decorboardunitname;
  } else {
    clear_has_decorboardunitname();
    decorboardunitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DecorBoardUnitMemo = 19;
inline bool JK_DecorBoardUnitInfo::has_decorboardunitmemo() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_decorboardunitmemo() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_decorboardunitmemo() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_DecorBoardUnitInfo::clear_decorboardunitmemo() {
  if (decorboardunitmemo_ != &::google::protobuf::internal::kEmptyString) {
    decorboardunitmemo_->clear();
  }
  clear_has_decorboardunitmemo();
}
inline const ::std::string& JK_DecorBoardUnitInfo::decorboardunitmemo() const {
  return *decorboardunitmemo_;
}
inline void JK_DecorBoardUnitInfo::set_decorboardunitmemo(const ::std::string& value) {
  set_has_decorboardunitmemo();
  if (decorboardunitmemo_ == &::google::protobuf::internal::kEmptyString) {
    decorboardunitmemo_ = new ::std::string;
  }
  decorboardunitmemo_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_decorboardunitmemo(const char* value) {
  set_has_decorboardunitmemo();
  if (decorboardunitmemo_ == &::google::protobuf::internal::kEmptyString) {
    decorboardunitmemo_ = new ::std::string;
  }
  decorboardunitmemo_->assign(value);
}
inline void JK_DecorBoardUnitInfo::set_decorboardunitmemo(const char* value, size_t size) {
  set_has_decorboardunitmemo();
  if (decorboardunitmemo_ == &::google::protobuf::internal::kEmptyString) {
    decorboardunitmemo_ = new ::std::string;
  }
  decorboardunitmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorBoardUnitInfo::mutable_decorboardunitmemo() {
  set_has_decorboardunitmemo();
  if (decorboardunitmemo_ == &::google::protobuf::internal::kEmptyString) {
    decorboardunitmemo_ = new ::std::string;
  }
  return decorboardunitmemo_;
}
inline ::std::string* JK_DecorBoardUnitInfo::release_decorboardunitmemo() {
  clear_has_decorboardunitmemo();
  if (decorboardunitmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = decorboardunitmemo_;
    decorboardunitmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorBoardUnitInfo::set_allocated_decorboardunitmemo(::std::string* decorboardunitmemo) {
  if (decorboardunitmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete decorboardunitmemo_;
  }
  if (decorboardunitmemo) {
    set_has_decorboardunitmemo();
    decorboardunitmemo_ = decorboardunitmemo;
  } else {
    clear_has_decorboardunitmemo();
    decorboardunitmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 20;
inline bool JK_DecorBoardUnitInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_DecorBoardUnitInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DecorBoardUnitInfo::vercode() const {
  return vercode_;
}
inline void JK_DecorBoardUnitInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 21;
inline bool JK_DecorBoardUnitInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_DecorBoardUnitInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DecorBoardUnitInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 22;
inline bool JK_DecorBoardUnitInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_DecorBoardUnitInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitInfo::creatorid() const {
  return creatorid_;
}
inline void JK_DecorBoardUnitInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 23;
inline bool JK_DecorBoardUnitInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_DecorBoardUnitInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitInfo::updaterid() const {
  return updaterid_;
}
inline void JK_DecorBoardUnitInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 24;
inline bool JK_DecorBoardUnitInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00800000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void JK_DecorBoardUnitInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_DecorBoardUnitInfo::createtime() const {
  return createtime_;
}
inline void JK_DecorBoardUnitInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 25;
inline bool JK_DecorBoardUnitInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x01000000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void JK_DecorBoardUnitInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_DecorBoardUnitInfo::updatetime() const {
  return updatetime_;
}
inline void JK_DecorBoardUnitInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required bool IsUseDefaultMat = 26;
inline bool JK_DecorBoardUnitInfo::has_isusedefaultmat() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void JK_DecorBoardUnitInfo::set_has_isusedefaultmat() {
  _has_bits_[0] |= 0x02000000u;
}
inline void JK_DecorBoardUnitInfo::clear_has_isusedefaultmat() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void JK_DecorBoardUnitInfo::clear_isusedefaultmat() {
  isusedefaultmat_ = false;
  clear_has_isusedefaultmat();
}
inline bool JK_DecorBoardUnitInfo::isusedefaultmat() const {
  return isusedefaultmat_;
}
inline void JK_DecorBoardUnitInfo::set_isusedefaultmat(bool value) {
  set_has_isusedefaultmat();
  isusedefaultmat_ = value;
}

// -------------------------------------------------------------------

// JK_DecorBoardUnitMatInfo

// required int32 DecorBoardUnitID = 1;
inline bool JK_DecorBoardUnitMatInfo::has_decorboardunitid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DecorBoardUnitMatInfo::set_has_decorboardunitid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DecorBoardUnitMatInfo::clear_has_decorboardunitid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DecorBoardUnitMatInfo::clear_decorboardunitid() {
  decorboardunitid_ = 0;
  clear_has_decorboardunitid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitMatInfo::decorboardunitid() const {
  return decorboardunitid_;
}
inline void JK_DecorBoardUnitMatInfo::set_decorboardunitid(::google::protobuf::int32 value) {
  set_has_decorboardunitid();
  decorboardunitid_ = value;
}

// required int32 MatID = 2;
inline bool JK_DecorBoardUnitMatInfo::has_matid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DecorBoardUnitMatInfo::set_has_matid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DecorBoardUnitMatInfo::clear_has_matid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DecorBoardUnitMatInfo::clear_matid() {
  matid_ = 0;
  clear_has_matid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitMatInfo::matid() const {
  return matid_;
}
inline void JK_DecorBoardUnitMatInfo::set_matid(::google::protobuf::int32 value) {
  set_has_matid();
  matid_ = value;
}

// required int32 MatGType = 3;
inline bool JK_DecorBoardUnitMatInfo::has_matgtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DecorBoardUnitMatInfo::set_has_matgtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DecorBoardUnitMatInfo::clear_has_matgtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DecorBoardUnitMatInfo::clear_matgtype() {
  matgtype_ = 0;
  clear_has_matgtype();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitMatInfo::matgtype() const {
  return matgtype_;
}
inline void JK_DecorBoardUnitMatInfo::set_matgtype(::google::protobuf::int32 value) {
  set_has_matgtype();
  matgtype_ = value;
}

// required bool IsDefault = 4;
inline bool JK_DecorBoardUnitMatInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DecorBoardUnitMatInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DecorBoardUnitMatInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DecorBoardUnitMatInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_DecorBoardUnitMatInfo::isdefault() const {
  return isdefault_;
}
inline void JK_DecorBoardUnitMatInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int32 DefaultSealRuleID = 5;
inline bool JK_DecorBoardUnitMatInfo::has_defaultsealruleid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DecorBoardUnitMatInfo::set_has_defaultsealruleid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DecorBoardUnitMatInfo::clear_has_defaultsealruleid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DecorBoardUnitMatInfo::clear_defaultsealruleid() {
  defaultsealruleid_ = 0;
  clear_has_defaultsealruleid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitMatInfo::defaultsealruleid() const {
  return defaultsealruleid_;
}
inline void JK_DecorBoardUnitMatInfo::set_defaultsealruleid(::google::protobuf::int32 value) {
  set_has_defaultsealruleid();
  defaultsealruleid_ = value;
}

// required int32 SkinDirection = 6;
inline bool JK_DecorBoardUnitMatInfo::has_skindirection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DecorBoardUnitMatInfo::set_has_skindirection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DecorBoardUnitMatInfo::clear_has_skindirection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DecorBoardUnitMatInfo::clear_skindirection() {
  skindirection_ = 0;
  clear_has_skindirection();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitMatInfo::skindirection() const {
  return skindirection_;
}
inline void JK_DecorBoardUnitMatInfo::set_skindirection(::google::protobuf::int32 value) {
  set_has_skindirection();
  skindirection_ = value;
}

// required int64 VerCode = 7;
inline bool JK_DecorBoardUnitMatInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DecorBoardUnitMatInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DecorBoardUnitMatInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DecorBoardUnitMatInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DecorBoardUnitMatInfo::vercode() const {
  return vercode_;
}
inline void JK_DecorBoardUnitMatInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 8;
inline bool JK_DecorBoardUnitMatInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DecorBoardUnitMatInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DecorBoardUnitMatInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DecorBoardUnitMatInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitMatInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DecorBoardUnitMatInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_DecorBoardUnitSealInfo

// required int32 DecorBoardUnitID = 1;
inline bool JK_DecorBoardUnitSealInfo::has_decorboardunitid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DecorBoardUnitSealInfo::set_has_decorboardunitid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DecorBoardUnitSealInfo::clear_has_decorboardunitid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DecorBoardUnitSealInfo::clear_decorboardunitid() {
  decorboardunitid_ = 0;
  clear_has_decorboardunitid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitSealInfo::decorboardunitid() const {
  return decorboardunitid_;
}
inline void JK_DecorBoardUnitSealInfo::set_decorboardunitid(::google::protobuf::int32 value) {
  set_has_decorboardunitid();
  decorboardunitid_ = value;
}

// required int32 SealIndex = 2;
inline bool JK_DecorBoardUnitSealInfo::has_sealindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DecorBoardUnitSealInfo::set_has_sealindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DecorBoardUnitSealInfo::clear_has_sealindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DecorBoardUnitSealInfo::clear_sealindex() {
  sealindex_ = 0;
  clear_has_sealindex();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitSealInfo::sealindex() const {
  return sealindex_;
}
inline void JK_DecorBoardUnitSealInfo::set_sealindex(::google::protobuf::int32 value) {
  set_has_sealindex();
  sealindex_ = value;
}

// required int32 SealType = 3;
inline bool JK_DecorBoardUnitSealInfo::has_sealtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DecorBoardUnitSealInfo::set_has_sealtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DecorBoardUnitSealInfo::clear_has_sealtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DecorBoardUnitSealInfo::clear_sealtype() {
  sealtype_ = 0;
  clear_has_sealtype();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitSealInfo::sealtype() const {
  return sealtype_;
}
inline void JK_DecorBoardUnitSealInfo::set_sealtype(::google::protobuf::int32 value) {
  set_has_sealtype();
  sealtype_ = value;
}

// required int32 DefaultMaterialID = 4;
inline bool JK_DecorBoardUnitSealInfo::has_defaultmaterialid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DecorBoardUnitSealInfo::set_has_defaultmaterialid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DecorBoardUnitSealInfo::clear_has_defaultmaterialid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DecorBoardUnitSealInfo::clear_defaultmaterialid() {
  defaultmaterialid_ = 0;
  clear_has_defaultmaterialid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitSealInfo::defaultmaterialid() const {
  return defaultmaterialid_;
}
inline void JK_DecorBoardUnitSealInfo::set_defaultmaterialid(::google::protobuf::int32 value) {
  set_has_defaultmaterialid();
  defaultmaterialid_ = value;
}

// required int64 VerCode = 5;
inline bool JK_DecorBoardUnitSealInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DecorBoardUnitSealInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DecorBoardUnitSealInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DecorBoardUnitSealInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DecorBoardUnitSealInfo::vercode() const {
  return vercode_;
}
inline void JK_DecorBoardUnitSealInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 6;
inline bool JK_DecorBoardUnitSealInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DecorBoardUnitSealInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DecorBoardUnitSealInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DecorBoardUnitSealInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitSealInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DecorBoardUnitSealInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 7;
inline bool JK_DecorBoardUnitSealInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DecorBoardUnitSealInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DecorBoardUnitSealInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DecorBoardUnitSealInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitSealInfo::creatorid() const {
  return creatorid_;
}
inline void JK_DecorBoardUnitSealInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 8;
inline bool JK_DecorBoardUnitSealInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DecorBoardUnitSealInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DecorBoardUnitSealInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DecorBoardUnitSealInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitSealInfo::updaterid() const {
  return updaterid_;
}
inline void JK_DecorBoardUnitSealInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 9;
inline bool JK_DecorBoardUnitSealInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_DecorBoardUnitSealInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_DecorBoardUnitSealInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_DecorBoardUnitSealInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_DecorBoardUnitSealInfo::createtime() const {
  return createtime_;
}
inline void JK_DecorBoardUnitSealInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 10;
inline bool JK_DecorBoardUnitSealInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_DecorBoardUnitSealInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_DecorBoardUnitSealInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_DecorBoardUnitSealInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_DecorBoardUnitSealInfo::updatetime() const {
  return updatetime_;
}
inline void JK_DecorBoardUnitSealInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required int32 SealOrder = 11;
inline bool JK_DecorBoardUnitSealInfo::has_sealorder() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_DecorBoardUnitSealInfo::set_has_sealorder() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_DecorBoardUnitSealInfo::clear_has_sealorder() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_DecorBoardUnitSealInfo::clear_sealorder() {
  sealorder_ = 0;
  clear_has_sealorder();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitSealInfo::sealorder() const {
  return sealorder_;
}
inline void JK_DecorBoardUnitSealInfo::set_sealorder(::google::protobuf::int32 value) {
  set_has_sealorder();
  sealorder_ = value;
}

// required int32 DecorBoardUnitSealID = 12;
inline bool JK_DecorBoardUnitSealInfo::has_decorboardunitsealid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_DecorBoardUnitSealInfo::set_has_decorboardunitsealid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_DecorBoardUnitSealInfo::clear_has_decorboardunitsealid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_DecorBoardUnitSealInfo::clear_decorboardunitsealid() {
  decorboardunitsealid_ = 0;
  clear_has_decorboardunitsealid();
}
inline ::google::protobuf::int32 JK_DecorBoardUnitSealInfo::decorboardunitsealid() const {
  return decorboardunitsealid_;
}
inline void JK_DecorBoardUnitSealInfo::set_decorboardunitsealid(::google::protobuf::int32 value) {
  set_has_decorboardunitsealid();
  decorboardunitsealid_ = value;
}

// -------------------------------------------------------------------

// JK_DecorInfo

// required int32 DecorID = 1;
inline bool JK_DecorInfo::has_decorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DecorInfo::set_has_decorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DecorInfo::clear_has_decorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DecorInfo::clear_decorid() {
  decorid_ = 0;
  clear_has_decorid();
}
inline ::google::protobuf::int32 JK_DecorInfo::decorid() const {
  return decorid_;
}
inline void JK_DecorInfo::set_decorid(::google::protobuf::int32 value) {
  set_has_decorid();
  decorid_ = value;
}

// required int32 GroupID = 2;
inline bool JK_DecorInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DecorInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DecorInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DecorInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_DecorInfo::groupid() const {
  return groupid_;
}
inline void JK_DecorInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 FactoryID = 3;
inline bool JK_DecorInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DecorInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DecorInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DecorInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DecorInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DecorInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required bool IsActive = 4;
inline bool JK_DecorInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DecorInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DecorInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DecorInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_DecorInfo::isactive() const {
  return isactive_;
}
inline void JK_DecorInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required bool IsSplit = 5;
inline bool JK_DecorInfo::has_issplit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DecorInfo::set_has_issplit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DecorInfo::clear_has_issplit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DecorInfo::clear_issplit() {
  issplit_ = false;
  clear_has_issplit();
}
inline bool JK_DecorInfo::issplit() const {
  return issplit_;
}
inline void JK_DecorInfo::set_issplit(bool value) {
  set_has_issplit();
  issplit_ = value;
}

// required bool IsDel = 6;
inline bool JK_DecorInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DecorInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DecorInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DecorInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_DecorInfo::isdel() const {
  return isdel_;
}
inline void JK_DecorInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 SupplyType = 7;
inline bool JK_DecorInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DecorInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DecorInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DecorInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 JK_DecorInfo::supplytype() const {
  return supplytype_;
}
inline void JK_DecorInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 8;
inline bool JK_DecorInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DecorInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DecorInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DecorInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 JK_DecorInfo::gtypeid() const {
  return gtypeid_;
}
inline void JK_DecorInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 ShowID = 9;
inline bool JK_DecorInfo::has_showid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_DecorInfo::set_has_showid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_DecorInfo::clear_has_showid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_DecorInfo::clear_showid() {
  showid_ = 0;
  clear_has_showid();
}
inline ::google::protobuf::int32 JK_DecorInfo::showid() const {
  return showid_;
}
inline void JK_DecorInfo::set_showid(::google::protobuf::int32 value) {
  set_has_showid();
  showid_ = value;
}

// required int32 SkinID = 10;
inline bool JK_DecorInfo::has_skinid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_DecorInfo::set_has_skinid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_DecorInfo::clear_has_skinid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_DecorInfo::clear_skinid() {
  skinid_ = 0;
  clear_has_skinid();
}
inline ::google::protobuf::int32 JK_DecorInfo::skinid() const {
  return skinid_;
}
inline void JK_DecorInfo::set_skinid(::google::protobuf::int32 value) {
  set_has_skinid();
  skinid_ = value;
}

// required int32 ModelID = 11;
inline bool JK_DecorInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_DecorInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_DecorInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_DecorInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 JK_DecorInfo::modelid() const {
  return modelid_;
}
inline void JK_DecorInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required double XLen = 12;
inline bool JK_DecorInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_DecorInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_DecorInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_DecorInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double JK_DecorInfo::xlen() const {
  return xlen_;
}
inline void JK_DecorInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 13;
inline bool JK_DecorInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_DecorInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_DecorInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_DecorInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double JK_DecorInfo::ylen() const {
  return ylen_;
}
inline void JK_DecorInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 14;
inline bool JK_DecorInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_DecorInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_DecorInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_DecorInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double JK_DecorInfo::zlen() const {
  return zlen_;
}
inline void JK_DecorInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required int32 CreatorID = 15;
inline bool JK_DecorInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_DecorInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_DecorInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_DecorInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_DecorInfo::creatorid() const {
  return creatorid_;
}
inline void JK_DecorInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 16;
inline bool JK_DecorInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_DecorInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_DecorInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_DecorInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_DecorInfo::updaterid() const {
  return updaterid_;
}
inline void JK_DecorInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 17;
inline bool JK_DecorInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_DecorInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_DecorInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_DecorInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_DecorInfo::createtime() const {
  return createtime_;
}
inline void JK_DecorInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 18;
inline bool JK_DecorInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_DecorInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_DecorInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_DecorInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_DecorInfo::updatetime() const {
  return updatetime_;
}
inline void JK_DecorInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string DecorCode = 19;
inline bool JK_DecorInfo::has_decorcode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_DecorInfo::set_has_decorcode() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_DecorInfo::clear_has_decorcode() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_DecorInfo::clear_decorcode() {
  if (decorcode_ != &::google::protobuf::internal::kEmptyString) {
    decorcode_->clear();
  }
  clear_has_decorcode();
}
inline const ::std::string& JK_DecorInfo::decorcode() const {
  return *decorcode_;
}
inline void JK_DecorInfo::set_decorcode(const ::std::string& value) {
  set_has_decorcode();
  if (decorcode_ == &::google::protobuf::internal::kEmptyString) {
    decorcode_ = new ::std::string;
  }
  decorcode_->assign(value);
}
inline void JK_DecorInfo::set_decorcode(const char* value) {
  set_has_decorcode();
  if (decorcode_ == &::google::protobuf::internal::kEmptyString) {
    decorcode_ = new ::std::string;
  }
  decorcode_->assign(value);
}
inline void JK_DecorInfo::set_decorcode(const char* value, size_t size) {
  set_has_decorcode();
  if (decorcode_ == &::google::protobuf::internal::kEmptyString) {
    decorcode_ = new ::std::string;
  }
  decorcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorInfo::mutable_decorcode() {
  set_has_decorcode();
  if (decorcode_ == &::google::protobuf::internal::kEmptyString) {
    decorcode_ = new ::std::string;
  }
  return decorcode_;
}
inline ::std::string* JK_DecorInfo::release_decorcode() {
  clear_has_decorcode();
  if (decorcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = decorcode_;
    decorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorInfo::set_allocated_decorcode(::std::string* decorcode) {
  if (decorcode_ != &::google::protobuf::internal::kEmptyString) {
    delete decorcode_;
  }
  if (decorcode) {
    set_has_decorcode();
    decorcode_ = decorcode;
  } else {
    clear_has_decorcode();
    decorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DecorName = 20;
inline bool JK_DecorInfo::has_decorname() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_DecorInfo::set_has_decorname() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_DecorInfo::clear_has_decorname() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_DecorInfo::clear_decorname() {
  if (decorname_ != &::google::protobuf::internal::kEmptyString) {
    decorname_->clear();
  }
  clear_has_decorname();
}
inline const ::std::string& JK_DecorInfo::decorname() const {
  return *decorname_;
}
inline void JK_DecorInfo::set_decorname(const ::std::string& value) {
  set_has_decorname();
  if (decorname_ == &::google::protobuf::internal::kEmptyString) {
    decorname_ = new ::std::string;
  }
  decorname_->assign(value);
}
inline void JK_DecorInfo::set_decorname(const char* value) {
  set_has_decorname();
  if (decorname_ == &::google::protobuf::internal::kEmptyString) {
    decorname_ = new ::std::string;
  }
  decorname_->assign(value);
}
inline void JK_DecorInfo::set_decorname(const char* value, size_t size) {
  set_has_decorname();
  if (decorname_ == &::google::protobuf::internal::kEmptyString) {
    decorname_ = new ::std::string;
  }
  decorname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorInfo::mutable_decorname() {
  set_has_decorname();
  if (decorname_ == &::google::protobuf::internal::kEmptyString) {
    decorname_ = new ::std::string;
  }
  return decorname_;
}
inline ::std::string* JK_DecorInfo::release_decorname() {
  clear_has_decorname();
  if (decorname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = decorname_;
    decorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorInfo::set_allocated_decorname(::std::string* decorname) {
  if (decorname_ != &::google::protobuf::internal::kEmptyString) {
    delete decorname_;
  }
  if (decorname) {
    set_has_decorname();
    decorname_ = decorname;
  } else {
    clear_has_decorname();
    decorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DecorMemo = 21;
inline bool JK_DecorInfo::has_decormemo() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_DecorInfo::set_has_decormemo() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_DecorInfo::clear_has_decormemo() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_DecorInfo::clear_decormemo() {
  if (decormemo_ != &::google::protobuf::internal::kEmptyString) {
    decormemo_->clear();
  }
  clear_has_decormemo();
}
inline const ::std::string& JK_DecorInfo::decormemo() const {
  return *decormemo_;
}
inline void JK_DecorInfo::set_decormemo(const ::std::string& value) {
  set_has_decormemo();
  if (decormemo_ == &::google::protobuf::internal::kEmptyString) {
    decormemo_ = new ::std::string;
  }
  decormemo_->assign(value);
}
inline void JK_DecorInfo::set_decormemo(const char* value) {
  set_has_decormemo();
  if (decormemo_ == &::google::protobuf::internal::kEmptyString) {
    decormemo_ = new ::std::string;
  }
  decormemo_->assign(value);
}
inline void JK_DecorInfo::set_decormemo(const char* value, size_t size) {
  set_has_decormemo();
  if (decormemo_ == &::google::protobuf::internal::kEmptyString) {
    decormemo_ = new ::std::string;
  }
  decormemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorInfo::mutable_decormemo() {
  set_has_decormemo();
  if (decormemo_ == &::google::protobuf::internal::kEmptyString) {
    decormemo_ = new ::std::string;
  }
  return decormemo_;
}
inline ::std::string* JK_DecorInfo::release_decormemo() {
  clear_has_decormemo();
  if (decormemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = decormemo_;
    decormemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorInfo::set_allocated_decormemo(::std::string* decormemo) {
  if (decormemo_ != &::google::protobuf::internal::kEmptyString) {
    delete decormemo_;
  }
  if (decormemo) {
    set_has_decormemo();
    decormemo_ = decormemo;
  } else {
    clear_has_decormemo();
    decormemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 22;
inline bool JK_DecorInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_DecorInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_DecorInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_DecorInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DecorInfo::vercode() const {
  return vercode_;
}
inline void JK_DecorInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_DecorLineInfo

// required int32 DecorLineID = 1;
inline bool JK_DecorLineInfo::has_decorlineid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DecorLineInfo::set_has_decorlineid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DecorLineInfo::clear_has_decorlineid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DecorLineInfo::clear_decorlineid() {
  decorlineid_ = 0;
  clear_has_decorlineid();
}
inline ::google::protobuf::int32 JK_DecorLineInfo::decorlineid() const {
  return decorlineid_;
}
inline void JK_DecorLineInfo::set_decorlineid(::google::protobuf::int32 value) {
  set_has_decorlineid();
  decorlineid_ = value;
}

// required int32 FactoryID = 2;
inline bool JK_DecorLineInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DecorLineInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DecorLineInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DecorLineInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DecorLineInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DecorLineInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 GroupID = 3;
inline bool JK_DecorLineInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DecorLineInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DecorLineInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DecorLineInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_DecorLineInfo::groupid() const {
  return groupid_;
}
inline void JK_DecorLineInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required bool IsDel = 4;
inline bool JK_DecorLineInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DecorLineInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DecorLineInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DecorLineInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_DecorLineInfo::isdel() const {
  return isdel_;
}
inline void JK_DecorLineInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsActive = 5;
inline bool JK_DecorLineInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DecorLineInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DecorLineInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DecorLineInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_DecorLineInfo::isactive() const {
  return isactive_;
}
inline void JK_DecorLineInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required int32 GTypeID = 6;
inline bool JK_DecorLineInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DecorLineInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DecorLineInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DecorLineInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 JK_DecorLineInfo::gtypeid() const {
  return gtypeid_;
}
inline void JK_DecorLineInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 ShowID = 7;
inline bool JK_DecorLineInfo::has_showid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DecorLineInfo::set_has_showid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DecorLineInfo::clear_has_showid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DecorLineInfo::clear_showid() {
  showid_ = 0;
  clear_has_showid();
}
inline ::google::protobuf::int32 JK_DecorLineInfo::showid() const {
  return showid_;
}
inline void JK_DecorLineInfo::set_showid(::google::protobuf::int32 value) {
  set_has_showid();
  showid_ = value;
}

// required int32 ModelID = 8;
inline bool JK_DecorLineInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DecorLineInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DecorLineInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DecorLineInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 JK_DecorLineInfo::modelid() const {
  return modelid_;
}
inline void JK_DecorLineInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required double ZOffset = 9;
inline bool JK_DecorLineInfo::has_zoffset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_DecorLineInfo::set_has_zoffset() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_DecorLineInfo::clear_has_zoffset() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_DecorLineInfo::clear_zoffset() {
  zoffset_ = 0;
  clear_has_zoffset();
}
inline double JK_DecorLineInfo::zoffset() const {
  return zoffset_;
}
inline void JK_DecorLineInfo::set_zoffset(double value) {
  set_has_zoffset();
  zoffset_ = value;
}

// required int32 CreatorID = 10;
inline bool JK_DecorLineInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_DecorLineInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_DecorLineInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_DecorLineInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_DecorLineInfo::creatorid() const {
  return creatorid_;
}
inline void JK_DecorLineInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 11;
inline bool JK_DecorLineInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_DecorLineInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_DecorLineInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_DecorLineInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_DecorLineInfo::updaterid() const {
  return updaterid_;
}
inline void JK_DecorLineInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 12;
inline bool JK_DecorLineInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_DecorLineInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_DecorLineInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_DecorLineInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_DecorLineInfo::createtime() const {
  return createtime_;
}
inline void JK_DecorLineInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 13;
inline bool JK_DecorLineInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_DecorLineInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_DecorLineInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_DecorLineInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_DecorLineInfo::updatetime() const {
  return updatetime_;
}
inline void JK_DecorLineInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string DecorLineCode = 14;
inline bool JK_DecorLineInfo::has_decorlinecode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_DecorLineInfo::set_has_decorlinecode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_DecorLineInfo::clear_has_decorlinecode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_DecorLineInfo::clear_decorlinecode() {
  if (decorlinecode_ != &::google::protobuf::internal::kEmptyString) {
    decorlinecode_->clear();
  }
  clear_has_decorlinecode();
}
inline const ::std::string& JK_DecorLineInfo::decorlinecode() const {
  return *decorlinecode_;
}
inline void JK_DecorLineInfo::set_decorlinecode(const ::std::string& value) {
  set_has_decorlinecode();
  if (decorlinecode_ == &::google::protobuf::internal::kEmptyString) {
    decorlinecode_ = new ::std::string;
  }
  decorlinecode_->assign(value);
}
inline void JK_DecorLineInfo::set_decorlinecode(const char* value) {
  set_has_decorlinecode();
  if (decorlinecode_ == &::google::protobuf::internal::kEmptyString) {
    decorlinecode_ = new ::std::string;
  }
  decorlinecode_->assign(value);
}
inline void JK_DecorLineInfo::set_decorlinecode(const char* value, size_t size) {
  set_has_decorlinecode();
  if (decorlinecode_ == &::google::protobuf::internal::kEmptyString) {
    decorlinecode_ = new ::std::string;
  }
  decorlinecode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorLineInfo::mutable_decorlinecode() {
  set_has_decorlinecode();
  if (decorlinecode_ == &::google::protobuf::internal::kEmptyString) {
    decorlinecode_ = new ::std::string;
  }
  return decorlinecode_;
}
inline ::std::string* JK_DecorLineInfo::release_decorlinecode() {
  clear_has_decorlinecode();
  if (decorlinecode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = decorlinecode_;
    decorlinecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorLineInfo::set_allocated_decorlinecode(::std::string* decorlinecode) {
  if (decorlinecode_ != &::google::protobuf::internal::kEmptyString) {
    delete decorlinecode_;
  }
  if (decorlinecode) {
    set_has_decorlinecode();
    decorlinecode_ = decorlinecode;
  } else {
    clear_has_decorlinecode();
    decorlinecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DecorLineName = 15;
inline bool JK_DecorLineInfo::has_decorlinename() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_DecorLineInfo::set_has_decorlinename() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_DecorLineInfo::clear_has_decorlinename() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_DecorLineInfo::clear_decorlinename() {
  if (decorlinename_ != &::google::protobuf::internal::kEmptyString) {
    decorlinename_->clear();
  }
  clear_has_decorlinename();
}
inline const ::std::string& JK_DecorLineInfo::decorlinename() const {
  return *decorlinename_;
}
inline void JK_DecorLineInfo::set_decorlinename(const ::std::string& value) {
  set_has_decorlinename();
  if (decorlinename_ == &::google::protobuf::internal::kEmptyString) {
    decorlinename_ = new ::std::string;
  }
  decorlinename_->assign(value);
}
inline void JK_DecorLineInfo::set_decorlinename(const char* value) {
  set_has_decorlinename();
  if (decorlinename_ == &::google::protobuf::internal::kEmptyString) {
    decorlinename_ = new ::std::string;
  }
  decorlinename_->assign(value);
}
inline void JK_DecorLineInfo::set_decorlinename(const char* value, size_t size) {
  set_has_decorlinename();
  if (decorlinename_ == &::google::protobuf::internal::kEmptyString) {
    decorlinename_ = new ::std::string;
  }
  decorlinename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorLineInfo::mutable_decorlinename() {
  set_has_decorlinename();
  if (decorlinename_ == &::google::protobuf::internal::kEmptyString) {
    decorlinename_ = new ::std::string;
  }
  return decorlinename_;
}
inline ::std::string* JK_DecorLineInfo::release_decorlinename() {
  clear_has_decorlinename();
  if (decorlinename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = decorlinename_;
    decorlinename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorLineInfo::set_allocated_decorlinename(::std::string* decorlinename) {
  if (decorlinename_ != &::google::protobuf::internal::kEmptyString) {
    delete decorlinename_;
  }
  if (decorlinename) {
    set_has_decorlinename();
    decorlinename_ = decorlinename;
  } else {
    clear_has_decorlinename();
    decorlinename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DecorLineMemo = 16;
inline bool JK_DecorLineInfo::has_decorlinememo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_DecorLineInfo::set_has_decorlinememo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_DecorLineInfo::clear_has_decorlinememo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_DecorLineInfo::clear_decorlinememo() {
  if (decorlinememo_ != &::google::protobuf::internal::kEmptyString) {
    decorlinememo_->clear();
  }
  clear_has_decorlinememo();
}
inline const ::std::string& JK_DecorLineInfo::decorlinememo() const {
  return *decorlinememo_;
}
inline void JK_DecorLineInfo::set_decorlinememo(const ::std::string& value) {
  set_has_decorlinememo();
  if (decorlinememo_ == &::google::protobuf::internal::kEmptyString) {
    decorlinememo_ = new ::std::string;
  }
  decorlinememo_->assign(value);
}
inline void JK_DecorLineInfo::set_decorlinememo(const char* value) {
  set_has_decorlinememo();
  if (decorlinememo_ == &::google::protobuf::internal::kEmptyString) {
    decorlinememo_ = new ::std::string;
  }
  decorlinememo_->assign(value);
}
inline void JK_DecorLineInfo::set_decorlinememo(const char* value, size_t size) {
  set_has_decorlinememo();
  if (decorlinememo_ == &::google::protobuf::internal::kEmptyString) {
    decorlinememo_ = new ::std::string;
  }
  decorlinememo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DecorLineInfo::mutable_decorlinememo() {
  set_has_decorlinememo();
  if (decorlinememo_ == &::google::protobuf::internal::kEmptyString) {
    decorlinememo_ = new ::std::string;
  }
  return decorlinememo_;
}
inline ::std::string* JK_DecorLineInfo::release_decorlinememo() {
  clear_has_decorlinememo();
  if (decorlinememo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = decorlinememo_;
    decorlinememo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DecorLineInfo::set_allocated_decorlinememo(::std::string* decorlinememo) {
  if (decorlinememo_ != &::google::protobuf::internal::kEmptyString) {
    delete decorlinememo_;
  }
  if (decorlinememo) {
    set_has_decorlinememo();
    decorlinememo_ = decorlinememo;
  } else {
    clear_has_decorlinememo();
    decorlinememo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 17;
inline bool JK_DecorLineInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_DecorLineInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_DecorLineInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_DecorLineInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DecorLineInfo::vercode() const {
  return vercode_;
}
inline void JK_DecorLineInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required double DefaultYLen = 18;
inline bool JK_DecorLineInfo::has_defaultylen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_DecorLineInfo::set_has_defaultylen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_DecorLineInfo::clear_has_defaultylen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_DecorLineInfo::clear_defaultylen() {
  defaultylen_ = 0;
  clear_has_defaultylen();
}
inline double JK_DecorLineInfo::defaultylen() const {
  return defaultylen_;
}
inline void JK_DecorLineInfo::set_defaultylen(double value) {
  set_has_defaultylen();
  defaultylen_ = value;
}

// -------------------------------------------------------------------

// JK_DecorLineMatInfo

// required int32 DecorLineID = 1;
inline bool JK_DecorLineMatInfo::has_decorlineid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DecorLineMatInfo::set_has_decorlineid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DecorLineMatInfo::clear_has_decorlineid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DecorLineMatInfo::clear_decorlineid() {
  decorlineid_ = 0;
  clear_has_decorlineid();
}
inline ::google::protobuf::int32 JK_DecorLineMatInfo::decorlineid() const {
  return decorlineid_;
}
inline void JK_DecorLineMatInfo::set_decorlineid(::google::protobuf::int32 value) {
  set_has_decorlineid();
  decorlineid_ = value;
}

// required int32 MaterialID = 2;
inline bool JK_DecorLineMatInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DecorLineMatInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DecorLineMatInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DecorLineMatInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 JK_DecorLineMatInfo::materialid() const {
  return materialid_;
}
inline void JK_DecorLineMatInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required bool IsDefault = 3;
inline bool JK_DecorLineMatInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DecorLineMatInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DecorLineMatInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DecorLineMatInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_DecorLineMatInfo::isdefault() const {
  return isdefault_;
}
inline void JK_DecorLineMatInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 4;
inline bool JK_DecorLineMatInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DecorLineMatInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DecorLineMatInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DecorLineMatInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DecorLineMatInfo::vercode() const {
  return vercode_;
}
inline void JK_DecorLineMatInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_DecorLineMatInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DecorLineMatInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DecorLineMatInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DecorLineMatInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DecorLineMatInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DecorLineMatInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_DecorUnitHWFittingMapInfo

// required int32 DecorBoardUnitID = 1;
inline bool JK_DecorUnitHWFittingMapInfo::has_decorboardunitid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DecorUnitHWFittingMapInfo::set_has_decorboardunitid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DecorUnitHWFittingMapInfo::clear_has_decorboardunitid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DecorUnitHWFittingMapInfo::clear_decorboardunitid() {
  decorboardunitid_ = 0;
  clear_has_decorboardunitid();
}
inline ::google::protobuf::int32 JK_DecorUnitHWFittingMapInfo::decorboardunitid() const {
  return decorboardunitid_;
}
inline void JK_DecorUnitHWFittingMapInfo::set_decorboardunitid(::google::protobuf::int32 value) {
  set_has_decorboardunitid();
  decorboardunitid_ = value;
}

// required int32 HWFittingID = 2;
inline bool JK_DecorUnitHWFittingMapInfo::has_hwfittingid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DecorUnitHWFittingMapInfo::set_has_hwfittingid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DecorUnitHWFittingMapInfo::clear_has_hwfittingid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DecorUnitHWFittingMapInfo::clear_hwfittingid() {
  hwfittingid_ = 0;
  clear_has_hwfittingid();
}
inline ::google::protobuf::int32 JK_DecorUnitHWFittingMapInfo::hwfittingid() const {
  return hwfittingid_;
}
inline void JK_DecorUnitHWFittingMapInfo::set_hwfittingid(::google::protobuf::int32 value) {
  set_has_hwfittingid();
  hwfittingid_ = value;
}

// required bool IsDefault = 3;
inline bool JK_DecorUnitHWFittingMapInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DecorUnitHWFittingMapInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DecorUnitHWFittingMapInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DecorUnitHWFittingMapInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_DecorUnitHWFittingMapInfo::isdefault() const {
  return isdefault_;
}
inline void JK_DecorUnitHWFittingMapInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 4;
inline bool JK_DecorUnitHWFittingMapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DecorUnitHWFittingMapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DecorUnitHWFittingMapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DecorUnitHWFittingMapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DecorUnitHWFittingMapInfo::vercode() const {
  return vercode_;
}
inline void JK_DecorUnitHWFittingMapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_DecorUnitHWFittingMapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DecorUnitHWFittingMapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DecorUnitHWFittingMapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DecorUnitHWFittingMapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DecorUnitHWFittingMapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DecorUnitHWFittingMapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_DoorBoardGapInfo

// required int32 DoorBoardGapID = 1;
inline bool JK_DoorBoardGapInfo::has_doorboardgapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_doorboardgapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorBoardGapInfo::clear_has_doorboardgapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorBoardGapInfo::clear_doorboardgapid() {
  doorboardgapid_ = 0;
  clear_has_doorboardgapid();
}
inline ::google::protobuf::int32 JK_DoorBoardGapInfo::doorboardgapid() const {
  return doorboardgapid_;
}
inline void JK_DoorBoardGapInfo::set_doorboardgapid(::google::protobuf::int32 value) {
  set_has_doorboardgapid();
  doorboardgapid_ = value;
}

// required int32 DoorBoardID = 2;
inline bool JK_DoorBoardGapInfo::has_doorboardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_doorboardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorBoardGapInfo::clear_has_doorboardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorBoardGapInfo::clear_doorboardid() {
  doorboardid_ = 0;
  clear_has_doorboardid();
}
inline ::google::protobuf::int32 JK_DoorBoardGapInfo::doorboardid() const {
  return doorboardid_;
}
inline void JK_DoorBoardGapInfo::set_doorboardid(::google::protobuf::int32 value) {
  set_has_doorboardid();
  doorboardid_ = value;
}

// required int32 GapPos = 3;
inline bool JK_DoorBoardGapInfo::has_gappos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_gappos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorBoardGapInfo::clear_has_gappos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorBoardGapInfo::clear_gappos() {
  gappos_ = 0;
  clear_has_gappos();
}
inline ::google::protobuf::int32 JK_DoorBoardGapInfo::gappos() const {
  return gappos_;
}
inline void JK_DoorBoardGapInfo::set_gappos(::google::protobuf::int32 value) {
  set_has_gappos();
  gappos_ = value;
}

// required int32 GapIndex = 4;
inline bool JK_DoorBoardGapInfo::has_gapindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_gapindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorBoardGapInfo::clear_has_gapindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorBoardGapInfo::clear_gapindex() {
  gapindex_ = 0;
  clear_has_gapindex();
}
inline ::google::protobuf::int32 JK_DoorBoardGapInfo::gapindex() const {
  return gapindex_;
}
inline void JK_DoorBoardGapInfo::set_gapindex(::google::protobuf::int32 value) {
  set_has_gapindex();
  gapindex_ = value;
}

// required int32 GapType = 5;
inline bool JK_DoorBoardGapInfo::has_gaptype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_gaptype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorBoardGapInfo::clear_has_gaptype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorBoardGapInfo::clear_gaptype() {
  gaptype_ = 0;
  clear_has_gaptype();
}
inline ::google::protobuf::int32 JK_DoorBoardGapInfo::gaptype() const {
  return gaptype_;
}
inline void JK_DoorBoardGapInfo::set_gaptype(::google::protobuf::int32 value) {
  set_has_gaptype();
  gaptype_ = value;
}

// required int32 GapShape = 6;
inline bool JK_DoorBoardGapInfo::has_gapshape() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_gapshape() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DoorBoardGapInfo::clear_has_gapshape() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DoorBoardGapInfo::clear_gapshape() {
  gapshape_ = 0;
  clear_has_gapshape();
}
inline ::google::protobuf::int32 JK_DoorBoardGapInfo::gapshape() const {
  return gapshape_;
}
inline void JK_DoorBoardGapInfo::set_gapshape(::google::protobuf::int32 value) {
  set_has_gapshape();
  gapshape_ = value;
}

// required string XLenFormula = 7;
inline bool JK_DoorBoardGapInfo::has_xlenformula() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_xlenformula() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DoorBoardGapInfo::clear_has_xlenformula() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DoorBoardGapInfo::clear_xlenformula() {
  if (xlenformula_ != &::google::protobuf::internal::kEmptyString) {
    xlenformula_->clear();
  }
  clear_has_xlenformula();
}
inline const ::std::string& JK_DoorBoardGapInfo::xlenformula() const {
  return *xlenformula_;
}
inline void JK_DoorBoardGapInfo::set_xlenformula(const ::std::string& value) {
  set_has_xlenformula();
  if (xlenformula_ == &::google::protobuf::internal::kEmptyString) {
    xlenformula_ = new ::std::string;
  }
  xlenformula_->assign(value);
}
inline void JK_DoorBoardGapInfo::set_xlenformula(const char* value) {
  set_has_xlenformula();
  if (xlenformula_ == &::google::protobuf::internal::kEmptyString) {
    xlenformula_ = new ::std::string;
  }
  xlenformula_->assign(value);
}
inline void JK_DoorBoardGapInfo::set_xlenformula(const char* value, size_t size) {
  set_has_xlenformula();
  if (xlenformula_ == &::google::protobuf::internal::kEmptyString) {
    xlenformula_ = new ::std::string;
  }
  xlenformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorBoardGapInfo::mutable_xlenformula() {
  set_has_xlenformula();
  if (xlenformula_ == &::google::protobuf::internal::kEmptyString) {
    xlenformula_ = new ::std::string;
  }
  return xlenformula_;
}
inline ::std::string* JK_DoorBoardGapInfo::release_xlenformula() {
  clear_has_xlenformula();
  if (xlenformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xlenformula_;
    xlenformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorBoardGapInfo::set_allocated_xlenformula(::std::string* xlenformula) {
  if (xlenformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xlenformula_;
  }
  if (xlenformula) {
    set_has_xlenformula();
    xlenformula_ = xlenformula;
  } else {
    clear_has_xlenformula();
    xlenformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YLenFormula = 8;
inline bool JK_DoorBoardGapInfo::has_ylenformula() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_ylenformula() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DoorBoardGapInfo::clear_has_ylenformula() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DoorBoardGapInfo::clear_ylenformula() {
  if (ylenformula_ != &::google::protobuf::internal::kEmptyString) {
    ylenformula_->clear();
  }
  clear_has_ylenformula();
}
inline const ::std::string& JK_DoorBoardGapInfo::ylenformula() const {
  return *ylenformula_;
}
inline void JK_DoorBoardGapInfo::set_ylenformula(const ::std::string& value) {
  set_has_ylenformula();
  if (ylenformula_ == &::google::protobuf::internal::kEmptyString) {
    ylenformula_ = new ::std::string;
  }
  ylenformula_->assign(value);
}
inline void JK_DoorBoardGapInfo::set_ylenformula(const char* value) {
  set_has_ylenformula();
  if (ylenformula_ == &::google::protobuf::internal::kEmptyString) {
    ylenformula_ = new ::std::string;
  }
  ylenformula_->assign(value);
}
inline void JK_DoorBoardGapInfo::set_ylenformula(const char* value, size_t size) {
  set_has_ylenformula();
  if (ylenformula_ == &::google::protobuf::internal::kEmptyString) {
    ylenformula_ = new ::std::string;
  }
  ylenformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorBoardGapInfo::mutable_ylenformula() {
  set_has_ylenformula();
  if (ylenformula_ == &::google::protobuf::internal::kEmptyString) {
    ylenformula_ = new ::std::string;
  }
  return ylenformula_;
}
inline ::std::string* JK_DoorBoardGapInfo::release_ylenformula() {
  clear_has_ylenformula();
  if (ylenformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ylenformula_;
    ylenformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorBoardGapInfo::set_allocated_ylenformula(::std::string* ylenformula) {
  if (ylenformula_ != &::google::protobuf::internal::kEmptyString) {
    delete ylenformula_;
  }
  if (ylenformula) {
    set_has_ylenformula();
    ylenformula_ = ylenformula;
  } else {
    clear_has_ylenformula();
    ylenformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string XOffsetFormula = 9;
inline bool JK_DoorBoardGapInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_DoorBoardGapInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_DoorBoardGapInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_DoorBoardGapInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_DoorBoardGapInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_DoorBoardGapInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_DoorBoardGapInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorBoardGapInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_DoorBoardGapInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorBoardGapInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 10;
inline bool JK_DoorBoardGapInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_DoorBoardGapInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_DoorBoardGapInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_DoorBoardGapInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_DoorBoardGapInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_DoorBoardGapInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_DoorBoardGapInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorBoardGapInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_DoorBoardGapInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorBoardGapInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 11;
inline bool JK_DoorBoardGapInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_DoorBoardGapInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_DoorBoardGapInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_DoorBoardGapInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_DoorBoardGapInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_DoorBoardGapInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_DoorBoardGapInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorBoardGapInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_DoorBoardGapInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorBoardGapInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 FactoryID = 12;
inline bool JK_DoorBoardGapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_DoorBoardGapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_DoorBoardGapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorBoardGapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorBoardGapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 13;
inline bool JK_DoorBoardGapInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_DoorBoardGapInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_DoorBoardGapInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_DoorBoardGapInfo::creatorid() const {
  return creatorid_;
}
inline void JK_DoorBoardGapInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 14;
inline bool JK_DoorBoardGapInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_DoorBoardGapInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_DoorBoardGapInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_DoorBoardGapInfo::updaterid() const {
  return updaterid_;
}
inline void JK_DoorBoardGapInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 15;
inline bool JK_DoorBoardGapInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_DoorBoardGapInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_DoorBoardGapInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_DoorBoardGapInfo::createtime() const {
  return createtime_;
}
inline void JK_DoorBoardGapInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 16;
inline bool JK_DoorBoardGapInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_DoorBoardGapInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_DoorBoardGapInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_DoorBoardGapInfo::updatetime() const {
  return updatetime_;
}
inline void JK_DoorBoardGapInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required int64 VerCode = 17;
inline bool JK_DoorBoardGapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_DoorBoardGapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_DoorBoardGapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_DoorBoardGapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorBoardGapInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorBoardGapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_DoorBoardInfo

// required int32 DoorBoardID = 1;
inline bool JK_DoorBoardInfo::has_doorboardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorBoardInfo::set_has_doorboardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorBoardInfo::clear_has_doorboardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorBoardInfo::clear_doorboardid() {
  doorboardid_ = 0;
  clear_has_doorboardid();
}
inline ::google::protobuf::int32 JK_DoorBoardInfo::doorboardid() const {
  return doorboardid_;
}
inline void JK_DoorBoardInfo::set_doorboardid(::google::protobuf::int32 value) {
  set_has_doorboardid();
  doorboardid_ = value;
}

// required int32 DoorID = 2;
inline bool JK_DoorBoardInfo::has_doorid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorBoardInfo::set_has_doorid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorBoardInfo::clear_has_doorid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorBoardInfo::clear_doorid() {
  doorid_ = 0;
  clear_has_doorid();
}
inline ::google::protobuf::int32 JK_DoorBoardInfo::doorid() const {
  return doorid_;
}
inline void JK_DoorBoardInfo::set_doorid(::google::protobuf::int32 value) {
  set_has_doorid();
  doorid_ = value;
}

// required bool IsDel = 3;
inline bool JK_DoorBoardInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorBoardInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorBoardInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorBoardInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_DoorBoardInfo::isdel() const {
  return isdel_;
}
inline void JK_DoorBoardInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsUseDefaultMat = 4;
inline bool JK_DoorBoardInfo::has_isusedefaultmat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorBoardInfo::set_has_isusedefaultmat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorBoardInfo::clear_has_isusedefaultmat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorBoardInfo::clear_isusedefaultmat() {
  isusedefaultmat_ = false;
  clear_has_isusedefaultmat();
}
inline bool JK_DoorBoardInfo::isusedefaultmat() const {
  return isusedefaultmat_;
}
inline void JK_DoorBoardInfo::set_isusedefaultmat(bool value) {
  set_has_isusedefaultmat();
  isusedefaultmat_ = value;
}

// required int32 SplitType = 5;
inline bool JK_DoorBoardInfo::has_splittype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorBoardInfo::set_has_splittype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorBoardInfo::clear_has_splittype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorBoardInfo::clear_splittype() {
  splittype_ = 0;
  clear_has_splittype();
}
inline ::google::protobuf::int32 JK_DoorBoardInfo::splittype() const {
  return splittype_;
}
inline void JK_DoorBoardInfo::set_splittype(::google::protobuf::int32 value) {
  set_has_splittype();
  splittype_ = value;
}

// required int32 SkinDirection = 6;
inline bool JK_DoorBoardInfo::has_skindirection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DoorBoardInfo::set_has_skindirection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DoorBoardInfo::clear_has_skindirection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DoorBoardInfo::clear_skindirection() {
  skindirection_ = 0;
  clear_has_skindirection();
}
inline ::google::protobuf::int32 JK_DoorBoardInfo::skindirection() const {
  return skindirection_;
}
inline void JK_DoorBoardInfo::set_skindirection(::google::protobuf::int32 value) {
  set_has_skindirection();
  skindirection_ = value;
}

// required double ArcX = 7;
inline bool JK_DoorBoardInfo::has_arcx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DoorBoardInfo::set_has_arcx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DoorBoardInfo::clear_has_arcx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DoorBoardInfo::clear_arcx() {
  arcx_ = 0;
  clear_has_arcx();
}
inline double JK_DoorBoardInfo::arcx() const {
  return arcx_;
}
inline void JK_DoorBoardInfo::set_arcx(double value) {
  set_has_arcx();
  arcx_ = value;
}

// required double ArcY = 8;
inline bool JK_DoorBoardInfo::has_arcy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DoorBoardInfo::set_has_arcy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DoorBoardInfo::clear_has_arcy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DoorBoardInfo::clear_arcy() {
  arcy_ = 0;
  clear_has_arcy();
}
inline double JK_DoorBoardInfo::arcy() const {
  return arcy_;
}
inline void JK_DoorBoardInfo::set_arcy(double value) {
  set_has_arcy();
  arcy_ = value;
}

// required double ArcZ = 9;
inline bool JK_DoorBoardInfo::has_arcz() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_DoorBoardInfo::set_has_arcz() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_DoorBoardInfo::clear_has_arcz() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_DoorBoardInfo::clear_arcz() {
  arcz_ = 0;
  clear_has_arcz();
}
inline double JK_DoorBoardInfo::arcz() const {
  return arcz_;
}
inline void JK_DoorBoardInfo::set_arcz(double value) {
  set_has_arcz();
  arcz_ = value;
}

// required string XFormula = 10;
inline bool JK_DoorBoardInfo::has_xformula() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_DoorBoardInfo::set_has_xformula() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_DoorBoardInfo::clear_has_xformula() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_DoorBoardInfo::clear_xformula() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    xformula_->clear();
  }
  clear_has_xformula();
}
inline const ::std::string& JK_DoorBoardInfo::xformula() const {
  return *xformula_;
}
inline void JK_DoorBoardInfo::set_xformula(const ::std::string& value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_DoorBoardInfo::set_xformula(const char* value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_DoorBoardInfo::set_xformula(const char* value, size_t size) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorBoardInfo::mutable_xformula() {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  return xformula_;
}
inline ::std::string* JK_DoorBoardInfo::release_xformula() {
  clear_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xformula_;
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorBoardInfo::set_allocated_xformula(::std::string* xformula) {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (xformula) {
    set_has_xformula();
    xformula_ = xformula;
  } else {
    clear_has_xformula();
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YFormula = 11;
inline bool JK_DoorBoardInfo::has_yformula() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_DoorBoardInfo::set_has_yformula() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_DoorBoardInfo::clear_has_yformula() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_DoorBoardInfo::clear_yformula() {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    yformula_->clear();
  }
  clear_has_yformula();
}
inline const ::std::string& JK_DoorBoardInfo::yformula() const {
  return *yformula_;
}
inline void JK_DoorBoardInfo::set_yformula(const ::std::string& value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_DoorBoardInfo::set_yformula(const char* value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_DoorBoardInfo::set_yformula(const char* value, size_t size) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorBoardInfo::mutable_yformula() {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  return yformula_;
}
inline ::std::string* JK_DoorBoardInfo::release_yformula() {
  clear_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yformula_;
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorBoardInfo::set_allocated_yformula(::std::string* yformula) {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (yformula) {
    set_has_yformula();
    yformula_ = yformula;
  } else {
    clear_has_yformula();
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 XDock = 12;
inline bool JK_DoorBoardInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_DoorBoardInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_DoorBoardInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_DoorBoardInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 JK_DoorBoardInfo::xdock() const {
  return xdock_;
}
inline void JK_DoorBoardInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 13;
inline bool JK_DoorBoardInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_DoorBoardInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_DoorBoardInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 JK_DoorBoardInfo::ydock() const {
  return ydock_;
}
inline void JK_DoorBoardInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 14;
inline bool JK_DoorBoardInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_DoorBoardInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_DoorBoardInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 JK_DoorBoardInfo::zdock() const {
  return zdock_;
}
inline void JK_DoorBoardInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required string XOffsetFormula = 15;
inline bool JK_DoorBoardInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_DoorBoardInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_DoorBoardInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_DoorBoardInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_DoorBoardInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_DoorBoardInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_DoorBoardInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorBoardInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_DoorBoardInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorBoardInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 16;
inline bool JK_DoorBoardInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_DoorBoardInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_DoorBoardInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_DoorBoardInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_DoorBoardInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_DoorBoardInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_DoorBoardInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorBoardInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_DoorBoardInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorBoardInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 17;
inline bool JK_DoorBoardInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_DoorBoardInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_DoorBoardInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_DoorBoardInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_DoorBoardInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_DoorBoardInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_DoorBoardInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorBoardInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_DoorBoardInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorBoardInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 DoorBoardIndex = 18;
inline bool JK_DoorBoardInfo::has_doorboardindex() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_doorboardindex() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_DoorBoardInfo::clear_has_doorboardindex() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_DoorBoardInfo::clear_doorboardindex() {
  doorboardindex_ = 0;
  clear_has_doorboardindex();
}
inline ::google::protobuf::int32 JK_DoorBoardInfo::doorboardindex() const {
  return doorboardindex_;
}
inline void JK_DoorBoardInfo::set_doorboardindex(::google::protobuf::int32 value) {
  set_has_doorboardindex();
  doorboardindex_ = value;
}

// required string DoorBoardName = 19;
inline bool JK_DoorBoardInfo::has_doorboardname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_doorboardname() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_DoorBoardInfo::clear_has_doorboardname() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_DoorBoardInfo::clear_doorboardname() {
  if (doorboardname_ != &::google::protobuf::internal::kEmptyString) {
    doorboardname_->clear();
  }
  clear_has_doorboardname();
}
inline const ::std::string& JK_DoorBoardInfo::doorboardname() const {
  return *doorboardname_;
}
inline void JK_DoorBoardInfo::set_doorboardname(const ::std::string& value) {
  set_has_doorboardname();
  if (doorboardname_ == &::google::protobuf::internal::kEmptyString) {
    doorboardname_ = new ::std::string;
  }
  doorboardname_->assign(value);
}
inline void JK_DoorBoardInfo::set_doorboardname(const char* value) {
  set_has_doorboardname();
  if (doorboardname_ == &::google::protobuf::internal::kEmptyString) {
    doorboardname_ = new ::std::string;
  }
  doorboardname_->assign(value);
}
inline void JK_DoorBoardInfo::set_doorboardname(const char* value, size_t size) {
  set_has_doorboardname();
  if (doorboardname_ == &::google::protobuf::internal::kEmptyString) {
    doorboardname_ = new ::std::string;
  }
  doorboardname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorBoardInfo::mutable_doorboardname() {
  set_has_doorboardname();
  if (doorboardname_ == &::google::protobuf::internal::kEmptyString) {
    doorboardname_ = new ::std::string;
  }
  return doorboardname_;
}
inline ::std::string* JK_DoorBoardInfo::release_doorboardname() {
  clear_has_doorboardname();
  if (doorboardname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doorboardname_;
    doorboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorBoardInfo::set_allocated_doorboardname(::std::string* doorboardname) {
  if (doorboardname_ != &::google::protobuf::internal::kEmptyString) {
    delete doorboardname_;
  }
  if (doorboardname) {
    set_has_doorboardname();
    doorboardname_ = doorboardname;
  } else {
    clear_has_doorboardname();
    doorboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DoorBoardMemo = 20;
inline bool JK_DoorBoardInfo::has_doorboardmemo() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_doorboardmemo() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_DoorBoardInfo::clear_has_doorboardmemo() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_DoorBoardInfo::clear_doorboardmemo() {
  if (doorboardmemo_ != &::google::protobuf::internal::kEmptyString) {
    doorboardmemo_->clear();
  }
  clear_has_doorboardmemo();
}
inline const ::std::string& JK_DoorBoardInfo::doorboardmemo() const {
  return *doorboardmemo_;
}
inline void JK_DoorBoardInfo::set_doorboardmemo(const ::std::string& value) {
  set_has_doorboardmemo();
  if (doorboardmemo_ == &::google::protobuf::internal::kEmptyString) {
    doorboardmemo_ = new ::std::string;
  }
  doorboardmemo_->assign(value);
}
inline void JK_DoorBoardInfo::set_doorboardmemo(const char* value) {
  set_has_doorboardmemo();
  if (doorboardmemo_ == &::google::protobuf::internal::kEmptyString) {
    doorboardmemo_ = new ::std::string;
  }
  doorboardmemo_->assign(value);
}
inline void JK_DoorBoardInfo::set_doorboardmemo(const char* value, size_t size) {
  set_has_doorboardmemo();
  if (doorboardmemo_ == &::google::protobuf::internal::kEmptyString) {
    doorboardmemo_ = new ::std::string;
  }
  doorboardmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorBoardInfo::mutable_doorboardmemo() {
  set_has_doorboardmemo();
  if (doorboardmemo_ == &::google::protobuf::internal::kEmptyString) {
    doorboardmemo_ = new ::std::string;
  }
  return doorboardmemo_;
}
inline ::std::string* JK_DoorBoardInfo::release_doorboardmemo() {
  clear_has_doorboardmemo();
  if (doorboardmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doorboardmemo_;
    doorboardmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorBoardInfo::set_allocated_doorboardmemo(::std::string* doorboardmemo) {
  if (doorboardmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete doorboardmemo_;
  }
  if (doorboardmemo) {
    set_has_doorboardmemo();
    doorboardmemo_ = doorboardmemo;
  } else {
    clear_has_doorboardmemo();
    doorboardmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 21;
inline bool JK_DoorBoardInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_DoorBoardInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_DoorBoardInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorBoardInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorBoardInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 22;
inline bool JK_DoorBoardInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_DoorBoardInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_DoorBoardInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorBoardInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorBoardInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 23;
inline bool JK_DoorBoardInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_DoorBoardInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_DoorBoardInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_DoorBoardInfo::creatorid() const {
  return creatorid_;
}
inline void JK_DoorBoardInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 24;
inline bool JK_DoorBoardInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void JK_DoorBoardInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void JK_DoorBoardInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_DoorBoardInfo::updaterid() const {
  return updaterid_;
}
inline void JK_DoorBoardInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 25;
inline bool JK_DoorBoardInfo::has_createtime() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_createtime() {
  _has_bits_[0] |= 0x01000000u;
}
inline void JK_DoorBoardInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void JK_DoorBoardInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_DoorBoardInfo::createtime() const {
  return createtime_;
}
inline void JK_DoorBoardInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 26;
inline bool JK_DoorBoardInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void JK_DoorBoardInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void JK_DoorBoardInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void JK_DoorBoardInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_DoorBoardInfo::updatetime() const {
  return updatetime_;
}
inline void JK_DoorBoardInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_DoorBoardMatMapInfo

// required int32 DoorBoardID = 1;
inline bool JK_DoorBoardMatMapInfo::has_doorboardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorBoardMatMapInfo::set_has_doorboardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorBoardMatMapInfo::clear_has_doorboardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorBoardMatMapInfo::clear_doorboardid() {
  doorboardid_ = 0;
  clear_has_doorboardid();
}
inline ::google::protobuf::int32 JK_DoorBoardMatMapInfo::doorboardid() const {
  return doorboardid_;
}
inline void JK_DoorBoardMatMapInfo::set_doorboardid(::google::protobuf::int32 value) {
  set_has_doorboardid();
  doorboardid_ = value;
}

// required int32 MatID = 2;
inline bool JK_DoorBoardMatMapInfo::has_matid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorBoardMatMapInfo::set_has_matid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorBoardMatMapInfo::clear_has_matid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorBoardMatMapInfo::clear_matid() {
  matid_ = 0;
  clear_has_matid();
}
inline ::google::protobuf::int32 JK_DoorBoardMatMapInfo::matid() const {
  return matid_;
}
inline void JK_DoorBoardMatMapInfo::set_matid(::google::protobuf::int32 value) {
  set_has_matid();
  matid_ = value;
}

// required int32 MatGType = 3;
inline bool JK_DoorBoardMatMapInfo::has_matgtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorBoardMatMapInfo::set_has_matgtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorBoardMatMapInfo::clear_has_matgtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorBoardMatMapInfo::clear_matgtype() {
  matgtype_ = 0;
  clear_has_matgtype();
}
inline ::google::protobuf::int32 JK_DoorBoardMatMapInfo::matgtype() const {
  return matgtype_;
}
inline void JK_DoorBoardMatMapInfo::set_matgtype(::google::protobuf::int32 value) {
  set_has_matgtype();
  matgtype_ = value;
}

// required bool IsDefault = 4;
inline bool JK_DoorBoardMatMapInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorBoardMatMapInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorBoardMatMapInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorBoardMatMapInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_DoorBoardMatMapInfo::isdefault() const {
  return isdefault_;
}
inline void JK_DoorBoardMatMapInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 5;
inline bool JK_DoorBoardMatMapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorBoardMatMapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorBoardMatMapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorBoardMatMapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorBoardMatMapInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorBoardMatMapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 6;
inline bool JK_DoorBoardMatMapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DoorBoardMatMapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DoorBoardMatMapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DoorBoardMatMapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorBoardMatMapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorBoardMatMapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_DoorBoardSealInfo

// required int32 DoorBoardID = 1;
inline bool JK_DoorBoardSealInfo::has_doorboardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorBoardSealInfo::set_has_doorboardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorBoardSealInfo::clear_has_doorboardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorBoardSealInfo::clear_doorboardid() {
  doorboardid_ = 0;
  clear_has_doorboardid();
}
inline ::google::protobuf::int32 JK_DoorBoardSealInfo::doorboardid() const {
  return doorboardid_;
}
inline void JK_DoorBoardSealInfo::set_doorboardid(::google::protobuf::int32 value) {
  set_has_doorboardid();
  doorboardid_ = value;
}

// required int32 SealOrder = 2;
inline bool JK_DoorBoardSealInfo::has_sealorder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorBoardSealInfo::set_has_sealorder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorBoardSealInfo::clear_has_sealorder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorBoardSealInfo::clear_sealorder() {
  sealorder_ = 0;
  clear_has_sealorder();
}
inline ::google::protobuf::int32 JK_DoorBoardSealInfo::sealorder() const {
  return sealorder_;
}
inline void JK_DoorBoardSealInfo::set_sealorder(::google::protobuf::int32 value) {
  set_has_sealorder();
  sealorder_ = value;
}

// required int32 SealType = 3;
inline bool JK_DoorBoardSealInfo::has_sealtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorBoardSealInfo::set_has_sealtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorBoardSealInfo::clear_has_sealtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorBoardSealInfo::clear_sealtype() {
  sealtype_ = 0;
  clear_has_sealtype();
}
inline ::google::protobuf::int32 JK_DoorBoardSealInfo::sealtype() const {
  return sealtype_;
}
inline void JK_DoorBoardSealInfo::set_sealtype(::google::protobuf::int32 value) {
  set_has_sealtype();
  sealtype_ = value;
}

// required int64 VerCode = 4;
inline bool JK_DoorBoardSealInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorBoardSealInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorBoardSealInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorBoardSealInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorBoardSealInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorBoardSealInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_DoorBoardSealInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorBoardSealInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorBoardSealInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorBoardSealInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorBoardSealInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorBoardSealInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 6;
inline bool JK_DoorBoardSealInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DoorBoardSealInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DoorBoardSealInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DoorBoardSealInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_DoorBoardSealInfo::creatorid() const {
  return creatorid_;
}
inline void JK_DoorBoardSealInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 7;
inline bool JK_DoorBoardSealInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DoorBoardSealInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DoorBoardSealInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DoorBoardSealInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_DoorBoardSealInfo::updaterid() const {
  return updaterid_;
}
inline void JK_DoorBoardSealInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 8;
inline bool JK_DoorBoardSealInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DoorBoardSealInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DoorBoardSealInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DoorBoardSealInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_DoorBoardSealInfo::createtime() const {
  return createtime_;
}
inline void JK_DoorBoardSealInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 9;
inline bool JK_DoorBoardSealInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_DoorBoardSealInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_DoorBoardSealInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_DoorBoardSealInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_DoorBoardSealInfo::updatetime() const {
  return updatetime_;
}
inline void JK_DoorBoardSealInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required int32 SealIndex = 10;
inline bool JK_DoorBoardSealInfo::has_sealindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_DoorBoardSealInfo::set_has_sealindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_DoorBoardSealInfo::clear_has_sealindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_DoorBoardSealInfo::clear_sealindex() {
  sealindex_ = 0;
  clear_has_sealindex();
}
inline ::google::protobuf::int32 JK_DoorBoardSealInfo::sealindex() const {
  return sealindex_;
}
inline void JK_DoorBoardSealInfo::set_sealindex(::google::protobuf::int32 value) {
  set_has_sealindex();
  sealindex_ = value;
}

// -------------------------------------------------------------------

// JK_DoorInfo

// required int32 DoorID = 1;
inline bool JK_DoorInfo::has_doorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorInfo::set_has_doorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorInfo::clear_has_doorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorInfo::clear_doorid() {
  doorid_ = 0;
  clear_has_doorid();
}
inline ::google::protobuf::int32 JK_DoorInfo::doorid() const {
  return doorid_;
}
inline void JK_DoorInfo::set_doorid(::google::protobuf::int32 value) {
  set_has_doorid();
  doorid_ = value;
}

// required int32 GroupID = 2;
inline bool JK_DoorInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_DoorInfo::groupid() const {
  return groupid_;
}
inline void JK_DoorInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 FactoryID = 3;
inline bool JK_DoorInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 4;
inline bool JK_DoorInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required bool IsDel = 5;
inline bool JK_DoorInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_DoorInfo::isdel() const {
  return isdel_;
}
inline void JK_DoorInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsActive = 6;
inline bool JK_DoorInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DoorInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DoorInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DoorInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_DoorInfo::isactive() const {
  return isactive_;
}
inline void JK_DoorInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required int32 GTypeID = 7;
inline bool JK_DoorInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DoorInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DoorInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DoorInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 JK_DoorInfo::gtypeid() const {
  return gtypeid_;
}
inline void JK_DoorInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 CombineType = 8;
inline bool JK_DoorInfo::has_combinetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DoorInfo::set_has_combinetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DoorInfo::clear_has_combinetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DoorInfo::clear_combinetype() {
  combinetype_ = 0;
  clear_has_combinetype();
}
inline ::google::protobuf::int32 JK_DoorInfo::combinetype() const {
  return combinetype_;
}
inline void JK_DoorInfo::set_combinetype(::google::protobuf::int32 value) {
  set_has_combinetype();
  combinetype_ = value;
}

// required int32 PhotoID = 9;
inline bool JK_DoorInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_DoorInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_DoorInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_DoorInfo::clear_photoid() {
  photoid_ = 0;
  clear_has_photoid();
}
inline ::google::protobuf::int32 JK_DoorInfo::photoid() const {
  return photoid_;
}
inline void JK_DoorInfo::set_photoid(::google::protobuf::int32 value) {
  set_has_photoid();
  photoid_ = value;
}

// required double VirtualContainerXLen = 10;
inline bool JK_DoorInfo::has_virtualcontainerxlen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_DoorInfo::set_has_virtualcontainerxlen() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_DoorInfo::clear_has_virtualcontainerxlen() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_DoorInfo::clear_virtualcontainerxlen() {
  virtualcontainerxlen_ = 0;
  clear_has_virtualcontainerxlen();
}
inline double JK_DoorInfo::virtualcontainerxlen() const {
  return virtualcontainerxlen_;
}
inline void JK_DoorInfo::set_virtualcontainerxlen(double value) {
  set_has_virtualcontainerxlen();
  virtualcontainerxlen_ = value;
}

// required double VirtualContainerYLen = 11;
inline bool JK_DoorInfo::has_virtualcontainerylen() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_DoorInfo::set_has_virtualcontainerylen() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_DoorInfo::clear_has_virtualcontainerylen() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_DoorInfo::clear_virtualcontainerylen() {
  virtualcontainerylen_ = 0;
  clear_has_virtualcontainerylen();
}
inline double JK_DoorInfo::virtualcontainerylen() const {
  return virtualcontainerylen_;
}
inline void JK_DoorInfo::set_virtualcontainerylen(double value) {
  set_has_virtualcontainerylen();
  virtualcontainerylen_ = value;
}

// required double VirtualContainerZLen = 12;
inline bool JK_DoorInfo::has_virtualcontainerzlen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_DoorInfo::set_has_virtualcontainerzlen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_DoorInfo::clear_has_virtualcontainerzlen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_DoorInfo::clear_virtualcontainerzlen() {
  virtualcontainerzlen_ = 0;
  clear_has_virtualcontainerzlen();
}
inline double JK_DoorInfo::virtualcontainerzlen() const {
  return virtualcontainerzlen_;
}
inline void JK_DoorInfo::set_virtualcontainerzlen(double value) {
  set_has_virtualcontainerzlen();
  virtualcontainerzlen_ = value;
}

// required int32 CreatorID = 13;
inline bool JK_DoorInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_DoorInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_DoorInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_DoorInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_DoorInfo::creatorid() const {
  return creatorid_;
}
inline void JK_DoorInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 14;
inline bool JK_DoorInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_DoorInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_DoorInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_DoorInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_DoorInfo::updaterid() const {
  return updaterid_;
}
inline void JK_DoorInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 15;
inline bool JK_DoorInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_DoorInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_DoorInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_DoorInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_DoorInfo::createtime() const {
  return createtime_;
}
inline void JK_DoorInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 16;
inline bool JK_DoorInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_DoorInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_DoorInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_DoorInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_DoorInfo::updatetime() const {
  return updatetime_;
}
inline void JK_DoorInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string DoorCode = 17;
inline bool JK_DoorInfo::has_doorcode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_DoorInfo::set_has_doorcode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_DoorInfo::clear_has_doorcode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_DoorInfo::clear_doorcode() {
  if (doorcode_ != &::google::protobuf::internal::kEmptyString) {
    doorcode_->clear();
  }
  clear_has_doorcode();
}
inline const ::std::string& JK_DoorInfo::doorcode() const {
  return *doorcode_;
}
inline void JK_DoorInfo::set_doorcode(const ::std::string& value) {
  set_has_doorcode();
  if (doorcode_ == &::google::protobuf::internal::kEmptyString) {
    doorcode_ = new ::std::string;
  }
  doorcode_->assign(value);
}
inline void JK_DoorInfo::set_doorcode(const char* value) {
  set_has_doorcode();
  if (doorcode_ == &::google::protobuf::internal::kEmptyString) {
    doorcode_ = new ::std::string;
  }
  doorcode_->assign(value);
}
inline void JK_DoorInfo::set_doorcode(const char* value, size_t size) {
  set_has_doorcode();
  if (doorcode_ == &::google::protobuf::internal::kEmptyString) {
    doorcode_ = new ::std::string;
  }
  doorcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorInfo::mutable_doorcode() {
  set_has_doorcode();
  if (doorcode_ == &::google::protobuf::internal::kEmptyString) {
    doorcode_ = new ::std::string;
  }
  return doorcode_;
}
inline ::std::string* JK_DoorInfo::release_doorcode() {
  clear_has_doorcode();
  if (doorcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doorcode_;
    doorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorInfo::set_allocated_doorcode(::std::string* doorcode) {
  if (doorcode_ != &::google::protobuf::internal::kEmptyString) {
    delete doorcode_;
  }
  if (doorcode) {
    set_has_doorcode();
    doorcode_ = doorcode;
  } else {
    clear_has_doorcode();
    doorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DoorName = 18;
inline bool JK_DoorInfo::has_doorname() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_DoorInfo::set_has_doorname() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_DoorInfo::clear_has_doorname() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_DoorInfo::clear_doorname() {
  if (doorname_ != &::google::protobuf::internal::kEmptyString) {
    doorname_->clear();
  }
  clear_has_doorname();
}
inline const ::std::string& JK_DoorInfo::doorname() const {
  return *doorname_;
}
inline void JK_DoorInfo::set_doorname(const ::std::string& value) {
  set_has_doorname();
  if (doorname_ == &::google::protobuf::internal::kEmptyString) {
    doorname_ = new ::std::string;
  }
  doorname_->assign(value);
}
inline void JK_DoorInfo::set_doorname(const char* value) {
  set_has_doorname();
  if (doorname_ == &::google::protobuf::internal::kEmptyString) {
    doorname_ = new ::std::string;
  }
  doorname_->assign(value);
}
inline void JK_DoorInfo::set_doorname(const char* value, size_t size) {
  set_has_doorname();
  if (doorname_ == &::google::protobuf::internal::kEmptyString) {
    doorname_ = new ::std::string;
  }
  doorname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorInfo::mutable_doorname() {
  set_has_doorname();
  if (doorname_ == &::google::protobuf::internal::kEmptyString) {
    doorname_ = new ::std::string;
  }
  return doorname_;
}
inline ::std::string* JK_DoorInfo::release_doorname() {
  clear_has_doorname();
  if (doorname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doorname_;
    doorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorInfo::set_allocated_doorname(::std::string* doorname) {
  if (doorname_ != &::google::protobuf::internal::kEmptyString) {
    delete doorname_;
  }
  if (doorname) {
    set_has_doorname();
    doorname_ = doorname;
  } else {
    clear_has_doorname();
    doorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DoorMemo = 19;
inline bool JK_DoorInfo::has_doormemo() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_DoorInfo::set_has_doormemo() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_DoorInfo::clear_has_doormemo() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_DoorInfo::clear_doormemo() {
  if (doormemo_ != &::google::protobuf::internal::kEmptyString) {
    doormemo_->clear();
  }
  clear_has_doormemo();
}
inline const ::std::string& JK_DoorInfo::doormemo() const {
  return *doormemo_;
}
inline void JK_DoorInfo::set_doormemo(const ::std::string& value) {
  set_has_doormemo();
  if (doormemo_ == &::google::protobuf::internal::kEmptyString) {
    doormemo_ = new ::std::string;
  }
  doormemo_->assign(value);
}
inline void JK_DoorInfo::set_doormemo(const char* value) {
  set_has_doormemo();
  if (doormemo_ == &::google::protobuf::internal::kEmptyString) {
    doormemo_ = new ::std::string;
  }
  doormemo_->assign(value);
}
inline void JK_DoorInfo::set_doormemo(const char* value, size_t size) {
  set_has_doormemo();
  if (doormemo_ == &::google::protobuf::internal::kEmptyString) {
    doormemo_ = new ::std::string;
  }
  doormemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorInfo::mutable_doormemo() {
  set_has_doormemo();
  if (doormemo_ == &::google::protobuf::internal::kEmptyString) {
    doormemo_ = new ::std::string;
  }
  return doormemo_;
}
inline ::std::string* JK_DoorInfo::release_doormemo() {
  clear_has_doormemo();
  if (doormemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doormemo_;
    doormemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorInfo::set_allocated_doormemo(::std::string* doormemo) {
  if (doormemo_ != &::google::protobuf::internal::kEmptyString) {
    delete doormemo_;
  }
  if (doormemo) {
    set_has_doormemo();
    doormemo_ = doormemo;
  } else {
    clear_has_doormemo();
    doormemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// JK_DoorMatMapInfo

// required int32 DoorID = 1;
inline bool JK_DoorMatMapInfo::has_doorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorMatMapInfo::set_has_doorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorMatMapInfo::clear_has_doorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorMatMapInfo::clear_doorid() {
  doorid_ = 0;
  clear_has_doorid();
}
inline ::google::protobuf::int32 JK_DoorMatMapInfo::doorid() const {
  return doorid_;
}
inline void JK_DoorMatMapInfo::set_doorid(::google::protobuf::int32 value) {
  set_has_doorid();
  doorid_ = value;
}

// required int32 DoorMatPlanID = 2;
inline bool JK_DoorMatMapInfo::has_doormatplanid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorMatMapInfo::set_has_doormatplanid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorMatMapInfo::clear_has_doormatplanid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorMatMapInfo::clear_doormatplanid() {
  doormatplanid_ = 0;
  clear_has_doormatplanid();
}
inline ::google::protobuf::int32 JK_DoorMatMapInfo::doormatplanid() const {
  return doormatplanid_;
}
inline void JK_DoorMatMapInfo::set_doormatplanid(::google::protobuf::int32 value) {
  set_has_doormatplanid();
  doormatplanid_ = value;
}

// required bool IsDefault = 3;
inline bool JK_DoorMatMapInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorMatMapInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorMatMapInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorMatMapInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_DoorMatMapInfo::isdefault() const {
  return isdefault_;
}
inline void JK_DoorMatMapInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 4;
inline bool JK_DoorMatMapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorMatMapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorMatMapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorMatMapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorMatMapInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorMatMapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_DoorMatMapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorMatMapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorMatMapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorMatMapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorMatMapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorMatMapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_DoorMatPlanHandleMapInfo

// required int32 DoorMatPlanID = 1;
inline bool JK_DoorMatPlanHandleMapInfo::has_doormatplanid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorMatPlanHandleMapInfo::set_has_doormatplanid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorMatPlanHandleMapInfo::clear_has_doormatplanid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorMatPlanHandleMapInfo::clear_doormatplanid() {
  doormatplanid_ = 0;
  clear_has_doormatplanid();
}
inline ::google::protobuf::int32 JK_DoorMatPlanHandleMapInfo::doormatplanid() const {
  return doormatplanid_;
}
inline void JK_DoorMatPlanHandleMapInfo::set_doormatplanid(::google::protobuf::int32 value) {
  set_has_doormatplanid();
  doormatplanid_ = value;
}

// required int32 HandleID = 2;
inline bool JK_DoorMatPlanHandleMapInfo::has_handleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorMatPlanHandleMapInfo::set_has_handleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorMatPlanHandleMapInfo::clear_has_handleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorMatPlanHandleMapInfo::clear_handleid() {
  handleid_ = 0;
  clear_has_handleid();
}
inline ::google::protobuf::int32 JK_DoorMatPlanHandleMapInfo::handleid() const {
  return handleid_;
}
inline void JK_DoorMatPlanHandleMapInfo::set_handleid(::google::protobuf::int32 value) {
  set_has_handleid();
  handleid_ = value;
}

// required int64 VerCode = 3;
inline bool JK_DoorMatPlanHandleMapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorMatPlanHandleMapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorMatPlanHandleMapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorMatPlanHandleMapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorMatPlanHandleMapInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorMatPlanHandleMapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 4;
inline bool JK_DoorMatPlanHandleMapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorMatPlanHandleMapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorMatPlanHandleMapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorMatPlanHandleMapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorMatPlanHandleMapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorMatPlanHandleMapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_DoorMatPlanInfo

// required int32 DoorMatPlanID = 1;
inline bool JK_DoorMatPlanInfo::has_doormatplanid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_doormatplanid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorMatPlanInfo::clear_has_doormatplanid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorMatPlanInfo::clear_doormatplanid() {
  doormatplanid_ = 0;
  clear_has_doormatplanid();
}
inline ::google::protobuf::int32 JK_DoorMatPlanInfo::doormatplanid() const {
  return doormatplanid_;
}
inline void JK_DoorMatPlanInfo::set_doormatplanid(::google::protobuf::int32 value) {
  set_has_doormatplanid();
  doormatplanid_ = value;
}

// required int32 GroupID = 2;
inline bool JK_DoorMatPlanInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorMatPlanInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorMatPlanInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_DoorMatPlanInfo::groupid() const {
  return groupid_;
}
inline void JK_DoorMatPlanInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required bool IsDel = 3;
inline bool JK_DoorMatPlanInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorMatPlanInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorMatPlanInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_DoorMatPlanInfo::isdel() const {
  return isdel_;
}
inline void JK_DoorMatPlanInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsActive = 4;
inline bool JK_DoorMatPlanInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorMatPlanInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorMatPlanInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_DoorMatPlanInfo::isactive() const {
  return isactive_;
}
inline void JK_DoorMatPlanInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_DoorMatPlanInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorMatPlanInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorMatPlanInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorMatPlanInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorMatPlanInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 6;
inline bool JK_DoorMatPlanInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DoorMatPlanInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DoorMatPlanInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_DoorMatPlanInfo::creatorid() const {
  return creatorid_;
}
inline void JK_DoorMatPlanInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 7;
inline bool JK_DoorMatPlanInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DoorMatPlanInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DoorMatPlanInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_DoorMatPlanInfo::updaterid() const {
  return updaterid_;
}
inline void JK_DoorMatPlanInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 8;
inline bool JK_DoorMatPlanInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DoorMatPlanInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DoorMatPlanInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_DoorMatPlanInfo::createtime() const {
  return createtime_;
}
inline void JK_DoorMatPlanInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 9;
inline bool JK_DoorMatPlanInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_DoorMatPlanInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_DoorMatPlanInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_DoorMatPlanInfo::updatetime() const {
  return updatetime_;
}
inline void JK_DoorMatPlanInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required int32 MatID = 10;
inline bool JK_DoorMatPlanInfo::has_matid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_matid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_DoorMatPlanInfo::clear_has_matid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_DoorMatPlanInfo::clear_matid() {
  matid_ = 0;
  clear_has_matid();
}
inline ::google::protobuf::int32 JK_DoorMatPlanInfo::matid() const {
  return matid_;
}
inline void JK_DoorMatPlanInfo::set_matid(::google::protobuf::int32 value) {
  set_has_matid();
  matid_ = value;
}

// required int32 MatGType = 11;
inline bool JK_DoorMatPlanInfo::has_matgtype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_matgtype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_DoorMatPlanInfo::clear_has_matgtype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_DoorMatPlanInfo::clear_matgtype() {
  matgtype_ = 0;
  clear_has_matgtype();
}
inline ::google::protobuf::int32 JK_DoorMatPlanInfo::matgtype() const {
  return matgtype_;
}
inline void JK_DoorMatPlanInfo::set_matgtype(::google::protobuf::int32 value) {
  set_has_matgtype();
  matgtype_ = value;
}

// required string DoorMatPlanCode = 12;
inline bool JK_DoorMatPlanInfo::has_doormatplancode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_doormatplancode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_DoorMatPlanInfo::clear_has_doormatplancode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_DoorMatPlanInfo::clear_doormatplancode() {
  if (doormatplancode_ != &::google::protobuf::internal::kEmptyString) {
    doormatplancode_->clear();
  }
  clear_has_doormatplancode();
}
inline const ::std::string& JK_DoorMatPlanInfo::doormatplancode() const {
  return *doormatplancode_;
}
inline void JK_DoorMatPlanInfo::set_doormatplancode(const ::std::string& value) {
  set_has_doormatplancode();
  if (doormatplancode_ == &::google::protobuf::internal::kEmptyString) {
    doormatplancode_ = new ::std::string;
  }
  doormatplancode_->assign(value);
}
inline void JK_DoorMatPlanInfo::set_doormatplancode(const char* value) {
  set_has_doormatplancode();
  if (doormatplancode_ == &::google::protobuf::internal::kEmptyString) {
    doormatplancode_ = new ::std::string;
  }
  doormatplancode_->assign(value);
}
inline void JK_DoorMatPlanInfo::set_doormatplancode(const char* value, size_t size) {
  set_has_doormatplancode();
  if (doormatplancode_ == &::google::protobuf::internal::kEmptyString) {
    doormatplancode_ = new ::std::string;
  }
  doormatplancode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorMatPlanInfo::mutable_doormatplancode() {
  set_has_doormatplancode();
  if (doormatplancode_ == &::google::protobuf::internal::kEmptyString) {
    doormatplancode_ = new ::std::string;
  }
  return doormatplancode_;
}
inline ::std::string* JK_DoorMatPlanInfo::release_doormatplancode() {
  clear_has_doormatplancode();
  if (doormatplancode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doormatplancode_;
    doormatplancode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorMatPlanInfo::set_allocated_doormatplancode(::std::string* doormatplancode) {
  if (doormatplancode_ != &::google::protobuf::internal::kEmptyString) {
    delete doormatplancode_;
  }
  if (doormatplancode) {
    set_has_doormatplancode();
    doormatplancode_ = doormatplancode;
  } else {
    clear_has_doormatplancode();
    doormatplancode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DoorMatPlanName = 13;
inline bool JK_DoorMatPlanInfo::has_doormatplanname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_doormatplanname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_DoorMatPlanInfo::clear_has_doormatplanname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_DoorMatPlanInfo::clear_doormatplanname() {
  if (doormatplanname_ != &::google::protobuf::internal::kEmptyString) {
    doormatplanname_->clear();
  }
  clear_has_doormatplanname();
}
inline const ::std::string& JK_DoorMatPlanInfo::doormatplanname() const {
  return *doormatplanname_;
}
inline void JK_DoorMatPlanInfo::set_doormatplanname(const ::std::string& value) {
  set_has_doormatplanname();
  if (doormatplanname_ == &::google::protobuf::internal::kEmptyString) {
    doormatplanname_ = new ::std::string;
  }
  doormatplanname_->assign(value);
}
inline void JK_DoorMatPlanInfo::set_doormatplanname(const char* value) {
  set_has_doormatplanname();
  if (doormatplanname_ == &::google::protobuf::internal::kEmptyString) {
    doormatplanname_ = new ::std::string;
  }
  doormatplanname_->assign(value);
}
inline void JK_DoorMatPlanInfo::set_doormatplanname(const char* value, size_t size) {
  set_has_doormatplanname();
  if (doormatplanname_ == &::google::protobuf::internal::kEmptyString) {
    doormatplanname_ = new ::std::string;
  }
  doormatplanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorMatPlanInfo::mutable_doormatplanname() {
  set_has_doormatplanname();
  if (doormatplanname_ == &::google::protobuf::internal::kEmptyString) {
    doormatplanname_ = new ::std::string;
  }
  return doormatplanname_;
}
inline ::std::string* JK_DoorMatPlanInfo::release_doormatplanname() {
  clear_has_doormatplanname();
  if (doormatplanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doormatplanname_;
    doormatplanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorMatPlanInfo::set_allocated_doormatplanname(::std::string* doormatplanname) {
  if (doormatplanname_ != &::google::protobuf::internal::kEmptyString) {
    delete doormatplanname_;
  }
  if (doormatplanname) {
    set_has_doormatplanname();
    doormatplanname_ = doormatplanname;
  } else {
    clear_has_doormatplanname();
    doormatplanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DoorMatPlanMemo = 14;
inline bool JK_DoorMatPlanInfo::has_doormatplanmemo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_doormatplanmemo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_DoorMatPlanInfo::clear_has_doormatplanmemo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_DoorMatPlanInfo::clear_doormatplanmemo() {
  if (doormatplanmemo_ != &::google::protobuf::internal::kEmptyString) {
    doormatplanmemo_->clear();
  }
  clear_has_doormatplanmemo();
}
inline const ::std::string& JK_DoorMatPlanInfo::doormatplanmemo() const {
  return *doormatplanmemo_;
}
inline void JK_DoorMatPlanInfo::set_doormatplanmemo(const ::std::string& value) {
  set_has_doormatplanmemo();
  if (doormatplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    doormatplanmemo_ = new ::std::string;
  }
  doormatplanmemo_->assign(value);
}
inline void JK_DoorMatPlanInfo::set_doormatplanmemo(const char* value) {
  set_has_doormatplanmemo();
  if (doormatplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    doormatplanmemo_ = new ::std::string;
  }
  doormatplanmemo_->assign(value);
}
inline void JK_DoorMatPlanInfo::set_doormatplanmemo(const char* value, size_t size) {
  set_has_doormatplanmemo();
  if (doormatplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    doormatplanmemo_ = new ::std::string;
  }
  doormatplanmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorMatPlanInfo::mutable_doormatplanmemo() {
  set_has_doormatplanmemo();
  if (doormatplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    doormatplanmemo_ = new ::std::string;
  }
  return doormatplanmemo_;
}
inline ::std::string* JK_DoorMatPlanInfo::release_doormatplanmemo() {
  clear_has_doormatplanmemo();
  if (doormatplanmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doormatplanmemo_;
    doormatplanmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorMatPlanInfo::set_allocated_doormatplanmemo(::std::string* doormatplanmemo) {
  if (doormatplanmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete doormatplanmemo_;
  }
  if (doormatplanmemo) {
    set_has_doormatplanmemo();
    doormatplanmemo_ = doormatplanmemo;
  } else {
    clear_has_doormatplanmemo();
    doormatplanmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 15;
inline bool JK_DoorMatPlanInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_DoorMatPlanInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_DoorMatPlanInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorMatPlanInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorMatPlanInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 ModelID = 16;
inline bool JK_DoorMatPlanInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_DoorMatPlanInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_DoorMatPlanInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 JK_DoorMatPlanInfo::modelid() const {
  return modelid_;
}
inline void JK_DoorMatPlanInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required bool IsCanSeal = 17;
inline bool JK_DoorMatPlanInfo::has_iscanseal() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_DoorMatPlanInfo::set_has_iscanseal() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_DoorMatPlanInfo::clear_has_iscanseal() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_DoorMatPlanInfo::clear_iscanseal() {
  iscanseal_ = false;
  clear_has_iscanseal();
}
inline bool JK_DoorMatPlanInfo::iscanseal() const {
  return iscanseal_;
}
inline void JK_DoorMatPlanInfo::set_iscanseal(bool value) {
  set_has_iscanseal();
  iscanseal_ = value;
}

// -------------------------------------------------------------------

// JK_DoorRegionHWFittingMapInfo

// required int32 DoorSystemRegionID = 1;
inline bool JK_DoorRegionHWFittingMapInfo::has_doorsystemregionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorRegionHWFittingMapInfo::set_has_doorsystemregionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorRegionHWFittingMapInfo::clear_has_doorsystemregionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorRegionHWFittingMapInfo::clear_doorsystemregionid() {
  doorsystemregionid_ = 0;
  clear_has_doorsystemregionid();
}
inline ::google::protobuf::int32 JK_DoorRegionHWFittingMapInfo::doorsystemregionid() const {
  return doorsystemregionid_;
}
inline void JK_DoorRegionHWFittingMapInfo::set_doorsystemregionid(::google::protobuf::int32 value) {
  set_has_doorsystemregionid();
  doorsystemregionid_ = value;
}

// required int32 HWFittingID = 2;
inline bool JK_DoorRegionHWFittingMapInfo::has_hwfittingid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorRegionHWFittingMapInfo::set_has_hwfittingid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorRegionHWFittingMapInfo::clear_has_hwfittingid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorRegionHWFittingMapInfo::clear_hwfittingid() {
  hwfittingid_ = 0;
  clear_has_hwfittingid();
}
inline ::google::protobuf::int32 JK_DoorRegionHWFittingMapInfo::hwfittingid() const {
  return hwfittingid_;
}
inline void JK_DoorRegionHWFittingMapInfo::set_hwfittingid(::google::protobuf::int32 value) {
  set_has_hwfittingid();
  hwfittingid_ = value;
}

// required bool IsDefault = 3;
inline bool JK_DoorRegionHWFittingMapInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorRegionHWFittingMapInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorRegionHWFittingMapInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorRegionHWFittingMapInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_DoorRegionHWFittingMapInfo::isdefault() const {
  return isdefault_;
}
inline void JK_DoorRegionHWFittingMapInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 4;
inline bool JK_DoorRegionHWFittingMapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorRegionHWFittingMapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorRegionHWFittingMapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorRegionHWFittingMapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorRegionHWFittingMapInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorRegionHWFittingMapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_DoorRegionHWFittingMapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorRegionHWFittingMapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorRegionHWFittingMapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorRegionHWFittingMapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorRegionHWFittingMapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorRegionHWFittingMapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_DoorSystemInfo

// required int32 DoorSystemID = 1;
inline bool JK_DoorSystemInfo::has_doorsystemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorSystemInfo::set_has_doorsystemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorSystemInfo::clear_has_doorsystemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorSystemInfo::clear_doorsystemid() {
  doorsystemid_ = 0;
  clear_has_doorsystemid();
}
inline ::google::protobuf::int32 JK_DoorSystemInfo::doorsystemid() const {
  return doorsystemid_;
}
inline void JK_DoorSystemInfo::set_doorsystemid(::google::protobuf::int32 value) {
  set_has_doorsystemid();
  doorsystemid_ = value;
}

// required int32 FactoryID = 2;
inline bool JK_DoorSystemInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorSystemInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorSystemInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorSystemInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorSystemInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorSystemInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 3;
inline bool JK_DoorSystemInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorSystemInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorSystemInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorSystemInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorSystemInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorSystemInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 GroupID = 4;
inline bool JK_DoorSystemInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorSystemInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorSystemInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorSystemInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_DoorSystemInfo::groupid() const {
  return groupid_;
}
inline void JK_DoorSystemInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required bool IsDel = 5;
inline bool JK_DoorSystemInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorSystemInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorSystemInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorSystemInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_DoorSystemInfo::isdel() const {
  return isdel_;
}
inline void JK_DoorSystemInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsActive = 6;
inline bool JK_DoorSystemInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DoorSystemInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DoorSystemInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DoorSystemInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_DoorSystemInfo::isactive() const {
  return isactive_;
}
inline void JK_DoorSystemInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required int32 SupplyType = 7;
inline bool JK_DoorSystemInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DoorSystemInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DoorSystemInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DoorSystemInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 JK_DoorSystemInfo::supplytype() const {
  return supplytype_;
}
inline void JK_DoorSystemInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 MatchCabShape = 8;
inline bool JK_DoorSystemInfo::has_matchcabshape() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DoorSystemInfo::set_has_matchcabshape() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DoorSystemInfo::clear_has_matchcabshape() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DoorSystemInfo::clear_matchcabshape() {
  matchcabshape_ = 0;
  clear_has_matchcabshape();
}
inline ::google::protobuf::int32 JK_DoorSystemInfo::matchcabshape() const {
  return matchcabshape_;
}
inline void JK_DoorSystemInfo::set_matchcabshape(::google::protobuf::int32 value) {
  set_has_matchcabshape();
  matchcabshape_ = value;
}

// required int32 InstallType = 9;
inline bool JK_DoorSystemInfo::has_installtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_DoorSystemInfo::set_has_installtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_DoorSystemInfo::clear_has_installtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_DoorSystemInfo::clear_installtype() {
  installtype_ = 0;
  clear_has_installtype();
}
inline ::google::protobuf::int32 JK_DoorSystemInfo::installtype() const {
  return installtype_;
}
inline void JK_DoorSystemInfo::set_installtype(::google::protobuf::int32 value) {
  set_has_installtype();
  installtype_ = value;
}

// required double VirtualXLen = 10;
inline bool JK_DoorSystemInfo::has_virtualxlen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_DoorSystemInfo::set_has_virtualxlen() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_DoorSystemInfo::clear_has_virtualxlen() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_DoorSystemInfo::clear_virtualxlen() {
  virtualxlen_ = 0;
  clear_has_virtualxlen();
}
inline double JK_DoorSystemInfo::virtualxlen() const {
  return virtualxlen_;
}
inline void JK_DoorSystemInfo::set_virtualxlen(double value) {
  set_has_virtualxlen();
  virtualxlen_ = value;
}

// required double VirtualYLen = 11;
inline bool JK_DoorSystemInfo::has_virtualylen() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_DoorSystemInfo::set_has_virtualylen() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_DoorSystemInfo::clear_has_virtualylen() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_DoorSystemInfo::clear_virtualylen() {
  virtualylen_ = 0;
  clear_has_virtualylen();
}
inline double JK_DoorSystemInfo::virtualylen() const {
  return virtualylen_;
}
inline void JK_DoorSystemInfo::set_virtualylen(double value) {
  set_has_virtualylen();
  virtualylen_ = value;
}

// required double VirtualShapeXLen = 12;
inline bool JK_DoorSystemInfo::has_virtualshapexlen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_DoorSystemInfo::set_has_virtualshapexlen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_DoorSystemInfo::clear_has_virtualshapexlen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_DoorSystemInfo::clear_virtualshapexlen() {
  virtualshapexlen_ = 0;
  clear_has_virtualshapexlen();
}
inline double JK_DoorSystemInfo::virtualshapexlen() const {
  return virtualshapexlen_;
}
inline void JK_DoorSystemInfo::set_virtualshapexlen(double value) {
  set_has_virtualshapexlen();
  virtualshapexlen_ = value;
}

// required double VirtualShapeZLen = 13;
inline bool JK_DoorSystemInfo::has_virtualshapezlen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_DoorSystemInfo::set_has_virtualshapezlen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_DoorSystemInfo::clear_has_virtualshapezlen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_DoorSystemInfo::clear_virtualshapezlen() {
  virtualshapezlen_ = 0;
  clear_has_virtualshapezlen();
}
inline double JK_DoorSystemInfo::virtualshapezlen() const {
  return virtualshapezlen_;
}
inline void JK_DoorSystemInfo::set_virtualshapezlen(double value) {
  set_has_virtualshapezlen();
  virtualshapezlen_ = value;
}

// required int32 CreatorID = 14;
inline bool JK_DoorSystemInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_DoorSystemInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_DoorSystemInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_DoorSystemInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_DoorSystemInfo::creatorid() const {
  return creatorid_;
}
inline void JK_DoorSystemInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 15;
inline bool JK_DoorSystemInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_DoorSystemInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_DoorSystemInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_DoorSystemInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_DoorSystemInfo::updaterid() const {
  return updaterid_;
}
inline void JK_DoorSystemInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 16;
inline bool JK_DoorSystemInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_DoorSystemInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_DoorSystemInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_DoorSystemInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_DoorSystemInfo::createtime() const {
  return createtime_;
}
inline void JK_DoorSystemInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 17;
inline bool JK_DoorSystemInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_DoorSystemInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_DoorSystemInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_DoorSystemInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_DoorSystemInfo::updatetime() const {
  return updatetime_;
}
inline void JK_DoorSystemInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string DoorSystemCode = 18;
inline bool JK_DoorSystemInfo::has_doorsystemcode() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_DoorSystemInfo::set_has_doorsystemcode() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_DoorSystemInfo::clear_has_doorsystemcode() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_DoorSystemInfo::clear_doorsystemcode() {
  if (doorsystemcode_ != &::google::protobuf::internal::kEmptyString) {
    doorsystemcode_->clear();
  }
  clear_has_doorsystemcode();
}
inline const ::std::string& JK_DoorSystemInfo::doorsystemcode() const {
  return *doorsystemcode_;
}
inline void JK_DoorSystemInfo::set_doorsystemcode(const ::std::string& value) {
  set_has_doorsystemcode();
  if (doorsystemcode_ == &::google::protobuf::internal::kEmptyString) {
    doorsystemcode_ = new ::std::string;
  }
  doorsystemcode_->assign(value);
}
inline void JK_DoorSystemInfo::set_doorsystemcode(const char* value) {
  set_has_doorsystemcode();
  if (doorsystemcode_ == &::google::protobuf::internal::kEmptyString) {
    doorsystemcode_ = new ::std::string;
  }
  doorsystemcode_->assign(value);
}
inline void JK_DoorSystemInfo::set_doorsystemcode(const char* value, size_t size) {
  set_has_doorsystemcode();
  if (doorsystemcode_ == &::google::protobuf::internal::kEmptyString) {
    doorsystemcode_ = new ::std::string;
  }
  doorsystemcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorSystemInfo::mutable_doorsystemcode() {
  set_has_doorsystemcode();
  if (doorsystemcode_ == &::google::protobuf::internal::kEmptyString) {
    doorsystemcode_ = new ::std::string;
  }
  return doorsystemcode_;
}
inline ::std::string* JK_DoorSystemInfo::release_doorsystemcode() {
  clear_has_doorsystemcode();
  if (doorsystemcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doorsystemcode_;
    doorsystemcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorSystemInfo::set_allocated_doorsystemcode(::std::string* doorsystemcode) {
  if (doorsystemcode_ != &::google::protobuf::internal::kEmptyString) {
    delete doorsystemcode_;
  }
  if (doorsystemcode) {
    set_has_doorsystemcode();
    doorsystemcode_ = doorsystemcode;
  } else {
    clear_has_doorsystemcode();
    doorsystemcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DoorSystemName = 19;
inline bool JK_DoorSystemInfo::has_doorsystemname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_DoorSystemInfo::set_has_doorsystemname() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_DoorSystemInfo::clear_has_doorsystemname() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_DoorSystemInfo::clear_doorsystemname() {
  if (doorsystemname_ != &::google::protobuf::internal::kEmptyString) {
    doorsystemname_->clear();
  }
  clear_has_doorsystemname();
}
inline const ::std::string& JK_DoorSystemInfo::doorsystemname() const {
  return *doorsystemname_;
}
inline void JK_DoorSystemInfo::set_doorsystemname(const ::std::string& value) {
  set_has_doorsystemname();
  if (doorsystemname_ == &::google::protobuf::internal::kEmptyString) {
    doorsystemname_ = new ::std::string;
  }
  doorsystemname_->assign(value);
}
inline void JK_DoorSystemInfo::set_doorsystemname(const char* value) {
  set_has_doorsystemname();
  if (doorsystemname_ == &::google::protobuf::internal::kEmptyString) {
    doorsystemname_ = new ::std::string;
  }
  doorsystemname_->assign(value);
}
inline void JK_DoorSystemInfo::set_doorsystemname(const char* value, size_t size) {
  set_has_doorsystemname();
  if (doorsystemname_ == &::google::protobuf::internal::kEmptyString) {
    doorsystemname_ = new ::std::string;
  }
  doorsystemname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorSystemInfo::mutable_doorsystemname() {
  set_has_doorsystemname();
  if (doorsystemname_ == &::google::protobuf::internal::kEmptyString) {
    doorsystemname_ = new ::std::string;
  }
  return doorsystemname_;
}
inline ::std::string* JK_DoorSystemInfo::release_doorsystemname() {
  clear_has_doorsystemname();
  if (doorsystemname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doorsystemname_;
    doorsystemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorSystemInfo::set_allocated_doorsystemname(::std::string* doorsystemname) {
  if (doorsystemname_ != &::google::protobuf::internal::kEmptyString) {
    delete doorsystemname_;
  }
  if (doorsystemname) {
    set_has_doorsystemname();
    doorsystemname_ = doorsystemname;
  } else {
    clear_has_doorsystemname();
    doorsystemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DoorSystemMemo = 20;
inline bool JK_DoorSystemInfo::has_doorsystemmemo() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_DoorSystemInfo::set_has_doorsystemmemo() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_DoorSystemInfo::clear_has_doorsystemmemo() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_DoorSystemInfo::clear_doorsystemmemo() {
  if (doorsystemmemo_ != &::google::protobuf::internal::kEmptyString) {
    doorsystemmemo_->clear();
  }
  clear_has_doorsystemmemo();
}
inline const ::std::string& JK_DoorSystemInfo::doorsystemmemo() const {
  return *doorsystemmemo_;
}
inline void JK_DoorSystemInfo::set_doorsystemmemo(const ::std::string& value) {
  set_has_doorsystemmemo();
  if (doorsystemmemo_ == &::google::protobuf::internal::kEmptyString) {
    doorsystemmemo_ = new ::std::string;
  }
  doorsystemmemo_->assign(value);
}
inline void JK_DoorSystemInfo::set_doorsystemmemo(const char* value) {
  set_has_doorsystemmemo();
  if (doorsystemmemo_ == &::google::protobuf::internal::kEmptyString) {
    doorsystemmemo_ = new ::std::string;
  }
  doorsystemmemo_->assign(value);
}
inline void JK_DoorSystemInfo::set_doorsystemmemo(const char* value, size_t size) {
  set_has_doorsystemmemo();
  if (doorsystemmemo_ == &::google::protobuf::internal::kEmptyString) {
    doorsystemmemo_ = new ::std::string;
  }
  doorsystemmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorSystemInfo::mutable_doorsystemmemo() {
  set_has_doorsystemmemo();
  if (doorsystemmemo_ == &::google::protobuf::internal::kEmptyString) {
    doorsystemmemo_ = new ::std::string;
  }
  return doorsystemmemo_;
}
inline ::std::string* JK_DoorSystemInfo::release_doorsystemmemo() {
  clear_has_doorsystemmemo();
  if (doorsystemmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doorsystemmemo_;
    doorsystemmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorSystemInfo::set_allocated_doorsystemmemo(::std::string* doorsystemmemo) {
  if (doorsystemmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete doorsystemmemo_;
  }
  if (doorsystemmemo) {
    set_has_doorsystemmemo();
    doorsystemmemo_ = doorsystemmemo;
  } else {
    clear_has_doorsystemmemo();
    doorsystemmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// JK_DoorSystemMatMapInfo

// required int32 DoorSystemID = 1;
inline bool JK_DoorSystemMatMapInfo::has_doorsystemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorSystemMatMapInfo::set_has_doorsystemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorSystemMatMapInfo::clear_has_doorsystemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorSystemMatMapInfo::clear_doorsystemid() {
  doorsystemid_ = 0;
  clear_has_doorsystemid();
}
inline ::google::protobuf::int32 JK_DoorSystemMatMapInfo::doorsystemid() const {
  return doorsystemid_;
}
inline void JK_DoorSystemMatMapInfo::set_doorsystemid(::google::protobuf::int32 value) {
  set_has_doorsystemid();
  doorsystemid_ = value;
}

// required int32 DoorMatPlanID = 2;
inline bool JK_DoorSystemMatMapInfo::has_doormatplanid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorSystemMatMapInfo::set_has_doormatplanid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorSystemMatMapInfo::clear_has_doormatplanid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorSystemMatMapInfo::clear_doormatplanid() {
  doormatplanid_ = 0;
  clear_has_doormatplanid();
}
inline ::google::protobuf::int32 JK_DoorSystemMatMapInfo::doormatplanid() const {
  return doormatplanid_;
}
inline void JK_DoorSystemMatMapInfo::set_doormatplanid(::google::protobuf::int32 value) {
  set_has_doormatplanid();
  doormatplanid_ = value;
}

// required bool IsDefault = 3;
inline bool JK_DoorSystemMatMapInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorSystemMatMapInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorSystemMatMapInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorSystemMatMapInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_DoorSystemMatMapInfo::isdefault() const {
  return isdefault_;
}
inline void JK_DoorSystemMatMapInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 4;
inline bool JK_DoorSystemMatMapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorSystemMatMapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorSystemMatMapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorSystemMatMapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorSystemMatMapInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorSystemMatMapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_DoorSystemMatMapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorSystemMatMapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorSystemMatMapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorSystemMatMapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorSystemMatMapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorSystemMatMapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_DoorSystemRegionDoorMapInfo

// required int32 DoorSystemRegionID = 1;
inline bool JK_DoorSystemRegionDoorMapInfo::has_doorsystemregionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorSystemRegionDoorMapInfo::set_has_doorsystemregionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorSystemRegionDoorMapInfo::clear_has_doorsystemregionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorSystemRegionDoorMapInfo::clear_doorsystemregionid() {
  doorsystemregionid_ = 0;
  clear_has_doorsystemregionid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionDoorMapInfo::doorsystemregionid() const {
  return doorsystemregionid_;
}
inline void JK_DoorSystemRegionDoorMapInfo::set_doorsystemregionid(::google::protobuf::int32 value) {
  set_has_doorsystemregionid();
  doorsystemregionid_ = value;
}

// required int32 DoorID = 2;
inline bool JK_DoorSystemRegionDoorMapInfo::has_doorid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorSystemRegionDoorMapInfo::set_has_doorid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorSystemRegionDoorMapInfo::clear_has_doorid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorSystemRegionDoorMapInfo::clear_doorid() {
  doorid_ = 0;
  clear_has_doorid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionDoorMapInfo::doorid() const {
  return doorid_;
}
inline void JK_DoorSystemRegionDoorMapInfo::set_doorid(::google::protobuf::int32 value) {
  set_has_doorid();
  doorid_ = value;
}

// required bool IsDefault = 3;
inline bool JK_DoorSystemRegionDoorMapInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorSystemRegionDoorMapInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorSystemRegionDoorMapInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorSystemRegionDoorMapInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_DoorSystemRegionDoorMapInfo::isdefault() const {
  return isdefault_;
}
inline void JK_DoorSystemRegionDoorMapInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 4;
inline bool JK_DoorSystemRegionDoorMapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorSystemRegionDoorMapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorSystemRegionDoorMapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorSystemRegionDoorMapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorSystemRegionDoorMapInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorSystemRegionDoorMapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_DoorSystemRegionDoorMapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorSystemRegionDoorMapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorSystemRegionDoorMapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorSystemRegionDoorMapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionDoorMapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorSystemRegionDoorMapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_DoorSystemRegionInfo

// required int32 DoorSystemRegionID = 1;
inline bool JK_DoorSystemRegionInfo::has_doorsystemregionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_doorsystemregionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorSystemRegionInfo::clear_has_doorsystemregionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorSystemRegionInfo::clear_doorsystemregionid() {
  doorsystemregionid_ = 0;
  clear_has_doorsystemregionid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::doorsystemregionid() const {
  return doorsystemregionid_;
}
inline void JK_DoorSystemRegionInfo::set_doorsystemregionid(::google::protobuf::int32 value) {
  set_has_doorsystemregionid();
  doorsystemregionid_ = value;
}

// required int32 DoorSystemID = 2;
inline bool JK_DoorSystemRegionInfo::has_doorsystemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_doorsystemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorSystemRegionInfo::clear_has_doorsystemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorSystemRegionInfo::clear_doorsystemid() {
  doorsystemid_ = 0;
  clear_has_doorsystemid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::doorsystemid() const {
  return doorsystemid_;
}
inline void JK_DoorSystemRegionInfo::set_doorsystemid(::google::protobuf::int32 value) {
  set_has_doorsystemid();
  doorsystemid_ = value;
}

// required int32 ParentID = 3;
inline bool JK_DoorSystemRegionInfo::has_parentid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_parentid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorSystemRegionInfo::clear_has_parentid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorSystemRegionInfo::clear_parentid() {
  parentid_ = 0;
  clear_has_parentid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::parentid() const {
  return parentid_;
}
inline void JK_DoorSystemRegionInfo::set_parentid(::google::protobuf::int32 value) {
  set_has_parentid();
  parentid_ = value;
}

// required bool IsDel = 4;
inline bool JK_DoorSystemRegionInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorSystemRegionInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorSystemRegionInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_DoorSystemRegionInfo::isdel() const {
  return isdel_;
}
inline void JK_DoorSystemRegionInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 RegionIndex = 5;
inline bool JK_DoorSystemRegionInfo::has_regionindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_regionindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorSystemRegionInfo::clear_has_regionindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorSystemRegionInfo::clear_regionindex() {
  regionindex_ = 0;
  clear_has_regionindex();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::regionindex() const {
  return regionindex_;
}
inline void JK_DoorSystemRegionInfo::set_regionindex(::google::protobuf::int32 value) {
  set_has_regionindex();
  regionindex_ = value;
}

// required int32 CutDirection = 6;
inline bool JK_DoorSystemRegionInfo::has_cutdirection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_cutdirection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DoorSystemRegionInfo::clear_has_cutdirection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DoorSystemRegionInfo::clear_cutdirection() {
  cutdirection_ = 0;
  clear_has_cutdirection();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::cutdirection() const {
  return cutdirection_;
}
inline void JK_DoorSystemRegionInfo::set_cutdirection(::google::protobuf::int32 value) {
  set_has_cutdirection();
  cutdirection_ = value;
}

// required string CutFormula = 7;
inline bool JK_DoorSystemRegionInfo::has_cutformula() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_cutformula() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DoorSystemRegionInfo::clear_has_cutformula() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DoorSystemRegionInfo::clear_cutformula() {
  if (cutformula_ != &::google::protobuf::internal::kEmptyString) {
    cutformula_->clear();
  }
  clear_has_cutformula();
}
inline const ::std::string& JK_DoorSystemRegionInfo::cutformula() const {
  return *cutformula_;
}
inline void JK_DoorSystemRegionInfo::set_cutformula(const ::std::string& value) {
  set_has_cutformula();
  if (cutformula_ == &::google::protobuf::internal::kEmptyString) {
    cutformula_ = new ::std::string;
  }
  cutformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_cutformula(const char* value) {
  set_has_cutformula();
  if (cutformula_ == &::google::protobuf::internal::kEmptyString) {
    cutformula_ = new ::std::string;
  }
  cutformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_cutformula(const char* value, size_t size) {
  set_has_cutformula();
  if (cutformula_ == &::google::protobuf::internal::kEmptyString) {
    cutformula_ = new ::std::string;
  }
  cutformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorSystemRegionInfo::mutable_cutformula() {
  set_has_cutformula();
  if (cutformula_ == &::google::protobuf::internal::kEmptyString) {
    cutformula_ = new ::std::string;
  }
  return cutformula_;
}
inline ::std::string* JK_DoorSystemRegionInfo::release_cutformula() {
  clear_has_cutformula();
  if (cutformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cutformula_;
    cutformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorSystemRegionInfo::set_allocated_cutformula(::std::string* cutformula) {
  if (cutformula_ != &::google::protobuf::internal::kEmptyString) {
    delete cutformula_;
  }
  if (cutformula) {
    set_has_cutformula();
    cutformula_ = cutformula;
  } else {
    clear_has_cutformula();
    cutformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool IsSlide = 8;
inline bool JK_DoorSystemRegionInfo::has_isslide() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_isslide() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DoorSystemRegionInfo::clear_has_isslide() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DoorSystemRegionInfo::clear_isslide() {
  isslide_ = false;
  clear_has_isslide();
}
inline bool JK_DoorSystemRegionInfo::isslide() const {
  return isslide_;
}
inline void JK_DoorSystemRegionInfo::set_isslide(bool value) {
  set_has_isslide();
  isslide_ = value;
}

// required bool IsRound = 9;
inline bool JK_DoorSystemRegionInfo::has_isround() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_isround() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_DoorSystemRegionInfo::clear_has_isround() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_DoorSystemRegionInfo::clear_isround() {
  isround_ = false;
  clear_has_isround();
}
inline bool JK_DoorSystemRegionInfo::isround() const {
  return isround_;
}
inline void JK_DoorSystemRegionInfo::set_isround(bool value) {
  set_has_isround();
  isround_ = value;
}

// required int32 LenPrecision = 10;
inline bool JK_DoorSystemRegionInfo::has_lenprecision() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_lenprecision() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_DoorSystemRegionInfo::clear_has_lenprecision() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_DoorSystemRegionInfo::clear_lenprecision() {
  lenprecision_ = 0;
  clear_has_lenprecision();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::lenprecision() const {
  return lenprecision_;
}
inline void JK_DoorSystemRegionInfo::set_lenprecision(::google::protobuf::int32 value) {
  set_has_lenprecision();
  lenprecision_ = value;
}

// required int32 OpenDoorType = 11;
inline bool JK_DoorSystemRegionInfo::has_opendoortype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_opendoortype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_DoorSystemRegionInfo::clear_has_opendoortype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_DoorSystemRegionInfo::clear_opendoortype() {
  opendoortype_ = 0;
  clear_has_opendoortype();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::opendoortype() const {
  return opendoortype_;
}
inline void JK_DoorSystemRegionInfo::set_opendoortype(::google::protobuf::int32 value) {
  set_has_opendoortype();
  opendoortype_ = value;
}

// required double XAdjustLen = 12;
inline bool JK_DoorSystemRegionInfo::has_xadjustlen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_xadjustlen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_DoorSystemRegionInfo::clear_has_xadjustlen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_DoorSystemRegionInfo::clear_xadjustlen() {
  xadjustlen_ = 0;
  clear_has_xadjustlen();
}
inline double JK_DoorSystemRegionInfo::xadjustlen() const {
  return xadjustlen_;
}
inline void JK_DoorSystemRegionInfo::set_xadjustlen(double value) {
  set_has_xadjustlen();
  xadjustlen_ = value;
}

// required double YAdjustLen = 13;
inline bool JK_DoorSystemRegionInfo::has_yadjustlen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_yadjustlen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_yadjustlen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_DoorSystemRegionInfo::clear_yadjustlen() {
  yadjustlen_ = 0;
  clear_has_yadjustlen();
}
inline double JK_DoorSystemRegionInfo::yadjustlen() const {
  return yadjustlen_;
}
inline void JK_DoorSystemRegionInfo::set_yadjustlen(double value) {
  set_has_yadjustlen();
  yadjustlen_ = value;
}

// required int32 XDock = 14;
inline bool JK_DoorSystemRegionInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_DoorSystemRegionInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::xdock() const {
  return xdock_;
}
inline void JK_DoorSystemRegionInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 15;
inline bool JK_DoorSystemRegionInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_DoorSystemRegionInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::ydock() const {
  return ydock_;
}
inline void JK_DoorSystemRegionInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 16;
inline bool JK_DoorSystemRegionInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_DoorSystemRegionInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::zdock() const {
  return zdock_;
}
inline void JK_DoorSystemRegionInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required string XOffsetFormula = 17;
inline bool JK_DoorSystemRegionInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_DoorSystemRegionInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_DoorSystemRegionInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_DoorSystemRegionInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorSystemRegionInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_DoorSystemRegionInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorSystemRegionInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 18;
inline bool JK_DoorSystemRegionInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_DoorSystemRegionInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_DoorSystemRegionInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_DoorSystemRegionInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorSystemRegionInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_DoorSystemRegionInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorSystemRegionInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 19;
inline bool JK_DoorSystemRegionInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_DoorSystemRegionInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_DoorSystemRegionInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_DoorSystemRegionInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorSystemRegionInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_DoorSystemRegionInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorSystemRegionInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool IsCanResize = 20;
inline bool JK_DoorSystemRegionInfo::has_iscanresize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_iscanresize() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_iscanresize() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_DoorSystemRegionInfo::clear_iscanresize() {
  iscanresize_ = false;
  clear_has_iscanresize();
}
inline bool JK_DoorSystemRegionInfo::iscanresize() const {
  return iscanresize_;
}
inline void JK_DoorSystemRegionInfo::set_iscanresize(bool value) {
  set_has_iscanresize();
  iscanresize_ = value;
}

// required int32 DoorFunction = 21;
inline bool JK_DoorSystemRegionInfo::has_doorfunction() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_doorfunction() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_doorfunction() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_DoorSystemRegionInfo::clear_doorfunction() {
  doorfunction_ = 0;
  clear_has_doorfunction();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::doorfunction() const {
  return doorfunction_;
}
inline void JK_DoorSystemRegionInfo::set_doorfunction(::google::protobuf::int32 value) {
  set_has_doorfunction();
  doorfunction_ = value;
}

// required int64 VerCode = 22;
inline bool JK_DoorSystemRegionInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_DoorSystemRegionInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorSystemRegionInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorSystemRegionInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 23;
inline bool JK_DoorSystemRegionInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_DoorSystemRegionInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorSystemRegionInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 24;
inline bool JK_DoorSystemRegionInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void JK_DoorSystemRegionInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::creatorid() const {
  return creatorid_;
}
inline void JK_DoorSystemRegionInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 25;
inline bool JK_DoorSystemRegionInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void JK_DoorSystemRegionInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::updaterid() const {
  return updaterid_;
}
inline void JK_DoorSystemRegionInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 26;
inline bool JK_DoorSystemRegionInfo::has_createtime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_createtime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void JK_DoorSystemRegionInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_DoorSystemRegionInfo::createtime() const {
  return createtime_;
}
inline void JK_DoorSystemRegionInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 27;
inline bool JK_DoorSystemRegionInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x04000000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void JK_DoorSystemRegionInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_DoorSystemRegionInfo::updatetime() const {
  return updatetime_;
}
inline void JK_DoorSystemRegionInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required int32 HandleXDock = 28;
inline bool JK_DoorSystemRegionInfo::has_handlexdock() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_handlexdock() {
  _has_bits_[0] |= 0x08000000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_handlexdock() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void JK_DoorSystemRegionInfo::clear_handlexdock() {
  handlexdock_ = 0;
  clear_has_handlexdock();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::handlexdock() const {
  return handlexdock_;
}
inline void JK_DoorSystemRegionInfo::set_handlexdock(::google::protobuf::int32 value) {
  set_has_handlexdock();
  handlexdock_ = value;
}

// required int32 HandleYDock = 29;
inline bool JK_DoorSystemRegionInfo::has_handleydock() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_handleydock() {
  _has_bits_[0] |= 0x10000000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_handleydock() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void JK_DoorSystemRegionInfo::clear_handleydock() {
  handleydock_ = 0;
  clear_has_handleydock();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::handleydock() const {
  return handleydock_;
}
inline void JK_DoorSystemRegionInfo::set_handleydock(::google::protobuf::int32 value) {
  set_has_handleydock();
  handleydock_ = value;
}

// required int32 HandleZDock = 30;
inline bool JK_DoorSystemRegionInfo::has_handlezdock() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_handlezdock() {
  _has_bits_[0] |= 0x20000000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_handlezdock() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void JK_DoorSystemRegionInfo::clear_handlezdock() {
  handlezdock_ = 0;
  clear_has_handlezdock();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::handlezdock() const {
  return handlezdock_;
}
inline void JK_DoorSystemRegionInfo::set_handlezdock(::google::protobuf::int32 value) {
  set_has_handlezdock();
  handlezdock_ = value;
}

// required string HandleXOffsetFormula = 31;
inline bool JK_DoorSystemRegionInfo::has_handlexoffsetformula() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_handlexoffsetformula() {
  _has_bits_[0] |= 0x40000000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_handlexoffsetformula() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void JK_DoorSystemRegionInfo::clear_handlexoffsetformula() {
  if (handlexoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    handlexoffsetformula_->clear();
  }
  clear_has_handlexoffsetformula();
}
inline const ::std::string& JK_DoorSystemRegionInfo::handlexoffsetformula() const {
  return *handlexoffsetformula_;
}
inline void JK_DoorSystemRegionInfo::set_handlexoffsetformula(const ::std::string& value) {
  set_has_handlexoffsetformula();
  if (handlexoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    handlexoffsetformula_ = new ::std::string;
  }
  handlexoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_handlexoffsetformula(const char* value) {
  set_has_handlexoffsetformula();
  if (handlexoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    handlexoffsetformula_ = new ::std::string;
  }
  handlexoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_handlexoffsetformula(const char* value, size_t size) {
  set_has_handlexoffsetformula();
  if (handlexoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    handlexoffsetformula_ = new ::std::string;
  }
  handlexoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorSystemRegionInfo::mutable_handlexoffsetformula() {
  set_has_handlexoffsetformula();
  if (handlexoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    handlexoffsetformula_ = new ::std::string;
  }
  return handlexoffsetformula_;
}
inline ::std::string* JK_DoorSystemRegionInfo::release_handlexoffsetformula() {
  clear_has_handlexoffsetformula();
  if (handlexoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = handlexoffsetformula_;
    handlexoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorSystemRegionInfo::set_allocated_handlexoffsetformula(::std::string* handlexoffsetformula) {
  if (handlexoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete handlexoffsetformula_;
  }
  if (handlexoffsetformula) {
    set_has_handlexoffsetformula();
    handlexoffsetformula_ = handlexoffsetformula;
  } else {
    clear_has_handlexoffsetformula();
    handlexoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string HandleYOffsetFormula = 32;
inline bool JK_DoorSystemRegionInfo::has_handleyoffsetformula() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_handleyoffsetformula() {
  _has_bits_[0] |= 0x80000000u;
}
inline void JK_DoorSystemRegionInfo::clear_has_handleyoffsetformula() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void JK_DoorSystemRegionInfo::clear_handleyoffsetformula() {
  if (handleyoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    handleyoffsetformula_->clear();
  }
  clear_has_handleyoffsetformula();
}
inline const ::std::string& JK_DoorSystemRegionInfo::handleyoffsetformula() const {
  return *handleyoffsetformula_;
}
inline void JK_DoorSystemRegionInfo::set_handleyoffsetformula(const ::std::string& value) {
  set_has_handleyoffsetformula();
  if (handleyoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    handleyoffsetformula_ = new ::std::string;
  }
  handleyoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_handleyoffsetformula(const char* value) {
  set_has_handleyoffsetformula();
  if (handleyoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    handleyoffsetformula_ = new ::std::string;
  }
  handleyoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_handleyoffsetformula(const char* value, size_t size) {
  set_has_handleyoffsetformula();
  if (handleyoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    handleyoffsetformula_ = new ::std::string;
  }
  handleyoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorSystemRegionInfo::mutable_handleyoffsetformula() {
  set_has_handleyoffsetformula();
  if (handleyoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    handleyoffsetformula_ = new ::std::string;
  }
  return handleyoffsetformula_;
}
inline ::std::string* JK_DoorSystemRegionInfo::release_handleyoffsetformula() {
  clear_has_handleyoffsetformula();
  if (handleyoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = handleyoffsetformula_;
    handleyoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorSystemRegionInfo::set_allocated_handleyoffsetformula(::std::string* handleyoffsetformula) {
  if (handleyoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete handleyoffsetformula_;
  }
  if (handleyoffsetformula) {
    set_has_handleyoffsetformula();
    handleyoffsetformula_ = handleyoffsetformula;
  } else {
    clear_has_handleyoffsetformula();
    handleyoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string HandleZOffsetFormula = 33;
inline bool JK_DoorSystemRegionInfo::has_handlezoffsetformula() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_handlezoffsetformula() {
  _has_bits_[1] |= 0x00000001u;
}
inline void JK_DoorSystemRegionInfo::clear_has_handlezoffsetformula() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void JK_DoorSystemRegionInfo::clear_handlezoffsetformula() {
  if (handlezoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    handlezoffsetformula_->clear();
  }
  clear_has_handlezoffsetformula();
}
inline const ::std::string& JK_DoorSystemRegionInfo::handlezoffsetformula() const {
  return *handlezoffsetformula_;
}
inline void JK_DoorSystemRegionInfo::set_handlezoffsetformula(const ::std::string& value) {
  set_has_handlezoffsetformula();
  if (handlezoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    handlezoffsetformula_ = new ::std::string;
  }
  handlezoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_handlezoffsetformula(const char* value) {
  set_has_handlezoffsetformula();
  if (handlezoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    handlezoffsetformula_ = new ::std::string;
  }
  handlezoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionInfo::set_handlezoffsetformula(const char* value, size_t size) {
  set_has_handlezoffsetformula();
  if (handlezoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    handlezoffsetformula_ = new ::std::string;
  }
  handlezoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorSystemRegionInfo::mutable_handlezoffsetformula() {
  set_has_handlezoffsetformula();
  if (handlezoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    handlezoffsetformula_ = new ::std::string;
  }
  return handlezoffsetformula_;
}
inline ::std::string* JK_DoorSystemRegionInfo::release_handlezoffsetformula() {
  clear_has_handlezoffsetformula();
  if (handlezoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = handlezoffsetformula_;
    handlezoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorSystemRegionInfo::set_allocated_handlezoffsetformula(::std::string* handlezoffsetformula) {
  if (handlezoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete handlezoffsetformula_;
  }
  if (handlezoffsetformula) {
    set_has_handlezoffsetformula();
    handlezoffsetformula_ = handlezoffsetformula;
  } else {
    clear_has_handlezoffsetformula();
    handlezoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double ZLen = 34;
inline bool JK_DoorSystemRegionInfo::has_zlen() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_zlen() {
  _has_bits_[1] |= 0x00000002u;
}
inline void JK_DoorSystemRegionInfo::clear_has_zlen() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void JK_DoorSystemRegionInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double JK_DoorSystemRegionInfo::zlen() const {
  return zlen_;
}
inline void JK_DoorSystemRegionInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required int32 DoorBoardMatType = 35;
inline bool JK_DoorSystemRegionInfo::has_doorboardmattype() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_doorboardmattype() {
  _has_bits_[1] |= 0x00000004u;
}
inline void JK_DoorSystemRegionInfo::clear_has_doorboardmattype() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void JK_DoorSystemRegionInfo::clear_doorboardmattype() {
  doorboardmattype_ = 0;
  clear_has_doorboardmattype();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::doorboardmattype() const {
  return doorboardmattype_;
}
inline void JK_DoorSystemRegionInfo::set_doorboardmattype(::google::protobuf::int32 value) {
  set_has_doorboardmattype();
  doorboardmattype_ = value;
}

// required int32 DoorBoardMatID = 36;
inline bool JK_DoorSystemRegionInfo::has_doorboardmatid() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_doorboardmatid() {
  _has_bits_[1] |= 0x00000008u;
}
inline void JK_DoorSystemRegionInfo::clear_has_doorboardmatid() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void JK_DoorSystemRegionInfo::clear_doorboardmatid() {
  doorboardmatid_ = 0;
  clear_has_doorboardmatid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionInfo::doorboardmatid() const {
  return doorboardmatid_;
}
inline void JK_DoorSystemRegionInfo::set_doorboardmatid(::google::protobuf::int32 value) {
  set_has_doorboardmatid();
  doorboardmatid_ = value;
}

// required bool IsUseCustomThick = 37;
inline bool JK_DoorSystemRegionInfo::has_isusecustomthick() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void JK_DoorSystemRegionInfo::set_has_isusecustomthick() {
  _has_bits_[1] |= 0x00000010u;
}
inline void JK_DoorSystemRegionInfo::clear_has_isusecustomthick() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void JK_DoorSystemRegionInfo::clear_isusecustomthick() {
  isusecustomthick_ = false;
  clear_has_isusecustomthick();
}
inline bool JK_DoorSystemRegionInfo::isusecustomthick() const {
  return isusecustomthick_;
}
inline void JK_DoorSystemRegionInfo::set_isusecustomthick(bool value) {
  set_has_isusecustomthick();
  isusecustomthick_ = value;
}

// -------------------------------------------------------------------

// JK_DoorSystemRegionSlideMapInfo

// required int32 DoorSystemRegionID = 1;
inline bool JK_DoorSystemRegionSlideMapInfo::has_doorsystemregionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorSystemRegionSlideMapInfo::set_has_doorsystemregionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorSystemRegionSlideMapInfo::clear_has_doorsystemregionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorSystemRegionSlideMapInfo::clear_doorsystemregionid() {
  doorsystemregionid_ = 0;
  clear_has_doorsystemregionid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionSlideMapInfo::doorsystemregionid() const {
  return doorsystemregionid_;
}
inline void JK_DoorSystemRegionSlideMapInfo::set_doorsystemregionid(::google::protobuf::int32 value) {
  set_has_doorsystemregionid();
  doorsystemregionid_ = value;
}

// required int32 SlideID = 2;
inline bool JK_DoorSystemRegionSlideMapInfo::has_slideid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorSystemRegionSlideMapInfo::set_has_slideid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorSystemRegionSlideMapInfo::clear_has_slideid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorSystemRegionSlideMapInfo::clear_slideid() {
  slideid_ = 0;
  clear_has_slideid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionSlideMapInfo::slideid() const {
  return slideid_;
}
inline void JK_DoorSystemRegionSlideMapInfo::set_slideid(::google::protobuf::int32 value) {
  set_has_slideid();
  slideid_ = value;
}

// required int32 SlidePosition = 3;
inline bool JK_DoorSystemRegionSlideMapInfo::has_slideposition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorSystemRegionSlideMapInfo::set_has_slideposition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorSystemRegionSlideMapInfo::clear_has_slideposition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorSystemRegionSlideMapInfo::clear_slideposition() {
  slideposition_ = 0;
  clear_has_slideposition();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionSlideMapInfo::slideposition() const {
  return slideposition_;
}
inline void JK_DoorSystemRegionSlideMapInfo::set_slideposition(::google::protobuf::int32 value) {
  set_has_slideposition();
  slideposition_ = value;
}

// required bool IsDefault = 4;
inline bool JK_DoorSystemRegionSlideMapInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorSystemRegionSlideMapInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorSystemRegionSlideMapInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorSystemRegionSlideMapInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_DoorSystemRegionSlideMapInfo::isdefault() const {
  return isdefault_;
}
inline void JK_DoorSystemRegionSlideMapInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 5;
inline bool JK_DoorSystemRegionSlideMapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorSystemRegionSlideMapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorSystemRegionSlideMapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorSystemRegionSlideMapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorSystemRegionSlideMapInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorSystemRegionSlideMapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 6;
inline bool JK_DoorSystemRegionSlideMapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DoorSystemRegionSlideMapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DoorSystemRegionSlideMapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DoorSystemRegionSlideMapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionSlideMapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorSystemRegionSlideMapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_DoorSystemRegionSlidePositionSizeInfo

// required int32 DoorSystemRegionID = 1;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_doorsystemregionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_doorsystemregionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_doorsystemregionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_doorsystemregionid() {
  doorsystemregionid_ = 0;
  clear_has_doorsystemregionid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionSlidePositionSizeInfo::doorsystemregionid() const {
  return doorsystemregionid_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_doorsystemregionid(::google::protobuf::int32 value) {
  set_has_doorsystemregionid();
  doorsystemregionid_ = value;
}

// required int32 SlidePosition = 2;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_slideposition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_slideposition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_slideposition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_slideposition() {
  slideposition_ = 0;
  clear_has_slideposition();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionSlidePositionSizeInfo::slideposition() const {
  return slideposition_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_slideposition(::google::protobuf::int32 value) {
  set_has_slideposition();
  slideposition_ = value;
}

// required double XAdjustLen = 3;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_xadjustlen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_xadjustlen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_xadjustlen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_xadjustlen() {
  xadjustlen_ = 0;
  clear_has_xadjustlen();
}
inline double JK_DoorSystemRegionSlidePositionSizeInfo::xadjustlen() const {
  return xadjustlen_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_xadjustlen(double value) {
  set_has_xadjustlen();
  xadjustlen_ = value;
}

// required int32 XDock = 4;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionSlidePositionSizeInfo::xdock() const {
  return xdock_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 5;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionSlidePositionSizeInfo::ydock() const {
  return ydock_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 6;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionSlidePositionSizeInfo::zdock() const {
  return zdock_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required string XOffsetFormula = 7;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_DoorSystemRegionSlidePositionSizeInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorSystemRegionSlidePositionSizeInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_DoorSystemRegionSlidePositionSizeInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 8;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_DoorSystemRegionSlidePositionSizeInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorSystemRegionSlidePositionSizeInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_DoorSystemRegionSlidePositionSizeInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 9;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_DoorSystemRegionSlidePositionSizeInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_DoorSystemRegionSlidePositionSizeInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_DoorSystemRegionSlidePositionSizeInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 10;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_DoorSystemRegionSlidePositionSizeInfo::vercode() const {
  return vercode_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 11;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionSlidePositionSizeInfo::factoryid() const {
  return factoryid_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 12;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionSlidePositionSizeInfo::creatorid() const {
  return creatorid_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 13;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_DoorSystemRegionSlidePositionSizeInfo::updaterid() const {
  return updaterid_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 14;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_DoorSystemRegionSlidePositionSizeInfo::createtime() const {
  return createtime_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 15;
inline bool JK_DoorSystemRegionSlidePositionSizeInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_DoorSystemRegionSlidePositionSizeInfo::updatetime() const {
  return updatetime_;
}
inline void JK_DoorSystemRegionSlidePositionSizeInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_FNFittingInfo

// required int32 FNFittingID = 1;
inline bool JK_FNFittingInfo::has_fnfittingid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_FNFittingInfo::set_has_fnfittingid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_FNFittingInfo::clear_has_fnfittingid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_FNFittingInfo::clear_fnfittingid() {
  fnfittingid_ = 0;
  clear_has_fnfittingid();
}
inline ::google::protobuf::int32 JK_FNFittingInfo::fnfittingid() const {
  return fnfittingid_;
}
inline void JK_FNFittingInfo::set_fnfittingid(::google::protobuf::int32 value) {
  set_has_fnfittingid();
  fnfittingid_ = value;
}

// required int32 FactoryID = 2;
inline bool JK_FNFittingInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_FNFittingInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_FNFittingInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_FNFittingInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_FNFittingInfo::factoryid() const {
  return factoryid_;
}
inline void JK_FNFittingInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 GroupID = 3;
inline bool JK_FNFittingInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_FNFittingInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_FNFittingInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_FNFittingInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_FNFittingInfo::groupid() const {
  return groupid_;
}
inline void JK_FNFittingInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required bool IsDel = 4;
inline bool JK_FNFittingInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_FNFittingInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_FNFittingInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_FNFittingInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_FNFittingInfo::isdel() const {
  return isdel_;
}
inline void JK_FNFittingInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsActive = 5;
inline bool JK_FNFittingInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_FNFittingInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_FNFittingInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_FNFittingInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_FNFittingInfo::isactive() const {
  return isactive_;
}
inline void JK_FNFittingInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required bool IsSplit = 6;
inline bool JK_FNFittingInfo::has_issplit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_FNFittingInfo::set_has_issplit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_FNFittingInfo::clear_has_issplit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_FNFittingInfo::clear_issplit() {
  issplit_ = false;
  clear_has_issplit();
}
inline bool JK_FNFittingInfo::issplit() const {
  return issplit_;
}
inline void JK_FNFittingInfo::set_issplit(bool value) {
  set_has_issplit();
  issplit_ = value;
}

// required int32 SupplyType = 7;
inline bool JK_FNFittingInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_FNFittingInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_FNFittingInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_FNFittingInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 JK_FNFittingInfo::supplytype() const {
  return supplytype_;
}
inline void JK_FNFittingInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 8;
inline bool JK_FNFittingInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_FNFittingInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_FNFittingInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_FNFittingInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 JK_FNFittingInfo::gtypeid() const {
  return gtypeid_;
}
inline void JK_FNFittingInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required bool IsEntire = 9;
inline bool JK_FNFittingInfo::has_isentire() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_FNFittingInfo::set_has_isentire() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_FNFittingInfo::clear_has_isentire() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_FNFittingInfo::clear_isentire() {
  isentire_ = false;
  clear_has_isentire();
}
inline bool JK_FNFittingInfo::isentire() const {
  return isentire_;
}
inline void JK_FNFittingInfo::set_isentire(bool value) {
  set_has_isentire();
  isentire_ = value;
}

// required int32 ShowID = 10;
inline bool JK_FNFittingInfo::has_showid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_FNFittingInfo::set_has_showid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_FNFittingInfo::clear_has_showid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_FNFittingInfo::clear_showid() {
  showid_ = 0;
  clear_has_showid();
}
inline ::google::protobuf::int32 JK_FNFittingInfo::showid() const {
  return showid_;
}
inline void JK_FNFittingInfo::set_showid(::google::protobuf::int32 value) {
  set_has_showid();
  showid_ = value;
}

// required int32 ModelID = 11;
inline bool JK_FNFittingInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_FNFittingInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_FNFittingInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_FNFittingInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 JK_FNFittingInfo::modelid() const {
  return modelid_;
}
inline void JK_FNFittingInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required double XLen = 12;
inline bool JK_FNFittingInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_FNFittingInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_FNFittingInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_FNFittingInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double JK_FNFittingInfo::xlen() const {
  return xlen_;
}
inline void JK_FNFittingInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 13;
inline bool JK_FNFittingInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_FNFittingInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_FNFittingInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_FNFittingInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double JK_FNFittingInfo::ylen() const {
  return ylen_;
}
inline void JK_FNFittingInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 14;
inline bool JK_FNFittingInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_FNFittingInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_FNFittingInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_FNFittingInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double JK_FNFittingInfo::zlen() const {
  return zlen_;
}
inline void JK_FNFittingInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required double MinInstallX = 15;
inline bool JK_FNFittingInfo::has_mininstallx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_FNFittingInfo::set_has_mininstallx() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_FNFittingInfo::clear_has_mininstallx() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_FNFittingInfo::clear_mininstallx() {
  mininstallx_ = 0;
  clear_has_mininstallx();
}
inline double JK_FNFittingInfo::mininstallx() const {
  return mininstallx_;
}
inline void JK_FNFittingInfo::set_mininstallx(double value) {
  set_has_mininstallx();
  mininstallx_ = value;
}

// required double MinInstallY = 16;
inline bool JK_FNFittingInfo::has_mininstally() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_FNFittingInfo::set_has_mininstally() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_FNFittingInfo::clear_has_mininstally() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_FNFittingInfo::clear_mininstally() {
  mininstally_ = 0;
  clear_has_mininstally();
}
inline double JK_FNFittingInfo::mininstally() const {
  return mininstally_;
}
inline void JK_FNFittingInfo::set_mininstally(double value) {
  set_has_mininstally();
  mininstally_ = value;
}

// required double MinInstallZ = 17;
inline bool JK_FNFittingInfo::has_mininstallz() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_FNFittingInfo::set_has_mininstallz() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_FNFittingInfo::clear_has_mininstallz() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_FNFittingInfo::clear_mininstallz() {
  mininstallz_ = 0;
  clear_has_mininstallz();
}
inline double JK_FNFittingInfo::mininstallz() const {
  return mininstallz_;
}
inline void JK_FNFittingInfo::set_mininstallz(double value) {
  set_has_mininstallz();
  mininstallz_ = value;
}

// required double MinXLen = 18;
inline bool JK_FNFittingInfo::has_minxlen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_FNFittingInfo::set_has_minxlen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_FNFittingInfo::clear_has_minxlen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_FNFittingInfo::clear_minxlen() {
  minxlen_ = 0;
  clear_has_minxlen();
}
inline double JK_FNFittingInfo::minxlen() const {
  return minxlen_;
}
inline void JK_FNFittingInfo::set_minxlen(double value) {
  set_has_minxlen();
  minxlen_ = value;
}

// required double MaxXLen = 19;
inline bool JK_FNFittingInfo::has_maxxlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_FNFittingInfo::set_has_maxxlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_FNFittingInfo::clear_has_maxxlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_FNFittingInfo::clear_maxxlen() {
  maxxlen_ = 0;
  clear_has_maxxlen();
}
inline double JK_FNFittingInfo::maxxlen() const {
  return maxxlen_;
}
inline void JK_FNFittingInfo::set_maxxlen(double value) {
  set_has_maxxlen();
  maxxlen_ = value;
}

// required double MinYLen = 20;
inline bool JK_FNFittingInfo::has_minylen() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_FNFittingInfo::set_has_minylen() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_FNFittingInfo::clear_has_minylen() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_FNFittingInfo::clear_minylen() {
  minylen_ = 0;
  clear_has_minylen();
}
inline double JK_FNFittingInfo::minylen() const {
  return minylen_;
}
inline void JK_FNFittingInfo::set_minylen(double value) {
  set_has_minylen();
  minylen_ = value;
}

// required double MaxYLen = 21;
inline bool JK_FNFittingInfo::has_maxylen() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_FNFittingInfo::set_has_maxylen() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_FNFittingInfo::clear_has_maxylen() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_FNFittingInfo::clear_maxylen() {
  maxylen_ = 0;
  clear_has_maxylen();
}
inline double JK_FNFittingInfo::maxylen() const {
  return maxylen_;
}
inline void JK_FNFittingInfo::set_maxylen(double value) {
  set_has_maxylen();
  maxylen_ = value;
}

// required double MinZLen = 22;
inline bool JK_FNFittingInfo::has_minzlen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_FNFittingInfo::set_has_minzlen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_FNFittingInfo::clear_has_minzlen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_FNFittingInfo::clear_minzlen() {
  minzlen_ = 0;
  clear_has_minzlen();
}
inline double JK_FNFittingInfo::minzlen() const {
  return minzlen_;
}
inline void JK_FNFittingInfo::set_minzlen(double value) {
  set_has_minzlen();
  minzlen_ = value;
}

// required double MaxZLen = 23;
inline bool JK_FNFittingInfo::has_maxzlen() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_FNFittingInfo::set_has_maxzlen() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_FNFittingInfo::clear_has_maxzlen() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_FNFittingInfo::clear_maxzlen() {
  maxzlen_ = 0;
  clear_has_maxzlen();
}
inline double JK_FNFittingInfo::maxzlen() const {
  return maxzlen_;
}
inline void JK_FNFittingInfo::set_maxzlen(double value) {
  set_has_maxzlen();
  maxzlen_ = value;
}

// required bool IsMatchXLen = 24;
inline bool JK_FNFittingInfo::has_ismatchxlen() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void JK_FNFittingInfo::set_has_ismatchxlen() {
  _has_bits_[0] |= 0x00800000u;
}
inline void JK_FNFittingInfo::clear_has_ismatchxlen() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void JK_FNFittingInfo::clear_ismatchxlen() {
  ismatchxlen_ = false;
  clear_has_ismatchxlen();
}
inline bool JK_FNFittingInfo::ismatchxlen() const {
  return ismatchxlen_;
}
inline void JK_FNFittingInfo::set_ismatchxlen(bool value) {
  set_has_ismatchxlen();
  ismatchxlen_ = value;
}

// required bool IsMatchYLen = 25;
inline bool JK_FNFittingInfo::has_ismatchylen() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void JK_FNFittingInfo::set_has_ismatchylen() {
  _has_bits_[0] |= 0x01000000u;
}
inline void JK_FNFittingInfo::clear_has_ismatchylen() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void JK_FNFittingInfo::clear_ismatchylen() {
  ismatchylen_ = false;
  clear_has_ismatchylen();
}
inline bool JK_FNFittingInfo::ismatchylen() const {
  return ismatchylen_;
}
inline void JK_FNFittingInfo::set_ismatchylen(bool value) {
  set_has_ismatchylen();
  ismatchylen_ = value;
}

// required bool IsMatchZLen = 26;
inline bool JK_FNFittingInfo::has_ismatchzlen() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void JK_FNFittingInfo::set_has_ismatchzlen() {
  _has_bits_[0] |= 0x02000000u;
}
inline void JK_FNFittingInfo::clear_has_ismatchzlen() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void JK_FNFittingInfo::clear_ismatchzlen() {
  ismatchzlen_ = false;
  clear_has_ismatchzlen();
}
inline bool JK_FNFittingInfo::ismatchzlen() const {
  return ismatchzlen_;
}
inline void JK_FNFittingInfo::set_ismatchzlen(bool value) {
  set_has_ismatchzlen();
  ismatchzlen_ = value;
}

// required double DefaultYPos = 27;
inline bool JK_FNFittingInfo::has_defaultypos() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void JK_FNFittingInfo::set_has_defaultypos() {
  _has_bits_[0] |= 0x04000000u;
}
inline void JK_FNFittingInfo::clear_has_defaultypos() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void JK_FNFittingInfo::clear_defaultypos() {
  defaultypos_ = 0;
  clear_has_defaultypos();
}
inline double JK_FNFittingInfo::defaultypos() const {
  return defaultypos_;
}
inline void JK_FNFittingInfo::set_defaultypos(double value) {
  set_has_defaultypos();
  defaultypos_ = value;
}

// required int32 CreatorID = 28;
inline bool JK_FNFittingInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void JK_FNFittingInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void JK_FNFittingInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void JK_FNFittingInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_FNFittingInfo::creatorid() const {
  return creatorid_;
}
inline void JK_FNFittingInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 29;
inline bool JK_FNFittingInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void JK_FNFittingInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void JK_FNFittingInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void JK_FNFittingInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_FNFittingInfo::updaterid() const {
  return updaterid_;
}
inline void JK_FNFittingInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 30;
inline bool JK_FNFittingInfo::has_createtime() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void JK_FNFittingInfo::set_has_createtime() {
  _has_bits_[0] |= 0x20000000u;
}
inline void JK_FNFittingInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void JK_FNFittingInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_FNFittingInfo::createtime() const {
  return createtime_;
}
inline void JK_FNFittingInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 31;
inline bool JK_FNFittingInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void JK_FNFittingInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x40000000u;
}
inline void JK_FNFittingInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void JK_FNFittingInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_FNFittingInfo::updatetime() const {
  return updatetime_;
}
inline void JK_FNFittingInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string FNFittingCode = 32;
inline bool JK_FNFittingInfo::has_fnfittingcode() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void JK_FNFittingInfo::set_has_fnfittingcode() {
  _has_bits_[0] |= 0x80000000u;
}
inline void JK_FNFittingInfo::clear_has_fnfittingcode() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void JK_FNFittingInfo::clear_fnfittingcode() {
  if (fnfittingcode_ != &::google::protobuf::internal::kEmptyString) {
    fnfittingcode_->clear();
  }
  clear_has_fnfittingcode();
}
inline const ::std::string& JK_FNFittingInfo::fnfittingcode() const {
  return *fnfittingcode_;
}
inline void JK_FNFittingInfo::set_fnfittingcode(const ::std::string& value) {
  set_has_fnfittingcode();
  if (fnfittingcode_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingcode_ = new ::std::string;
  }
  fnfittingcode_->assign(value);
}
inline void JK_FNFittingInfo::set_fnfittingcode(const char* value) {
  set_has_fnfittingcode();
  if (fnfittingcode_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingcode_ = new ::std::string;
  }
  fnfittingcode_->assign(value);
}
inline void JK_FNFittingInfo::set_fnfittingcode(const char* value, size_t size) {
  set_has_fnfittingcode();
  if (fnfittingcode_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingcode_ = new ::std::string;
  }
  fnfittingcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FNFittingInfo::mutable_fnfittingcode() {
  set_has_fnfittingcode();
  if (fnfittingcode_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingcode_ = new ::std::string;
  }
  return fnfittingcode_;
}
inline ::std::string* JK_FNFittingInfo::release_fnfittingcode() {
  clear_has_fnfittingcode();
  if (fnfittingcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fnfittingcode_;
    fnfittingcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FNFittingInfo::set_allocated_fnfittingcode(::std::string* fnfittingcode) {
  if (fnfittingcode_ != &::google::protobuf::internal::kEmptyString) {
    delete fnfittingcode_;
  }
  if (fnfittingcode) {
    set_has_fnfittingcode();
    fnfittingcode_ = fnfittingcode;
  } else {
    clear_has_fnfittingcode();
    fnfittingcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string FNFittingName = 33;
inline bool JK_FNFittingInfo::has_fnfittingname() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void JK_FNFittingInfo::set_has_fnfittingname() {
  _has_bits_[1] |= 0x00000001u;
}
inline void JK_FNFittingInfo::clear_has_fnfittingname() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void JK_FNFittingInfo::clear_fnfittingname() {
  if (fnfittingname_ != &::google::protobuf::internal::kEmptyString) {
    fnfittingname_->clear();
  }
  clear_has_fnfittingname();
}
inline const ::std::string& JK_FNFittingInfo::fnfittingname() const {
  return *fnfittingname_;
}
inline void JK_FNFittingInfo::set_fnfittingname(const ::std::string& value) {
  set_has_fnfittingname();
  if (fnfittingname_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingname_ = new ::std::string;
  }
  fnfittingname_->assign(value);
}
inline void JK_FNFittingInfo::set_fnfittingname(const char* value) {
  set_has_fnfittingname();
  if (fnfittingname_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingname_ = new ::std::string;
  }
  fnfittingname_->assign(value);
}
inline void JK_FNFittingInfo::set_fnfittingname(const char* value, size_t size) {
  set_has_fnfittingname();
  if (fnfittingname_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingname_ = new ::std::string;
  }
  fnfittingname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FNFittingInfo::mutable_fnfittingname() {
  set_has_fnfittingname();
  if (fnfittingname_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingname_ = new ::std::string;
  }
  return fnfittingname_;
}
inline ::std::string* JK_FNFittingInfo::release_fnfittingname() {
  clear_has_fnfittingname();
  if (fnfittingname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fnfittingname_;
    fnfittingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FNFittingInfo::set_allocated_fnfittingname(::std::string* fnfittingname) {
  if (fnfittingname_ != &::google::protobuf::internal::kEmptyString) {
    delete fnfittingname_;
  }
  if (fnfittingname) {
    set_has_fnfittingname();
    fnfittingname_ = fnfittingname;
  } else {
    clear_has_fnfittingname();
    fnfittingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string FNFittingMemo = 34;
inline bool JK_FNFittingInfo::has_fnfittingmemo() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void JK_FNFittingInfo::set_has_fnfittingmemo() {
  _has_bits_[1] |= 0x00000002u;
}
inline void JK_FNFittingInfo::clear_has_fnfittingmemo() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void JK_FNFittingInfo::clear_fnfittingmemo() {
  if (fnfittingmemo_ != &::google::protobuf::internal::kEmptyString) {
    fnfittingmemo_->clear();
  }
  clear_has_fnfittingmemo();
}
inline const ::std::string& JK_FNFittingInfo::fnfittingmemo() const {
  return *fnfittingmemo_;
}
inline void JK_FNFittingInfo::set_fnfittingmemo(const ::std::string& value) {
  set_has_fnfittingmemo();
  if (fnfittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingmemo_ = new ::std::string;
  }
  fnfittingmemo_->assign(value);
}
inline void JK_FNFittingInfo::set_fnfittingmemo(const char* value) {
  set_has_fnfittingmemo();
  if (fnfittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingmemo_ = new ::std::string;
  }
  fnfittingmemo_->assign(value);
}
inline void JK_FNFittingInfo::set_fnfittingmemo(const char* value, size_t size) {
  set_has_fnfittingmemo();
  if (fnfittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingmemo_ = new ::std::string;
  }
  fnfittingmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FNFittingInfo::mutable_fnfittingmemo() {
  set_has_fnfittingmemo();
  if (fnfittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingmemo_ = new ::std::string;
  }
  return fnfittingmemo_;
}
inline ::std::string* JK_FNFittingInfo::release_fnfittingmemo() {
  clear_has_fnfittingmemo();
  if (fnfittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fnfittingmemo_;
    fnfittingmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FNFittingInfo::set_allocated_fnfittingmemo(::std::string* fnfittingmemo) {
  if (fnfittingmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete fnfittingmemo_;
  }
  if (fnfittingmemo) {
    set_has_fnfittingmemo();
    fnfittingmemo_ = fnfittingmemo;
  } else {
    clear_has_fnfittingmemo();
    fnfittingmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 35;
inline bool JK_FNFittingInfo::has_vercode() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void JK_FNFittingInfo::set_has_vercode() {
  _has_bits_[1] |= 0x00000004u;
}
inline void JK_FNFittingInfo::clear_has_vercode() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void JK_FNFittingInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_FNFittingInfo::vercode() const {
  return vercode_;
}
inline void JK_FNFittingInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_FNFittingMatInfo

// required int32 FNFittingID = 1;
inline bool JK_FNFittingMatInfo::has_fnfittingid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_FNFittingMatInfo::set_has_fnfittingid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_FNFittingMatInfo::clear_has_fnfittingid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_FNFittingMatInfo::clear_fnfittingid() {
  fnfittingid_ = 0;
  clear_has_fnfittingid();
}
inline ::google::protobuf::int32 JK_FNFittingMatInfo::fnfittingid() const {
  return fnfittingid_;
}
inline void JK_FNFittingMatInfo::set_fnfittingid(::google::protobuf::int32 value) {
  set_has_fnfittingid();
  fnfittingid_ = value;
}

// required int32 MaterialID = 2;
inline bool JK_FNFittingMatInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_FNFittingMatInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_FNFittingMatInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_FNFittingMatInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 JK_FNFittingMatInfo::materialid() const {
  return materialid_;
}
inline void JK_FNFittingMatInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required bool IsDefault = 3;
inline bool JK_FNFittingMatInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_FNFittingMatInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_FNFittingMatInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_FNFittingMatInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_FNFittingMatInfo::isdefault() const {
  return isdefault_;
}
inline void JK_FNFittingMatInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 4;
inline bool JK_FNFittingMatInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_FNFittingMatInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_FNFittingMatInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_FNFittingMatInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_FNFittingMatInfo::vercode() const {
  return vercode_;
}
inline void JK_FNFittingMatInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_FNFittingMatInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_FNFittingMatInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_FNFittingMatInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_FNFittingMatInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_FNFittingMatInfo::factoryid() const {
  return factoryid_;
}
inline void JK_FNFittingMatInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_FNFittingPartInfo

// required int32 FNFittingPartID = 1;
inline bool JK_FNFittingPartInfo::has_fnfittingpartid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_fnfittingpartid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_FNFittingPartInfo::clear_has_fnfittingpartid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_FNFittingPartInfo::clear_fnfittingpartid() {
  fnfittingpartid_ = 0;
  clear_has_fnfittingpartid();
}
inline ::google::protobuf::int32 JK_FNFittingPartInfo::fnfittingpartid() const {
  return fnfittingpartid_;
}
inline void JK_FNFittingPartInfo::set_fnfittingpartid(::google::protobuf::int32 value) {
  set_has_fnfittingpartid();
  fnfittingpartid_ = value;
}

// required int32 PartType = 2;
inline bool JK_FNFittingPartInfo::has_parttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_parttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_FNFittingPartInfo::clear_has_parttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_FNFittingPartInfo::clear_parttype() {
  parttype_ = 0;
  clear_has_parttype();
}
inline ::google::protobuf::int32 JK_FNFittingPartInfo::parttype() const {
  return parttype_;
}
inline void JK_FNFittingPartInfo::set_parttype(::google::protobuf::int32 value) {
  set_has_parttype();
  parttype_ = value;
}

// required bool IsDel = 3;
inline bool JK_FNFittingPartInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_FNFittingPartInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_FNFittingPartInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_FNFittingPartInfo::isdel() const {
  return isdel_;
}
inline void JK_FNFittingPartInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 FNFittingID = 4;
inline bool JK_FNFittingPartInfo::has_fnfittingid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_fnfittingid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_FNFittingPartInfo::clear_has_fnfittingid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_FNFittingPartInfo::clear_fnfittingid() {
  fnfittingid_ = 0;
  clear_has_fnfittingid();
}
inline ::google::protobuf::int32 JK_FNFittingPartInfo::fnfittingid() const {
  return fnfittingid_;
}
inline void JK_FNFittingPartInfo::set_fnfittingid(::google::protobuf::int32 value) {
  set_has_fnfittingid();
  fnfittingid_ = value;
}

// required bool IsUseMain = 5;
inline bool JK_FNFittingPartInfo::has_isusemain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_isusemain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_FNFittingPartInfo::clear_has_isusemain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_FNFittingPartInfo::clear_isusemain() {
  isusemain_ = false;
  clear_has_isusemain();
}
inline bool JK_FNFittingPartInfo::isusemain() const {
  return isusemain_;
}
inline void JK_FNFittingPartInfo::set_isusemain(bool value) {
  set_has_isusemain();
  isusemain_ = value;
}

// required int32 SkinDirection = 6;
inline bool JK_FNFittingPartInfo::has_skindirection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_skindirection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_FNFittingPartInfo::clear_has_skindirection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_FNFittingPartInfo::clear_skindirection() {
  skindirection_ = 0;
  clear_has_skindirection();
}
inline ::google::protobuf::int32 JK_FNFittingPartInfo::skindirection() const {
  return skindirection_;
}
inline void JK_FNFittingPartInfo::set_skindirection(::google::protobuf::int32 value) {
  set_has_skindirection();
  skindirection_ = value;
}

// required int32 SplitType = 7;
inline bool JK_FNFittingPartInfo::has_splittype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_splittype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_FNFittingPartInfo::clear_has_splittype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_FNFittingPartInfo::clear_splittype() {
  splittype_ = 0;
  clear_has_splittype();
}
inline ::google::protobuf::int32 JK_FNFittingPartInfo::splittype() const {
  return splittype_;
}
inline void JK_FNFittingPartInfo::set_splittype(::google::protobuf::int32 value) {
  set_has_splittype();
  splittype_ = value;
}

// required double ArcX = 8;
inline bool JK_FNFittingPartInfo::has_arcx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_arcx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_FNFittingPartInfo::clear_has_arcx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_FNFittingPartInfo::clear_arcx() {
  arcx_ = 0;
  clear_has_arcx();
}
inline double JK_FNFittingPartInfo::arcx() const {
  return arcx_;
}
inline void JK_FNFittingPartInfo::set_arcx(double value) {
  set_has_arcx();
  arcx_ = value;
}

// required double ArcY = 9;
inline bool JK_FNFittingPartInfo::has_arcy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_arcy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_FNFittingPartInfo::clear_has_arcy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_FNFittingPartInfo::clear_arcy() {
  arcy_ = 0;
  clear_has_arcy();
}
inline double JK_FNFittingPartInfo::arcy() const {
  return arcy_;
}
inline void JK_FNFittingPartInfo::set_arcy(double value) {
  set_has_arcy();
  arcy_ = value;
}

// required double ArcZ = 10;
inline bool JK_FNFittingPartInfo::has_arcz() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_arcz() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_FNFittingPartInfo::clear_has_arcz() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_FNFittingPartInfo::clear_arcz() {
  arcz_ = 0;
  clear_has_arcz();
}
inline double JK_FNFittingPartInfo::arcz() const {
  return arcz_;
}
inline void JK_FNFittingPartInfo::set_arcz(double value) {
  set_has_arcz();
  arcz_ = value;
}

// required string XFormula = 11;
inline bool JK_FNFittingPartInfo::has_xformula() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_xformula() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_FNFittingPartInfo::clear_has_xformula() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_FNFittingPartInfo::clear_xformula() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    xformula_->clear();
  }
  clear_has_xformula();
}
inline const ::std::string& JK_FNFittingPartInfo::xformula() const {
  return *xformula_;
}
inline void JK_FNFittingPartInfo::set_xformula(const ::std::string& value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_FNFittingPartInfo::set_xformula(const char* value) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(value);
}
inline void JK_FNFittingPartInfo::set_xformula(const char* value, size_t size) {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  xformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FNFittingPartInfo::mutable_xformula() {
  set_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    xformula_ = new ::std::string;
  }
  return xformula_;
}
inline ::std::string* JK_FNFittingPartInfo::release_xformula() {
  clear_has_xformula();
  if (xformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xformula_;
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FNFittingPartInfo::set_allocated_xformula(::std::string* xformula) {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (xformula) {
    set_has_xformula();
    xformula_ = xformula;
  } else {
    clear_has_xformula();
    xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YFormula = 12;
inline bool JK_FNFittingPartInfo::has_yformula() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_yformula() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_FNFittingPartInfo::clear_has_yformula() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_FNFittingPartInfo::clear_yformula() {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    yformula_->clear();
  }
  clear_has_yformula();
}
inline const ::std::string& JK_FNFittingPartInfo::yformula() const {
  return *yformula_;
}
inline void JK_FNFittingPartInfo::set_yformula(const ::std::string& value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_FNFittingPartInfo::set_yformula(const char* value) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(value);
}
inline void JK_FNFittingPartInfo::set_yformula(const char* value, size_t size) {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  yformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FNFittingPartInfo::mutable_yformula() {
  set_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    yformula_ = new ::std::string;
  }
  return yformula_;
}
inline ::std::string* JK_FNFittingPartInfo::release_yformula() {
  clear_has_yformula();
  if (yformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yformula_;
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FNFittingPartInfo::set_allocated_yformula(::std::string* yformula) {
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (yformula) {
    set_has_yformula();
    yformula_ = yformula;
  } else {
    clear_has_yformula();
    yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 XDock = 13;
inline bool JK_FNFittingPartInfo::has_xdock() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_xdock() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_FNFittingPartInfo::clear_has_xdock() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_FNFittingPartInfo::clear_xdock() {
  xdock_ = 0;
  clear_has_xdock();
}
inline ::google::protobuf::int32 JK_FNFittingPartInfo::xdock() const {
  return xdock_;
}
inline void JK_FNFittingPartInfo::set_xdock(::google::protobuf::int32 value) {
  set_has_xdock();
  xdock_ = value;
}

// required int32 YDock = 14;
inline bool JK_FNFittingPartInfo::has_ydock() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_ydock() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_FNFittingPartInfo::clear_has_ydock() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_FNFittingPartInfo::clear_ydock() {
  ydock_ = 0;
  clear_has_ydock();
}
inline ::google::protobuf::int32 JK_FNFittingPartInfo::ydock() const {
  return ydock_;
}
inline void JK_FNFittingPartInfo::set_ydock(::google::protobuf::int32 value) {
  set_has_ydock();
  ydock_ = value;
}

// required int32 ZDock = 15;
inline bool JK_FNFittingPartInfo::has_zdock() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_zdock() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_FNFittingPartInfo::clear_has_zdock() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_FNFittingPartInfo::clear_zdock() {
  zdock_ = 0;
  clear_has_zdock();
}
inline ::google::protobuf::int32 JK_FNFittingPartInfo::zdock() const {
  return zdock_;
}
inline void JK_FNFittingPartInfo::set_zdock(::google::protobuf::int32 value) {
  set_has_zdock();
  zdock_ = value;
}

// required string XOffsetFormula = 16;
inline bool JK_FNFittingPartInfo::has_xoffsetformula() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_xoffsetformula() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_FNFittingPartInfo::clear_has_xoffsetformula() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_FNFittingPartInfo::clear_xoffsetformula() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_->clear();
  }
  clear_has_xoffsetformula();
}
inline const ::std::string& JK_FNFittingPartInfo::xoffsetformula() const {
  return *xoffsetformula_;
}
inline void JK_FNFittingPartInfo::set_xoffsetformula(const ::std::string& value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_FNFittingPartInfo::set_xoffsetformula(const char* value) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(value);
}
inline void JK_FNFittingPartInfo::set_xoffsetformula(const char* value, size_t size) {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  xoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FNFittingPartInfo::mutable_xoffsetformula() {
  set_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    xoffsetformula_ = new ::std::string;
  }
  return xoffsetformula_;
}
inline ::std::string* JK_FNFittingPartInfo::release_xoffsetformula() {
  clear_has_xoffsetformula();
  if (xoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xoffsetformula_;
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FNFittingPartInfo::set_allocated_xoffsetformula(::std::string* xoffsetformula) {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (xoffsetformula) {
    set_has_xoffsetformula();
    xoffsetformula_ = xoffsetformula;
  } else {
    clear_has_xoffsetformula();
    xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string YOffsetFormula = 17;
inline bool JK_FNFittingPartInfo::has_yoffsetformula() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_yoffsetformula() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_FNFittingPartInfo::clear_has_yoffsetformula() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_FNFittingPartInfo::clear_yoffsetformula() {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_->clear();
  }
  clear_has_yoffsetformula();
}
inline const ::std::string& JK_FNFittingPartInfo::yoffsetformula() const {
  return *yoffsetformula_;
}
inline void JK_FNFittingPartInfo::set_yoffsetformula(const ::std::string& value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_FNFittingPartInfo::set_yoffsetformula(const char* value) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(value);
}
inline void JK_FNFittingPartInfo::set_yoffsetformula(const char* value, size_t size) {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  yoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FNFittingPartInfo::mutable_yoffsetformula() {
  set_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    yoffsetformula_ = new ::std::string;
  }
  return yoffsetformula_;
}
inline ::std::string* JK_FNFittingPartInfo::release_yoffsetformula() {
  clear_has_yoffsetformula();
  if (yoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yoffsetformula_;
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FNFittingPartInfo::set_allocated_yoffsetformula(::std::string* yoffsetformula) {
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (yoffsetformula) {
    set_has_yoffsetformula();
    yoffsetformula_ = yoffsetformula;
  } else {
    clear_has_yoffsetformula();
    yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ZOffsetFormula = 18;
inline bool JK_FNFittingPartInfo::has_zoffsetformula() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_zoffsetformula() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_FNFittingPartInfo::clear_has_zoffsetformula() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_FNFittingPartInfo::clear_zoffsetformula() {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_->clear();
  }
  clear_has_zoffsetformula();
}
inline const ::std::string& JK_FNFittingPartInfo::zoffsetformula() const {
  return *zoffsetformula_;
}
inline void JK_FNFittingPartInfo::set_zoffsetformula(const ::std::string& value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_FNFittingPartInfo::set_zoffsetformula(const char* value) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(value);
}
inline void JK_FNFittingPartInfo::set_zoffsetformula(const char* value, size_t size) {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  zoffsetformula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FNFittingPartInfo::mutable_zoffsetformula() {
  set_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    zoffsetformula_ = new ::std::string;
  }
  return zoffsetformula_;
}
inline ::std::string* JK_FNFittingPartInfo::release_zoffsetformula() {
  clear_has_zoffsetformula();
  if (zoffsetformula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoffsetformula_;
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FNFittingPartInfo::set_allocated_zoffsetformula(::std::string* zoffsetformula) {
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (zoffsetformula) {
    set_has_zoffsetformula();
    zoffsetformula_ = zoffsetformula;
  } else {
    clear_has_zoffsetformula();
    zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string FNFittingPartCode = 19;
inline bool JK_FNFittingPartInfo::has_fnfittingpartcode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_fnfittingpartcode() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_FNFittingPartInfo::clear_has_fnfittingpartcode() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_FNFittingPartInfo::clear_fnfittingpartcode() {
  if (fnfittingpartcode_ != &::google::protobuf::internal::kEmptyString) {
    fnfittingpartcode_->clear();
  }
  clear_has_fnfittingpartcode();
}
inline const ::std::string& JK_FNFittingPartInfo::fnfittingpartcode() const {
  return *fnfittingpartcode_;
}
inline void JK_FNFittingPartInfo::set_fnfittingpartcode(const ::std::string& value) {
  set_has_fnfittingpartcode();
  if (fnfittingpartcode_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingpartcode_ = new ::std::string;
  }
  fnfittingpartcode_->assign(value);
}
inline void JK_FNFittingPartInfo::set_fnfittingpartcode(const char* value) {
  set_has_fnfittingpartcode();
  if (fnfittingpartcode_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingpartcode_ = new ::std::string;
  }
  fnfittingpartcode_->assign(value);
}
inline void JK_FNFittingPartInfo::set_fnfittingpartcode(const char* value, size_t size) {
  set_has_fnfittingpartcode();
  if (fnfittingpartcode_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingpartcode_ = new ::std::string;
  }
  fnfittingpartcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FNFittingPartInfo::mutable_fnfittingpartcode() {
  set_has_fnfittingpartcode();
  if (fnfittingpartcode_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingpartcode_ = new ::std::string;
  }
  return fnfittingpartcode_;
}
inline ::std::string* JK_FNFittingPartInfo::release_fnfittingpartcode() {
  clear_has_fnfittingpartcode();
  if (fnfittingpartcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fnfittingpartcode_;
    fnfittingpartcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FNFittingPartInfo::set_allocated_fnfittingpartcode(::std::string* fnfittingpartcode) {
  if (fnfittingpartcode_ != &::google::protobuf::internal::kEmptyString) {
    delete fnfittingpartcode_;
  }
  if (fnfittingpartcode) {
    set_has_fnfittingpartcode();
    fnfittingpartcode_ = fnfittingpartcode;
  } else {
    clear_has_fnfittingpartcode();
    fnfittingpartcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string FNFittingPartName = 20;
inline bool JK_FNFittingPartInfo::has_fnfittingpartname() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_fnfittingpartname() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_FNFittingPartInfo::clear_has_fnfittingpartname() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_FNFittingPartInfo::clear_fnfittingpartname() {
  if (fnfittingpartname_ != &::google::protobuf::internal::kEmptyString) {
    fnfittingpartname_->clear();
  }
  clear_has_fnfittingpartname();
}
inline const ::std::string& JK_FNFittingPartInfo::fnfittingpartname() const {
  return *fnfittingpartname_;
}
inline void JK_FNFittingPartInfo::set_fnfittingpartname(const ::std::string& value) {
  set_has_fnfittingpartname();
  if (fnfittingpartname_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingpartname_ = new ::std::string;
  }
  fnfittingpartname_->assign(value);
}
inline void JK_FNFittingPartInfo::set_fnfittingpartname(const char* value) {
  set_has_fnfittingpartname();
  if (fnfittingpartname_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingpartname_ = new ::std::string;
  }
  fnfittingpartname_->assign(value);
}
inline void JK_FNFittingPartInfo::set_fnfittingpartname(const char* value, size_t size) {
  set_has_fnfittingpartname();
  if (fnfittingpartname_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingpartname_ = new ::std::string;
  }
  fnfittingpartname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FNFittingPartInfo::mutable_fnfittingpartname() {
  set_has_fnfittingpartname();
  if (fnfittingpartname_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingpartname_ = new ::std::string;
  }
  return fnfittingpartname_;
}
inline ::std::string* JK_FNFittingPartInfo::release_fnfittingpartname() {
  clear_has_fnfittingpartname();
  if (fnfittingpartname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fnfittingpartname_;
    fnfittingpartname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FNFittingPartInfo::set_allocated_fnfittingpartname(::std::string* fnfittingpartname) {
  if (fnfittingpartname_ != &::google::protobuf::internal::kEmptyString) {
    delete fnfittingpartname_;
  }
  if (fnfittingpartname) {
    set_has_fnfittingpartname();
    fnfittingpartname_ = fnfittingpartname;
  } else {
    clear_has_fnfittingpartname();
    fnfittingpartname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string FNFittingPartMemo = 21;
inline bool JK_FNFittingPartInfo::has_fnfittingpartmemo() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_fnfittingpartmemo() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_FNFittingPartInfo::clear_has_fnfittingpartmemo() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_FNFittingPartInfo::clear_fnfittingpartmemo() {
  if (fnfittingpartmemo_ != &::google::protobuf::internal::kEmptyString) {
    fnfittingpartmemo_->clear();
  }
  clear_has_fnfittingpartmemo();
}
inline const ::std::string& JK_FNFittingPartInfo::fnfittingpartmemo() const {
  return *fnfittingpartmemo_;
}
inline void JK_FNFittingPartInfo::set_fnfittingpartmemo(const ::std::string& value) {
  set_has_fnfittingpartmemo();
  if (fnfittingpartmemo_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingpartmemo_ = new ::std::string;
  }
  fnfittingpartmemo_->assign(value);
}
inline void JK_FNFittingPartInfo::set_fnfittingpartmemo(const char* value) {
  set_has_fnfittingpartmemo();
  if (fnfittingpartmemo_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingpartmemo_ = new ::std::string;
  }
  fnfittingpartmemo_->assign(value);
}
inline void JK_FNFittingPartInfo::set_fnfittingpartmemo(const char* value, size_t size) {
  set_has_fnfittingpartmemo();
  if (fnfittingpartmemo_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingpartmemo_ = new ::std::string;
  }
  fnfittingpartmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FNFittingPartInfo::mutable_fnfittingpartmemo() {
  set_has_fnfittingpartmemo();
  if (fnfittingpartmemo_ == &::google::protobuf::internal::kEmptyString) {
    fnfittingpartmemo_ = new ::std::string;
  }
  return fnfittingpartmemo_;
}
inline ::std::string* JK_FNFittingPartInfo::release_fnfittingpartmemo() {
  clear_has_fnfittingpartmemo();
  if (fnfittingpartmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fnfittingpartmemo_;
    fnfittingpartmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FNFittingPartInfo::set_allocated_fnfittingpartmemo(::std::string* fnfittingpartmemo) {
  if (fnfittingpartmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete fnfittingpartmemo_;
  }
  if (fnfittingpartmemo) {
    set_has_fnfittingpartmemo();
    fnfittingpartmemo_ = fnfittingpartmemo;
  } else {
    clear_has_fnfittingpartmemo();
    fnfittingpartmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 22;
inline bool JK_FNFittingPartInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_FNFittingPartInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_FNFittingPartInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_FNFittingPartInfo::vercode() const {
  return vercode_;
}
inline void JK_FNFittingPartInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 23;
inline bool JK_FNFittingPartInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_FNFittingPartInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_FNFittingPartInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_FNFittingPartInfo::factoryid() const {
  return factoryid_;
}
inline void JK_FNFittingPartInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 24;
inline bool JK_FNFittingPartInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void JK_FNFittingPartInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void JK_FNFittingPartInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_FNFittingPartInfo::creatorid() const {
  return creatorid_;
}
inline void JK_FNFittingPartInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 25;
inline bool JK_FNFittingPartInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void JK_FNFittingPartInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void JK_FNFittingPartInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_FNFittingPartInfo::updaterid() const {
  return updaterid_;
}
inline void JK_FNFittingPartInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 26;
inline bool JK_FNFittingPartInfo::has_createtime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_createtime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void JK_FNFittingPartInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void JK_FNFittingPartInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_FNFittingPartInfo::createtime() const {
  return createtime_;
}
inline void JK_FNFittingPartInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 27;
inline bool JK_FNFittingPartInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void JK_FNFittingPartInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x04000000u;
}
inline void JK_FNFittingPartInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void JK_FNFittingPartInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_FNFittingPartInfo::updatetime() const {
  return updatetime_;
}
inline void JK_FNFittingPartInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_FNFittingPartMatInfo

// required int32 FNFittingPartID = 1;
inline bool JK_FNFittingPartMatInfo::has_fnfittingpartid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_FNFittingPartMatInfo::set_has_fnfittingpartid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_FNFittingPartMatInfo::clear_has_fnfittingpartid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_FNFittingPartMatInfo::clear_fnfittingpartid() {
  fnfittingpartid_ = 0;
  clear_has_fnfittingpartid();
}
inline ::google::protobuf::int32 JK_FNFittingPartMatInfo::fnfittingpartid() const {
  return fnfittingpartid_;
}
inline void JK_FNFittingPartMatInfo::set_fnfittingpartid(::google::protobuf::int32 value) {
  set_has_fnfittingpartid();
  fnfittingpartid_ = value;
}

// required int32 MaterialID = 2;
inline bool JK_FNFittingPartMatInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_FNFittingPartMatInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_FNFittingPartMatInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_FNFittingPartMatInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 JK_FNFittingPartMatInfo::materialid() const {
  return materialid_;
}
inline void JK_FNFittingPartMatInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required bool IsDefault = 3;
inline bool JK_FNFittingPartMatInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_FNFittingPartMatInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_FNFittingPartMatInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_FNFittingPartMatInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_FNFittingPartMatInfo::isdefault() const {
  return isdefault_;
}
inline void JK_FNFittingPartMatInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 4;
inline bool JK_FNFittingPartMatInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_FNFittingPartMatInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_FNFittingPartMatInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_FNFittingPartMatInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_FNFittingPartMatInfo::vercode() const {
  return vercode_;
}
inline void JK_FNFittingPartMatInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_FNFittingPartMatInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_FNFittingPartMatInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_FNFittingPartMatInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_FNFittingPartMatInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_FNFittingPartMatInfo::factoryid() const {
  return factoryid_;
}
inline void JK_FNFittingPartMatInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 MatGType = 6;
inline bool JK_FNFittingPartMatInfo::has_matgtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_FNFittingPartMatInfo::set_has_matgtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_FNFittingPartMatInfo::clear_has_matgtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_FNFittingPartMatInfo::clear_matgtype() {
  matgtype_ = 0;
  clear_has_matgtype();
}
inline ::google::protobuf::int32 JK_FNFittingPartMatInfo::matgtype() const {
  return matgtype_;
}
inline void JK_FNFittingPartMatInfo::set_matgtype(::google::protobuf::int32 value) {
  set_has_matgtype();
  matgtype_ = value;
}

// -------------------------------------------------------------------

// JK_FNFittingPartSealInfo

// required int32 FNFittingPartID = 1;
inline bool JK_FNFittingPartSealInfo::has_fnfittingpartid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_FNFittingPartSealInfo::set_has_fnfittingpartid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_FNFittingPartSealInfo::clear_has_fnfittingpartid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_FNFittingPartSealInfo::clear_fnfittingpartid() {
  fnfittingpartid_ = 0;
  clear_has_fnfittingpartid();
}
inline ::google::protobuf::int32 JK_FNFittingPartSealInfo::fnfittingpartid() const {
  return fnfittingpartid_;
}
inline void JK_FNFittingPartSealInfo::set_fnfittingpartid(::google::protobuf::int32 value) {
  set_has_fnfittingpartid();
  fnfittingpartid_ = value;
}

// required int32 SealOrder = 2;
inline bool JK_FNFittingPartSealInfo::has_sealorder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_FNFittingPartSealInfo::set_has_sealorder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_FNFittingPartSealInfo::clear_has_sealorder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_FNFittingPartSealInfo::clear_sealorder() {
  sealorder_ = 0;
  clear_has_sealorder();
}
inline ::google::protobuf::int32 JK_FNFittingPartSealInfo::sealorder() const {
  return sealorder_;
}
inline void JK_FNFittingPartSealInfo::set_sealorder(::google::protobuf::int32 value) {
  set_has_sealorder();
  sealorder_ = value;
}

// required int32 SealIndex = 3;
inline bool JK_FNFittingPartSealInfo::has_sealindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_FNFittingPartSealInfo::set_has_sealindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_FNFittingPartSealInfo::clear_has_sealindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_FNFittingPartSealInfo::clear_sealindex() {
  sealindex_ = 0;
  clear_has_sealindex();
}
inline ::google::protobuf::int32 JK_FNFittingPartSealInfo::sealindex() const {
  return sealindex_;
}
inline void JK_FNFittingPartSealInfo::set_sealindex(::google::protobuf::int32 value) {
  set_has_sealindex();
  sealindex_ = value;
}

// required int32 SealType = 4;
inline bool JK_FNFittingPartSealInfo::has_sealtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_FNFittingPartSealInfo::set_has_sealtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_FNFittingPartSealInfo::clear_has_sealtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_FNFittingPartSealInfo::clear_sealtype() {
  sealtype_ = 0;
  clear_has_sealtype();
}
inline ::google::protobuf::int32 JK_FNFittingPartSealInfo::sealtype() const {
  return sealtype_;
}
inline void JK_FNFittingPartSealInfo::set_sealtype(::google::protobuf::int32 value) {
  set_has_sealtype();
  sealtype_ = value;
}

// required int64 VerCode = 5;
inline bool JK_FNFittingPartSealInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_FNFittingPartSealInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_FNFittingPartSealInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_FNFittingPartSealInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_FNFittingPartSealInfo::vercode() const {
  return vercode_;
}
inline void JK_FNFittingPartSealInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 6;
inline bool JK_FNFittingPartSealInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_FNFittingPartSealInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_FNFittingPartSealInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_FNFittingPartSealInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_FNFittingPartSealInfo::factoryid() const {
  return factoryid_;
}
inline void JK_FNFittingPartSealInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 7;
inline bool JK_FNFittingPartSealInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_FNFittingPartSealInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_FNFittingPartSealInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_FNFittingPartSealInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_FNFittingPartSealInfo::creatorid() const {
  return creatorid_;
}
inline void JK_FNFittingPartSealInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 8;
inline bool JK_FNFittingPartSealInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_FNFittingPartSealInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_FNFittingPartSealInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_FNFittingPartSealInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_FNFittingPartSealInfo::updaterid() const {
  return updaterid_;
}
inline void JK_FNFittingPartSealInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 9;
inline bool JK_FNFittingPartSealInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_FNFittingPartSealInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_FNFittingPartSealInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_FNFittingPartSealInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_FNFittingPartSealInfo::createtime() const {
  return createtime_;
}
inline void JK_FNFittingPartSealInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 10;
inline bool JK_FNFittingPartSealInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_FNFittingPartSealInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_FNFittingPartSealInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_FNFittingPartSealInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_FNFittingPartSealInfo::updatetime() const {
  return updatetime_;
}
inline void JK_FNFittingPartSealInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_FittingInfo

// required int32 FittingID = 1;
inline bool JK_FittingInfo::has_fittingid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_FittingInfo::set_has_fittingid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_FittingInfo::clear_has_fittingid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_FittingInfo::clear_fittingid() {
  fittingid_ = 0;
  clear_has_fittingid();
}
inline ::google::protobuf::int32 JK_FittingInfo::fittingid() const {
  return fittingid_;
}
inline void JK_FittingInfo::set_fittingid(::google::protobuf::int32 value) {
  set_has_fittingid();
  fittingid_ = value;
}

// required int32 FactoryID = 2;
inline bool JK_FittingInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_FittingInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_FittingInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_FittingInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_FittingInfo::factoryid() const {
  return factoryid_;
}
inline void JK_FittingInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 GroupID = 3;
inline bool JK_FittingInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_FittingInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_FittingInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_FittingInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_FittingInfo::groupid() const {
  return groupid_;
}
inline void JK_FittingInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required bool IsDel = 4;
inline bool JK_FittingInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_FittingInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_FittingInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_FittingInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_FittingInfo::isdel() const {
  return isdel_;
}
inline void JK_FittingInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsActive = 5;
inline bool JK_FittingInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_FittingInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_FittingInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_FittingInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_FittingInfo::isactive() const {
  return isactive_;
}
inline void JK_FittingInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required bool IsSplit = 6;
inline bool JK_FittingInfo::has_issplit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_FittingInfo::set_has_issplit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_FittingInfo::clear_has_issplit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_FittingInfo::clear_issplit() {
  issplit_ = false;
  clear_has_issplit();
}
inline bool JK_FittingInfo::issplit() const {
  return issplit_;
}
inline void JK_FittingInfo::set_issplit(bool value) {
  set_has_issplit();
  issplit_ = value;
}

// required int32 GTypeID = 7;
inline bool JK_FittingInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_FittingInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_FittingInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_FittingInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 JK_FittingInfo::gtypeid() const {
  return gtypeid_;
}
inline void JK_FittingInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 SupplyType = 8;
inline bool JK_FittingInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_FittingInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_FittingInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_FittingInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 JK_FittingInfo::supplytype() const {
  return supplytype_;
}
inline void JK_FittingInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 ShowID = 9;
inline bool JK_FittingInfo::has_showid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_FittingInfo::set_has_showid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_FittingInfo::clear_has_showid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_FittingInfo::clear_showid() {
  showid_ = 0;
  clear_has_showid();
}
inline ::google::protobuf::int32 JK_FittingInfo::showid() const {
  return showid_;
}
inline void JK_FittingInfo::set_showid(::google::protobuf::int32 value) {
  set_has_showid();
  showid_ = value;
}

// required int32 CreatorID = 10;
inline bool JK_FittingInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_FittingInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_FittingInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_FittingInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_FittingInfo::creatorid() const {
  return creatorid_;
}
inline void JK_FittingInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 11;
inline bool JK_FittingInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_FittingInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_FittingInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_FittingInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_FittingInfo::updaterid() const {
  return updaterid_;
}
inline void JK_FittingInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 12;
inline bool JK_FittingInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_FittingInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_FittingInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_FittingInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_FittingInfo::createtime() const {
  return createtime_;
}
inline void JK_FittingInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 13;
inline bool JK_FittingInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_FittingInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_FittingInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_FittingInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_FittingInfo::updatetime() const {
  return updatetime_;
}
inline void JK_FittingInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string FittingCode = 14;
inline bool JK_FittingInfo::has_fittingcode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_FittingInfo::set_has_fittingcode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_FittingInfo::clear_has_fittingcode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_FittingInfo::clear_fittingcode() {
  if (fittingcode_ != &::google::protobuf::internal::kEmptyString) {
    fittingcode_->clear();
  }
  clear_has_fittingcode();
}
inline const ::std::string& JK_FittingInfo::fittingcode() const {
  return *fittingcode_;
}
inline void JK_FittingInfo::set_fittingcode(const ::std::string& value) {
  set_has_fittingcode();
  if (fittingcode_ == &::google::protobuf::internal::kEmptyString) {
    fittingcode_ = new ::std::string;
  }
  fittingcode_->assign(value);
}
inline void JK_FittingInfo::set_fittingcode(const char* value) {
  set_has_fittingcode();
  if (fittingcode_ == &::google::protobuf::internal::kEmptyString) {
    fittingcode_ = new ::std::string;
  }
  fittingcode_->assign(value);
}
inline void JK_FittingInfo::set_fittingcode(const char* value, size_t size) {
  set_has_fittingcode();
  if (fittingcode_ == &::google::protobuf::internal::kEmptyString) {
    fittingcode_ = new ::std::string;
  }
  fittingcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FittingInfo::mutable_fittingcode() {
  set_has_fittingcode();
  if (fittingcode_ == &::google::protobuf::internal::kEmptyString) {
    fittingcode_ = new ::std::string;
  }
  return fittingcode_;
}
inline ::std::string* JK_FittingInfo::release_fittingcode() {
  clear_has_fittingcode();
  if (fittingcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fittingcode_;
    fittingcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FittingInfo::set_allocated_fittingcode(::std::string* fittingcode) {
  if (fittingcode_ != &::google::protobuf::internal::kEmptyString) {
    delete fittingcode_;
  }
  if (fittingcode) {
    set_has_fittingcode();
    fittingcode_ = fittingcode;
  } else {
    clear_has_fittingcode();
    fittingcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string FittingName = 15;
inline bool JK_FittingInfo::has_fittingname() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_FittingInfo::set_has_fittingname() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_FittingInfo::clear_has_fittingname() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_FittingInfo::clear_fittingname() {
  if (fittingname_ != &::google::protobuf::internal::kEmptyString) {
    fittingname_->clear();
  }
  clear_has_fittingname();
}
inline const ::std::string& JK_FittingInfo::fittingname() const {
  return *fittingname_;
}
inline void JK_FittingInfo::set_fittingname(const ::std::string& value) {
  set_has_fittingname();
  if (fittingname_ == &::google::protobuf::internal::kEmptyString) {
    fittingname_ = new ::std::string;
  }
  fittingname_->assign(value);
}
inline void JK_FittingInfo::set_fittingname(const char* value) {
  set_has_fittingname();
  if (fittingname_ == &::google::protobuf::internal::kEmptyString) {
    fittingname_ = new ::std::string;
  }
  fittingname_->assign(value);
}
inline void JK_FittingInfo::set_fittingname(const char* value, size_t size) {
  set_has_fittingname();
  if (fittingname_ == &::google::protobuf::internal::kEmptyString) {
    fittingname_ = new ::std::string;
  }
  fittingname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FittingInfo::mutable_fittingname() {
  set_has_fittingname();
  if (fittingname_ == &::google::protobuf::internal::kEmptyString) {
    fittingname_ = new ::std::string;
  }
  return fittingname_;
}
inline ::std::string* JK_FittingInfo::release_fittingname() {
  clear_has_fittingname();
  if (fittingname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fittingname_;
    fittingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FittingInfo::set_allocated_fittingname(::std::string* fittingname) {
  if (fittingname_ != &::google::protobuf::internal::kEmptyString) {
    delete fittingname_;
  }
  if (fittingname) {
    set_has_fittingname();
    fittingname_ = fittingname;
  } else {
    clear_has_fittingname();
    fittingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string FittingMemo = 16;
inline bool JK_FittingInfo::has_fittingmemo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_FittingInfo::set_has_fittingmemo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_FittingInfo::clear_has_fittingmemo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_FittingInfo::clear_fittingmemo() {
  if (fittingmemo_ != &::google::protobuf::internal::kEmptyString) {
    fittingmemo_->clear();
  }
  clear_has_fittingmemo();
}
inline const ::std::string& JK_FittingInfo::fittingmemo() const {
  return *fittingmemo_;
}
inline void JK_FittingInfo::set_fittingmemo(const ::std::string& value) {
  set_has_fittingmemo();
  if (fittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    fittingmemo_ = new ::std::string;
  }
  fittingmemo_->assign(value);
}
inline void JK_FittingInfo::set_fittingmemo(const char* value) {
  set_has_fittingmemo();
  if (fittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    fittingmemo_ = new ::std::string;
  }
  fittingmemo_->assign(value);
}
inline void JK_FittingInfo::set_fittingmemo(const char* value, size_t size) {
  set_has_fittingmemo();
  if (fittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    fittingmemo_ = new ::std::string;
  }
  fittingmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FittingInfo::mutable_fittingmemo() {
  set_has_fittingmemo();
  if (fittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    fittingmemo_ = new ::std::string;
  }
  return fittingmemo_;
}
inline ::std::string* JK_FittingInfo::release_fittingmemo() {
  clear_has_fittingmemo();
  if (fittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fittingmemo_;
    fittingmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FittingInfo::set_allocated_fittingmemo(::std::string* fittingmemo) {
  if (fittingmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete fittingmemo_;
  }
  if (fittingmemo) {
    set_has_fittingmemo();
    fittingmemo_ = fittingmemo;
  } else {
    clear_has_fittingmemo();
    fittingmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 17;
inline bool JK_FittingInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_FittingInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_FittingInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_FittingInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_FittingInfo::vercode() const {
  return vercode_;
}
inline void JK_FittingInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_FittingRuleInfo

// required int32 FittingRuleID = 1;
inline bool JK_FittingRuleInfo::has_fittingruleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_FittingRuleInfo::set_has_fittingruleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_FittingRuleInfo::clear_has_fittingruleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_FittingRuleInfo::clear_fittingruleid() {
  fittingruleid_ = 0;
  clear_has_fittingruleid();
}
inline ::google::protobuf::int32 JK_FittingRuleInfo::fittingruleid() const {
  return fittingruleid_;
}
inline void JK_FittingRuleInfo::set_fittingruleid(::google::protobuf::int32 value) {
  set_has_fittingruleid();
  fittingruleid_ = value;
}

// required int32 OwnerID = 2;
inline bool JK_FittingRuleInfo::has_ownerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_FittingRuleInfo::set_has_ownerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_FittingRuleInfo::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_FittingRuleInfo::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 JK_FittingRuleInfo::ownerid() const {
  return ownerid_;
}
inline void JK_FittingRuleInfo::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// required int32 OwnerGTypeID = 3;
inline bool JK_FittingRuleInfo::has_ownergtypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_FittingRuleInfo::set_has_ownergtypeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_FittingRuleInfo::clear_has_ownergtypeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_FittingRuleInfo::clear_ownergtypeid() {
  ownergtypeid_ = 0;
  clear_has_ownergtypeid();
}
inline ::google::protobuf::int32 JK_FittingRuleInfo::ownergtypeid() const {
  return ownergtypeid_;
}
inline void JK_FittingRuleInfo::set_ownergtypeid(::google::protobuf::int32 value) {
  set_has_ownergtypeid();
  ownergtypeid_ = value;
}

// required bool IsDefault = 4;
inline bool JK_FittingRuleInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_FittingRuleInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_FittingRuleInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_FittingRuleInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_FittingRuleInfo::isdefault() const {
  return isdefault_;
}
inline void JK_FittingRuleInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required bool IsCanDel = 5;
inline bool JK_FittingRuleInfo::has_iscandel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_FittingRuleInfo::set_has_iscandel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_FittingRuleInfo::clear_has_iscandel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_FittingRuleInfo::clear_iscandel() {
  iscandel_ = false;
  clear_has_iscandel();
}
inline bool JK_FittingRuleInfo::iscandel() const {
  return iscandel_;
}
inline void JK_FittingRuleInfo::set_iscandel(bool value) {
  set_has_iscandel();
  iscandel_ = value;
}

// required double MinLen = 6;
inline bool JK_FittingRuleInfo::has_minlen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_FittingRuleInfo::set_has_minlen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_FittingRuleInfo::clear_has_minlen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_FittingRuleInfo::clear_minlen() {
  minlen_ = 0;
  clear_has_minlen();
}
inline double JK_FittingRuleInfo::minlen() const {
  return minlen_;
}
inline void JK_FittingRuleInfo::set_minlen(double value) {
  set_has_minlen();
  minlen_ = value;
}

// required double MaxLen = 7;
inline bool JK_FittingRuleInfo::has_maxlen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_FittingRuleInfo::set_has_maxlen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_FittingRuleInfo::clear_has_maxlen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_FittingRuleInfo::clear_maxlen() {
  maxlen_ = 0;
  clear_has_maxlen();
}
inline double JK_FittingRuleInfo::maxlen() const {
  return maxlen_;
}
inline void JK_FittingRuleInfo::set_maxlen(double value) {
  set_has_maxlen();
  maxlen_ = value;
}

// required int32 FittingID = 8;
inline bool JK_FittingRuleInfo::has_fittingid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_FittingRuleInfo::set_has_fittingid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_FittingRuleInfo::clear_has_fittingid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_FittingRuleInfo::clear_fittingid() {
  fittingid_ = 0;
  clear_has_fittingid();
}
inline ::google::protobuf::int32 JK_FittingRuleInfo::fittingid() const {
  return fittingid_;
}
inline void JK_FittingRuleInfo::set_fittingid(::google::protobuf::int32 value) {
  set_has_fittingid();
  fittingid_ = value;
}

// required int32 FittingType = 9;
inline bool JK_FittingRuleInfo::has_fittingtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_FittingRuleInfo::set_has_fittingtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_FittingRuleInfo::clear_has_fittingtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_FittingRuleInfo::clear_fittingtype() {
  fittingtype_ = 0;
  clear_has_fittingtype();
}
inline ::google::protobuf::int32 JK_FittingRuleInfo::fittingtype() const {
  return fittingtype_;
}
inline void JK_FittingRuleInfo::set_fittingtype(::google::protobuf::int32 value) {
  set_has_fittingtype();
  fittingtype_ = value;
}

// required int32 UseCount = 10;
inline bool JK_FittingRuleInfo::has_usecount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_FittingRuleInfo::set_has_usecount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_FittingRuleInfo::clear_has_usecount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_FittingRuleInfo::clear_usecount() {
  usecount_ = 0;
  clear_has_usecount();
}
inline ::google::protobuf::int32 JK_FittingRuleInfo::usecount() const {
  return usecount_;
}
inline void JK_FittingRuleInfo::set_usecount(::google::protobuf::int32 value) {
  set_has_usecount();
  usecount_ = value;
}

// required int64 VerCode = 11;
inline bool JK_FittingRuleInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_FittingRuleInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_FittingRuleInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_FittingRuleInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_FittingRuleInfo::vercode() const {
  return vercode_;
}
inline void JK_FittingRuleInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 12;
inline bool JK_FittingRuleInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_FittingRuleInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_FittingRuleInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_FittingRuleInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_FittingRuleInfo::factoryid() const {
  return factoryid_;
}
inline void JK_FittingRuleInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 13;
inline bool JK_FittingRuleInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_FittingRuleInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_FittingRuleInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_FittingRuleInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_FittingRuleInfo::creatorid() const {
  return creatorid_;
}
inline void JK_FittingRuleInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 14;
inline bool JK_FittingRuleInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_FittingRuleInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_FittingRuleInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_FittingRuleInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_FittingRuleInfo::updaterid() const {
  return updaterid_;
}
inline void JK_FittingRuleInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 15;
inline bool JK_FittingRuleInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_FittingRuleInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_FittingRuleInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_FittingRuleInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_FittingRuleInfo::createtime() const {
  return createtime_;
}
inline void JK_FittingRuleInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 16;
inline bool JK_FittingRuleInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_FittingRuleInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_FittingRuleInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_FittingRuleInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_FittingRuleInfo::updatetime() const {
  return updatetime_;
}
inline void JK_FittingRuleInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_FormulaConstInfo

// required int32 FactoryID = 1;
inline bool JK_FormulaConstInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_FormulaConstInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_FormulaConstInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_FormulaConstInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_FormulaConstInfo::factoryid() const {
  return factoryid_;
}
inline void JK_FormulaConstInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 2;
inline bool JK_FormulaConstInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_FormulaConstInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_FormulaConstInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_FormulaConstInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_FormulaConstInfo::vercode() const {
  return vercode_;
}
inline void JK_FormulaConstInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required string ConstCode = 3;
inline bool JK_FormulaConstInfo::has_constcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_FormulaConstInfo::set_has_constcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_FormulaConstInfo::clear_has_constcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_FormulaConstInfo::clear_constcode() {
  if (constcode_ != &::google::protobuf::internal::kEmptyString) {
    constcode_->clear();
  }
  clear_has_constcode();
}
inline const ::std::string& JK_FormulaConstInfo::constcode() const {
  return *constcode_;
}
inline void JK_FormulaConstInfo::set_constcode(const ::std::string& value) {
  set_has_constcode();
  if (constcode_ == &::google::protobuf::internal::kEmptyString) {
    constcode_ = new ::std::string;
  }
  constcode_->assign(value);
}
inline void JK_FormulaConstInfo::set_constcode(const char* value) {
  set_has_constcode();
  if (constcode_ == &::google::protobuf::internal::kEmptyString) {
    constcode_ = new ::std::string;
  }
  constcode_->assign(value);
}
inline void JK_FormulaConstInfo::set_constcode(const char* value, size_t size) {
  set_has_constcode();
  if (constcode_ == &::google::protobuf::internal::kEmptyString) {
    constcode_ = new ::std::string;
  }
  constcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FormulaConstInfo::mutable_constcode() {
  set_has_constcode();
  if (constcode_ == &::google::protobuf::internal::kEmptyString) {
    constcode_ = new ::std::string;
  }
  return constcode_;
}
inline ::std::string* JK_FormulaConstInfo::release_constcode() {
  clear_has_constcode();
  if (constcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = constcode_;
    constcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FormulaConstInfo::set_allocated_constcode(::std::string* constcode) {
  if (constcode_ != &::google::protobuf::internal::kEmptyString) {
    delete constcode_;
  }
  if (constcode) {
    set_has_constcode();
    constcode_ = constcode;
  } else {
    clear_has_constcode();
    constcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ConstText = 4;
inline bool JK_FormulaConstInfo::has_consttext() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_FormulaConstInfo::set_has_consttext() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_FormulaConstInfo::clear_has_consttext() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_FormulaConstInfo::clear_consttext() {
  if (consttext_ != &::google::protobuf::internal::kEmptyString) {
    consttext_->clear();
  }
  clear_has_consttext();
}
inline const ::std::string& JK_FormulaConstInfo::consttext() const {
  return *consttext_;
}
inline void JK_FormulaConstInfo::set_consttext(const ::std::string& value) {
  set_has_consttext();
  if (consttext_ == &::google::protobuf::internal::kEmptyString) {
    consttext_ = new ::std::string;
  }
  consttext_->assign(value);
}
inline void JK_FormulaConstInfo::set_consttext(const char* value) {
  set_has_consttext();
  if (consttext_ == &::google::protobuf::internal::kEmptyString) {
    consttext_ = new ::std::string;
  }
  consttext_->assign(value);
}
inline void JK_FormulaConstInfo::set_consttext(const char* value, size_t size) {
  set_has_consttext();
  if (consttext_ == &::google::protobuf::internal::kEmptyString) {
    consttext_ = new ::std::string;
  }
  consttext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_FormulaConstInfo::mutable_consttext() {
  set_has_consttext();
  if (consttext_ == &::google::protobuf::internal::kEmptyString) {
    consttext_ = new ::std::string;
  }
  return consttext_;
}
inline ::std::string* JK_FormulaConstInfo::release_consttext() {
  clear_has_consttext();
  if (consttext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = consttext_;
    consttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_FormulaConstInfo::set_allocated_consttext(::std::string* consttext) {
  if (consttext_ != &::google::protobuf::internal::kEmptyString) {
    delete consttext_;
  }
  if (consttext) {
    set_has_consttext();
    consttext_ = consttext;
  } else {
    clear_has_consttext();
    consttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double ConstValue = 5;
inline bool JK_FormulaConstInfo::has_constvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_FormulaConstInfo::set_has_constvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_FormulaConstInfo::clear_has_constvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_FormulaConstInfo::clear_constvalue() {
  constvalue_ = 0;
  clear_has_constvalue();
}
inline double JK_FormulaConstInfo::constvalue() const {
  return constvalue_;
}
inline void JK_FormulaConstInfo::set_constvalue(double value) {
  set_has_constvalue();
  constvalue_ = value;
}

// required int32 CreatorID = 6;
inline bool JK_FormulaConstInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_FormulaConstInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_FormulaConstInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_FormulaConstInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_FormulaConstInfo::creatorid() const {
  return creatorid_;
}
inline void JK_FormulaConstInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 7;
inline bool JK_FormulaConstInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_FormulaConstInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_FormulaConstInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_FormulaConstInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_FormulaConstInfo::updaterid() const {
  return updaterid_;
}
inline void JK_FormulaConstInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 8;
inline bool JK_FormulaConstInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_FormulaConstInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_FormulaConstInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_FormulaConstInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_FormulaConstInfo::createtime() const {
  return createtime_;
}
inline void JK_FormulaConstInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 9;
inline bool JK_FormulaConstInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_FormulaConstInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_FormulaConstInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_FormulaConstInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_FormulaConstInfo::updatetime() const {
  return updatetime_;
}
inline void JK_FormulaConstInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_GroupInfo

// required int32 GroupID = 1;
inline bool JK_GroupInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_GroupInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_GroupInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_GroupInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_GroupInfo::groupid() const {
  return groupid_;
}
inline void JK_GroupInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 ParentID = 2;
inline bool JK_GroupInfo::has_parentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_GroupInfo::set_has_parentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_GroupInfo::clear_has_parentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_GroupInfo::clear_parentid() {
  parentid_ = 0;
  clear_has_parentid();
}
inline ::google::protobuf::int32 JK_GroupInfo::parentid() const {
  return parentid_;
}
inline void JK_GroupInfo::set_parentid(::google::protobuf::int32 value) {
  set_has_parentid();
  parentid_ = value;
}

// required int32 FactoryID = 3;
inline bool JK_GroupInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_GroupInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_GroupInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_GroupInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_GroupInfo::factoryid() const {
  return factoryid_;
}
inline void JK_GroupInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required bool IsDel = 4;
inline bool JK_GroupInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_GroupInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_GroupInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_GroupInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_GroupInfo::isdel() const {
  return isdel_;
}
inline void JK_GroupInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 GTypeID = 5;
inline bool JK_GroupInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_GroupInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_GroupInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_GroupInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 JK_GroupInfo::gtypeid() const {
  return gtypeid_;
}
inline void JK_GroupInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 CreatorID = 6;
inline bool JK_GroupInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_GroupInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_GroupInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_GroupInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_GroupInfo::creatorid() const {
  return creatorid_;
}
inline void JK_GroupInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 7;
inline bool JK_GroupInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_GroupInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_GroupInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_GroupInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_GroupInfo::updaterid() const {
  return updaterid_;
}
inline void JK_GroupInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 8;
inline bool JK_GroupInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_GroupInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_GroupInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_GroupInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_GroupInfo::createtime() const {
  return createtime_;
}
inline void JK_GroupInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 9;
inline bool JK_GroupInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_GroupInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_GroupInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_GroupInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_GroupInfo::updatetime() const {
  return updatetime_;
}
inline void JK_GroupInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string GroupCode = 10;
inline bool JK_GroupInfo::has_groupcode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_GroupInfo::set_has_groupcode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_GroupInfo::clear_has_groupcode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_GroupInfo::clear_groupcode() {
  if (groupcode_ != &::google::protobuf::internal::kEmptyString) {
    groupcode_->clear();
  }
  clear_has_groupcode();
}
inline const ::std::string& JK_GroupInfo::groupcode() const {
  return *groupcode_;
}
inline void JK_GroupInfo::set_groupcode(const ::std::string& value) {
  set_has_groupcode();
  if (groupcode_ == &::google::protobuf::internal::kEmptyString) {
    groupcode_ = new ::std::string;
  }
  groupcode_->assign(value);
}
inline void JK_GroupInfo::set_groupcode(const char* value) {
  set_has_groupcode();
  if (groupcode_ == &::google::protobuf::internal::kEmptyString) {
    groupcode_ = new ::std::string;
  }
  groupcode_->assign(value);
}
inline void JK_GroupInfo::set_groupcode(const char* value, size_t size) {
  set_has_groupcode();
  if (groupcode_ == &::google::protobuf::internal::kEmptyString) {
    groupcode_ = new ::std::string;
  }
  groupcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_GroupInfo::mutable_groupcode() {
  set_has_groupcode();
  if (groupcode_ == &::google::protobuf::internal::kEmptyString) {
    groupcode_ = new ::std::string;
  }
  return groupcode_;
}
inline ::std::string* JK_GroupInfo::release_groupcode() {
  clear_has_groupcode();
  if (groupcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupcode_;
    groupcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_GroupInfo::set_allocated_groupcode(::std::string* groupcode) {
  if (groupcode_ != &::google::protobuf::internal::kEmptyString) {
    delete groupcode_;
  }
  if (groupcode) {
    set_has_groupcode();
    groupcode_ = groupcode;
  } else {
    clear_has_groupcode();
    groupcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string GroupName = 11;
inline bool JK_GroupInfo::has_groupname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_GroupInfo::set_has_groupname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_GroupInfo::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_GroupInfo::clear_groupname() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    groupname_->clear();
  }
  clear_has_groupname();
}
inline const ::std::string& JK_GroupInfo::groupname() const {
  return *groupname_;
}
inline void JK_GroupInfo::set_groupname(const ::std::string& value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void JK_GroupInfo::set_groupname(const char* value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void JK_GroupInfo::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_GroupInfo::mutable_groupname() {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  return groupname_;
}
inline ::std::string* JK_GroupInfo::release_groupname() {
  clear_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupname_;
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_GroupInfo::set_allocated_groupname(::std::string* groupname) {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (groupname) {
    set_has_groupname();
    groupname_ = groupname;
  } else {
    clear_has_groupname();
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string GroupMemo = 12;
inline bool JK_GroupInfo::has_groupmemo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_GroupInfo::set_has_groupmemo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_GroupInfo::clear_has_groupmemo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_GroupInfo::clear_groupmemo() {
  if (groupmemo_ != &::google::protobuf::internal::kEmptyString) {
    groupmemo_->clear();
  }
  clear_has_groupmemo();
}
inline const ::std::string& JK_GroupInfo::groupmemo() const {
  return *groupmemo_;
}
inline void JK_GroupInfo::set_groupmemo(const ::std::string& value) {
  set_has_groupmemo();
  if (groupmemo_ == &::google::protobuf::internal::kEmptyString) {
    groupmemo_ = new ::std::string;
  }
  groupmemo_->assign(value);
}
inline void JK_GroupInfo::set_groupmemo(const char* value) {
  set_has_groupmemo();
  if (groupmemo_ == &::google::protobuf::internal::kEmptyString) {
    groupmemo_ = new ::std::string;
  }
  groupmemo_->assign(value);
}
inline void JK_GroupInfo::set_groupmemo(const char* value, size_t size) {
  set_has_groupmemo();
  if (groupmemo_ == &::google::protobuf::internal::kEmptyString) {
    groupmemo_ = new ::std::string;
  }
  groupmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_GroupInfo::mutable_groupmemo() {
  set_has_groupmemo();
  if (groupmemo_ == &::google::protobuf::internal::kEmptyString) {
    groupmemo_ = new ::std::string;
  }
  return groupmemo_;
}
inline ::std::string* JK_GroupInfo::release_groupmemo() {
  clear_has_groupmemo();
  if (groupmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupmemo_;
    groupmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_GroupInfo::set_allocated_groupmemo(::std::string* groupmemo) {
  if (groupmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete groupmemo_;
  }
  if (groupmemo) {
    set_has_groupmemo();
    groupmemo_ = groupmemo;
  } else {
    clear_has_groupmemo();
    groupmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 13;
inline bool JK_GroupInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_GroupInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_GroupInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_GroupInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_GroupInfo::vercode() const {
  return vercode_;
}
inline void JK_GroupInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_HWFittingInfo

// required int32 HWFittingID = 1;
inline bool JK_HWFittingInfo::has_hwfittingid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_HWFittingInfo::set_has_hwfittingid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_HWFittingInfo::clear_has_hwfittingid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_HWFittingInfo::clear_hwfittingid() {
  hwfittingid_ = 0;
  clear_has_hwfittingid();
}
inline ::google::protobuf::int32 JK_HWFittingInfo::hwfittingid() const {
  return hwfittingid_;
}
inline void JK_HWFittingInfo::set_hwfittingid(::google::protobuf::int32 value) {
  set_has_hwfittingid();
  hwfittingid_ = value;
}

// required int32 FactoryID = 2;
inline bool JK_HWFittingInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_HWFittingInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_HWFittingInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_HWFittingInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_HWFittingInfo::factoryid() const {
  return factoryid_;
}
inline void JK_HWFittingInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 GroupID = 3;
inline bool JK_HWFittingInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_HWFittingInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_HWFittingInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_HWFittingInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_HWFittingInfo::groupid() const {
  return groupid_;
}
inline void JK_HWFittingInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required bool IsDel = 4;
inline bool JK_HWFittingInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_HWFittingInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_HWFittingInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_HWFittingInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_HWFittingInfo::isdel() const {
  return isdel_;
}
inline void JK_HWFittingInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsActive = 5;
inline bool JK_HWFittingInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_HWFittingInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_HWFittingInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_HWFittingInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_HWFittingInfo::isactive() const {
  return isactive_;
}
inline void JK_HWFittingInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required bool IsSplit = 6;
inline bool JK_HWFittingInfo::has_issplit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_HWFittingInfo::set_has_issplit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_HWFittingInfo::clear_has_issplit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_HWFittingInfo::clear_issplit() {
  issplit_ = false;
  clear_has_issplit();
}
inline bool JK_HWFittingInfo::issplit() const {
  return issplit_;
}
inline void JK_HWFittingInfo::set_issplit(bool value) {
  set_has_issplit();
  issplit_ = value;
}

// required int32 SupplyType = 7;
inline bool JK_HWFittingInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_HWFittingInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_HWFittingInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_HWFittingInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 JK_HWFittingInfo::supplytype() const {
  return supplytype_;
}
inline void JK_HWFittingInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 8;
inline bool JK_HWFittingInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_HWFittingInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_HWFittingInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_HWFittingInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 JK_HWFittingInfo::gtypeid() const {
  return gtypeid_;
}
inline void JK_HWFittingInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 ShowID = 9;
inline bool JK_HWFittingInfo::has_showid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_HWFittingInfo::set_has_showid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_HWFittingInfo::clear_has_showid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_HWFittingInfo::clear_showid() {
  showid_ = 0;
  clear_has_showid();
}
inline ::google::protobuf::int32 JK_HWFittingInfo::showid() const {
  return showid_;
}
inline void JK_HWFittingInfo::set_showid(::google::protobuf::int32 value) {
  set_has_showid();
  showid_ = value;
}

// required int32 ModelID = 10;
inline bool JK_HWFittingInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_HWFittingInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_HWFittingInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_HWFittingInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 JK_HWFittingInfo::modelid() const {
  return modelid_;
}
inline void JK_HWFittingInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required double XLen = 11;
inline bool JK_HWFittingInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_HWFittingInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_HWFittingInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_HWFittingInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double JK_HWFittingInfo::xlen() const {
  return xlen_;
}
inline void JK_HWFittingInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 12;
inline bool JK_HWFittingInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_HWFittingInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_HWFittingInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_HWFittingInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double JK_HWFittingInfo::ylen() const {
  return ylen_;
}
inline void JK_HWFittingInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 13;
inline bool JK_HWFittingInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_HWFittingInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_HWFittingInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_HWFittingInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double JK_HWFittingInfo::zlen() const {
  return zlen_;
}
inline void JK_HWFittingInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required int32 SettingCountRuleID = 14;
inline bool JK_HWFittingInfo::has_settingcountruleid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_HWFittingInfo::set_has_settingcountruleid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_HWFittingInfo::clear_has_settingcountruleid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_HWFittingInfo::clear_settingcountruleid() {
  settingcountruleid_ = 0;
  clear_has_settingcountruleid();
}
inline ::google::protobuf::int32 JK_HWFittingInfo::settingcountruleid() const {
  return settingcountruleid_;
}
inline void JK_HWFittingInfo::set_settingcountruleid(::google::protobuf::int32 value) {
  set_has_settingcountruleid();
  settingcountruleid_ = value;
}

// required bool IsMatchXLen = 15;
inline bool JK_HWFittingInfo::has_ismatchxlen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_HWFittingInfo::set_has_ismatchxlen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_HWFittingInfo::clear_has_ismatchxlen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_HWFittingInfo::clear_ismatchxlen() {
  ismatchxlen_ = false;
  clear_has_ismatchxlen();
}
inline bool JK_HWFittingInfo::ismatchxlen() const {
  return ismatchxlen_;
}
inline void JK_HWFittingInfo::set_ismatchxlen(bool value) {
  set_has_ismatchxlen();
  ismatchxlen_ = value;
}

// required bool IsMatchYLen = 16;
inline bool JK_HWFittingInfo::has_ismatchylen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_HWFittingInfo::set_has_ismatchylen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_HWFittingInfo::clear_has_ismatchylen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_HWFittingInfo::clear_ismatchylen() {
  ismatchylen_ = false;
  clear_has_ismatchylen();
}
inline bool JK_HWFittingInfo::ismatchylen() const {
  return ismatchylen_;
}
inline void JK_HWFittingInfo::set_ismatchylen(bool value) {
  set_has_ismatchylen();
  ismatchylen_ = value;
}

// required bool IsMatchZLen = 17;
inline bool JK_HWFittingInfo::has_ismatchzlen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_HWFittingInfo::set_has_ismatchzlen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_HWFittingInfo::clear_has_ismatchzlen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_HWFittingInfo::clear_ismatchzlen() {
  ismatchzlen_ = false;
  clear_has_ismatchzlen();
}
inline bool JK_HWFittingInfo::ismatchzlen() const {
  return ismatchzlen_;
}
inline void JK_HWFittingInfo::set_ismatchzlen(bool value) {
  set_has_ismatchzlen();
  ismatchzlen_ = value;
}

// required double EffectLen = 18;
inline bool JK_HWFittingInfo::has_effectlen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_HWFittingInfo::set_has_effectlen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_HWFittingInfo::clear_has_effectlen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_HWFittingInfo::clear_effectlen() {
  effectlen_ = 0;
  clear_has_effectlen();
}
inline double JK_HWFittingInfo::effectlen() const {
  return effectlen_;
}
inline void JK_HWFittingInfo::set_effectlen(double value) {
  set_has_effectlen();
  effectlen_ = value;
}

// required double XAdjustLen = 19;
inline bool JK_HWFittingInfo::has_xadjustlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_HWFittingInfo::set_has_xadjustlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_HWFittingInfo::clear_has_xadjustlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_HWFittingInfo::clear_xadjustlen() {
  xadjustlen_ = 0;
  clear_has_xadjustlen();
}
inline double JK_HWFittingInfo::xadjustlen() const {
  return xadjustlen_;
}
inline void JK_HWFittingInfo::set_xadjustlen(double value) {
  set_has_xadjustlen();
  xadjustlen_ = value;
}

// required bool IsEmbed = 20;
inline bool JK_HWFittingInfo::has_isembed() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_HWFittingInfo::set_has_isembed() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_HWFittingInfo::clear_has_isembed() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_HWFittingInfo::clear_isembed() {
  isembed_ = false;
  clear_has_isembed();
}
inline bool JK_HWFittingInfo::isembed() const {
  return isembed_;
}
inline void JK_HWFittingInfo::set_isembed(bool value) {
  set_has_isembed();
  isembed_ = value;
}

// required int32 InstallDirection = 21;
inline bool JK_HWFittingInfo::has_installdirection() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_HWFittingInfo::set_has_installdirection() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_HWFittingInfo::clear_has_installdirection() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_HWFittingInfo::clear_installdirection() {
  installdirection_ = 0;
  clear_has_installdirection();
}
inline ::google::protobuf::int32 JK_HWFittingInfo::installdirection() const {
  return installdirection_;
}
inline void JK_HWFittingInfo::set_installdirection(::google::protobuf::int32 value) {
  set_has_installdirection();
  installdirection_ = value;
}

// required int32 CreatorID = 22;
inline bool JK_HWFittingInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_HWFittingInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_HWFittingInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_HWFittingInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_HWFittingInfo::creatorid() const {
  return creatorid_;
}
inline void JK_HWFittingInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 23;
inline bool JK_HWFittingInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_HWFittingInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_HWFittingInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_HWFittingInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_HWFittingInfo::updaterid() const {
  return updaterid_;
}
inline void JK_HWFittingInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 24;
inline bool JK_HWFittingInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void JK_HWFittingInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00800000u;
}
inline void JK_HWFittingInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void JK_HWFittingInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_HWFittingInfo::createtime() const {
  return createtime_;
}
inline void JK_HWFittingInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 25;
inline bool JK_HWFittingInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void JK_HWFittingInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x01000000u;
}
inline void JK_HWFittingInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void JK_HWFittingInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_HWFittingInfo::updatetime() const {
  return updatetime_;
}
inline void JK_HWFittingInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string HWFittingCode = 26;
inline bool JK_HWFittingInfo::has_hwfittingcode() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void JK_HWFittingInfo::set_has_hwfittingcode() {
  _has_bits_[0] |= 0x02000000u;
}
inline void JK_HWFittingInfo::clear_has_hwfittingcode() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void JK_HWFittingInfo::clear_hwfittingcode() {
  if (hwfittingcode_ != &::google::protobuf::internal::kEmptyString) {
    hwfittingcode_->clear();
  }
  clear_has_hwfittingcode();
}
inline const ::std::string& JK_HWFittingInfo::hwfittingcode() const {
  return *hwfittingcode_;
}
inline void JK_HWFittingInfo::set_hwfittingcode(const ::std::string& value) {
  set_has_hwfittingcode();
  if (hwfittingcode_ == &::google::protobuf::internal::kEmptyString) {
    hwfittingcode_ = new ::std::string;
  }
  hwfittingcode_->assign(value);
}
inline void JK_HWFittingInfo::set_hwfittingcode(const char* value) {
  set_has_hwfittingcode();
  if (hwfittingcode_ == &::google::protobuf::internal::kEmptyString) {
    hwfittingcode_ = new ::std::string;
  }
  hwfittingcode_->assign(value);
}
inline void JK_HWFittingInfo::set_hwfittingcode(const char* value, size_t size) {
  set_has_hwfittingcode();
  if (hwfittingcode_ == &::google::protobuf::internal::kEmptyString) {
    hwfittingcode_ = new ::std::string;
  }
  hwfittingcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_HWFittingInfo::mutable_hwfittingcode() {
  set_has_hwfittingcode();
  if (hwfittingcode_ == &::google::protobuf::internal::kEmptyString) {
    hwfittingcode_ = new ::std::string;
  }
  return hwfittingcode_;
}
inline ::std::string* JK_HWFittingInfo::release_hwfittingcode() {
  clear_has_hwfittingcode();
  if (hwfittingcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hwfittingcode_;
    hwfittingcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_HWFittingInfo::set_allocated_hwfittingcode(::std::string* hwfittingcode) {
  if (hwfittingcode_ != &::google::protobuf::internal::kEmptyString) {
    delete hwfittingcode_;
  }
  if (hwfittingcode) {
    set_has_hwfittingcode();
    hwfittingcode_ = hwfittingcode;
  } else {
    clear_has_hwfittingcode();
    hwfittingcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string HWFittingName = 27;
inline bool JK_HWFittingInfo::has_hwfittingname() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void JK_HWFittingInfo::set_has_hwfittingname() {
  _has_bits_[0] |= 0x04000000u;
}
inline void JK_HWFittingInfo::clear_has_hwfittingname() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void JK_HWFittingInfo::clear_hwfittingname() {
  if (hwfittingname_ != &::google::protobuf::internal::kEmptyString) {
    hwfittingname_->clear();
  }
  clear_has_hwfittingname();
}
inline const ::std::string& JK_HWFittingInfo::hwfittingname() const {
  return *hwfittingname_;
}
inline void JK_HWFittingInfo::set_hwfittingname(const ::std::string& value) {
  set_has_hwfittingname();
  if (hwfittingname_ == &::google::protobuf::internal::kEmptyString) {
    hwfittingname_ = new ::std::string;
  }
  hwfittingname_->assign(value);
}
inline void JK_HWFittingInfo::set_hwfittingname(const char* value) {
  set_has_hwfittingname();
  if (hwfittingname_ == &::google::protobuf::internal::kEmptyString) {
    hwfittingname_ = new ::std::string;
  }
  hwfittingname_->assign(value);
}
inline void JK_HWFittingInfo::set_hwfittingname(const char* value, size_t size) {
  set_has_hwfittingname();
  if (hwfittingname_ == &::google::protobuf::internal::kEmptyString) {
    hwfittingname_ = new ::std::string;
  }
  hwfittingname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_HWFittingInfo::mutable_hwfittingname() {
  set_has_hwfittingname();
  if (hwfittingname_ == &::google::protobuf::internal::kEmptyString) {
    hwfittingname_ = new ::std::string;
  }
  return hwfittingname_;
}
inline ::std::string* JK_HWFittingInfo::release_hwfittingname() {
  clear_has_hwfittingname();
  if (hwfittingname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hwfittingname_;
    hwfittingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_HWFittingInfo::set_allocated_hwfittingname(::std::string* hwfittingname) {
  if (hwfittingname_ != &::google::protobuf::internal::kEmptyString) {
    delete hwfittingname_;
  }
  if (hwfittingname) {
    set_has_hwfittingname();
    hwfittingname_ = hwfittingname;
  } else {
    clear_has_hwfittingname();
    hwfittingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string HWFittingMemo = 28;
inline bool JK_HWFittingInfo::has_hwfittingmemo() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void JK_HWFittingInfo::set_has_hwfittingmemo() {
  _has_bits_[0] |= 0x08000000u;
}
inline void JK_HWFittingInfo::clear_has_hwfittingmemo() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void JK_HWFittingInfo::clear_hwfittingmemo() {
  if (hwfittingmemo_ != &::google::protobuf::internal::kEmptyString) {
    hwfittingmemo_->clear();
  }
  clear_has_hwfittingmemo();
}
inline const ::std::string& JK_HWFittingInfo::hwfittingmemo() const {
  return *hwfittingmemo_;
}
inline void JK_HWFittingInfo::set_hwfittingmemo(const ::std::string& value) {
  set_has_hwfittingmemo();
  if (hwfittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    hwfittingmemo_ = new ::std::string;
  }
  hwfittingmemo_->assign(value);
}
inline void JK_HWFittingInfo::set_hwfittingmemo(const char* value) {
  set_has_hwfittingmemo();
  if (hwfittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    hwfittingmemo_ = new ::std::string;
  }
  hwfittingmemo_->assign(value);
}
inline void JK_HWFittingInfo::set_hwfittingmemo(const char* value, size_t size) {
  set_has_hwfittingmemo();
  if (hwfittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    hwfittingmemo_ = new ::std::string;
  }
  hwfittingmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_HWFittingInfo::mutable_hwfittingmemo() {
  set_has_hwfittingmemo();
  if (hwfittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    hwfittingmemo_ = new ::std::string;
  }
  return hwfittingmemo_;
}
inline ::std::string* JK_HWFittingInfo::release_hwfittingmemo() {
  clear_has_hwfittingmemo();
  if (hwfittingmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hwfittingmemo_;
    hwfittingmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_HWFittingInfo::set_allocated_hwfittingmemo(::std::string* hwfittingmemo) {
  if (hwfittingmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete hwfittingmemo_;
  }
  if (hwfittingmemo) {
    set_has_hwfittingmemo();
    hwfittingmemo_ = hwfittingmemo;
  } else {
    clear_has_hwfittingmemo();
    hwfittingmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 29;
inline bool JK_HWFittingInfo::has_vercode() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void JK_HWFittingInfo::set_has_vercode() {
  _has_bits_[0] |= 0x10000000u;
}
inline void JK_HWFittingInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void JK_HWFittingInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_HWFittingInfo::vercode() const {
  return vercode_;
}
inline void JK_HWFittingInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_HoleRuleInfo

// required int32 HoleID = 1;
inline bool JK_HoleRuleInfo::has_holeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_HoleRuleInfo::set_has_holeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_HoleRuleInfo::clear_has_holeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_HoleRuleInfo::clear_holeid() {
  holeid_ = 0;
  clear_has_holeid();
}
inline ::google::protobuf::int32 JK_HoleRuleInfo::holeid() const {
  return holeid_;
}
inline void JK_HoleRuleInfo::set_holeid(::google::protobuf::int32 value) {
  set_has_holeid();
  holeid_ = value;
}

// required int32 FNFittingID = 2;
inline bool JK_HoleRuleInfo::has_fnfittingid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_HoleRuleInfo::set_has_fnfittingid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_HoleRuleInfo::clear_has_fnfittingid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_HoleRuleInfo::clear_fnfittingid() {
  fnfittingid_ = 0;
  clear_has_fnfittingid();
}
inline ::google::protobuf::int32 JK_HoleRuleInfo::fnfittingid() const {
  return fnfittingid_;
}
inline void JK_HoleRuleInfo::set_fnfittingid(::google::protobuf::int32 value) {
  set_has_fnfittingid();
  fnfittingid_ = value;
}

// required int32 HoleTypeID = 3;
inline bool JK_HoleRuleInfo::has_holetypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_HoleRuleInfo::set_has_holetypeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_HoleRuleInfo::clear_has_holetypeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_HoleRuleInfo::clear_holetypeid() {
  holetypeid_ = 0;
  clear_has_holetypeid();
}
inline ::google::protobuf::int32 JK_HoleRuleInfo::holetypeid() const {
  return holetypeid_;
}
inline void JK_HoleRuleInfo::set_holetypeid(::google::protobuf::int32 value) {
  set_has_holetypeid();
  holetypeid_ = value;
}

// required double XLen = 4;
inline bool JK_HoleRuleInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_HoleRuleInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_HoleRuleInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_HoleRuleInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double JK_HoleRuleInfo::xlen() const {
  return xlen_;
}
inline void JK_HoleRuleInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 5;
inline bool JK_HoleRuleInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_HoleRuleInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_HoleRuleInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_HoleRuleInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double JK_HoleRuleInfo::ylen() const {
  return ylen_;
}
inline void JK_HoleRuleInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double OverHeight = 6;
inline bool JK_HoleRuleInfo::has_overheight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_HoleRuleInfo::set_has_overheight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_HoleRuleInfo::clear_has_overheight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_HoleRuleInfo::clear_overheight() {
  overheight_ = 0;
  clear_has_overheight();
}
inline double JK_HoleRuleInfo::overheight() const {
  return overheight_;
}
inline void JK_HoleRuleInfo::set_overheight(double value) {
  set_has_overheight();
  overheight_ = value;
}

// required int32 HolePicID = 7;
inline bool JK_HoleRuleInfo::has_holepicid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_HoleRuleInfo::set_has_holepicid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_HoleRuleInfo::clear_has_holepicid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_HoleRuleInfo::clear_holepicid() {
  holepicid_ = 0;
  clear_has_holepicid();
}
inline ::google::protobuf::int32 JK_HoleRuleInfo::holepicid() const {
  return holepicid_;
}
inline void JK_HoleRuleInfo::set_holepicid(::google::protobuf::int32 value) {
  set_has_holepicid();
  holepicid_ = value;
}

// required double MinXDistance = 8;
inline bool JK_HoleRuleInfo::has_minxdistance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_HoleRuleInfo::set_has_minxdistance() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_HoleRuleInfo::clear_has_minxdistance() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_HoleRuleInfo::clear_minxdistance() {
  minxdistance_ = 0;
  clear_has_minxdistance();
}
inline double JK_HoleRuleInfo::minxdistance() const {
  return minxdistance_;
}
inline void JK_HoleRuleInfo::set_minxdistance(double value) {
  set_has_minxdistance();
  minxdistance_ = value;
}

// required double MinZDistance = 9;
inline bool JK_HoleRuleInfo::has_minzdistance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_HoleRuleInfo::set_has_minzdistance() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_HoleRuleInfo::clear_has_minzdistance() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_HoleRuleInfo::clear_minzdistance() {
  minzdistance_ = 0;
  clear_has_minzdistance();
}
inline double JK_HoleRuleInfo::minzdistance() const {
  return minzdistance_;
}
inline void JK_HoleRuleInfo::set_minzdistance(double value) {
  set_has_minzdistance();
  minzdistance_ = value;
}

// required int64 VerCode = 10;
inline bool JK_HoleRuleInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_HoleRuleInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_HoleRuleInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_HoleRuleInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_HoleRuleInfo::vercode() const {
  return vercode_;
}
inline void JK_HoleRuleInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 11;
inline bool JK_HoleRuleInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_HoleRuleInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_HoleRuleInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_HoleRuleInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_HoleRuleInfo::factoryid() const {
  return factoryid_;
}
inline void JK_HoleRuleInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 12;
inline bool JK_HoleRuleInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_HoleRuleInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_HoleRuleInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_HoleRuleInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_HoleRuleInfo::creatorid() const {
  return creatorid_;
}
inline void JK_HoleRuleInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 13;
inline bool JK_HoleRuleInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_HoleRuleInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_HoleRuleInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_HoleRuleInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_HoleRuleInfo::updaterid() const {
  return updaterid_;
}
inline void JK_HoleRuleInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 14;
inline bool JK_HoleRuleInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_HoleRuleInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_HoleRuleInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_HoleRuleInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_HoleRuleInfo::createtime() const {
  return createtime_;
}
inline void JK_HoleRuleInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 15;
inline bool JK_HoleRuleInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_HoleRuleInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_HoleRuleInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_HoleRuleInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_HoleRuleInfo::updatetime() const {
  return updatetime_;
}
inline void JK_HoleRuleInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_MaterialInfo

// required int32 MaterialID = 1;
inline bool JK_MaterialInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_MaterialInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_MaterialInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_MaterialInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 JK_MaterialInfo::materialid() const {
  return materialid_;
}
inline void JK_MaterialInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required int32 FactoryID = 2;
inline bool JK_MaterialInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_MaterialInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_MaterialInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_MaterialInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_MaterialInfo::factoryid() const {
  return factoryid_;
}
inline void JK_MaterialInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 GroupID = 3;
inline bool JK_MaterialInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_MaterialInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_MaterialInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_MaterialInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_MaterialInfo::groupid() const {
  return groupid_;
}
inline void JK_MaterialInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required bool IsDel = 4;
inline bool JK_MaterialInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_MaterialInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_MaterialInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_MaterialInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_MaterialInfo::isdel() const {
  return isdel_;
}
inline void JK_MaterialInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsActive = 5;
inline bool JK_MaterialInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_MaterialInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_MaterialInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_MaterialInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_MaterialInfo::isactive() const {
  return isactive_;
}
inline void JK_MaterialInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required bool IsSplit = 6;
inline bool JK_MaterialInfo::has_issplit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_MaterialInfo::set_has_issplit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_MaterialInfo::clear_has_issplit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_MaterialInfo::clear_issplit() {
  issplit_ = false;
  clear_has_issplit();
}
inline bool JK_MaterialInfo::issplit() const {
  return issplit_;
}
inline void JK_MaterialInfo::set_issplit(bool value) {
  set_has_issplit();
  issplit_ = value;
}

// required int32 SupplyType = 7;
inline bool JK_MaterialInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_MaterialInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_MaterialInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_MaterialInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 JK_MaterialInfo::supplytype() const {
  return supplytype_;
}
inline void JK_MaterialInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 8;
inline bool JK_MaterialInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_MaterialInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_MaterialInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_MaterialInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 JK_MaterialInfo::gtypeid() const {
  return gtypeid_;
}
inline void JK_MaterialInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 ShowID = 9;
inline bool JK_MaterialInfo::has_showid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_MaterialInfo::set_has_showid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_MaterialInfo::clear_has_showid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_MaterialInfo::clear_showid() {
  showid_ = 0;
  clear_has_showid();
}
inline ::google::protobuf::int32 JK_MaterialInfo::showid() const {
  return showid_;
}
inline void JK_MaterialInfo::set_showid(::google::protobuf::int32 value) {
  set_has_showid();
  showid_ = value;
}

// required int32 ModelID = 10;
inline bool JK_MaterialInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_MaterialInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_MaterialInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_MaterialInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 JK_MaterialInfo::modelid() const {
  return modelid_;
}
inline void JK_MaterialInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required double XLen = 11;
inline bool JK_MaterialInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_MaterialInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_MaterialInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_MaterialInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double JK_MaterialInfo::xlen() const {
  return xlen_;
}
inline void JK_MaterialInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 12;
inline bool JK_MaterialInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_MaterialInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_MaterialInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_MaterialInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double JK_MaterialInfo::ylen() const {
  return ylen_;
}
inline void JK_MaterialInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 13;
inline bool JK_MaterialInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_MaterialInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_MaterialInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_MaterialInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double JK_MaterialInfo::zlen() const {
  return zlen_;
}
inline void JK_MaterialInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required bool IsMatchXLen = 14;
inline bool JK_MaterialInfo::has_ismatchxlen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_MaterialInfo::set_has_ismatchxlen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_MaterialInfo::clear_has_ismatchxlen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_MaterialInfo::clear_ismatchxlen() {
  ismatchxlen_ = false;
  clear_has_ismatchxlen();
}
inline bool JK_MaterialInfo::ismatchxlen() const {
  return ismatchxlen_;
}
inline void JK_MaterialInfo::set_ismatchxlen(bool value) {
  set_has_ismatchxlen();
  ismatchxlen_ = value;
}

// required bool IsMatchYLen = 15;
inline bool JK_MaterialInfo::has_ismatchylen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_MaterialInfo::set_has_ismatchylen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_MaterialInfo::clear_has_ismatchylen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_MaterialInfo::clear_ismatchylen() {
  ismatchylen_ = false;
  clear_has_ismatchylen();
}
inline bool JK_MaterialInfo::ismatchylen() const {
  return ismatchylen_;
}
inline void JK_MaterialInfo::set_ismatchylen(bool value) {
  set_has_ismatchylen();
  ismatchylen_ = value;
}

// required bool IsMatchZLen = 16;
inline bool JK_MaterialInfo::has_ismatchzlen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_MaterialInfo::set_has_ismatchzlen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_MaterialInfo::clear_has_ismatchzlen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_MaterialInfo::clear_ismatchzlen() {
  ismatchzlen_ = false;
  clear_has_ismatchzlen();
}
inline bool JK_MaterialInfo::ismatchzlen() const {
  return ismatchzlen_;
}
inline void JK_MaterialInfo::set_ismatchzlen(bool value) {
  set_has_ismatchzlen();
  ismatchzlen_ = value;
}

// required int32 SkinID = 17;
inline bool JK_MaterialInfo::has_skinid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_MaterialInfo::set_has_skinid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_MaterialInfo::clear_has_skinid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_MaterialInfo::clear_skinid() {
  skinid_ = 0;
  clear_has_skinid();
}
inline ::google::protobuf::int32 JK_MaterialInfo::skinid() const {
  return skinid_;
}
inline void JK_MaterialInfo::set_skinid(::google::protobuf::int32 value) {
  set_has_skinid();
  skinid_ = value;
}

// required int32 SkinDirection = 18;
inline bool JK_MaterialInfo::has_skindirection() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_MaterialInfo::set_has_skindirection() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_MaterialInfo::clear_has_skindirection() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_MaterialInfo::clear_skindirection() {
  skindirection_ = 0;
  clear_has_skindirection();
}
inline ::google::protobuf::int32 JK_MaterialInfo::skindirection() const {
  return skindirection_;
}
inline void JK_MaterialInfo::set_skindirection(::google::protobuf::int32 value) {
  set_has_skindirection();
  skindirection_ = value;
}

// required int32 TransCode = 19;
inline bool JK_MaterialInfo::has_transcode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_MaterialInfo::set_has_transcode() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_MaterialInfo::clear_has_transcode() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_MaterialInfo::clear_transcode() {
  transcode_ = 0;
  clear_has_transcode();
}
inline ::google::protobuf::int32 JK_MaterialInfo::transcode() const {
  return transcode_;
}
inline void JK_MaterialInfo::set_transcode(::google::protobuf::int32 value) {
  set_has_transcode();
  transcode_ = value;
}

// required int32 CreatorID = 20;
inline bool JK_MaterialInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_MaterialInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_MaterialInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_MaterialInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_MaterialInfo::creatorid() const {
  return creatorid_;
}
inline void JK_MaterialInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 21;
inline bool JK_MaterialInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_MaterialInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_MaterialInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_MaterialInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_MaterialInfo::updaterid() const {
  return updaterid_;
}
inline void JK_MaterialInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 22;
inline bool JK_MaterialInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_MaterialInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_MaterialInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_MaterialInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_MaterialInfo::createtime() const {
  return createtime_;
}
inline void JK_MaterialInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 23;
inline bool JK_MaterialInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_MaterialInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_MaterialInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_MaterialInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_MaterialInfo::updatetime() const {
  return updatetime_;
}
inline void JK_MaterialInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string MaterialCode = 24;
inline bool JK_MaterialInfo::has_materialcode() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void JK_MaterialInfo::set_has_materialcode() {
  _has_bits_[0] |= 0x00800000u;
}
inline void JK_MaterialInfo::clear_has_materialcode() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void JK_MaterialInfo::clear_materialcode() {
  if (materialcode_ != &::google::protobuf::internal::kEmptyString) {
    materialcode_->clear();
  }
  clear_has_materialcode();
}
inline const ::std::string& JK_MaterialInfo::materialcode() const {
  return *materialcode_;
}
inline void JK_MaterialInfo::set_materialcode(const ::std::string& value) {
  set_has_materialcode();
  if (materialcode_ == &::google::protobuf::internal::kEmptyString) {
    materialcode_ = new ::std::string;
  }
  materialcode_->assign(value);
}
inline void JK_MaterialInfo::set_materialcode(const char* value) {
  set_has_materialcode();
  if (materialcode_ == &::google::protobuf::internal::kEmptyString) {
    materialcode_ = new ::std::string;
  }
  materialcode_->assign(value);
}
inline void JK_MaterialInfo::set_materialcode(const char* value, size_t size) {
  set_has_materialcode();
  if (materialcode_ == &::google::protobuf::internal::kEmptyString) {
    materialcode_ = new ::std::string;
  }
  materialcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_MaterialInfo::mutable_materialcode() {
  set_has_materialcode();
  if (materialcode_ == &::google::protobuf::internal::kEmptyString) {
    materialcode_ = new ::std::string;
  }
  return materialcode_;
}
inline ::std::string* JK_MaterialInfo::release_materialcode() {
  clear_has_materialcode();
  if (materialcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = materialcode_;
    materialcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_MaterialInfo::set_allocated_materialcode(::std::string* materialcode) {
  if (materialcode_ != &::google::protobuf::internal::kEmptyString) {
    delete materialcode_;
  }
  if (materialcode) {
    set_has_materialcode();
    materialcode_ = materialcode;
  } else {
    clear_has_materialcode();
    materialcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string MaterialName = 25;
inline bool JK_MaterialInfo::has_materialname() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void JK_MaterialInfo::set_has_materialname() {
  _has_bits_[0] |= 0x01000000u;
}
inline void JK_MaterialInfo::clear_has_materialname() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void JK_MaterialInfo::clear_materialname() {
  if (materialname_ != &::google::protobuf::internal::kEmptyString) {
    materialname_->clear();
  }
  clear_has_materialname();
}
inline const ::std::string& JK_MaterialInfo::materialname() const {
  return *materialname_;
}
inline void JK_MaterialInfo::set_materialname(const ::std::string& value) {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    materialname_ = new ::std::string;
  }
  materialname_->assign(value);
}
inline void JK_MaterialInfo::set_materialname(const char* value) {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    materialname_ = new ::std::string;
  }
  materialname_->assign(value);
}
inline void JK_MaterialInfo::set_materialname(const char* value, size_t size) {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    materialname_ = new ::std::string;
  }
  materialname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_MaterialInfo::mutable_materialname() {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    materialname_ = new ::std::string;
  }
  return materialname_;
}
inline ::std::string* JK_MaterialInfo::release_materialname() {
  clear_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = materialname_;
    materialname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_MaterialInfo::set_allocated_materialname(::std::string* materialname) {
  if (materialname_ != &::google::protobuf::internal::kEmptyString) {
    delete materialname_;
  }
  if (materialname) {
    set_has_materialname();
    materialname_ = materialname;
  } else {
    clear_has_materialname();
    materialname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string MaterialMemo = 26;
inline bool JK_MaterialInfo::has_materialmemo() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void JK_MaterialInfo::set_has_materialmemo() {
  _has_bits_[0] |= 0x02000000u;
}
inline void JK_MaterialInfo::clear_has_materialmemo() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void JK_MaterialInfo::clear_materialmemo() {
  if (materialmemo_ != &::google::protobuf::internal::kEmptyString) {
    materialmemo_->clear();
  }
  clear_has_materialmemo();
}
inline const ::std::string& JK_MaterialInfo::materialmemo() const {
  return *materialmemo_;
}
inline void JK_MaterialInfo::set_materialmemo(const ::std::string& value) {
  set_has_materialmemo();
  if (materialmemo_ == &::google::protobuf::internal::kEmptyString) {
    materialmemo_ = new ::std::string;
  }
  materialmemo_->assign(value);
}
inline void JK_MaterialInfo::set_materialmemo(const char* value) {
  set_has_materialmemo();
  if (materialmemo_ == &::google::protobuf::internal::kEmptyString) {
    materialmemo_ = new ::std::string;
  }
  materialmemo_->assign(value);
}
inline void JK_MaterialInfo::set_materialmemo(const char* value, size_t size) {
  set_has_materialmemo();
  if (materialmemo_ == &::google::protobuf::internal::kEmptyString) {
    materialmemo_ = new ::std::string;
  }
  materialmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_MaterialInfo::mutable_materialmemo() {
  set_has_materialmemo();
  if (materialmemo_ == &::google::protobuf::internal::kEmptyString) {
    materialmemo_ = new ::std::string;
  }
  return materialmemo_;
}
inline ::std::string* JK_MaterialInfo::release_materialmemo() {
  clear_has_materialmemo();
  if (materialmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = materialmemo_;
    materialmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_MaterialInfo::set_allocated_materialmemo(::std::string* materialmemo) {
  if (materialmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete materialmemo_;
  }
  if (materialmemo) {
    set_has_materialmemo();
    materialmemo_ = materialmemo;
  } else {
    clear_has_materialmemo();
    materialmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 27;
inline bool JK_MaterialInfo::has_vercode() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void JK_MaterialInfo::set_has_vercode() {
  _has_bits_[0] |= 0x04000000u;
}
inline void JK_MaterialInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void JK_MaterialInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_MaterialInfo::vercode() const {
  return vercode_;
}
inline void JK_MaterialInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_MaterialSealRuleMapInfo

// required int32 MaterialID = 1;
inline bool JK_MaterialSealRuleMapInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_MaterialSealRuleMapInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_MaterialSealRuleMapInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_MaterialSealRuleMapInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 JK_MaterialSealRuleMapInfo::materialid() const {
  return materialid_;
}
inline void JK_MaterialSealRuleMapInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required int32 SealRuleID = 2;
inline bool JK_MaterialSealRuleMapInfo::has_sealruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_MaterialSealRuleMapInfo::set_has_sealruleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_MaterialSealRuleMapInfo::clear_has_sealruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_MaterialSealRuleMapInfo::clear_sealruleid() {
  sealruleid_ = 0;
  clear_has_sealruleid();
}
inline ::google::protobuf::int32 JK_MaterialSealRuleMapInfo::sealruleid() const {
  return sealruleid_;
}
inline void JK_MaterialSealRuleMapInfo::set_sealruleid(::google::protobuf::int32 value) {
  set_has_sealruleid();
  sealruleid_ = value;
}

// required bool IsCabDef = 3;
inline bool JK_MaterialSealRuleMapInfo::has_iscabdef() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_MaterialSealRuleMapInfo::set_has_iscabdef() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_MaterialSealRuleMapInfo::clear_has_iscabdef() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_MaterialSealRuleMapInfo::clear_iscabdef() {
  iscabdef_ = false;
  clear_has_iscabdef();
}
inline bool JK_MaterialSealRuleMapInfo::iscabdef() const {
  return iscabdef_;
}
inline void JK_MaterialSealRuleMapInfo::set_iscabdef(bool value) {
  set_has_iscabdef();
  iscabdef_ = value;
}

// required bool IsDoorDef = 4;
inline bool JK_MaterialSealRuleMapInfo::has_isdoordef() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_MaterialSealRuleMapInfo::set_has_isdoordef() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_MaterialSealRuleMapInfo::clear_has_isdoordef() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_MaterialSealRuleMapInfo::clear_isdoordef() {
  isdoordef_ = false;
  clear_has_isdoordef();
}
inline bool JK_MaterialSealRuleMapInfo::isdoordef() const {
  return isdoordef_;
}
inline void JK_MaterialSealRuleMapInfo::set_isdoordef(bool value) {
  set_has_isdoordef();
  isdoordef_ = value;
}

// required int64 VerCode = 5;
inline bool JK_MaterialSealRuleMapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_MaterialSealRuleMapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_MaterialSealRuleMapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_MaterialSealRuleMapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_MaterialSealRuleMapInfo::vercode() const {
  return vercode_;
}
inline void JK_MaterialSealRuleMapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 6;
inline bool JK_MaterialSealRuleMapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_MaterialSealRuleMapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_MaterialSealRuleMapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_MaterialSealRuleMapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_MaterialSealRuleMapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_MaterialSealRuleMapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_ModelInfo

// required int32 ModelID = 1;
inline bool JK_ModelInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_ModelInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_ModelInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_ModelInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 JK_ModelInfo::modelid() const {
  return modelid_;
}
inline void JK_ModelInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required int32 GroupID = 2;
inline bool JK_ModelInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_ModelInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_ModelInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_ModelInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_ModelInfo::groupid() const {
  return groupid_;
}
inline void JK_ModelInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 FactoryID = 3;
inline bool JK_ModelInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_ModelInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_ModelInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_ModelInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_ModelInfo::factoryid() const {
  return factoryid_;
}
inline void JK_ModelInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 GTypeID = 4;
inline bool JK_ModelInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_ModelInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_ModelInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_ModelInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 JK_ModelInfo::gtypeid() const {
  return gtypeid_;
}
inline void JK_ModelInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required double ArcX = 5;
inline bool JK_ModelInfo::has_arcx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_ModelInfo::set_has_arcx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_ModelInfo::clear_has_arcx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_ModelInfo::clear_arcx() {
  arcx_ = 0;
  clear_has_arcx();
}
inline double JK_ModelInfo::arcx() const {
  return arcx_;
}
inline void JK_ModelInfo::set_arcx(double value) {
  set_has_arcx();
  arcx_ = value;
}

// required double ArcY = 6;
inline bool JK_ModelInfo::has_arcy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_ModelInfo::set_has_arcy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_ModelInfo::clear_has_arcy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_ModelInfo::clear_arcy() {
  arcy_ = 0;
  clear_has_arcy();
}
inline double JK_ModelInfo::arcy() const {
  return arcy_;
}
inline void JK_ModelInfo::set_arcy(double value) {
  set_has_arcy();
  arcy_ = value;
}

// required double ArcZ = 7;
inline bool JK_ModelInfo::has_arcz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_ModelInfo::set_has_arcz() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_ModelInfo::clear_has_arcz() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_ModelInfo::clear_arcz() {
  arcz_ = 0;
  clear_has_arcz();
}
inline double JK_ModelInfo::arcz() const {
  return arcz_;
}
inline void JK_ModelInfo::set_arcz(double value) {
  set_has_arcz();
  arcz_ = value;
}

// required bool IsDel = 8;
inline bool JK_ModelInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_ModelInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_ModelInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_ModelInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_ModelInfo::isdel() const {
  return isdel_;
}
inline void JK_ModelInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 CreatorID = 9;
inline bool JK_ModelInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_ModelInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_ModelInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_ModelInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_ModelInfo::creatorid() const {
  return creatorid_;
}
inline void JK_ModelInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 10;
inline bool JK_ModelInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_ModelInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_ModelInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_ModelInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_ModelInfo::updaterid() const {
  return updaterid_;
}
inline void JK_ModelInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 11;
inline bool JK_ModelInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_ModelInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_ModelInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_ModelInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_ModelInfo::createtime() const {
  return createtime_;
}
inline void JK_ModelInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 12;
inline bool JK_ModelInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_ModelInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_ModelInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_ModelInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_ModelInfo::updatetime() const {
  return updatetime_;
}
inline void JK_ModelInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string ModelCode = 13;
inline bool JK_ModelInfo::has_modelcode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_ModelInfo::set_has_modelcode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_ModelInfo::clear_has_modelcode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_ModelInfo::clear_modelcode() {
  if (modelcode_ != &::google::protobuf::internal::kEmptyString) {
    modelcode_->clear();
  }
  clear_has_modelcode();
}
inline const ::std::string& JK_ModelInfo::modelcode() const {
  return *modelcode_;
}
inline void JK_ModelInfo::set_modelcode(const ::std::string& value) {
  set_has_modelcode();
  if (modelcode_ == &::google::protobuf::internal::kEmptyString) {
    modelcode_ = new ::std::string;
  }
  modelcode_->assign(value);
}
inline void JK_ModelInfo::set_modelcode(const char* value) {
  set_has_modelcode();
  if (modelcode_ == &::google::protobuf::internal::kEmptyString) {
    modelcode_ = new ::std::string;
  }
  modelcode_->assign(value);
}
inline void JK_ModelInfo::set_modelcode(const char* value, size_t size) {
  set_has_modelcode();
  if (modelcode_ == &::google::protobuf::internal::kEmptyString) {
    modelcode_ = new ::std::string;
  }
  modelcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ModelInfo::mutable_modelcode() {
  set_has_modelcode();
  if (modelcode_ == &::google::protobuf::internal::kEmptyString) {
    modelcode_ = new ::std::string;
  }
  return modelcode_;
}
inline ::std::string* JK_ModelInfo::release_modelcode() {
  clear_has_modelcode();
  if (modelcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modelcode_;
    modelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ModelInfo::set_allocated_modelcode(::std::string* modelcode) {
  if (modelcode_ != &::google::protobuf::internal::kEmptyString) {
    delete modelcode_;
  }
  if (modelcode) {
    set_has_modelcode();
    modelcode_ = modelcode;
  } else {
    clear_has_modelcode();
    modelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ModelName = 14;
inline bool JK_ModelInfo::has_modelname() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_ModelInfo::set_has_modelname() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_ModelInfo::clear_has_modelname() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_ModelInfo::clear_modelname() {
  if (modelname_ != &::google::protobuf::internal::kEmptyString) {
    modelname_->clear();
  }
  clear_has_modelname();
}
inline const ::std::string& JK_ModelInfo::modelname() const {
  return *modelname_;
}
inline void JK_ModelInfo::set_modelname(const ::std::string& value) {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    modelname_ = new ::std::string;
  }
  modelname_->assign(value);
}
inline void JK_ModelInfo::set_modelname(const char* value) {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    modelname_ = new ::std::string;
  }
  modelname_->assign(value);
}
inline void JK_ModelInfo::set_modelname(const char* value, size_t size) {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    modelname_ = new ::std::string;
  }
  modelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ModelInfo::mutable_modelname() {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    modelname_ = new ::std::string;
  }
  return modelname_;
}
inline ::std::string* JK_ModelInfo::release_modelname() {
  clear_has_modelname();
  if (modelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modelname_;
    modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ModelInfo::set_allocated_modelname(::std::string* modelname) {
  if (modelname_ != &::google::protobuf::internal::kEmptyString) {
    delete modelname_;
  }
  if (modelname) {
    set_has_modelname();
    modelname_ = modelname;
  } else {
    clear_has_modelname();
    modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string RelativePath = 15;
inline bool JK_ModelInfo::has_relativepath() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_ModelInfo::set_has_relativepath() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_ModelInfo::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_ModelInfo::clear_relativepath() {
  if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
    relativepath_->clear();
  }
  clear_has_relativepath();
}
inline const ::std::string& JK_ModelInfo::relativepath() const {
  return *relativepath_;
}
inline void JK_ModelInfo::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
}
inline void JK_ModelInfo::set_relativepath(const char* value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
}
inline void JK_ModelInfo::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ModelInfo::mutable_relativepath() {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  return relativepath_;
}
inline ::std::string* JK_ModelInfo::release_relativepath() {
  clear_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = relativepath_;
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ModelInfo::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
    delete relativepath_;
  }
  if (relativepath) {
    set_has_relativepath();
    relativepath_ = relativepath;
  } else {
    clear_has_relativepath();
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ModelMemo = 16;
inline bool JK_ModelInfo::has_modelmemo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_ModelInfo::set_has_modelmemo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_ModelInfo::clear_has_modelmemo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_ModelInfo::clear_modelmemo() {
  if (modelmemo_ != &::google::protobuf::internal::kEmptyString) {
    modelmemo_->clear();
  }
  clear_has_modelmemo();
}
inline const ::std::string& JK_ModelInfo::modelmemo() const {
  return *modelmemo_;
}
inline void JK_ModelInfo::set_modelmemo(const ::std::string& value) {
  set_has_modelmemo();
  if (modelmemo_ == &::google::protobuf::internal::kEmptyString) {
    modelmemo_ = new ::std::string;
  }
  modelmemo_->assign(value);
}
inline void JK_ModelInfo::set_modelmemo(const char* value) {
  set_has_modelmemo();
  if (modelmemo_ == &::google::protobuf::internal::kEmptyString) {
    modelmemo_ = new ::std::string;
  }
  modelmemo_->assign(value);
}
inline void JK_ModelInfo::set_modelmemo(const char* value, size_t size) {
  set_has_modelmemo();
  if (modelmemo_ == &::google::protobuf::internal::kEmptyString) {
    modelmemo_ = new ::std::string;
  }
  modelmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ModelInfo::mutable_modelmemo() {
  set_has_modelmemo();
  if (modelmemo_ == &::google::protobuf::internal::kEmptyString) {
    modelmemo_ = new ::std::string;
  }
  return modelmemo_;
}
inline ::std::string* JK_ModelInfo::release_modelmemo() {
  clear_has_modelmemo();
  if (modelmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modelmemo_;
    modelmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ModelInfo::set_allocated_modelmemo(::std::string* modelmemo) {
  if (modelmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete modelmemo_;
  }
  if (modelmemo) {
    set_has_modelmemo();
    modelmemo_ = modelmemo;
  } else {
    clear_has_modelmemo();
    modelmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string HASHCode = 17;
inline bool JK_ModelInfo::has_hashcode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_ModelInfo::set_has_hashcode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_ModelInfo::clear_has_hashcode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_ModelInfo::clear_hashcode() {
  if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
    hashcode_->clear();
  }
  clear_has_hashcode();
}
inline const ::std::string& JK_ModelInfo::hashcode() const {
  return *hashcode_;
}
inline void JK_ModelInfo::set_hashcode(const ::std::string& value) {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  hashcode_->assign(value);
}
inline void JK_ModelInfo::set_hashcode(const char* value) {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  hashcode_->assign(value);
}
inline void JK_ModelInfo::set_hashcode(const char* value, size_t size) {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  hashcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ModelInfo::mutable_hashcode() {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  return hashcode_;
}
inline ::std::string* JK_ModelInfo::release_hashcode() {
  clear_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hashcode_;
    hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ModelInfo::set_allocated_hashcode(::std::string* hashcode) {
  if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
    delete hashcode_;
  }
  if (hashcode) {
    set_has_hashcode();
    hashcode_ = hashcode;
  } else {
    clear_has_hashcode();
    hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 18;
inline bool JK_ModelInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_ModelInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_ModelInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_ModelInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_ModelInfo::vercode() const {
  return vercode_;
}
inline void JK_ModelInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FrontViewID = 19;
inline bool JK_ModelInfo::has_frontviewid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_ModelInfo::set_has_frontviewid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_ModelInfo::clear_has_frontviewid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_ModelInfo::clear_frontviewid() {
  frontviewid_ = 0;
  clear_has_frontviewid();
}
inline ::google::protobuf::int32 JK_ModelInfo::frontviewid() const {
  return frontviewid_;
}
inline void JK_ModelInfo::set_frontviewid(::google::protobuf::int32 value) {
  set_has_frontviewid();
  frontviewid_ = value;
}

// required int32 RightViewID = 20;
inline bool JK_ModelInfo::has_rightviewid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_ModelInfo::set_has_rightviewid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_ModelInfo::clear_has_rightviewid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_ModelInfo::clear_rightviewid() {
  rightviewid_ = 0;
  clear_has_rightviewid();
}
inline ::google::protobuf::int32 JK_ModelInfo::rightviewid() const {
  return rightviewid_;
}
inline void JK_ModelInfo::set_rightviewid(::google::protobuf::int32 value) {
  set_has_rightviewid();
  rightviewid_ = value;
}

// required int32 TopViewID = 21;
inline bool JK_ModelInfo::has_topviewid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_ModelInfo::set_has_topviewid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_ModelInfo::clear_has_topviewid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_ModelInfo::clear_topviewid() {
  topviewid_ = 0;
  clear_has_topviewid();
}
inline ::google::protobuf::int32 JK_ModelInfo::topviewid() const {
  return topviewid_;
}
inline void JK_ModelInfo::set_topviewid(::google::protobuf::int32 value) {
  set_has_topviewid();
  topviewid_ = value;
}

// required int32 PhotoID = 22;
inline bool JK_ModelInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_ModelInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_ModelInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_ModelInfo::clear_photoid() {
  photoid_ = 0;
  clear_has_photoid();
}
inline ::google::protobuf::int32 JK_ModelInfo::photoid() const {
  return photoid_;
}
inline void JK_ModelInfo::set_photoid(::google::protobuf::int32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// JK_NumberRuleInfo

// required int32 NumberRuleID = 1;
inline bool JK_NumberRuleInfo::has_numberruleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_NumberRuleInfo::set_has_numberruleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_NumberRuleInfo::clear_has_numberruleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_NumberRuleInfo::clear_numberruleid() {
  numberruleid_ = 0;
  clear_has_numberruleid();
}
inline ::google::protobuf::int32 JK_NumberRuleInfo::numberruleid() const {
  return numberruleid_;
}
inline void JK_NumberRuleInfo::set_numberruleid(::google::protobuf::int32 value) {
  set_has_numberruleid();
  numberruleid_ = value;
}

// required int32 FittingID = 2;
inline bool JK_NumberRuleInfo::has_fittingid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_NumberRuleInfo::set_has_fittingid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_NumberRuleInfo::clear_has_fittingid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_NumberRuleInfo::clear_fittingid() {
  fittingid_ = 0;
  clear_has_fittingid();
}
inline ::google::protobuf::int32 JK_NumberRuleInfo::fittingid() const {
  return fittingid_;
}
inline void JK_NumberRuleInfo::set_fittingid(::google::protobuf::int32 value) {
  set_has_fittingid();
  fittingid_ = value;
}

// required double MinLen = 3;
inline bool JK_NumberRuleInfo::has_minlen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_NumberRuleInfo::set_has_minlen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_NumberRuleInfo::clear_has_minlen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_NumberRuleInfo::clear_minlen() {
  minlen_ = 0;
  clear_has_minlen();
}
inline double JK_NumberRuleInfo::minlen() const {
  return minlen_;
}
inline void JK_NumberRuleInfo::set_minlen(double value) {
  set_has_minlen();
  minlen_ = value;
}

// required double MaxLen = 4;
inline bool JK_NumberRuleInfo::has_maxlen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_NumberRuleInfo::set_has_maxlen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_NumberRuleInfo::clear_has_maxlen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_NumberRuleInfo::clear_maxlen() {
  maxlen_ = 0;
  clear_has_maxlen();
}
inline double JK_NumberRuleInfo::maxlen() const {
  return maxlen_;
}
inline void JK_NumberRuleInfo::set_maxlen(double value) {
  set_has_maxlen();
  maxlen_ = value;
}

// required int32 UseCount = 5;
inline bool JK_NumberRuleInfo::has_usecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_NumberRuleInfo::set_has_usecount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_NumberRuleInfo::clear_has_usecount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_NumberRuleInfo::clear_usecount() {
  usecount_ = 0;
  clear_has_usecount();
}
inline ::google::protobuf::int32 JK_NumberRuleInfo::usecount() const {
  return usecount_;
}
inline void JK_NumberRuleInfo::set_usecount(::google::protobuf::int32 value) {
  set_has_usecount();
  usecount_ = value;
}

// required int64 VerCode = 6;
inline bool JK_NumberRuleInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_NumberRuleInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_NumberRuleInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_NumberRuleInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_NumberRuleInfo::vercode() const {
  return vercode_;
}
inline void JK_NumberRuleInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 7;
inline bool JK_NumberRuleInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_NumberRuleInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_NumberRuleInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_NumberRuleInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_NumberRuleInfo::factoryid() const {
  return factoryid_;
}
inline void JK_NumberRuleInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 8;
inline bool JK_NumberRuleInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_NumberRuleInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_NumberRuleInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_NumberRuleInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_NumberRuleInfo::creatorid() const {
  return creatorid_;
}
inline void JK_NumberRuleInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 9;
inline bool JK_NumberRuleInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_NumberRuleInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_NumberRuleInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_NumberRuleInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_NumberRuleInfo::updaterid() const {
  return updaterid_;
}
inline void JK_NumberRuleInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 10;
inline bool JK_NumberRuleInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_NumberRuleInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_NumberRuleInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_NumberRuleInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_NumberRuleInfo::createtime() const {
  return createtime_;
}
inline void JK_NumberRuleInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 11;
inline bool JK_NumberRuleInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_NumberRuleInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_NumberRuleInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_NumberRuleInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_NumberRuleInfo::updatetime() const {
  return updatetime_;
}
inline void JK_NumberRuleInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_PackageInfo

// required int32 FittingPackID = 1;
inline bool JK_PackageInfo::has_fittingpackid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_PackageInfo::set_has_fittingpackid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_PackageInfo::clear_has_fittingpackid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_PackageInfo::clear_fittingpackid() {
  fittingpackid_ = 0;
  clear_has_fittingpackid();
}
inline ::google::protobuf::int32 JK_PackageInfo::fittingpackid() const {
  return fittingpackid_;
}
inline void JK_PackageInfo::set_fittingpackid(::google::protobuf::int32 value) {
  set_has_fittingpackid();
  fittingpackid_ = value;
}

// required int32 FactoryID = 2;
inline bool JK_PackageInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_PackageInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_PackageInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_PackageInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_PackageInfo::factoryid() const {
  return factoryid_;
}
inline void JK_PackageInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 GroupID = 3;
inline bool JK_PackageInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_PackageInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_PackageInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_PackageInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_PackageInfo::groupid() const {
  return groupid_;
}
inline void JK_PackageInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required bool IsDel = 4;
inline bool JK_PackageInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_PackageInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_PackageInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_PackageInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_PackageInfo::isdel() const {
  return isdel_;
}
inline void JK_PackageInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsActive = 5;
inline bool JK_PackageInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_PackageInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_PackageInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_PackageInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_PackageInfo::isactive() const {
  return isactive_;
}
inline void JK_PackageInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required bool IsSplit = 6;
inline bool JK_PackageInfo::has_issplit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_PackageInfo::set_has_issplit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_PackageInfo::clear_has_issplit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_PackageInfo::clear_issplit() {
  issplit_ = false;
  clear_has_issplit();
}
inline bool JK_PackageInfo::issplit() const {
  return issplit_;
}
inline void JK_PackageInfo::set_issplit(bool value) {
  set_has_issplit();
  issplit_ = value;
}

// required bool IsSeparate = 7;
inline bool JK_PackageInfo::has_isseparate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_PackageInfo::set_has_isseparate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_PackageInfo::clear_has_isseparate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_PackageInfo::clear_isseparate() {
  isseparate_ = false;
  clear_has_isseparate();
}
inline bool JK_PackageInfo::isseparate() const {
  return isseparate_;
}
inline void JK_PackageInfo::set_isseparate(bool value) {
  set_has_isseparate();
  isseparate_ = value;
}

// required int32 GTypeID = 8;
inline bool JK_PackageInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_PackageInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_PackageInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_PackageInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 JK_PackageInfo::gtypeid() const {
  return gtypeid_;
}
inline void JK_PackageInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 CreatorID = 9;
inline bool JK_PackageInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_PackageInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_PackageInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_PackageInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_PackageInfo::creatorid() const {
  return creatorid_;
}
inline void JK_PackageInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 10;
inline bool JK_PackageInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_PackageInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_PackageInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_PackageInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_PackageInfo::updaterid() const {
  return updaterid_;
}
inline void JK_PackageInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 11;
inline bool JK_PackageInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_PackageInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_PackageInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_PackageInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_PackageInfo::createtime() const {
  return createtime_;
}
inline void JK_PackageInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 12;
inline bool JK_PackageInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_PackageInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_PackageInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_PackageInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_PackageInfo::updatetime() const {
  return updatetime_;
}
inline void JK_PackageInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string FittingPackCode = 13;
inline bool JK_PackageInfo::has_fittingpackcode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_PackageInfo::set_has_fittingpackcode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_PackageInfo::clear_has_fittingpackcode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_PackageInfo::clear_fittingpackcode() {
  if (fittingpackcode_ != &::google::protobuf::internal::kEmptyString) {
    fittingpackcode_->clear();
  }
  clear_has_fittingpackcode();
}
inline const ::std::string& JK_PackageInfo::fittingpackcode() const {
  return *fittingpackcode_;
}
inline void JK_PackageInfo::set_fittingpackcode(const ::std::string& value) {
  set_has_fittingpackcode();
  if (fittingpackcode_ == &::google::protobuf::internal::kEmptyString) {
    fittingpackcode_ = new ::std::string;
  }
  fittingpackcode_->assign(value);
}
inline void JK_PackageInfo::set_fittingpackcode(const char* value) {
  set_has_fittingpackcode();
  if (fittingpackcode_ == &::google::protobuf::internal::kEmptyString) {
    fittingpackcode_ = new ::std::string;
  }
  fittingpackcode_->assign(value);
}
inline void JK_PackageInfo::set_fittingpackcode(const char* value, size_t size) {
  set_has_fittingpackcode();
  if (fittingpackcode_ == &::google::protobuf::internal::kEmptyString) {
    fittingpackcode_ = new ::std::string;
  }
  fittingpackcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_PackageInfo::mutable_fittingpackcode() {
  set_has_fittingpackcode();
  if (fittingpackcode_ == &::google::protobuf::internal::kEmptyString) {
    fittingpackcode_ = new ::std::string;
  }
  return fittingpackcode_;
}
inline ::std::string* JK_PackageInfo::release_fittingpackcode() {
  clear_has_fittingpackcode();
  if (fittingpackcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fittingpackcode_;
    fittingpackcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_PackageInfo::set_allocated_fittingpackcode(::std::string* fittingpackcode) {
  if (fittingpackcode_ != &::google::protobuf::internal::kEmptyString) {
    delete fittingpackcode_;
  }
  if (fittingpackcode) {
    set_has_fittingpackcode();
    fittingpackcode_ = fittingpackcode;
  } else {
    clear_has_fittingpackcode();
    fittingpackcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string FittingPackName = 14;
inline bool JK_PackageInfo::has_fittingpackname() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_PackageInfo::set_has_fittingpackname() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_PackageInfo::clear_has_fittingpackname() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_PackageInfo::clear_fittingpackname() {
  if (fittingpackname_ != &::google::protobuf::internal::kEmptyString) {
    fittingpackname_->clear();
  }
  clear_has_fittingpackname();
}
inline const ::std::string& JK_PackageInfo::fittingpackname() const {
  return *fittingpackname_;
}
inline void JK_PackageInfo::set_fittingpackname(const ::std::string& value) {
  set_has_fittingpackname();
  if (fittingpackname_ == &::google::protobuf::internal::kEmptyString) {
    fittingpackname_ = new ::std::string;
  }
  fittingpackname_->assign(value);
}
inline void JK_PackageInfo::set_fittingpackname(const char* value) {
  set_has_fittingpackname();
  if (fittingpackname_ == &::google::protobuf::internal::kEmptyString) {
    fittingpackname_ = new ::std::string;
  }
  fittingpackname_->assign(value);
}
inline void JK_PackageInfo::set_fittingpackname(const char* value, size_t size) {
  set_has_fittingpackname();
  if (fittingpackname_ == &::google::protobuf::internal::kEmptyString) {
    fittingpackname_ = new ::std::string;
  }
  fittingpackname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_PackageInfo::mutable_fittingpackname() {
  set_has_fittingpackname();
  if (fittingpackname_ == &::google::protobuf::internal::kEmptyString) {
    fittingpackname_ = new ::std::string;
  }
  return fittingpackname_;
}
inline ::std::string* JK_PackageInfo::release_fittingpackname() {
  clear_has_fittingpackname();
  if (fittingpackname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fittingpackname_;
    fittingpackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_PackageInfo::set_allocated_fittingpackname(::std::string* fittingpackname) {
  if (fittingpackname_ != &::google::protobuf::internal::kEmptyString) {
    delete fittingpackname_;
  }
  if (fittingpackname) {
    set_has_fittingpackname();
    fittingpackname_ = fittingpackname;
  } else {
    clear_has_fittingpackname();
    fittingpackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string FittingPackMemo = 15;
inline bool JK_PackageInfo::has_fittingpackmemo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_PackageInfo::set_has_fittingpackmemo() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_PackageInfo::clear_has_fittingpackmemo() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_PackageInfo::clear_fittingpackmemo() {
  if (fittingpackmemo_ != &::google::protobuf::internal::kEmptyString) {
    fittingpackmemo_->clear();
  }
  clear_has_fittingpackmemo();
}
inline const ::std::string& JK_PackageInfo::fittingpackmemo() const {
  return *fittingpackmemo_;
}
inline void JK_PackageInfo::set_fittingpackmemo(const ::std::string& value) {
  set_has_fittingpackmemo();
  if (fittingpackmemo_ == &::google::protobuf::internal::kEmptyString) {
    fittingpackmemo_ = new ::std::string;
  }
  fittingpackmemo_->assign(value);
}
inline void JK_PackageInfo::set_fittingpackmemo(const char* value) {
  set_has_fittingpackmemo();
  if (fittingpackmemo_ == &::google::protobuf::internal::kEmptyString) {
    fittingpackmemo_ = new ::std::string;
  }
  fittingpackmemo_->assign(value);
}
inline void JK_PackageInfo::set_fittingpackmemo(const char* value, size_t size) {
  set_has_fittingpackmemo();
  if (fittingpackmemo_ == &::google::protobuf::internal::kEmptyString) {
    fittingpackmemo_ = new ::std::string;
  }
  fittingpackmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_PackageInfo::mutable_fittingpackmemo() {
  set_has_fittingpackmemo();
  if (fittingpackmemo_ == &::google::protobuf::internal::kEmptyString) {
    fittingpackmemo_ = new ::std::string;
  }
  return fittingpackmemo_;
}
inline ::std::string* JK_PackageInfo::release_fittingpackmemo() {
  clear_has_fittingpackmemo();
  if (fittingpackmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fittingpackmemo_;
    fittingpackmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_PackageInfo::set_allocated_fittingpackmemo(::std::string* fittingpackmemo) {
  if (fittingpackmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete fittingpackmemo_;
  }
  if (fittingpackmemo) {
    set_has_fittingpackmemo();
    fittingpackmemo_ = fittingpackmemo;
  } else {
    clear_has_fittingpackmemo();
    fittingpackmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 16;
inline bool JK_PackageInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_PackageInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_PackageInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_PackageInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_PackageInfo::vercode() const {
  return vercode_;
}
inline void JK_PackageInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_PackageMapInfo

// required int32 PackageID = 1;
inline bool JK_PackageMapInfo::has_packageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_PackageMapInfo::set_has_packageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_PackageMapInfo::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_PackageMapInfo::clear_packageid() {
  packageid_ = 0;
  clear_has_packageid();
}
inline ::google::protobuf::int32 JK_PackageMapInfo::packageid() const {
  return packageid_;
}
inline void JK_PackageMapInfo::set_packageid(::google::protobuf::int32 value) {
  set_has_packageid();
  packageid_ = value;
}

// required int32 FittingID = 2;
inline bool JK_PackageMapInfo::has_fittingid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_PackageMapInfo::set_has_fittingid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_PackageMapInfo::clear_has_fittingid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_PackageMapInfo::clear_fittingid() {
  fittingid_ = 0;
  clear_has_fittingid();
}
inline ::google::protobuf::int32 JK_PackageMapInfo::fittingid() const {
  return fittingid_;
}
inline void JK_PackageMapInfo::set_fittingid(::google::protobuf::int32 value) {
  set_has_fittingid();
  fittingid_ = value;
}

// required int32 FittingCount = 3;
inline bool JK_PackageMapInfo::has_fittingcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_PackageMapInfo::set_has_fittingcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_PackageMapInfo::clear_has_fittingcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_PackageMapInfo::clear_fittingcount() {
  fittingcount_ = 0;
  clear_has_fittingcount();
}
inline ::google::protobuf::int32 JK_PackageMapInfo::fittingcount() const {
  return fittingcount_;
}
inline void JK_PackageMapInfo::set_fittingcount(::google::protobuf::int32 value) {
  set_has_fittingcount();
  fittingcount_ = value;
}

// required int64 VerCode = 4;
inline bool JK_PackageMapInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_PackageMapInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_PackageMapInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_PackageMapInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_PackageMapInfo::vercode() const {
  return vercode_;
}
inline void JK_PackageMapInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 5;
inline bool JK_PackageMapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_PackageMapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_PackageMapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_PackageMapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_PackageMapInfo::factoryid() const {
  return factoryid_;
}
inline void JK_PackageMapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// -------------------------------------------------------------------

// JK_ProductInfo

// required int32 ProductID = 1;
inline bool JK_ProductInfo::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_ProductInfo::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_ProductInfo::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_ProductInfo::clear_productid() {
  productid_ = 0;
  clear_has_productid();
}
inline ::google::protobuf::int32 JK_ProductInfo::productid() const {
  return productid_;
}
inline void JK_ProductInfo::set_productid(::google::protobuf::int32 value) {
  set_has_productid();
  productid_ = value;
}

// required int32 FactoryID = 2;
inline bool JK_ProductInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_ProductInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_ProductInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_ProductInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_ProductInfo::factoryid() const {
  return factoryid_;
}
inline void JK_ProductInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 GroupID = 3;
inline bool JK_ProductInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_ProductInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_ProductInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_ProductInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_ProductInfo::groupid() const {
  return groupid_;
}
inline void JK_ProductInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required bool IsDel = 4;
inline bool JK_ProductInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_ProductInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_ProductInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_ProductInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_ProductInfo::isdel() const {
  return isdel_;
}
inline void JK_ProductInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsActive = 5;
inline bool JK_ProductInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_ProductInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_ProductInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_ProductInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_ProductInfo::isactive() const {
  return isactive_;
}
inline void JK_ProductInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required bool IsSplit = 6;
inline bool JK_ProductInfo::has_issplit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_ProductInfo::set_has_issplit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_ProductInfo::clear_has_issplit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_ProductInfo::clear_issplit() {
  issplit_ = false;
  clear_has_issplit();
}
inline bool JK_ProductInfo::issplit() const {
  return issplit_;
}
inline void JK_ProductInfo::set_issplit(bool value) {
  set_has_issplit();
  issplit_ = value;
}

// required int32 SupplyType = 7;
inline bool JK_ProductInfo::has_supplytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_ProductInfo::set_has_supplytype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_ProductInfo::clear_has_supplytype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_ProductInfo::clear_supplytype() {
  supplytype_ = 0;
  clear_has_supplytype();
}
inline ::google::protobuf::int32 JK_ProductInfo::supplytype() const {
  return supplytype_;
}
inline void JK_ProductInfo::set_supplytype(::google::protobuf::int32 value) {
  set_has_supplytype();
  supplytype_ = value;
}

// required int32 GTypeID = 8;
inline bool JK_ProductInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_ProductInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_ProductInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_ProductInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 JK_ProductInfo::gtypeid() const {
  return gtypeid_;
}
inline void JK_ProductInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required int32 ShowID = 9;
inline bool JK_ProductInfo::has_showid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_ProductInfo::set_has_showid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_ProductInfo::clear_has_showid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_ProductInfo::clear_showid() {
  showid_ = 0;
  clear_has_showid();
}
inline ::google::protobuf::int32 JK_ProductInfo::showid() const {
  return showid_;
}
inline void JK_ProductInfo::set_showid(::google::protobuf::int32 value) {
  set_has_showid();
  showid_ = value;
}

// required int32 ModelID = 10;
inline bool JK_ProductInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_ProductInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_ProductInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_ProductInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 JK_ProductInfo::modelid() const {
  return modelid_;
}
inline void JK_ProductInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required double XLen = 11;
inline bool JK_ProductInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_ProductInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_ProductInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_ProductInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double JK_ProductInfo::xlen() const {
  return xlen_;
}
inline void JK_ProductInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 12;
inline bool JK_ProductInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_ProductInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_ProductInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_ProductInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double JK_ProductInfo::ylen() const {
  return ylen_;
}
inline void JK_ProductInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double ZLen = 13;
inline bool JK_ProductInfo::has_zlen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_ProductInfo::set_has_zlen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_ProductInfo::clear_has_zlen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_ProductInfo::clear_zlen() {
  zlen_ = 0;
  clear_has_zlen();
}
inline double JK_ProductInfo::zlen() const {
  return zlen_;
}
inline void JK_ProductInfo::set_zlen(double value) {
  set_has_zlen();
  zlen_ = value;
}

// required int32 CreatorID = 14;
inline bool JK_ProductInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_ProductInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_ProductInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_ProductInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_ProductInfo::creatorid() const {
  return creatorid_;
}
inline void JK_ProductInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 15;
inline bool JK_ProductInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_ProductInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_ProductInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_ProductInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_ProductInfo::updaterid() const {
  return updaterid_;
}
inline void JK_ProductInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 16;
inline bool JK_ProductInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_ProductInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_ProductInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_ProductInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_ProductInfo::createtime() const {
  return createtime_;
}
inline void JK_ProductInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 17;
inline bool JK_ProductInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_ProductInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_ProductInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_ProductInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_ProductInfo::updatetime() const {
  return updatetime_;
}
inline void JK_ProductInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string ProductCode = 18;
inline bool JK_ProductInfo::has_productcode() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_ProductInfo::set_has_productcode() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_ProductInfo::clear_has_productcode() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_ProductInfo::clear_productcode() {
  if (productcode_ != &::google::protobuf::internal::kEmptyString) {
    productcode_->clear();
  }
  clear_has_productcode();
}
inline const ::std::string& JK_ProductInfo::productcode() const {
  return *productcode_;
}
inline void JK_ProductInfo::set_productcode(const ::std::string& value) {
  set_has_productcode();
  if (productcode_ == &::google::protobuf::internal::kEmptyString) {
    productcode_ = new ::std::string;
  }
  productcode_->assign(value);
}
inline void JK_ProductInfo::set_productcode(const char* value) {
  set_has_productcode();
  if (productcode_ == &::google::protobuf::internal::kEmptyString) {
    productcode_ = new ::std::string;
  }
  productcode_->assign(value);
}
inline void JK_ProductInfo::set_productcode(const char* value, size_t size) {
  set_has_productcode();
  if (productcode_ == &::google::protobuf::internal::kEmptyString) {
    productcode_ = new ::std::string;
  }
  productcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ProductInfo::mutable_productcode() {
  set_has_productcode();
  if (productcode_ == &::google::protobuf::internal::kEmptyString) {
    productcode_ = new ::std::string;
  }
  return productcode_;
}
inline ::std::string* JK_ProductInfo::release_productcode() {
  clear_has_productcode();
  if (productcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productcode_;
    productcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ProductInfo::set_allocated_productcode(::std::string* productcode) {
  if (productcode_ != &::google::protobuf::internal::kEmptyString) {
    delete productcode_;
  }
  if (productcode) {
    set_has_productcode();
    productcode_ = productcode;
  } else {
    clear_has_productcode();
    productcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ProductName = 19;
inline bool JK_ProductInfo::has_productname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_ProductInfo::set_has_productname() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_ProductInfo::clear_has_productname() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_ProductInfo::clear_productname() {
  if (productname_ != &::google::protobuf::internal::kEmptyString) {
    productname_->clear();
  }
  clear_has_productname();
}
inline const ::std::string& JK_ProductInfo::productname() const {
  return *productname_;
}
inline void JK_ProductInfo::set_productname(const ::std::string& value) {
  set_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    productname_ = new ::std::string;
  }
  productname_->assign(value);
}
inline void JK_ProductInfo::set_productname(const char* value) {
  set_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    productname_ = new ::std::string;
  }
  productname_->assign(value);
}
inline void JK_ProductInfo::set_productname(const char* value, size_t size) {
  set_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    productname_ = new ::std::string;
  }
  productname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ProductInfo::mutable_productname() {
  set_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    productname_ = new ::std::string;
  }
  return productname_;
}
inline ::std::string* JK_ProductInfo::release_productname() {
  clear_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productname_;
    productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ProductInfo::set_allocated_productname(::std::string* productname) {
  if (productname_ != &::google::protobuf::internal::kEmptyString) {
    delete productname_;
  }
  if (productname) {
    set_has_productname();
    productname_ = productname;
  } else {
    clear_has_productname();
    productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ProductMemo = 20;
inline bool JK_ProductInfo::has_productmemo() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_ProductInfo::set_has_productmemo() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_ProductInfo::clear_has_productmemo() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_ProductInfo::clear_productmemo() {
  if (productmemo_ != &::google::protobuf::internal::kEmptyString) {
    productmemo_->clear();
  }
  clear_has_productmemo();
}
inline const ::std::string& JK_ProductInfo::productmemo() const {
  return *productmemo_;
}
inline void JK_ProductInfo::set_productmemo(const ::std::string& value) {
  set_has_productmemo();
  if (productmemo_ == &::google::protobuf::internal::kEmptyString) {
    productmemo_ = new ::std::string;
  }
  productmemo_->assign(value);
}
inline void JK_ProductInfo::set_productmemo(const char* value) {
  set_has_productmemo();
  if (productmemo_ == &::google::protobuf::internal::kEmptyString) {
    productmemo_ = new ::std::string;
  }
  productmemo_->assign(value);
}
inline void JK_ProductInfo::set_productmemo(const char* value, size_t size) {
  set_has_productmemo();
  if (productmemo_ == &::google::protobuf::internal::kEmptyString) {
    productmemo_ = new ::std::string;
  }
  productmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ProductInfo::mutable_productmemo() {
  set_has_productmemo();
  if (productmemo_ == &::google::protobuf::internal::kEmptyString) {
    productmemo_ = new ::std::string;
  }
  return productmemo_;
}
inline ::std::string* JK_ProductInfo::release_productmemo() {
  clear_has_productmemo();
  if (productmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productmemo_;
    productmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ProductInfo::set_allocated_productmemo(::std::string* productmemo) {
  if (productmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete productmemo_;
  }
  if (productmemo) {
    set_has_productmemo();
    productmemo_ = productmemo;
  } else {
    clear_has_productmemo();
    productmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 21;
inline bool JK_ProductInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_ProductInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_ProductInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_ProductInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_ProductInfo::vercode() const {
  return vercode_;
}
inline void JK_ProductInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_ProductSeriesInfo

// required int32 ProductSeriesID = 1;
inline bool JK_ProductSeriesInfo::has_productseriesid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_ProductSeriesInfo::set_has_productseriesid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_ProductSeriesInfo::clear_has_productseriesid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_ProductSeriesInfo::clear_productseriesid() {
  productseriesid_ = 0;
  clear_has_productseriesid();
}
inline ::google::protobuf::int32 JK_ProductSeriesInfo::productseriesid() const {
  return productseriesid_;
}
inline void JK_ProductSeriesInfo::set_productseriesid(::google::protobuf::int32 value) {
  set_has_productseriesid();
  productseriesid_ = value;
}

// required int32 FactoryID = 2;
inline bool JK_ProductSeriesInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_ProductSeriesInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_ProductSeriesInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_ProductSeriesInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_ProductSeriesInfo::factoryid() const {
  return factoryid_;
}
inline void JK_ProductSeriesInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 GroupID = 3;
inline bool JK_ProductSeriesInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_ProductSeriesInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_ProductSeriesInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_ProductSeriesInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_ProductSeriesInfo::groupid() const {
  return groupid_;
}
inline void JK_ProductSeriesInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required bool IsDel = 4;
inline bool JK_ProductSeriesInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_ProductSeriesInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_ProductSeriesInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_ProductSeriesInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_ProductSeriesInfo::isdel() const {
  return isdel_;
}
inline void JK_ProductSeriesInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required bool IsActive = 5;
inline bool JK_ProductSeriesInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_ProductSeriesInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_ProductSeriesInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_ProductSeriesInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool JK_ProductSeriesInfo::isactive() const {
  return isactive_;
}
inline void JK_ProductSeriesInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// required int32 CreatorID = 6;
inline bool JK_ProductSeriesInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_ProductSeriesInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_ProductSeriesInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_ProductSeriesInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_ProductSeriesInfo::creatorid() const {
  return creatorid_;
}
inline void JK_ProductSeriesInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 7;
inline bool JK_ProductSeriesInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_ProductSeriesInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_ProductSeriesInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_ProductSeriesInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_ProductSeriesInfo::updaterid() const {
  return updaterid_;
}
inline void JK_ProductSeriesInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 8;
inline bool JK_ProductSeriesInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_ProductSeriesInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_ProductSeriesInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_ProductSeriesInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_ProductSeriesInfo::createtime() const {
  return createtime_;
}
inline void JK_ProductSeriesInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 9;
inline bool JK_ProductSeriesInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_ProductSeriesInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_ProductSeriesInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_ProductSeriesInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_ProductSeriesInfo::updatetime() const {
  return updatetime_;
}
inline void JK_ProductSeriesInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string ProductSeriesCode = 10;
inline bool JK_ProductSeriesInfo::has_productseriescode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_ProductSeriesInfo::set_has_productseriescode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_ProductSeriesInfo::clear_has_productseriescode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_ProductSeriesInfo::clear_productseriescode() {
  if (productseriescode_ != &::google::protobuf::internal::kEmptyString) {
    productseriescode_->clear();
  }
  clear_has_productseriescode();
}
inline const ::std::string& JK_ProductSeriesInfo::productseriescode() const {
  return *productseriescode_;
}
inline void JK_ProductSeriesInfo::set_productseriescode(const ::std::string& value) {
  set_has_productseriescode();
  if (productseriescode_ == &::google::protobuf::internal::kEmptyString) {
    productseriescode_ = new ::std::string;
  }
  productseriescode_->assign(value);
}
inline void JK_ProductSeriesInfo::set_productseriescode(const char* value) {
  set_has_productseriescode();
  if (productseriescode_ == &::google::protobuf::internal::kEmptyString) {
    productseriescode_ = new ::std::string;
  }
  productseriescode_->assign(value);
}
inline void JK_ProductSeriesInfo::set_productseriescode(const char* value, size_t size) {
  set_has_productseriescode();
  if (productseriescode_ == &::google::protobuf::internal::kEmptyString) {
    productseriescode_ = new ::std::string;
  }
  productseriescode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ProductSeriesInfo::mutable_productseriescode() {
  set_has_productseriescode();
  if (productseriescode_ == &::google::protobuf::internal::kEmptyString) {
    productseriescode_ = new ::std::string;
  }
  return productseriescode_;
}
inline ::std::string* JK_ProductSeriesInfo::release_productseriescode() {
  clear_has_productseriescode();
  if (productseriescode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productseriescode_;
    productseriescode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ProductSeriesInfo::set_allocated_productseriescode(::std::string* productseriescode) {
  if (productseriescode_ != &::google::protobuf::internal::kEmptyString) {
    delete productseriescode_;
  }
  if (productseriescode) {
    set_has_productseriescode();
    productseriescode_ = productseriescode;
  } else {
    clear_has_productseriescode();
    productseriescode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ProductSeriesName = 11;
inline bool JK_ProductSeriesInfo::has_productseriesname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_ProductSeriesInfo::set_has_productseriesname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_ProductSeriesInfo::clear_has_productseriesname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_ProductSeriesInfo::clear_productseriesname() {
  if (productseriesname_ != &::google::protobuf::internal::kEmptyString) {
    productseriesname_->clear();
  }
  clear_has_productseriesname();
}
inline const ::std::string& JK_ProductSeriesInfo::productseriesname() const {
  return *productseriesname_;
}
inline void JK_ProductSeriesInfo::set_productseriesname(const ::std::string& value) {
  set_has_productseriesname();
  if (productseriesname_ == &::google::protobuf::internal::kEmptyString) {
    productseriesname_ = new ::std::string;
  }
  productseriesname_->assign(value);
}
inline void JK_ProductSeriesInfo::set_productseriesname(const char* value) {
  set_has_productseriesname();
  if (productseriesname_ == &::google::protobuf::internal::kEmptyString) {
    productseriesname_ = new ::std::string;
  }
  productseriesname_->assign(value);
}
inline void JK_ProductSeriesInfo::set_productseriesname(const char* value, size_t size) {
  set_has_productseriesname();
  if (productseriesname_ == &::google::protobuf::internal::kEmptyString) {
    productseriesname_ = new ::std::string;
  }
  productseriesname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ProductSeriesInfo::mutable_productseriesname() {
  set_has_productseriesname();
  if (productseriesname_ == &::google::protobuf::internal::kEmptyString) {
    productseriesname_ = new ::std::string;
  }
  return productseriesname_;
}
inline ::std::string* JK_ProductSeriesInfo::release_productseriesname() {
  clear_has_productseriesname();
  if (productseriesname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productseriesname_;
    productseriesname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ProductSeriesInfo::set_allocated_productseriesname(::std::string* productseriesname) {
  if (productseriesname_ != &::google::protobuf::internal::kEmptyString) {
    delete productseriesname_;
  }
  if (productseriesname) {
    set_has_productseriesname();
    productseriesname_ = productseriesname;
  } else {
    clear_has_productseriesname();
    productseriesname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ProductSeriesMemo = 12;
inline bool JK_ProductSeriesInfo::has_productseriesmemo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_ProductSeriesInfo::set_has_productseriesmemo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_ProductSeriesInfo::clear_has_productseriesmemo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_ProductSeriesInfo::clear_productseriesmemo() {
  if (productseriesmemo_ != &::google::protobuf::internal::kEmptyString) {
    productseriesmemo_->clear();
  }
  clear_has_productseriesmemo();
}
inline const ::std::string& JK_ProductSeriesInfo::productseriesmemo() const {
  return *productseriesmemo_;
}
inline void JK_ProductSeriesInfo::set_productseriesmemo(const ::std::string& value) {
  set_has_productseriesmemo();
  if (productseriesmemo_ == &::google::protobuf::internal::kEmptyString) {
    productseriesmemo_ = new ::std::string;
  }
  productseriesmemo_->assign(value);
}
inline void JK_ProductSeriesInfo::set_productseriesmemo(const char* value) {
  set_has_productseriesmemo();
  if (productseriesmemo_ == &::google::protobuf::internal::kEmptyString) {
    productseriesmemo_ = new ::std::string;
  }
  productseriesmemo_->assign(value);
}
inline void JK_ProductSeriesInfo::set_productseriesmemo(const char* value, size_t size) {
  set_has_productseriesmemo();
  if (productseriesmemo_ == &::google::protobuf::internal::kEmptyString) {
    productseriesmemo_ = new ::std::string;
  }
  productseriesmemo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ProductSeriesInfo::mutable_productseriesmemo() {
  set_has_productseriesmemo();
  if (productseriesmemo_ == &::google::protobuf::internal::kEmptyString) {
    productseriesmemo_ = new ::std::string;
  }
  return productseriesmemo_;
}
inline ::std::string* JK_ProductSeriesInfo::release_productseriesmemo() {
  clear_has_productseriesmemo();
  if (productseriesmemo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productseriesmemo_;
    productseriesmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ProductSeriesInfo::set_allocated_productseriesmemo(::std::string* productseriesmemo) {
  if (productseriesmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete productseriesmemo_;
  }
  if (productseriesmemo) {
    set_has_productseriesmemo();
    productseriesmemo_ = productseriesmemo;
  } else {
    clear_has_productseriesmemo();
    productseriesmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 13;
inline bool JK_ProductSeriesInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_ProductSeriesInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_ProductSeriesInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_ProductSeriesInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_ProductSeriesInfo::vercode() const {
  return vercode_;
}
inline void JK_ProductSeriesInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_ProductSeriesValidInfo

// required int32 ProductSeriesID = 1;
inline bool JK_ProductSeriesValidInfo::has_productseriesid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_ProductSeriesValidInfo::set_has_productseriesid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_ProductSeriesValidInfo::clear_has_productseriesid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_ProductSeriesValidInfo::clear_productseriesid() {
  productseriesid_ = 0;
  clear_has_productseriesid();
}
inline ::google::protobuf::int32 JK_ProductSeriesValidInfo::productseriesid() const {
  return productseriesid_;
}
inline void JK_ProductSeriesValidInfo::set_productseriesid(::google::protobuf::int32 value) {
  set_has_productseriesid();
  productseriesid_ = value;
}

// required int32 ProductSeriesItemID = 2;
inline bool JK_ProductSeriesValidInfo::has_productseriesitemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_ProductSeriesValidInfo::set_has_productseriesitemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_ProductSeriesValidInfo::clear_has_productseriesitemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_ProductSeriesValidInfo::clear_productseriesitemid() {
  productseriesitemid_ = 0;
  clear_has_productseriesitemid();
}
inline ::google::protobuf::int32 JK_ProductSeriesValidInfo::productseriesitemid() const {
  return productseriesitemid_;
}
inline void JK_ProductSeriesValidInfo::set_productseriesitemid(::google::protobuf::int32 value) {
  set_has_productseriesitemid();
  productseriesitemid_ = value;
}

// required int32 PSType = 3;
inline bool JK_ProductSeriesValidInfo::has_pstype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_ProductSeriesValidInfo::set_has_pstype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_ProductSeriesValidInfo::clear_has_pstype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_ProductSeriesValidInfo::clear_pstype() {
  pstype_ = 0;
  clear_has_pstype();
}
inline ::google::protobuf::int32 JK_ProductSeriesValidInfo::pstype() const {
  return pstype_;
}
inline void JK_ProductSeriesValidInfo::set_pstype(::google::protobuf::int32 value) {
  set_has_pstype();
  pstype_ = value;
}

// required int32 ParentID = 4;
inline bool JK_ProductSeriesValidInfo::has_parentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_ProductSeriesValidInfo::set_has_parentid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_ProductSeriesValidInfo::clear_has_parentid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_ProductSeriesValidInfo::clear_parentid() {
  parentid_ = 0;
  clear_has_parentid();
}
inline ::google::protobuf::int32 JK_ProductSeriesValidInfo::parentid() const {
  return parentid_;
}
inline void JK_ProductSeriesValidInfo::set_parentid(::google::protobuf::int32 value) {
  set_has_parentid();
  parentid_ = value;
}

// required bool IsDefault = 5;
inline bool JK_ProductSeriesValidInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_ProductSeriesValidInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_ProductSeriesValidInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_ProductSeriesValidInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_ProductSeriesValidInfo::isdefault() const {
  return isdefault_;
}
inline void JK_ProductSeriesValidInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required bool IsGroup = 6;
inline bool JK_ProductSeriesValidInfo::has_isgroup() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_ProductSeriesValidInfo::set_has_isgroup() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_ProductSeriesValidInfo::clear_has_isgroup() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_ProductSeriesValidInfo::clear_isgroup() {
  isgroup_ = false;
  clear_has_isgroup();
}
inline bool JK_ProductSeriesValidInfo::isgroup() const {
  return isgroup_;
}
inline void JK_ProductSeriesValidInfo::set_isgroup(bool value) {
  set_has_isgroup();
  isgroup_ = value;
}

// required int64 VerCode = 7;
inline bool JK_ProductSeriesValidInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_ProductSeriesValidInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_ProductSeriesValidInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_ProductSeriesValidInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_ProductSeriesValidInfo::vercode() const {
  return vercode_;
}
inline void JK_ProductSeriesValidInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 8;
inline bool JK_ProductSeriesValidInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_ProductSeriesValidInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_ProductSeriesValidInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_ProductSeriesValidInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_ProductSeriesValidInfo::factoryid() const {
  return factoryid_;
}
inline void JK_ProductSeriesValidInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 9;
inline bool JK_ProductSeriesValidInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_ProductSeriesValidInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_ProductSeriesValidInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_ProductSeriesValidInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_ProductSeriesValidInfo::creatorid() const {
  return creatorid_;
}
inline void JK_ProductSeriesValidInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 10;
inline bool JK_ProductSeriesValidInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_ProductSeriesValidInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_ProductSeriesValidInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_ProductSeriesValidInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_ProductSeriesValidInfo::updaterid() const {
  return updaterid_;
}
inline void JK_ProductSeriesValidInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 11;
inline bool JK_ProductSeriesValidInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_ProductSeriesValidInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_ProductSeriesValidInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_ProductSeriesValidInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_ProductSeriesValidInfo::createtime() const {
  return createtime_;
}
inline void JK_ProductSeriesValidInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 12;
inline bool JK_ProductSeriesValidInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_ProductSeriesValidInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_ProductSeriesValidInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_ProductSeriesValidInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_ProductSeriesValidInfo::updatetime() const {
  return updatetime_;
}
inline void JK_ProductSeriesValidInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required int32 DefaultItemID = 13;
inline bool JK_ProductSeriesValidInfo::has_defaultitemid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_ProductSeriesValidInfo::set_has_defaultitemid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_ProductSeriesValidInfo::clear_has_defaultitemid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_ProductSeriesValidInfo::clear_defaultitemid() {
  defaultitemid_ = 0;
  clear_has_defaultitemid();
}
inline ::google::protobuf::int32 JK_ProductSeriesValidInfo::defaultitemid() const {
  return defaultitemid_;
}
inline void JK_ProductSeriesValidInfo::set_defaultitemid(::google::protobuf::int32 value) {
  set_has_defaultitemid();
  defaultitemid_ = value;
}

// -------------------------------------------------------------------

// JK_ResourceInfo

// required int32 ResourceID = 1;
inline bool JK_ResourceInfo::has_resourceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_ResourceInfo::set_has_resourceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_ResourceInfo::clear_has_resourceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_ResourceInfo::clear_resourceid() {
  resourceid_ = 0;
  clear_has_resourceid();
}
inline ::google::protobuf::int32 JK_ResourceInfo::resourceid() const {
  return resourceid_;
}
inline void JK_ResourceInfo::set_resourceid(::google::protobuf::int32 value) {
  set_has_resourceid();
  resourceid_ = value;
}

// required int32 GroupID = 2;
inline bool JK_ResourceInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_ResourceInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_ResourceInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_ResourceInfo::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 JK_ResourceInfo::groupid() const {
  return groupid_;
}
inline void JK_ResourceInfo::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 FactoryID = 3;
inline bool JK_ResourceInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_ResourceInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_ResourceInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_ResourceInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_ResourceInfo::factoryid() const {
  return factoryid_;
}
inline void JK_ResourceInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 GTypeID = 4;
inline bool JK_ResourceInfo::has_gtypeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_ResourceInfo::set_has_gtypeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_ResourceInfo::clear_has_gtypeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_ResourceInfo::clear_gtypeid() {
  gtypeid_ = 0;
  clear_has_gtypeid();
}
inline ::google::protobuf::int32 JK_ResourceInfo::gtypeid() const {
  return gtypeid_;
}
inline void JK_ResourceInfo::set_gtypeid(::google::protobuf::int32 value) {
  set_has_gtypeid();
  gtypeid_ = value;
}

// required bool IsDel = 5;
inline bool JK_ResourceInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_ResourceInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_ResourceInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_ResourceInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_ResourceInfo::isdel() const {
  return isdel_;
}
inline void JK_ResourceInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required double XLen = 6;
inline bool JK_ResourceInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_ResourceInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_ResourceInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_ResourceInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double JK_ResourceInfo::xlen() const {
  return xlen_;
}
inline void JK_ResourceInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 7;
inline bool JK_ResourceInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_ResourceInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_ResourceInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_ResourceInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double JK_ResourceInfo::ylen() const {
  return ylen_;
}
inline void JK_ResourceInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required int32 CreatorID = 8;
inline bool JK_ResourceInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_ResourceInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_ResourceInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_ResourceInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_ResourceInfo::creatorid() const {
  return creatorid_;
}
inline void JK_ResourceInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 9;
inline bool JK_ResourceInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_ResourceInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_ResourceInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_ResourceInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_ResourceInfo::updaterid() const {
  return updaterid_;
}
inline void JK_ResourceInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 10;
inline bool JK_ResourceInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_ResourceInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_ResourceInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_ResourceInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_ResourceInfo::createtime() const {
  return createtime_;
}
inline void JK_ResourceInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 11;
inline bool JK_ResourceInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_ResourceInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_ResourceInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_ResourceInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_ResourceInfo::updatetime() const {
  return updatetime_;
}
inline void JK_ResourceInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// required string ResourceCode = 12;
inline bool JK_ResourceInfo::has_resourcecode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_ResourceInfo::set_has_resourcecode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_ResourceInfo::clear_has_resourcecode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_ResourceInfo::clear_resourcecode() {
  if (resourcecode_ != &::google::protobuf::internal::kEmptyString) {
    resourcecode_->clear();
  }
  clear_has_resourcecode();
}
inline const ::std::string& JK_ResourceInfo::resourcecode() const {
  return *resourcecode_;
}
inline void JK_ResourceInfo::set_resourcecode(const ::std::string& value) {
  set_has_resourcecode();
  if (resourcecode_ == &::google::protobuf::internal::kEmptyString) {
    resourcecode_ = new ::std::string;
  }
  resourcecode_->assign(value);
}
inline void JK_ResourceInfo::set_resourcecode(const char* value) {
  set_has_resourcecode();
  if (resourcecode_ == &::google::protobuf::internal::kEmptyString) {
    resourcecode_ = new ::std::string;
  }
  resourcecode_->assign(value);
}
inline void JK_ResourceInfo::set_resourcecode(const char* value, size_t size) {
  set_has_resourcecode();
  if (resourcecode_ == &::google::protobuf::internal::kEmptyString) {
    resourcecode_ = new ::std::string;
  }
  resourcecode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ResourceInfo::mutable_resourcecode() {
  set_has_resourcecode();
  if (resourcecode_ == &::google::protobuf::internal::kEmptyString) {
    resourcecode_ = new ::std::string;
  }
  return resourcecode_;
}
inline ::std::string* JK_ResourceInfo::release_resourcecode() {
  clear_has_resourcecode();
  if (resourcecode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resourcecode_;
    resourcecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ResourceInfo::set_allocated_resourcecode(::std::string* resourcecode) {
  if (resourcecode_ != &::google::protobuf::internal::kEmptyString) {
    delete resourcecode_;
  }
  if (resourcecode) {
    set_has_resourcecode();
    resourcecode_ = resourcecode;
  } else {
    clear_has_resourcecode();
    resourcecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ResourceName = 13;
inline bool JK_ResourceInfo::has_resourcename() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_ResourceInfo::set_has_resourcename() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_ResourceInfo::clear_has_resourcename() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_ResourceInfo::clear_resourcename() {
  if (resourcename_ != &::google::protobuf::internal::kEmptyString) {
    resourcename_->clear();
  }
  clear_has_resourcename();
}
inline const ::std::string& JK_ResourceInfo::resourcename() const {
  return *resourcename_;
}
inline void JK_ResourceInfo::set_resourcename(const ::std::string& value) {
  set_has_resourcename();
  if (resourcename_ == &::google::protobuf::internal::kEmptyString) {
    resourcename_ = new ::std::string;
  }
  resourcename_->assign(value);
}
inline void JK_ResourceInfo::set_resourcename(const char* value) {
  set_has_resourcename();
  if (resourcename_ == &::google::protobuf::internal::kEmptyString) {
    resourcename_ = new ::std::string;
  }
  resourcename_->assign(value);
}
inline void JK_ResourceInfo::set_resourcename(const char* value, size_t size) {
  set_has_resourcename();
  if (resourcename_ == &::google::protobuf::internal::kEmptyString) {
    resourcename_ = new ::std::string;
  }
  resourcename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ResourceInfo::mutable_resourcename() {
  set_has_resourcename();
  if (resourcename_ == &::google::protobuf::internal::kEmptyString) {
    resourcename_ = new ::std::string;
  }
  return resourcename_;
}
inline ::std::string* JK_ResourceInfo::release_resourcename() {
  clear_has_resourcename();
  if (resourcename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resourcename_;
    resourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ResourceInfo::set_allocated_resourcename(::std::string* resourcename) {
  if (resourcename_ != &::google::protobuf::internal::kEmptyString) {
    delete resourcename_;
  }
  if (resourcename) {
    set_has_resourcename();
    resourcename_ = resourcename;
  } else {
    clear_has_resourcename();
    resourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string RelativePath = 14;
inline bool JK_ResourceInfo::has_relativepath() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_ResourceInfo::set_has_relativepath() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_ResourceInfo::clear_has_relativepath() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_ResourceInfo::clear_relativepath() {
  if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
    relativepath_->clear();
  }
  clear_has_relativepath();
}
inline const ::std::string& JK_ResourceInfo::relativepath() const {
  return *relativepath_;
}
inline void JK_ResourceInfo::set_relativepath(const ::std::string& value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
}
inline void JK_ResourceInfo::set_relativepath(const char* value) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(value);
}
inline void JK_ResourceInfo::set_relativepath(const char* value, size_t size) {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  relativepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ResourceInfo::mutable_relativepath() {
  set_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    relativepath_ = new ::std::string;
  }
  return relativepath_;
}
inline ::std::string* JK_ResourceInfo::release_relativepath() {
  clear_has_relativepath();
  if (relativepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = relativepath_;
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ResourceInfo::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
    delete relativepath_;
  }
  if (relativepath) {
    set_has_relativepath();
    relativepath_ = relativepath;
  } else {
    clear_has_relativepath();
    relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ResourceMemo = 15;
inline bool JK_ResourceInfo::has_resourcememo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_ResourceInfo::set_has_resourcememo() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_ResourceInfo::clear_has_resourcememo() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_ResourceInfo::clear_resourcememo() {
  if (resourcememo_ != &::google::protobuf::internal::kEmptyString) {
    resourcememo_->clear();
  }
  clear_has_resourcememo();
}
inline const ::std::string& JK_ResourceInfo::resourcememo() const {
  return *resourcememo_;
}
inline void JK_ResourceInfo::set_resourcememo(const ::std::string& value) {
  set_has_resourcememo();
  if (resourcememo_ == &::google::protobuf::internal::kEmptyString) {
    resourcememo_ = new ::std::string;
  }
  resourcememo_->assign(value);
}
inline void JK_ResourceInfo::set_resourcememo(const char* value) {
  set_has_resourcememo();
  if (resourcememo_ == &::google::protobuf::internal::kEmptyString) {
    resourcememo_ = new ::std::string;
  }
  resourcememo_->assign(value);
}
inline void JK_ResourceInfo::set_resourcememo(const char* value, size_t size) {
  set_has_resourcememo();
  if (resourcememo_ == &::google::protobuf::internal::kEmptyString) {
    resourcememo_ = new ::std::string;
  }
  resourcememo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ResourceInfo::mutable_resourcememo() {
  set_has_resourcememo();
  if (resourcememo_ == &::google::protobuf::internal::kEmptyString) {
    resourcememo_ = new ::std::string;
  }
  return resourcememo_;
}
inline ::std::string* JK_ResourceInfo::release_resourcememo() {
  clear_has_resourcememo();
  if (resourcememo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resourcememo_;
    resourcememo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ResourceInfo::set_allocated_resourcememo(::std::string* resourcememo) {
  if (resourcememo_ != &::google::protobuf::internal::kEmptyString) {
    delete resourcememo_;
  }
  if (resourcememo) {
    set_has_resourcememo();
    resourcememo_ = resourcememo;
  } else {
    clear_has_resourcememo();
    resourcememo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string HASHCode = 16;
inline bool JK_ResourceInfo::has_hashcode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_ResourceInfo::set_has_hashcode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_ResourceInfo::clear_has_hashcode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_ResourceInfo::clear_hashcode() {
  if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
    hashcode_->clear();
  }
  clear_has_hashcode();
}
inline const ::std::string& JK_ResourceInfo::hashcode() const {
  return *hashcode_;
}
inline void JK_ResourceInfo::set_hashcode(const ::std::string& value) {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  hashcode_->assign(value);
}
inline void JK_ResourceInfo::set_hashcode(const char* value) {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  hashcode_->assign(value);
}
inline void JK_ResourceInfo::set_hashcode(const char* value, size_t size) {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  hashcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_ResourceInfo::mutable_hashcode() {
  set_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    hashcode_ = new ::std::string;
  }
  return hashcode_;
}
inline ::std::string* JK_ResourceInfo::release_hashcode() {
  clear_has_hashcode();
  if (hashcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hashcode_;
    hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_ResourceInfo::set_allocated_hashcode(::std::string* hashcode) {
  if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
    delete hashcode_;
  }
  if (hashcode) {
    set_has_hashcode();
    hashcode_ = hashcode;
  } else {
    clear_has_hashcode();
    hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 17;
inline bool JK_ResourceInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_ResourceInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_ResourceInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_ResourceInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_ResourceInfo::vercode() const {
  return vercode_;
}
inline void JK_ResourceInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// -------------------------------------------------------------------

// JK_SealRuleInfo

// required int32 SealRuleID = 1;
inline bool JK_SealRuleInfo::has_sealruleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_SealRuleInfo::set_has_sealruleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_SealRuleInfo::clear_has_sealruleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_SealRuleInfo::clear_sealruleid() {
  sealruleid_ = 0;
  clear_has_sealruleid();
}
inline ::google::protobuf::int32 JK_SealRuleInfo::sealruleid() const {
  return sealruleid_;
}
inline void JK_SealRuleInfo::set_sealruleid(::google::protobuf::int32 value) {
  set_has_sealruleid();
  sealruleid_ = value;
}

// required bool IsDel = 2;
inline bool JK_SealRuleInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_SealRuleInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_SealRuleInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_SealRuleInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_SealRuleInfo::isdel() const {
  return isdel_;
}
inline void JK_SealRuleInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 VisibleSealID = 3;
inline bool JK_SealRuleInfo::has_visiblesealid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_SealRuleInfo::set_has_visiblesealid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_SealRuleInfo::clear_has_visiblesealid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_SealRuleInfo::clear_visiblesealid() {
  visiblesealid_ = 0;
  clear_has_visiblesealid();
}
inline ::google::protobuf::int32 JK_SealRuleInfo::visiblesealid() const {
  return visiblesealid_;
}
inline void JK_SealRuleInfo::set_visiblesealid(::google::protobuf::int32 value) {
  set_has_visiblesealid();
  visiblesealid_ = value;
}

// required int32 InvisibleSealID = 4;
inline bool JK_SealRuleInfo::has_invisiblesealid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_SealRuleInfo::set_has_invisiblesealid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_SealRuleInfo::clear_has_invisiblesealid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_SealRuleInfo::clear_invisiblesealid() {
  invisiblesealid_ = 0;
  clear_has_invisiblesealid();
}
inline ::google::protobuf::int32 JK_SealRuleInfo::invisiblesealid() const {
  return invisiblesealid_;
}
inline void JK_SealRuleInfo::set_invisiblesealid(::google::protobuf::int32 value) {
  set_has_invisiblesealid();
  invisiblesealid_ = value;
}

// required double VisPreMill = 5;
inline bool JK_SealRuleInfo::has_vispremill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_SealRuleInfo::set_has_vispremill() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_SealRuleInfo::clear_has_vispremill() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_SealRuleInfo::clear_vispremill() {
  vispremill_ = 0;
  clear_has_vispremill();
}
inline double JK_SealRuleInfo::vispremill() const {
  return vispremill_;
}
inline void JK_SealRuleInfo::set_vispremill(double value) {
  set_has_vispremill();
  vispremill_ = value;
}

// required double InvisPreMill = 6;
inline bool JK_SealRuleInfo::has_invispremill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_SealRuleInfo::set_has_invispremill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_SealRuleInfo::clear_has_invispremill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_SealRuleInfo::clear_invispremill() {
  invispremill_ = 0;
  clear_has_invispremill();
}
inline double JK_SealRuleInfo::invispremill() const {
  return invispremill_;
}
inline void JK_SealRuleInfo::set_invispremill(double value) {
  set_has_invispremill();
  invispremill_ = value;
}

// required int32 STypeID = 7;
inline bool JK_SealRuleInfo::has_stypeid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_SealRuleInfo::set_has_stypeid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_SealRuleInfo::clear_has_stypeid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_SealRuleInfo::clear_stypeid() {
  stypeid_ = 0;
  clear_has_stypeid();
}
inline ::google::protobuf::int32 JK_SealRuleInfo::stypeid() const {
  return stypeid_;
}
inline void JK_SealRuleInfo::set_stypeid(::google::protobuf::int32 value) {
  set_has_stypeid();
  stypeid_ = value;
}

// required string SealRuleName = 8;
inline bool JK_SealRuleInfo::has_sealrulename() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_SealRuleInfo::set_has_sealrulename() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_SealRuleInfo::clear_has_sealrulename() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_SealRuleInfo::clear_sealrulename() {
  if (sealrulename_ != &::google::protobuf::internal::kEmptyString) {
    sealrulename_->clear();
  }
  clear_has_sealrulename();
}
inline const ::std::string& JK_SealRuleInfo::sealrulename() const {
  return *sealrulename_;
}
inline void JK_SealRuleInfo::set_sealrulename(const ::std::string& value) {
  set_has_sealrulename();
  if (sealrulename_ == &::google::protobuf::internal::kEmptyString) {
    sealrulename_ = new ::std::string;
  }
  sealrulename_->assign(value);
}
inline void JK_SealRuleInfo::set_sealrulename(const char* value) {
  set_has_sealrulename();
  if (sealrulename_ == &::google::protobuf::internal::kEmptyString) {
    sealrulename_ = new ::std::string;
  }
  sealrulename_->assign(value);
}
inline void JK_SealRuleInfo::set_sealrulename(const char* value, size_t size) {
  set_has_sealrulename();
  if (sealrulename_ == &::google::protobuf::internal::kEmptyString) {
    sealrulename_ = new ::std::string;
  }
  sealrulename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_SealRuleInfo::mutable_sealrulename() {
  set_has_sealrulename();
  if (sealrulename_ == &::google::protobuf::internal::kEmptyString) {
    sealrulename_ = new ::std::string;
  }
  return sealrulename_;
}
inline ::std::string* JK_SealRuleInfo::release_sealrulename() {
  clear_has_sealrulename();
  if (sealrulename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sealrulename_;
    sealrulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_SealRuleInfo::set_allocated_sealrulename(::std::string* sealrulename) {
  if (sealrulename_ != &::google::protobuf::internal::kEmptyString) {
    delete sealrulename_;
  }
  if (sealrulename) {
    set_has_sealrulename();
    sealrulename_ = sealrulename;
  } else {
    clear_has_sealrulename();
    sealrulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 VerCode = 9;
inline bool JK_SealRuleInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_SealRuleInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_SealRuleInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_SealRuleInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_SealRuleInfo::vercode() const {
  return vercode_;
}
inline void JK_SealRuleInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 10;
inline bool JK_SealRuleInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_SealRuleInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_SealRuleInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_SealRuleInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_SealRuleInfo::factoryid() const {
  return factoryid_;
}
inline void JK_SealRuleInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 11;
inline bool JK_SealRuleInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_SealRuleInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_SealRuleInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_SealRuleInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_SealRuleInfo::creatorid() const {
  return creatorid_;
}
inline void JK_SealRuleInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 12;
inline bool JK_SealRuleInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_SealRuleInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_SealRuleInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_SealRuleInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_SealRuleInfo::updaterid() const {
  return updaterid_;
}
inline void JK_SealRuleInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 13;
inline bool JK_SealRuleInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_SealRuleInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_SealRuleInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_SealRuleInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_SealRuleInfo::createtime() const {
  return createtime_;
}
inline void JK_SealRuleInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 14;
inline bool JK_SealRuleInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_SealRuleInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_SealRuleInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_SealRuleInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_SealRuleInfo::updatetime() const {
  return updatetime_;
}
inline void JK_SealRuleInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_SysConfigInfo

// required int32 FactoryID = 1;
inline bool JK_SysConfigInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_SysConfigInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_SysConfigInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_SysConfigInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_SysConfigInfo::factoryid() const {
  return factoryid_;
}
inline void JK_SysConfigInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 2;
inline bool JK_SysConfigInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_SysConfigInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_SysConfigInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_SysConfigInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_SysConfigInfo::vercode() const {
  return vercode_;
}
inline void JK_SysConfigInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 ConfigID = 3;
inline bool JK_SysConfigInfo::has_configid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_SysConfigInfo::set_has_configid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_SysConfigInfo::clear_has_configid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_SysConfigInfo::clear_configid() {
  configid_ = 0;
  clear_has_configid();
}
inline ::google::protobuf::int32 JK_SysConfigInfo::configid() const {
  return configid_;
}
inline void JK_SysConfigInfo::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// required double TableFrontLen = 4;
inline bool JK_SysConfigInfo::has_tablefrontlen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_SysConfigInfo::set_has_tablefrontlen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_SysConfigInfo::clear_has_tablefrontlen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_SysConfigInfo::clear_tablefrontlen() {
  tablefrontlen_ = 0;
  clear_has_tablefrontlen();
}
inline double JK_SysConfigInfo::tablefrontlen() const {
  return tablefrontlen_;
}
inline void JK_SysConfigInfo::set_tablefrontlen(double value) {
  set_has_tablefrontlen();
  tablefrontlen_ = value;
}

// required double TableSideLen = 5;
inline bool JK_SysConfigInfo::has_tablesidelen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_SysConfigInfo::set_has_tablesidelen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_SysConfigInfo::clear_has_tablesidelen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_SysConfigInfo::clear_tablesidelen() {
  tablesidelen_ = 0;
  clear_has_tablesidelen();
}
inline double JK_SysConfigInfo::tablesidelen() const {
  return tablesidelen_;
}
inline void JK_SysConfigInfo::set_tablesidelen(double value) {
  set_has_tablesidelen();
  tablesidelen_ = value;
}

// required double BaseCabDefaultYPos = 6;
inline bool JK_SysConfigInfo::has_basecabdefaultypos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_SysConfigInfo::set_has_basecabdefaultypos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_SysConfigInfo::clear_has_basecabdefaultypos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_SysConfigInfo::clear_basecabdefaultypos() {
  basecabdefaultypos_ = 0;
  clear_has_basecabdefaultypos();
}
inline double JK_SysConfigInfo::basecabdefaultypos() const {
  return basecabdefaultypos_;
}
inline void JK_SysConfigInfo::set_basecabdefaultypos(double value) {
  set_has_basecabdefaultypos();
  basecabdefaultypos_ = value;
}

// required double BaseCabSideLen = 7;
inline bool JK_SysConfigInfo::has_basecabsidelen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_SysConfigInfo::set_has_basecabsidelen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_SysConfigInfo::clear_has_basecabsidelen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_SysConfigInfo::clear_basecabsidelen() {
  basecabsidelen_ = 0;
  clear_has_basecabsidelen();
}
inline double JK_SysConfigInfo::basecabsidelen() const {
  return basecabsidelen_;
}
inline void JK_SysConfigInfo::set_basecabsidelen(double value) {
  set_has_basecabsidelen();
  basecabsidelen_ = value;
}

// required double WallCabDefaultYPos = 8;
inline bool JK_SysConfigInfo::has_wallcabdefaultypos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_SysConfigInfo::set_has_wallcabdefaultypos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_SysConfigInfo::clear_has_wallcabdefaultypos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_SysConfigInfo::clear_wallcabdefaultypos() {
  wallcabdefaultypos_ = 0;
  clear_has_wallcabdefaultypos();
}
inline double JK_SysConfigInfo::wallcabdefaultypos() const {
  return wallcabdefaultypos_;
}
inline void JK_SysConfigInfo::set_wallcabdefaultypos(double value) {
  set_has_wallcabdefaultypos();
  wallcabdefaultypos_ = value;
}

// required double WallCabSideLen = 9;
inline bool JK_SysConfigInfo::has_wallcabsidelen() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_SysConfigInfo::set_has_wallcabsidelen() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_SysConfigInfo::clear_has_wallcabsidelen() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_SysConfigInfo::clear_wallcabsidelen() {
  wallcabsidelen_ = 0;
  clear_has_wallcabsidelen();
}
inline double JK_SysConfigInfo::wallcabsidelen() const {
  return wallcabsidelen_;
}
inline void JK_SysConfigInfo::set_wallcabsidelen(double value) {
  set_has_wallcabsidelen();
  wallcabsidelen_ = value;
}

// required double ToekickFrontLen = 10;
inline bool JK_SysConfigInfo::has_toekickfrontlen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_SysConfigInfo::set_has_toekickfrontlen() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_SysConfigInfo::clear_has_toekickfrontlen() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_SysConfigInfo::clear_toekickfrontlen() {
  toekickfrontlen_ = 0;
  clear_has_toekickfrontlen();
}
inline double JK_SysConfigInfo::toekickfrontlen() const {
  return toekickfrontlen_;
}
inline void JK_SysConfigInfo::set_toekickfrontlen(double value) {
  set_has_toekickfrontlen();
  toekickfrontlen_ = value;
}

// required double DefaultBarHeight = 11;
inline bool JK_SysConfigInfo::has_defaultbarheight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultbarheight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_SysConfigInfo::clear_has_defaultbarheight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_SysConfigInfo::clear_defaultbarheight() {
  defaultbarheight_ = 0;
  clear_has_defaultbarheight();
}
inline double JK_SysConfigInfo::defaultbarheight() const {
  return defaultbarheight_;
}
inline void JK_SysConfigInfo::set_defaultbarheight(double value) {
  set_has_defaultbarheight();
  defaultbarheight_ = value;
}

// required double DefaultSealExtraLen = 12;
inline bool JK_SysConfigInfo::has_defaultsealextralen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultsealextralen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_SysConfigInfo::clear_has_defaultsealextralen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_SysConfigInfo::clear_defaultsealextralen() {
  defaultsealextralen_ = 0;
  clear_has_defaultsealextralen();
}
inline double JK_SysConfigInfo::defaultsealextralen() const {
  return defaultsealextralen_;
}
inline void JK_SysConfigInfo::set_defaultsealextralen(double value) {
  set_has_defaultsealextralen();
  defaultsealextralen_ = value;
}

// required double DefaultSealPreMillLen = 13;
inline bool JK_SysConfigInfo::has_defaultsealpremilllen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultsealpremilllen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_SysConfigInfo::clear_has_defaultsealpremilllen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_SysConfigInfo::clear_defaultsealpremilllen() {
  defaultsealpremilllen_ = 0;
  clear_has_defaultsealpremilllen();
}
inline double JK_SysConfigInfo::defaultsealpremilllen() const {
  return defaultsealpremilllen_;
}
inline void JK_SysConfigInfo::set_defaultsealpremilllen(double value) {
  set_has_defaultsealpremilllen();
  defaultsealpremilllen_ = value;
}

// required double ShelfDefaultYPos = 14;
inline bool JK_SysConfigInfo::has_shelfdefaultypos() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_SysConfigInfo::set_has_shelfdefaultypos() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_SysConfigInfo::clear_has_shelfdefaultypos() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_SysConfigInfo::clear_shelfdefaultypos() {
  shelfdefaultypos_ = 0;
  clear_has_shelfdefaultypos();
}
inline double JK_SysConfigInfo::shelfdefaultypos() const {
  return shelfdefaultypos_;
}
inline void JK_SysConfigInfo::set_shelfdefaultypos(double value) {
  set_has_shelfdefaultypos();
  shelfdefaultypos_ = value;
}

// required double BGPanelDefaultYPos = 15;
inline bool JK_SysConfigInfo::has_bgpaneldefaultypos() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_SysConfigInfo::set_has_bgpaneldefaultypos() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_SysConfigInfo::clear_has_bgpaneldefaultypos() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_SysConfigInfo::clear_bgpaneldefaultypos() {
  bgpaneldefaultypos_ = 0;
  clear_has_bgpaneldefaultypos();
}
inline double JK_SysConfigInfo::bgpaneldefaultypos() const {
  return bgpaneldefaultypos_;
}
inline void JK_SysConfigInfo::set_bgpaneldefaultypos(double value) {
  set_has_bgpaneldefaultypos();
  bgpaneldefaultypos_ = value;
}

// required double TableToCabDefaultYLen = 16;
inline bool JK_SysConfigInfo::has_tabletocabdefaultylen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JK_SysConfigInfo::set_has_tabletocabdefaultylen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JK_SysConfigInfo::clear_has_tabletocabdefaultylen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JK_SysConfigInfo::clear_tabletocabdefaultylen() {
  tabletocabdefaultylen_ = 0;
  clear_has_tabletocabdefaultylen();
}
inline double JK_SysConfigInfo::tabletocabdefaultylen() const {
  return tabletocabdefaultylen_;
}
inline void JK_SysConfigInfo::set_tabletocabdefaultylen(double value) {
  set_has_tabletocabdefaultylen();
  tabletocabdefaultylen_ = value;
}

// required double DefaultBaseCabinetXLen = 17;
inline bool JK_SysConfigInfo::has_defaultbasecabinetxlen() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultbasecabinetxlen() {
  _has_bits_[0] |= 0x00010000u;
}
inline void JK_SysConfigInfo::clear_has_defaultbasecabinetxlen() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void JK_SysConfigInfo::clear_defaultbasecabinetxlen() {
  defaultbasecabinetxlen_ = 0;
  clear_has_defaultbasecabinetxlen();
}
inline double JK_SysConfigInfo::defaultbasecabinetxlen() const {
  return defaultbasecabinetxlen_;
}
inline void JK_SysConfigInfo::set_defaultbasecabinetxlen(double value) {
  set_has_defaultbasecabinetxlen();
  defaultbasecabinetxlen_ = value;
}

// required double DefaultBaseCabinetYLen = 18;
inline bool JK_SysConfigInfo::has_defaultbasecabinetylen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultbasecabinetylen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JK_SysConfigInfo::clear_has_defaultbasecabinetylen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JK_SysConfigInfo::clear_defaultbasecabinetylen() {
  defaultbasecabinetylen_ = 0;
  clear_has_defaultbasecabinetylen();
}
inline double JK_SysConfigInfo::defaultbasecabinetylen() const {
  return defaultbasecabinetylen_;
}
inline void JK_SysConfigInfo::set_defaultbasecabinetylen(double value) {
  set_has_defaultbasecabinetylen();
  defaultbasecabinetylen_ = value;
}

// required double DefaultBaseCabinetZLen = 19;
inline bool JK_SysConfigInfo::has_defaultbasecabinetzlen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultbasecabinetzlen() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JK_SysConfigInfo::clear_has_defaultbasecabinetzlen() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JK_SysConfigInfo::clear_defaultbasecabinetzlen() {
  defaultbasecabinetzlen_ = 0;
  clear_has_defaultbasecabinetzlen();
}
inline double JK_SysConfigInfo::defaultbasecabinetzlen() const {
  return defaultbasecabinetzlen_;
}
inline void JK_SysConfigInfo::set_defaultbasecabinetzlen(double value) {
  set_has_defaultbasecabinetzlen();
  defaultbasecabinetzlen_ = value;
}

// required double DefaultWallCabinetXLen = 20;
inline bool JK_SysConfigInfo::has_defaultwallcabinetxlen() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultwallcabinetxlen() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JK_SysConfigInfo::clear_has_defaultwallcabinetxlen() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JK_SysConfigInfo::clear_defaultwallcabinetxlen() {
  defaultwallcabinetxlen_ = 0;
  clear_has_defaultwallcabinetxlen();
}
inline double JK_SysConfigInfo::defaultwallcabinetxlen() const {
  return defaultwallcabinetxlen_;
}
inline void JK_SysConfigInfo::set_defaultwallcabinetxlen(double value) {
  set_has_defaultwallcabinetxlen();
  defaultwallcabinetxlen_ = value;
}

// required double DefaultWallCabinetYLen = 21;
inline bool JK_SysConfigInfo::has_defaultwallcabinetylen() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultwallcabinetylen() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JK_SysConfigInfo::clear_has_defaultwallcabinetylen() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JK_SysConfigInfo::clear_defaultwallcabinetylen() {
  defaultwallcabinetylen_ = 0;
  clear_has_defaultwallcabinetylen();
}
inline double JK_SysConfigInfo::defaultwallcabinetylen() const {
  return defaultwallcabinetylen_;
}
inline void JK_SysConfigInfo::set_defaultwallcabinetylen(double value) {
  set_has_defaultwallcabinetylen();
  defaultwallcabinetylen_ = value;
}

// required double DefaultWallCabinetZLen = 22;
inline bool JK_SysConfigInfo::has_defaultwallcabinetzlen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultwallcabinetzlen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JK_SysConfigInfo::clear_has_defaultwallcabinetzlen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JK_SysConfigInfo::clear_defaultwallcabinetzlen() {
  defaultwallcabinetzlen_ = 0;
  clear_has_defaultwallcabinetzlen();
}
inline double JK_SysConfigInfo::defaultwallcabinetzlen() const {
  return defaultwallcabinetzlen_;
}
inline void JK_SysConfigInfo::set_defaultwallcabinetzlen(double value) {
  set_has_defaultwallcabinetzlen();
  defaultwallcabinetzlen_ = value;
}

// required double DefaultLCabinetXLen = 23;
inline bool JK_SysConfigInfo::has_defaultlcabinetxlen() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultlcabinetxlen() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JK_SysConfigInfo::clear_has_defaultlcabinetxlen() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JK_SysConfigInfo::clear_defaultlcabinetxlen() {
  defaultlcabinetxlen_ = 0;
  clear_has_defaultlcabinetxlen();
}
inline double JK_SysConfigInfo::defaultlcabinetxlen() const {
  return defaultlcabinetxlen_;
}
inline void JK_SysConfigInfo::set_defaultlcabinetxlen(double value) {
  set_has_defaultlcabinetxlen();
  defaultlcabinetxlen_ = value;
}

// required double DefaultLCabinetZLen = 24;
inline bool JK_SysConfigInfo::has_defaultlcabinetzlen() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultlcabinetzlen() {
  _has_bits_[0] |= 0x00800000u;
}
inline void JK_SysConfigInfo::clear_has_defaultlcabinetzlen() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void JK_SysConfigInfo::clear_defaultlcabinetzlen() {
  defaultlcabinetzlen_ = 0;
  clear_has_defaultlcabinetzlen();
}
inline double JK_SysConfigInfo::defaultlcabinetzlen() const {
  return defaultlcabinetzlen_;
}
inline void JK_SysConfigInfo::set_defaultlcabinetzlen(double value) {
  set_has_defaultlcabinetzlen();
  defaultlcabinetzlen_ = value;
}

// required double DefaultCabinetBoardThick = 25;
inline bool JK_SysConfigInfo::has_defaultcabinetboardthick() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultcabinetboardthick() {
  _has_bits_[0] |= 0x01000000u;
}
inline void JK_SysConfigInfo::clear_has_defaultcabinetboardthick() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void JK_SysConfigInfo::clear_defaultcabinetboardthick() {
  defaultcabinetboardthick_ = 0;
  clear_has_defaultcabinetboardthick();
}
inline double JK_SysConfigInfo::defaultcabinetboardthick() const {
  return defaultcabinetboardthick_;
}
inline void JK_SysConfigInfo::set_defaultcabinetboardthick(double value) {
  set_has_defaultcabinetboardthick();
  defaultcabinetboardthick_ = value;
}

// required double DefaultDoorBoardThick = 26;
inline bool JK_SysConfigInfo::has_defaultdoorboardthick() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultdoorboardthick() {
  _has_bits_[0] |= 0x02000000u;
}
inline void JK_SysConfigInfo::clear_has_defaultdoorboardthick() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void JK_SysConfigInfo::clear_defaultdoorboardthick() {
  defaultdoorboardthick_ = 0;
  clear_has_defaultdoorboardthick();
}
inline double JK_SysConfigInfo::defaultdoorboardthick() const {
  return defaultdoorboardthick_;
}
inline void JK_SysConfigInfo::set_defaultdoorboardthick(double value) {
  set_has_defaultdoorboardthick();
  defaultdoorboardthick_ = value;
}

// required double DefaultThinBoardThick = 27;
inline bool JK_SysConfigInfo::has_defaultthinboardthick() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultthinboardthick() {
  _has_bits_[0] |= 0x04000000u;
}
inline void JK_SysConfigInfo::clear_has_defaultthinboardthick() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void JK_SysConfigInfo::clear_defaultthinboardthick() {
  defaultthinboardthick_ = 0;
  clear_has_defaultthinboardthick();
}
inline double JK_SysConfigInfo::defaultthinboardthick() const {
  return defaultthinboardthick_;
}
inline void JK_SysConfigInfo::set_defaultthinboardthick(double value) {
  set_has_defaultthinboardthick();
  defaultthinboardthick_ = value;
}

// required double DefaultDecorLineHeight = 28;
inline bool JK_SysConfigInfo::has_defaultdecorlineheight() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultdecorlineheight() {
  _has_bits_[0] |= 0x08000000u;
}
inline void JK_SysConfigInfo::clear_has_defaultdecorlineheight() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void JK_SysConfigInfo::clear_defaultdecorlineheight() {
  defaultdecorlineheight_ = 0;
  clear_has_defaultdecorlineheight();
}
inline double JK_SysConfigInfo::defaultdecorlineheight() const {
  return defaultdecorlineheight_;
}
inline void JK_SysConfigInfo::set_defaultdecorlineheight(double value) {
  set_has_defaultdecorlineheight();
  defaultdecorlineheight_ = value;
}

// required double DefaultDrawerXLen = 29;
inline bool JK_SysConfigInfo::has_defaultdrawerxlen() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultdrawerxlen() {
  _has_bits_[0] |= 0x10000000u;
}
inline void JK_SysConfigInfo::clear_has_defaultdrawerxlen() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void JK_SysConfigInfo::clear_defaultdrawerxlen() {
  defaultdrawerxlen_ = 0;
  clear_has_defaultdrawerxlen();
}
inline double JK_SysConfigInfo::defaultdrawerxlen() const {
  return defaultdrawerxlen_;
}
inline void JK_SysConfigInfo::set_defaultdrawerxlen(double value) {
  set_has_defaultdrawerxlen();
  defaultdrawerxlen_ = value;
}

// required double DefaultDrawerYLen = 30;
inline bool JK_SysConfigInfo::has_defaultdrawerylen() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultdrawerylen() {
  _has_bits_[0] |= 0x20000000u;
}
inline void JK_SysConfigInfo::clear_has_defaultdrawerylen() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void JK_SysConfigInfo::clear_defaultdrawerylen() {
  defaultdrawerylen_ = 0;
  clear_has_defaultdrawerylen();
}
inline double JK_SysConfigInfo::defaultdrawerylen() const {
  return defaultdrawerylen_;
}
inline void JK_SysConfigInfo::set_defaultdrawerylen(double value) {
  set_has_defaultdrawerylen();
  defaultdrawerylen_ = value;
}

// required double DefaultDrawerZLen = 31;
inline bool JK_SysConfigInfo::has_defaultdrawerzlen() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void JK_SysConfigInfo::set_has_defaultdrawerzlen() {
  _has_bits_[0] |= 0x40000000u;
}
inline void JK_SysConfigInfo::clear_has_defaultdrawerzlen() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void JK_SysConfigInfo::clear_defaultdrawerzlen() {
  defaultdrawerzlen_ = 0;
  clear_has_defaultdrawerzlen();
}
inline double JK_SysConfigInfo::defaultdrawerzlen() const {
  return defaultdrawerzlen_;
}
inline void JK_SysConfigInfo::set_defaultdrawerzlen(double value) {
  set_has_defaultdrawerzlen();
  defaultdrawerzlen_ = value;
}

// required int32 CreatorID = 32;
inline bool JK_SysConfigInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void JK_SysConfigInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void JK_SysConfigInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void JK_SysConfigInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_SysConfigInfo::creatorid() const {
  return creatorid_;
}
inline void JK_SysConfigInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 33;
inline bool JK_SysConfigInfo::has_updaterid() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void JK_SysConfigInfo::set_has_updaterid() {
  _has_bits_[1] |= 0x00000001u;
}
inline void JK_SysConfigInfo::clear_has_updaterid() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void JK_SysConfigInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_SysConfigInfo::updaterid() const {
  return updaterid_;
}
inline void JK_SysConfigInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 34;
inline bool JK_SysConfigInfo::has_createtime() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void JK_SysConfigInfo::set_has_createtime() {
  _has_bits_[1] |= 0x00000002u;
}
inline void JK_SysConfigInfo::clear_has_createtime() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void JK_SysConfigInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_SysConfigInfo::createtime() const {
  return createtime_;
}
inline void JK_SysConfigInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 35;
inline bool JK_SysConfigInfo::has_updatetime() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void JK_SysConfigInfo::set_has_updatetime() {
  _has_bits_[1] |= 0x00000004u;
}
inline void JK_SysConfigInfo::clear_has_updatetime() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void JK_SysConfigInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_SysConfigInfo::updatetime() const {
  return updatetime_;
}
inline void JK_SysConfigInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_SysRuleConfigInfo

// required int32 FactoryID = 1;
inline bool JK_SysRuleConfigInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_SysRuleConfigInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_SysRuleConfigInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_SysRuleConfigInfo::factoryid() const {
  return factoryid_;
}
inline void JK_SysRuleConfigInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 2;
inline bool JK_SysRuleConfigInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_SysRuleConfigInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_SysRuleConfigInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_SysRuleConfigInfo::vercode() const {
  return vercode_;
}
inline void JK_SysRuleConfigInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required bool IsDel = 3;
inline bool JK_SysRuleConfigInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_SysRuleConfigInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_SysRuleConfigInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_SysRuleConfigInfo::isdel() const {
  return isdel_;
}
inline void JK_SysRuleConfigInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 RuleConfigID = 4;
inline bool JK_SysRuleConfigInfo::has_ruleconfigid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_ruleconfigid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_SysRuleConfigInfo::clear_has_ruleconfigid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_SysRuleConfigInfo::clear_ruleconfigid() {
  ruleconfigid_ = 0;
  clear_has_ruleconfigid();
}
inline ::google::protobuf::int32 JK_SysRuleConfigInfo::ruleconfigid() const {
  return ruleconfigid_;
}
inline void JK_SysRuleConfigInfo::set_ruleconfigid(::google::protobuf::int32 value) {
  set_has_ruleconfigid();
  ruleconfigid_ = value;
}

// required int32 RuleTypeID = 5;
inline bool JK_SysRuleConfigInfo::has_ruletypeid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_ruletypeid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_SysRuleConfigInfo::clear_has_ruletypeid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_SysRuleConfigInfo::clear_ruletypeid() {
  ruletypeid_ = 0;
  clear_has_ruletypeid();
}
inline ::google::protobuf::int32 JK_SysRuleConfigInfo::ruletypeid() const {
  return ruletypeid_;
}
inline void JK_SysRuleConfigInfo::set_ruletypeid(::google::protobuf::int32 value) {
  set_has_ruletypeid();
  ruletypeid_ = value;
}

// required int32 CabType = 6;
inline bool JK_SysRuleConfigInfo::has_cabtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_cabtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_SysRuleConfigInfo::clear_has_cabtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_SysRuleConfigInfo::clear_cabtype() {
  cabtype_ = 0;
  clear_has_cabtype();
}
inline ::google::protobuf::int32 JK_SysRuleConfigInfo::cabtype() const {
  return cabtype_;
}
inline void JK_SysRuleConfigInfo::set_cabtype(::google::protobuf::int32 value) {
  set_has_cabtype();
  cabtype_ = value;
}

// required double MinXLen = 7;
inline bool JK_SysRuleConfigInfo::has_minxlen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_minxlen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_SysRuleConfigInfo::clear_has_minxlen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_SysRuleConfigInfo::clear_minxlen() {
  minxlen_ = 0;
  clear_has_minxlen();
}
inline double JK_SysRuleConfigInfo::minxlen() const {
  return minxlen_;
}
inline void JK_SysRuleConfigInfo::set_minxlen(double value) {
  set_has_minxlen();
  minxlen_ = value;
}

// required double MinYLen = 8;
inline bool JK_SysRuleConfigInfo::has_minylen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_minylen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_SysRuleConfigInfo::clear_has_minylen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_SysRuleConfigInfo::clear_minylen() {
  minylen_ = 0;
  clear_has_minylen();
}
inline double JK_SysRuleConfigInfo::minylen() const {
  return minylen_;
}
inline void JK_SysRuleConfigInfo::set_minylen(double value) {
  set_has_minylen();
  minylen_ = value;
}

// required double MaxXLen = 9;
inline bool JK_SysRuleConfigInfo::has_maxxlen() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_maxxlen() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_SysRuleConfigInfo::clear_has_maxxlen() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_SysRuleConfigInfo::clear_maxxlen() {
  maxxlen_ = 0;
  clear_has_maxxlen();
}
inline double JK_SysRuleConfigInfo::maxxlen() const {
  return maxxlen_;
}
inline void JK_SysRuleConfigInfo::set_maxxlen(double value) {
  set_has_maxxlen();
  maxxlen_ = value;
}

// required double MaxYLen = 10;
inline bool JK_SysRuleConfigInfo::has_maxylen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_maxylen() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_SysRuleConfigInfo::clear_has_maxylen() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_SysRuleConfigInfo::clear_maxylen() {
  maxylen_ = 0;
  clear_has_maxylen();
}
inline double JK_SysRuleConfigInfo::maxylen() const {
  return maxylen_;
}
inline void JK_SysRuleConfigInfo::set_maxylen(double value) {
  set_has_maxylen();
  maxylen_ = value;
}

// required int32 UseCount = 11;
inline bool JK_SysRuleConfigInfo::has_usecount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_usecount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_SysRuleConfigInfo::clear_has_usecount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_SysRuleConfigInfo::clear_usecount() {
  usecount_ = 0;
  clear_has_usecount();
}
inline ::google::protobuf::int32 JK_SysRuleConfigInfo::usecount() const {
  return usecount_;
}
inline void JK_SysRuleConfigInfo::set_usecount(::google::protobuf::int32 value) {
  set_has_usecount();
  usecount_ = value;
}

// required int32 CreatorID = 12;
inline bool JK_SysRuleConfigInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_SysRuleConfigInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_SysRuleConfigInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_SysRuleConfigInfo::creatorid() const {
  return creatorid_;
}
inline void JK_SysRuleConfigInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 13;
inline bool JK_SysRuleConfigInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_SysRuleConfigInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_SysRuleConfigInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_SysRuleConfigInfo::updaterid() const {
  return updaterid_;
}
inline void JK_SysRuleConfigInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 14;
inline bool JK_SysRuleConfigInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_SysRuleConfigInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_SysRuleConfigInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_SysRuleConfigInfo::createtime() const {
  return createtime_;
}
inline void JK_SysRuleConfigInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 15;
inline bool JK_SysRuleConfigInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JK_SysRuleConfigInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JK_SysRuleConfigInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JK_SysRuleConfigInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_SysRuleConfigInfo::updatetime() const {
  return updatetime_;
}
inline void JK_SysRuleConfigInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_SysRuleTypeInfo

// required int32 FactoryID = 1;
inline bool JK_SysRuleTypeInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_SysRuleTypeInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_SysRuleTypeInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_SysRuleTypeInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_SysRuleTypeInfo::factoryid() const {
  return factoryid_;
}
inline void JK_SysRuleTypeInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 2;
inline bool JK_SysRuleTypeInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_SysRuleTypeInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_SysRuleTypeInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_SysRuleTypeInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_SysRuleTypeInfo::vercode() const {
  return vercode_;
}
inline void JK_SysRuleTypeInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 RuleTypeID = 3;
inline bool JK_SysRuleTypeInfo::has_ruletypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_SysRuleTypeInfo::set_has_ruletypeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_SysRuleTypeInfo::clear_has_ruletypeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_SysRuleTypeInfo::clear_ruletypeid() {
  ruletypeid_ = 0;
  clear_has_ruletypeid();
}
inline ::google::protobuf::int32 JK_SysRuleTypeInfo::ruletypeid() const {
  return ruletypeid_;
}
inline void JK_SysRuleTypeInfo::set_ruletypeid(::google::protobuf::int32 value) {
  set_has_ruletypeid();
  ruletypeid_ = value;
}

// required bool IsDel = 4;
inline bool JK_SysRuleTypeInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_SysRuleTypeInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_SysRuleTypeInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_SysRuleTypeInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_SysRuleTypeInfo::isdel() const {
  return isdel_;
}
inline void JK_SysRuleTypeInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required string RuleTypeName = 5;
inline bool JK_SysRuleTypeInfo::has_ruletypename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_SysRuleTypeInfo::set_has_ruletypename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_SysRuleTypeInfo::clear_has_ruletypename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_SysRuleTypeInfo::clear_ruletypename() {
  if (ruletypename_ != &::google::protobuf::internal::kEmptyString) {
    ruletypename_->clear();
  }
  clear_has_ruletypename();
}
inline const ::std::string& JK_SysRuleTypeInfo::ruletypename() const {
  return *ruletypename_;
}
inline void JK_SysRuleTypeInfo::set_ruletypename(const ::std::string& value) {
  set_has_ruletypename();
  if (ruletypename_ == &::google::protobuf::internal::kEmptyString) {
    ruletypename_ = new ::std::string;
  }
  ruletypename_->assign(value);
}
inline void JK_SysRuleTypeInfo::set_ruletypename(const char* value) {
  set_has_ruletypename();
  if (ruletypename_ == &::google::protobuf::internal::kEmptyString) {
    ruletypename_ = new ::std::string;
  }
  ruletypename_->assign(value);
}
inline void JK_SysRuleTypeInfo::set_ruletypename(const char* value, size_t size) {
  set_has_ruletypename();
  if (ruletypename_ == &::google::protobuf::internal::kEmptyString) {
    ruletypename_ = new ::std::string;
  }
  ruletypename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JK_SysRuleTypeInfo::mutable_ruletypename() {
  set_has_ruletypename();
  if (ruletypename_ == &::google::protobuf::internal::kEmptyString) {
    ruletypename_ = new ::std::string;
  }
  return ruletypename_;
}
inline ::std::string* JK_SysRuleTypeInfo::release_ruletypename() {
  clear_has_ruletypename();
  if (ruletypename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ruletypename_;
    ruletypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JK_SysRuleTypeInfo::set_allocated_ruletypename(::std::string* ruletypename) {
  if (ruletypename_ != &::google::protobuf::internal::kEmptyString) {
    delete ruletypename_;
  }
  if (ruletypename) {
    set_has_ruletypename();
    ruletypename_ = ruletypename;
  } else {
    clear_has_ruletypename();
    ruletypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool IsDefault = 6;
inline bool JK_SysRuleTypeInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_SysRuleTypeInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_SysRuleTypeInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_SysRuleTypeInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_SysRuleTypeInfo::isdefault() const {
  return isdefault_;
}
inline void JK_SysRuleTypeInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int32 RType = 7;
inline bool JK_SysRuleTypeInfo::has_rtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_SysRuleTypeInfo::set_has_rtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_SysRuleTypeInfo::clear_has_rtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_SysRuleTypeInfo::clear_rtype() {
  rtype_ = 0;
  clear_has_rtype();
}
inline ::google::protobuf::int32 JK_SysRuleTypeInfo::rtype() const {
  return rtype_;
}
inline void JK_SysRuleTypeInfo::set_rtype(::google::protobuf::int32 value) {
  set_has_rtype();
  rtype_ = value;
}

// required int32 CreatorID = 8;
inline bool JK_SysRuleTypeInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_SysRuleTypeInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_SysRuleTypeInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_SysRuleTypeInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_SysRuleTypeInfo::creatorid() const {
  return creatorid_;
}
inline void JK_SysRuleTypeInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 9;
inline bool JK_SysRuleTypeInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_SysRuleTypeInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_SysRuleTypeInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_SysRuleTypeInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_SysRuleTypeInfo::updaterid() const {
  return updaterid_;
}
inline void JK_SysRuleTypeInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 10;
inline bool JK_SysRuleTypeInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_SysRuleTypeInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_SysRuleTypeInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_SysRuleTypeInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_SysRuleTypeInfo::createtime() const {
  return createtime_;
}
inline void JK_SysRuleTypeInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 11;
inline bool JK_SysRuleTypeInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_SysRuleTypeInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_SysRuleTypeInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_SysRuleTypeInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_SysRuleTypeInfo::updatetime() const {
  return updatetime_;
}
inline void JK_SysRuleTypeInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_TableTopSideInfo

// required int32 TableTopSideID = 1;
inline bool JK_TableTopSideInfo::has_tabletopsideid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JK_TableTopSideInfo::set_has_tabletopsideid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JK_TableTopSideInfo::clear_has_tabletopsideid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JK_TableTopSideInfo::clear_tabletopsideid() {
  tabletopsideid_ = 0;
  clear_has_tabletopsideid();
}
inline ::google::protobuf::int32 JK_TableTopSideInfo::tabletopsideid() const {
  return tabletopsideid_;
}
inline void JK_TableTopSideInfo::set_tabletopsideid(::google::protobuf::int32 value) {
  set_has_tabletopsideid();
  tabletopsideid_ = value;
}

// required int32 TableTopID = 2;
inline bool JK_TableTopSideInfo::has_tabletopid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JK_TableTopSideInfo::set_has_tabletopid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JK_TableTopSideInfo::clear_has_tabletopid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JK_TableTopSideInfo::clear_tabletopid() {
  tabletopid_ = 0;
  clear_has_tabletopid();
}
inline ::google::protobuf::int32 JK_TableTopSideInfo::tabletopid() const {
  return tabletopid_;
}
inline void JK_TableTopSideInfo::set_tabletopid(::google::protobuf::int32 value) {
  set_has_tabletopid();
  tabletopid_ = value;
}

// required bool IsDel = 3;
inline bool JK_TableTopSideInfo::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JK_TableTopSideInfo::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JK_TableTopSideInfo::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JK_TableTopSideInfo::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool JK_TableTopSideInfo::isdel() const {
  return isdel_;
}
inline void JK_TableTopSideInfo::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
}

// required int32 ModelID = 4;
inline bool JK_TableTopSideInfo::has_modelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JK_TableTopSideInfo::set_has_modelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JK_TableTopSideInfo::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JK_TableTopSideInfo::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 JK_TableTopSideInfo::modelid() const {
  return modelid_;
}
inline void JK_TableTopSideInfo::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required int32 ShowID = 5;
inline bool JK_TableTopSideInfo::has_showid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JK_TableTopSideInfo::set_has_showid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JK_TableTopSideInfo::clear_has_showid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JK_TableTopSideInfo::clear_showid() {
  showid_ = 0;
  clear_has_showid();
}
inline ::google::protobuf::int32 JK_TableTopSideInfo::showid() const {
  return showid_;
}
inline void JK_TableTopSideInfo::set_showid(::google::protobuf::int32 value) {
  set_has_showid();
  showid_ = value;
}

// required double SideWidth = 6;
inline bool JK_TableTopSideInfo::has_sidewidth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JK_TableTopSideInfo::set_has_sidewidth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JK_TableTopSideInfo::clear_has_sidewidth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JK_TableTopSideInfo::clear_sidewidth() {
  sidewidth_ = 0;
  clear_has_sidewidth();
}
inline double JK_TableTopSideInfo::sidewidth() const {
  return sidewidth_;
}
inline void JK_TableTopSideInfo::set_sidewidth(double value) {
  set_has_sidewidth();
  sidewidth_ = value;
}

// required int32 MaterialID = 7;
inline bool JK_TableTopSideInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JK_TableTopSideInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JK_TableTopSideInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JK_TableTopSideInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 JK_TableTopSideInfo::materialid() const {
  return materialid_;
}
inline void JK_TableTopSideInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required bool IsDefault = 8;
inline bool JK_TableTopSideInfo::has_isdefault() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JK_TableTopSideInfo::set_has_isdefault() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JK_TableTopSideInfo::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JK_TableTopSideInfo::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool JK_TableTopSideInfo::isdefault() const {
  return isdefault_;
}
inline void JK_TableTopSideInfo::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
}

// required int64 VerCode = 9;
inline bool JK_TableTopSideInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JK_TableTopSideInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JK_TableTopSideInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JK_TableTopSideInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 JK_TableTopSideInfo::vercode() const {
  return vercode_;
}
inline void JK_TableTopSideInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 FactoryID = 10;
inline bool JK_TableTopSideInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JK_TableTopSideInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JK_TableTopSideInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JK_TableTopSideInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 JK_TableTopSideInfo::factoryid() const {
  return factoryid_;
}
inline void JK_TableTopSideInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 CreatorID = 11;
inline bool JK_TableTopSideInfo::has_creatorid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JK_TableTopSideInfo::set_has_creatorid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JK_TableTopSideInfo::clear_has_creatorid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JK_TableTopSideInfo::clear_creatorid() {
  creatorid_ = 0;
  clear_has_creatorid();
}
inline ::google::protobuf::int32 JK_TableTopSideInfo::creatorid() const {
  return creatorid_;
}
inline void JK_TableTopSideInfo::set_creatorid(::google::protobuf::int32 value) {
  set_has_creatorid();
  creatorid_ = value;
}

// required int32 UpdaterID = 12;
inline bool JK_TableTopSideInfo::has_updaterid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JK_TableTopSideInfo::set_has_updaterid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JK_TableTopSideInfo::clear_has_updaterid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JK_TableTopSideInfo::clear_updaterid() {
  updaterid_ = 0;
  clear_has_updaterid();
}
inline ::google::protobuf::int32 JK_TableTopSideInfo::updaterid() const {
  return updaterid_;
}
inline void JK_TableTopSideInfo::set_updaterid(::google::protobuf::int32 value) {
  set_has_updaterid();
  updaterid_ = value;
}

// required int64 CreateTime = 13;
inline bool JK_TableTopSideInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JK_TableTopSideInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JK_TableTopSideInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JK_TableTopSideInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 JK_TableTopSideInfo::createtime() const {
  return createtime_;
}
inline void JK_TableTopSideInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 UpdateTime = 14;
inline bool JK_TableTopSideInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JK_TableTopSideInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JK_TableTopSideInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JK_TableTopSideInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 JK_TableTopSideInfo::updatetime() const {
  return updatetime_;
}
inline void JK_TableTopSideInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// -------------------------------------------------------------------

// JK_Table

// repeated .transMsg.JK_CabBoardMatInfo JK_CabBoardMatInfo = 1;
inline int JK_Table::jk_cabboardmatinfo_size() const {
  return jk_cabboardmatinfo_.size();
}
inline void JK_Table::clear_jk_cabboardmatinfo() {
  jk_cabboardmatinfo_.Clear();
}
inline const ::transMsg::JK_CabBoardMatInfo& JK_Table::jk_cabboardmatinfo(int index) const {
  return jk_cabboardmatinfo_.Get(index);
}
inline ::transMsg::JK_CabBoardMatInfo* JK_Table::mutable_jk_cabboardmatinfo(int index) {
  return jk_cabboardmatinfo_.Mutable(index);
}
inline ::transMsg::JK_CabBoardMatInfo* JK_Table::add_jk_cabboardmatinfo() {
  return jk_cabboardmatinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabBoardMatInfo >&
JK_Table::jk_cabboardmatinfo() const {
  return jk_cabboardmatinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabBoardMatInfo >*
JK_Table::mutable_jk_cabboardmatinfo() {
  return &jk_cabboardmatinfo_;
}

// repeated .transMsg.JK_CabBoardMatSkinInfo JK_CabBoardMatSkinInfo = 2;
inline int JK_Table::jk_cabboardmatskininfo_size() const {
  return jk_cabboardmatskininfo_.size();
}
inline void JK_Table::clear_jk_cabboardmatskininfo() {
  jk_cabboardmatskininfo_.Clear();
}
inline const ::transMsg::JK_CabBoardMatSkinInfo& JK_Table::jk_cabboardmatskininfo(int index) const {
  return jk_cabboardmatskininfo_.Get(index);
}
inline ::transMsg::JK_CabBoardMatSkinInfo* JK_Table::mutable_jk_cabboardmatskininfo(int index) {
  return jk_cabboardmatskininfo_.Mutable(index);
}
inline ::transMsg::JK_CabBoardMatSkinInfo* JK_Table::add_jk_cabboardmatskininfo() {
  return jk_cabboardmatskininfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabBoardMatSkinInfo >&
JK_Table::jk_cabboardmatskininfo() const {
  return jk_cabboardmatskininfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabBoardMatSkinInfo >*
JK_Table::mutable_jk_cabboardmatskininfo() {
  return &jk_cabboardmatskininfo_;
}

// repeated .transMsg.JK_CabDesignBoardSealEdgeInfo JK_CabDesignBoardSealEdgeInfo = 3;
inline int JK_Table::jk_cabdesignboardsealedgeinfo_size() const {
  return jk_cabdesignboardsealedgeinfo_.size();
}
inline void JK_Table::clear_jk_cabdesignboardsealedgeinfo() {
  jk_cabdesignboardsealedgeinfo_.Clear();
}
inline const ::transMsg::JK_CabDesignBoardSealEdgeInfo& JK_Table::jk_cabdesignboardsealedgeinfo(int index) const {
  return jk_cabdesignboardsealedgeinfo_.Get(index);
}
inline ::transMsg::JK_CabDesignBoardSealEdgeInfo* JK_Table::mutable_jk_cabdesignboardsealedgeinfo(int index) {
  return jk_cabdesignboardsealedgeinfo_.Mutable(index);
}
inline ::transMsg::JK_CabDesignBoardSealEdgeInfo* JK_Table::add_jk_cabdesignboardsealedgeinfo() {
  return jk_cabdesignboardsealedgeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignBoardSealEdgeInfo >&
JK_Table::jk_cabdesignboardsealedgeinfo() const {
  return jk_cabdesignboardsealedgeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignBoardSealEdgeInfo >*
JK_Table::mutable_jk_cabdesignboardsealedgeinfo() {
  return &jk_cabdesignboardsealedgeinfo_;
}

// repeated .transMsg.JK_CabDesignBoardSealInfo JK_CabDesignBoardSealInfo = 4;
inline int JK_Table::jk_cabdesignboardsealinfo_size() const {
  return jk_cabdesignboardsealinfo_.size();
}
inline void JK_Table::clear_jk_cabdesignboardsealinfo() {
  jk_cabdesignboardsealinfo_.Clear();
}
inline const ::transMsg::JK_CabDesignBoardSealInfo& JK_Table::jk_cabdesignboardsealinfo(int index) const {
  return jk_cabdesignboardsealinfo_.Get(index);
}
inline ::transMsg::JK_CabDesignBoardSealInfo* JK_Table::mutable_jk_cabdesignboardsealinfo(int index) {
  return jk_cabdesignboardsealinfo_.Mutable(index);
}
inline ::transMsg::JK_CabDesignBoardSealInfo* JK_Table::add_jk_cabdesignboardsealinfo() {
  return jk_cabdesignboardsealinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignBoardSealInfo >&
JK_Table::jk_cabdesignboardsealinfo() const {
  return jk_cabdesignboardsealinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignBoardSealInfo >*
JK_Table::mutable_jk_cabdesignboardsealinfo() {
  return &jk_cabdesignboardsealinfo_;
}

// repeated .transMsg.JK_CabDesignDoorRegionHandleInfo JK_CabDesignDoorRegionHandleInfo = 5;
inline int JK_Table::jk_cabdesigndoorregionhandleinfo_size() const {
  return jk_cabdesigndoorregionhandleinfo_.size();
}
inline void JK_Table::clear_jk_cabdesigndoorregionhandleinfo() {
  jk_cabdesigndoorregionhandleinfo_.Clear();
}
inline const ::transMsg::JK_CabDesignDoorRegionHandleInfo& JK_Table::jk_cabdesigndoorregionhandleinfo(int index) const {
  return jk_cabdesigndoorregionhandleinfo_.Get(index);
}
inline ::transMsg::JK_CabDesignDoorRegionHandleInfo* JK_Table::mutable_jk_cabdesigndoorregionhandleinfo(int index) {
  return jk_cabdesigndoorregionhandleinfo_.Mutable(index);
}
inline ::transMsg::JK_CabDesignDoorRegionHandleInfo* JK_Table::add_jk_cabdesigndoorregionhandleinfo() {
  return jk_cabdesigndoorregionhandleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorRegionHandleInfo >&
JK_Table::jk_cabdesigndoorregionhandleinfo() const {
  return jk_cabdesigndoorregionhandleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorRegionHandleInfo >*
JK_Table::mutable_jk_cabdesigndoorregionhandleinfo() {
  return &jk_cabdesigndoorregionhandleinfo_;
}

// repeated .transMsg.JK_CabDesignDoorRegionInfo JK_CabDesignDoorRegionInfo = 6;
inline int JK_Table::jk_cabdesigndoorregioninfo_size() const {
  return jk_cabdesigndoorregioninfo_.size();
}
inline void JK_Table::clear_jk_cabdesigndoorregioninfo() {
  jk_cabdesigndoorregioninfo_.Clear();
}
inline const ::transMsg::JK_CabDesignDoorRegionInfo& JK_Table::jk_cabdesigndoorregioninfo(int index) const {
  return jk_cabdesigndoorregioninfo_.Get(index);
}
inline ::transMsg::JK_CabDesignDoorRegionInfo* JK_Table::mutable_jk_cabdesigndoorregioninfo(int index) {
  return jk_cabdesigndoorregioninfo_.Mutable(index);
}
inline ::transMsg::JK_CabDesignDoorRegionInfo* JK_Table::add_jk_cabdesigndoorregioninfo() {
  return jk_cabdesigndoorregioninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorRegionInfo >&
JK_Table::jk_cabdesigndoorregioninfo() const {
  return jk_cabdesigndoorregioninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorRegionInfo >*
JK_Table::mutable_jk_cabdesigndoorregioninfo() {
  return &jk_cabdesigndoorregioninfo_;
}

// repeated .transMsg.JK_CabDesignDoorSystemInfo JK_CabDesignDoorSystemInfo = 7;
inline int JK_Table::jk_cabdesigndoorsysteminfo_size() const {
  return jk_cabdesigndoorsysteminfo_.size();
}
inline void JK_Table::clear_jk_cabdesigndoorsysteminfo() {
  jk_cabdesigndoorsysteminfo_.Clear();
}
inline const ::transMsg::JK_CabDesignDoorSystemInfo& JK_Table::jk_cabdesigndoorsysteminfo(int index) const {
  return jk_cabdesigndoorsysteminfo_.Get(index);
}
inline ::transMsg::JK_CabDesignDoorSystemInfo* JK_Table::mutable_jk_cabdesigndoorsysteminfo(int index) {
  return jk_cabdesigndoorsysteminfo_.Mutable(index);
}
inline ::transMsg::JK_CabDesignDoorSystemInfo* JK_Table::add_jk_cabdesigndoorsysteminfo() {
  return jk_cabdesigndoorsysteminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorSystemInfo >&
JK_Table::jk_cabdesigndoorsysteminfo() const {
  return jk_cabdesigndoorsysteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignDoorSystemInfo >*
JK_Table::mutable_jk_cabdesigndoorsysteminfo() {
  return &jk_cabdesigndoorsysteminfo_;
}

// repeated .transMsg.JK_CabDesignFNFittingInfo JK_CabDesignFNFittingInfo = 8;
inline int JK_Table::jk_cabdesignfnfittinginfo_size() const {
  return jk_cabdesignfnfittinginfo_.size();
}
inline void JK_Table::clear_jk_cabdesignfnfittinginfo() {
  jk_cabdesignfnfittinginfo_.Clear();
}
inline const ::transMsg::JK_CabDesignFNFittingInfo& JK_Table::jk_cabdesignfnfittinginfo(int index) const {
  return jk_cabdesignfnfittinginfo_.Get(index);
}
inline ::transMsg::JK_CabDesignFNFittingInfo* JK_Table::mutable_jk_cabdesignfnfittinginfo(int index) {
  return jk_cabdesignfnfittinginfo_.Mutable(index);
}
inline ::transMsg::JK_CabDesignFNFittingInfo* JK_Table::add_jk_cabdesignfnfittinginfo() {
  return jk_cabdesignfnfittinginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFNFittingInfo >&
JK_Table::jk_cabdesignfnfittinginfo() const {
  return jk_cabdesignfnfittinginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFNFittingInfo >*
JK_Table::mutable_jk_cabdesignfnfittinginfo() {
  return &jk_cabdesignfnfittinginfo_;
}

// repeated .transMsg.JK_CabDesignFNFittingMapInfo JK_CabDesignFNFittingMapInfo = 9;
inline int JK_Table::jk_cabdesignfnfittingmapinfo_size() const {
  return jk_cabdesignfnfittingmapinfo_.size();
}
inline void JK_Table::clear_jk_cabdesignfnfittingmapinfo() {
  jk_cabdesignfnfittingmapinfo_.Clear();
}
inline const ::transMsg::JK_CabDesignFNFittingMapInfo& JK_Table::jk_cabdesignfnfittingmapinfo(int index) const {
  return jk_cabdesignfnfittingmapinfo_.Get(index);
}
inline ::transMsg::JK_CabDesignFNFittingMapInfo* JK_Table::mutable_jk_cabdesignfnfittingmapinfo(int index) {
  return jk_cabdesignfnfittingmapinfo_.Mutable(index);
}
inline ::transMsg::JK_CabDesignFNFittingMapInfo* JK_Table::add_jk_cabdesignfnfittingmapinfo() {
  return jk_cabdesignfnfittingmapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFNFittingMapInfo >&
JK_Table::jk_cabdesignfnfittingmapinfo() const {
  return jk_cabdesignfnfittingmapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFNFittingMapInfo >*
JK_Table::mutable_jk_cabdesignfnfittingmapinfo() {
  return &jk_cabdesignfnfittingmapinfo_;
}

// repeated .transMsg.JK_CabDesignFootInfo JK_CabDesignFootInfo = 10;
inline int JK_Table::jk_cabdesignfootinfo_size() const {
  return jk_cabdesignfootinfo_.size();
}
inline void JK_Table::clear_jk_cabdesignfootinfo() {
  jk_cabdesignfootinfo_.Clear();
}
inline const ::transMsg::JK_CabDesignFootInfo& JK_Table::jk_cabdesignfootinfo(int index) const {
  return jk_cabdesignfootinfo_.Get(index);
}
inline ::transMsg::JK_CabDesignFootInfo* JK_Table::mutable_jk_cabdesignfootinfo(int index) {
  return jk_cabdesignfootinfo_.Mutable(index);
}
inline ::transMsg::JK_CabDesignFootInfo* JK_Table::add_jk_cabdesignfootinfo() {
  return jk_cabdesignfootinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFootInfo >&
JK_Table::jk_cabdesignfootinfo() const {
  return jk_cabdesignfootinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignFootInfo >*
JK_Table::mutable_jk_cabdesignfootinfo() {
  return &jk_cabdesignfootinfo_;
}

// repeated .transMsg.JK_CabDesignInfo JK_CabDesignInfo = 11;
inline int JK_Table::jk_cabdesigninfo_size() const {
  return jk_cabdesigninfo_.size();
}
inline void JK_Table::clear_jk_cabdesigninfo() {
  jk_cabdesigninfo_.Clear();
}
inline const ::transMsg::JK_CabDesignInfo& JK_Table::jk_cabdesigninfo(int index) const {
  return jk_cabdesigninfo_.Get(index);
}
inline ::transMsg::JK_CabDesignInfo* JK_Table::mutable_jk_cabdesigninfo(int index) {
  return jk_cabdesigninfo_.Mutable(index);
}
inline ::transMsg::JK_CabDesignInfo* JK_Table::add_jk_cabdesigninfo() {
  return jk_cabdesigninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignInfo >&
JK_Table::jk_cabdesigninfo() const {
  return jk_cabdesigninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignInfo >*
JK_Table::mutable_jk_cabdesigninfo() {
  return &jk_cabdesigninfo_;
}

// repeated .transMsg.JK_CabDesignMatInfo JK_CabDesignMatInfo = 12;
inline int JK_Table::jk_cabdesignmatinfo_size() const {
  return jk_cabdesignmatinfo_.size();
}
inline void JK_Table::clear_jk_cabdesignmatinfo() {
  jk_cabdesignmatinfo_.Clear();
}
inline const ::transMsg::JK_CabDesignMatInfo& JK_Table::jk_cabdesignmatinfo(int index) const {
  return jk_cabdesignmatinfo_.Get(index);
}
inline ::transMsg::JK_CabDesignMatInfo* JK_Table::mutable_jk_cabdesignmatinfo(int index) {
  return jk_cabdesignmatinfo_.Mutable(index);
}
inline ::transMsg::JK_CabDesignMatInfo* JK_Table::add_jk_cabdesignmatinfo() {
  return jk_cabdesignmatinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignMatInfo >&
JK_Table::jk_cabdesignmatinfo() const {
  return jk_cabdesignmatinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabDesignMatInfo >*
JK_Table::mutable_jk_cabdesignmatinfo() {
  return &jk_cabdesignmatinfo_;
}

// repeated .transMsg.JK_CabMatPlanInfo JK_CabMatPlanInfo = 13;
inline int JK_Table::jk_cabmatplaninfo_size() const {
  return jk_cabmatplaninfo_.size();
}
inline void JK_Table::clear_jk_cabmatplaninfo() {
  jk_cabmatplaninfo_.Clear();
}
inline const ::transMsg::JK_CabMatPlanInfo& JK_Table::jk_cabmatplaninfo(int index) const {
  return jk_cabmatplaninfo_.Get(index);
}
inline ::transMsg::JK_CabMatPlanInfo* JK_Table::mutable_jk_cabmatplaninfo(int index) {
  return jk_cabmatplaninfo_.Mutable(index);
}
inline ::transMsg::JK_CabMatPlanInfo* JK_Table::add_jk_cabmatplaninfo() {
  return jk_cabmatplaninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabMatPlanInfo >&
JK_Table::jk_cabmatplaninfo() const {
  return jk_cabmatplaninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabMatPlanInfo >*
JK_Table::mutable_jk_cabmatplaninfo() {
  return &jk_cabmatplaninfo_;
}

// repeated .transMsg.JK_CabStructBoardGapInfo JK_CabStructBoardGapInfo = 14;
inline int JK_Table::jk_cabstructboardgapinfo_size() const {
  return jk_cabstructboardgapinfo_.size();
}
inline void JK_Table::clear_jk_cabstructboardgapinfo() {
  jk_cabstructboardgapinfo_.Clear();
}
inline const ::transMsg::JK_CabStructBoardGapInfo& JK_Table::jk_cabstructboardgapinfo(int index) const {
  return jk_cabstructboardgapinfo_.Get(index);
}
inline ::transMsg::JK_CabStructBoardGapInfo* JK_Table::mutable_jk_cabstructboardgapinfo(int index) {
  return jk_cabstructboardgapinfo_.Mutable(index);
}
inline ::transMsg::JK_CabStructBoardGapInfo* JK_Table::add_jk_cabstructboardgapinfo() {
  return jk_cabstructboardgapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardGapInfo >&
JK_Table::jk_cabstructboardgapinfo() const {
  return jk_cabstructboardgapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardGapInfo >*
JK_Table::mutable_jk_cabstructboardgapinfo() {
  return &jk_cabstructboardgapinfo_;
}

// repeated .transMsg.JK_CabStructBoardInfo JK_CabStructBoardInfo = 15;
inline int JK_Table::jk_cabstructboardinfo_size() const {
  return jk_cabstructboardinfo_.size();
}
inline void JK_Table::clear_jk_cabstructboardinfo() {
  jk_cabstructboardinfo_.Clear();
}
inline const ::transMsg::JK_CabStructBoardInfo& JK_Table::jk_cabstructboardinfo(int index) const {
  return jk_cabstructboardinfo_.Get(index);
}
inline ::transMsg::JK_CabStructBoardInfo* JK_Table::mutable_jk_cabstructboardinfo(int index) {
  return jk_cabstructboardinfo_.Mutable(index);
}
inline ::transMsg::JK_CabStructBoardInfo* JK_Table::add_jk_cabstructboardinfo() {
  return jk_cabstructboardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardInfo >&
JK_Table::jk_cabstructboardinfo() const {
  return jk_cabstructboardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardInfo >*
JK_Table::mutable_jk_cabstructboardinfo() {
  return &jk_cabstructboardinfo_;
}

// repeated .transMsg.JK_CabStructBoardSealInfo JK_CabStructBoardSealInfo = 16;
inline int JK_Table::jk_cabstructboardsealinfo_size() const {
  return jk_cabstructboardsealinfo_.size();
}
inline void JK_Table::clear_jk_cabstructboardsealinfo() {
  jk_cabstructboardsealinfo_.Clear();
}
inline const ::transMsg::JK_CabStructBoardSealInfo& JK_Table::jk_cabstructboardsealinfo(int index) const {
  return jk_cabstructboardsealinfo_.Get(index);
}
inline ::transMsg::JK_CabStructBoardSealInfo* JK_Table::mutable_jk_cabstructboardsealinfo(int index) {
  return jk_cabstructboardsealinfo_.Mutable(index);
}
inline ::transMsg::JK_CabStructBoardSealInfo* JK_Table::add_jk_cabstructboardsealinfo() {
  return jk_cabstructboardsealinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardSealInfo >&
JK_Table::jk_cabstructboardsealinfo() const {
  return jk_cabstructboardsealinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructBoardSealInfo >*
JK_Table::mutable_jk_cabstructboardsealinfo() {
  return &jk_cabstructboardsealinfo_;
}

// repeated .transMsg.JK_CabStructGapInfo JK_CabStructGapInfo = 17;
inline int JK_Table::jk_cabstructgapinfo_size() const {
  return jk_cabstructgapinfo_.size();
}
inline void JK_Table::clear_jk_cabstructgapinfo() {
  jk_cabstructgapinfo_.Clear();
}
inline const ::transMsg::JK_CabStructGapInfo& JK_Table::jk_cabstructgapinfo(int index) const {
  return jk_cabstructgapinfo_.Get(index);
}
inline ::transMsg::JK_CabStructGapInfo* JK_Table::mutable_jk_cabstructgapinfo(int index) {
  return jk_cabstructgapinfo_.Mutable(index);
}
inline ::transMsg::JK_CabStructGapInfo* JK_Table::add_jk_cabstructgapinfo() {
  return jk_cabstructgapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructGapInfo >&
JK_Table::jk_cabstructgapinfo() const {
  return jk_cabstructgapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructGapInfo >*
JK_Table::mutable_jk_cabstructgapinfo() {
  return &jk_cabstructgapinfo_;
}

// repeated .transMsg.JK_CabStructInfo JK_CabStructInfo = 18;
inline int JK_Table::jk_cabstructinfo_size() const {
  return jk_cabstructinfo_.size();
}
inline void JK_Table::clear_jk_cabstructinfo() {
  jk_cabstructinfo_.Clear();
}
inline const ::transMsg::JK_CabStructInfo& JK_Table::jk_cabstructinfo(int index) const {
  return jk_cabstructinfo_.Get(index);
}
inline ::transMsg::JK_CabStructInfo* JK_Table::mutable_jk_cabstructinfo(int index) {
  return jk_cabstructinfo_.Mutable(index);
}
inline ::transMsg::JK_CabStructInfo* JK_Table::add_jk_cabstructinfo() {
  return jk_cabstructinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructInfo >&
JK_Table::jk_cabstructinfo() const {
  return jk_cabstructinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructInfo >*
JK_Table::mutable_jk_cabstructinfo() {
  return &jk_cabstructinfo_;
}

// repeated .transMsg.JK_CabStructMatPlanMapInfo JK_CabStructMatPlanMapInfo = 19;
inline int JK_Table::jk_cabstructmatplanmapinfo_size() const {
  return jk_cabstructmatplanmapinfo_.size();
}
inline void JK_Table::clear_jk_cabstructmatplanmapinfo() {
  jk_cabstructmatplanmapinfo_.Clear();
}
inline const ::transMsg::JK_CabStructMatPlanMapInfo& JK_Table::jk_cabstructmatplanmapinfo(int index) const {
  return jk_cabstructmatplanmapinfo_.Get(index);
}
inline ::transMsg::JK_CabStructMatPlanMapInfo* JK_Table::mutable_jk_cabstructmatplanmapinfo(int index) {
  return jk_cabstructmatplanmapinfo_.Mutable(index);
}
inline ::transMsg::JK_CabStructMatPlanMapInfo* JK_Table::add_jk_cabstructmatplanmapinfo() {
  return jk_cabstructmatplanmapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructMatPlanMapInfo >&
JK_Table::jk_cabstructmatplanmapinfo() const {
  return jk_cabstructmatplanmapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabStructMatPlanMapInfo >*
JK_Table::mutable_jk_cabstructmatplanmapinfo() {
  return &jk_cabstructmatplanmapinfo_;
}

// repeated .transMsg.JK_CabinetSizeBoardInfo JK_CabinetSizeBoardInfo = 20;
inline int JK_Table::jk_cabinetsizeboardinfo_size() const {
  return jk_cabinetsizeboardinfo_.size();
}
inline void JK_Table::clear_jk_cabinetsizeboardinfo() {
  jk_cabinetsizeboardinfo_.Clear();
}
inline const ::transMsg::JK_CabinetSizeBoardInfo& JK_Table::jk_cabinetsizeboardinfo(int index) const {
  return jk_cabinetsizeboardinfo_.Get(index);
}
inline ::transMsg::JK_CabinetSizeBoardInfo* JK_Table::mutable_jk_cabinetsizeboardinfo(int index) {
  return jk_cabinetsizeboardinfo_.Mutable(index);
}
inline ::transMsg::JK_CabinetSizeBoardInfo* JK_Table::add_jk_cabinetsizeboardinfo() {
  return jk_cabinetsizeboardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeBoardInfo >&
JK_Table::jk_cabinetsizeboardinfo() const {
  return jk_cabinetsizeboardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeBoardInfo >*
JK_Table::mutable_jk_cabinetsizeboardinfo() {
  return &jk_cabinetsizeboardinfo_;
}

// repeated .transMsg.JK_CabinetSizeInfo JK_CabinetSizeInfo = 21;
inline int JK_Table::jk_cabinetsizeinfo_size() const {
  return jk_cabinetsizeinfo_.size();
}
inline void JK_Table::clear_jk_cabinetsizeinfo() {
  jk_cabinetsizeinfo_.Clear();
}
inline const ::transMsg::JK_CabinetSizeInfo& JK_Table::jk_cabinetsizeinfo(int index) const {
  return jk_cabinetsizeinfo_.Get(index);
}
inline ::transMsg::JK_CabinetSizeInfo* JK_Table::mutable_jk_cabinetsizeinfo(int index) {
  return jk_cabinetsizeinfo_.Mutable(index);
}
inline ::transMsg::JK_CabinetSizeInfo* JK_Table::add_jk_cabinetsizeinfo() {
  return jk_cabinetsizeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeInfo >&
JK_Table::jk_cabinetsizeinfo() const {
  return jk_cabinetsizeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeInfo >*
JK_Table::mutable_jk_cabinetsizeinfo() {
  return &jk_cabinetsizeinfo_;
}

// repeated .transMsg.JK_CabinetSizeStructBoardInfo JK_CabinetSizeStructBoardInfo = 22;
inline int JK_Table::jk_cabinetsizestructboardinfo_size() const {
  return jk_cabinetsizestructboardinfo_.size();
}
inline void JK_Table::clear_jk_cabinetsizestructboardinfo() {
  jk_cabinetsizestructboardinfo_.Clear();
}
inline const ::transMsg::JK_CabinetSizeStructBoardInfo& JK_Table::jk_cabinetsizestructboardinfo(int index) const {
  return jk_cabinetsizestructboardinfo_.Get(index);
}
inline ::transMsg::JK_CabinetSizeStructBoardInfo* JK_Table::mutable_jk_cabinetsizestructboardinfo(int index) {
  return jk_cabinetsizestructboardinfo_.Mutable(index);
}
inline ::transMsg::JK_CabinetSizeStructBoardInfo* JK_Table::add_jk_cabinetsizestructboardinfo() {
  return jk_cabinetsizestructboardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeStructBoardInfo >&
JK_Table::jk_cabinetsizestructboardinfo() const {
  return jk_cabinetsizestructboardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_CabinetSizeStructBoardInfo >*
JK_Table::mutable_jk_cabinetsizestructboardinfo() {
  return &jk_cabinetsizestructboardinfo_;
}

// repeated .transMsg.JK_DecorBoardFrameMapInfo JK_DecorBoardFrameMapInfo = 23;
inline int JK_Table::jk_decorboardframemapinfo_size() const {
  return jk_decorboardframemapinfo_.size();
}
inline void JK_Table::clear_jk_decorboardframemapinfo() {
  jk_decorboardframemapinfo_.Clear();
}
inline const ::transMsg::JK_DecorBoardFrameMapInfo& JK_Table::jk_decorboardframemapinfo(int index) const {
  return jk_decorboardframemapinfo_.Get(index);
}
inline ::transMsg::JK_DecorBoardFrameMapInfo* JK_Table::mutable_jk_decorboardframemapinfo(int index) {
  return jk_decorboardframemapinfo_.Mutable(index);
}
inline ::transMsg::JK_DecorBoardFrameMapInfo* JK_Table::add_jk_decorboardframemapinfo() {
  return jk_decorboardframemapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardFrameMapInfo >&
JK_Table::jk_decorboardframemapinfo() const {
  return jk_decorboardframemapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardFrameMapInfo >*
JK_Table::mutable_jk_decorboardframemapinfo() {
  return &jk_decorboardframemapinfo_;
}

// repeated .transMsg.JK_DecorBoardInfo JK_DecorBoardInfo = 24;
inline int JK_Table::jk_decorboardinfo_size() const {
  return jk_decorboardinfo_.size();
}
inline void JK_Table::clear_jk_decorboardinfo() {
  jk_decorboardinfo_.Clear();
}
inline const ::transMsg::JK_DecorBoardInfo& JK_Table::jk_decorboardinfo(int index) const {
  return jk_decorboardinfo_.Get(index);
}
inline ::transMsg::JK_DecorBoardInfo* JK_Table::mutable_jk_decorboardinfo(int index) {
  return jk_decorboardinfo_.Mutable(index);
}
inline ::transMsg::JK_DecorBoardInfo* JK_Table::add_jk_decorboardinfo() {
  return jk_decorboardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardInfo >&
JK_Table::jk_decorboardinfo() const {
  return jk_decorboardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardInfo >*
JK_Table::mutable_jk_decorboardinfo() {
  return &jk_decorboardinfo_;
}

// repeated .transMsg.JK_DecorBoardMatInfo JK_DecorBoardMatInfo = 25;
inline int JK_Table::jk_decorboardmatinfo_size() const {
  return jk_decorboardmatinfo_.size();
}
inline void JK_Table::clear_jk_decorboardmatinfo() {
  jk_decorboardmatinfo_.Clear();
}
inline const ::transMsg::JK_DecorBoardMatInfo& JK_Table::jk_decorboardmatinfo(int index) const {
  return jk_decorboardmatinfo_.Get(index);
}
inline ::transMsg::JK_DecorBoardMatInfo* JK_Table::mutable_jk_decorboardmatinfo(int index) {
  return jk_decorboardmatinfo_.Mutable(index);
}
inline ::transMsg::JK_DecorBoardMatInfo* JK_Table::add_jk_decorboardmatinfo() {
  return jk_decorboardmatinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardMatInfo >&
JK_Table::jk_decorboardmatinfo() const {
  return jk_decorboardmatinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardMatInfo >*
JK_Table::mutable_jk_decorboardmatinfo() {
  return &jk_decorboardmatinfo_;
}

// repeated .transMsg.JK_DecorBoardUnitInfo JK_DecorBoardUnitInfo = 26;
inline int JK_Table::jk_decorboardunitinfo_size() const {
  return jk_decorboardunitinfo_.size();
}
inline void JK_Table::clear_jk_decorboardunitinfo() {
  jk_decorboardunitinfo_.Clear();
}
inline const ::transMsg::JK_DecorBoardUnitInfo& JK_Table::jk_decorboardunitinfo(int index) const {
  return jk_decorboardunitinfo_.Get(index);
}
inline ::transMsg::JK_DecorBoardUnitInfo* JK_Table::mutable_jk_decorboardunitinfo(int index) {
  return jk_decorboardunitinfo_.Mutable(index);
}
inline ::transMsg::JK_DecorBoardUnitInfo* JK_Table::add_jk_decorboardunitinfo() {
  return jk_decorboardunitinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitInfo >&
JK_Table::jk_decorboardunitinfo() const {
  return jk_decorboardunitinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitInfo >*
JK_Table::mutable_jk_decorboardunitinfo() {
  return &jk_decorboardunitinfo_;
}

// repeated .transMsg.JK_DecorBoardUnitMatInfo JK_DecorBoardUnitMatInfo = 27;
inline int JK_Table::jk_decorboardunitmatinfo_size() const {
  return jk_decorboardunitmatinfo_.size();
}
inline void JK_Table::clear_jk_decorboardunitmatinfo() {
  jk_decorboardunitmatinfo_.Clear();
}
inline const ::transMsg::JK_DecorBoardUnitMatInfo& JK_Table::jk_decorboardunitmatinfo(int index) const {
  return jk_decorboardunitmatinfo_.Get(index);
}
inline ::transMsg::JK_DecorBoardUnitMatInfo* JK_Table::mutable_jk_decorboardunitmatinfo(int index) {
  return jk_decorboardunitmatinfo_.Mutable(index);
}
inline ::transMsg::JK_DecorBoardUnitMatInfo* JK_Table::add_jk_decorboardunitmatinfo() {
  return jk_decorboardunitmatinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitMatInfo >&
JK_Table::jk_decorboardunitmatinfo() const {
  return jk_decorboardunitmatinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitMatInfo >*
JK_Table::mutable_jk_decorboardunitmatinfo() {
  return &jk_decorboardunitmatinfo_;
}

// repeated .transMsg.JK_DecorBoardUnitSealInfo JK_DecorBoardUnitSealInfo = 28;
inline int JK_Table::jk_decorboardunitsealinfo_size() const {
  return jk_decorboardunitsealinfo_.size();
}
inline void JK_Table::clear_jk_decorboardunitsealinfo() {
  jk_decorboardunitsealinfo_.Clear();
}
inline const ::transMsg::JK_DecorBoardUnitSealInfo& JK_Table::jk_decorboardunitsealinfo(int index) const {
  return jk_decorboardunitsealinfo_.Get(index);
}
inline ::transMsg::JK_DecorBoardUnitSealInfo* JK_Table::mutable_jk_decorboardunitsealinfo(int index) {
  return jk_decorboardunitsealinfo_.Mutable(index);
}
inline ::transMsg::JK_DecorBoardUnitSealInfo* JK_Table::add_jk_decorboardunitsealinfo() {
  return jk_decorboardunitsealinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitSealInfo >&
JK_Table::jk_decorboardunitsealinfo() const {
  return jk_decorboardunitsealinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorBoardUnitSealInfo >*
JK_Table::mutable_jk_decorboardunitsealinfo() {
  return &jk_decorboardunitsealinfo_;
}

// repeated .transMsg.JK_DecorInfo JK_DecorInfo = 29;
inline int JK_Table::jk_decorinfo_size() const {
  return jk_decorinfo_.size();
}
inline void JK_Table::clear_jk_decorinfo() {
  jk_decorinfo_.Clear();
}
inline const ::transMsg::JK_DecorInfo& JK_Table::jk_decorinfo(int index) const {
  return jk_decorinfo_.Get(index);
}
inline ::transMsg::JK_DecorInfo* JK_Table::mutable_jk_decorinfo(int index) {
  return jk_decorinfo_.Mutable(index);
}
inline ::transMsg::JK_DecorInfo* JK_Table::add_jk_decorinfo() {
  return jk_decorinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorInfo >&
JK_Table::jk_decorinfo() const {
  return jk_decorinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorInfo >*
JK_Table::mutable_jk_decorinfo() {
  return &jk_decorinfo_;
}

// repeated .transMsg.JK_DecorLineInfo JK_DecorLineInfo = 30;
inline int JK_Table::jk_decorlineinfo_size() const {
  return jk_decorlineinfo_.size();
}
inline void JK_Table::clear_jk_decorlineinfo() {
  jk_decorlineinfo_.Clear();
}
inline const ::transMsg::JK_DecorLineInfo& JK_Table::jk_decorlineinfo(int index) const {
  return jk_decorlineinfo_.Get(index);
}
inline ::transMsg::JK_DecorLineInfo* JK_Table::mutable_jk_decorlineinfo(int index) {
  return jk_decorlineinfo_.Mutable(index);
}
inline ::transMsg::JK_DecorLineInfo* JK_Table::add_jk_decorlineinfo() {
  return jk_decorlineinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorLineInfo >&
JK_Table::jk_decorlineinfo() const {
  return jk_decorlineinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorLineInfo >*
JK_Table::mutable_jk_decorlineinfo() {
  return &jk_decorlineinfo_;
}

// repeated .transMsg.JK_DecorLineMatInfo JK_DecorLineMatInfo = 31;
inline int JK_Table::jk_decorlinematinfo_size() const {
  return jk_decorlinematinfo_.size();
}
inline void JK_Table::clear_jk_decorlinematinfo() {
  jk_decorlinematinfo_.Clear();
}
inline const ::transMsg::JK_DecorLineMatInfo& JK_Table::jk_decorlinematinfo(int index) const {
  return jk_decorlinematinfo_.Get(index);
}
inline ::transMsg::JK_DecorLineMatInfo* JK_Table::mutable_jk_decorlinematinfo(int index) {
  return jk_decorlinematinfo_.Mutable(index);
}
inline ::transMsg::JK_DecorLineMatInfo* JK_Table::add_jk_decorlinematinfo() {
  return jk_decorlinematinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorLineMatInfo >&
JK_Table::jk_decorlinematinfo() const {
  return jk_decorlinematinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorLineMatInfo >*
JK_Table::mutable_jk_decorlinematinfo() {
  return &jk_decorlinematinfo_;
}

// repeated .transMsg.JK_DecorUnitHWFittingMapInfo JK_DecorUnitHWFittingMapInfo = 32;
inline int JK_Table::jk_decorunithwfittingmapinfo_size() const {
  return jk_decorunithwfittingmapinfo_.size();
}
inline void JK_Table::clear_jk_decorunithwfittingmapinfo() {
  jk_decorunithwfittingmapinfo_.Clear();
}
inline const ::transMsg::JK_DecorUnitHWFittingMapInfo& JK_Table::jk_decorunithwfittingmapinfo(int index) const {
  return jk_decorunithwfittingmapinfo_.Get(index);
}
inline ::transMsg::JK_DecorUnitHWFittingMapInfo* JK_Table::mutable_jk_decorunithwfittingmapinfo(int index) {
  return jk_decorunithwfittingmapinfo_.Mutable(index);
}
inline ::transMsg::JK_DecorUnitHWFittingMapInfo* JK_Table::add_jk_decorunithwfittingmapinfo() {
  return jk_decorunithwfittingmapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorUnitHWFittingMapInfo >&
JK_Table::jk_decorunithwfittingmapinfo() const {
  return jk_decorunithwfittingmapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DecorUnitHWFittingMapInfo >*
JK_Table::mutable_jk_decorunithwfittingmapinfo() {
  return &jk_decorunithwfittingmapinfo_;
}

// repeated .transMsg.JK_DoorBoardGapInfo JK_DoorBoardGapInfo = 33;
inline int JK_Table::jk_doorboardgapinfo_size() const {
  return jk_doorboardgapinfo_.size();
}
inline void JK_Table::clear_jk_doorboardgapinfo() {
  jk_doorboardgapinfo_.Clear();
}
inline const ::transMsg::JK_DoorBoardGapInfo& JK_Table::jk_doorboardgapinfo(int index) const {
  return jk_doorboardgapinfo_.Get(index);
}
inline ::transMsg::JK_DoorBoardGapInfo* JK_Table::mutable_jk_doorboardgapinfo(int index) {
  return jk_doorboardgapinfo_.Mutable(index);
}
inline ::transMsg::JK_DoorBoardGapInfo* JK_Table::add_jk_doorboardgapinfo() {
  return jk_doorboardgapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardGapInfo >&
JK_Table::jk_doorboardgapinfo() const {
  return jk_doorboardgapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardGapInfo >*
JK_Table::mutable_jk_doorboardgapinfo() {
  return &jk_doorboardgapinfo_;
}

// repeated .transMsg.JK_DoorBoardInfo JK_DoorBoardInfo = 34;
inline int JK_Table::jk_doorboardinfo_size() const {
  return jk_doorboardinfo_.size();
}
inline void JK_Table::clear_jk_doorboardinfo() {
  jk_doorboardinfo_.Clear();
}
inline const ::transMsg::JK_DoorBoardInfo& JK_Table::jk_doorboardinfo(int index) const {
  return jk_doorboardinfo_.Get(index);
}
inline ::transMsg::JK_DoorBoardInfo* JK_Table::mutable_jk_doorboardinfo(int index) {
  return jk_doorboardinfo_.Mutable(index);
}
inline ::transMsg::JK_DoorBoardInfo* JK_Table::add_jk_doorboardinfo() {
  return jk_doorboardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardInfo >&
JK_Table::jk_doorboardinfo() const {
  return jk_doorboardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardInfo >*
JK_Table::mutable_jk_doorboardinfo() {
  return &jk_doorboardinfo_;
}

// repeated .transMsg.JK_DoorBoardMatMapInfo JK_DoorBoardMatMapInfo = 35;
inline int JK_Table::jk_doorboardmatmapinfo_size() const {
  return jk_doorboardmatmapinfo_.size();
}
inline void JK_Table::clear_jk_doorboardmatmapinfo() {
  jk_doorboardmatmapinfo_.Clear();
}
inline const ::transMsg::JK_DoorBoardMatMapInfo& JK_Table::jk_doorboardmatmapinfo(int index) const {
  return jk_doorboardmatmapinfo_.Get(index);
}
inline ::transMsg::JK_DoorBoardMatMapInfo* JK_Table::mutable_jk_doorboardmatmapinfo(int index) {
  return jk_doorboardmatmapinfo_.Mutable(index);
}
inline ::transMsg::JK_DoorBoardMatMapInfo* JK_Table::add_jk_doorboardmatmapinfo() {
  return jk_doorboardmatmapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardMatMapInfo >&
JK_Table::jk_doorboardmatmapinfo() const {
  return jk_doorboardmatmapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardMatMapInfo >*
JK_Table::mutable_jk_doorboardmatmapinfo() {
  return &jk_doorboardmatmapinfo_;
}

// repeated .transMsg.JK_DoorBoardSealInfo JK_DoorBoardSealInfo = 36;
inline int JK_Table::jk_doorboardsealinfo_size() const {
  return jk_doorboardsealinfo_.size();
}
inline void JK_Table::clear_jk_doorboardsealinfo() {
  jk_doorboardsealinfo_.Clear();
}
inline const ::transMsg::JK_DoorBoardSealInfo& JK_Table::jk_doorboardsealinfo(int index) const {
  return jk_doorboardsealinfo_.Get(index);
}
inline ::transMsg::JK_DoorBoardSealInfo* JK_Table::mutable_jk_doorboardsealinfo(int index) {
  return jk_doorboardsealinfo_.Mutable(index);
}
inline ::transMsg::JK_DoorBoardSealInfo* JK_Table::add_jk_doorboardsealinfo() {
  return jk_doorboardsealinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardSealInfo >&
JK_Table::jk_doorboardsealinfo() const {
  return jk_doorboardsealinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorBoardSealInfo >*
JK_Table::mutable_jk_doorboardsealinfo() {
  return &jk_doorboardsealinfo_;
}

// repeated .transMsg.JK_DoorInfo JK_DoorInfo = 37;
inline int JK_Table::jk_doorinfo_size() const {
  return jk_doorinfo_.size();
}
inline void JK_Table::clear_jk_doorinfo() {
  jk_doorinfo_.Clear();
}
inline const ::transMsg::JK_DoorInfo& JK_Table::jk_doorinfo(int index) const {
  return jk_doorinfo_.Get(index);
}
inline ::transMsg::JK_DoorInfo* JK_Table::mutable_jk_doorinfo(int index) {
  return jk_doorinfo_.Mutable(index);
}
inline ::transMsg::JK_DoorInfo* JK_Table::add_jk_doorinfo() {
  return jk_doorinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorInfo >&
JK_Table::jk_doorinfo() const {
  return jk_doorinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorInfo >*
JK_Table::mutable_jk_doorinfo() {
  return &jk_doorinfo_;
}

// repeated .transMsg.JK_DoorMatMapInfo JK_DoorMatMapInfo = 38;
inline int JK_Table::jk_doormatmapinfo_size() const {
  return jk_doormatmapinfo_.size();
}
inline void JK_Table::clear_jk_doormatmapinfo() {
  jk_doormatmapinfo_.Clear();
}
inline const ::transMsg::JK_DoorMatMapInfo& JK_Table::jk_doormatmapinfo(int index) const {
  return jk_doormatmapinfo_.Get(index);
}
inline ::transMsg::JK_DoorMatMapInfo* JK_Table::mutable_jk_doormatmapinfo(int index) {
  return jk_doormatmapinfo_.Mutable(index);
}
inline ::transMsg::JK_DoorMatMapInfo* JK_Table::add_jk_doormatmapinfo() {
  return jk_doormatmapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatMapInfo >&
JK_Table::jk_doormatmapinfo() const {
  return jk_doormatmapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatMapInfo >*
JK_Table::mutable_jk_doormatmapinfo() {
  return &jk_doormatmapinfo_;
}

// repeated .transMsg.JK_DoorMatPlanHandleMapInfo JK_DoorMatPlanHandleMapInfo = 39;
inline int JK_Table::jk_doormatplanhandlemapinfo_size() const {
  return jk_doormatplanhandlemapinfo_.size();
}
inline void JK_Table::clear_jk_doormatplanhandlemapinfo() {
  jk_doormatplanhandlemapinfo_.Clear();
}
inline const ::transMsg::JK_DoorMatPlanHandleMapInfo& JK_Table::jk_doormatplanhandlemapinfo(int index) const {
  return jk_doormatplanhandlemapinfo_.Get(index);
}
inline ::transMsg::JK_DoorMatPlanHandleMapInfo* JK_Table::mutable_jk_doormatplanhandlemapinfo(int index) {
  return jk_doormatplanhandlemapinfo_.Mutable(index);
}
inline ::transMsg::JK_DoorMatPlanHandleMapInfo* JK_Table::add_jk_doormatplanhandlemapinfo() {
  return jk_doormatplanhandlemapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatPlanHandleMapInfo >&
JK_Table::jk_doormatplanhandlemapinfo() const {
  return jk_doormatplanhandlemapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatPlanHandleMapInfo >*
JK_Table::mutable_jk_doormatplanhandlemapinfo() {
  return &jk_doormatplanhandlemapinfo_;
}

// repeated .transMsg.JK_DoorMatPlanInfo JK_DoorMatPlanInfo = 40;
inline int JK_Table::jk_doormatplaninfo_size() const {
  return jk_doormatplaninfo_.size();
}
inline void JK_Table::clear_jk_doormatplaninfo() {
  jk_doormatplaninfo_.Clear();
}
inline const ::transMsg::JK_DoorMatPlanInfo& JK_Table::jk_doormatplaninfo(int index) const {
  return jk_doormatplaninfo_.Get(index);
}
inline ::transMsg::JK_DoorMatPlanInfo* JK_Table::mutable_jk_doormatplaninfo(int index) {
  return jk_doormatplaninfo_.Mutable(index);
}
inline ::transMsg::JK_DoorMatPlanInfo* JK_Table::add_jk_doormatplaninfo() {
  return jk_doormatplaninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatPlanInfo >&
JK_Table::jk_doormatplaninfo() const {
  return jk_doormatplaninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorMatPlanInfo >*
JK_Table::mutable_jk_doormatplaninfo() {
  return &jk_doormatplaninfo_;
}

// repeated .transMsg.JK_DoorRegionHWFittingMapInfo JK_DoorRegionHWFittingMapInfo = 41;
inline int JK_Table::jk_doorregionhwfittingmapinfo_size() const {
  return jk_doorregionhwfittingmapinfo_.size();
}
inline void JK_Table::clear_jk_doorregionhwfittingmapinfo() {
  jk_doorregionhwfittingmapinfo_.Clear();
}
inline const ::transMsg::JK_DoorRegionHWFittingMapInfo& JK_Table::jk_doorregionhwfittingmapinfo(int index) const {
  return jk_doorregionhwfittingmapinfo_.Get(index);
}
inline ::transMsg::JK_DoorRegionHWFittingMapInfo* JK_Table::mutable_jk_doorregionhwfittingmapinfo(int index) {
  return jk_doorregionhwfittingmapinfo_.Mutable(index);
}
inline ::transMsg::JK_DoorRegionHWFittingMapInfo* JK_Table::add_jk_doorregionhwfittingmapinfo() {
  return jk_doorregionhwfittingmapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorRegionHWFittingMapInfo >&
JK_Table::jk_doorregionhwfittingmapinfo() const {
  return jk_doorregionhwfittingmapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorRegionHWFittingMapInfo >*
JK_Table::mutable_jk_doorregionhwfittingmapinfo() {
  return &jk_doorregionhwfittingmapinfo_;
}

// repeated .transMsg.JK_DoorSystemInfo JK_DoorSystemInfo = 42;
inline int JK_Table::jk_doorsysteminfo_size() const {
  return jk_doorsysteminfo_.size();
}
inline void JK_Table::clear_jk_doorsysteminfo() {
  jk_doorsysteminfo_.Clear();
}
inline const ::transMsg::JK_DoorSystemInfo& JK_Table::jk_doorsysteminfo(int index) const {
  return jk_doorsysteminfo_.Get(index);
}
inline ::transMsg::JK_DoorSystemInfo* JK_Table::mutable_jk_doorsysteminfo(int index) {
  return jk_doorsysteminfo_.Mutable(index);
}
inline ::transMsg::JK_DoorSystemInfo* JK_Table::add_jk_doorsysteminfo() {
  return jk_doorsysteminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemInfo >&
JK_Table::jk_doorsysteminfo() const {
  return jk_doorsysteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemInfo >*
JK_Table::mutable_jk_doorsysteminfo() {
  return &jk_doorsysteminfo_;
}

// repeated .transMsg.JK_DoorSystemMatMapInfo JK_DoorSystemMatMapInfo = 43;
inline int JK_Table::jk_doorsystemmatmapinfo_size() const {
  return jk_doorsystemmatmapinfo_.size();
}
inline void JK_Table::clear_jk_doorsystemmatmapinfo() {
  jk_doorsystemmatmapinfo_.Clear();
}
inline const ::transMsg::JK_DoorSystemMatMapInfo& JK_Table::jk_doorsystemmatmapinfo(int index) const {
  return jk_doorsystemmatmapinfo_.Get(index);
}
inline ::transMsg::JK_DoorSystemMatMapInfo* JK_Table::mutable_jk_doorsystemmatmapinfo(int index) {
  return jk_doorsystemmatmapinfo_.Mutable(index);
}
inline ::transMsg::JK_DoorSystemMatMapInfo* JK_Table::add_jk_doorsystemmatmapinfo() {
  return jk_doorsystemmatmapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemMatMapInfo >&
JK_Table::jk_doorsystemmatmapinfo() const {
  return jk_doorsystemmatmapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemMatMapInfo >*
JK_Table::mutable_jk_doorsystemmatmapinfo() {
  return &jk_doorsystemmatmapinfo_;
}

// repeated .transMsg.JK_DoorSystemRegionDoorMapInfo JK_DoorSystemRegionDoorMapInfo = 44;
inline int JK_Table::jk_doorsystemregiondoormapinfo_size() const {
  return jk_doorsystemregiondoormapinfo_.size();
}
inline void JK_Table::clear_jk_doorsystemregiondoormapinfo() {
  jk_doorsystemregiondoormapinfo_.Clear();
}
inline const ::transMsg::JK_DoorSystemRegionDoorMapInfo& JK_Table::jk_doorsystemregiondoormapinfo(int index) const {
  return jk_doorsystemregiondoormapinfo_.Get(index);
}
inline ::transMsg::JK_DoorSystemRegionDoorMapInfo* JK_Table::mutable_jk_doorsystemregiondoormapinfo(int index) {
  return jk_doorsystemregiondoormapinfo_.Mutable(index);
}
inline ::transMsg::JK_DoorSystemRegionDoorMapInfo* JK_Table::add_jk_doorsystemregiondoormapinfo() {
  return jk_doorsystemregiondoormapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionDoorMapInfo >&
JK_Table::jk_doorsystemregiondoormapinfo() const {
  return jk_doorsystemregiondoormapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionDoorMapInfo >*
JK_Table::mutable_jk_doorsystemregiondoormapinfo() {
  return &jk_doorsystemregiondoormapinfo_;
}

// repeated .transMsg.JK_DoorSystemRegionInfo JK_DoorSystemRegionInfo = 45;
inline int JK_Table::jk_doorsystemregioninfo_size() const {
  return jk_doorsystemregioninfo_.size();
}
inline void JK_Table::clear_jk_doorsystemregioninfo() {
  jk_doorsystemregioninfo_.Clear();
}
inline const ::transMsg::JK_DoorSystemRegionInfo& JK_Table::jk_doorsystemregioninfo(int index) const {
  return jk_doorsystemregioninfo_.Get(index);
}
inline ::transMsg::JK_DoorSystemRegionInfo* JK_Table::mutable_jk_doorsystemregioninfo(int index) {
  return jk_doorsystemregioninfo_.Mutable(index);
}
inline ::transMsg::JK_DoorSystemRegionInfo* JK_Table::add_jk_doorsystemregioninfo() {
  return jk_doorsystemregioninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionInfo >&
JK_Table::jk_doorsystemregioninfo() const {
  return jk_doorsystemregioninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionInfo >*
JK_Table::mutable_jk_doorsystemregioninfo() {
  return &jk_doorsystemregioninfo_;
}

// repeated .transMsg.JK_DoorSystemRegionSlideMapInfo JK_DoorSystemRegionSlideMapInfo = 46;
inline int JK_Table::jk_doorsystemregionslidemapinfo_size() const {
  return jk_doorsystemregionslidemapinfo_.size();
}
inline void JK_Table::clear_jk_doorsystemregionslidemapinfo() {
  jk_doorsystemregionslidemapinfo_.Clear();
}
inline const ::transMsg::JK_DoorSystemRegionSlideMapInfo& JK_Table::jk_doorsystemregionslidemapinfo(int index) const {
  return jk_doorsystemregionslidemapinfo_.Get(index);
}
inline ::transMsg::JK_DoorSystemRegionSlideMapInfo* JK_Table::mutable_jk_doorsystemregionslidemapinfo(int index) {
  return jk_doorsystemregionslidemapinfo_.Mutable(index);
}
inline ::transMsg::JK_DoorSystemRegionSlideMapInfo* JK_Table::add_jk_doorsystemregionslidemapinfo() {
  return jk_doorsystemregionslidemapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionSlideMapInfo >&
JK_Table::jk_doorsystemregionslidemapinfo() const {
  return jk_doorsystemregionslidemapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionSlideMapInfo >*
JK_Table::mutable_jk_doorsystemregionslidemapinfo() {
  return &jk_doorsystemregionslidemapinfo_;
}

// repeated .transMsg.JK_DoorSystemRegionSlidePositionSizeInfo JK_DoorSystemRegionSlidePositionSizeInfo = 47;
inline int JK_Table::jk_doorsystemregionslidepositionsizeinfo_size() const {
  return jk_doorsystemregionslidepositionsizeinfo_.size();
}
inline void JK_Table::clear_jk_doorsystemregionslidepositionsizeinfo() {
  jk_doorsystemregionslidepositionsizeinfo_.Clear();
}
inline const ::transMsg::JK_DoorSystemRegionSlidePositionSizeInfo& JK_Table::jk_doorsystemregionslidepositionsizeinfo(int index) const {
  return jk_doorsystemregionslidepositionsizeinfo_.Get(index);
}
inline ::transMsg::JK_DoorSystemRegionSlidePositionSizeInfo* JK_Table::mutable_jk_doorsystemregionslidepositionsizeinfo(int index) {
  return jk_doorsystemregionslidepositionsizeinfo_.Mutable(index);
}
inline ::transMsg::JK_DoorSystemRegionSlidePositionSizeInfo* JK_Table::add_jk_doorsystemregionslidepositionsizeinfo() {
  return jk_doorsystemregionslidepositionsizeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionSlidePositionSizeInfo >&
JK_Table::jk_doorsystemregionslidepositionsizeinfo() const {
  return jk_doorsystemregionslidepositionsizeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_DoorSystemRegionSlidePositionSizeInfo >*
JK_Table::mutable_jk_doorsystemregionslidepositionsizeinfo() {
  return &jk_doorsystemregionslidepositionsizeinfo_;
}

// repeated .transMsg.JK_FNFittingInfo JK_FNFittingInfo = 48;
inline int JK_Table::jk_fnfittinginfo_size() const {
  return jk_fnfittinginfo_.size();
}
inline void JK_Table::clear_jk_fnfittinginfo() {
  jk_fnfittinginfo_.Clear();
}
inline const ::transMsg::JK_FNFittingInfo& JK_Table::jk_fnfittinginfo(int index) const {
  return jk_fnfittinginfo_.Get(index);
}
inline ::transMsg::JK_FNFittingInfo* JK_Table::mutable_jk_fnfittinginfo(int index) {
  return jk_fnfittinginfo_.Mutable(index);
}
inline ::transMsg::JK_FNFittingInfo* JK_Table::add_jk_fnfittinginfo() {
  return jk_fnfittinginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingInfo >&
JK_Table::jk_fnfittinginfo() const {
  return jk_fnfittinginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingInfo >*
JK_Table::mutable_jk_fnfittinginfo() {
  return &jk_fnfittinginfo_;
}

// repeated .transMsg.JK_FNFittingMatInfo JK_FNFittingMatInfo = 49;
inline int JK_Table::jk_fnfittingmatinfo_size() const {
  return jk_fnfittingmatinfo_.size();
}
inline void JK_Table::clear_jk_fnfittingmatinfo() {
  jk_fnfittingmatinfo_.Clear();
}
inline const ::transMsg::JK_FNFittingMatInfo& JK_Table::jk_fnfittingmatinfo(int index) const {
  return jk_fnfittingmatinfo_.Get(index);
}
inline ::transMsg::JK_FNFittingMatInfo* JK_Table::mutable_jk_fnfittingmatinfo(int index) {
  return jk_fnfittingmatinfo_.Mutable(index);
}
inline ::transMsg::JK_FNFittingMatInfo* JK_Table::add_jk_fnfittingmatinfo() {
  return jk_fnfittingmatinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingMatInfo >&
JK_Table::jk_fnfittingmatinfo() const {
  return jk_fnfittingmatinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingMatInfo >*
JK_Table::mutable_jk_fnfittingmatinfo() {
  return &jk_fnfittingmatinfo_;
}

// repeated .transMsg.JK_FNFittingPartInfo JK_FNFittingPartInfo = 50;
inline int JK_Table::jk_fnfittingpartinfo_size() const {
  return jk_fnfittingpartinfo_.size();
}
inline void JK_Table::clear_jk_fnfittingpartinfo() {
  jk_fnfittingpartinfo_.Clear();
}
inline const ::transMsg::JK_FNFittingPartInfo& JK_Table::jk_fnfittingpartinfo(int index) const {
  return jk_fnfittingpartinfo_.Get(index);
}
inline ::transMsg::JK_FNFittingPartInfo* JK_Table::mutable_jk_fnfittingpartinfo(int index) {
  return jk_fnfittingpartinfo_.Mutable(index);
}
inline ::transMsg::JK_FNFittingPartInfo* JK_Table::add_jk_fnfittingpartinfo() {
  return jk_fnfittingpartinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartInfo >&
JK_Table::jk_fnfittingpartinfo() const {
  return jk_fnfittingpartinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartInfo >*
JK_Table::mutable_jk_fnfittingpartinfo() {
  return &jk_fnfittingpartinfo_;
}

// repeated .transMsg.JK_FNFittingPartMatInfo JK_FNFittingPartMatInfo = 51;
inline int JK_Table::jk_fnfittingpartmatinfo_size() const {
  return jk_fnfittingpartmatinfo_.size();
}
inline void JK_Table::clear_jk_fnfittingpartmatinfo() {
  jk_fnfittingpartmatinfo_.Clear();
}
inline const ::transMsg::JK_FNFittingPartMatInfo& JK_Table::jk_fnfittingpartmatinfo(int index) const {
  return jk_fnfittingpartmatinfo_.Get(index);
}
inline ::transMsg::JK_FNFittingPartMatInfo* JK_Table::mutable_jk_fnfittingpartmatinfo(int index) {
  return jk_fnfittingpartmatinfo_.Mutable(index);
}
inline ::transMsg::JK_FNFittingPartMatInfo* JK_Table::add_jk_fnfittingpartmatinfo() {
  return jk_fnfittingpartmatinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartMatInfo >&
JK_Table::jk_fnfittingpartmatinfo() const {
  return jk_fnfittingpartmatinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartMatInfo >*
JK_Table::mutable_jk_fnfittingpartmatinfo() {
  return &jk_fnfittingpartmatinfo_;
}

// repeated .transMsg.JK_FNFittingPartSealInfo JK_FNFittingPartSealInfo = 52;
inline int JK_Table::jk_fnfittingpartsealinfo_size() const {
  return jk_fnfittingpartsealinfo_.size();
}
inline void JK_Table::clear_jk_fnfittingpartsealinfo() {
  jk_fnfittingpartsealinfo_.Clear();
}
inline const ::transMsg::JK_FNFittingPartSealInfo& JK_Table::jk_fnfittingpartsealinfo(int index) const {
  return jk_fnfittingpartsealinfo_.Get(index);
}
inline ::transMsg::JK_FNFittingPartSealInfo* JK_Table::mutable_jk_fnfittingpartsealinfo(int index) {
  return jk_fnfittingpartsealinfo_.Mutable(index);
}
inline ::transMsg::JK_FNFittingPartSealInfo* JK_Table::add_jk_fnfittingpartsealinfo() {
  return jk_fnfittingpartsealinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartSealInfo >&
JK_Table::jk_fnfittingpartsealinfo() const {
  return jk_fnfittingpartsealinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FNFittingPartSealInfo >*
JK_Table::mutable_jk_fnfittingpartsealinfo() {
  return &jk_fnfittingpartsealinfo_;
}

// repeated .transMsg.JK_FittingInfo JK_FittingInfo = 53;
inline int JK_Table::jk_fittinginfo_size() const {
  return jk_fittinginfo_.size();
}
inline void JK_Table::clear_jk_fittinginfo() {
  jk_fittinginfo_.Clear();
}
inline const ::transMsg::JK_FittingInfo& JK_Table::jk_fittinginfo(int index) const {
  return jk_fittinginfo_.Get(index);
}
inline ::transMsg::JK_FittingInfo* JK_Table::mutable_jk_fittinginfo(int index) {
  return jk_fittinginfo_.Mutable(index);
}
inline ::transMsg::JK_FittingInfo* JK_Table::add_jk_fittinginfo() {
  return jk_fittinginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FittingInfo >&
JK_Table::jk_fittinginfo() const {
  return jk_fittinginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FittingInfo >*
JK_Table::mutable_jk_fittinginfo() {
  return &jk_fittinginfo_;
}

// repeated .transMsg.JK_FittingRuleInfo JK_FittingRuleInfo = 54;
inline int JK_Table::jk_fittingruleinfo_size() const {
  return jk_fittingruleinfo_.size();
}
inline void JK_Table::clear_jk_fittingruleinfo() {
  jk_fittingruleinfo_.Clear();
}
inline const ::transMsg::JK_FittingRuleInfo& JK_Table::jk_fittingruleinfo(int index) const {
  return jk_fittingruleinfo_.Get(index);
}
inline ::transMsg::JK_FittingRuleInfo* JK_Table::mutable_jk_fittingruleinfo(int index) {
  return jk_fittingruleinfo_.Mutable(index);
}
inline ::transMsg::JK_FittingRuleInfo* JK_Table::add_jk_fittingruleinfo() {
  return jk_fittingruleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FittingRuleInfo >&
JK_Table::jk_fittingruleinfo() const {
  return jk_fittingruleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FittingRuleInfo >*
JK_Table::mutable_jk_fittingruleinfo() {
  return &jk_fittingruleinfo_;
}

// repeated .transMsg.JK_FormulaConstInfo JK_FormulaConstInfo = 55;
inline int JK_Table::jk_formulaconstinfo_size() const {
  return jk_formulaconstinfo_.size();
}
inline void JK_Table::clear_jk_formulaconstinfo() {
  jk_formulaconstinfo_.Clear();
}
inline const ::transMsg::JK_FormulaConstInfo& JK_Table::jk_formulaconstinfo(int index) const {
  return jk_formulaconstinfo_.Get(index);
}
inline ::transMsg::JK_FormulaConstInfo* JK_Table::mutable_jk_formulaconstinfo(int index) {
  return jk_formulaconstinfo_.Mutable(index);
}
inline ::transMsg::JK_FormulaConstInfo* JK_Table::add_jk_formulaconstinfo() {
  return jk_formulaconstinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FormulaConstInfo >&
JK_Table::jk_formulaconstinfo() const {
  return jk_formulaconstinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_FormulaConstInfo >*
JK_Table::mutable_jk_formulaconstinfo() {
  return &jk_formulaconstinfo_;
}

// repeated .transMsg.JK_GroupInfo JK_GroupInfo = 56;
inline int JK_Table::jk_groupinfo_size() const {
  return jk_groupinfo_.size();
}
inline void JK_Table::clear_jk_groupinfo() {
  jk_groupinfo_.Clear();
}
inline const ::transMsg::JK_GroupInfo& JK_Table::jk_groupinfo(int index) const {
  return jk_groupinfo_.Get(index);
}
inline ::transMsg::JK_GroupInfo* JK_Table::mutable_jk_groupinfo(int index) {
  return jk_groupinfo_.Mutable(index);
}
inline ::transMsg::JK_GroupInfo* JK_Table::add_jk_groupinfo() {
  return jk_groupinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_GroupInfo >&
JK_Table::jk_groupinfo() const {
  return jk_groupinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_GroupInfo >*
JK_Table::mutable_jk_groupinfo() {
  return &jk_groupinfo_;
}

// repeated .transMsg.JK_HWFittingInfo JK_HWFittingInfo = 57;
inline int JK_Table::jk_hwfittinginfo_size() const {
  return jk_hwfittinginfo_.size();
}
inline void JK_Table::clear_jk_hwfittinginfo() {
  jk_hwfittinginfo_.Clear();
}
inline const ::transMsg::JK_HWFittingInfo& JK_Table::jk_hwfittinginfo(int index) const {
  return jk_hwfittinginfo_.Get(index);
}
inline ::transMsg::JK_HWFittingInfo* JK_Table::mutable_jk_hwfittinginfo(int index) {
  return jk_hwfittinginfo_.Mutable(index);
}
inline ::transMsg::JK_HWFittingInfo* JK_Table::add_jk_hwfittinginfo() {
  return jk_hwfittinginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_HWFittingInfo >&
JK_Table::jk_hwfittinginfo() const {
  return jk_hwfittinginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_HWFittingInfo >*
JK_Table::mutable_jk_hwfittinginfo() {
  return &jk_hwfittinginfo_;
}

// repeated .transMsg.JK_HoleRuleInfo JK_HoleRuleInfo = 58;
inline int JK_Table::jk_holeruleinfo_size() const {
  return jk_holeruleinfo_.size();
}
inline void JK_Table::clear_jk_holeruleinfo() {
  jk_holeruleinfo_.Clear();
}
inline const ::transMsg::JK_HoleRuleInfo& JK_Table::jk_holeruleinfo(int index) const {
  return jk_holeruleinfo_.Get(index);
}
inline ::transMsg::JK_HoleRuleInfo* JK_Table::mutable_jk_holeruleinfo(int index) {
  return jk_holeruleinfo_.Mutable(index);
}
inline ::transMsg::JK_HoleRuleInfo* JK_Table::add_jk_holeruleinfo() {
  return jk_holeruleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_HoleRuleInfo >&
JK_Table::jk_holeruleinfo() const {
  return jk_holeruleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_HoleRuleInfo >*
JK_Table::mutable_jk_holeruleinfo() {
  return &jk_holeruleinfo_;
}

// repeated .transMsg.JK_MaterialInfo JK_MaterialInfo = 59;
inline int JK_Table::jk_materialinfo_size() const {
  return jk_materialinfo_.size();
}
inline void JK_Table::clear_jk_materialinfo() {
  jk_materialinfo_.Clear();
}
inline const ::transMsg::JK_MaterialInfo& JK_Table::jk_materialinfo(int index) const {
  return jk_materialinfo_.Get(index);
}
inline ::transMsg::JK_MaterialInfo* JK_Table::mutable_jk_materialinfo(int index) {
  return jk_materialinfo_.Mutable(index);
}
inline ::transMsg::JK_MaterialInfo* JK_Table::add_jk_materialinfo() {
  return jk_materialinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_MaterialInfo >&
JK_Table::jk_materialinfo() const {
  return jk_materialinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_MaterialInfo >*
JK_Table::mutable_jk_materialinfo() {
  return &jk_materialinfo_;
}

// repeated .transMsg.JK_MaterialSealRuleMapInfo JK_MaterialSealRuleMapInfo = 60;
inline int JK_Table::jk_materialsealrulemapinfo_size() const {
  return jk_materialsealrulemapinfo_.size();
}
inline void JK_Table::clear_jk_materialsealrulemapinfo() {
  jk_materialsealrulemapinfo_.Clear();
}
inline const ::transMsg::JK_MaterialSealRuleMapInfo& JK_Table::jk_materialsealrulemapinfo(int index) const {
  return jk_materialsealrulemapinfo_.Get(index);
}
inline ::transMsg::JK_MaterialSealRuleMapInfo* JK_Table::mutable_jk_materialsealrulemapinfo(int index) {
  return jk_materialsealrulemapinfo_.Mutable(index);
}
inline ::transMsg::JK_MaterialSealRuleMapInfo* JK_Table::add_jk_materialsealrulemapinfo() {
  return jk_materialsealrulemapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_MaterialSealRuleMapInfo >&
JK_Table::jk_materialsealrulemapinfo() const {
  return jk_materialsealrulemapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_MaterialSealRuleMapInfo >*
JK_Table::mutable_jk_materialsealrulemapinfo() {
  return &jk_materialsealrulemapinfo_;
}

// repeated .transMsg.JK_ModelInfo JK_ModelInfo = 61;
inline int JK_Table::jk_modelinfo_size() const {
  return jk_modelinfo_.size();
}
inline void JK_Table::clear_jk_modelinfo() {
  jk_modelinfo_.Clear();
}
inline const ::transMsg::JK_ModelInfo& JK_Table::jk_modelinfo(int index) const {
  return jk_modelinfo_.Get(index);
}
inline ::transMsg::JK_ModelInfo* JK_Table::mutable_jk_modelinfo(int index) {
  return jk_modelinfo_.Mutable(index);
}
inline ::transMsg::JK_ModelInfo* JK_Table::add_jk_modelinfo() {
  return jk_modelinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ModelInfo >&
JK_Table::jk_modelinfo() const {
  return jk_modelinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ModelInfo >*
JK_Table::mutable_jk_modelinfo() {
  return &jk_modelinfo_;
}

// repeated .transMsg.JK_NumberRuleInfo JK_NumberRuleInfo = 62;
inline int JK_Table::jk_numberruleinfo_size() const {
  return jk_numberruleinfo_.size();
}
inline void JK_Table::clear_jk_numberruleinfo() {
  jk_numberruleinfo_.Clear();
}
inline const ::transMsg::JK_NumberRuleInfo& JK_Table::jk_numberruleinfo(int index) const {
  return jk_numberruleinfo_.Get(index);
}
inline ::transMsg::JK_NumberRuleInfo* JK_Table::mutable_jk_numberruleinfo(int index) {
  return jk_numberruleinfo_.Mutable(index);
}
inline ::transMsg::JK_NumberRuleInfo* JK_Table::add_jk_numberruleinfo() {
  return jk_numberruleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_NumberRuleInfo >&
JK_Table::jk_numberruleinfo() const {
  return jk_numberruleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_NumberRuleInfo >*
JK_Table::mutable_jk_numberruleinfo() {
  return &jk_numberruleinfo_;
}

// repeated .transMsg.JK_PackageInfo JK_PackageInfo = 63;
inline int JK_Table::jk_packageinfo_size() const {
  return jk_packageinfo_.size();
}
inline void JK_Table::clear_jk_packageinfo() {
  jk_packageinfo_.Clear();
}
inline const ::transMsg::JK_PackageInfo& JK_Table::jk_packageinfo(int index) const {
  return jk_packageinfo_.Get(index);
}
inline ::transMsg::JK_PackageInfo* JK_Table::mutable_jk_packageinfo(int index) {
  return jk_packageinfo_.Mutable(index);
}
inline ::transMsg::JK_PackageInfo* JK_Table::add_jk_packageinfo() {
  return jk_packageinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_PackageInfo >&
JK_Table::jk_packageinfo() const {
  return jk_packageinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_PackageInfo >*
JK_Table::mutable_jk_packageinfo() {
  return &jk_packageinfo_;
}

// repeated .transMsg.JK_PackageMapInfo JK_PackageMapInfo = 64;
inline int JK_Table::jk_packagemapinfo_size() const {
  return jk_packagemapinfo_.size();
}
inline void JK_Table::clear_jk_packagemapinfo() {
  jk_packagemapinfo_.Clear();
}
inline const ::transMsg::JK_PackageMapInfo& JK_Table::jk_packagemapinfo(int index) const {
  return jk_packagemapinfo_.Get(index);
}
inline ::transMsg::JK_PackageMapInfo* JK_Table::mutable_jk_packagemapinfo(int index) {
  return jk_packagemapinfo_.Mutable(index);
}
inline ::transMsg::JK_PackageMapInfo* JK_Table::add_jk_packagemapinfo() {
  return jk_packagemapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_PackageMapInfo >&
JK_Table::jk_packagemapinfo() const {
  return jk_packagemapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_PackageMapInfo >*
JK_Table::mutable_jk_packagemapinfo() {
  return &jk_packagemapinfo_;
}

// repeated .transMsg.JK_ProductInfo JK_ProductInfo = 65;
inline int JK_Table::jk_productinfo_size() const {
  return jk_productinfo_.size();
}
inline void JK_Table::clear_jk_productinfo() {
  jk_productinfo_.Clear();
}
inline const ::transMsg::JK_ProductInfo& JK_Table::jk_productinfo(int index) const {
  return jk_productinfo_.Get(index);
}
inline ::transMsg::JK_ProductInfo* JK_Table::mutable_jk_productinfo(int index) {
  return jk_productinfo_.Mutable(index);
}
inline ::transMsg::JK_ProductInfo* JK_Table::add_jk_productinfo() {
  return jk_productinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductInfo >&
JK_Table::jk_productinfo() const {
  return jk_productinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductInfo >*
JK_Table::mutable_jk_productinfo() {
  return &jk_productinfo_;
}

// repeated .transMsg.JK_ProductSeriesInfo JK_ProductSeriesInfo = 66;
inline int JK_Table::jk_productseriesinfo_size() const {
  return jk_productseriesinfo_.size();
}
inline void JK_Table::clear_jk_productseriesinfo() {
  jk_productseriesinfo_.Clear();
}
inline const ::transMsg::JK_ProductSeriesInfo& JK_Table::jk_productseriesinfo(int index) const {
  return jk_productseriesinfo_.Get(index);
}
inline ::transMsg::JK_ProductSeriesInfo* JK_Table::mutable_jk_productseriesinfo(int index) {
  return jk_productseriesinfo_.Mutable(index);
}
inline ::transMsg::JK_ProductSeriesInfo* JK_Table::add_jk_productseriesinfo() {
  return jk_productseriesinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductSeriesInfo >&
JK_Table::jk_productseriesinfo() const {
  return jk_productseriesinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductSeriesInfo >*
JK_Table::mutable_jk_productseriesinfo() {
  return &jk_productseriesinfo_;
}

// repeated .transMsg.JK_ProductSeriesValidInfo JK_ProductSeriesValidInfo = 67;
inline int JK_Table::jk_productseriesvalidinfo_size() const {
  return jk_productseriesvalidinfo_.size();
}
inline void JK_Table::clear_jk_productseriesvalidinfo() {
  jk_productseriesvalidinfo_.Clear();
}
inline const ::transMsg::JK_ProductSeriesValidInfo& JK_Table::jk_productseriesvalidinfo(int index) const {
  return jk_productseriesvalidinfo_.Get(index);
}
inline ::transMsg::JK_ProductSeriesValidInfo* JK_Table::mutable_jk_productseriesvalidinfo(int index) {
  return jk_productseriesvalidinfo_.Mutable(index);
}
inline ::transMsg::JK_ProductSeriesValidInfo* JK_Table::add_jk_productseriesvalidinfo() {
  return jk_productseriesvalidinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductSeriesValidInfo >&
JK_Table::jk_productseriesvalidinfo() const {
  return jk_productseriesvalidinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ProductSeriesValidInfo >*
JK_Table::mutable_jk_productseriesvalidinfo() {
  return &jk_productseriesvalidinfo_;
}

// repeated .transMsg.JK_ResourceInfo JK_ResourceInfo = 68;
inline int JK_Table::jk_resourceinfo_size() const {
  return jk_resourceinfo_.size();
}
inline void JK_Table::clear_jk_resourceinfo() {
  jk_resourceinfo_.Clear();
}
inline const ::transMsg::JK_ResourceInfo& JK_Table::jk_resourceinfo(int index) const {
  return jk_resourceinfo_.Get(index);
}
inline ::transMsg::JK_ResourceInfo* JK_Table::mutable_jk_resourceinfo(int index) {
  return jk_resourceinfo_.Mutable(index);
}
inline ::transMsg::JK_ResourceInfo* JK_Table::add_jk_resourceinfo() {
  return jk_resourceinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ResourceInfo >&
JK_Table::jk_resourceinfo() const {
  return jk_resourceinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_ResourceInfo >*
JK_Table::mutable_jk_resourceinfo() {
  return &jk_resourceinfo_;
}

// repeated .transMsg.JK_SealRuleInfo JK_SealRuleInfo = 69;
inline int JK_Table::jk_sealruleinfo_size() const {
  return jk_sealruleinfo_.size();
}
inline void JK_Table::clear_jk_sealruleinfo() {
  jk_sealruleinfo_.Clear();
}
inline const ::transMsg::JK_SealRuleInfo& JK_Table::jk_sealruleinfo(int index) const {
  return jk_sealruleinfo_.Get(index);
}
inline ::transMsg::JK_SealRuleInfo* JK_Table::mutable_jk_sealruleinfo(int index) {
  return jk_sealruleinfo_.Mutable(index);
}
inline ::transMsg::JK_SealRuleInfo* JK_Table::add_jk_sealruleinfo() {
  return jk_sealruleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SealRuleInfo >&
JK_Table::jk_sealruleinfo() const {
  return jk_sealruleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SealRuleInfo >*
JK_Table::mutable_jk_sealruleinfo() {
  return &jk_sealruleinfo_;
}

// repeated .transMsg.JK_SysConfigInfo JK_SysConfigInfo = 70;
inline int JK_Table::jk_sysconfiginfo_size() const {
  return jk_sysconfiginfo_.size();
}
inline void JK_Table::clear_jk_sysconfiginfo() {
  jk_sysconfiginfo_.Clear();
}
inline const ::transMsg::JK_SysConfigInfo& JK_Table::jk_sysconfiginfo(int index) const {
  return jk_sysconfiginfo_.Get(index);
}
inline ::transMsg::JK_SysConfigInfo* JK_Table::mutable_jk_sysconfiginfo(int index) {
  return jk_sysconfiginfo_.Mutable(index);
}
inline ::transMsg::JK_SysConfigInfo* JK_Table::add_jk_sysconfiginfo() {
  return jk_sysconfiginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysConfigInfo >&
JK_Table::jk_sysconfiginfo() const {
  return jk_sysconfiginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysConfigInfo >*
JK_Table::mutable_jk_sysconfiginfo() {
  return &jk_sysconfiginfo_;
}

// repeated .transMsg.JK_SysRuleConfigInfo JK_SysRuleConfigInfo = 71;
inline int JK_Table::jk_sysruleconfiginfo_size() const {
  return jk_sysruleconfiginfo_.size();
}
inline void JK_Table::clear_jk_sysruleconfiginfo() {
  jk_sysruleconfiginfo_.Clear();
}
inline const ::transMsg::JK_SysRuleConfigInfo& JK_Table::jk_sysruleconfiginfo(int index) const {
  return jk_sysruleconfiginfo_.Get(index);
}
inline ::transMsg::JK_SysRuleConfigInfo* JK_Table::mutable_jk_sysruleconfiginfo(int index) {
  return jk_sysruleconfiginfo_.Mutable(index);
}
inline ::transMsg::JK_SysRuleConfigInfo* JK_Table::add_jk_sysruleconfiginfo() {
  return jk_sysruleconfiginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysRuleConfigInfo >&
JK_Table::jk_sysruleconfiginfo() const {
  return jk_sysruleconfiginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysRuleConfigInfo >*
JK_Table::mutable_jk_sysruleconfiginfo() {
  return &jk_sysruleconfiginfo_;
}

// repeated .transMsg.JK_SysRuleTypeInfo JK_SysRuleTypeInfo = 72;
inline int JK_Table::jk_sysruletypeinfo_size() const {
  return jk_sysruletypeinfo_.size();
}
inline void JK_Table::clear_jk_sysruletypeinfo() {
  jk_sysruletypeinfo_.Clear();
}
inline const ::transMsg::JK_SysRuleTypeInfo& JK_Table::jk_sysruletypeinfo(int index) const {
  return jk_sysruletypeinfo_.Get(index);
}
inline ::transMsg::JK_SysRuleTypeInfo* JK_Table::mutable_jk_sysruletypeinfo(int index) {
  return jk_sysruletypeinfo_.Mutable(index);
}
inline ::transMsg::JK_SysRuleTypeInfo* JK_Table::add_jk_sysruletypeinfo() {
  return jk_sysruletypeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysRuleTypeInfo >&
JK_Table::jk_sysruletypeinfo() const {
  return jk_sysruletypeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_SysRuleTypeInfo >*
JK_Table::mutable_jk_sysruletypeinfo() {
  return &jk_sysruletypeinfo_;
}

// repeated .transMsg.JK_TableTopSideInfo JK_TableTopSideInfo = 73;
inline int JK_Table::jk_tabletopsideinfo_size() const {
  return jk_tabletopsideinfo_.size();
}
inline void JK_Table::clear_jk_tabletopsideinfo() {
  jk_tabletopsideinfo_.Clear();
}
inline const ::transMsg::JK_TableTopSideInfo& JK_Table::jk_tabletopsideinfo(int index) const {
  return jk_tabletopsideinfo_.Get(index);
}
inline ::transMsg::JK_TableTopSideInfo* JK_Table::mutable_jk_tabletopsideinfo(int index) {
  return jk_tabletopsideinfo_.Mutable(index);
}
inline ::transMsg::JK_TableTopSideInfo* JK_Table::add_jk_tabletopsideinfo() {
  return jk_tabletopsideinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::JK_TableTopSideInfo >&
JK_Table::jk_tabletopsideinfo() const {
  return jk_tabletopsideinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::JK_TableTopSideInfo >*
JK_Table::mutable_jk_tabletopsideinfo() {
  return &jk_tabletopsideinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2dJK_2eproto__INCLUDED
