// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg-SV.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg-SV.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

namespace {

const ::google::protobuf::Descriptor* SV_BOMChargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SV_BOMChargeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SV_ChargeShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SV_ChargeShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SV_LibFileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SV_LibFileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SV_ModuleChargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SV_ModuleChargeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SV_OrderActionRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SV_OrderActionRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SV_OrderFileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SV_OrderFileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SV_UserLoginStatusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SV_UserLoginStatusInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SV_Table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SV_Table_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2dSV_2eproto() {
  protobuf_AddDesc_msg_2dSV_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg-SV.proto");
  GOOGLE_CHECK(file != NULL);
  SV_BOMChargeInfo_descriptor_ = file->message_type(0);
  static const int SV_BOMChargeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_BOMChargeInfo, bomchargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_BOMChargeInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_BOMChargeInfo, categoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_BOMChargeInfo, enable_),
  };
  SV_BOMChargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SV_BOMChargeInfo_descriptor_,
      SV_BOMChargeInfo::default_instance_,
      SV_BOMChargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_BOMChargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_BOMChargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SV_BOMChargeInfo));
  SV_ChargeShopInfo_descriptor_ = file->message_type(1);
  static const int SV_ChargeShopInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ChargeShopInfo, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ChargeShopInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ChargeShopInfo, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ChargeShopInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ChargeShopInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ChargeShopInfo, stoptime_),
  };
  SV_ChargeShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SV_ChargeShopInfo_descriptor_,
      SV_ChargeShopInfo::default_instance_,
      SV_ChargeShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ChargeShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ChargeShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SV_ChargeShopInfo));
  SV_LibFileInfo_descriptor_ = file->message_type(2);
  static const int SV_LibFileInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_LibFileInfo, deptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_LibFileInfo, hashcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_LibFileInfo, destpath_),
  };
  SV_LibFileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SV_LibFileInfo_descriptor_,
      SV_LibFileInfo::default_instance_,
      SV_LibFileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_LibFileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_LibFileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SV_LibFileInfo));
  SV_ModuleChargeInfo_descriptor_ = file->message_type(3);
  static const int SV_ModuleChargeInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ModuleChargeInfo, modulechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ModuleChargeInfo, moduleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ModuleChargeInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ModuleChargeInfo, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ModuleChargeInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ModuleChargeInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ModuleChargeInfo, stoptime_),
  };
  SV_ModuleChargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SV_ModuleChargeInfo_descriptor_,
      SV_ModuleChargeInfo::default_instance_,
      SV_ModuleChargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ModuleChargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_ModuleChargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SV_ModuleChargeInfo));
  SV_OrderActionRecordInfo_descriptor_ = file->message_type(4);
  static const int SV_OrderActionRecordInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_OrderActionRecordInfo, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_OrderActionRecordInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_OrderActionRecordInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_OrderActionRecordInfo, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_OrderActionRecordInfo, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_OrderActionRecordInfo, auditcomment_),
  };
  SV_OrderActionRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SV_OrderActionRecordInfo_descriptor_,
      SV_OrderActionRecordInfo::default_instance_,
      SV_OrderActionRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_OrderActionRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_OrderActionRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SV_OrderActionRecordInfo));
  SV_OrderFileInfo_descriptor_ = file->message_type(5);
  static const int SV_OrderFileInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_OrderFileInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_OrderFileInfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_OrderFileInfo, filepath_),
  };
  SV_OrderFileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SV_OrderFileInfo_descriptor_,
      SV_OrderFileInfo::default_instance_,
      SV_OrderFileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_OrderFileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_OrderFileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SV_OrderFileInfo));
  SV_UserLoginStatusInfo_descriptor_ = file->message_type(6);
  static const int SV_UserLoginStatusInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_UserLoginStatusInfo, logintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_UserLoginStatusInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_UserLoginStatusInfo, loginstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_UserLoginStatusInfo, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_UserLoginStatusInfo, lastvisittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_UserLoginStatusInfo, loginip_),
  };
  SV_UserLoginStatusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SV_UserLoginStatusInfo_descriptor_,
      SV_UserLoginStatusInfo::default_instance_,
      SV_UserLoginStatusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_UserLoginStatusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_UserLoginStatusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SV_UserLoginStatusInfo));
  SV_Table_descriptor_ = file->message_type(7);
  static const int SV_Table_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_Table, sv_bomchargeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_Table, sv_chargeshopinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_Table, sv_libfileinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_Table, sv_modulechargeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_Table, sv_orderactionrecordinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_Table, sv_orderfileinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_Table, sv_userloginstatusinfo_),
  };
  SV_Table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SV_Table_descriptor_,
      SV_Table::default_instance_,
      SV_Table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_Table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SV_Table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SV_Table));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2dSV_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SV_BOMChargeInfo_descriptor_, &SV_BOMChargeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SV_ChargeShopInfo_descriptor_, &SV_ChargeShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SV_LibFileInfo_descriptor_, &SV_LibFileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SV_ModuleChargeInfo_descriptor_, &SV_ModuleChargeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SV_OrderActionRecordInfo_descriptor_, &SV_OrderActionRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SV_OrderFileInfo_descriptor_, &SV_OrderFileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SV_UserLoginStatusInfo_descriptor_, &SV_UserLoginStatusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SV_Table_descriptor_, &SV_Table::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2dSV_2eproto() {
  delete SV_BOMChargeInfo::default_instance_;
  delete SV_BOMChargeInfo_reflection_;
  delete SV_ChargeShopInfo::default_instance_;
  delete SV_ChargeShopInfo_reflection_;
  delete SV_LibFileInfo::default_instance_;
  delete SV_LibFileInfo_reflection_;
  delete SV_ModuleChargeInfo::default_instance_;
  delete SV_ModuleChargeInfo_reflection_;
  delete SV_OrderActionRecordInfo::default_instance_;
  delete SV_OrderActionRecordInfo_reflection_;
  delete SV_OrderFileInfo::default_instance_;
  delete SV_OrderFileInfo_reflection_;
  delete SV_UserLoginStatusInfo::default_instance_;
  delete SV_UserLoginStatusInfo_reflection_;
  delete SV_Table::default_instance_;
  delete SV_Table_reflection_;
}

void protobuf_AddDesc_msg_2dSV_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014msg-SV.proto\022\010transMsg\"^\n\020SV_BOMCharge"
    "Info\022\023\n\013BOMChargeID\030\001 \002(\003\022\021\n\tFactoryID\030\002"
    " \002(\005\022\022\n\nCategoryID\030\003 \002(\005\022\016\n\006Enable\030\004 \002(\005"
    "\"}\n\021SV_ChargeShopInfo\022\020\n\010RecordID\030\001 \002(\005\022"
    "\021\n\tFactoryID\030\002 \002(\005\022\016\n\006ShopID\030\003 \002(\005\022\016\n\006Us"
    "erID\030\004 \002(\005\022\021\n\tStartTime\030\005 \002(\003\022\020\n\010StopTim"
    "e\030\006 \002(\003\"D\n\016SV_LibFileInfo\022\016\n\006DeptID\030\001 \002("
    "\005\022\020\n\010HashCode\030\002 \002(\t\022\020\n\010DestPath\030\003 \002(\t\"\227\001"
    "\n\023SV_ModuleChargeInfo\022\026\n\016ModuleChargeID\030"
    "\001 \002(\003\022\020\n\010ModuleID\030\002 \002(\005\022\021\n\tFactoryID\030\003 \002"
    "(\005\022\016\n\006ShopID\030\004 \002(\005\022\016\n\006UserID\030\005 \002(\005\022\021\n\tSt"
    "artTime\030\006 \002(\003\022\020\n\010StopTime\030\007 \002(\003\"\211\001\n\030SV_O"
    "rderActionRecordInfo\022\020\n\010RecordID\030\001 \002(\003\022\017"
    "\n\007OrderID\030\002 \002(\003\022\016\n\006UserID\030\003 \002(\005\022\020\n\010Actio"
    "nID\030\004 \002(\005\022\022\n\nRecordTime\030\005 \002(\003\022\024\n\014AuditCo"
    "mment\030\006 \002(\t\"H\n\020SV_OrderFileInfo\022\017\n\007Order"
    "ID\030\001 \002(\003\022\021\n\tTableType\030\002 \002(\005\022\020\n\010FilePath\030"
    "\003 \002(\t\"\213\001\n\026SV_UserLoginStatusInfo\022\021\n\tLogi"
    "nType\030\001 \002(\005\022\016\n\006UserID\030\002 \002(\005\022\023\n\013LoginStat"
    "us\030\003 \002(\005\022\021\n\tLoginTime\030\004 \002(\003\022\025\n\rLastVisit"
    "Time\030\005 \002(\003\022\017\n\007LoginIP\030\006 \002(\t\"\244\003\n\010SV_Table"
    "\0224\n\020SV_BOMChargeInfo\030\001 \003(\0132\032.transMsg.SV"
    "_BOMChargeInfo\0226\n\021SV_ChargeShopInfo\030\002 \003("
    "\0132\033.transMsg.SV_ChargeShopInfo\0220\n\016SV_Lib"
    "FileInfo\030\003 \003(\0132\030.transMsg.SV_LibFileInfo"
    "\022:\n\023SV_ModuleChargeInfo\030\004 \003(\0132\035.transMsg"
    ".SV_ModuleChargeInfo\022D\n\030SV_OrderActionRe"
    "cordInfo\030\005 \003(\0132\".transMsg.SV_OrderAction"
    "RecordInfo\0224\n\020SV_OrderFileInfo\030\006 \003(\0132\032.t"
    "ransMsg.SV_OrderFileInfo\022@\n\026SV_UserLogin"
    "StatusInfo\030\007 \003(\0132 .transMsg.SV_UserLogin"
    "StatusInfo", 1250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg-SV.proto", &protobuf_RegisterTypes);
  SV_BOMChargeInfo::default_instance_ = new SV_BOMChargeInfo();
  SV_ChargeShopInfo::default_instance_ = new SV_ChargeShopInfo();
  SV_LibFileInfo::default_instance_ = new SV_LibFileInfo();
  SV_ModuleChargeInfo::default_instance_ = new SV_ModuleChargeInfo();
  SV_OrderActionRecordInfo::default_instance_ = new SV_OrderActionRecordInfo();
  SV_OrderFileInfo::default_instance_ = new SV_OrderFileInfo();
  SV_UserLoginStatusInfo::default_instance_ = new SV_UserLoginStatusInfo();
  SV_Table::default_instance_ = new SV_Table();
  SV_BOMChargeInfo::default_instance_->InitAsDefaultInstance();
  SV_ChargeShopInfo::default_instance_->InitAsDefaultInstance();
  SV_LibFileInfo::default_instance_->InitAsDefaultInstance();
  SV_ModuleChargeInfo::default_instance_->InitAsDefaultInstance();
  SV_OrderActionRecordInfo::default_instance_->InitAsDefaultInstance();
  SV_OrderFileInfo::default_instance_->InitAsDefaultInstance();
  SV_UserLoginStatusInfo::default_instance_->InitAsDefaultInstance();
  SV_Table::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2dSV_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2dSV_2eproto {
  StaticDescriptorInitializer_msg_2dSV_2eproto() {
    protobuf_AddDesc_msg_2dSV_2eproto();
  }
} static_descriptor_initializer_msg_2dSV_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SV_BOMChargeInfo::kBOMChargeIDFieldNumber;
const int SV_BOMChargeInfo::kFactoryIDFieldNumber;
const int SV_BOMChargeInfo::kCategoryIDFieldNumber;
const int SV_BOMChargeInfo::kEnableFieldNumber;
#endif  // !_MSC_VER

SV_BOMChargeInfo::SV_BOMChargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SV_BOMChargeInfo::InitAsDefaultInstance() {
}

SV_BOMChargeInfo::SV_BOMChargeInfo(const SV_BOMChargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SV_BOMChargeInfo::SharedCtor() {
  _cached_size_ = 0;
  bomchargeid_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  categoryid_ = 0;
  enable_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SV_BOMChargeInfo::~SV_BOMChargeInfo() {
  SharedDtor();
}

void SV_BOMChargeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SV_BOMChargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SV_BOMChargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SV_BOMChargeInfo_descriptor_;
}

const SV_BOMChargeInfo& SV_BOMChargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dSV_2eproto();
  return *default_instance_;
}

SV_BOMChargeInfo* SV_BOMChargeInfo::default_instance_ = NULL;

SV_BOMChargeInfo* SV_BOMChargeInfo::New() const {
  return new SV_BOMChargeInfo;
}

void SV_BOMChargeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bomchargeid_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    categoryid_ = 0;
    enable_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SV_BOMChargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 BOMChargeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bomchargeid_)));
          set_has_bomchargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CategoryID;
        break;
      }

      // required int32 CategoryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CategoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &categoryid_)));
          set_has_categoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Enable;
        break;
      }

      // required int32 Enable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SV_BOMChargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 BOMChargeID = 1;
  if (has_bomchargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bomchargeid(), output);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // required int32 CategoryID = 3;
  if (has_categoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->categoryid(), output);
  }

  // required int32 Enable = 4;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SV_BOMChargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 BOMChargeID = 1;
  if (has_bomchargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bomchargeid(), target);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // required int32 CategoryID = 3;
  if (has_categoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->categoryid(), target);
  }

  // required int32 Enable = 4;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SV_BOMChargeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 BOMChargeID = 1;
    if (has_bomchargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bomchargeid());
    }

    // required int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CategoryID = 3;
    if (has_categoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->categoryid());
    }

    // required int32 Enable = 4;
    if (has_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enable());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SV_BOMChargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SV_BOMChargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SV_BOMChargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SV_BOMChargeInfo::MergeFrom(const SV_BOMChargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bomchargeid()) {
      set_bomchargeid(from.bomchargeid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_categoryid()) {
      set_categoryid(from.categoryid());
    }
    if (from.has_enable()) {
      set_enable(from.enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SV_BOMChargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SV_BOMChargeInfo::CopyFrom(const SV_BOMChargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SV_BOMChargeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SV_BOMChargeInfo::Swap(SV_BOMChargeInfo* other) {
  if (other != this) {
    std::swap(bomchargeid_, other->bomchargeid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(categoryid_, other->categoryid_);
    std::swap(enable_, other->enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SV_BOMChargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SV_BOMChargeInfo_descriptor_;
  metadata.reflection = SV_BOMChargeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SV_ChargeShopInfo::kRecordIDFieldNumber;
const int SV_ChargeShopInfo::kFactoryIDFieldNumber;
const int SV_ChargeShopInfo::kShopIDFieldNumber;
const int SV_ChargeShopInfo::kUserIDFieldNumber;
const int SV_ChargeShopInfo::kStartTimeFieldNumber;
const int SV_ChargeShopInfo::kStopTimeFieldNumber;
#endif  // !_MSC_VER

SV_ChargeShopInfo::SV_ChargeShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SV_ChargeShopInfo::InitAsDefaultInstance() {
}

SV_ChargeShopInfo::SV_ChargeShopInfo(const SV_ChargeShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SV_ChargeShopInfo::SharedCtor() {
  _cached_size_ = 0;
  recordid_ = 0;
  factoryid_ = 0;
  shopid_ = 0;
  userid_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  stoptime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SV_ChargeShopInfo::~SV_ChargeShopInfo() {
  SharedDtor();
}

void SV_ChargeShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SV_ChargeShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SV_ChargeShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SV_ChargeShopInfo_descriptor_;
}

const SV_ChargeShopInfo& SV_ChargeShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dSV_2eproto();
  return *default_instance_;
}

SV_ChargeShopInfo* SV_ChargeShopInfo::default_instance_ = NULL;

SV_ChargeShopInfo* SV_ChargeShopInfo::New() const {
  return new SV_ChargeShopInfo;
}

void SV_ChargeShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recordid_ = 0;
    factoryid_ = 0;
    shopid_ = 0;
    userid_ = 0;
    starttime_ = GOOGLE_LONGLONG(0);
    stoptime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SV_ChargeShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RecordID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ShopID;
        break;
      }

      // required int32 ShopID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShopID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_UserID;
        break;
      }

      // required int32 UserID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_StartTime;
        break;
      }

      // required int64 StartTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_StopTime;
        break;
      }

      // required int64 StopTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SV_ChargeShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 RecordID = 1;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->recordid(), output);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // required int32 ShopID = 3;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->shopid(), output);
  }

  // required int32 UserID = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->userid(), output);
  }

  // required int64 StartTime = 5;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->starttime(), output);
  }

  // required int64 StopTime = 6;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->stoptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SV_ChargeShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 RecordID = 1;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->recordid(), target);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // required int32 ShopID = 3;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->shopid(), target);
  }

  // required int32 UserID = 4;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->userid(), target);
  }

  // required int64 StartTime = 5;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->starttime(), target);
  }

  // required int64 StopTime = 6;
  if (has_stoptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->stoptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SV_ChargeShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 RecordID = 1;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordid());
    }

    // required int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 ShopID = 3;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

    // required int32 UserID = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int64 StartTime = 5;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // required int64 StopTime = 6;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stoptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SV_ChargeShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SV_ChargeShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SV_ChargeShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SV_ChargeShopInfo::MergeFrom(const SV_ChargeShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SV_ChargeShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SV_ChargeShopInfo::CopyFrom(const SV_ChargeShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SV_ChargeShopInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SV_ChargeShopInfo::Swap(SV_ChargeShopInfo* other) {
  if (other != this) {
    std::swap(recordid_, other->recordid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(shopid_, other->shopid_);
    std::swap(userid_, other->userid_);
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SV_ChargeShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SV_ChargeShopInfo_descriptor_;
  metadata.reflection = SV_ChargeShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SV_LibFileInfo::kDeptIDFieldNumber;
const int SV_LibFileInfo::kHashCodeFieldNumber;
const int SV_LibFileInfo::kDestPathFieldNumber;
#endif  // !_MSC_VER

SV_LibFileInfo::SV_LibFileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SV_LibFileInfo::InitAsDefaultInstance() {
}

SV_LibFileInfo::SV_LibFileInfo(const SV_LibFileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SV_LibFileInfo::SharedCtor() {
  _cached_size_ = 0;
  deptid_ = 0;
  hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SV_LibFileInfo::~SV_LibFileInfo() {
  SharedDtor();
}

void SV_LibFileInfo::SharedDtor() {
  if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
    delete hashcode_;
  }
  if (destpath_ != &::google::protobuf::internal::kEmptyString) {
    delete destpath_;
  }
  if (this != default_instance_) {
  }
}

void SV_LibFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SV_LibFileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SV_LibFileInfo_descriptor_;
}

const SV_LibFileInfo& SV_LibFileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dSV_2eproto();
  return *default_instance_;
}

SV_LibFileInfo* SV_LibFileInfo::default_instance_ = NULL;

SV_LibFileInfo* SV_LibFileInfo::New() const {
  return new SV_LibFileInfo;
}

void SV_LibFileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deptid_ = 0;
    if (has_hashcode()) {
      if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
        hashcode_->clear();
      }
    }
    if (has_destpath()) {
      if (destpath_ != &::google::protobuf::internal::kEmptyString) {
        destpath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SV_LibFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DeptID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deptid_)));
          set_has_deptid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HashCode;
        break;
      }

      // required string HashCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HashCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hashcode().data(), this->hashcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DestPath;
        break;
      }

      // required string DestPath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DestPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destpath().data(), this->destpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SV_LibFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DeptID = 1;
  if (has_deptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deptid(), output);
  }

  // required string HashCode = 2;
  if (has_hashcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashcode().data(), this->hashcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hashcode(), output);
  }

  // required string DestPath = 3;
  if (has_destpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destpath().data(), this->destpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->destpath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SV_LibFileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DeptID = 1;
  if (has_deptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deptid(), target);
  }

  // required string HashCode = 2;
  if (has_hashcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashcode().data(), this->hashcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hashcode(), target);
  }

  // required string DestPath = 3;
  if (has_destpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destpath().data(), this->destpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->destpath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SV_LibFileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DeptID = 1;
    if (has_deptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deptid());
    }

    // required string HashCode = 2;
    if (has_hashcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hashcode());
    }

    // required string DestPath = 3;
    if (has_destpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destpath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SV_LibFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SV_LibFileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SV_LibFileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SV_LibFileInfo::MergeFrom(const SV_LibFileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deptid()) {
      set_deptid(from.deptid());
    }
    if (from.has_hashcode()) {
      set_hashcode(from.hashcode());
    }
    if (from.has_destpath()) {
      set_destpath(from.destpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SV_LibFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SV_LibFileInfo::CopyFrom(const SV_LibFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SV_LibFileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SV_LibFileInfo::Swap(SV_LibFileInfo* other) {
  if (other != this) {
    std::swap(deptid_, other->deptid_);
    std::swap(hashcode_, other->hashcode_);
    std::swap(destpath_, other->destpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SV_LibFileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SV_LibFileInfo_descriptor_;
  metadata.reflection = SV_LibFileInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SV_ModuleChargeInfo::kModuleChargeIDFieldNumber;
const int SV_ModuleChargeInfo::kModuleIDFieldNumber;
const int SV_ModuleChargeInfo::kFactoryIDFieldNumber;
const int SV_ModuleChargeInfo::kShopIDFieldNumber;
const int SV_ModuleChargeInfo::kUserIDFieldNumber;
const int SV_ModuleChargeInfo::kStartTimeFieldNumber;
const int SV_ModuleChargeInfo::kStopTimeFieldNumber;
#endif  // !_MSC_VER

SV_ModuleChargeInfo::SV_ModuleChargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SV_ModuleChargeInfo::InitAsDefaultInstance() {
}

SV_ModuleChargeInfo::SV_ModuleChargeInfo(const SV_ModuleChargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SV_ModuleChargeInfo::SharedCtor() {
  _cached_size_ = 0;
  modulechargeid_ = GOOGLE_LONGLONG(0);
  moduleid_ = 0;
  factoryid_ = 0;
  shopid_ = 0;
  userid_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  stoptime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SV_ModuleChargeInfo::~SV_ModuleChargeInfo() {
  SharedDtor();
}

void SV_ModuleChargeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SV_ModuleChargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SV_ModuleChargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SV_ModuleChargeInfo_descriptor_;
}

const SV_ModuleChargeInfo& SV_ModuleChargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dSV_2eproto();
  return *default_instance_;
}

SV_ModuleChargeInfo* SV_ModuleChargeInfo::default_instance_ = NULL;

SV_ModuleChargeInfo* SV_ModuleChargeInfo::New() const {
  return new SV_ModuleChargeInfo;
}

void SV_ModuleChargeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modulechargeid_ = GOOGLE_LONGLONG(0);
    moduleid_ = 0;
    factoryid_ = 0;
    shopid_ = 0;
    userid_ = 0;
    starttime_ = GOOGLE_LONGLONG(0);
    stoptime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SV_ModuleChargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ModuleChargeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modulechargeid_)));
          set_has_modulechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ModuleID;
        break;
      }

      // required int32 ModuleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModuleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moduleid_)));
          set_has_moduleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ShopID;
        break;
      }

      // required int32 ShopID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShopID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_UserID;
        break;
      }

      // required int32 UserID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_StartTime;
        break;
      }

      // required int64 StartTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_StopTime;
        break;
      }

      // required int64 StopTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SV_ModuleChargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 ModuleChargeID = 1;
  if (has_modulechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->modulechargeid(), output);
  }

  // required int32 ModuleID = 2;
  if (has_moduleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->moduleid(), output);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->factoryid(), output);
  }

  // required int32 ShopID = 4;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shopid(), output);
  }

  // required int32 UserID = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->userid(), output);
  }

  // required int64 StartTime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->starttime(), output);
  }

  // required int64 StopTime = 7;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->stoptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SV_ModuleChargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 ModuleChargeID = 1;
  if (has_modulechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->modulechargeid(), target);
  }

  // required int32 ModuleID = 2;
  if (has_moduleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->moduleid(), target);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->factoryid(), target);
  }

  // required int32 ShopID = 4;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shopid(), target);
  }

  // required int32 UserID = 5;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->userid(), target);
  }

  // required int64 StartTime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->starttime(), target);
  }

  // required int64 StopTime = 7;
  if (has_stoptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->stoptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SV_ModuleChargeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ModuleChargeID = 1;
    if (has_modulechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->modulechargeid());
    }

    // required int32 ModuleID = 2;
    if (has_moduleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moduleid());
    }

    // required int32 FactoryID = 3;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 ShopID = 4;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

    // required int32 UserID = 5;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int64 StartTime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // required int64 StopTime = 7;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stoptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SV_ModuleChargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SV_ModuleChargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SV_ModuleChargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SV_ModuleChargeInfo::MergeFrom(const SV_ModuleChargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modulechargeid()) {
      set_modulechargeid(from.modulechargeid());
    }
    if (from.has_moduleid()) {
      set_moduleid(from.moduleid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SV_ModuleChargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SV_ModuleChargeInfo::CopyFrom(const SV_ModuleChargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SV_ModuleChargeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void SV_ModuleChargeInfo::Swap(SV_ModuleChargeInfo* other) {
  if (other != this) {
    std::swap(modulechargeid_, other->modulechargeid_);
    std::swap(moduleid_, other->moduleid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(shopid_, other->shopid_);
    std::swap(userid_, other->userid_);
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SV_ModuleChargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SV_ModuleChargeInfo_descriptor_;
  metadata.reflection = SV_ModuleChargeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SV_OrderActionRecordInfo::kRecordIDFieldNumber;
const int SV_OrderActionRecordInfo::kOrderIDFieldNumber;
const int SV_OrderActionRecordInfo::kUserIDFieldNumber;
const int SV_OrderActionRecordInfo::kActionIDFieldNumber;
const int SV_OrderActionRecordInfo::kRecordTimeFieldNumber;
const int SV_OrderActionRecordInfo::kAuditCommentFieldNumber;
#endif  // !_MSC_VER

SV_OrderActionRecordInfo::SV_OrderActionRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SV_OrderActionRecordInfo::InitAsDefaultInstance() {
}

SV_OrderActionRecordInfo::SV_OrderActionRecordInfo(const SV_OrderActionRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SV_OrderActionRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  recordid_ = GOOGLE_LONGLONG(0);
  orderid_ = GOOGLE_LONGLONG(0);
  userid_ = 0;
  actionid_ = 0;
  recordtime_ = GOOGLE_LONGLONG(0);
  auditcomment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SV_OrderActionRecordInfo::~SV_OrderActionRecordInfo() {
  SharedDtor();
}

void SV_OrderActionRecordInfo::SharedDtor() {
  if (auditcomment_ != &::google::protobuf::internal::kEmptyString) {
    delete auditcomment_;
  }
  if (this != default_instance_) {
  }
}

void SV_OrderActionRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SV_OrderActionRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SV_OrderActionRecordInfo_descriptor_;
}

const SV_OrderActionRecordInfo& SV_OrderActionRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dSV_2eproto();
  return *default_instance_;
}

SV_OrderActionRecordInfo* SV_OrderActionRecordInfo::default_instance_ = NULL;

SV_OrderActionRecordInfo* SV_OrderActionRecordInfo::New() const {
  return new SV_OrderActionRecordInfo;
}

void SV_OrderActionRecordInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recordid_ = GOOGLE_LONGLONG(0);
    orderid_ = GOOGLE_LONGLONG(0);
    userid_ = 0;
    actionid_ = 0;
    recordtime_ = GOOGLE_LONGLONG(0);
    if (has_auditcomment()) {
      if (auditcomment_ != &::google::protobuf::internal::kEmptyString) {
        auditcomment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SV_OrderActionRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 RecordID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OrderID;
        break;
      }

      // required int64 OrderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_UserID;
        break;
      }

      // required int32 UserID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ActionID;
        break;
      }

      // required int32 ActionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionid_)));
          set_has_actionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RecordTime;
        break;
      }

      // required int64 RecordTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_AuditComment;
        break;
      }

      // required string AuditComment = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AuditComment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auditcomment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auditcomment().data(), this->auditcomment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SV_OrderActionRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 RecordID = 1;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->recordid(), output);
  }

  // required int64 OrderID = 2;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->orderid(), output);
  }

  // required int32 UserID = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid(), output);
  }

  // required int32 ActionID = 4;
  if (has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actionid(), output);
  }

  // required int64 RecordTime = 5;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->recordtime(), output);
  }

  // required string AuditComment = 6;
  if (has_auditcomment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auditcomment().data(), this->auditcomment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->auditcomment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SV_OrderActionRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 RecordID = 1;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->recordid(), target);
  }

  // required int64 OrderID = 2;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->orderid(), target);
  }

  // required int32 UserID = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid(), target);
  }

  // required int32 ActionID = 4;
  if (has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->actionid(), target);
  }

  // required int64 RecordTime = 5;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->recordtime(), target);
  }

  // required string AuditComment = 6;
  if (has_auditcomment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auditcomment().data(), this->auditcomment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->auditcomment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SV_OrderActionRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 RecordID = 1;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recordid());
    }

    // required int64 OrderID = 2;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 UserID = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 ActionID = 4;
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionid());
    }

    // required int64 RecordTime = 5;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recordtime());
    }

    // required string AuditComment = 6;
    if (has_auditcomment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auditcomment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SV_OrderActionRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SV_OrderActionRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SV_OrderActionRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SV_OrderActionRecordInfo::MergeFrom(const SV_OrderActionRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_actionid()) {
      set_actionid(from.actionid());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_auditcomment()) {
      set_auditcomment(from.auditcomment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SV_OrderActionRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SV_OrderActionRecordInfo::CopyFrom(const SV_OrderActionRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SV_OrderActionRecordInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SV_OrderActionRecordInfo::Swap(SV_OrderActionRecordInfo* other) {
  if (other != this) {
    std::swap(recordid_, other->recordid_);
    std::swap(orderid_, other->orderid_);
    std::swap(userid_, other->userid_);
    std::swap(actionid_, other->actionid_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(auditcomment_, other->auditcomment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SV_OrderActionRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SV_OrderActionRecordInfo_descriptor_;
  metadata.reflection = SV_OrderActionRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SV_OrderFileInfo::kOrderIDFieldNumber;
const int SV_OrderFileInfo::kTableTypeFieldNumber;
const int SV_OrderFileInfo::kFilePathFieldNumber;
#endif  // !_MSC_VER

SV_OrderFileInfo::SV_OrderFileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SV_OrderFileInfo::InitAsDefaultInstance() {
}

SV_OrderFileInfo::SV_OrderFileInfo(const SV_OrderFileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SV_OrderFileInfo::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  tabletype_ = 0;
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SV_OrderFileInfo::~SV_OrderFileInfo() {
  SharedDtor();
}

void SV_OrderFileInfo::SharedDtor() {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (this != default_instance_) {
  }
}

void SV_OrderFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SV_OrderFileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SV_OrderFileInfo_descriptor_;
}

const SV_OrderFileInfo& SV_OrderFileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dSV_2eproto();
  return *default_instance_;
}

SV_OrderFileInfo* SV_OrderFileInfo::default_instance_ = NULL;

SV_OrderFileInfo* SV_OrderFileInfo::New() const {
  return new SV_OrderFileInfo;
}

void SV_OrderFileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderid_ = GOOGLE_LONGLONG(0);
    tabletype_ = 0;
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SV_OrderFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 OrderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TableType;
        break;
      }

      // required int32 TableType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_FilePath;
        break;
      }

      // required string FilePath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FilePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SV_OrderFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 OrderID = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->orderid(), output);
  }

  // required int32 TableType = 2;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabletype(), output);
  }

  // required string FilePath = 3;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filepath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SV_OrderFileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 OrderID = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->orderid(), target);
  }

  // required int32 TableType = 2;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabletype(), target);
  }

  // required string FilePath = 3;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filepath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SV_OrderFileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 OrderID = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required int32 TableType = 2;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // required string FilePath = 3;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SV_OrderFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SV_OrderFileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SV_OrderFileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SV_OrderFileInfo::MergeFrom(const SV_OrderFileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SV_OrderFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SV_OrderFileInfo::CopyFrom(const SV_OrderFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SV_OrderFileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SV_OrderFileInfo::Swap(SV_OrderFileInfo* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(filepath_, other->filepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SV_OrderFileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SV_OrderFileInfo_descriptor_;
  metadata.reflection = SV_OrderFileInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SV_UserLoginStatusInfo::kLoginTypeFieldNumber;
const int SV_UserLoginStatusInfo::kUserIDFieldNumber;
const int SV_UserLoginStatusInfo::kLoginStatusFieldNumber;
const int SV_UserLoginStatusInfo::kLoginTimeFieldNumber;
const int SV_UserLoginStatusInfo::kLastVisitTimeFieldNumber;
const int SV_UserLoginStatusInfo::kLoginIPFieldNumber;
#endif  // !_MSC_VER

SV_UserLoginStatusInfo::SV_UserLoginStatusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SV_UserLoginStatusInfo::InitAsDefaultInstance() {
}

SV_UserLoginStatusInfo::SV_UserLoginStatusInfo(const SV_UserLoginStatusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SV_UserLoginStatusInfo::SharedCtor() {
  _cached_size_ = 0;
  logintype_ = 0;
  userid_ = 0;
  loginstatus_ = 0;
  logintime_ = GOOGLE_LONGLONG(0);
  lastvisittime_ = GOOGLE_LONGLONG(0);
  loginip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SV_UserLoginStatusInfo::~SV_UserLoginStatusInfo() {
  SharedDtor();
}

void SV_UserLoginStatusInfo::SharedDtor() {
  if (loginip_ != &::google::protobuf::internal::kEmptyString) {
    delete loginip_;
  }
  if (this != default_instance_) {
  }
}

void SV_UserLoginStatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SV_UserLoginStatusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SV_UserLoginStatusInfo_descriptor_;
}

const SV_UserLoginStatusInfo& SV_UserLoginStatusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dSV_2eproto();
  return *default_instance_;
}

SV_UserLoginStatusInfo* SV_UserLoginStatusInfo::default_instance_ = NULL;

SV_UserLoginStatusInfo* SV_UserLoginStatusInfo::New() const {
  return new SV_UserLoginStatusInfo;
}

void SV_UserLoginStatusInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logintype_ = 0;
    userid_ = 0;
    loginstatus_ = 0;
    logintime_ = GOOGLE_LONGLONG(0);
    lastvisittime_ = GOOGLE_LONGLONG(0);
    if (has_loginip()) {
      if (loginip_ != &::google::protobuf::internal::kEmptyString) {
        loginip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SV_UserLoginStatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 LoginType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logintype_)));
          set_has_logintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UserID;
        break;
      }

      // required int32 UserID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LoginStatus;
        break;
      }

      // required int32 LoginStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoginStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginstatus_)));
          set_has_loginstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LoginTime;
        break;
      }

      // required int64 LoginTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LastVisitTime;
        break;
      }

      // required int64 LastVisitTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastVisitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastvisittime_)));
          set_has_lastvisittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_LoginIP;
        break;
      }

      // required string LoginIP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LoginIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loginip().data(), this->loginip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SV_UserLoginStatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 LoginType = 1;
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->logintype(), output);
  }

  // required int32 UserID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // required int32 LoginStatus = 3;
  if (has_loginstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->loginstatus(), output);
  }

  // required int64 LoginTime = 4;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->logintime(), output);
  }

  // required int64 LastVisitTime = 5;
  if (has_lastvisittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lastvisittime(), output);
  }

  // required string LoginIP = 6;
  if (has_loginip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginip().data(), this->loginip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->loginip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SV_UserLoginStatusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 LoginType = 1;
  if (has_logintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->logintype(), target);
  }

  // required int32 UserID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // required int32 LoginStatus = 3;
  if (has_loginstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->loginstatus(), target);
  }

  // required int64 LoginTime = 4;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->logintime(), target);
  }

  // required int64 LastVisitTime = 5;
  if (has_lastvisittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lastvisittime(), target);
  }

  // required string LoginIP = 6;
  if (has_loginip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginip().data(), this->loginip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->loginip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SV_UserLoginStatusInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 LoginType = 1;
    if (has_logintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logintype());
    }

    // required int32 UserID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 LoginStatus = 3;
    if (has_loginstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginstatus());
    }

    // required int64 LoginTime = 4;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logintime());
    }

    // required int64 LastVisitTime = 5;
    if (has_lastvisittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastvisittime());
    }

    // required string LoginIP = 6;
    if (has_loginip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SV_UserLoginStatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SV_UserLoginStatusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SV_UserLoginStatusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SV_UserLoginStatusInfo::MergeFrom(const SV_UserLoginStatusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_loginstatus()) {
      set_loginstatus(from.loginstatus());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_lastvisittime()) {
      set_lastvisittime(from.lastvisittime());
    }
    if (from.has_loginip()) {
      set_loginip(from.loginip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SV_UserLoginStatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SV_UserLoginStatusInfo::CopyFrom(const SV_UserLoginStatusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SV_UserLoginStatusInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SV_UserLoginStatusInfo::Swap(SV_UserLoginStatusInfo* other) {
  if (other != this) {
    std::swap(logintype_, other->logintype_);
    std::swap(userid_, other->userid_);
    std::swap(loginstatus_, other->loginstatus_);
    std::swap(logintime_, other->logintime_);
    std::swap(lastvisittime_, other->lastvisittime_);
    std::swap(loginip_, other->loginip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SV_UserLoginStatusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SV_UserLoginStatusInfo_descriptor_;
  metadata.reflection = SV_UserLoginStatusInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SV_Table::kSVBOMChargeInfoFieldNumber;
const int SV_Table::kSVChargeShopInfoFieldNumber;
const int SV_Table::kSVLibFileInfoFieldNumber;
const int SV_Table::kSVModuleChargeInfoFieldNumber;
const int SV_Table::kSVOrderActionRecordInfoFieldNumber;
const int SV_Table::kSVOrderFileInfoFieldNumber;
const int SV_Table::kSVUserLoginStatusInfoFieldNumber;
#endif  // !_MSC_VER

SV_Table::SV_Table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SV_Table::InitAsDefaultInstance() {
}

SV_Table::SV_Table(const SV_Table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SV_Table::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SV_Table::~SV_Table() {
  SharedDtor();
}

void SV_Table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SV_Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SV_Table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SV_Table_descriptor_;
}

const SV_Table& SV_Table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dSV_2eproto();
  return *default_instance_;
}

SV_Table* SV_Table::default_instance_ = NULL;

SV_Table* SV_Table::New() const {
  return new SV_Table;
}

void SV_Table::Clear() {
  sv_bomchargeinfo_.Clear();
  sv_chargeshopinfo_.Clear();
  sv_libfileinfo_.Clear();
  sv_modulechargeinfo_.Clear();
  sv_orderactionrecordinfo_.Clear();
  sv_orderfileinfo_.Clear();
  sv_userloginstatusinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SV_Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transMsg.SV_BOMChargeInfo SV_BOMChargeInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SV_BOMChargeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sv_bomchargeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_SV_BOMChargeInfo;
        if (input->ExpectTag(18)) goto parse_SV_ChargeShopInfo;
        break;
      }

      // repeated .transMsg.SV_ChargeShopInfo SV_ChargeShopInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SV_ChargeShopInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sv_chargeshopinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SV_ChargeShopInfo;
        if (input->ExpectTag(26)) goto parse_SV_LibFileInfo;
        break;
      }

      // repeated .transMsg.SV_LibFileInfo SV_LibFileInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SV_LibFileInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sv_libfileinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SV_LibFileInfo;
        if (input->ExpectTag(34)) goto parse_SV_ModuleChargeInfo;
        break;
      }

      // repeated .transMsg.SV_ModuleChargeInfo SV_ModuleChargeInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SV_ModuleChargeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sv_modulechargeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SV_ModuleChargeInfo;
        if (input->ExpectTag(42)) goto parse_SV_OrderActionRecordInfo;
        break;
      }

      // repeated .transMsg.SV_OrderActionRecordInfo SV_OrderActionRecordInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SV_OrderActionRecordInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sv_orderactionrecordinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SV_OrderActionRecordInfo;
        if (input->ExpectTag(50)) goto parse_SV_OrderFileInfo;
        break;
      }

      // repeated .transMsg.SV_OrderFileInfo SV_OrderFileInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SV_OrderFileInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sv_orderfileinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SV_OrderFileInfo;
        if (input->ExpectTag(58)) goto parse_SV_UserLoginStatusInfo;
        break;
      }

      // repeated .transMsg.SV_UserLoginStatusInfo SV_UserLoginStatusInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SV_UserLoginStatusInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sv_userloginstatusinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SV_UserLoginStatusInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SV_Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .transMsg.SV_BOMChargeInfo SV_BOMChargeInfo = 1;
  for (int i = 0; i < this->sv_bomchargeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sv_bomchargeinfo(i), output);
  }

  // repeated .transMsg.SV_ChargeShopInfo SV_ChargeShopInfo = 2;
  for (int i = 0; i < this->sv_chargeshopinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sv_chargeshopinfo(i), output);
  }

  // repeated .transMsg.SV_LibFileInfo SV_LibFileInfo = 3;
  for (int i = 0; i < this->sv_libfileinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sv_libfileinfo(i), output);
  }

  // repeated .transMsg.SV_ModuleChargeInfo SV_ModuleChargeInfo = 4;
  for (int i = 0; i < this->sv_modulechargeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sv_modulechargeinfo(i), output);
  }

  // repeated .transMsg.SV_OrderActionRecordInfo SV_OrderActionRecordInfo = 5;
  for (int i = 0; i < this->sv_orderactionrecordinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sv_orderactionrecordinfo(i), output);
  }

  // repeated .transMsg.SV_OrderFileInfo SV_OrderFileInfo = 6;
  for (int i = 0; i < this->sv_orderfileinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sv_orderfileinfo(i), output);
  }

  // repeated .transMsg.SV_UserLoginStatusInfo SV_UserLoginStatusInfo = 7;
  for (int i = 0; i < this->sv_userloginstatusinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sv_userloginstatusinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SV_Table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .transMsg.SV_BOMChargeInfo SV_BOMChargeInfo = 1;
  for (int i = 0; i < this->sv_bomchargeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sv_bomchargeinfo(i), target);
  }

  // repeated .transMsg.SV_ChargeShopInfo SV_ChargeShopInfo = 2;
  for (int i = 0; i < this->sv_chargeshopinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sv_chargeshopinfo(i), target);
  }

  // repeated .transMsg.SV_LibFileInfo SV_LibFileInfo = 3;
  for (int i = 0; i < this->sv_libfileinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sv_libfileinfo(i), target);
  }

  // repeated .transMsg.SV_ModuleChargeInfo SV_ModuleChargeInfo = 4;
  for (int i = 0; i < this->sv_modulechargeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sv_modulechargeinfo(i), target);
  }

  // repeated .transMsg.SV_OrderActionRecordInfo SV_OrderActionRecordInfo = 5;
  for (int i = 0; i < this->sv_orderactionrecordinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sv_orderactionrecordinfo(i), target);
  }

  // repeated .transMsg.SV_OrderFileInfo SV_OrderFileInfo = 6;
  for (int i = 0; i < this->sv_orderfileinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sv_orderfileinfo(i), target);
  }

  // repeated .transMsg.SV_UserLoginStatusInfo SV_UserLoginStatusInfo = 7;
  for (int i = 0; i < this->sv_userloginstatusinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->sv_userloginstatusinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SV_Table::ByteSize() const {
  int total_size = 0;

  // repeated .transMsg.SV_BOMChargeInfo SV_BOMChargeInfo = 1;
  total_size += 1 * this->sv_bomchargeinfo_size();
  for (int i = 0; i < this->sv_bomchargeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sv_bomchargeinfo(i));
  }

  // repeated .transMsg.SV_ChargeShopInfo SV_ChargeShopInfo = 2;
  total_size += 1 * this->sv_chargeshopinfo_size();
  for (int i = 0; i < this->sv_chargeshopinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sv_chargeshopinfo(i));
  }

  // repeated .transMsg.SV_LibFileInfo SV_LibFileInfo = 3;
  total_size += 1 * this->sv_libfileinfo_size();
  for (int i = 0; i < this->sv_libfileinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sv_libfileinfo(i));
  }

  // repeated .transMsg.SV_ModuleChargeInfo SV_ModuleChargeInfo = 4;
  total_size += 1 * this->sv_modulechargeinfo_size();
  for (int i = 0; i < this->sv_modulechargeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sv_modulechargeinfo(i));
  }

  // repeated .transMsg.SV_OrderActionRecordInfo SV_OrderActionRecordInfo = 5;
  total_size += 1 * this->sv_orderactionrecordinfo_size();
  for (int i = 0; i < this->sv_orderactionrecordinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sv_orderactionrecordinfo(i));
  }

  // repeated .transMsg.SV_OrderFileInfo SV_OrderFileInfo = 6;
  total_size += 1 * this->sv_orderfileinfo_size();
  for (int i = 0; i < this->sv_orderfileinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sv_orderfileinfo(i));
  }

  // repeated .transMsg.SV_UserLoginStatusInfo SV_UserLoginStatusInfo = 7;
  total_size += 1 * this->sv_userloginstatusinfo_size();
  for (int i = 0; i < this->sv_userloginstatusinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sv_userloginstatusinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SV_Table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SV_Table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SV_Table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SV_Table::MergeFrom(const SV_Table& from) {
  GOOGLE_CHECK_NE(&from, this);
  sv_bomchargeinfo_.MergeFrom(from.sv_bomchargeinfo_);
  sv_chargeshopinfo_.MergeFrom(from.sv_chargeshopinfo_);
  sv_libfileinfo_.MergeFrom(from.sv_libfileinfo_);
  sv_modulechargeinfo_.MergeFrom(from.sv_modulechargeinfo_);
  sv_orderactionrecordinfo_.MergeFrom(from.sv_orderactionrecordinfo_);
  sv_orderfileinfo_.MergeFrom(from.sv_orderfileinfo_);
  sv_userloginstatusinfo_.MergeFrom(from.sv_userloginstatusinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SV_Table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SV_Table::CopyFrom(const SV_Table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SV_Table::IsInitialized() const {

  for (int i = 0; i < sv_bomchargeinfo_size(); i++) {
    if (!this->sv_bomchargeinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sv_chargeshopinfo_size(); i++) {
    if (!this->sv_chargeshopinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sv_libfileinfo_size(); i++) {
    if (!this->sv_libfileinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sv_modulechargeinfo_size(); i++) {
    if (!this->sv_modulechargeinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sv_orderactionrecordinfo_size(); i++) {
    if (!this->sv_orderactionrecordinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sv_orderfileinfo_size(); i++) {
    if (!this->sv_orderfileinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sv_userloginstatusinfo_size(); i++) {
    if (!this->sv_userloginstatusinfo(i).IsInitialized()) return false;
  }
  return true;
}

void SV_Table::Swap(SV_Table* other) {
  if (other != this) {
    sv_bomchargeinfo_.Swap(&other->sv_bomchargeinfo_);
    sv_chargeshopinfo_.Swap(&other->sv_chargeshopinfo_);
    sv_libfileinfo_.Swap(&other->sv_libfileinfo_);
    sv_modulechargeinfo_.Swap(&other->sv_modulechargeinfo_);
    sv_orderactionrecordinfo_.Swap(&other->sv_orderactionrecordinfo_);
    sv_orderfileinfo_.Swap(&other->sv_orderfileinfo_);
    sv_userloginstatusinfo_.Swap(&other->sv_userloginstatusinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SV_Table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SV_Table_descriptor_;
  metadata.reflection = SV_Table_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

// @@protoc_insertion_point(global_scope)
