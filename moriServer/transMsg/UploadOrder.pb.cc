// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UploadOrder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UploadOrder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

namespace {

const ::google::protobuf::Descriptor* SNewOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SNewOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* QUploadOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QUploadOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* AUploadOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AUploadOrder_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UploadOrder_2eproto() {
  protobuf_AddDesc_UploadOrder_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UploadOrder.proto");
  GOOGLE_CHECK(file != NULL);
  SNewOrder_descriptor_ = file->message_type(0);
  static const int SNewOrder_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNewOrder, oldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNewOrder, newid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNewOrder, newindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNewOrder, newcode_),
  };
  SNewOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SNewOrder_descriptor_,
      SNewOrder::default_instance_,
      SNewOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNewOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNewOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SNewOrder));
  QUploadOrder_descriptor_ = file->message_type(1);
  static const int QUploadOrder_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUploadOrder, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUploadOrder, ordertable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUploadOrder, isneworder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUploadOrder, parentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUploadOrder, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUploadOrder, iszborder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUploadOrder, withfile_),
  };
  QUploadOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QUploadOrder_descriptor_,
      QUploadOrder::default_instance_,
      QUploadOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUploadOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUploadOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QUploadOrder));
  AUploadOrder_descriptor_ = file->message_type(2);
  static const int AUploadOrder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AUploadOrder, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AUploadOrder, newinfo_),
  };
  AUploadOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AUploadOrder_descriptor_,
      AUploadOrder::default_instance_,
      AUploadOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AUploadOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AUploadOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AUploadOrder));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UploadOrder_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SNewOrder_descriptor_, &SNewOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QUploadOrder_descriptor_, &QUploadOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AUploadOrder_descriptor_, &AUploadOrder::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UploadOrder_2eproto() {
  delete SNewOrder::default_instance_;
  delete SNewOrder_reflection_;
  delete QUploadOrder::default_instance_;
  delete QUploadOrder_reflection_;
  delete AUploadOrder::default_instance_;
  delete AUploadOrder_reflection_;
}

void protobuf_AddDesc_UploadOrder_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::transMsg::protobuf_AddDesc_EReturnStatus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021UploadOrder.proto\022\010transMsg\032\023EReturnSt"
    "atus.proto\"L\n\tSNewOrder\022\r\n\005OldID\030\001 \002(\003\022\r"
    "\n\005NewID\030\002 \002(\003\022\020\n\010NewIndex\030\003 \002(\005\022\017\n\007NewCo"
    "de\030\004 \002(\014\"\246\001\n\014QUploadOrder\022\017\n\007OrderID\030\001 \002"
    "(\003\022\022\n\nOrderTable\030\002 \002(\014\022\031\n\nIsNewOrder\030\003 \001"
    "(\010:\005false\022\020\n\010ParentID\030\005 \001(\003\022\021\n\tOrderType"
    "\030\006 \001(\005\022\030\n\tIsZbOrder\030\007 \001(\010:\005false\022\027\n\010With"
    "File\030\010 \001(\010:\005false\"\\\n\014AUploadOrder\022&\n\005Sta"
    "ts\030\001 \002(\0162\027.transMsg.EReturnStatus\022$\n\007New"
    "Info\030\002 \001(\0132\023.transMsg.SNewOrder", 391);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UploadOrder.proto", &protobuf_RegisterTypes);
  SNewOrder::default_instance_ = new SNewOrder();
  QUploadOrder::default_instance_ = new QUploadOrder();
  AUploadOrder::default_instance_ = new AUploadOrder();
  SNewOrder::default_instance_->InitAsDefaultInstance();
  QUploadOrder::default_instance_->InitAsDefaultInstance();
  AUploadOrder::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UploadOrder_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UploadOrder_2eproto {
  StaticDescriptorInitializer_UploadOrder_2eproto() {
    protobuf_AddDesc_UploadOrder_2eproto();
  }
} static_descriptor_initializer_UploadOrder_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SNewOrder::kOldIDFieldNumber;
const int SNewOrder::kNewIDFieldNumber;
const int SNewOrder::kNewIndexFieldNumber;
const int SNewOrder::kNewCodeFieldNumber;
#endif  // !_MSC_VER

SNewOrder::SNewOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SNewOrder::InitAsDefaultInstance() {
}

SNewOrder::SNewOrder(const SNewOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SNewOrder::SharedCtor() {
  _cached_size_ = 0;
  oldid_ = GOOGLE_LONGLONG(0);
  newid_ = GOOGLE_LONGLONG(0);
  newindex_ = 0;
  newcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SNewOrder::~SNewOrder() {
  SharedDtor();
}

void SNewOrder::SharedDtor() {
  if (newcode_ != &::google::protobuf::internal::kEmptyString) {
    delete newcode_;
  }
  if (this != default_instance_) {
  }
}

void SNewOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SNewOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SNewOrder_descriptor_;
}

const SNewOrder& SNewOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadOrder_2eproto();
  return *default_instance_;
}

SNewOrder* SNewOrder::default_instance_ = NULL;

SNewOrder* SNewOrder::New() const {
  return new SNewOrder;
}

void SNewOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oldid_ = GOOGLE_LONGLONG(0);
    newid_ = GOOGLE_LONGLONG(0);
    newindex_ = 0;
    if (has_newcode()) {
      if (newcode_ != &::google::protobuf::internal::kEmptyString) {
        newcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SNewOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 OldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &oldid_)));
          set_has_oldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NewID;
        break;
      }

      // required int64 NewID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newid_)));
          set_has_newid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_NewIndex;
        break;
      }

      // required int32 NewIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newindex_)));
          set_has_newindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NewCode;
        break;
      }

      // required bytes NewCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NewCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_newcode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SNewOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 OldID = 1;
  if (has_oldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->oldid(), output);
  }

  // required int64 NewID = 2;
  if (has_newid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->newid(), output);
  }

  // required int32 NewIndex = 3;
  if (has_newindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->newindex(), output);
  }

  // required bytes NewCode = 4;
  if (has_newcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->newcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SNewOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 OldID = 1;
  if (has_oldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->oldid(), target);
  }

  // required int64 NewID = 2;
  if (has_newid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->newid(), target);
  }

  // required int32 NewIndex = 3;
  if (has_newindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->newindex(), target);
  }

  // required bytes NewCode = 4;
  if (has_newcode()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->newcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SNewOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 OldID = 1;
    if (has_oldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->oldid());
    }

    // required int64 NewID = 2;
    if (has_newid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newid());
    }

    // required int32 NewIndex = 3;
    if (has_newindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newindex());
    }

    // required bytes NewCode = 4;
    if (has_newcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->newcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SNewOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SNewOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SNewOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SNewOrder::MergeFrom(const SNewOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldid()) {
      set_oldid(from.oldid());
    }
    if (from.has_newid()) {
      set_newid(from.newid());
    }
    if (from.has_newindex()) {
      set_newindex(from.newindex());
    }
    if (from.has_newcode()) {
      set_newcode(from.newcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SNewOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNewOrder::CopyFrom(const SNewOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNewOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SNewOrder::Swap(SNewOrder* other) {
  if (other != this) {
    std::swap(oldid_, other->oldid_);
    std::swap(newid_, other->newid_);
    std::swap(newindex_, other->newindex_);
    std::swap(newcode_, other->newcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SNewOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SNewOrder_descriptor_;
  metadata.reflection = SNewOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QUploadOrder::kOrderIDFieldNumber;
const int QUploadOrder::kOrderTableFieldNumber;
const int QUploadOrder::kIsNewOrderFieldNumber;
const int QUploadOrder::kParentIDFieldNumber;
const int QUploadOrder::kOrderTypeFieldNumber;
const int QUploadOrder::kIsZbOrderFieldNumber;
const int QUploadOrder::kWithFileFieldNumber;
#endif  // !_MSC_VER

QUploadOrder::QUploadOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QUploadOrder::InitAsDefaultInstance() {
}

QUploadOrder::QUploadOrder(const QUploadOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QUploadOrder::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  ordertable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isneworder_ = false;
  parentid_ = GOOGLE_LONGLONG(0);
  ordertype_ = 0;
  iszborder_ = false;
  withfile_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QUploadOrder::~QUploadOrder() {
  SharedDtor();
}

void QUploadOrder::SharedDtor() {
  if (ordertable_ != &::google::protobuf::internal::kEmptyString) {
    delete ordertable_;
  }
  if (this != default_instance_) {
  }
}

void QUploadOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QUploadOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QUploadOrder_descriptor_;
}

const QUploadOrder& QUploadOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadOrder_2eproto();
  return *default_instance_;
}

QUploadOrder* QUploadOrder::default_instance_ = NULL;

QUploadOrder* QUploadOrder::New() const {
  return new QUploadOrder;
}

void QUploadOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderid_ = GOOGLE_LONGLONG(0);
    if (has_ordertable()) {
      if (ordertable_ != &::google::protobuf::internal::kEmptyString) {
        ordertable_->clear();
      }
    }
    isneworder_ = false;
    parentid_ = GOOGLE_LONGLONG(0);
    ordertype_ = 0;
    iszborder_ = false;
    withfile_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QUploadOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 OrderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OrderTable;
        break;
      }

      // required bytes OrderTable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ordertable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsNewOrder;
        break;
      }

      // optional bool IsNewOrder = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsNewOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isneworder_)));
          set_has_isneworder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ParentID;
        break;
      }

      // optional int64 ParentID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parentid_)));
          set_has_parentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_OrderType;
        break;
      }

      // optional int32 OrderType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordertype_)));
          set_has_ordertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_IsZbOrder;
        break;
      }

      // optional bool IsZbOrder = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsZbOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iszborder_)));
          set_has_iszborder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_WithFile;
        break;
      }

      // optional bool WithFile = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WithFile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &withfile_)));
          set_has_withfile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QUploadOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 OrderID = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->orderid(), output);
  }

  // required bytes OrderTable = 2;
  if (has_ordertable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ordertable(), output);
  }

  // optional bool IsNewOrder = 3 [default = false];
  if (has_isneworder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isneworder(), output);
  }

  // optional int64 ParentID = 5;
  if (has_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->parentid(), output);
  }

  // optional int32 OrderType = 6;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ordertype(), output);
  }

  // optional bool IsZbOrder = 7 [default = false];
  if (has_iszborder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->iszborder(), output);
  }

  // optional bool WithFile = 8 [default = false];
  if (has_withfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->withfile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QUploadOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 OrderID = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->orderid(), target);
  }

  // required bytes OrderTable = 2;
  if (has_ordertable()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ordertable(), target);
  }

  // optional bool IsNewOrder = 3 [default = false];
  if (has_isneworder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isneworder(), target);
  }

  // optional int64 ParentID = 5;
  if (has_parentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->parentid(), target);
  }

  // optional int32 OrderType = 6;
  if (has_ordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ordertype(), target);
  }

  // optional bool IsZbOrder = 7 [default = false];
  if (has_iszborder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->iszborder(), target);
  }

  // optional bool WithFile = 8 [default = false];
  if (has_withfile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->withfile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QUploadOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 OrderID = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // required bytes OrderTable = 2;
    if (has_ordertable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ordertable());
    }

    // optional bool IsNewOrder = 3 [default = false];
    if (has_isneworder()) {
      total_size += 1 + 1;
    }

    // optional int64 ParentID = 5;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parentid());
    }

    // optional int32 OrderType = 6;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordertype());
    }

    // optional bool IsZbOrder = 7 [default = false];
    if (has_iszborder()) {
      total_size += 1 + 1;
    }

    // optional bool WithFile = 8 [default = false];
    if (has_withfile()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QUploadOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QUploadOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QUploadOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QUploadOrder::MergeFrom(const QUploadOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_ordertable()) {
      set_ordertable(from.ordertable());
    }
    if (from.has_isneworder()) {
      set_isneworder(from.isneworder());
    }
    if (from.has_parentid()) {
      set_parentid(from.parentid());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_iszborder()) {
      set_iszborder(from.iszborder());
    }
    if (from.has_withfile()) {
      set_withfile(from.withfile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QUploadOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QUploadOrder::CopyFrom(const QUploadOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QUploadOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QUploadOrder::Swap(QUploadOrder* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(ordertable_, other->ordertable_);
    std::swap(isneworder_, other->isneworder_);
    std::swap(parentid_, other->parentid_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(iszborder_, other->iszborder_);
    std::swap(withfile_, other->withfile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QUploadOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QUploadOrder_descriptor_;
  metadata.reflection = QUploadOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AUploadOrder::kStatsFieldNumber;
const int AUploadOrder::kNewInfoFieldNumber;
#endif  // !_MSC_VER

AUploadOrder::AUploadOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AUploadOrder::InitAsDefaultInstance() {
  newinfo_ = const_cast< ::transMsg::SNewOrder*>(&::transMsg::SNewOrder::default_instance());
}

AUploadOrder::AUploadOrder(const AUploadOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AUploadOrder::SharedCtor() {
  _cached_size_ = 0;
  stats_ = 0;
  newinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AUploadOrder::~AUploadOrder() {
  SharedDtor();
}

void AUploadOrder::SharedDtor() {
  if (this != default_instance_) {
    delete newinfo_;
  }
}

void AUploadOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AUploadOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AUploadOrder_descriptor_;
}

const AUploadOrder& AUploadOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UploadOrder_2eproto();
  return *default_instance_;
}

AUploadOrder* AUploadOrder::default_instance_ = NULL;

AUploadOrder* AUploadOrder::New() const {
  return new AUploadOrder;
}

void AUploadOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stats_ = 0;
    if (has_newinfo()) {
      if (newinfo_ != NULL) newinfo_->::transMsg::SNewOrder::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AUploadOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transMsg.EReturnStatus Stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transMsg::EReturnStatus_IsValid(value)) {
            set_stats(static_cast< ::transMsg::EReturnStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NewInfo;
        break;
      }

      // optional .transMsg.SNewOrder NewInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NewInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AUploadOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stats(), output);
  }

  // optional .transMsg.SNewOrder NewInfo = 2;
  if (has_newinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AUploadOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stats(), target);
  }

  // optional .transMsg.SNewOrder NewInfo = 2;
  if (has_newinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AUploadOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transMsg.EReturnStatus Stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stats());
    }

    // optional .transMsg.SNewOrder NewInfo = 2;
    if (has_newinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AUploadOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AUploadOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AUploadOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AUploadOrder::MergeFrom(const AUploadOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      set_stats(from.stats());
    }
    if (from.has_newinfo()) {
      mutable_newinfo()->::transMsg::SNewOrder::MergeFrom(from.newinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AUploadOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AUploadOrder::CopyFrom(const AUploadOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUploadOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_newinfo()) {
    if (!this->newinfo().IsInitialized()) return false;
  }
  return true;
}

void AUploadOrder::Swap(AUploadOrder* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    std::swap(newinfo_, other->newinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AUploadOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AUploadOrder_descriptor_;
  metadata.reflection = AUploadOrder_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

// @@protoc_insertion_point(global_scope)
