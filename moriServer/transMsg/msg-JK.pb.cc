// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg-JK.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg-JK.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

namespace {

const ::google::protobuf::Descriptor* JK_CabBoardMatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabBoardMatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabBoardMatSkinInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabBoardMatSkinInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabDesignBoardSealEdgeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabDesignBoardSealEdgeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabDesignBoardSealInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabDesignBoardSealInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabDesignDoorRegionHandleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabDesignDoorRegionHandleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabDesignDoorRegionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabDesignDoorRegionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabDesignDoorSystemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabDesignDoorSystemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabDesignFNFittingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabDesignFNFittingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabDesignFNFittingMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabDesignFNFittingMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabDesignFootInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabDesignFootInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabDesignInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabDesignInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabDesignMatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabDesignMatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabMatPlanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabMatPlanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabStructBoardGapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabStructBoardGapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabStructBoardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabStructBoardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabStructBoardSealInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabStructBoardSealInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabStructGapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabStructGapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabStructInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabStructInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabStructMatPlanMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabStructMatPlanMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabinetSizeBoardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabinetSizeBoardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabinetSizeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabinetSizeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_CabinetSizeStructBoardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_CabinetSizeStructBoardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DecorBoardFrameMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DecorBoardFrameMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DecorBoardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DecorBoardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DecorBoardMatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DecorBoardMatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DecorBoardUnitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DecorBoardUnitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DecorBoardUnitMatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DecorBoardUnitMatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DecorBoardUnitSealInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DecorBoardUnitSealInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DecorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DecorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DecorLineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DecorLineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DecorLineMatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DecorLineMatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DecorUnitHWFittingMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DecorUnitHWFittingMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorBoardGapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorBoardGapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorBoardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorBoardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorBoardMatMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorBoardMatMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorBoardSealInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorBoardSealInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorMatMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorMatMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorMatPlanHandleMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorMatPlanHandleMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorMatPlanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorMatPlanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorRegionHWFittingMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorRegionHWFittingMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorSystemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorSystemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorSystemMatMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorSystemMatMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorSystemRegionDoorMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorSystemRegionDoorMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorSystemRegionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorSystemRegionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorSystemRegionSlideMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorSystemRegionSlideMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_DoorSystemRegionSlidePositionSizeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_DoorSystemRegionSlidePositionSizeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_FNFittingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_FNFittingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_FNFittingMatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_FNFittingMatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_FNFittingPartInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_FNFittingPartInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_FNFittingPartMatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_FNFittingPartMatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_FNFittingPartSealInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_FNFittingPartSealInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_FittingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_FittingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_FittingRuleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_FittingRuleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_FormulaConstInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_FormulaConstInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_GroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_GroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_HWFittingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_HWFittingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_HoleRuleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_HoleRuleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_MaterialInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_MaterialInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_MaterialSealRuleMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_MaterialSealRuleMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_ModelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_ModelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_NumberRuleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_NumberRuleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_PackageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_PackageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_PackageMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_PackageMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_ProductInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_ProductInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_ProductSeriesInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_ProductSeriesInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_ProductSeriesValidInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_ProductSeriesValidInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_ResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_ResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_SealRuleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_SealRuleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_SysConfigInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_SysConfigInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_SysRuleConfigInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_SysRuleConfigInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_SysRuleTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_SysRuleTypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_TableTopSideInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_TableTopSideInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JK_Table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JK_Table_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2dJK_2eproto() {
  protobuf_AddDesc_msg_2dJK_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg-JK.proto");
  GOOGLE_CHECK(file != NULL);
  JK_CabBoardMatInfo_descriptor_ = file->message_type(0);
  static const int JK_CabBoardMatInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatInfo, cabmatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatInfo, cabstructboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatInfo, matid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatInfo, matgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatInfo, sealruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatInfo, skindirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatInfo, isusedefaultskindirection_),
  };
  JK_CabBoardMatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabBoardMatInfo_descriptor_,
      JK_CabBoardMatInfo::default_instance_,
      JK_CabBoardMatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabBoardMatInfo));
  JK_CabBoardMatSkinInfo_descriptor_ = file->message_type(1);
  static const int JK_CabBoardMatSkinInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatSkinInfo, cabmatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatSkinInfo, cabstructboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatSkinInfo, skindirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatSkinInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatSkinInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatSkinInfo, isusedefaultskindirection_),
  };
  JK_CabBoardMatSkinInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabBoardMatSkinInfo_descriptor_,
      JK_CabBoardMatSkinInfo::default_instance_,
      JK_CabBoardMatSkinInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatSkinInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabBoardMatSkinInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabBoardMatSkinInfo));
  JK_CabDesignBoardSealEdgeInfo_descriptor_ = file->message_type(2);
  static const int JK_CabDesignBoardSealEdgeInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealEdgeInfo, cabdesignboardsealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealEdgeInfo, sealindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealEdgeInfo, sealmatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealEdgeInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealEdgeInfo, factoryid_),
  };
  JK_CabDesignBoardSealEdgeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabDesignBoardSealEdgeInfo_descriptor_,
      JK_CabDesignBoardSealEdgeInfo::default_instance_,
      JK_CabDesignBoardSealEdgeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealEdgeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealEdgeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabDesignBoardSealEdgeInfo));
  JK_CabDesignBoardSealInfo_descriptor_ = file->message_type(3);
  static const int JK_CabDesignBoardSealInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealInfo, cabdesignboardsealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealInfo, cabstructboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealInfo, cabstructid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealInfo, cabdesignid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealInfo, factoryid_),
  };
  JK_CabDesignBoardSealInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabDesignBoardSealInfo_descriptor_,
      JK_CabDesignBoardSealInfo::default_instance_,
      JK_CabDesignBoardSealInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignBoardSealInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabDesignBoardSealInfo));
  JK_CabDesignDoorRegionHandleInfo_descriptor_ = file->message_type(4);
  static const int JK_CabDesignDoorRegionHandleInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, cabdesigndoorregionhandleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, cabdesigndoorregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, arcz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, handleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, matchtype_),
  };
  JK_CabDesignDoorRegionHandleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabDesignDoorRegionHandleInfo_descriptor_,
      JK_CabDesignDoorRegionHandleInfo::default_instance_,
      JK_CabDesignDoorRegionHandleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionHandleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabDesignDoorRegionHandleInfo));
  JK_CabDesignDoorRegionInfo_descriptor_ = file->message_type(5);
  static const int JK_CabDesignDoorRegionInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, cabdesigndoorregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, cabdesignid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, isgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, iscanresize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, minxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, maxxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, xlenstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, minylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, maxylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, ylenstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, defaultmatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, defaultmodelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, defaultdoorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, cabdesigndoorsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, doorsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, isusedefaultsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, isusecutformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, doorregionid_),
  };
  JK_CabDesignDoorRegionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabDesignDoorRegionInfo_descriptor_,
      JK_CabDesignDoorRegionInfo::default_instance_,
      JK_CabDesignDoorRegionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorRegionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabDesignDoorRegionInfo));
  JK_CabDesignDoorSystemInfo_descriptor_ = file->message_type(6);
  static const int JK_CabDesignDoorSystemInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, cabdesigndoorsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, cabdesignid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, doorsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, installfacetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, xadjustlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, yadjustlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, iscandel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, xformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, yformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, zlen_),
  };
  JK_CabDesignDoorSystemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabDesignDoorSystemInfo_descriptor_,
      JK_CabDesignDoorSystemInfo::default_instance_,
      JK_CabDesignDoorSystemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignDoorSystemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabDesignDoorSystemInfo));
  JK_CabDesignFNFittingInfo_descriptor_ = file->message_type(7);
  static const int JK_CabDesignFNFittingInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, cabdesignfnfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, containerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, containergtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, iscandel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, xformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, yformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, zformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, updatetime_),
  };
  JK_CabDesignFNFittingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabDesignFNFittingInfo_descriptor_,
      JK_CabDesignFNFittingInfo::default_instance_,
      JK_CabDesignFNFittingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabDesignFNFittingInfo));
  JK_CabDesignFNFittingMapInfo_descriptor_ = file->message_type(8);
  static const int JK_CabDesignFNFittingMapInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingMapInfo, fnfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingMapInfo, cabdesignfnfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingMapInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingMapInfo, fntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingMapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingMapInfo, factoryid_),
  };
  JK_CabDesignFNFittingMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabDesignFNFittingMapInfo_descriptor_,
      JK_CabDesignFNFittingMapInfo::default_instance_,
      JK_CabDesignFNFittingMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFNFittingMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabDesignFNFittingMapInfo));
  JK_CabDesignFootInfo_descriptor_ = file->message_type(9);
  static const int JK_CabDesignFootInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFootInfo, cabdesignid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFootInfo, footid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFootInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFootInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFootInfo, factoryid_),
  };
  JK_CabDesignFootInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabDesignFootInfo_descriptor_,
      JK_CabDesignFootInfo::default_instance_,
      JK_CabDesignFootInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFootInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignFootInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabDesignFootInfo));
  JK_CabDesignInfo_descriptor_ = file->message_type(10);
  static const int JK_CabDesignInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, cabdesignid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, cabfunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, cabstructid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, postype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, cabdesigncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, cabdesignname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, cabdesignmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, photoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, isactive_),
  };
  JK_CabDesignInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabDesignInfo_descriptor_,
      JK_CabDesignInfo::default_instance_,
      JK_CabDesignInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabDesignInfo));
  JK_CabDesignMatInfo_descriptor_ = file->message_type(11);
  static const int JK_CabDesignMatInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignMatInfo, cabdesignid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignMatInfo, cabmatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignMatInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignMatInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignMatInfo, factoryid_),
  };
  JK_CabDesignMatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabDesignMatInfo_descriptor_,
      JK_CabDesignMatInfo::default_instance_,
      JK_CabDesignMatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignMatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabDesignMatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabDesignMatInfo));
  JK_CabMatPlanInfo_descriptor_ = file->message_type(12);
  static const int JK_CabMatPlanInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, cabmatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, matgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, matid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, cabmatplancode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, cabmatplanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, cabmatplanmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, vercode_),
  };
  JK_CabMatPlanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabMatPlanInfo_descriptor_,
      JK_CabMatPlanInfo::default_instance_,
      JK_CabMatPlanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabMatPlanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabMatPlanInfo));
  JK_CabStructBoardGapInfo_descriptor_ = file->message_type(13);
  static const int JK_CabStructBoardGapInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, cabstructboardgapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, cabstructboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, gappos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, gapindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, gaptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, gapshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, xlenformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, ylenformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, vercode_),
  };
  JK_CabStructBoardGapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabStructBoardGapInfo_descriptor_,
      JK_CabStructBoardGapInfo::default_instance_,
      JK_CabStructBoardGapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardGapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabStructBoardGapInfo));
  JK_CabStructBoardInfo_descriptor_ = file->message_type(14);
  static const int JK_CabStructBoardInfo_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, cabstructboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, cabstructid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, isusemain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, iscanrepeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, iscandel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, xformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, yformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, arcx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, arcy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, arcz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, cabstructboardname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, defaultskindirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, vercode_),
  };
  JK_CabStructBoardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabStructBoardInfo_descriptor_,
      JK_CabStructBoardInfo::default_instance_,
      JK_CabStructBoardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabStructBoardInfo));
  JK_CabStructBoardSealInfo_descriptor_ = file->message_type(15);
  static const int JK_CabStructBoardSealInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardSealInfo, cabstructboardsealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardSealInfo, sealorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardSealInfo, cabstructboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardSealInfo, sealtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardSealInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardSealInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardSealInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardSealInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardSealInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardSealInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardSealInfo, sealindex_),
  };
  JK_CabStructBoardSealInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabStructBoardSealInfo_descriptor_,
      JK_CabStructBoardSealInfo::default_instance_,
      JK_CabStructBoardSealInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardSealInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructBoardSealInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabStructBoardSealInfo));
  JK_CabStructGapInfo_descriptor_ = file->message_type(16);
  static const int JK_CabStructGapInfo_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, cabstructgapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, cabstructid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, cabgaptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, xformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, yformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, zformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, xvar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, yvar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, zvar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, xvarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, yvarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, zvarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, cabstructcabstructgapcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, cabstructgapname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, cabstructgapmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, vercode_),
  };
  JK_CabStructGapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabStructGapInfo_descriptor_,
      JK_CabStructGapInfo::default_instance_,
      JK_CabStructGapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructGapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabStructGapInfo));
  JK_CabStructInfo_descriptor_ = file->message_type(17);
  static const int JK_CabStructInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, cabstructid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, cabgaptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, cabshapeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, virtualxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, virtualylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, virtualzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, virtualshapexlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, virtualshapezlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, virtualgapxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, virtualgapylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, virtualgapzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, cabstructcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, cabstructname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, cabstructmemo_),
  };
  JK_CabStructInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabStructInfo_descriptor_,
      JK_CabStructInfo::default_instance_,
      JK_CabStructInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabStructInfo));
  JK_CabStructMatPlanMapInfo_descriptor_ = file->message_type(18);
  static const int JK_CabStructMatPlanMapInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructMatPlanMapInfo, cabmatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructMatPlanMapInfo, cabstructid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructMatPlanMapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructMatPlanMapInfo, factoryid_),
  };
  JK_CabStructMatPlanMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabStructMatPlanMapInfo_descriptor_,
      JK_CabStructMatPlanMapInfo::default_instance_,
      JK_CabStructMatPlanMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructMatPlanMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabStructMatPlanMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabStructMatPlanMapInfo));
  JK_CabinetSizeBoardInfo_descriptor_ = file->message_type(19);
  static const int JK_CabinetSizeBoardInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, cabinetsizeboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, cabinetsizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, cabstructboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, iscanrelocate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, iscandel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, cabstructboardname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, vercode_),
  };
  JK_CabinetSizeBoardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabinetSizeBoardInfo_descriptor_,
      JK_CabinetSizeBoardInfo::default_instance_,
      JK_CabinetSizeBoardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeBoardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabinetSizeBoardInfo));
  JK_CabinetSizeInfo_descriptor_ = file->message_type(20);
  static const int JK_CabinetSizeInfo_offsets_[48] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, cabdesignid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, cabinetsizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, photoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, isstandard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, minxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, maxxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, xlenstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, minylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, maxylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, ylenstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, minzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, maxzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, zlenstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, shapexlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, shapezlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, gapxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, gapylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, gapzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, shapeminxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, shapemaxxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, shapexlenstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, shapeminzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, shapemaxzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, shapezlenstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, gapminxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, gapmaxxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, gapxlenstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, gapminylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, gapmaxylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, gapylenstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, gapminzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, gapmaxzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, gapzlenstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, footcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, issysfootrule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, cabinetsizecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, cabinetsizename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, cabinetsizememo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, vercode_),
  };
  JK_CabinetSizeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabinetSizeInfo_descriptor_,
      JK_CabinetSizeInfo::default_instance_,
      JK_CabinetSizeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabinetSizeInfo));
  JK_CabinetSizeStructBoardInfo_descriptor_ = file->message_type(21);
  static const int JK_CabinetSizeStructBoardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeStructBoardInfo, cabstructboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeStructBoardInfo, cabinetsizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeStructBoardInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeStructBoardInfo, factoryid_),
  };
  JK_CabinetSizeStructBoardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_CabinetSizeStructBoardInfo_descriptor_,
      JK_CabinetSizeStructBoardInfo::default_instance_,
      JK_CabinetSizeStructBoardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeStructBoardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_CabinetSizeStructBoardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_CabinetSizeStructBoardInfo));
  JK_DecorBoardFrameMapInfo_descriptor_ = file->message_type(22);
  static const int JK_DecorBoardFrameMapInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardFrameMapInfo, decorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardFrameMapInfo, decorframeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardFrameMapInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardFrameMapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardFrameMapInfo, factoryid_),
  };
  JK_DecorBoardFrameMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DecorBoardFrameMapInfo_descriptor_,
      JK_DecorBoardFrameMapInfo::default_instance_,
      JK_DecorBoardFrameMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardFrameMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardFrameMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DecorBoardFrameMapInfo));
  JK_DecorBoardInfo_descriptor_ = file->message_type(23);
  static const int JK_DecorBoardInfo_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, decorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, sourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, defaultypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, decorboardcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, decorboardname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, decorboardmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, xformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, yformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, iscanresize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, minxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, maxxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, xlenstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, minylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, maxylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, ylenstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, photoid_),
  };
  JK_DecorBoardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DecorBoardInfo_descriptor_,
      JK_DecorBoardInfo::default_instance_,
      JK_DecorBoardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DecorBoardInfo));
  JK_DecorBoardMatInfo_descriptor_ = file->message_type(24);
  static const int JK_DecorBoardMatInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardMatInfo, decorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardMatInfo, matid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardMatInfo, matgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardMatInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardMatInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardMatInfo, factoryid_),
  };
  JK_DecorBoardMatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DecorBoardMatInfo_descriptor_,
      JK_DecorBoardMatInfo::default_instance_,
      JK_DecorBoardMatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardMatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardMatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DecorBoardMatInfo));
  JK_DecorBoardUnitInfo_descriptor_ = file->message_type(25);
  static const int JK_DecorBoardUnitInfo_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, decorboardunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, decorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, splittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, skindirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, arcx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, arcy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, arcz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, xformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, yformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, decorboardunitindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, decorboardunitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, decorboardunitmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, isusedefaultmat_),
  };
  JK_DecorBoardUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DecorBoardUnitInfo_descriptor_,
      JK_DecorBoardUnitInfo::default_instance_,
      JK_DecorBoardUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DecorBoardUnitInfo));
  JK_DecorBoardUnitMatInfo_descriptor_ = file->message_type(26);
  static const int JK_DecorBoardUnitMatInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitMatInfo, decorboardunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitMatInfo, matid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitMatInfo, matgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitMatInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitMatInfo, defaultsealruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitMatInfo, skindirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitMatInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitMatInfo, factoryid_),
  };
  JK_DecorBoardUnitMatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DecorBoardUnitMatInfo_descriptor_,
      JK_DecorBoardUnitMatInfo::default_instance_,
      JK_DecorBoardUnitMatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitMatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitMatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DecorBoardUnitMatInfo));
  JK_DecorBoardUnitSealInfo_descriptor_ = file->message_type(27);
  static const int JK_DecorBoardUnitSealInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, decorboardunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, sealindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, sealtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, defaultmaterialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, sealorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, decorboardunitsealid_),
  };
  JK_DecorBoardUnitSealInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DecorBoardUnitSealInfo_descriptor_,
      JK_DecorBoardUnitSealInfo::default_instance_,
      JK_DecorBoardUnitSealInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorBoardUnitSealInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DecorBoardUnitSealInfo));
  JK_DecorInfo_descriptor_ = file->message_type(28);
  static const int JK_DecorInfo_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, decorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, issplit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, showid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, skinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, decorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, decorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, decormemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, vercode_),
  };
  JK_DecorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DecorInfo_descriptor_,
      JK_DecorInfo::default_instance_,
      JK_DecorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DecorInfo));
  JK_DecorLineInfo_descriptor_ = file->message_type(29);
  static const int JK_DecorLineInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, decorlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, showid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, zoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, decorlinecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, decorlinename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, decorlinememo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, defaultylen_),
  };
  JK_DecorLineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DecorLineInfo_descriptor_,
      JK_DecorLineInfo::default_instance_,
      JK_DecorLineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DecorLineInfo));
  JK_DecorLineMatInfo_descriptor_ = file->message_type(30);
  static const int JK_DecorLineMatInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineMatInfo, decorlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineMatInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineMatInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineMatInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineMatInfo, factoryid_),
  };
  JK_DecorLineMatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DecorLineMatInfo_descriptor_,
      JK_DecorLineMatInfo::default_instance_,
      JK_DecorLineMatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineMatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorLineMatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DecorLineMatInfo));
  JK_DecorUnitHWFittingMapInfo_descriptor_ = file->message_type(31);
  static const int JK_DecorUnitHWFittingMapInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorUnitHWFittingMapInfo, decorboardunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorUnitHWFittingMapInfo, hwfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorUnitHWFittingMapInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorUnitHWFittingMapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorUnitHWFittingMapInfo, factoryid_),
  };
  JK_DecorUnitHWFittingMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DecorUnitHWFittingMapInfo_descriptor_,
      JK_DecorUnitHWFittingMapInfo::default_instance_,
      JK_DecorUnitHWFittingMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorUnitHWFittingMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DecorUnitHWFittingMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DecorUnitHWFittingMapInfo));
  JK_DoorBoardGapInfo_descriptor_ = file->message_type(32);
  static const int JK_DoorBoardGapInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, doorboardgapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, doorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, gappos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, gapindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, gaptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, gapshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, xlenformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, ylenformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, vercode_),
  };
  JK_DoorBoardGapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorBoardGapInfo_descriptor_,
      JK_DoorBoardGapInfo::default_instance_,
      JK_DoorBoardGapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardGapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorBoardGapInfo));
  JK_DoorBoardInfo_descriptor_ = file->message_type(33);
  static const int JK_DoorBoardInfo_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, doorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, doorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, isusedefaultmat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, splittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, skindirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, arcx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, arcy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, arcz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, xformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, yformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, doorboardindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, doorboardname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, doorboardmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, updatetime_),
  };
  JK_DoorBoardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorBoardInfo_descriptor_,
      JK_DoorBoardInfo::default_instance_,
      JK_DoorBoardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorBoardInfo));
  JK_DoorBoardMatMapInfo_descriptor_ = file->message_type(34);
  static const int JK_DoorBoardMatMapInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardMatMapInfo, doorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardMatMapInfo, matid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardMatMapInfo, matgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardMatMapInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardMatMapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardMatMapInfo, factoryid_),
  };
  JK_DoorBoardMatMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorBoardMatMapInfo_descriptor_,
      JK_DoorBoardMatMapInfo::default_instance_,
      JK_DoorBoardMatMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardMatMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardMatMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorBoardMatMapInfo));
  JK_DoorBoardSealInfo_descriptor_ = file->message_type(35);
  static const int JK_DoorBoardSealInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardSealInfo, doorboardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardSealInfo, sealorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardSealInfo, sealtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardSealInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardSealInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardSealInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardSealInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardSealInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardSealInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardSealInfo, sealindex_),
  };
  JK_DoorBoardSealInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorBoardSealInfo_descriptor_,
      JK_DoorBoardSealInfo::default_instance_,
      JK_DoorBoardSealInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardSealInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorBoardSealInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorBoardSealInfo));
  JK_DoorInfo_descriptor_ = file->message_type(36);
  static const int JK_DoorInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, doorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, combinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, photoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, virtualcontainerxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, virtualcontainerylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, virtualcontainerzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, doorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, doorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, doormemo_),
  };
  JK_DoorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorInfo_descriptor_,
      JK_DoorInfo::default_instance_,
      JK_DoorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorInfo));
  JK_DoorMatMapInfo_descriptor_ = file->message_type(37);
  static const int JK_DoorMatMapInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatMapInfo, doorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatMapInfo, doormatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatMapInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatMapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatMapInfo, factoryid_),
  };
  JK_DoorMatMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorMatMapInfo_descriptor_,
      JK_DoorMatMapInfo::default_instance_,
      JK_DoorMatMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorMatMapInfo));
  JK_DoorMatPlanHandleMapInfo_descriptor_ = file->message_type(38);
  static const int JK_DoorMatPlanHandleMapInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanHandleMapInfo, doormatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanHandleMapInfo, handleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanHandleMapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanHandleMapInfo, factoryid_),
  };
  JK_DoorMatPlanHandleMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorMatPlanHandleMapInfo_descriptor_,
      JK_DoorMatPlanHandleMapInfo::default_instance_,
      JK_DoorMatPlanHandleMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanHandleMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanHandleMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorMatPlanHandleMapInfo));
  JK_DoorMatPlanInfo_descriptor_ = file->message_type(39);
  static const int JK_DoorMatPlanInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, doormatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, matid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, matgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, doormatplancode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, doormatplanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, doormatplanmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, iscanseal_),
  };
  JK_DoorMatPlanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorMatPlanInfo_descriptor_,
      JK_DoorMatPlanInfo::default_instance_,
      JK_DoorMatPlanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorMatPlanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorMatPlanInfo));
  JK_DoorRegionHWFittingMapInfo_descriptor_ = file->message_type(40);
  static const int JK_DoorRegionHWFittingMapInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorRegionHWFittingMapInfo, doorsystemregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorRegionHWFittingMapInfo, hwfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorRegionHWFittingMapInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorRegionHWFittingMapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorRegionHWFittingMapInfo, factoryid_),
  };
  JK_DoorRegionHWFittingMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorRegionHWFittingMapInfo_descriptor_,
      JK_DoorRegionHWFittingMapInfo::default_instance_,
      JK_DoorRegionHWFittingMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorRegionHWFittingMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorRegionHWFittingMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorRegionHWFittingMapInfo));
  JK_DoorSystemInfo_descriptor_ = file->message_type(41);
  static const int JK_DoorSystemInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, doorsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, matchcabshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, installtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, virtualxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, virtualylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, virtualshapexlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, virtualshapezlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, doorsystemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, doorsystemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, doorsystemmemo_),
  };
  JK_DoorSystemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorSystemInfo_descriptor_,
      JK_DoorSystemInfo::default_instance_,
      JK_DoorSystemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorSystemInfo));
  JK_DoorSystemMatMapInfo_descriptor_ = file->message_type(42);
  static const int JK_DoorSystemMatMapInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemMatMapInfo, doorsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemMatMapInfo, doormatplanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemMatMapInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemMatMapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemMatMapInfo, factoryid_),
  };
  JK_DoorSystemMatMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorSystemMatMapInfo_descriptor_,
      JK_DoorSystemMatMapInfo::default_instance_,
      JK_DoorSystemMatMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemMatMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemMatMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorSystemMatMapInfo));
  JK_DoorSystemRegionDoorMapInfo_descriptor_ = file->message_type(43);
  static const int JK_DoorSystemRegionDoorMapInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionDoorMapInfo, doorsystemregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionDoorMapInfo, doorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionDoorMapInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionDoorMapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionDoorMapInfo, factoryid_),
  };
  JK_DoorSystemRegionDoorMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorSystemRegionDoorMapInfo_descriptor_,
      JK_DoorSystemRegionDoorMapInfo::default_instance_,
      JK_DoorSystemRegionDoorMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionDoorMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionDoorMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorSystemRegionDoorMapInfo));
  JK_DoorSystemRegionInfo_descriptor_ = file->message_type(44);
  static const int JK_DoorSystemRegionInfo_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, doorsystemregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, doorsystemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, parentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, regionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, cutdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, cutformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, isslide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, isround_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, lenprecision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, opendoortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, xadjustlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, yadjustlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, iscanresize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, doorfunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, handlexdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, handleydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, handlezdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, handlexoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, handleyoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, handlezoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, doorboardmattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, doorboardmatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, isusecustomthick_),
  };
  JK_DoorSystemRegionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorSystemRegionInfo_descriptor_,
      JK_DoorSystemRegionInfo::default_instance_,
      JK_DoorSystemRegionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorSystemRegionInfo));
  JK_DoorSystemRegionSlideMapInfo_descriptor_ = file->message_type(45);
  static const int JK_DoorSystemRegionSlideMapInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlideMapInfo, doorsystemregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlideMapInfo, slideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlideMapInfo, slideposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlideMapInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlideMapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlideMapInfo, factoryid_),
  };
  JK_DoorSystemRegionSlideMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorSystemRegionSlideMapInfo_descriptor_,
      JK_DoorSystemRegionSlideMapInfo::default_instance_,
      JK_DoorSystemRegionSlideMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlideMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlideMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorSystemRegionSlideMapInfo));
  JK_DoorSystemRegionSlidePositionSizeInfo_descriptor_ = file->message_type(46);
  static const int JK_DoorSystemRegionSlidePositionSizeInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, doorsystemregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, slideposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, xadjustlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, updatetime_),
  };
  JK_DoorSystemRegionSlidePositionSizeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_DoorSystemRegionSlidePositionSizeInfo_descriptor_,
      JK_DoorSystemRegionSlidePositionSizeInfo::default_instance_,
      JK_DoorSystemRegionSlidePositionSizeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_DoorSystemRegionSlidePositionSizeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_DoorSystemRegionSlidePositionSizeInfo));
  JK_FNFittingInfo_descriptor_ = file->message_type(47);
  static const int JK_FNFittingInfo_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, fnfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, issplit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, isentire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, showid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, mininstallx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, mininstally_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, mininstallz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, minxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, maxxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, minylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, maxylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, minzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, maxzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, ismatchxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, ismatchylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, ismatchzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, defaultypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, fnfittingcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, fnfittingname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, fnfittingmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, vercode_),
  };
  JK_FNFittingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_FNFittingInfo_descriptor_,
      JK_FNFittingInfo::default_instance_,
      JK_FNFittingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_FNFittingInfo));
  JK_FNFittingMatInfo_descriptor_ = file->message_type(48);
  static const int JK_FNFittingMatInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingMatInfo, fnfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingMatInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingMatInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingMatInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingMatInfo, factoryid_),
  };
  JK_FNFittingMatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_FNFittingMatInfo_descriptor_,
      JK_FNFittingMatInfo::default_instance_,
      JK_FNFittingMatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingMatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingMatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_FNFittingMatInfo));
  JK_FNFittingPartInfo_descriptor_ = file->message_type(49);
  static const int JK_FNFittingPartInfo_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, fnfittingpartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, parttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, fnfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, isusemain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, skindirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, splittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, arcx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, arcy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, arcz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, xformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, yformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, xoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, yoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, zoffsetformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, fnfittingpartcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, fnfittingpartname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, fnfittingpartmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, updatetime_),
  };
  JK_FNFittingPartInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_FNFittingPartInfo_descriptor_,
      JK_FNFittingPartInfo::default_instance_,
      JK_FNFittingPartInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_FNFittingPartInfo));
  JK_FNFittingPartMatInfo_descriptor_ = file->message_type(50);
  static const int JK_FNFittingPartMatInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartMatInfo, fnfittingpartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartMatInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartMatInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartMatInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartMatInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartMatInfo, matgtype_),
  };
  JK_FNFittingPartMatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_FNFittingPartMatInfo_descriptor_,
      JK_FNFittingPartMatInfo::default_instance_,
      JK_FNFittingPartMatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartMatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartMatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_FNFittingPartMatInfo));
  JK_FNFittingPartSealInfo_descriptor_ = file->message_type(51);
  static const int JK_FNFittingPartSealInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartSealInfo, fnfittingpartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartSealInfo, sealorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartSealInfo, sealindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartSealInfo, sealtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartSealInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartSealInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartSealInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartSealInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartSealInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartSealInfo, updatetime_),
  };
  JK_FNFittingPartSealInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_FNFittingPartSealInfo_descriptor_,
      JK_FNFittingPartSealInfo::default_instance_,
      JK_FNFittingPartSealInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartSealInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FNFittingPartSealInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_FNFittingPartSealInfo));
  JK_FittingInfo_descriptor_ = file->message_type(52);
  static const int JK_FittingInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, fittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, issplit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, showid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, fittingcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, fittingname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, fittingmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, vercode_),
  };
  JK_FittingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_FittingInfo_descriptor_,
      JK_FittingInfo::default_instance_,
      JK_FittingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_FittingInfo));
  JK_FittingRuleInfo_descriptor_ = file->message_type(53);
  static const int JK_FittingRuleInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, fittingruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, ownergtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, iscandel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, minlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, maxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, fittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, fittingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, usecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, updatetime_),
  };
  JK_FittingRuleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_FittingRuleInfo_descriptor_,
      JK_FittingRuleInfo::default_instance_,
      JK_FittingRuleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FittingRuleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_FittingRuleInfo));
  JK_FormulaConstInfo_descriptor_ = file->message_type(54);
  static const int JK_FormulaConstInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FormulaConstInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FormulaConstInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FormulaConstInfo, constcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FormulaConstInfo, consttext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FormulaConstInfo, constvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FormulaConstInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FormulaConstInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FormulaConstInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FormulaConstInfo, updatetime_),
  };
  JK_FormulaConstInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_FormulaConstInfo_descriptor_,
      JK_FormulaConstInfo::default_instance_,
      JK_FormulaConstInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FormulaConstInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_FormulaConstInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_FormulaConstInfo));
  JK_GroupInfo_descriptor_ = file->message_type(55);
  static const int JK_GroupInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, parentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, groupcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, groupmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, vercode_),
  };
  JK_GroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_GroupInfo_descriptor_,
      JK_GroupInfo::default_instance_,
      JK_GroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_GroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_GroupInfo));
  JK_HWFittingInfo_descriptor_ = file->message_type(56);
  static const int JK_HWFittingInfo_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, hwfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, issplit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, showid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, settingcountruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, ismatchxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, ismatchylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, ismatchzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, effectlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, xadjustlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, isembed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, installdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, hwfittingcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, hwfittingname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, hwfittingmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, vercode_),
  };
  JK_HWFittingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_HWFittingInfo_descriptor_,
      JK_HWFittingInfo::default_instance_,
      JK_HWFittingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HWFittingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_HWFittingInfo));
  JK_HoleRuleInfo_descriptor_ = file->message_type(57);
  static const int JK_HoleRuleInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, holeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, fnfittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, holetypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, overheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, holepicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, minxdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, minzdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, updatetime_),
  };
  JK_HoleRuleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_HoleRuleInfo_descriptor_,
      JK_HoleRuleInfo::default_instance_,
      JK_HoleRuleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_HoleRuleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_HoleRuleInfo));
  JK_MaterialInfo_descriptor_ = file->message_type(58);
  static const int JK_MaterialInfo_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, issplit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, showid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, ismatchxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, ismatchylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, ismatchzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, skinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, skindirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, transcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, materialcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, materialname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, materialmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, vercode_),
  };
  JK_MaterialInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_MaterialInfo_descriptor_,
      JK_MaterialInfo::default_instance_,
      JK_MaterialInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_MaterialInfo));
  JK_MaterialSealRuleMapInfo_descriptor_ = file->message_type(59);
  static const int JK_MaterialSealRuleMapInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialSealRuleMapInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialSealRuleMapInfo, sealruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialSealRuleMapInfo, iscabdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialSealRuleMapInfo, isdoordef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialSealRuleMapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialSealRuleMapInfo, factoryid_),
  };
  JK_MaterialSealRuleMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_MaterialSealRuleMapInfo_descriptor_,
      JK_MaterialSealRuleMapInfo::default_instance_,
      JK_MaterialSealRuleMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialSealRuleMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_MaterialSealRuleMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_MaterialSealRuleMapInfo));
  JK_ModelInfo_descriptor_ = file->message_type(60);
  static const int JK_ModelInfo_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, arcx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, arcy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, arcz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, modelcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, modelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, relativepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, modelmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, hashcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, frontviewid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, rightviewid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, topviewid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, photoid_),
  };
  JK_ModelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_ModelInfo_descriptor_,
      JK_ModelInfo::default_instance_,
      JK_ModelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ModelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_ModelInfo));
  JK_NumberRuleInfo_descriptor_ = file->message_type(61);
  static const int JK_NumberRuleInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_NumberRuleInfo, numberruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_NumberRuleInfo, fittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_NumberRuleInfo, minlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_NumberRuleInfo, maxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_NumberRuleInfo, usecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_NumberRuleInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_NumberRuleInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_NumberRuleInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_NumberRuleInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_NumberRuleInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_NumberRuleInfo, updatetime_),
  };
  JK_NumberRuleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_NumberRuleInfo_descriptor_,
      JK_NumberRuleInfo::default_instance_,
      JK_NumberRuleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_NumberRuleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_NumberRuleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_NumberRuleInfo));
  JK_PackageInfo_descriptor_ = file->message_type(62);
  static const int JK_PackageInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, fittingpackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, issplit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, isseparate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, fittingpackcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, fittingpackname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, fittingpackmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, vercode_),
  };
  JK_PackageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_PackageInfo_descriptor_,
      JK_PackageInfo::default_instance_,
      JK_PackageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_PackageInfo));
  JK_PackageMapInfo_descriptor_ = file->message_type(63);
  static const int JK_PackageMapInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageMapInfo, packageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageMapInfo, fittingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageMapInfo, fittingcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageMapInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageMapInfo, factoryid_),
  };
  JK_PackageMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_PackageMapInfo_descriptor_,
      JK_PackageMapInfo::default_instance_,
      JK_PackageMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_PackageMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_PackageMapInfo));
  JK_ProductInfo_descriptor_ = file->message_type(64);
  static const int JK_ProductInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, issplit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, supplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, showid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, zlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, productcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, productname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, productmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, vercode_),
  };
  JK_ProductInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_ProductInfo_descriptor_,
      JK_ProductInfo::default_instance_,
      JK_ProductInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_ProductInfo));
  JK_ProductSeriesInfo_descriptor_ = file->message_type(65);
  static const int JK_ProductSeriesInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, productseriesid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, productseriescode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, productseriesname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, productseriesmemo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, vercode_),
  };
  JK_ProductSeriesInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_ProductSeriesInfo_descriptor_,
      JK_ProductSeriesInfo::default_instance_,
      JK_ProductSeriesInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_ProductSeriesInfo));
  JK_ProductSeriesValidInfo_descriptor_ = file->message_type(66);
  static const int JK_ProductSeriesValidInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, productseriesid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, productseriesitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, pstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, parentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, isgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, defaultitemid_),
  };
  JK_ProductSeriesValidInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_ProductSeriesValidInfo_descriptor_,
      JK_ProductSeriesValidInfo::default_instance_,
      JK_ProductSeriesValidInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ProductSeriesValidInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_ProductSeriesValidInfo));
  JK_ResourceInfo_descriptor_ = file->message_type(67);
  static const int JK_ResourceInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, resourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, xlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, ylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, resourcecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, resourcename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, relativepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, resourcememo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, hashcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, vercode_),
  };
  JK_ResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_ResourceInfo_descriptor_,
      JK_ResourceInfo::default_instance_,
      JK_ResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_ResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_ResourceInfo));
  JK_SealRuleInfo_descriptor_ = file->message_type(68);
  static const int JK_SealRuleInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, sealruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, visiblesealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, invisiblesealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, vispremill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, invispremill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, stypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, sealrulename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, updatetime_),
  };
  JK_SealRuleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_SealRuleInfo_descriptor_,
      JK_SealRuleInfo::default_instance_,
      JK_SealRuleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SealRuleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_SealRuleInfo));
  JK_SysConfigInfo_descriptor_ = file->message_type(69);
  static const int JK_SysConfigInfo_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, tablefrontlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, tablesidelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, basecabdefaultypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, basecabsidelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, wallcabdefaultypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, wallcabsidelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, toekickfrontlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultbarheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultsealextralen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultsealpremilllen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, shelfdefaultypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, bgpaneldefaultypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, tabletocabdefaultylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultbasecabinetxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultbasecabinetylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultbasecabinetzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultwallcabinetxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultwallcabinetylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultwallcabinetzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultlcabinetxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultlcabinetzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultcabinetboardthick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultdoorboardthick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultthinboardthick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultdecorlineheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultdrawerxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultdrawerylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, defaultdrawerzlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, updatetime_),
  };
  JK_SysConfigInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_SysConfigInfo_descriptor_,
      JK_SysConfigInfo::default_instance_,
      JK_SysConfigInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysConfigInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_SysConfigInfo));
  JK_SysRuleConfigInfo_descriptor_ = file->message_type(70);
  static const int JK_SysRuleConfigInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, ruleconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, ruletypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, cabtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, minxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, minylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, maxxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, maxylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, usecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, updatetime_),
  };
  JK_SysRuleConfigInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_SysRuleConfigInfo_descriptor_,
      JK_SysRuleConfigInfo::default_instance_,
      JK_SysRuleConfigInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleConfigInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_SysRuleConfigInfo));
  JK_SysRuleTypeInfo_descriptor_ = file->message_type(71);
  static const int JK_SysRuleTypeInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleTypeInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleTypeInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleTypeInfo, ruletypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleTypeInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleTypeInfo, ruletypename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleTypeInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleTypeInfo, rtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleTypeInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleTypeInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleTypeInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleTypeInfo, updatetime_),
  };
  JK_SysRuleTypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_SysRuleTypeInfo_descriptor_,
      JK_SysRuleTypeInfo::default_instance_,
      JK_SysRuleTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_SysRuleTypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_SysRuleTypeInfo));
  JK_TableTopSideInfo_descriptor_ = file->message_type(72);
  static const int JK_TableTopSideInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, tabletopsideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, tabletopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, showid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, sidewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, isdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, updatetime_),
  };
  JK_TableTopSideInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_TableTopSideInfo_descriptor_,
      JK_TableTopSideInfo::default_instance_,
      JK_TableTopSideInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_TableTopSideInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_TableTopSideInfo));
  JK_Table_descriptor_ = file->message_type(73);
  static const int JK_Table_offsets_[73] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabboardmatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabboardmatskininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabdesignboardsealedgeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabdesignboardsealinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabdesigndoorregionhandleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabdesigndoorregioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabdesigndoorsysteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabdesignfnfittinginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabdesignfnfittingmapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabdesignfootinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabdesigninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabdesignmatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabmatplaninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabstructboardgapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabstructboardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabstructboardsealinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabstructgapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabstructinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabstructmatplanmapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabinetsizeboardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabinetsizeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_cabinetsizestructboardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_decorboardframemapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_decorboardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_decorboardmatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_decorboardunitinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_decorboardunitmatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_decorboardunitsealinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_decorinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_decorlineinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_decorlinematinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_decorunithwfittingmapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doorboardgapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doorboardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doorboardmatmapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doorboardsealinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doorinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doormatmapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doormatplanhandlemapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doormatplaninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doorregionhwfittingmapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doorsysteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doorsystemmatmapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doorsystemregiondoormapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doorsystemregioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doorsystemregionslidemapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_doorsystemregionslidepositionsizeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_fnfittinginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_fnfittingmatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_fnfittingpartinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_fnfittingpartmatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_fnfittingpartsealinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_fittinginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_fittingruleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_formulaconstinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_groupinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_hwfittinginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_holeruleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_materialinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_materialsealrulemapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_modelinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_numberruleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_packageinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_packagemapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_productinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_productseriesinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_productseriesvalidinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_resourceinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_sealruleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_sysconfiginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_sysruleconfiginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_sysruletypeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, jk_tabletopsideinfo_),
  };
  JK_Table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JK_Table_descriptor_,
      JK_Table::default_instance_,
      JK_Table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JK_Table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JK_Table));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2dJK_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabBoardMatInfo_descriptor_, &JK_CabBoardMatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabBoardMatSkinInfo_descriptor_, &JK_CabBoardMatSkinInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabDesignBoardSealEdgeInfo_descriptor_, &JK_CabDesignBoardSealEdgeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabDesignBoardSealInfo_descriptor_, &JK_CabDesignBoardSealInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabDesignDoorRegionHandleInfo_descriptor_, &JK_CabDesignDoorRegionHandleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabDesignDoorRegionInfo_descriptor_, &JK_CabDesignDoorRegionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabDesignDoorSystemInfo_descriptor_, &JK_CabDesignDoorSystemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabDesignFNFittingInfo_descriptor_, &JK_CabDesignFNFittingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabDesignFNFittingMapInfo_descriptor_, &JK_CabDesignFNFittingMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabDesignFootInfo_descriptor_, &JK_CabDesignFootInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabDesignInfo_descriptor_, &JK_CabDesignInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabDesignMatInfo_descriptor_, &JK_CabDesignMatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabMatPlanInfo_descriptor_, &JK_CabMatPlanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabStructBoardGapInfo_descriptor_, &JK_CabStructBoardGapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabStructBoardInfo_descriptor_, &JK_CabStructBoardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabStructBoardSealInfo_descriptor_, &JK_CabStructBoardSealInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabStructGapInfo_descriptor_, &JK_CabStructGapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabStructInfo_descriptor_, &JK_CabStructInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabStructMatPlanMapInfo_descriptor_, &JK_CabStructMatPlanMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabinetSizeBoardInfo_descriptor_, &JK_CabinetSizeBoardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabinetSizeInfo_descriptor_, &JK_CabinetSizeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_CabinetSizeStructBoardInfo_descriptor_, &JK_CabinetSizeStructBoardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DecorBoardFrameMapInfo_descriptor_, &JK_DecorBoardFrameMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DecorBoardInfo_descriptor_, &JK_DecorBoardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DecorBoardMatInfo_descriptor_, &JK_DecorBoardMatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DecorBoardUnitInfo_descriptor_, &JK_DecorBoardUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DecorBoardUnitMatInfo_descriptor_, &JK_DecorBoardUnitMatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DecorBoardUnitSealInfo_descriptor_, &JK_DecorBoardUnitSealInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DecorInfo_descriptor_, &JK_DecorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DecorLineInfo_descriptor_, &JK_DecorLineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DecorLineMatInfo_descriptor_, &JK_DecorLineMatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DecorUnitHWFittingMapInfo_descriptor_, &JK_DecorUnitHWFittingMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorBoardGapInfo_descriptor_, &JK_DoorBoardGapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorBoardInfo_descriptor_, &JK_DoorBoardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorBoardMatMapInfo_descriptor_, &JK_DoorBoardMatMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorBoardSealInfo_descriptor_, &JK_DoorBoardSealInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorInfo_descriptor_, &JK_DoorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorMatMapInfo_descriptor_, &JK_DoorMatMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorMatPlanHandleMapInfo_descriptor_, &JK_DoorMatPlanHandleMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorMatPlanInfo_descriptor_, &JK_DoorMatPlanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorRegionHWFittingMapInfo_descriptor_, &JK_DoorRegionHWFittingMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorSystemInfo_descriptor_, &JK_DoorSystemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorSystemMatMapInfo_descriptor_, &JK_DoorSystemMatMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorSystemRegionDoorMapInfo_descriptor_, &JK_DoorSystemRegionDoorMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorSystemRegionInfo_descriptor_, &JK_DoorSystemRegionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorSystemRegionSlideMapInfo_descriptor_, &JK_DoorSystemRegionSlideMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_DoorSystemRegionSlidePositionSizeInfo_descriptor_, &JK_DoorSystemRegionSlidePositionSizeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_FNFittingInfo_descriptor_, &JK_FNFittingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_FNFittingMatInfo_descriptor_, &JK_FNFittingMatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_FNFittingPartInfo_descriptor_, &JK_FNFittingPartInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_FNFittingPartMatInfo_descriptor_, &JK_FNFittingPartMatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_FNFittingPartSealInfo_descriptor_, &JK_FNFittingPartSealInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_FittingInfo_descriptor_, &JK_FittingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_FittingRuleInfo_descriptor_, &JK_FittingRuleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_FormulaConstInfo_descriptor_, &JK_FormulaConstInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_GroupInfo_descriptor_, &JK_GroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_HWFittingInfo_descriptor_, &JK_HWFittingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_HoleRuleInfo_descriptor_, &JK_HoleRuleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_MaterialInfo_descriptor_, &JK_MaterialInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_MaterialSealRuleMapInfo_descriptor_, &JK_MaterialSealRuleMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_ModelInfo_descriptor_, &JK_ModelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_NumberRuleInfo_descriptor_, &JK_NumberRuleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_PackageInfo_descriptor_, &JK_PackageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_PackageMapInfo_descriptor_, &JK_PackageMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_ProductInfo_descriptor_, &JK_ProductInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_ProductSeriesInfo_descriptor_, &JK_ProductSeriesInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_ProductSeriesValidInfo_descriptor_, &JK_ProductSeriesValidInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_ResourceInfo_descriptor_, &JK_ResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_SealRuleInfo_descriptor_, &JK_SealRuleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_SysConfigInfo_descriptor_, &JK_SysConfigInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_SysRuleConfigInfo_descriptor_, &JK_SysRuleConfigInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_SysRuleTypeInfo_descriptor_, &JK_SysRuleTypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_TableTopSideInfo_descriptor_, &JK_TableTopSideInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JK_Table_descriptor_, &JK_Table::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2dJK_2eproto() {
  delete JK_CabBoardMatInfo::default_instance_;
  delete JK_CabBoardMatInfo_reflection_;
  delete JK_CabBoardMatSkinInfo::default_instance_;
  delete JK_CabBoardMatSkinInfo_reflection_;
  delete JK_CabDesignBoardSealEdgeInfo::default_instance_;
  delete JK_CabDesignBoardSealEdgeInfo_reflection_;
  delete JK_CabDesignBoardSealInfo::default_instance_;
  delete JK_CabDesignBoardSealInfo_reflection_;
  delete JK_CabDesignDoorRegionHandleInfo::default_instance_;
  delete JK_CabDesignDoorRegionHandleInfo_reflection_;
  delete JK_CabDesignDoorRegionInfo::default_instance_;
  delete JK_CabDesignDoorRegionInfo_reflection_;
  delete JK_CabDesignDoorSystemInfo::default_instance_;
  delete JK_CabDesignDoorSystemInfo_reflection_;
  delete JK_CabDesignFNFittingInfo::default_instance_;
  delete JK_CabDesignFNFittingInfo_reflection_;
  delete JK_CabDesignFNFittingMapInfo::default_instance_;
  delete JK_CabDesignFNFittingMapInfo_reflection_;
  delete JK_CabDesignFootInfo::default_instance_;
  delete JK_CabDesignFootInfo_reflection_;
  delete JK_CabDesignInfo::default_instance_;
  delete JK_CabDesignInfo_reflection_;
  delete JK_CabDesignMatInfo::default_instance_;
  delete JK_CabDesignMatInfo_reflection_;
  delete JK_CabMatPlanInfo::default_instance_;
  delete JK_CabMatPlanInfo_reflection_;
  delete JK_CabStructBoardGapInfo::default_instance_;
  delete JK_CabStructBoardGapInfo_reflection_;
  delete JK_CabStructBoardInfo::default_instance_;
  delete JK_CabStructBoardInfo_reflection_;
  delete JK_CabStructBoardSealInfo::default_instance_;
  delete JK_CabStructBoardSealInfo_reflection_;
  delete JK_CabStructGapInfo::default_instance_;
  delete JK_CabStructGapInfo_reflection_;
  delete JK_CabStructInfo::default_instance_;
  delete JK_CabStructInfo_reflection_;
  delete JK_CabStructMatPlanMapInfo::default_instance_;
  delete JK_CabStructMatPlanMapInfo_reflection_;
  delete JK_CabinetSizeBoardInfo::default_instance_;
  delete JK_CabinetSizeBoardInfo_reflection_;
  delete JK_CabinetSizeInfo::default_instance_;
  delete JK_CabinetSizeInfo_reflection_;
  delete JK_CabinetSizeStructBoardInfo::default_instance_;
  delete JK_CabinetSizeStructBoardInfo_reflection_;
  delete JK_DecorBoardFrameMapInfo::default_instance_;
  delete JK_DecorBoardFrameMapInfo_reflection_;
  delete JK_DecorBoardInfo::default_instance_;
  delete JK_DecorBoardInfo_reflection_;
  delete JK_DecorBoardMatInfo::default_instance_;
  delete JK_DecorBoardMatInfo_reflection_;
  delete JK_DecorBoardUnitInfo::default_instance_;
  delete JK_DecorBoardUnitInfo_reflection_;
  delete JK_DecorBoardUnitMatInfo::default_instance_;
  delete JK_DecorBoardUnitMatInfo_reflection_;
  delete JK_DecorBoardUnitSealInfo::default_instance_;
  delete JK_DecorBoardUnitSealInfo_reflection_;
  delete JK_DecorInfo::default_instance_;
  delete JK_DecorInfo_reflection_;
  delete JK_DecorLineInfo::default_instance_;
  delete JK_DecorLineInfo_reflection_;
  delete JK_DecorLineMatInfo::default_instance_;
  delete JK_DecorLineMatInfo_reflection_;
  delete JK_DecorUnitHWFittingMapInfo::default_instance_;
  delete JK_DecorUnitHWFittingMapInfo_reflection_;
  delete JK_DoorBoardGapInfo::default_instance_;
  delete JK_DoorBoardGapInfo_reflection_;
  delete JK_DoorBoardInfo::default_instance_;
  delete JK_DoorBoardInfo_reflection_;
  delete JK_DoorBoardMatMapInfo::default_instance_;
  delete JK_DoorBoardMatMapInfo_reflection_;
  delete JK_DoorBoardSealInfo::default_instance_;
  delete JK_DoorBoardSealInfo_reflection_;
  delete JK_DoorInfo::default_instance_;
  delete JK_DoorInfo_reflection_;
  delete JK_DoorMatMapInfo::default_instance_;
  delete JK_DoorMatMapInfo_reflection_;
  delete JK_DoorMatPlanHandleMapInfo::default_instance_;
  delete JK_DoorMatPlanHandleMapInfo_reflection_;
  delete JK_DoorMatPlanInfo::default_instance_;
  delete JK_DoorMatPlanInfo_reflection_;
  delete JK_DoorRegionHWFittingMapInfo::default_instance_;
  delete JK_DoorRegionHWFittingMapInfo_reflection_;
  delete JK_DoorSystemInfo::default_instance_;
  delete JK_DoorSystemInfo_reflection_;
  delete JK_DoorSystemMatMapInfo::default_instance_;
  delete JK_DoorSystemMatMapInfo_reflection_;
  delete JK_DoorSystemRegionDoorMapInfo::default_instance_;
  delete JK_DoorSystemRegionDoorMapInfo_reflection_;
  delete JK_DoorSystemRegionInfo::default_instance_;
  delete JK_DoorSystemRegionInfo_reflection_;
  delete JK_DoorSystemRegionSlideMapInfo::default_instance_;
  delete JK_DoorSystemRegionSlideMapInfo_reflection_;
  delete JK_DoorSystemRegionSlidePositionSizeInfo::default_instance_;
  delete JK_DoorSystemRegionSlidePositionSizeInfo_reflection_;
  delete JK_FNFittingInfo::default_instance_;
  delete JK_FNFittingInfo_reflection_;
  delete JK_FNFittingMatInfo::default_instance_;
  delete JK_FNFittingMatInfo_reflection_;
  delete JK_FNFittingPartInfo::default_instance_;
  delete JK_FNFittingPartInfo_reflection_;
  delete JK_FNFittingPartMatInfo::default_instance_;
  delete JK_FNFittingPartMatInfo_reflection_;
  delete JK_FNFittingPartSealInfo::default_instance_;
  delete JK_FNFittingPartSealInfo_reflection_;
  delete JK_FittingInfo::default_instance_;
  delete JK_FittingInfo_reflection_;
  delete JK_FittingRuleInfo::default_instance_;
  delete JK_FittingRuleInfo_reflection_;
  delete JK_FormulaConstInfo::default_instance_;
  delete JK_FormulaConstInfo_reflection_;
  delete JK_GroupInfo::default_instance_;
  delete JK_GroupInfo_reflection_;
  delete JK_HWFittingInfo::default_instance_;
  delete JK_HWFittingInfo_reflection_;
  delete JK_HoleRuleInfo::default_instance_;
  delete JK_HoleRuleInfo_reflection_;
  delete JK_MaterialInfo::default_instance_;
  delete JK_MaterialInfo_reflection_;
  delete JK_MaterialSealRuleMapInfo::default_instance_;
  delete JK_MaterialSealRuleMapInfo_reflection_;
  delete JK_ModelInfo::default_instance_;
  delete JK_ModelInfo_reflection_;
  delete JK_NumberRuleInfo::default_instance_;
  delete JK_NumberRuleInfo_reflection_;
  delete JK_PackageInfo::default_instance_;
  delete JK_PackageInfo_reflection_;
  delete JK_PackageMapInfo::default_instance_;
  delete JK_PackageMapInfo_reflection_;
  delete JK_ProductInfo::default_instance_;
  delete JK_ProductInfo_reflection_;
  delete JK_ProductSeriesInfo::default_instance_;
  delete JK_ProductSeriesInfo_reflection_;
  delete JK_ProductSeriesValidInfo::default_instance_;
  delete JK_ProductSeriesValidInfo_reflection_;
  delete JK_ResourceInfo::default_instance_;
  delete JK_ResourceInfo_reflection_;
  delete JK_SealRuleInfo::default_instance_;
  delete JK_SealRuleInfo_reflection_;
  delete JK_SysConfigInfo::default_instance_;
  delete JK_SysConfigInfo_reflection_;
  delete JK_SysRuleConfigInfo::default_instance_;
  delete JK_SysRuleConfigInfo_reflection_;
  delete JK_SysRuleTypeInfo::default_instance_;
  delete JK_SysRuleTypeInfo_reflection_;
  delete JK_TableTopSideInfo::default_instance_;
  delete JK_TableTopSideInfo_reflection_;
  delete JK_Table::default_instance_;
  delete JK_Table_reflection_;
}

void protobuf_AddDesc_msg_2dJK_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014msg-JK.proto\022\010transMsg\"\352\001\n\022JK_CabBoard"
    "MatInfo\022\024\n\014CabMatPlanID\030\001 \002(\005\022\030\n\020CabStru"
    "ctBoardID\030\002 \002(\005\022\021\n\tIsDefault\030\003 \002(\010\022\r\n\005Ma"
    "tID\030\004 \002(\005\022\020\n\010MatGType\030\005 \002(\005\022\022\n\nSealRuleI"
    "D\030\006 \002(\005\022\025\n\rSkinDirection\030\007 \002(\005\022\017\n\007VerCod"
    "e\030\010 \002(\003\022\021\n\tFactoryID\030\t \002(\005\022!\n\031IsUseDefau"
    "ltSkinDirection\030\n \002(\010\"\246\001\n\026JK_CabBoardMat"
    "SkinInfo\022\024\n\014CabMatPlanID\030\001 \002(\005\022\030\n\020CabStr"
    "uctBoardID\030\002 \002(\005\022\025\n\rSkinDirection\030\003 \002(\005\022"
    "\017\n\007VerCode\030\004 \002(\003\022\021\n\tFactoryID\030\005 \002(\005\022!\n\031I"
    "sUseDefaultSkinDirection\030\006 \002(\010\"\207\001\n\035JK_Ca"
    "bDesignBoardSealEdgeInfo\022\034\n\024CabDesignBoa"
    "rdSealID\030\001 \002(\005\022\021\n\tSealIndex\030\002 \002(\005\022\021\n\tSea"
    "lMatID\030\003 \002(\005\022\017\n\007VerCode\030\004 \002(\003\022\021\n\tFactory"
    "ID\030\005 \002(\005\"\265\001\n\031JK_CabDesignBoardSealInfo\022\034"
    "\n\024CabDesignBoardSealID\030\001 \002(\005\022\030\n\020CabStruc"
    "tBoardID\030\002 \002(\005\022\023\n\013CabStructID\030\003 \002(\005\022\023\n\013C"
    "abDesignID\030\004 \002(\005\022\022\n\nMaterialID\030\005 \002(\005\022\017\n\007"
    "VerCode\030\006 \002(\003\022\021\n\tFactoryID\030\007 \002(\005\"\262\002\n JK_"
    "CabDesignDoorRegionHandleInfo\022#\n\033CabDesi"
    "gnDoorRegionHandleID\030\001 \002(\005\022\035\n\025CabDesignD"
    "oorRegionID\030\002 \002(\005\022\r\n\005XDock\030\003 \002(\005\022\r\n\005YDoc"
    "k\030\004 \002(\005\022\r\n\005ZDock\030\005 \002(\005\022\026\n\016XOffsetFormula"
    "\030\006 \002(\t\022\026\n\016YOffsetFormula\030\007 \002(\t\022\026\n\016ZOffse"
    "tFormula\030\010 \002(\t\022\017\n\007VerCode\030\t \002(\003\022\021\n\tFacto"
    "ryID\030\n \002(\005\022\014\n\004ArcZ\030\013 \002(\001\022\020\n\010HandleID\030\014 \002"
    "(\005\022\021\n\tMatchType\030\r \002(\005\"\360\003\n\032JK_CabDesignDo"
    "orRegionInfo\022\035\n\025CabDesignDoorRegionID\030\001 "
    "\002(\005\022\023\n\013CabDesignID\030\002 \002(\005\022\r\n\005IsDel\030\003 \002(\010\022"
    "\017\n\007IsGroup\030\004 \002(\010\022\014\n\004XLen\030\005 \002(\001\022\014\n\004YLen\030\006"
    " \002(\001\022\023\n\013IsCanResize\030\007 \002(\010\022\017\n\007MinXLen\030\010 \002"
    "(\001\022\017\n\007MaxXLen\030\t \002(\001\022\020\n\010XLenStep\030\n \002(\001\022\017\n"
    "\007MinYLen\030\013 \002(\001\022\017\n\007MaxYLen\030\014 \002(\001\022\020\n\010YLenS"
    "tep\030\r \002(\001\022\024\n\014DefaultMatID\030\016 \002(\005\022\026\n\016Defau"
    "ltModelID\030\017 \002(\005\022\017\n\007VerCode\030\020 \002(\003\022\021\n\tFact"
    "oryID\030\021 \002(\005\022\025\n\rDefaultDoorID\030\022 \002(\005\022\035\n\025Ca"
    "bDesignDoorSystemID\030\023 \002(\005\022\024\n\014DoorSystemI"
    "D\030\024 \002(\005\022\030\n\020IsUseDefaultSize\030\025 \002(\010\022\027\n\017IsU"
    "seCutFormula\030\026 \002(\010\022\024\n\014DoorRegionID\030\027 \002(\005"
    "\"\341\003\n\032JK_CabDesignDoorSystemInfo\022\035\n\025CabDe"
    "signDoorSystemID\030\001 \002(\005\022\023\n\013CabDesignID\030\002 "
    "\002(\005\022\r\n\005IsDel\030\003 \002(\010\022\017\n\007VerCode\030\004 \002(\003\022\021\n\tF"
    "actoryID\030\005 \002(\005\022\024\n\014DoorSystemID\030\006 \002(\005\022\027\n\017"
    "InstallFaceType\030\007 \002(\005\022\022\n\nXAdjustLen\030\010 \002("
    "\001\022\022\n\nYAdjustLen\030\t \002(\001\022\r\n\005XDock\030\n \002(\005\022\r\n\005"
    "YDock\030\013 \002(\005\022\r\n\005ZDock\030\014 \002(\005\022\026\n\016XOffsetFor"
    "mula\030\r \002(\t\022\026\n\016YOffsetFormula\030\016 \002(\t\022\026\n\016ZO"
    "ffsetFormula\030\017 \002(\t\022\021\n\tCreatorID\030\020 \002(\005\022\021\n"
    "\tUpdaterID\030\021 \002(\005\022\022\n\nCreateTime\030\022 \002(\003\022\022\n\n"
    "UpdateTime\030\023 \002(\003\022\020\n\010IsCanDel\030\024 \002(\010\022\020\n\010XF"
    "ormula\030\025 \002(\t\022\020\n\010YFormula\030\026 \002(\t\022\014\n\004ZLen\030\027"
    " \002(\001\"\246\003\n\031JK_CabDesignFNFittingInfo\022\034\n\024Ca"
    "bDesignFNFittingID\030\001 \002(\005\022\023\n\013ContainerID\030"
    "\002 \002(\005\022\030\n\020ContainerGTypeID\030\003 \002(\005\022\020\n\010IsCan"
    "Del\030\004 \002(\010\022\020\n\010XFormula\030\005 \002(\t\022\020\n\010YFormula\030"
    "\006 \002(\t\022\020\n\010ZFormula\030\007 \002(\t\022\r\n\005XDock\030\010 \002(\005\022\r"
    "\n\005YDock\030\t \002(\005\022\r\n\005ZDock\030\n \002(\005\022\026\n\016XOffsetF"
    "ormula\030\013 \002(\t\022\026\n\016YOffsetFormula\030\014 \002(\t\022\026\n\016"
    "ZOffsetFormula\030\r \002(\t\022\017\n\007VerCode\030\016 \002(\003\022\021\n"
    "\tFactoryID\030\017 \002(\005\022\r\n\005IsDel\030\020 \002(\010\022\021\n\tCreat"
    "orID\030\021 \002(\005\022\021\n\tUpdaterID\030\022 \002(\005\022\022\n\nCreateT"
    "ime\030\023 \002(\003\022\022\n\nUpdateTime\030\024 \002(\003\"\230\001\n\034JK_Cab"
    "DesignFNFittingMapInfo\022\023\n\013FNFittingID\030\001 "
    "\002(\005\022\034\n\024CabDesignFNFittingID\030\002 \002(\005\022\021\n\tIsD"
    "efault\030\003 \002(\010\022\016\n\006FNType\030\004 \002(\005\022\017\n\007VerCode\030"
    "\005 \002(\003\022\021\n\tFactoryID\030\006 \002(\005\"r\n\024JK_CabDesign"
    "FootInfo\022\023\n\013CabDesignID\030\001 \002(\005\022\016\n\006FootID\030"
    "\002 \002(\005\022\021\n\tIsDefault\030\003 \002(\010\022\017\n\007VerCode\030\004 \002("
    "\003\022\021\n\tFactoryID\030\005 \002(\005\"\334\002\n\020JK_CabDesignInf"
    "o\022\023\n\013CabDesignID\030\001 \002(\005\022\r\n\005IsDel\030\002 \002(\010\022\017\n"
    "\007GroupID\030\003 \002(\005\022\023\n\013CabFunction\030\004 \002(\005\022\023\n\013C"
    "abStructID\030\005 \002(\005\022\017\n\007PosType\030\006 \002(\005\022\021\n\tFac"
    "toryID\030\007 \002(\005\022\021\n\tCreatorID\030\010 \002(\005\022\021\n\tUpdat"
    "erID\030\t \002(\005\022\022\n\nCreateTime\030\n \002(\003\022\022\n\nUpdate"
    "Time\030\013 \002(\003\022\025\n\rCabDesignCode\030\014 \002(\t\022\025\n\rCab"
    "DesignName\030\r \002(\t\022\025\n\rCabDesignMemo\030\016 \002(\t\022"
    "\017\n\007VerCode\030\017 \002(\003\022\017\n\007PhotoID\030\020 \002(\005\022\020\n\010IsA"
    "ctive\030\021 \002(\010\"w\n\023JK_CabDesignMatInfo\022\023\n\013Ca"
    "bDesignID\030\001 \002(\005\022\024\n\014CabMatPlanID\030\002 \002(\005\022\021\n"
    "\tIsDefault\030\003 \002(\010\022\017\n\007VerCode\030\004 \002(\003\022\021\n\tFac"
    "toryID\030\005 \002(\005\"\244\002\n\021JK_CabMatPlanInfo\022\024\n\014Ca"
    "bMatPlanID\030\001 \002(\005\022\017\n\007GroupID\030\002 \002(\005\022\r\n\005IsD"
    "el\030\003 \002(\010\022\021\n\tFactoryID\030\004 \002(\005\022\020\n\010MatGType\030"
    "\005 \002(\005\022\r\n\005MatID\030\006 \002(\005\022\021\n\tCreatorID\030\007 \002(\005\022"
    "\021\n\tUpdaterID\030\010 \002(\005\022\022\n\nCreateTime\030\t \002(\003\022\022"
    "\n\nUpdateTime\030\n \002(\003\022\026\n\016CabMatPlanCode\030\013 \002"
    "(\t\022\026\n\016CabMatPlanName\030\014 \002(\t\022\026\n\016CabMatPlan"
    "Memo\030\r \002(\t\022\017\n\007VerCode\030\016 \002(\003\"\372\002\n\030JK_CabSt"
    "ructBoardGapInfo\022\033\n\023CabStructBoardGapID\030"
    "\001 \002(\005\022\030\n\020CabStructBoardID\030\002 \002(\005\022\016\n\006GapPo"
    "s\030\003 \002(\005\022\020\n\010GapIndex\030\004 \002(\005\022\017\n\007GapType\030\005 \002"
    "(\005\022\020\n\010GapShape\030\006 \002(\005\022\023\n\013XLenFormula\030\007 \002("
    "\t\022\023\n\013YLenFormula\030\010 \002(\t\022\026\n\016XOffsetFormula"
    "\030\t \002(\t\022\026\n\016YOffsetFormula\030\n \002(\t\022\026\n\016ZOffse"
    "tFormula\030\013 \002(\t\022\021\n\tFactoryID\030\014 \002(\005\022\021\n\tCre"
    "atorID\030\r \002(\005\022\021\n\tUpdaterID\030\016 \002(\005\022\022\n\nCreat"
    "eTime\030\017 \002(\003\022\022\n\nUpdateTime\030\020 \002(\003\022\017\n\007VerCo"
    "de\030\021 \002(\003\"\376\003\n\025JK_CabStructBoardInfo\022\030\n\020Ca"
    "bStructBoardID\030\001 \002(\005\022\023\n\013CabStructID\030\002 \002("
    "\005\022\r\n\005IsDel\030\003 \002(\010\022\021\n\tIsUseMain\030\004 \002(\010\022\023\n\013I"
    "sCanRepeat\030\005 \002(\010\022\020\n\010IsCanDel\030\006 \002(\010\022\020\n\010XF"
    "ormula\030\007 \002(\t\022\020\n\010YFormula\030\010 \002(\t\022\014\n\004ArcX\030\t"
    " \002(\001\022\014\n\004ArcY\030\n \002(\001\022\014\n\004ArcZ\030\013 \002(\001\022\r\n\005XDoc"
    "k\030\014 \002(\005\022\r\n\005YDock\030\r \002(\005\022\r\n\005ZDock\030\016 \002(\005\022\026\n"
    "\016XOffsetFormula\030\017 \002(\t\022\026\n\016YOffsetFormula\030"
    "\020 \002(\t\022\026\n\016ZOffsetFormula\030\021 \002(\t\022\021\n\tFactory"
    "ID\030\022 \002(\005\022\021\n\tCreatorID\030\023 \002(\005\022\021\n\tUpdaterID"
    "\030\024 \002(\005\022\022\n\nCreateTime\030\025 \002(\003\022\022\n\nUpdateTime"
    "\030\026 \002(\003\022\032\n\022CabStructBoardName\030\027 \002(\t\022\034\n\024De"
    "faultSkinDirection\030\030 \002(\005\022\017\n\007VerCode\030\031 \002("
    "\003\"\375\001\n\031JK_CabStructBoardSealInfo\022\034\n\024CabSt"
    "ructBoardSealID\030\001 \002(\005\022\021\n\tSealOrder\030\002 \002(\005"
    "\022\030\n\020CabStructBoardID\030\003 \002(\005\022\020\n\010SealType\030\004"
    " \002(\005\022\017\n\007VerCode\030\005 \002(\003\022\021\n\tFactoryID\030\006 \002(\005"
    "\022\021\n\tCreatorID\030\007 \002(\005\022\021\n\tUpdaterID\030\010 \002(\005\022\022"
    "\n\nCreateTime\030\t \002(\003\022\022\n\nUpdateTime\030\n \002(\003\022\021"
    "\n\tSealIndex\030\013 \002(\005\"\271\004\n\023JK_CabStructGapInf"
    "o\022\026\n\016CabStructGapID\030\001 \002(\005\022\023\n\013CabStructID"
    "\030\002 \002(\005\022\r\n\005IsDel\030\003 \002(\010\022\021\n\tFactoryID\030\004 \002(\005"
    "\022\022\n\nCabGapType\030\005 \002(\005\022\r\n\005XDock\030\006 \002(\005\022\r\n\005Y"
    "Dock\030\007 \002(\005\022\r\n\005ZDock\030\010 \002(\005\022\026\n\016XOffsetForm"
    "ula\030\t \002(\t\022\026\n\016YOffsetFormula\030\n \002(\t\022\026\n\016ZOf"
    "fsetFormula\030\013 \002(\t\022\020\n\010XFormula\030\014 \002(\t\022\020\n\010Y"
    "Formula\030\r \002(\t\022\020\n\010ZFormula\030\016 \002(\t\022\014\n\004XVar\030"
    "\017 \002(\t\022\014\n\004YVar\030\020 \002(\t\022\014\n\004ZVar\030\021 \002(\t\022\020\n\010XVa"
    "rName\030\022 \002(\t\022\020\n\010YVarName\030\023 \002(\t\022\020\n\010ZVarNam"
    "e\030\024 \002(\t\022!\n\031CabStructCabStructGapCode\030\025 \002"
    "(\t\022\030\n\020CabStructGapName\030\026 \002(\t\022\030\n\020CabStruc"
    "tGapMemo\030\027 \002(\t\022\021\n\tCreatorID\030\030 \002(\005\022\021\n\tUpd"
    "aterID\030\031 \002(\005\022\022\n\nCreateTime\030\032 \002(\003\022\022\n\nUpda"
    "teTime\030\033 \002(\003\022\017\n\007VerCode\030\034 \002(\003\"\363\003\n\020JK_Cab"
    "StructInfo\022\023\n\013CabStructID\030\001 \002(\005\022\021\n\tFacto"
    "ryID\030\002 \002(\005\022\017\n\007VerCode\030\003 \002(\003\022\017\n\007GroupID\030\004"
    " \002(\005\022\r\n\005IsDel\030\005 \002(\010\022\020\n\010IsActive\030\006 \002(\010\022\022\n"
    "\nCabGapType\030\007 \002(\005\022\022\n\nCabShapeID\030\010 \002(\005\022\023\n"
    "\013VirtualXLen\030\t \002(\001\022\023\n\013VirtualYLen\030\n \002(\001\022"
    "\023\n\013VirtualZLen\030\013 \002(\001\022\030\n\020VirtualShapeXLen"
    "\030\014 \002(\001\022\030\n\020VirtualShapeZLen\030\r \002(\001\022\026\n\016Virt"
    "ualGapXLen\030\016 \002(\001\022\026\n\016VirtualGapYLen\030\017 \002(\001"
    "\022\026\n\016VirtualGapZLen\030\020 \002(\001\022\021\n\tCreatorID\030\021 "
    "\002(\005\022\021\n\tUpdaterID\030\022 \002(\005\022\022\n\nCreateTime\030\023 \002"
    "(\003\022\022\n\nUpdateTime\030\024 \002(\003\022\025\n\rCabStructCode\030"
    "\025 \002(\t\022\025\n\rCabStructName\030\026 \002(\t\022\025\n\rCabStruc"
    "tMemo\030\027 \002(\t\"k\n\032JK_CabStructMatPlanMapInf"
    "o\022\024\n\014CabMatPlanID\030\001 \002(\005\022\023\n\013CabStructID\030\002"
    " \002(\005\022\017\n\007VerCode\030\003 \002(\003\022\021\n\tFactoryID\030\004 \002(\005"
    "\"\241\003\n\027JK_CabinetSizeBoardInfo\022\032\n\022CabinetS"
    "izeBoardID\030\001 \002(\005\022\025\n\rCabinetSizeID\030\002 \002(\005\022"
    "\r\n\005IsDel\030\003 \002(\010\022\030\n\020CabStructBoardID\030\004 \002(\005"
    "\022\025\n\rIsCanRelocate\030\005 \002(\010\022\020\n\010IsCanDel\030\006 \002("
    "\010\022\021\n\tFactoryID\030\007 \002(\005\022\022\n\nCreateTime\030\010 \002(\003"
    "\022\021\n\tCreatorID\030\t \002(\005\022\022\n\nUpdateTime\030\n \002(\003\022"
    "\021\n\tUpdaterID\030\013 \002(\005\022\r\n\005XDock\030\014 \002(\005\022\r\n\005YDo"
    "ck\030\r \002(\005\022\r\n\005ZDock\030\016 \002(\005\022\026\n\016XOffsetFormul"
    "a\030\017 \002(\t\022\026\n\016YOffsetFormula\030\020 \002(\t\022\026\n\016ZOffs"
    "etFormula\030\021 \002(\t\022\032\n\022CabStructBoardName\030\022 "
    "\002(\t\022\017\n\007VerCode\030\023 \002(\003\"\267\007\n\022JK_CabinetSizeI"
    "nfo\022\023\n\013CabDesignID\030\001 \002(\005\022\r\n\005IsDel\030\002 \002(\010\022"
    "\025\n\rCabinetSizeID\030\003 \002(\005\022\017\n\007PhotoID\030\004 \002(\005\022"
    "\014\n\004XLen\030\005 \002(\001\022\014\n\004YLen\030\006 \002(\001\022\014\n\004ZLen\030\007 \002("
    "\001\022\022\n\nIsStandard\030\010 \002(\010\022\017\n\007MinXLen\030\t \002(\001\022\017"
    "\n\007MaxXLen\030\n \002(\001\022\020\n\010XLenStep\030\013 \002(\001\022\017\n\007Min"
    "YLen\030\014 \002(\001\022\017\n\007MaxYLen\030\r \002(\001\022\020\n\010YLenStep\030"
    "\016 \002(\001\022\017\n\007MinZLen\030\017 \002(\001\022\017\n\007MaxZLen\030\020 \002(\001\022"
    "\020\n\010ZLenStep\030\021 \002(\001\022\021\n\tShapeXLen\030\022 \002(\001\022\021\n\t"
    "ShapeZLen\030\023 \002(\001\022\017\n\007GapXLen\030\024 \002(\001\022\017\n\007GapY"
    "Len\030\025 \002(\001\022\017\n\007GapZLen\030\026 \002(\001\022\024\n\014ShapeMinXL"
    "en\030\027 \002(\001\022\024\n\014ShapeMaxXLen\030\030 \002(\001\022\025\n\rShapeX"
    "LenStep\030\031 \002(\001\022\024\n\014ShapeMinZLen\030\032 \002(\001\022\024\n\014S"
    "hapeMaxZLen\030\033 \002(\001\022\025\n\rShapeZLenStep\030\034 \002(\001"
    "\022\022\n\nGapMinXLen\030\035 \002(\001\022\022\n\nGapMaxXLen\030\036 \002(\001"
    "\022\023\n\013GapXLenStep\030\037 \002(\001\022\022\n\nGapMinYLen\030  \002("
    "\001\022\022\n\nGapMaxYLen\030! \002(\001\022\023\n\013GapYLenStep\030\" \002"
    "(\001\022\022\n\nGapMinZLen\030# \002(\001\022\022\n\nGapMaxZLen\030$ \002"
    "(\001\022\023\n\013GapZLenStep\030% \002(\001\022\021\n\tFootCount\030& \002"
    "(\005\022\025\n\rIsSysFootRule\030\' \002(\010\022\021\n\tFactoryID\030("
    " \002(\005\022\021\n\tCreatorID\030) \002(\005\022\021\n\tUpdaterID\030* \002"
    "(\005\022\022\n\nCreateTime\030+ \002(\003\022\022\n\nUpdateTime\030, \002"
    "(\003\022\027\n\017CabinetSizeCode\030- \002(\t\022\027\n\017CabinetSi"
    "zeName\030. \002(\t\022\027\n\017CabinetSizeMemo\030/ \002(\t\022\017\n"
    "\007VerCode\0300 \002(\003\"t\n\035JK_CabinetSizeStructBo"
    "ardInfo\022\030\n\020CabStructBoardID\030\001 \002(\005\022\025\n\rCab"
    "inetSizeID\030\002 \002(\005\022\017\n\007VerCode\030\003 \002(\003\022\021\n\tFac"
    "toryID\030\004 \002(\005\"~\n\031JK_DecorBoardFrameMapInf"
    "o\022\024\n\014DecorBoardID\030\001 \002(\005\022\024\n\014DecorFrameID\030"
    "\002 \002(\005\022\021\n\tIsDefault\030\003 \002(\010\022\017\n\007VerCode\030\004 \002("
    "\003\022\021\n\tFactoryID\030\005 \002(\005\"\365\004\n\021JK_DecorBoardIn"
    "fo\022\024\n\014DecorBoardID\030\001 \002(\005\022\021\n\tFactoryID\030\002 "
    "\002(\005\022\017\n\007GroupID\030\003 \002(\005\022\r\n\005IsDel\030\004 \002(\010\022\020\n\010I"
    "sActive\030\005 \002(\010\022\021\n\tCreatorID\030\006 \002(\005\022\021\n\tUpda"
    "terID\030\007 \002(\005\022\022\n\nCreateTime\030\010 \002(\003\022\022\n\nUpdat"
    "eTime\030\t \002(\003\022\022\n\nSourceType\030\n \002(\005\022\023\n\013Defau"
    "ltYPos\030\013 \002(\001\022\026\n\016DecorBoardCode\030\014 \002(\t\022\026\n\016"
    "DecorBoardName\030\r \002(\t\022\026\n\016DecorBoardMemo\030\016"
    " \002(\t\022\017\n\007VerCode\030\017 \002(\003\022\017\n\007GTypeID\030\020 \002(\005\022\020"
    "\n\010XFormula\030\021 \002(\t\022\020\n\010YFormula\030\022 \002(\t\022\014\n\004ZL"
    "en\030\023 \002(\001\022\023\n\013IsCanResize\030\024 \002(\010\022\017\n\007MinXLen"
    "\030\025 \002(\001\022\017\n\007MaxXLen\030\026 \002(\001\022\020\n\010XLenStep\030\027 \002("
    "\001\022\017\n\007MinYLen\030\030 \002(\001\022\017\n\007MaxYLen\030\031 \002(\001\022\020\n\010Y"
    "LenStep\030\032 \002(\001\022\r\n\005XDock\030\033 \002(\005\022\r\n\005YDock\030\034 "
    "\002(\005\022\026\n\016XOffsetFormula\030\035 \002(\t\022\026\n\016YOffsetFo"
    "rmula\030\036 \002(\t\022\026\n\016ZOffsetFormula\030\037 \002(\t\022\017\n\007P"
    "hotoID\030  \002(\005\"\204\001\n\024JK_DecorBoardMatInfo\022\024\n"
    "\014DecorBoardID\030\001 \002(\005\022\r\n\005MatID\030\002 \002(\005\022\020\n\010Ma"
    "tGType\030\003 \002(\005\022\021\n\tIsDefault\030\004 \002(\010\022\017\n\007VerCo"
    "de\030\005 \002(\003\022\021\n\tFactoryID\030\006 \002(\005\"\243\004\n\025JK_Decor"
    "BoardUnitInfo\022\030\n\020DecorBoardUnitID\030\001 \002(\005\022"
    "\r\n\005IsDel\030\002 \002(\010\022\024\n\014DecorBoardID\030\003 \002(\005\022\021\n\t"
    "SplitType\030\004 \002(\005\022\025\n\rSkinDirection\030\005 \002(\005\022\014"
    "\n\004ArcX\030\006 \002(\001\022\014\n\004ArcY\030\007 \002(\001\022\014\n\004ArcZ\030\010 \002(\001"
    "\022\020\n\010XFormula\030\t \002(\t\022\020\n\010YFormula\030\n \002(\t\022\r\n\005"
    "XDock\030\013 \002(\005\022\r\n\005YDock\030\014 \002(\005\022\r\n\005ZDock\030\r \002("
    "\005\022\026\n\016XOffsetFormula\030\016 \002(\t\022\026\n\016YOffsetForm"
    "ula\030\017 \002(\t\022\026\n\016ZOffsetFormula\030\020 \002(\t\022\033\n\023Dec"
    "orBoardUnitIndex\030\021 \002(\005\022\032\n\022DecorBoardUnit"
    "Name\030\022 \002(\t\022\032\n\022DecorBoardUnitMemo\030\023 \002(\t\022\017"
    "\n\007VerCode\030\024 \002(\003\022\021\n\tFactoryID\030\025 \002(\005\022\021\n\tCr"
    "eatorID\030\026 \002(\005\022\021\n\tUpdaterID\030\027 \002(\005\022\022\n\nCrea"
    "teTime\030\030 \002(\003\022\022\n\nUpdateTime\030\031 \002(\003\022\027\n\017IsUs"
    "eDefaultMat\030\032 \002(\010\"\276\001\n\030JK_DecorBoardUnitM"
    "atInfo\022\030\n\020DecorBoardUnitID\030\001 \002(\005\022\r\n\005MatI"
    "D\030\002 \002(\005\022\020\n\010MatGType\030\003 \002(\005\022\021\n\tIsDefault\030\004"
    " \002(\010\022\031\n\021DefaultSealRuleID\030\005 \002(\005\022\025\n\rSkinD"
    "irection\030\006 \002(\005\022\017\n\007VerCode\030\007 \002(\003\022\021\n\tFacto"
    "ryID\030\010 \002(\005\"\230\002\n\031JK_DecorBoardUnitSealInfo"
    "\022\030\n\020DecorBoardUnitID\030\001 \002(\005\022\021\n\tSealIndex\030"
    "\002 \002(\005\022\020\n\010SealType\030\003 \002(\005\022\031\n\021DefaultMateri"
    "alID\030\004 \002(\005\022\017\n\007VerCode\030\005 \002(\003\022\021\n\tFactoryID"
    "\030\006 \002(\005\022\021\n\tCreatorID\030\007 \002(\005\022\021\n\tUpdaterID\030\010"
    " \002(\005\022\022\n\nCreateTime\030\t \002(\003\022\022\n\nUpdateTime\030\n"
    " \002(\003\022\021\n\tSealOrder\030\013 \002(\005\022\034\n\024DecorBoardUni"
    "tSealID\030\014 \002(\005\"\215\003\n\014JK_DecorInfo\022\017\n\007DecorI"
    "D\030\001 \002(\005\022\017\n\007GroupID\030\002 \002(\005\022\021\n\tFactoryID\030\003 "
    "\002(\005\022\020\n\010IsActive\030\004 \002(\010\022\017\n\007IsSplit\030\005 \002(\010\022\r"
    "\n\005IsDel\030\006 \002(\010\022\022\n\nSupplyType\030\007 \002(\005\022\017\n\007GTy"
    "peID\030\010 \002(\005\022\016\n\006ShowID\030\t \002(\005\022\016\n\006SkinID\030\n \002"
    "(\005\022\017\n\007ModelID\030\013 \002(\005\022\014\n\004XLen\030\014 \002(\001\022\014\n\004YLe"
    "n\030\r \002(\001\022\014\n\004ZLen\030\016 \002(\001\022\021\n\tCreatorID\030\017 \002(\005"
    "\022\021\n\tUpdaterID\030\020 \002(\005\022\022\n\nCreateTime\030\021 \002(\003\022"
    "\022\n\nUpdateTime\030\022 \002(\003\022\021\n\tDecorCode\030\023 \002(\t\022\021"
    "\n\tDecorName\030\024 \002(\t\022\021\n\tDecorMemo\030\025 \002(\t\022\017\n\007"
    "VerCode\030\026 \002(\003\"\350\002\n\020JK_DecorLineInfo\022\023\n\013De"
    "corLineID\030\001 \002(\005\022\021\n\tFactoryID\030\002 \002(\005\022\017\n\007Gr"
    "oupID\030\003 \002(\005\022\r\n\005IsDel\030\004 \002(\010\022\020\n\010IsActive\030\005"
    " \002(\010\022\017\n\007GTypeID\030\006 \002(\005\022\016\n\006ShowID\030\007 \002(\005\022\017\n"
    "\007ModelID\030\010 \002(\005\022\017\n\007ZOffset\030\t \002(\001\022\021\n\tCreat"
    "orID\030\n \002(\005\022\021\n\tUpdaterID\030\013 \002(\005\022\022\n\nCreateT"
    "ime\030\014 \002(\003\022\022\n\nUpdateTime\030\r \002(\003\022\025\n\rDecorLi"
    "neCode\030\016 \002(\t\022\025\n\rDecorLineName\030\017 \002(\t\022\025\n\rD"
    "ecorLineMemo\030\020 \002(\t\022\017\n\007VerCode\030\021 \002(\003\022\023\n\013D"
    "efaultYLen\030\022 \002(\001\"u\n\023JK_DecorLineMatInfo\022"
    "\023\n\013DecorLineID\030\001 \002(\005\022\022\n\nMaterialID\030\002 \002(\005"
    "\022\021\n\tIsDefault\030\003 \002(\010\022\017\n\007VerCode\030\004 \002(\003\022\021\n\t"
    "FactoryID\030\005 \002(\005\"\204\001\n\034JK_DecorUnitHWFittin"
    "gMapInfo\022\030\n\020DecorBoardUnitID\030\001 \002(\005\022\023\n\013HW"
    "FittingID\030\002 \002(\005\022\021\n\tIsDefault\030\003 \002(\010\022\017\n\007Ve"
    "rCode\030\004 \002(\003\022\021\n\tFactoryID\030\005 \002(\005\"\353\002\n\023JK_Do"
    "orBoardGapInfo\022\026\n\016DoorBoardGapID\030\001 \002(\005\022\023"
    "\n\013DoorBoardID\030\002 \002(\005\022\016\n\006GapPos\030\003 \002(\005\022\020\n\010G"
    "apIndex\030\004 \002(\005\022\017\n\007GapType\030\005 \002(\005\022\020\n\010GapSha"
    "pe\030\006 \002(\005\022\023\n\013XLenFormula\030\007 \002(\t\022\023\n\013YLenFor"
    "mula\030\010 \002(\t\022\026\n\016XOffsetFormula\030\t \002(\t\022\026\n\016YO"
    "ffsetFormula\030\n \002(\t\022\026\n\016ZOffsetFormula\030\013 \002"
    "(\t\022\021\n\tFactoryID\030\014 \002(\005\022\021\n\tCreatorID\030\r \002(\005"
    "\022\021\n\tUpdaterID\030\016 \002(\005\022\022\n\nCreateTime\030\017 \002(\003\022"
    "\022\n\nUpdateTime\030\020 \002(\003\022\017\n\007VerCode\030\021 \002(\003\"\204\004\n"
    "\020JK_DoorBoardInfo\022\023\n\013DoorBoardID\030\001 \002(\005\022\016"
    "\n\006DoorID\030\002 \002(\005\022\r\n\005IsDel\030\003 \002(\010\022\027\n\017IsUseDe"
    "faultMat\030\004 \002(\010\022\021\n\tSplitType\030\005 \002(\005\022\025\n\rSki"
    "nDirection\030\006 \002(\005\022\014\n\004ArcX\030\007 \002(\001\022\014\n\004ArcY\030\010"
    " \002(\001\022\014\n\004ArcZ\030\t \002(\001\022\020\n\010XFormula\030\n \002(\t\022\020\n\010"
    "YFormula\030\013 \002(\t\022\r\n\005XDock\030\014 \002(\005\022\r\n\005YDock\030\r"
    " \002(\005\022\r\n\005ZDock\030\016 \002(\005\022\026\n\016XOffsetFormula\030\017 "
    "\002(\t\022\026\n\016YOffsetFormula\030\020 \002(\t\022\026\n\016ZOffsetFo"
    "rmula\030\021 \002(\t\022\026\n\016DoorBoardIndex\030\022 \002(\005\022\025\n\rD"
    "oorBoardName\030\023 \002(\t\022\025\n\rDoorBoardMemo\030\024 \002("
    "\t\022\017\n\007VerCode\030\025 \002(\003\022\021\n\tFactoryID\030\026 \002(\005\022\021\n"
    "\tCreatorID\030\027 \002(\005\022\021\n\tUpdaterID\030\030 \002(\005\022\022\n\nC"
    "reateTime\030\031 \002(\003\022\022\n\nUpdateTime\030\032 \002(\003\"\205\001\n\026"
    "JK_DoorBoardMatMapInfo\022\023\n\013DoorBoardID\030\001 "
    "\002(\005\022\r\n\005MatID\030\002 \002(\005\022\020\n\010MatGType\030\003 \002(\005\022\021\n\t"
    "IsDefault\030\004 \002(\010\022\017\n\007VerCode\030\005 \002(\003\022\021\n\tFact"
    "oryID\030\006 \002(\005\"\325\001\n\024JK_DoorBoardSealInfo\022\023\n\013"
    "DoorBoardID\030\001 \002(\005\022\021\n\tSealOrder\030\002 \002(\005\022\020\n\010"
    "SealType\030\003 \002(\005\022\017\n\007VerCode\030\004 \002(\003\022\021\n\tFacto"
    "ryID\030\005 \002(\005\022\021\n\tCreatorID\030\006 \002(\005\022\021\n\tUpdater"
    "ID\030\007 \002(\005\022\022\n\nCreateTime\030\010 \002(\003\022\022\n\nUpdateTi"
    "me\030\t \002(\003\022\021\n\tSealIndex\030\n \002(\005\"\210\003\n\013JK_DoorI"
    "nfo\022\016\n\006DoorID\030\001 \002(\005\022\017\n\007GroupID\030\002 \002(\005\022\021\n\t"
    "FactoryID\030\003 \002(\005\022\017\n\007VerCode\030\004 \002(\003\022\r\n\005IsDe"
    "l\030\005 \002(\010\022\020\n\010IsActive\030\006 \002(\010\022\017\n\007GTypeID\030\007 \002"
    "(\005\022\023\n\013CombineType\030\010 \002(\005\022\017\n\007PhotoID\030\t \002(\005"
    "\022\034\n\024VirtualContainerXLen\030\n \002(\001\022\034\n\024Virtua"
    "lContainerYLen\030\013 \002(\001\022\034\n\024VirtualContainer"
    "ZLen\030\014 \002(\001\022\021\n\tCreatorID\030\r \002(\005\022\021\n\tUpdater"
    "ID\030\016 \002(\005\022\022\n\nCreateTime\030\017 \002(\003\022\022\n\nUpdateTi"
    "me\030\020 \002(\003\022\020\n\010DoorCode\030\021 \002(\t\022\020\n\010DoorName\030\022"
    " \002(\t\022\020\n\010DoorMemo\030\023 \002(\t\"q\n\021JK_DoorMatMapI"
    "nfo\022\016\n\006DoorID\030\001 \002(\005\022\025\n\rDoorMatPlanID\030\002 \002"
    "(\005\022\021\n\tIsDefault\030\003 \002(\010\022\017\n\007VerCode\030\004 \002(\003\022\021"
    "\n\tFactoryID\030\005 \002(\005\"j\n\033JK_DoorMatPlanHandl"
    "eMapInfo\022\025\n\rDoorMatPlanID\030\001 \002(\005\022\020\n\010Handl"
    "eID\030\002 \002(\005\022\017\n\007VerCode\030\003 \002(\003\022\021\n\tFactoryID\030"
    "\004 \002(\005\"\337\002\n\022JK_DoorMatPlanInfo\022\025\n\rDoorMatP"
    "lanID\030\001 \002(\005\022\017\n\007GroupID\030\002 \002(\005\022\r\n\005IsDel\030\003 "
    "\002(\010\022\020\n\010IsActive\030\004 \002(\010\022\021\n\tFactoryID\030\005 \002(\005"
    "\022\021\n\tCreatorID\030\006 \002(\005\022\021\n\tUpdaterID\030\007 \002(\005\022\022"
    "\n\nCreateTime\030\010 \002(\003\022\022\n\nUpdateTime\030\t \002(\003\022\r"
    "\n\005MatID\030\n \002(\005\022\020\n\010MatGType\030\013 \002(\005\022\027\n\017DoorM"
    "atPlanCode\030\014 \002(\t\022\027\n\017DoorMatPlanName\030\r \002("
    "\t\022\027\n\017DoorMatPlanMemo\030\016 \002(\t\022\017\n\007VerCode\030\017 "
    "\002(\003\022\017\n\007ModelID\030\020 \002(\005\022\021\n\tIsCanSeal\030\021 \002(\010\""
    "\207\001\n\035JK_DoorRegionHWFittingMapInfo\022\032\n\022Doo"
    "rSystemRegionID\030\001 \002(\005\022\023\n\013HWFittingID\030\002 \002"
    "(\005\022\021\n\tIsDefault\030\003 \002(\010\022\017\n\007VerCode\030\004 \002(\003\022\021"
    "\n\tFactoryID\030\005 \002(\005\"\263\003\n\021JK_DoorSystemInfo\022"
    "\024\n\014DoorSystemID\030\001 \002(\005\022\021\n\tFactoryID\030\002 \002(\005"
    "\022\017\n\007VerCode\030\003 \002(\003\022\017\n\007GroupID\030\004 \002(\005\022\r\n\005Is"
    "Del\030\005 \002(\010\022\020\n\010IsActive\030\006 \002(\010\022\022\n\nSupplyTyp"
    "e\030\007 \002(\005\022\025\n\rMatchCabShape\030\010 \002(\005\022\023\n\013Instal"
    "lType\030\t \002(\005\022\023\n\013VirtualXLen\030\n \002(\001\022\023\n\013Virt"
    "ualYLen\030\013 \002(\001\022\030\n\020VirtualShapeXLen\030\014 \002(\001\022"
    "\030\n\020VirtualShapeZLen\030\r \002(\001\022\021\n\tCreatorID\030\016"
    " \002(\005\022\021\n\tUpdaterID\030\017 \002(\005\022\022\n\nCreateTime\030\020 "
    "\002(\003\022\022\n\nUpdateTime\030\021 \002(\003\022\026\n\016DoorSystemCod"
    "e\030\022 \002(\t\022\026\n\016DoorSystemName\030\023 \002(\t\022\026\n\016DoorS"
    "ystemMemo\030\024 \002(\t\"}\n\027JK_DoorSystemMatMapIn"
    "fo\022\024\n\014DoorSystemID\030\001 \002(\005\022\025\n\rDoorMatPlanI"
    "D\030\002 \002(\005\022\021\n\tIsDefault\030\003 \002(\010\022\017\n\007VerCode\030\004 "
    "\002(\003\022\021\n\tFactoryID\030\005 \002(\005\"\203\001\n\036JK_DoorSystem"
    "RegionDoorMapInfo\022\032\n\022DoorSystemRegionID\030"
    "\001 \002(\005\022\016\n\006DoorID\030\002 \002(\005\022\021\n\tIsDefault\030\003 \002(\010"
    "\022\017\n\007VerCode\030\004 \002(\003\022\021\n\tFactoryID\030\005 \002(\005\"\246\006\n"
    "\027JK_DoorSystemRegionInfo\022\032\n\022DoorSystemRe"
    "gionID\030\001 \002(\005\022\024\n\014DoorSystemID\030\002 \002(\005\022\020\n\010Pa"
    "rentID\030\003 \002(\005\022\r\n\005IsDel\030\004 \002(\010\022\023\n\013RegionInd"
    "ex\030\005 \002(\005\022\024\n\014CutDirection\030\006 \002(\005\022\022\n\nCutFor"
    "mula\030\007 \002(\t\022\017\n\007IsSlide\030\010 \002(\010\022\017\n\007IsRound\030\t"
    " \002(\010\022\024\n\014LenPrecision\030\n \002(\005\022\024\n\014OpenDoorTy"
    "pe\030\013 \002(\005\022\022\n\nXAdjustLen\030\014 \002(\001\022\022\n\nYAdjustL"
    "en\030\r \002(\001\022\r\n\005XDock\030\016 \002(\005\022\r\n\005YDock\030\017 \002(\005\022\r"
    "\n\005ZDock\030\020 \002(\005\022\026\n\016XOffsetFormula\030\021 \002(\t\022\026\n"
    "\016YOffsetFormula\030\022 \002(\t\022\026\n\016ZOffsetFormula\030"
    "\023 \002(\t\022\023\n\013IsCanResize\030\024 \002(\010\022\024\n\014DoorFuncti"
    "on\030\025 \002(\005\022\017\n\007VerCode\030\026 \002(\003\022\021\n\tFactoryID\030\027"
    " \002(\005\022\021\n\tCreatorID\030\030 \002(\005\022\021\n\tUpdaterID\030\031 \002"
    "(\005\022\022\n\nCreateTime\030\032 \002(\003\022\022\n\nUpdateTime\030\033 \002"
    "(\003\022\023\n\013HandleXDock\030\034 \002(\005\022\023\n\013HandleYDock\030\035"
    " \002(\005\022\023\n\013HandleZDock\030\036 \002(\005\022\034\n\024HandleXOffs"
    "etFormula\030\037 \002(\t\022\034\n\024HandleYOffsetFormula\030"
    "  \002(\t\022\034\n\024HandleZOffsetFormula\030! \002(\t\022\014\n\004Z"
    "Len\030\" \002(\001\022\030\n\020DoorBoardMatType\030# \002(\005\022\026\n\016D"
    "oorBoardMatID\030$ \002(\005\022\030\n\020IsUseCustomThick\030"
    "% \002(\010\"\234\001\n\037JK_DoorSystemRegionSlideMapInf"
    "o\022\032\n\022DoorSystemRegionID\030\001 \002(\005\022\017\n\007SlideID"
    "\030\002 \002(\005\022\025\n\rSlidePosition\030\003 \002(\005\022\021\n\tIsDefau"
    "lt\030\004 \002(\010\022\017\n\007VerCode\030\005 \002(\003\022\021\n\tFactoryID\030\006"
    " \002(\005\"\330\002\n(JK_DoorSystemRegionSlidePositio"
    "nSizeInfo\022\032\n\022DoorSystemRegionID\030\001 \002(\005\022\025\n"
    "\rSlidePosition\030\002 \002(\005\022\022\n\nXAdjustLen\030\003 \002(\001"
    "\022\r\n\005XDock\030\004 \002(\005\022\r\n\005YDock\030\005 \002(\005\022\r\n\005ZDock\030"
    "\006 \002(\005\022\026\n\016XOffsetFormula\030\007 \002(\t\022\026\n\016YOffset"
    "Formula\030\010 \002(\t\022\026\n\016ZOffsetFormula\030\t \002(\t\022\017\n"
    "\007VerCode\030\n \002(\003\022\021\n\tFactoryID\030\013 \002(\005\022\021\n\tCre"
    "atorID\030\014 \002(\005\022\021\n\tUpdaterID\030\r \002(\005\022\022\n\nCreat"
    "eTime\030\016 \002(\003\022\022\n\nUpdateTime\030\017 \002(\003\"\234\005\n\020JK_F"
    "NFittingInfo\022\023\n\013FNFittingID\030\001 \002(\005\022\021\n\tFac"
    "toryID\030\002 \002(\005\022\017\n\007GroupID\030\003 \002(\005\022\r\n\005IsDel\030\004"
    " \002(\010\022\020\n\010IsActive\030\005 \002(\010\022\017\n\007IsSplit\030\006 \002(\010\022"
    "\022\n\nSupplyType\030\007 \002(\005\022\017\n\007GTypeID\030\010 \002(\005\022\020\n\010"
    "IsEntire\030\t \002(\010\022\016\n\006ShowID\030\n \002(\005\022\017\n\007ModelI"
    "D\030\013 \002(\005\022\014\n\004XLen\030\014 \002(\001\022\014\n\004YLen\030\r \002(\001\022\014\n\004Z"
    "Len\030\016 \002(\001\022\023\n\013MinInstallX\030\017 \002(\001\022\023\n\013MinIns"
    "tallY\030\020 \002(\001\022\023\n\013MinInstallZ\030\021 \002(\001\022\017\n\007MinX"
    "Len\030\022 \002(\001\022\017\n\007MaxXLen\030\023 \002(\001\022\017\n\007MinYLen\030\024 "
    "\002(\001\022\017\n\007MaxYLen\030\025 \002(\001\022\017\n\007MinZLen\030\026 \002(\001\022\017\n"
    "\007MaxZLen\030\027 \002(\001\022\023\n\013IsMatchXLen\030\030 \002(\010\022\023\n\013I"
    "sMatchYLen\030\031 \002(\010\022\023\n\013IsMatchZLen\030\032 \002(\010\022\023\n"
    "\013DefaultYPos\030\033 \002(\001\022\021\n\tCreatorID\030\034 \002(\005\022\021\n"
    "\tUpdaterID\030\035 \002(\005\022\022\n\nCreateTime\030\036 \002(\003\022\022\n\n"
    "UpdateTime\030\037 \002(\003\022\025\n\rFNFittingCode\030  \002(\t\022"
    "\025\n\rFNFittingName\030! \002(\t\022\025\n\rFNFittingMemo\030"
    "\" \002(\t\022\017\n\007VerCode\030# \002(\003\"u\n\023JK_FNFittingMa"
    "tInfo\022\023\n\013FNFittingID\030\001 \002(\005\022\022\n\nMaterialID"
    "\030\002 \002(\005\022\021\n\tIsDefault\030\003 \002(\010\022\017\n\007VerCode\030\004 \002"
    "(\003\022\021\n\tFactoryID\030\005 \002(\005\"\250\004\n\024JK_FNFittingPa"
    "rtInfo\022\027\n\017FNFittingPartID\030\001 \002(\005\022\020\n\010PartT"
    "ype\030\002 \002(\005\022\r\n\005IsDel\030\003 \002(\010\022\023\n\013FNFittingID\030"
    "\004 \002(\005\022\021\n\tIsUseMain\030\005 \002(\010\022\025\n\rSkinDirectio"
    "n\030\006 \002(\005\022\021\n\tSplitType\030\007 \002(\005\022\014\n\004ArcX\030\010 \002(\001"
    "\022\014\n\004ArcY\030\t \002(\001\022\014\n\004ArcZ\030\n \002(\001\022\020\n\010XFormula"
    "\030\013 \002(\t\022\020\n\010YFormula\030\014 \002(\t\022\r\n\005XDock\030\r \002(\005\022"
    "\r\n\005YDock\030\016 \002(\005\022\r\n\005ZDock\030\017 \002(\005\022\026\n\016XOffset"
    "Formula\030\020 \002(\t\022\026\n\016YOffsetFormula\030\021 \002(\t\022\026\n"
    "\016ZOffsetFormula\030\022 \002(\t\022\031\n\021FNFittingPartCo"
    "de\030\023 \002(\t\022\031\n\021FNFittingPartName\030\024 \002(\t\022\031\n\021F"
    "NFittingPartMemo\030\025 \002(\t\022\017\n\007VerCode\030\026 \002(\003\022"
    "\021\n\tFactoryID\030\027 \002(\005\022\021\n\tCreatorID\030\030 \002(\005\022\021\n"
    "\tUpdaterID\030\031 \002(\005\022\022\n\nCreateTime\030\032 \002(\003\022\022\n\n"
    "UpdateTime\030\033 \002(\003\"\217\001\n\027JK_FNFittingPartMat"
    "Info\022\027\n\017FNFittingPartID\030\001 \002(\005\022\022\n\nMateria"
    "lID\030\002 \002(\005\022\021\n\tIsDefault\030\003 \002(\010\022\017\n\007VerCode\030"
    "\004 \002(\003\022\021\n\tFactoryID\030\005 \002(\005\022\020\n\010MatGType\030\006 \002"
    "(\005\"\335\001\n\030JK_FNFittingPartSealInfo\022\027\n\017FNFit"
    "tingPartID\030\001 \002(\005\022\021\n\tSealOrder\030\002 \002(\005\022\021\n\tS"
    "ealIndex\030\003 \002(\005\022\020\n\010SealType\030\004 \002(\005\022\017\n\007VerC"
    "ode\030\005 \002(\003\022\021\n\tFactoryID\030\006 \002(\005\022\021\n\tCreatorI"
    "D\030\007 \002(\005\022\021\n\tUpdaterID\030\010 \002(\005\022\022\n\nCreateTime"
    "\030\t \002(\003\022\022\n\nUpdateTime\030\n \002(\003\"\314\002\n\016JK_Fittin"
    "gInfo\022\021\n\tFittingID\030\001 \002(\005\022\021\n\tFactoryID\030\002 "
    "\002(\005\022\017\n\007GroupID\030\003 \002(\005\022\r\n\005IsDel\030\004 \002(\010\022\020\n\010I"
    "sActive\030\005 \002(\010\022\017\n\007IsSplit\030\006 \002(\010\022\017\n\007GTypeI"
    "D\030\007 \002(\005\022\022\n\nSupplyType\030\010 \002(\005\022\016\n\006ShowID\030\t "
    "\002(\005\022\021\n\tCreatorID\030\n \002(\005\022\021\n\tUpdaterID\030\013 \002("
    "\005\022\022\n\nCreateTime\030\014 \002(\003\022\022\n\nUpdateTime\030\r \002("
    "\003\022\023\n\013FittingCode\030\016 \002(\t\022\023\n\013FittingName\030\017 "
    "\002(\t\022\023\n\013FittingMemo\030\020 \002(\t\022\017\n\007VerCode\030\021 \002("
    "\003\"\303\002\n\022JK_FittingRuleInfo\022\025\n\rFittingRuleI"
    "D\030\001 \002(\005\022\017\n\007OwnerID\030\002 \002(\005\022\024\n\014OwnerGTypeID"
    "\030\003 \002(\005\022\021\n\tIsDefault\030\004 \002(\010\022\020\n\010IsCanDel\030\005 "
    "\002(\010\022\016\n\006MinLen\030\006 \002(\001\022\016\n\006MaxLen\030\007 \002(\001\022\021\n\tF"
    "ittingID\030\010 \002(\005\022\023\n\013FittingType\030\t \002(\005\022\020\n\010U"
    "seCount\030\n \002(\005\022\017\n\007VerCode\030\013 \002(\003\022\021\n\tFactor"
    "yID\030\014 \002(\005\022\021\n\tCreatorID\030\r \002(\005\022\021\n\tUpdaterI"
    "D\030\016 \002(\005\022\022\n\nCreateTime\030\017 \002(\003\022\022\n\nUpdateTim"
    "e\030\020 \002(\003\"\301\001\n\023JK_FormulaConstInfo\022\021\n\tFacto"
    "ryID\030\001 \002(\005\022\017\n\007VerCode\030\002 \002(\003\022\021\n\tConstCode"
    "\030\003 \002(\t\022\021\n\tConstText\030\004 \002(\t\022\022\n\nConstValue\030"
    "\005 \002(\001\022\021\n\tCreatorID\030\006 \002(\005\022\021\n\tUpdaterID\030\007 "
    "\002(\005\022\022\n\nCreateTime\030\010 \002(\003\022\022\n\nUpdateTime\030\t "
    "\002(\003\"\374\001\n\014JK_GroupInfo\022\017\n\007GroupID\030\001 \002(\005\022\020\n"
    "\010ParentID\030\002 \002(\005\022\021\n\tFactoryID\030\003 \002(\005\022\r\n\005Is"
    "Del\030\004 \002(\010\022\017\n\007GTypeID\030\005 \002(\005\022\021\n\tCreatorID\030"
    "\006 \002(\005\022\021\n\tUpdaterID\030\007 \002(\005\022\022\n\nCreateTime\030\010"
    " \002(\003\022\022\n\nUpdateTime\030\t \002(\003\022\021\n\tGroupCode\030\n "
    "\002(\t\022\021\n\tGroupName\030\013 \002(\t\022\021\n\tGroupMemo\030\014 \002("
    "\t\022\017\n\007VerCode\030\r \002(\003\"\276\004\n\020JK_HWFittingInfo\022"
    "\023\n\013HWFittingID\030\001 \002(\005\022\021\n\tFactoryID\030\002 \002(\005\022"
    "\017\n\007GroupID\030\003 \002(\005\022\r\n\005IsDel\030\004 \002(\010\022\020\n\010IsAct"
    "ive\030\005 \002(\010\022\017\n\007IsSplit\030\006 \002(\010\022\022\n\nSupplyType"
    "\030\007 \002(\005\022\017\n\007GTypeID\030\010 \002(\005\022\016\n\006ShowID\030\t \002(\005\022"
    "\017\n\007ModelID\030\n \002(\005\022\014\n\004XLen\030\013 \002(\001\022\014\n\004YLen\030\014"
    " \002(\001\022\014\n\004ZLen\030\r \002(\001\022\032\n\022SettingCountRuleID"
    "\030\016 \002(\005\022\023\n\013IsMatchXLen\030\017 \002(\010\022\023\n\013IsMatchYL"
    "en\030\020 \002(\010\022\023\n\013IsMatchZLen\030\021 \002(\010\022\021\n\tEffectL"
    "en\030\022 \002(\001\022\022\n\nXAdjustLen\030\023 \002(\001\022\017\n\007IsEmbed\030"
    "\024 \002(\010\022\030\n\020InstallDirection\030\025 \002(\005\022\021\n\tCreat"
    "orID\030\026 \002(\005\022\021\n\tUpdaterID\030\027 \002(\005\022\022\n\nCreateT"
    "ime\030\030 \002(\003\022\022\n\nUpdateTime\030\031 \002(\003\022\025\n\rHWFitti"
    "ngCode\030\032 \002(\t\022\025\n\rHWFittingName\030\033 \002(\t\022\025\n\rH"
    "WFittingMemo\030\034 \002(\t\022\017\n\007VerCode\030\035 \002(\003\"\253\002\n\017"
    "JK_HoleRuleInfo\022\016\n\006HoleID\030\001 \002(\005\022\023\n\013FNFit"
    "tingID\030\002 \002(\005\022\022\n\nHoleTypeID\030\003 \002(\005\022\014\n\004XLen"
    "\030\004 \002(\001\022\014\n\004YLen\030\005 \002(\001\022\022\n\nOverHeight\030\006 \002(\001"
    "\022\021\n\tHolePicID\030\007 \002(\005\022\024\n\014MinXDistance\030\010 \002("
    "\001\022\024\n\014MinZDistance\030\t \002(\001\022\017\n\007VerCode\030\n \002(\003"
    "\022\021\n\tFactoryID\030\013 \002(\005\022\021\n\tCreatorID\030\014 \002(\005\022\021"
    "\n\tUpdaterID\030\r \002(\005\022\022\n\nCreateTime\030\016 \002(\003\022\022\n"
    "\nUpdateTime\030\017 \002(\003\"\205\004\n\017JK_MaterialInfo\022\022\n"
    "\nMaterialID\030\001 \002(\005\022\021\n\tFactoryID\030\002 \002(\005\022\017\n\007"
    "GroupID\030\003 \002(\005\022\r\n\005IsDel\030\004 \002(\010\022\020\n\010IsActive"
    "\030\005 \002(\010\022\017\n\007IsSplit\030\006 \002(\010\022\022\n\nSupplyType\030\007 "
    "\002(\005\022\017\n\007GTypeID\030\010 \002(\005\022\016\n\006ShowID\030\t \002(\005\022\017\n\007"
    "ModelID\030\n \002(\005\022\014\n\004XLen\030\013 \002(\001\022\014\n\004YLen\030\014 \002("
    "\001\022\014\n\004ZLen\030\r \002(\001\022\023\n\013IsMatchXLen\030\016 \002(\010\022\023\n\013"
    "IsMatchYLen\030\017 \002(\010\022\023\n\013IsMatchZLen\030\020 \002(\010\022\016"
    "\n\006SkinID\030\021 \002(\005\022\025\n\rSkinDirection\030\022 \002(\005\022\021\n"
    "\tTransCode\030\023 \002(\005\022\021\n\tCreatorID\030\024 \002(\005\022\021\n\tU"
    "pdaterID\030\025 \002(\005\022\022\n\nCreateTime\030\026 \002(\003\022\022\n\nUp"
    "dateTime\030\027 \002(\003\022\024\n\014MaterialCode\030\030 \002(\t\022\024\n\014"
    "MaterialName\030\031 \002(\t\022\024\n\014MaterialMemo\030\032 \002(\t"
    "\022\017\n\007VerCode\030\033 \002(\003\"\215\001\n\032JK_MaterialSealRul"
    "eMapInfo\022\022\n\nMaterialID\030\001 \002(\005\022\022\n\nSealRule"
    "ID\030\002 \002(\005\022\020\n\010IsCabDef\030\003 \002(\010\022\021\n\tIsDoorDef\030"
    "\004 \002(\010\022\017\n\007VerCode\030\005 \002(\003\022\021\n\tFactoryID\030\006 \002("
    "\005\"\233\003\n\014JK_ModelInfo\022\017\n\007ModelID\030\001 \002(\005\022\017\n\007G"
    "roupID\030\002 \002(\005\022\021\n\tFactoryID\030\003 \002(\005\022\017\n\007GType"
    "ID\030\004 \002(\005\022\014\n\004ArcX\030\005 \002(\001\022\014\n\004ArcY\030\006 \002(\001\022\014\n\004"
    "ArcZ\030\007 \002(\001\022\r\n\005IsDel\030\010 \002(\010\022\021\n\tCreatorID\030\t"
    " \002(\005\022\021\n\tUpdaterID\030\n \002(\005\022\022\n\nCreateTime\030\013 "
    "\002(\003\022\022\n\nUpdateTime\030\014 \002(\003\022\021\n\tModelCode\030\r \002"
    "(\t\022\021\n\tModelName\030\016 \002(\t\022\024\n\014RelativePath\030\017 "
    "\002(\t\022\021\n\tModelMemo\030\020 \002(\t\022\020\n\010HASHCode\030\021 \002(\t"
    "\022\017\n\007VerCode\030\022 \002(\003\022\023\n\013FrontViewID\030\023 \002(\005\022\023"
    "\n\013RightViewID\030\024 \002(\005\022\021\n\tTopViewID\030\025 \002(\005\022\017"
    "\n\007PhotoID\030\026 \002(\005\"\340\001\n\021JK_NumberRuleInfo\022\024\n"
    "\014NumberRuleID\030\001 \002(\005\022\021\n\tFittingID\030\002 \002(\005\022\016"
    "\n\006MinLen\030\003 \002(\001\022\016\n\006MaxLen\030\004 \002(\001\022\020\n\010UseCou"
    "nt\030\005 \002(\005\022\017\n\007VerCode\030\006 \002(\003\022\021\n\tFactoryID\030\007"
    " \002(\005\022\021\n\tCreatorID\030\010 \002(\005\022\021\n\tUpdaterID\030\t \002"
    "(\005\022\022\n\nCreateTime\030\n \002(\003\022\022\n\nUpdateTime\030\013 \002"
    "(\003\"\314\002\n\016JK_PackageInfo\022\025\n\rFittingPackID\030\001"
    " \002(\005\022\021\n\tFactoryID\030\002 \002(\005\022\017\n\007GroupID\030\003 \002(\005"
    "\022\r\n\005IsDel\030\004 \002(\010\022\020\n\010IsActive\030\005 \002(\010\022\017\n\007IsS"
    "plit\030\006 \002(\010\022\022\n\nIsSeparate\030\007 \002(\010\022\017\n\007GTypeI"
    "D\030\010 \002(\005\022\021\n\tCreatorID\030\t \002(\005\022\021\n\tUpdaterID\030"
    "\n \002(\005\022\022\n\nCreateTime\030\013 \002(\003\022\022\n\nUpdateTime\030"
    "\014 \002(\003\022\027\n\017FittingPackCode\030\r \002(\t\022\027\n\017Fittin"
    "gPackName\030\016 \002(\t\022\027\n\017FittingPackMemo\030\017 \002(\t"
    "\022\017\n\007VerCode\030\020 \002(\003\"s\n\021JK_PackageMapInfo\022\021"
    "\n\tPackageID\030\001 \002(\005\022\021\n\tFittingID\030\002 \002(\005\022\024\n\014"
    "FittingCount\030\003 \002(\005\022\017\n\007VerCode\030\004 \002(\003\022\021\n\tF"
    "actoryID\030\005 \002(\005\"\207\003\n\016JK_ProductInfo\022\021\n\tPro"
    "ductID\030\001 \002(\005\022\021\n\tFactoryID\030\002 \002(\005\022\017\n\007Group"
    "ID\030\003 \002(\005\022\r\n\005IsDel\030\004 \002(\010\022\020\n\010IsActive\030\005 \002("
    "\010\022\017\n\007IsSplit\030\006 \002(\010\022\022\n\nSupplyType\030\007 \002(\005\022\017"
    "\n\007GTypeID\030\010 \002(\005\022\016\n\006ShowID\030\t \002(\005\022\017\n\007Model"
    "ID\030\n \002(\005\022\014\n\004XLen\030\013 \002(\001\022\014\n\004YLen\030\014 \002(\001\022\014\n\004"
    "ZLen\030\r \002(\001\022\021\n\tCreatorID\030\016 \002(\005\022\021\n\tUpdater"
    "ID\030\017 \002(\005\022\022\n\nCreateTime\030\020 \002(\003\022\022\n\nUpdateTi"
    "me\030\021 \002(\003\022\023\n\013ProductCode\030\022 \002(\t\022\023\n\013Product"
    "Name\030\023 \002(\t\022\023\n\013ProductMemo\030\024 \002(\t\022\017\n\007VerCo"
    "de\030\025 \002(\003\"\244\002\n\024JK_ProductSeriesInfo\022\027\n\017Pro"
    "ductSeriesID\030\001 \002(\005\022\021\n\tFactoryID\030\002 \002(\005\022\017\n"
    "\007GroupID\030\003 \002(\005\022\r\n\005IsDel\030\004 \002(\010\022\020\n\010IsActiv"
    "e\030\005 \002(\010\022\021\n\tCreatorID\030\006 \002(\005\022\021\n\tUpdaterID\030"
    "\007 \002(\005\022\022\n\nCreateTime\030\010 \002(\003\022\022\n\nUpdateTime\030"
    "\t \002(\003\022\031\n\021ProductSeriesCode\030\n \002(\t\022\031\n\021Prod"
    "uctSeriesName\030\013 \002(\t\022\031\n\021ProductSeriesMemo"
    "\030\014 \002(\t\022\017\n\007VerCode\030\r \002(\003\"\240\002\n\031JK_ProductSe"
    "riesValidInfo\022\027\n\017ProductSeriesID\030\001 \002(\005\022\033"
    "\n\023ProductSeriesItemID\030\002 \002(\005\022\016\n\006PSType\030\003 "
    "\002(\005\022\020\n\010ParentID\030\004 \002(\005\022\021\n\tIsDefault\030\005 \002(\010"
    "\022\017\n\007IsGroup\030\006 \002(\010\022\017\n\007VerCode\030\007 \002(\003\022\021\n\tFa"
    "ctoryID\030\010 \002(\005\022\021\n\tCreatorID\030\t \002(\005\022\021\n\tUpda"
    "terID\030\n \002(\005\022\022\n\nCreateTime\030\013 \002(\003\022\022\n\nUpdat"
    "eTime\030\014 \002(\003\022\025\n\rDefaultItemID\030\r \002(\005\"\316\002\n\017J"
    "K_ResourceInfo\022\022\n\nResourceID\030\001 \002(\005\022\017\n\007Gr"
    "oupID\030\002 \002(\005\022\021\n\tFactoryID\030\003 \002(\005\022\017\n\007GTypeI"
    "D\030\004 \002(\005\022\r\n\005IsDel\030\005 \002(\010\022\014\n\004XLen\030\006 \002(\001\022\014\n\004"
    "YLen\030\007 \002(\001\022\021\n\tCreatorID\030\010 \002(\005\022\021\n\tUpdater"
    "ID\030\t \002(\005\022\022\n\nCreateTime\030\n \002(\003\022\022\n\nUpdateTi"
    "me\030\013 \002(\003\022\024\n\014ResourceCode\030\014 \002(\t\022\024\n\014Resour"
    "ceName\030\r \002(\t\022\024\n\014RelativePath\030\016 \002(\t\022\024\n\014Re"
    "sourceMemo\030\017 \002(\t\022\020\n\010HASHCode\030\020 \002(\t\022\017\n\007Ve"
    "rCode\030\021 \002(\003\"\247\002\n\017JK_SealRuleInfo\022\022\n\nSealR"
    "uleID\030\001 \002(\005\022\r\n\005IsDel\030\002 \002(\010\022\025\n\rVisibleSea"
    "lID\030\003 \002(\005\022\027\n\017InvisibleSealID\030\004 \002(\005\022\022\n\nVi"
    "sPreMill\030\005 \002(\001\022\024\n\014InvisPreMill\030\006 \002(\001\022\017\n\007"
    "STypeID\030\007 \002(\005\022\024\n\014SealRuleName\030\010 \002(\t\022\017\n\007V"
    "erCode\030\t \002(\003\022\021\n\tFactoryID\030\n \002(\005\022\021\n\tCreat"
    "orID\030\013 \002(\005\022\021\n\tUpdaterID\030\014 \002(\005\022\022\n\nCreateT"
    "ime\030\r \002(\003\022\022\n\nUpdateTime\030\016 \002(\003\"\272\007\n\020JK_Sys"
    "ConfigInfo\022\021\n\tFactoryID\030\001 \002(\005\022\017\n\007VerCode"
    "\030\002 \002(\003\022\020\n\010ConfigID\030\003 \002(\005\022\025\n\rTableFrontLe"
    "n\030\004 \002(\001\022\024\n\014TableSideLen\030\005 \002(\001\022\032\n\022BaseCab"
    "DefaultYPos\030\006 \002(\001\022\026\n\016BaseCabSideLen\030\007 \002("
    "\001\022\032\n\022WallCabDefaultYPos\030\010 \002(\001\022\026\n\016WallCab"
    "SideLen\030\t \002(\001\022\027\n\017ToekickFrontLen\030\n \002(\001\022\030"
    "\n\020DefaultBarHeight\030\013 \002(\001\022\033\n\023DefaultSealE"
    "xtraLen\030\014 \002(\001\022\035\n\025DefaultSealPreMillLen\030\r"
    " \002(\001\022\030\n\020ShelfDefaultYPos\030\016 \002(\001\022\032\n\022BGPane"
    "lDefaultYPos\030\017 \002(\001\022\035\n\025TableToCabDefaultY"
    "Len\030\020 \002(\001\022\036\n\026DefaultBaseCabinetXLen\030\021 \002("
    "\001\022\036\n\026DefaultBaseCabinetYLen\030\022 \002(\001\022\036\n\026Def"
    "aultBaseCabinetZLen\030\023 \002(\001\022\036\n\026DefaultWall"
    "CabinetXLen\030\024 \002(\001\022\036\n\026DefaultWallCabinetY"
    "Len\030\025 \002(\001\022\036\n\026DefaultWallCabinetZLen\030\026 \002("
    "\001\022\033\n\023DefaultLCabinetXLen\030\027 \002(\001\022\033\n\023Defaul"
    "tLCabinetZLen\030\030 \002(\001\022 \n\030DefaultCabinetBoa"
    "rdThick\030\031 \002(\001\022\035\n\025DefaultDoorBoardThick\030\032"
    " \002(\001\022\035\n\025DefaultThinBoardThick\030\033 \002(\001\022\036\n\026D"
    "efaultDecorLineHeight\030\034 \002(\001\022\031\n\021DefaultDr"
    "awerXLen\030\035 \002(\001\022\031\n\021DefaultDrawerYLen\030\036 \002("
    "\001\022\031\n\021DefaultDrawerZLen\030\037 \002(\001\022\021\n\tCreatorI"
    "D\030  \002(\005\022\021\n\tUpdaterID\030! \002(\005\022\022\n\nCreateTime"
    "\030\" \002(\003\022\022\n\nUpdateTime\030# \002(\003\"\250\002\n\024JK_SysRul"
    "eConfigInfo\022\021\n\tFactoryID\030\001 \002(\005\022\017\n\007VerCod"
    "e\030\002 \002(\003\022\r\n\005IsDel\030\003 \002(\010\022\024\n\014RuleConfigID\030\004"
    " \002(\005\022\022\n\nRuleTypeID\030\005 \002(\005\022\017\n\007CabType\030\006 \002("
    "\005\022\017\n\007MinXLen\030\007 \002(\001\022\017\n\007MinYLen\030\010 \002(\001\022\017\n\007M"
    "axXLen\030\t \002(\001\022\017\n\007MaxYLen\030\n \002(\001\022\020\n\010UseCoun"
    "t\030\013 \002(\005\022\021\n\tCreatorID\030\014 \002(\005\022\021\n\tUpdaterID\030"
    "\r \002(\005\022\022\n\nCreateTime\030\016 \002(\003\022\022\n\nUpdateTime\030"
    "\017 \002(\003\"\341\001\n\022JK_SysRuleTypeInfo\022\021\n\tFactoryI"
    "D\030\001 \002(\005\022\017\n\007VerCode\030\002 \002(\003\022\022\n\nRuleTypeID\030\003"
    " \002(\005\022\r\n\005IsDel\030\004 \002(\010\022\024\n\014RuleTypeName\030\005 \002("
    "\t\022\021\n\tIsDefault\030\006 \002(\010\022\r\n\005RType\030\007 \002(\005\022\021\n\tC"
    "reatorID\030\010 \002(\005\022\021\n\tUpdaterID\030\t \002(\005\022\022\n\nCre"
    "ateTime\030\n \002(\003\022\022\n\nUpdateTime\030\013 \002(\003\"\235\002\n\023JK"
    "_TableTopSideInfo\022\026\n\016TableTopSideID\030\001 \002("
    "\005\022\022\n\nTableTopID\030\002 \002(\005\022\r\n\005IsDel\030\003 \002(\010\022\017\n\007"
    "ModelID\030\004 \002(\005\022\016\n\006ShowID\030\005 \002(\005\022\021\n\tSideWid"
    "th\030\006 \002(\001\022\022\n\nMaterialID\030\007 \002(\005\022\021\n\tIsDefaul"
    "t\030\010 \002(\010\022\017\n\007VerCode\030\t \002(\003\022\021\n\tFactoryID\030\n "
    "\002(\005\022\021\n\tCreatorID\030\013 \002(\005\022\021\n\tUpdaterID\030\014 \002("
    "\005\022\022\n\nCreateTime\030\r \002(\003\022\022\n\nUpdateTime\030\016 \002("
    "\003\"\242$\n\010JK_Table\0228\n\022JK_CabBoardMatInfo\030\001 \003"
    "(\0132\034.transMsg.JK_CabBoardMatInfo\022@\n\026JK_C"
    "abBoardMatSkinInfo\030\002 \003(\0132 .transMsg.JK_C"
    "abBoardMatSkinInfo\022N\n\035JK_CabDesignBoardS"
    "ealEdgeInfo\030\003 \003(\0132\'.transMsg.JK_CabDesig"
    "nBoardSealEdgeInfo\022F\n\031JK_CabDesignBoardS"
    "ealInfo\030\004 \003(\0132#.transMsg.JK_CabDesignBoa"
    "rdSealInfo\022T\n JK_CabDesignDoorRegionHand"
    "leInfo\030\005 \003(\0132*.transMsg.JK_CabDesignDoor"
    "RegionHandleInfo\022H\n\032JK_CabDesignDoorRegi"
    "onInfo\030\006 \003(\0132$.transMsg.JK_CabDesignDoor"
    "RegionInfo\022H\n\032JK_CabDesignDoorSystemInfo"
    "\030\007 \003(\0132$.transMsg.JK_CabDesignDoorSystem"
    "Info\022F\n\031JK_CabDesignFNFittingInfo\030\010 \003(\0132"
    "#.transMsg.JK_CabDesignFNFittingInfo\022L\n\034"
    "JK_CabDesignFNFittingMapInfo\030\t \003(\0132&.tra"
    "nsMsg.JK_CabDesignFNFittingMapInfo\022<\n\024JK"
    "_CabDesignFootInfo\030\n \003(\0132\036.transMsg.JK_C"
    "abDesignFootInfo\0224\n\020JK_CabDesignInfo\030\013 \003"
    "(\0132\032.transMsg.JK_CabDesignInfo\022:\n\023JK_Cab"
    "DesignMatInfo\030\014 \003(\0132\035.transMsg.JK_CabDes"
    "ignMatInfo\0226\n\021JK_CabMatPlanInfo\030\r \003(\0132\033."
    "transMsg.JK_CabMatPlanInfo\022D\n\030JK_CabStru"
    "ctBoardGapInfo\030\016 \003(\0132\".transMsg.JK_CabSt"
    "ructBoardGapInfo\022>\n\025JK_CabStructBoardInf"
    "o\030\017 \003(\0132\037.transMsg.JK_CabStructBoardInfo"
    "\022F\n\031JK_CabStructBoardSealInfo\030\020 \003(\0132#.tr"
    "ansMsg.JK_CabStructBoardSealInfo\022:\n\023JK_C"
    "abStructGapInfo\030\021 \003(\0132\035.transMsg.JK_CabS"
    "tructGapInfo\0224\n\020JK_CabStructInfo\030\022 \003(\0132\032"
    ".transMsg.JK_CabStructInfo\022H\n\032JK_CabStru"
    "ctMatPlanMapInfo\030\023 \003(\0132$.transMsg.JK_Cab"
    "StructMatPlanMapInfo\022B\n\027JK_CabinetSizeBo"
    "ardInfo\030\024 \003(\0132!.transMsg.JK_CabinetSizeB"
    "oardInfo\0228\n\022JK_CabinetSizeInfo\030\025 \003(\0132\034.t"
    "ransMsg.JK_CabinetSizeInfo\022N\n\035JK_Cabinet"
    "SizeStructBoardInfo\030\026 \003(\0132\'.transMsg.JK_"
    "CabinetSizeStructBoardInfo\022F\n\031JK_DecorBo"
    "ardFrameMapInfo\030\027 \003(\0132#.transMsg.JK_Deco"
    "rBoardFrameMapInfo\0226\n\021JK_DecorBoardInfo\030"
    "\030 \003(\0132\033.transMsg.JK_DecorBoardInfo\022<\n\024JK"
    "_DecorBoardMatInfo\030\031 \003(\0132\036.transMsg.JK_D"
    "ecorBoardMatInfo\022>\n\025JK_DecorBoardUnitInf"
    "o\030\032 \003(\0132\037.transMsg.JK_DecorBoardUnitInfo"
    "\022D\n\030JK_DecorBoardUnitMatInfo\030\033 \003(\0132\".tra"
    "nsMsg.JK_DecorBoardUnitMatInfo\022F\n\031JK_Dec"
    "orBoardUnitSealInfo\030\034 \003(\0132#.transMsg.JK_"
    "DecorBoardUnitSealInfo\022,\n\014JK_DecorInfo\030\035"
    " \003(\0132\026.transMsg.JK_DecorInfo\0224\n\020JK_Decor"
    "LineInfo\030\036 \003(\0132\032.transMsg.JK_DecorLineIn"
    "fo\022:\n\023JK_DecorLineMatInfo\030\037 \003(\0132\035.transM"
    "sg.JK_DecorLineMatInfo\022L\n\034JK_DecorUnitHW"
    "FittingMapInfo\030  \003(\0132&.transMsg.JK_Decor"
    "UnitHWFittingMapInfo\022:\n\023JK_DoorBoardGapI"
    "nfo\030! \003(\0132\035.transMsg.JK_DoorBoardGapInfo"
    "\0224\n\020JK_DoorBoardInfo\030\" \003(\0132\032.transMsg.JK"
    "_DoorBoardInfo\022@\n\026JK_DoorBoardMatMapInfo"
    "\030# \003(\0132 .transMsg.JK_DoorBoardMatMapInfo"
    "\022<\n\024JK_DoorBoardSealInfo\030$ \003(\0132\036.transMs"
    "g.JK_DoorBoardSealInfo\022*\n\013JK_DoorInfo\030% "
    "\003(\0132\025.transMsg.JK_DoorInfo\0226\n\021JK_DoorMat"
    "MapInfo\030& \003(\0132\033.transMsg.JK_DoorMatMapIn"
    "fo\022J\n\033JK_DoorMatPlanHandleMapInfo\030\' \003(\0132"
    "%.transMsg.JK_DoorMatPlanHandleMapInfo\0228"
    "\n\022JK_DoorMatPlanInfo\030( \003(\0132\034.transMsg.JK"
    "_DoorMatPlanInfo\022N\n\035JK_DoorRegionHWFitti"
    "ngMapInfo\030) \003(\0132\'.transMsg.JK_DoorRegion"
    "HWFittingMapInfo\0226\n\021JK_DoorSystemInfo\030* "
    "\003(\0132\033.transMsg.JK_DoorSystemInfo\022B\n\027JK_D"
    "oorSystemMatMapInfo\030+ \003(\0132!.transMsg.JK_"
    "DoorSystemMatMapInfo\022P\n\036JK_DoorSystemReg"
    "ionDoorMapInfo\030, \003(\0132(.transMsg.JK_DoorS"
    "ystemRegionDoorMapInfo\022B\n\027JK_DoorSystemR"
    "egionInfo\030- \003(\0132!.transMsg.JK_DoorSystem"
    "RegionInfo\022R\n\037JK_DoorSystemRegionSlideMa"
    "pInfo\030. \003(\0132).transMsg.JK_DoorSystemRegi"
    "onSlideMapInfo\022d\n(JK_DoorSystemRegionSli"
    "dePositionSizeInfo\030/ \003(\01322.transMsg.JK_D"
    "oorSystemRegionSlidePositionSizeInfo\0224\n\020"
    "JK_FNFittingInfo\0300 \003(\0132\032.transMsg.JK_FNF"
    "ittingInfo\022:\n\023JK_FNFittingMatInfo\0301 \003(\0132"
    "\035.transMsg.JK_FNFittingMatInfo\022<\n\024JK_FNF"
    "ittingPartInfo\0302 \003(\0132\036.transMsg.JK_FNFit"
    "tingPartInfo\022B\n\027JK_FNFittingPartMatInfo\030"
    "3 \003(\0132!.transMsg.JK_FNFittingPartMatInfo"
    "\022D\n\030JK_FNFittingPartSealInfo\0304 \003(\0132\".tra"
    "nsMsg.JK_FNFittingPartSealInfo\0220\n\016JK_Fit"
    "tingInfo\0305 \003(\0132\030.transMsg.JK_FittingInfo"
    "\0228\n\022JK_FittingRuleInfo\0306 \003(\0132\034.transMsg."
    "JK_FittingRuleInfo\022:\n\023JK_FormulaConstInf"
    "o\0307 \003(\0132\035.transMsg.JK_FormulaConstInfo\022,"
    "\n\014JK_GroupInfo\0308 \003(\0132\026.transMsg.JK_Group"
    "Info\0224\n\020JK_HWFittingInfo\0309 \003(\0132\032.transMs"
    "g.JK_HWFittingInfo\0222\n\017JK_HoleRuleInfo\030: "
    "\003(\0132\031.transMsg.JK_HoleRuleInfo\0222\n\017JK_Mat"
    "erialInfo\030; \003(\0132\031.transMsg.JK_MaterialIn"
    "fo\022H\n\032JK_MaterialSealRuleMapInfo\030< \003(\0132$"
    ".transMsg.JK_MaterialSealRuleMapInfo\022,\n\014"
    "JK_ModelInfo\030= \003(\0132\026.transMsg.JK_ModelIn"
    "fo\0226\n\021JK_NumberRuleInfo\030> \003(\0132\033.transMsg"
    ".JK_NumberRuleInfo\0220\n\016JK_PackageInfo\030\? \003"
    "(\0132\030.transMsg.JK_PackageInfo\0226\n\021JK_Packa"
    "geMapInfo\030@ \003(\0132\033.transMsg.JK_PackageMap"
    "Info\0220\n\016JK_ProductInfo\030A \003(\0132\030.transMsg."
    "JK_ProductInfo\022<\n\024JK_ProductSeriesInfo\030B"
    " \003(\0132\036.transMsg.JK_ProductSeriesInfo\022F\n\031"
    "JK_ProductSeriesValidInfo\030C \003(\0132#.transM"
    "sg.JK_ProductSeriesValidInfo\0222\n\017JK_Resou"
    "rceInfo\030D \003(\0132\031.transMsg.JK_ResourceInfo"
    "\0222\n\017JK_SealRuleInfo\030E \003(\0132\031.transMsg.JK_"
    "SealRuleInfo\0224\n\020JK_SysConfigInfo\030F \003(\0132\032"
    ".transMsg.JK_SysConfigInfo\022<\n\024JK_SysRule"
    "ConfigInfo\030G \003(\0132\036.transMsg.JK_SysRuleCo"
    "nfigInfo\0228\n\022JK_SysRuleTypeInfo\030H \003(\0132\034.t"
    "ransMsg.JK_SysRuleTypeInfo\022:\n\023JK_TableTo"
    "pSideInfo\030I \003(\0132\035.transMsg.JK_TableTopSi"
    "deInfo", 28126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg-JK.proto", &protobuf_RegisterTypes);
  JK_CabBoardMatInfo::default_instance_ = new JK_CabBoardMatInfo();
  JK_CabBoardMatSkinInfo::default_instance_ = new JK_CabBoardMatSkinInfo();
  JK_CabDesignBoardSealEdgeInfo::default_instance_ = new JK_CabDesignBoardSealEdgeInfo();
  JK_CabDesignBoardSealInfo::default_instance_ = new JK_CabDesignBoardSealInfo();
  JK_CabDesignDoorRegionHandleInfo::default_instance_ = new JK_CabDesignDoorRegionHandleInfo();
  JK_CabDesignDoorRegionInfo::default_instance_ = new JK_CabDesignDoorRegionInfo();
  JK_CabDesignDoorSystemInfo::default_instance_ = new JK_CabDesignDoorSystemInfo();
  JK_CabDesignFNFittingInfo::default_instance_ = new JK_CabDesignFNFittingInfo();
  JK_CabDesignFNFittingMapInfo::default_instance_ = new JK_CabDesignFNFittingMapInfo();
  JK_CabDesignFootInfo::default_instance_ = new JK_CabDesignFootInfo();
  JK_CabDesignInfo::default_instance_ = new JK_CabDesignInfo();
  JK_CabDesignMatInfo::default_instance_ = new JK_CabDesignMatInfo();
  JK_CabMatPlanInfo::default_instance_ = new JK_CabMatPlanInfo();
  JK_CabStructBoardGapInfo::default_instance_ = new JK_CabStructBoardGapInfo();
  JK_CabStructBoardInfo::default_instance_ = new JK_CabStructBoardInfo();
  JK_CabStructBoardSealInfo::default_instance_ = new JK_CabStructBoardSealInfo();
  JK_CabStructGapInfo::default_instance_ = new JK_CabStructGapInfo();
  JK_CabStructInfo::default_instance_ = new JK_CabStructInfo();
  JK_CabStructMatPlanMapInfo::default_instance_ = new JK_CabStructMatPlanMapInfo();
  JK_CabinetSizeBoardInfo::default_instance_ = new JK_CabinetSizeBoardInfo();
  JK_CabinetSizeInfo::default_instance_ = new JK_CabinetSizeInfo();
  JK_CabinetSizeStructBoardInfo::default_instance_ = new JK_CabinetSizeStructBoardInfo();
  JK_DecorBoardFrameMapInfo::default_instance_ = new JK_DecorBoardFrameMapInfo();
  JK_DecorBoardInfo::default_instance_ = new JK_DecorBoardInfo();
  JK_DecorBoardMatInfo::default_instance_ = new JK_DecorBoardMatInfo();
  JK_DecorBoardUnitInfo::default_instance_ = new JK_DecorBoardUnitInfo();
  JK_DecorBoardUnitMatInfo::default_instance_ = new JK_DecorBoardUnitMatInfo();
  JK_DecorBoardUnitSealInfo::default_instance_ = new JK_DecorBoardUnitSealInfo();
  JK_DecorInfo::default_instance_ = new JK_DecorInfo();
  JK_DecorLineInfo::default_instance_ = new JK_DecorLineInfo();
  JK_DecorLineMatInfo::default_instance_ = new JK_DecorLineMatInfo();
  JK_DecorUnitHWFittingMapInfo::default_instance_ = new JK_DecorUnitHWFittingMapInfo();
  JK_DoorBoardGapInfo::default_instance_ = new JK_DoorBoardGapInfo();
  JK_DoorBoardInfo::default_instance_ = new JK_DoorBoardInfo();
  JK_DoorBoardMatMapInfo::default_instance_ = new JK_DoorBoardMatMapInfo();
  JK_DoorBoardSealInfo::default_instance_ = new JK_DoorBoardSealInfo();
  JK_DoorInfo::default_instance_ = new JK_DoorInfo();
  JK_DoorMatMapInfo::default_instance_ = new JK_DoorMatMapInfo();
  JK_DoorMatPlanHandleMapInfo::default_instance_ = new JK_DoorMatPlanHandleMapInfo();
  JK_DoorMatPlanInfo::default_instance_ = new JK_DoorMatPlanInfo();
  JK_DoorRegionHWFittingMapInfo::default_instance_ = new JK_DoorRegionHWFittingMapInfo();
  JK_DoorSystemInfo::default_instance_ = new JK_DoorSystemInfo();
  JK_DoorSystemMatMapInfo::default_instance_ = new JK_DoorSystemMatMapInfo();
  JK_DoorSystemRegionDoorMapInfo::default_instance_ = new JK_DoorSystemRegionDoorMapInfo();
  JK_DoorSystemRegionInfo::default_instance_ = new JK_DoorSystemRegionInfo();
  JK_DoorSystemRegionSlideMapInfo::default_instance_ = new JK_DoorSystemRegionSlideMapInfo();
  JK_DoorSystemRegionSlidePositionSizeInfo::default_instance_ = new JK_DoorSystemRegionSlidePositionSizeInfo();
  JK_FNFittingInfo::default_instance_ = new JK_FNFittingInfo();
  JK_FNFittingMatInfo::default_instance_ = new JK_FNFittingMatInfo();
  JK_FNFittingPartInfo::default_instance_ = new JK_FNFittingPartInfo();
  JK_FNFittingPartMatInfo::default_instance_ = new JK_FNFittingPartMatInfo();
  JK_FNFittingPartSealInfo::default_instance_ = new JK_FNFittingPartSealInfo();
  JK_FittingInfo::default_instance_ = new JK_FittingInfo();
  JK_FittingRuleInfo::default_instance_ = new JK_FittingRuleInfo();
  JK_FormulaConstInfo::default_instance_ = new JK_FormulaConstInfo();
  JK_GroupInfo::default_instance_ = new JK_GroupInfo();
  JK_HWFittingInfo::default_instance_ = new JK_HWFittingInfo();
  JK_HoleRuleInfo::default_instance_ = new JK_HoleRuleInfo();
  JK_MaterialInfo::default_instance_ = new JK_MaterialInfo();
  JK_MaterialSealRuleMapInfo::default_instance_ = new JK_MaterialSealRuleMapInfo();
  JK_ModelInfo::default_instance_ = new JK_ModelInfo();
  JK_NumberRuleInfo::default_instance_ = new JK_NumberRuleInfo();
  JK_PackageInfo::default_instance_ = new JK_PackageInfo();
  JK_PackageMapInfo::default_instance_ = new JK_PackageMapInfo();
  JK_ProductInfo::default_instance_ = new JK_ProductInfo();
  JK_ProductSeriesInfo::default_instance_ = new JK_ProductSeriesInfo();
  JK_ProductSeriesValidInfo::default_instance_ = new JK_ProductSeriesValidInfo();
  JK_ResourceInfo::default_instance_ = new JK_ResourceInfo();
  JK_SealRuleInfo::default_instance_ = new JK_SealRuleInfo();
  JK_SysConfigInfo::default_instance_ = new JK_SysConfigInfo();
  JK_SysRuleConfigInfo::default_instance_ = new JK_SysRuleConfigInfo();
  JK_SysRuleTypeInfo::default_instance_ = new JK_SysRuleTypeInfo();
  JK_TableTopSideInfo::default_instance_ = new JK_TableTopSideInfo();
  JK_Table::default_instance_ = new JK_Table();
  JK_CabBoardMatInfo::default_instance_->InitAsDefaultInstance();
  JK_CabBoardMatSkinInfo::default_instance_->InitAsDefaultInstance();
  JK_CabDesignBoardSealEdgeInfo::default_instance_->InitAsDefaultInstance();
  JK_CabDesignBoardSealInfo::default_instance_->InitAsDefaultInstance();
  JK_CabDesignDoorRegionHandleInfo::default_instance_->InitAsDefaultInstance();
  JK_CabDesignDoorRegionInfo::default_instance_->InitAsDefaultInstance();
  JK_CabDesignDoorSystemInfo::default_instance_->InitAsDefaultInstance();
  JK_CabDesignFNFittingInfo::default_instance_->InitAsDefaultInstance();
  JK_CabDesignFNFittingMapInfo::default_instance_->InitAsDefaultInstance();
  JK_CabDesignFootInfo::default_instance_->InitAsDefaultInstance();
  JK_CabDesignInfo::default_instance_->InitAsDefaultInstance();
  JK_CabDesignMatInfo::default_instance_->InitAsDefaultInstance();
  JK_CabMatPlanInfo::default_instance_->InitAsDefaultInstance();
  JK_CabStructBoardGapInfo::default_instance_->InitAsDefaultInstance();
  JK_CabStructBoardInfo::default_instance_->InitAsDefaultInstance();
  JK_CabStructBoardSealInfo::default_instance_->InitAsDefaultInstance();
  JK_CabStructGapInfo::default_instance_->InitAsDefaultInstance();
  JK_CabStructInfo::default_instance_->InitAsDefaultInstance();
  JK_CabStructMatPlanMapInfo::default_instance_->InitAsDefaultInstance();
  JK_CabinetSizeBoardInfo::default_instance_->InitAsDefaultInstance();
  JK_CabinetSizeInfo::default_instance_->InitAsDefaultInstance();
  JK_CabinetSizeStructBoardInfo::default_instance_->InitAsDefaultInstance();
  JK_DecorBoardFrameMapInfo::default_instance_->InitAsDefaultInstance();
  JK_DecorBoardInfo::default_instance_->InitAsDefaultInstance();
  JK_DecorBoardMatInfo::default_instance_->InitAsDefaultInstance();
  JK_DecorBoardUnitInfo::default_instance_->InitAsDefaultInstance();
  JK_DecorBoardUnitMatInfo::default_instance_->InitAsDefaultInstance();
  JK_DecorBoardUnitSealInfo::default_instance_->InitAsDefaultInstance();
  JK_DecorInfo::default_instance_->InitAsDefaultInstance();
  JK_DecorLineInfo::default_instance_->InitAsDefaultInstance();
  JK_DecorLineMatInfo::default_instance_->InitAsDefaultInstance();
  JK_DecorUnitHWFittingMapInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorBoardGapInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorBoardInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorBoardMatMapInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorBoardSealInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorMatMapInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorMatPlanHandleMapInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorMatPlanInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorRegionHWFittingMapInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorSystemInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorSystemMatMapInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorSystemRegionDoorMapInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorSystemRegionInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorSystemRegionSlideMapInfo::default_instance_->InitAsDefaultInstance();
  JK_DoorSystemRegionSlidePositionSizeInfo::default_instance_->InitAsDefaultInstance();
  JK_FNFittingInfo::default_instance_->InitAsDefaultInstance();
  JK_FNFittingMatInfo::default_instance_->InitAsDefaultInstance();
  JK_FNFittingPartInfo::default_instance_->InitAsDefaultInstance();
  JK_FNFittingPartMatInfo::default_instance_->InitAsDefaultInstance();
  JK_FNFittingPartSealInfo::default_instance_->InitAsDefaultInstance();
  JK_FittingInfo::default_instance_->InitAsDefaultInstance();
  JK_FittingRuleInfo::default_instance_->InitAsDefaultInstance();
  JK_FormulaConstInfo::default_instance_->InitAsDefaultInstance();
  JK_GroupInfo::default_instance_->InitAsDefaultInstance();
  JK_HWFittingInfo::default_instance_->InitAsDefaultInstance();
  JK_HoleRuleInfo::default_instance_->InitAsDefaultInstance();
  JK_MaterialInfo::default_instance_->InitAsDefaultInstance();
  JK_MaterialSealRuleMapInfo::default_instance_->InitAsDefaultInstance();
  JK_ModelInfo::default_instance_->InitAsDefaultInstance();
  JK_NumberRuleInfo::default_instance_->InitAsDefaultInstance();
  JK_PackageInfo::default_instance_->InitAsDefaultInstance();
  JK_PackageMapInfo::default_instance_->InitAsDefaultInstance();
  JK_ProductInfo::default_instance_->InitAsDefaultInstance();
  JK_ProductSeriesInfo::default_instance_->InitAsDefaultInstance();
  JK_ProductSeriesValidInfo::default_instance_->InitAsDefaultInstance();
  JK_ResourceInfo::default_instance_->InitAsDefaultInstance();
  JK_SealRuleInfo::default_instance_->InitAsDefaultInstance();
  JK_SysConfigInfo::default_instance_->InitAsDefaultInstance();
  JK_SysRuleConfigInfo::default_instance_->InitAsDefaultInstance();
  JK_SysRuleTypeInfo::default_instance_->InitAsDefaultInstance();
  JK_TableTopSideInfo::default_instance_->InitAsDefaultInstance();
  JK_Table::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2dJK_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2dJK_2eproto {
  StaticDescriptorInitializer_msg_2dJK_2eproto() {
    protobuf_AddDesc_msg_2dJK_2eproto();
  }
} static_descriptor_initializer_msg_2dJK_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int JK_CabBoardMatInfo::kCabMatPlanIDFieldNumber;
const int JK_CabBoardMatInfo::kCabStructBoardIDFieldNumber;
const int JK_CabBoardMatInfo::kIsDefaultFieldNumber;
const int JK_CabBoardMatInfo::kMatIDFieldNumber;
const int JK_CabBoardMatInfo::kMatGTypeFieldNumber;
const int JK_CabBoardMatInfo::kSealRuleIDFieldNumber;
const int JK_CabBoardMatInfo::kSkinDirectionFieldNumber;
const int JK_CabBoardMatInfo::kVerCodeFieldNumber;
const int JK_CabBoardMatInfo::kFactoryIDFieldNumber;
const int JK_CabBoardMatInfo::kIsUseDefaultSkinDirectionFieldNumber;
#endif  // !_MSC_VER

JK_CabBoardMatInfo::JK_CabBoardMatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabBoardMatInfo::InitAsDefaultInstance() {
}

JK_CabBoardMatInfo::JK_CabBoardMatInfo(const JK_CabBoardMatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabBoardMatInfo::SharedCtor() {
  _cached_size_ = 0;
  cabmatplanid_ = 0;
  cabstructboardid_ = 0;
  isdefault_ = false;
  matid_ = 0;
  matgtype_ = 0;
  sealruleid_ = 0;
  skindirection_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  isusedefaultskindirection_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabBoardMatInfo::~JK_CabBoardMatInfo() {
  SharedDtor();
}

void JK_CabBoardMatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_CabBoardMatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabBoardMatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabBoardMatInfo_descriptor_;
}

const JK_CabBoardMatInfo& JK_CabBoardMatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabBoardMatInfo* JK_CabBoardMatInfo::default_instance_ = NULL;

JK_CabBoardMatInfo* JK_CabBoardMatInfo::New() const {
  return new JK_CabBoardMatInfo;
}

void JK_CabBoardMatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabmatplanid_ = 0;
    cabstructboardid_ = 0;
    isdefault_ = false;
    matid_ = 0;
    matgtype_ = 0;
    sealruleid_ = 0;
    skindirection_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    factoryid_ = 0;
    isusedefaultskindirection_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabBoardMatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabMatPlanID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabmatplanid_)));
          set_has_cabmatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabStructBoardID;
        break;
      }

      // required int32 CabStructBoardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardid_)));
          set_has_cabstructboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MatID;
        break;
      }

      // required int32 MatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matid_)));
          set_has_matid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MatGType;
        break;
      }

      // required int32 MatGType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatGType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matgtype_)));
          set_has_matgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_SealRuleID;
        break;
      }

      // required int32 SealRuleID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealRuleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealruleid_)));
          set_has_sealruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SkinDirection;
        break;
      }

      // required int32 SkinDirection = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkinDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skindirection_)));
          set_has_skindirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsUseDefaultSkinDirection;
        break;
      }

      // required bool IsUseDefaultSkinDirection = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUseDefaultSkinDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusedefaultskindirection_)));
          set_has_isusedefaultskindirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabBoardMatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabMatPlanID = 1;
  if (has_cabmatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabmatplanid(), output);
  }

  // required int32 CabStructBoardID = 2;
  if (has_cabstructboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabstructboardid(), output);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdefault(), output);
  }

  // required int32 MatID = 4;
  if (has_matid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->matid(), output);
  }

  // required int32 MatGType = 5;
  if (has_matgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->matgtype(), output);
  }

  // required int32 SealRuleID = 6;
  if (has_sealruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sealruleid(), output);
  }

  // required int32 SkinDirection = 7;
  if (has_skindirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->skindirection(), output);
  }

  // required int64 VerCode = 8;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->vercode(), output);
  }

  // required int32 FactoryID = 9;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->factoryid(), output);
  }

  // required bool IsUseDefaultSkinDirection = 10;
  if (has_isusedefaultskindirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isusedefaultskindirection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabBoardMatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabMatPlanID = 1;
  if (has_cabmatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabmatplanid(), target);
  }

  // required int32 CabStructBoardID = 2;
  if (has_cabstructboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabstructboardid(), target);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdefault(), target);
  }

  // required int32 MatID = 4;
  if (has_matid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->matid(), target);
  }

  // required int32 MatGType = 5;
  if (has_matgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->matgtype(), target);
  }

  // required int32 SealRuleID = 6;
  if (has_sealruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sealruleid(), target);
  }

  // required int32 SkinDirection = 7;
  if (has_skindirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->skindirection(), target);
  }

  // required int64 VerCode = 8;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->vercode(), target);
  }

  // required int32 FactoryID = 9;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->factoryid(), target);
  }

  // required bool IsUseDefaultSkinDirection = 10;
  if (has_isusedefaultskindirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isusedefaultskindirection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabBoardMatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabMatPlanID = 1;
    if (has_cabmatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabmatplanid());
    }

    // required int32 CabStructBoardID = 2;
    if (has_cabstructboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardid());
    }

    // required bool IsDefault = 3;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int32 MatID = 4;
    if (has_matid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matid());
    }

    // required int32 MatGType = 5;
    if (has_matgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matgtype());
    }

    // required int32 SealRuleID = 6;
    if (has_sealruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealruleid());
    }

    // required int32 SkinDirection = 7;
    if (has_skindirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skindirection());
    }

    // required int64 VerCode = 8;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 FactoryID = 9;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required bool IsUseDefaultSkinDirection = 10;
    if (has_isusedefaultskindirection()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabBoardMatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabBoardMatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabBoardMatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabBoardMatInfo::MergeFrom(const JK_CabBoardMatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabmatplanid()) {
      set_cabmatplanid(from.cabmatplanid());
    }
    if (from.has_cabstructboardid()) {
      set_cabstructboardid(from.cabstructboardid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_matid()) {
      set_matid(from.matid());
    }
    if (from.has_matgtype()) {
      set_matgtype(from.matgtype());
    }
    if (from.has_sealruleid()) {
      set_sealruleid(from.sealruleid());
    }
    if (from.has_skindirection()) {
      set_skindirection(from.skindirection());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_isusedefaultskindirection()) {
      set_isusedefaultskindirection(from.isusedefaultskindirection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabBoardMatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabBoardMatInfo::CopyFrom(const JK_CabBoardMatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabBoardMatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void JK_CabBoardMatInfo::Swap(JK_CabBoardMatInfo* other) {
  if (other != this) {
    std::swap(cabmatplanid_, other->cabmatplanid_);
    std::swap(cabstructboardid_, other->cabstructboardid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(matid_, other->matid_);
    std::swap(matgtype_, other->matgtype_);
    std::swap(sealruleid_, other->sealruleid_);
    std::swap(skindirection_, other->skindirection_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(isusedefaultskindirection_, other->isusedefaultskindirection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabBoardMatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabBoardMatInfo_descriptor_;
  metadata.reflection = JK_CabBoardMatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabBoardMatSkinInfo::kCabMatPlanIDFieldNumber;
const int JK_CabBoardMatSkinInfo::kCabStructBoardIDFieldNumber;
const int JK_CabBoardMatSkinInfo::kSkinDirectionFieldNumber;
const int JK_CabBoardMatSkinInfo::kVerCodeFieldNumber;
const int JK_CabBoardMatSkinInfo::kFactoryIDFieldNumber;
const int JK_CabBoardMatSkinInfo::kIsUseDefaultSkinDirectionFieldNumber;
#endif  // !_MSC_VER

JK_CabBoardMatSkinInfo::JK_CabBoardMatSkinInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabBoardMatSkinInfo::InitAsDefaultInstance() {
}

JK_CabBoardMatSkinInfo::JK_CabBoardMatSkinInfo(const JK_CabBoardMatSkinInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabBoardMatSkinInfo::SharedCtor() {
  _cached_size_ = 0;
  cabmatplanid_ = 0;
  cabstructboardid_ = 0;
  skindirection_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  isusedefaultskindirection_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabBoardMatSkinInfo::~JK_CabBoardMatSkinInfo() {
  SharedDtor();
}

void JK_CabBoardMatSkinInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_CabBoardMatSkinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabBoardMatSkinInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabBoardMatSkinInfo_descriptor_;
}

const JK_CabBoardMatSkinInfo& JK_CabBoardMatSkinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabBoardMatSkinInfo* JK_CabBoardMatSkinInfo::default_instance_ = NULL;

JK_CabBoardMatSkinInfo* JK_CabBoardMatSkinInfo::New() const {
  return new JK_CabBoardMatSkinInfo;
}

void JK_CabBoardMatSkinInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabmatplanid_ = 0;
    cabstructboardid_ = 0;
    skindirection_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    isusedefaultskindirection_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabBoardMatSkinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabMatPlanID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabmatplanid_)));
          set_has_cabmatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabStructBoardID;
        break;
      }

      // required int32 CabStructBoardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardid_)));
          set_has_cabstructboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SkinDirection;
        break;
      }

      // required int32 SkinDirection = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkinDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skindirection_)));
          set_has_skindirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsUseDefaultSkinDirection;
        break;
      }

      // required bool IsUseDefaultSkinDirection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUseDefaultSkinDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusedefaultskindirection_)));
          set_has_isusedefaultskindirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabBoardMatSkinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabMatPlanID = 1;
  if (has_cabmatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabmatplanid(), output);
  }

  // required int32 CabStructBoardID = 2;
  if (has_cabstructboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabstructboardid(), output);
  }

  // required int32 SkinDirection = 3;
  if (has_skindirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skindirection(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  // required bool IsUseDefaultSkinDirection = 6;
  if (has_isusedefaultskindirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isusedefaultskindirection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabBoardMatSkinInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabMatPlanID = 1;
  if (has_cabmatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabmatplanid(), target);
  }

  // required int32 CabStructBoardID = 2;
  if (has_cabstructboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabstructboardid(), target);
  }

  // required int32 SkinDirection = 3;
  if (has_skindirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skindirection(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  // required bool IsUseDefaultSkinDirection = 6;
  if (has_isusedefaultskindirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isusedefaultskindirection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabBoardMatSkinInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabMatPlanID = 1;
    if (has_cabmatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabmatplanid());
    }

    // required int32 CabStructBoardID = 2;
    if (has_cabstructboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardid());
    }

    // required int32 SkinDirection = 3;
    if (has_skindirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skindirection());
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required bool IsUseDefaultSkinDirection = 6;
    if (has_isusedefaultskindirection()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabBoardMatSkinInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabBoardMatSkinInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabBoardMatSkinInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabBoardMatSkinInfo::MergeFrom(const JK_CabBoardMatSkinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabmatplanid()) {
      set_cabmatplanid(from.cabmatplanid());
    }
    if (from.has_cabstructboardid()) {
      set_cabstructboardid(from.cabstructboardid());
    }
    if (from.has_skindirection()) {
      set_skindirection(from.skindirection());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_isusedefaultskindirection()) {
      set_isusedefaultskindirection(from.isusedefaultskindirection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabBoardMatSkinInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabBoardMatSkinInfo::CopyFrom(const JK_CabBoardMatSkinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabBoardMatSkinInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void JK_CabBoardMatSkinInfo::Swap(JK_CabBoardMatSkinInfo* other) {
  if (other != this) {
    std::swap(cabmatplanid_, other->cabmatplanid_);
    std::swap(cabstructboardid_, other->cabstructboardid_);
    std::swap(skindirection_, other->skindirection_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(isusedefaultskindirection_, other->isusedefaultskindirection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabBoardMatSkinInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabBoardMatSkinInfo_descriptor_;
  metadata.reflection = JK_CabBoardMatSkinInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabDesignBoardSealEdgeInfo::kCabDesignBoardSealIDFieldNumber;
const int JK_CabDesignBoardSealEdgeInfo::kSealIndexFieldNumber;
const int JK_CabDesignBoardSealEdgeInfo::kSealMatIDFieldNumber;
const int JK_CabDesignBoardSealEdgeInfo::kVerCodeFieldNumber;
const int JK_CabDesignBoardSealEdgeInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_CabDesignBoardSealEdgeInfo::JK_CabDesignBoardSealEdgeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabDesignBoardSealEdgeInfo::InitAsDefaultInstance() {
}

JK_CabDesignBoardSealEdgeInfo::JK_CabDesignBoardSealEdgeInfo(const JK_CabDesignBoardSealEdgeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabDesignBoardSealEdgeInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdesignboardsealid_ = 0;
  sealindex_ = 0;
  sealmatid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabDesignBoardSealEdgeInfo::~JK_CabDesignBoardSealEdgeInfo() {
  SharedDtor();
}

void JK_CabDesignBoardSealEdgeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_CabDesignBoardSealEdgeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabDesignBoardSealEdgeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabDesignBoardSealEdgeInfo_descriptor_;
}

const JK_CabDesignBoardSealEdgeInfo& JK_CabDesignBoardSealEdgeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabDesignBoardSealEdgeInfo* JK_CabDesignBoardSealEdgeInfo::default_instance_ = NULL;

JK_CabDesignBoardSealEdgeInfo* JK_CabDesignBoardSealEdgeInfo::New() const {
  return new JK_CabDesignBoardSealEdgeInfo;
}

void JK_CabDesignBoardSealEdgeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdesignboardsealid_ = 0;
    sealindex_ = 0;
    sealmatid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabDesignBoardSealEdgeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDesignBoardSealID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignboardsealid_)));
          set_has_cabdesignboardsealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SealIndex;
        break;
      }

      // required int32 SealIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealindex_)));
          set_has_sealindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SealMatID;
        break;
      }

      // required int32 SealMatID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealMatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealmatid_)));
          set_has_sealmatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabDesignBoardSealEdgeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDesignBoardSealID = 1;
  if (has_cabdesignboardsealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdesignboardsealid(), output);
  }

  // required int32 SealIndex = 2;
  if (has_sealindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sealindex(), output);
  }

  // required int32 SealMatID = 3;
  if (has_sealmatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sealmatid(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabDesignBoardSealEdgeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDesignBoardSealID = 1;
  if (has_cabdesignboardsealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdesignboardsealid(), target);
  }

  // required int32 SealIndex = 2;
  if (has_sealindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sealindex(), target);
  }

  // required int32 SealMatID = 3;
  if (has_sealmatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sealmatid(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabDesignBoardSealEdgeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDesignBoardSealID = 1;
    if (has_cabdesignboardsealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignboardsealid());
    }

    // required int32 SealIndex = 2;
    if (has_sealindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealindex());
    }

    // required int32 SealMatID = 3;
    if (has_sealmatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealmatid());
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabDesignBoardSealEdgeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabDesignBoardSealEdgeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabDesignBoardSealEdgeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabDesignBoardSealEdgeInfo::MergeFrom(const JK_CabDesignBoardSealEdgeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdesignboardsealid()) {
      set_cabdesignboardsealid(from.cabdesignboardsealid());
    }
    if (from.has_sealindex()) {
      set_sealindex(from.sealindex());
    }
    if (from.has_sealmatid()) {
      set_sealmatid(from.sealmatid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabDesignBoardSealEdgeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabDesignBoardSealEdgeInfo::CopyFrom(const JK_CabDesignBoardSealEdgeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabDesignBoardSealEdgeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void JK_CabDesignBoardSealEdgeInfo::Swap(JK_CabDesignBoardSealEdgeInfo* other) {
  if (other != this) {
    std::swap(cabdesignboardsealid_, other->cabdesignboardsealid_);
    std::swap(sealindex_, other->sealindex_);
    std::swap(sealmatid_, other->sealmatid_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabDesignBoardSealEdgeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabDesignBoardSealEdgeInfo_descriptor_;
  metadata.reflection = JK_CabDesignBoardSealEdgeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabDesignBoardSealInfo::kCabDesignBoardSealIDFieldNumber;
const int JK_CabDesignBoardSealInfo::kCabStructBoardIDFieldNumber;
const int JK_CabDesignBoardSealInfo::kCabStructIDFieldNumber;
const int JK_CabDesignBoardSealInfo::kCabDesignIDFieldNumber;
const int JK_CabDesignBoardSealInfo::kMaterialIDFieldNumber;
const int JK_CabDesignBoardSealInfo::kVerCodeFieldNumber;
const int JK_CabDesignBoardSealInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_CabDesignBoardSealInfo::JK_CabDesignBoardSealInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabDesignBoardSealInfo::InitAsDefaultInstance() {
}

JK_CabDesignBoardSealInfo::JK_CabDesignBoardSealInfo(const JK_CabDesignBoardSealInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabDesignBoardSealInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdesignboardsealid_ = 0;
  cabstructboardid_ = 0;
  cabstructid_ = 0;
  cabdesignid_ = 0;
  materialid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabDesignBoardSealInfo::~JK_CabDesignBoardSealInfo() {
  SharedDtor();
}

void JK_CabDesignBoardSealInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_CabDesignBoardSealInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabDesignBoardSealInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabDesignBoardSealInfo_descriptor_;
}

const JK_CabDesignBoardSealInfo& JK_CabDesignBoardSealInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabDesignBoardSealInfo* JK_CabDesignBoardSealInfo::default_instance_ = NULL;

JK_CabDesignBoardSealInfo* JK_CabDesignBoardSealInfo::New() const {
  return new JK_CabDesignBoardSealInfo;
}

void JK_CabDesignBoardSealInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdesignboardsealid_ = 0;
    cabstructboardid_ = 0;
    cabstructid_ = 0;
    cabdesignid_ = 0;
    materialid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabDesignBoardSealInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDesignBoardSealID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignboardsealid_)));
          set_has_cabdesignboardsealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabStructBoardID;
        break;
      }

      // required int32 CabStructBoardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardid_)));
          set_has_cabstructboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CabStructID;
        break;
      }

      // required int32 CabStructID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructid_)));
          set_has_cabstructid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CabDesignID;
        break;
      }

      // required int32 CabDesignID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignid_)));
          set_has_cabdesignid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabDesignBoardSealInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDesignBoardSealID = 1;
  if (has_cabdesignboardsealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdesignboardsealid(), output);
  }

  // required int32 CabStructBoardID = 2;
  if (has_cabstructboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabstructboardid(), output);
  }

  // required int32 CabStructID = 3;
  if (has_cabstructid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cabstructid(), output);
  }

  // required int32 CabDesignID = 4;
  if (has_cabdesignid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cabdesignid(), output);
  }

  // required int32 MaterialID = 5;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->materialid(), output);
  }

  // required int64 VerCode = 6;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->vercode(), output);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabDesignBoardSealInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDesignBoardSealID = 1;
  if (has_cabdesignboardsealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdesignboardsealid(), target);
  }

  // required int32 CabStructBoardID = 2;
  if (has_cabstructboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabstructboardid(), target);
  }

  // required int32 CabStructID = 3;
  if (has_cabstructid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cabstructid(), target);
  }

  // required int32 CabDesignID = 4;
  if (has_cabdesignid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cabdesignid(), target);
  }

  // required int32 MaterialID = 5;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->materialid(), target);
  }

  // required int64 VerCode = 6;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->vercode(), target);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabDesignBoardSealInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDesignBoardSealID = 1;
    if (has_cabdesignboardsealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignboardsealid());
    }

    // required int32 CabStructBoardID = 2;
    if (has_cabstructboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardid());
    }

    // required int32 CabStructID = 3;
    if (has_cabstructid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructid());
    }

    // required int32 CabDesignID = 4;
    if (has_cabdesignid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignid());
    }

    // required int32 MaterialID = 5;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required int64 VerCode = 6;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 7;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabDesignBoardSealInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabDesignBoardSealInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabDesignBoardSealInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabDesignBoardSealInfo::MergeFrom(const JK_CabDesignBoardSealInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdesignboardsealid()) {
      set_cabdesignboardsealid(from.cabdesignboardsealid());
    }
    if (from.has_cabstructboardid()) {
      set_cabstructboardid(from.cabstructboardid());
    }
    if (from.has_cabstructid()) {
      set_cabstructid(from.cabstructid());
    }
    if (from.has_cabdesignid()) {
      set_cabdesignid(from.cabdesignid());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabDesignBoardSealInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabDesignBoardSealInfo::CopyFrom(const JK_CabDesignBoardSealInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabDesignBoardSealInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void JK_CabDesignBoardSealInfo::Swap(JK_CabDesignBoardSealInfo* other) {
  if (other != this) {
    std::swap(cabdesignboardsealid_, other->cabdesignboardsealid_);
    std::swap(cabstructboardid_, other->cabstructboardid_);
    std::swap(cabstructid_, other->cabstructid_);
    std::swap(cabdesignid_, other->cabdesignid_);
    std::swap(materialid_, other->materialid_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabDesignBoardSealInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabDesignBoardSealInfo_descriptor_;
  metadata.reflection = JK_CabDesignBoardSealInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabDesignDoorRegionHandleInfo::kCabDesignDoorRegionHandleIDFieldNumber;
const int JK_CabDesignDoorRegionHandleInfo::kCabDesignDoorRegionIDFieldNumber;
const int JK_CabDesignDoorRegionHandleInfo::kXDockFieldNumber;
const int JK_CabDesignDoorRegionHandleInfo::kYDockFieldNumber;
const int JK_CabDesignDoorRegionHandleInfo::kZDockFieldNumber;
const int JK_CabDesignDoorRegionHandleInfo::kXOffsetFormulaFieldNumber;
const int JK_CabDesignDoorRegionHandleInfo::kYOffsetFormulaFieldNumber;
const int JK_CabDesignDoorRegionHandleInfo::kZOffsetFormulaFieldNumber;
const int JK_CabDesignDoorRegionHandleInfo::kVerCodeFieldNumber;
const int JK_CabDesignDoorRegionHandleInfo::kFactoryIDFieldNumber;
const int JK_CabDesignDoorRegionHandleInfo::kArcZFieldNumber;
const int JK_CabDesignDoorRegionHandleInfo::kHandleIDFieldNumber;
const int JK_CabDesignDoorRegionHandleInfo::kMatchTypeFieldNumber;
#endif  // !_MSC_VER

JK_CabDesignDoorRegionHandleInfo::JK_CabDesignDoorRegionHandleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabDesignDoorRegionHandleInfo::InitAsDefaultInstance() {
}

JK_CabDesignDoorRegionHandleInfo::JK_CabDesignDoorRegionHandleInfo(const JK_CabDesignDoorRegionHandleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabDesignDoorRegionHandleInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdesigndoorregionhandleid_ = 0;
  cabdesigndoorregionid_ = 0;
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  arcz_ = 0;
  handleid_ = 0;
  matchtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabDesignDoorRegionHandleInfo::~JK_CabDesignDoorRegionHandleInfo() {
  SharedDtor();
}

void JK_CabDesignDoorRegionHandleInfo::SharedDtor() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (this != default_instance_) {
  }
}

void JK_CabDesignDoorRegionHandleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabDesignDoorRegionHandleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabDesignDoorRegionHandleInfo_descriptor_;
}

const JK_CabDesignDoorRegionHandleInfo& JK_CabDesignDoorRegionHandleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabDesignDoorRegionHandleInfo* JK_CabDesignDoorRegionHandleInfo::default_instance_ = NULL;

JK_CabDesignDoorRegionHandleInfo* JK_CabDesignDoorRegionHandleInfo::New() const {
  return new JK_CabDesignDoorRegionHandleInfo;
}

void JK_CabDesignDoorRegionHandleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdesigndoorregionhandleid_ = 0;
    cabdesigndoorregionid_ = 0;
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    arcz_ = 0;
    handleid_ = 0;
    matchtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabDesignDoorRegionHandleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDesignDoorRegionHandleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesigndoorregionhandleid_)));
          set_has_cabdesigndoorregionhandleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabDesignDoorRegionID;
        break;
      }

      // required int32 CabDesignDoorRegionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignDoorRegionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesigndoorregionid_)));
          set_has_cabdesigndoorregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_ArcZ;
        break;
      }

      // required double ArcZ = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcz_)));
          set_has_arcz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_HandleID;
        break;
      }

      // required int32 HandleID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HandleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handleid_)));
          set_has_handleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_MatchType;
        break;
      }

      // required int32 MatchType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatchType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchtype_)));
          set_has_matchtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabDesignDoorRegionHandleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDesignDoorRegionHandleID = 1;
  if (has_cabdesigndoorregionhandleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdesigndoorregionhandleid(), output);
  }

  // required int32 CabDesignDoorRegionID = 2;
  if (has_cabdesigndoorregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabdesigndoorregionid(), output);
  }

  // required int32 XDock = 3;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->xdock(), output);
  }

  // required int32 YDock = 4;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ydock(), output);
  }

  // required int32 ZDock = 5;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zdock(), output);
  }

  // required string XOffsetFormula = 6;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 7;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 8;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->zoffsetformula(), output);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vercode(), output);
  }

  // required int32 FactoryID = 10;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->factoryid(), output);
  }

  // required double ArcZ = 11;
  if (has_arcz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->arcz(), output);
  }

  // required int32 HandleID = 12;
  if (has_handleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->handleid(), output);
  }

  // required int32 MatchType = 13;
  if (has_matchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->matchtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabDesignDoorRegionHandleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDesignDoorRegionHandleID = 1;
  if (has_cabdesigndoorregionhandleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdesigndoorregionhandleid(), target);
  }

  // required int32 CabDesignDoorRegionID = 2;
  if (has_cabdesigndoorregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabdesigndoorregionid(), target);
  }

  // required int32 XDock = 3;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->xdock(), target);
  }

  // required int32 YDock = 4;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ydock(), target);
  }

  // required int32 ZDock = 5;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zdock(), target);
  }

  // required string XOffsetFormula = 6;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 7;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 8;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->zoffsetformula(), target);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vercode(), target);
  }

  // required int32 FactoryID = 10;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->factoryid(), target);
  }

  // required double ArcZ = 11;
  if (has_arcz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->arcz(), target);
  }

  // required int32 HandleID = 12;
  if (has_handleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->handleid(), target);
  }

  // required int32 MatchType = 13;
  if (has_matchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->matchtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabDesignDoorRegionHandleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDesignDoorRegionHandleID = 1;
    if (has_cabdesigndoorregionhandleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesigndoorregionhandleid());
    }

    // required int32 CabDesignDoorRegionID = 2;
    if (has_cabdesigndoorregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesigndoorregionid());
    }

    // required int32 XDock = 3;
    if (has_xdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 4;
    if (has_ydock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 5;
    if (has_zdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // required string XOffsetFormula = 6;
    if (has_xoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

    // required string YOffsetFormula = 7;
    if (has_yoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

    // required string ZOffsetFormula = 8;
    if (has_zoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 VerCode = 9;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 10;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required double ArcZ = 11;
    if (has_arcz()) {
      total_size += 1 + 8;
    }

    // required int32 HandleID = 12;
    if (has_handleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handleid());
    }

    // required int32 MatchType = 13;
    if (has_matchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabDesignDoorRegionHandleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabDesignDoorRegionHandleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabDesignDoorRegionHandleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabDesignDoorRegionHandleInfo::MergeFrom(const JK_CabDesignDoorRegionHandleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdesigndoorregionhandleid()) {
      set_cabdesigndoorregionhandleid(from.cabdesigndoorregionhandleid());
    }
    if (from.has_cabdesigndoorregionid()) {
      set_cabdesigndoorregionid(from.cabdesigndoorregionid());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_arcz()) {
      set_arcz(from.arcz());
    }
    if (from.has_handleid()) {
      set_handleid(from.handleid());
    }
    if (from.has_matchtype()) {
      set_matchtype(from.matchtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabDesignDoorRegionHandleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabDesignDoorRegionHandleInfo::CopyFrom(const JK_CabDesignDoorRegionHandleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabDesignDoorRegionHandleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void JK_CabDesignDoorRegionHandleInfo::Swap(JK_CabDesignDoorRegionHandleInfo* other) {
  if (other != this) {
    std::swap(cabdesigndoorregionhandleid_, other->cabdesigndoorregionhandleid_);
    std::swap(cabdesigndoorregionid_, other->cabdesigndoorregionid_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(arcz_, other->arcz_);
    std::swap(handleid_, other->handleid_);
    std::swap(matchtype_, other->matchtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabDesignDoorRegionHandleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabDesignDoorRegionHandleInfo_descriptor_;
  metadata.reflection = JK_CabDesignDoorRegionHandleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabDesignDoorRegionInfo::kCabDesignDoorRegionIDFieldNumber;
const int JK_CabDesignDoorRegionInfo::kCabDesignIDFieldNumber;
const int JK_CabDesignDoorRegionInfo::kIsDelFieldNumber;
const int JK_CabDesignDoorRegionInfo::kIsGroupFieldNumber;
const int JK_CabDesignDoorRegionInfo::kXLenFieldNumber;
const int JK_CabDesignDoorRegionInfo::kYLenFieldNumber;
const int JK_CabDesignDoorRegionInfo::kIsCanResizeFieldNumber;
const int JK_CabDesignDoorRegionInfo::kMinXLenFieldNumber;
const int JK_CabDesignDoorRegionInfo::kMaxXLenFieldNumber;
const int JK_CabDesignDoorRegionInfo::kXLenStepFieldNumber;
const int JK_CabDesignDoorRegionInfo::kMinYLenFieldNumber;
const int JK_CabDesignDoorRegionInfo::kMaxYLenFieldNumber;
const int JK_CabDesignDoorRegionInfo::kYLenStepFieldNumber;
const int JK_CabDesignDoorRegionInfo::kDefaultMatIDFieldNumber;
const int JK_CabDesignDoorRegionInfo::kDefaultModelIDFieldNumber;
const int JK_CabDesignDoorRegionInfo::kVerCodeFieldNumber;
const int JK_CabDesignDoorRegionInfo::kFactoryIDFieldNumber;
const int JK_CabDesignDoorRegionInfo::kDefaultDoorIDFieldNumber;
const int JK_CabDesignDoorRegionInfo::kCabDesignDoorSystemIDFieldNumber;
const int JK_CabDesignDoorRegionInfo::kDoorSystemIDFieldNumber;
const int JK_CabDesignDoorRegionInfo::kIsUseDefaultSizeFieldNumber;
const int JK_CabDesignDoorRegionInfo::kIsUseCutFormulaFieldNumber;
const int JK_CabDesignDoorRegionInfo::kDoorRegionIDFieldNumber;
#endif  // !_MSC_VER

JK_CabDesignDoorRegionInfo::JK_CabDesignDoorRegionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabDesignDoorRegionInfo::InitAsDefaultInstance() {
}

JK_CabDesignDoorRegionInfo::JK_CabDesignDoorRegionInfo(const JK_CabDesignDoorRegionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabDesignDoorRegionInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdesigndoorregionid_ = 0;
  cabdesignid_ = 0;
  isdel_ = false;
  isgroup_ = false;
  xlen_ = 0;
  ylen_ = 0;
  iscanresize_ = false;
  minxlen_ = 0;
  maxxlen_ = 0;
  xlenstep_ = 0;
  minylen_ = 0;
  maxylen_ = 0;
  ylenstep_ = 0;
  defaultmatid_ = 0;
  defaultmodelid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  defaultdoorid_ = 0;
  cabdesigndoorsystemid_ = 0;
  doorsystemid_ = 0;
  isusedefaultsize_ = false;
  isusecutformula_ = false;
  doorregionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabDesignDoorRegionInfo::~JK_CabDesignDoorRegionInfo() {
  SharedDtor();
}

void JK_CabDesignDoorRegionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_CabDesignDoorRegionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabDesignDoorRegionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabDesignDoorRegionInfo_descriptor_;
}

const JK_CabDesignDoorRegionInfo& JK_CabDesignDoorRegionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabDesignDoorRegionInfo* JK_CabDesignDoorRegionInfo::default_instance_ = NULL;

JK_CabDesignDoorRegionInfo* JK_CabDesignDoorRegionInfo::New() const {
  return new JK_CabDesignDoorRegionInfo;
}

void JK_CabDesignDoorRegionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdesigndoorregionid_ = 0;
    cabdesignid_ = 0;
    isdel_ = false;
    isgroup_ = false;
    xlen_ = 0;
    ylen_ = 0;
    iscanresize_ = false;
    minxlen_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxxlen_ = 0;
    xlenstep_ = 0;
    minylen_ = 0;
    maxylen_ = 0;
    ylenstep_ = 0;
    defaultmatid_ = 0;
    defaultmodelid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    factoryid_ = 0;
    defaultdoorid_ = 0;
    cabdesigndoorsystemid_ = 0;
    doorsystemid_ = 0;
    isusedefaultsize_ = false;
    isusecutformula_ = false;
    doorregionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabDesignDoorRegionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDesignDoorRegionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesigndoorregionid_)));
          set_has_cabdesigndoorregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabDesignID;
        break;
      }

      // required int32 CabDesignID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignid_)));
          set_has_cabdesignid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsGroup;
        break;
      }

      // required bool IsGroup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgroup_)));
          set_has_isgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_XLen;
        break;
      }

      // required double XLen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_YLen;
        break;
      }

      // required double YLen = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_IsCanResize;
        break;
      }

      // required bool IsCanResize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanResize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscanresize_)));
          set_has_iscanresize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_MinXLen;
        break;
      }

      // required double MinXLen = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minxlen_)));
          set_has_minxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_MaxXLen;
        break;
      }

      // required double MaxXLen = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxxlen_)));
          set_has_maxxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_XLenStep;
        break;
      }

      // required double XLenStep = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLenStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlenstep_)));
          set_has_xlenstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_MinYLen;
        break;
      }

      // required double MinYLen = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minylen_)));
          set_has_minylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_MaxYLen;
        break;
      }

      // required double MaxYLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxylen_)));
          set_has_maxylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_YLenStep;
        break;
      }

      // required double YLenStep = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLenStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylenstep_)));
          set_has_ylenstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_DefaultMatID;
        break;
      }

      // required int32 DefaultMatID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefaultMatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defaultmatid_)));
          set_has_defaultmatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_DefaultModelID;
        break;
      }

      // required int32 DefaultModelID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefaultModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defaultmodelid_)));
          set_has_defaultmodelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_DefaultDoorID;
        break;
      }

      // required int32 DefaultDoorID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefaultDoorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defaultdoorid_)));
          set_has_defaultdoorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_CabDesignDoorSystemID;
        break;
      }

      // required int32 CabDesignDoorSystemID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignDoorSystemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesigndoorsystemid_)));
          set_has_cabdesigndoorsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_DoorSystemID;
        break;
      }

      // required int32 DoorSystemID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorSystemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemid_)));
          set_has_doorsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_IsUseDefaultSize;
        break;
      }

      // required bool IsUseDefaultSize = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUseDefaultSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusedefaultsize_)));
          set_has_isusedefaultsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_IsUseCutFormula;
        break;
      }

      // required bool IsUseCutFormula = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUseCutFormula:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusecutformula_)));
          set_has_isusecutformula();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_DoorRegionID;
        break;
      }

      // required int32 DoorRegionID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorRegionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorregionid_)));
          set_has_doorregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabDesignDoorRegionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDesignDoorRegionID = 1;
  if (has_cabdesigndoorregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdesigndoorregionid(), output);
  }

  // required int32 CabDesignID = 2;
  if (has_cabdesignid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabdesignid(), output);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // required bool IsGroup = 4;
  if (has_isgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isgroup(), output);
  }

  // required double XLen = 5;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->xlen(), output);
  }

  // required double YLen = 6;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ylen(), output);
  }

  // required bool IsCanResize = 7;
  if (has_iscanresize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->iscanresize(), output);
  }

  // required double MinXLen = 8;
  if (has_minxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->minxlen(), output);
  }

  // required double MaxXLen = 9;
  if (has_maxxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->maxxlen(), output);
  }

  // required double XLenStep = 10;
  if (has_xlenstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->xlenstep(), output);
  }

  // required double MinYLen = 11;
  if (has_minylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->minylen(), output);
  }

  // required double MaxYLen = 12;
  if (has_maxylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->maxylen(), output);
  }

  // required double YLenStep = 13;
  if (has_ylenstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->ylenstep(), output);
  }

  // required int32 DefaultMatID = 14;
  if (has_defaultmatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->defaultmatid(), output);
  }

  // required int32 DefaultModelID = 15;
  if (has_defaultmodelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->defaultmodelid(), output);
  }

  // required int64 VerCode = 16;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->vercode(), output);
  }

  // required int32 FactoryID = 17;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->factoryid(), output);
  }

  // required int32 DefaultDoorID = 18;
  if (has_defaultdoorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->defaultdoorid(), output);
  }

  // required int32 CabDesignDoorSystemID = 19;
  if (has_cabdesigndoorsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->cabdesigndoorsystemid(), output);
  }

  // required int32 DoorSystemID = 20;
  if (has_doorsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->doorsystemid(), output);
  }

  // required bool IsUseDefaultSize = 21;
  if (has_isusedefaultsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->isusedefaultsize(), output);
  }

  // required bool IsUseCutFormula = 22;
  if (has_isusecutformula()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->isusecutformula(), output);
  }

  // required int32 DoorRegionID = 23;
  if (has_doorregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->doorregionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabDesignDoorRegionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDesignDoorRegionID = 1;
  if (has_cabdesigndoorregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdesigndoorregionid(), target);
  }

  // required int32 CabDesignID = 2;
  if (has_cabdesignid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabdesignid(), target);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // required bool IsGroup = 4;
  if (has_isgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isgroup(), target);
  }

  // required double XLen = 5;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->xlen(), target);
  }

  // required double YLen = 6;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ylen(), target);
  }

  // required bool IsCanResize = 7;
  if (has_iscanresize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->iscanresize(), target);
  }

  // required double MinXLen = 8;
  if (has_minxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->minxlen(), target);
  }

  // required double MaxXLen = 9;
  if (has_maxxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->maxxlen(), target);
  }

  // required double XLenStep = 10;
  if (has_xlenstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->xlenstep(), target);
  }

  // required double MinYLen = 11;
  if (has_minylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->minylen(), target);
  }

  // required double MaxYLen = 12;
  if (has_maxylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->maxylen(), target);
  }

  // required double YLenStep = 13;
  if (has_ylenstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->ylenstep(), target);
  }

  // required int32 DefaultMatID = 14;
  if (has_defaultmatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->defaultmatid(), target);
  }

  // required int32 DefaultModelID = 15;
  if (has_defaultmodelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->defaultmodelid(), target);
  }

  // required int64 VerCode = 16;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->vercode(), target);
  }

  // required int32 FactoryID = 17;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->factoryid(), target);
  }

  // required int32 DefaultDoorID = 18;
  if (has_defaultdoorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->defaultdoorid(), target);
  }

  // required int32 CabDesignDoorSystemID = 19;
  if (has_cabdesigndoorsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->cabdesigndoorsystemid(), target);
  }

  // required int32 DoorSystemID = 20;
  if (has_doorsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->doorsystemid(), target);
  }

  // required bool IsUseDefaultSize = 21;
  if (has_isusedefaultsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->isusedefaultsize(), target);
  }

  // required bool IsUseCutFormula = 22;
  if (has_isusecutformula()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->isusecutformula(), target);
  }

  // required int32 DoorRegionID = 23;
  if (has_doorregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->doorregionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabDesignDoorRegionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDesignDoorRegionID = 1;
    if (has_cabdesigndoorregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesigndoorregionid());
    }

    // required int32 CabDesignID = 2;
    if (has_cabdesignid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignid());
    }

    // required bool IsDel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsGroup = 4;
    if (has_isgroup()) {
      total_size += 1 + 1;
    }

    // required double XLen = 5;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 6;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required bool IsCanResize = 7;
    if (has_iscanresize()) {
      total_size += 1 + 1;
    }

    // required double MinXLen = 8;
    if (has_minxlen()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double MaxXLen = 9;
    if (has_maxxlen()) {
      total_size += 1 + 8;
    }

    // required double XLenStep = 10;
    if (has_xlenstep()) {
      total_size += 1 + 8;
    }

    // required double MinYLen = 11;
    if (has_minylen()) {
      total_size += 1 + 8;
    }

    // required double MaxYLen = 12;
    if (has_maxylen()) {
      total_size += 1 + 8;
    }

    // required double YLenStep = 13;
    if (has_ylenstep()) {
      total_size += 1 + 8;
    }

    // required int32 DefaultMatID = 14;
    if (has_defaultmatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defaultmatid());
    }

    // required int32 DefaultModelID = 15;
    if (has_defaultmodelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defaultmodelid());
    }

    // required int64 VerCode = 16;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 FactoryID = 17;
    if (has_factoryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 DefaultDoorID = 18;
    if (has_defaultdoorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defaultdoorid());
    }

    // required int32 CabDesignDoorSystemID = 19;
    if (has_cabdesigndoorsystemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesigndoorsystemid());
    }

    // required int32 DoorSystemID = 20;
    if (has_doorsystemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemid());
    }

    // required bool IsUseDefaultSize = 21;
    if (has_isusedefaultsize()) {
      total_size += 2 + 1;
    }

    // required bool IsUseCutFormula = 22;
    if (has_isusecutformula()) {
      total_size += 2 + 1;
    }

    // required int32 DoorRegionID = 23;
    if (has_doorregionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorregionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabDesignDoorRegionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabDesignDoorRegionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabDesignDoorRegionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabDesignDoorRegionInfo::MergeFrom(const JK_CabDesignDoorRegionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdesigndoorregionid()) {
      set_cabdesigndoorregionid(from.cabdesigndoorregionid());
    }
    if (from.has_cabdesignid()) {
      set_cabdesignid(from.cabdesignid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isgroup()) {
      set_isgroup(from.isgroup());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_iscanresize()) {
      set_iscanresize(from.iscanresize());
    }
    if (from.has_minxlen()) {
      set_minxlen(from.minxlen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxxlen()) {
      set_maxxlen(from.maxxlen());
    }
    if (from.has_xlenstep()) {
      set_xlenstep(from.xlenstep());
    }
    if (from.has_minylen()) {
      set_minylen(from.minylen());
    }
    if (from.has_maxylen()) {
      set_maxylen(from.maxylen());
    }
    if (from.has_ylenstep()) {
      set_ylenstep(from.ylenstep());
    }
    if (from.has_defaultmatid()) {
      set_defaultmatid(from.defaultmatid());
    }
    if (from.has_defaultmodelid()) {
      set_defaultmodelid(from.defaultmodelid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_defaultdoorid()) {
      set_defaultdoorid(from.defaultdoorid());
    }
    if (from.has_cabdesigndoorsystemid()) {
      set_cabdesigndoorsystemid(from.cabdesigndoorsystemid());
    }
    if (from.has_doorsystemid()) {
      set_doorsystemid(from.doorsystemid());
    }
    if (from.has_isusedefaultsize()) {
      set_isusedefaultsize(from.isusedefaultsize());
    }
    if (from.has_isusecutformula()) {
      set_isusecutformula(from.isusecutformula());
    }
    if (from.has_doorregionid()) {
      set_doorregionid(from.doorregionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabDesignDoorRegionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabDesignDoorRegionInfo::CopyFrom(const JK_CabDesignDoorRegionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabDesignDoorRegionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;

  return true;
}

void JK_CabDesignDoorRegionInfo::Swap(JK_CabDesignDoorRegionInfo* other) {
  if (other != this) {
    std::swap(cabdesigndoorregionid_, other->cabdesigndoorregionid_);
    std::swap(cabdesignid_, other->cabdesignid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isgroup_, other->isgroup_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(iscanresize_, other->iscanresize_);
    std::swap(minxlen_, other->minxlen_);
    std::swap(maxxlen_, other->maxxlen_);
    std::swap(xlenstep_, other->xlenstep_);
    std::swap(minylen_, other->minylen_);
    std::swap(maxylen_, other->maxylen_);
    std::swap(ylenstep_, other->ylenstep_);
    std::swap(defaultmatid_, other->defaultmatid_);
    std::swap(defaultmodelid_, other->defaultmodelid_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(defaultdoorid_, other->defaultdoorid_);
    std::swap(cabdesigndoorsystemid_, other->cabdesigndoorsystemid_);
    std::swap(doorsystemid_, other->doorsystemid_);
    std::swap(isusedefaultsize_, other->isusedefaultsize_);
    std::swap(isusecutformula_, other->isusecutformula_);
    std::swap(doorregionid_, other->doorregionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabDesignDoorRegionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabDesignDoorRegionInfo_descriptor_;
  metadata.reflection = JK_CabDesignDoorRegionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabDesignDoorSystemInfo::kCabDesignDoorSystemIDFieldNumber;
const int JK_CabDesignDoorSystemInfo::kCabDesignIDFieldNumber;
const int JK_CabDesignDoorSystemInfo::kIsDelFieldNumber;
const int JK_CabDesignDoorSystemInfo::kVerCodeFieldNumber;
const int JK_CabDesignDoorSystemInfo::kFactoryIDFieldNumber;
const int JK_CabDesignDoorSystemInfo::kDoorSystemIDFieldNumber;
const int JK_CabDesignDoorSystemInfo::kInstallFaceTypeFieldNumber;
const int JK_CabDesignDoorSystemInfo::kXAdjustLenFieldNumber;
const int JK_CabDesignDoorSystemInfo::kYAdjustLenFieldNumber;
const int JK_CabDesignDoorSystemInfo::kXDockFieldNumber;
const int JK_CabDesignDoorSystemInfo::kYDockFieldNumber;
const int JK_CabDesignDoorSystemInfo::kZDockFieldNumber;
const int JK_CabDesignDoorSystemInfo::kXOffsetFormulaFieldNumber;
const int JK_CabDesignDoorSystemInfo::kYOffsetFormulaFieldNumber;
const int JK_CabDesignDoorSystemInfo::kZOffsetFormulaFieldNumber;
const int JK_CabDesignDoorSystemInfo::kCreatorIDFieldNumber;
const int JK_CabDesignDoorSystemInfo::kUpdaterIDFieldNumber;
const int JK_CabDesignDoorSystemInfo::kCreateTimeFieldNumber;
const int JK_CabDesignDoorSystemInfo::kUpdateTimeFieldNumber;
const int JK_CabDesignDoorSystemInfo::kIsCanDelFieldNumber;
const int JK_CabDesignDoorSystemInfo::kXFormulaFieldNumber;
const int JK_CabDesignDoorSystemInfo::kYFormulaFieldNumber;
const int JK_CabDesignDoorSystemInfo::kZLenFieldNumber;
#endif  // !_MSC_VER

JK_CabDesignDoorSystemInfo::JK_CabDesignDoorSystemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabDesignDoorSystemInfo::InitAsDefaultInstance() {
}

JK_CabDesignDoorSystemInfo::JK_CabDesignDoorSystemInfo(const JK_CabDesignDoorSystemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabDesignDoorSystemInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdesigndoorsystemid_ = 0;
  cabdesignid_ = 0;
  isdel_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  doorsystemid_ = 0;
  installfacetype_ = 0;
  xadjustlen_ = 0;
  yadjustlen_ = 0;
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  iscandel_ = false;
  xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zlen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabDesignDoorSystemInfo::~JK_CabDesignDoorSystemInfo() {
  SharedDtor();
}

void JK_CabDesignDoorSystemInfo::SharedDtor() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (this != default_instance_) {
  }
}

void JK_CabDesignDoorSystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabDesignDoorSystemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabDesignDoorSystemInfo_descriptor_;
}

const JK_CabDesignDoorSystemInfo& JK_CabDesignDoorSystemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabDesignDoorSystemInfo* JK_CabDesignDoorSystemInfo::default_instance_ = NULL;

JK_CabDesignDoorSystemInfo* JK_CabDesignDoorSystemInfo::New() const {
  return new JK_CabDesignDoorSystemInfo;
}

void JK_CabDesignDoorSystemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdesigndoorsystemid_ = 0;
    cabdesignid_ = 0;
    isdel_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    doorsystemid_ = 0;
    installfacetype_ = 0;
    xadjustlen_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    yadjustlen_ = 0;
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
    creatorid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    iscandel_ = false;
    if (has_xformula()) {
      if (xformula_ != &::google::protobuf::internal::kEmptyString) {
        xformula_->clear();
      }
    }
    if (has_yformula()) {
      if (yformula_ != &::google::protobuf::internal::kEmptyString) {
        yformula_->clear();
      }
    }
    zlen_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabDesignDoorSystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDesignDoorSystemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesigndoorsystemid_)));
          set_has_cabdesigndoorsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabDesignID;
        break;
      }

      // required int32 CabDesignID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignid_)));
          set_has_cabdesignid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DoorSystemID;
        break;
      }

      // required int32 DoorSystemID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorSystemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemid_)));
          set_has_doorsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_InstallFaceType;
        break;
      }

      // required int32 InstallFaceType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstallFaceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &installfacetype_)));
          set_has_installfacetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_XAdjustLen;
        break;
      }

      // required double XAdjustLen = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XAdjustLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xadjustlen_)));
          set_has_xadjustlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_YAdjustLen;
        break;
      }

      // required double YAdjustLen = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YAdjustLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yadjustlen_)));
          set_has_yadjustlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_IsCanDel;
        break;
      }

      // required bool IsCanDel = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscandel_)));
          set_has_iscandel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_XFormula;
        break;
      }

      // required string XFormula = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xformula().data(), this->xformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_YFormula;
        break;
      }

      // required string YFormula = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yformula().data(), this->yformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabDesignDoorSystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDesignDoorSystemID = 1;
  if (has_cabdesigndoorsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdesigndoorsystemid(), output);
  }

  // required int32 CabDesignID = 2;
  if (has_cabdesignid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabdesignid(), output);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  // required int32 DoorSystemID = 6;
  if (has_doorsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->doorsystemid(), output);
  }

  // required int32 InstallFaceType = 7;
  if (has_installfacetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->installfacetype(), output);
  }

  // required double XAdjustLen = 8;
  if (has_xadjustlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->xadjustlen(), output);
  }

  // required double YAdjustLen = 9;
  if (has_yadjustlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->yadjustlen(), output);
  }

  // required int32 XDock = 10;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->xdock(), output);
  }

  // required int32 YDock = 11;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ydock(), output);
  }

  // required int32 ZDock = 12;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->zdock(), output);
  }

  // required string XOffsetFormula = 13;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 14;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 15;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->zoffsetformula(), output);
  }

  // required int32 CreatorID = 16;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->creatorid(), output);
  }

  // required int32 UpdaterID = 17;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->updaterid(), output);
  }

  // required int64 CreateTime = 18;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->createtime(), output);
  }

  // required int64 UpdateTime = 19;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->updatetime(), output);
  }

  // required bool IsCanDel = 20;
  if (has_iscandel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->iscandel(), output);
  }

  // required string XFormula = 21;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->xformula(), output);
  }

  // required string YFormula = 22;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->yformula(), output);
  }

  // required double ZLen = 23;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->zlen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabDesignDoorSystemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDesignDoorSystemID = 1;
  if (has_cabdesigndoorsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdesigndoorsystemid(), target);
  }

  // required int32 CabDesignID = 2;
  if (has_cabdesignid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabdesignid(), target);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  // required int32 DoorSystemID = 6;
  if (has_doorsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->doorsystemid(), target);
  }

  // required int32 InstallFaceType = 7;
  if (has_installfacetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->installfacetype(), target);
  }

  // required double XAdjustLen = 8;
  if (has_xadjustlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->xadjustlen(), target);
  }

  // required double YAdjustLen = 9;
  if (has_yadjustlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->yadjustlen(), target);
  }

  // required int32 XDock = 10;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->xdock(), target);
  }

  // required int32 YDock = 11;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ydock(), target);
  }

  // required int32 ZDock = 12;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->zdock(), target);
  }

  // required string XOffsetFormula = 13;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 14;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 15;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->zoffsetformula(), target);
  }

  // required int32 CreatorID = 16;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->creatorid(), target);
  }

  // required int32 UpdaterID = 17;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->updaterid(), target);
  }

  // required int64 CreateTime = 18;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->createtime(), target);
  }

  // required int64 UpdateTime = 19;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->updatetime(), target);
  }

  // required bool IsCanDel = 20;
  if (has_iscandel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->iscandel(), target);
  }

  // required string XFormula = 21;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->xformula(), target);
  }

  // required string YFormula = 22;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->yformula(), target);
  }

  // required double ZLen = 23;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->zlen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabDesignDoorSystemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDesignDoorSystemID = 1;
    if (has_cabdesigndoorsystemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesigndoorsystemid());
    }

    // required int32 CabDesignID = 2;
    if (has_cabdesignid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignid());
    }

    // required bool IsDel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 DoorSystemID = 6;
    if (has_doorsystemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemid());
    }

    // required int32 InstallFaceType = 7;
    if (has_installfacetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->installfacetype());
    }

    // required double XAdjustLen = 8;
    if (has_xadjustlen()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double YAdjustLen = 9;
    if (has_yadjustlen()) {
      total_size += 1 + 8;
    }

    // required int32 XDock = 10;
    if (has_xdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 11;
    if (has_ydock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 12;
    if (has_zdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // required string XOffsetFormula = 13;
    if (has_xoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

    // required string YOffsetFormula = 14;
    if (has_yoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

    // required string ZOffsetFormula = 15;
    if (has_zoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

    // required int32 CreatorID = 16;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 UpdaterID = 17;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 18;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 19;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required bool IsCanDel = 20;
    if (has_iscandel()) {
      total_size += 2 + 1;
    }

    // required string XFormula = 21;
    if (has_xformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xformula());
    }

    // required string YFormula = 22;
    if (has_yformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yformula());
    }

    // required double ZLen = 23;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabDesignDoorSystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabDesignDoorSystemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabDesignDoorSystemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabDesignDoorSystemInfo::MergeFrom(const JK_CabDesignDoorSystemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdesigndoorsystemid()) {
      set_cabdesigndoorsystemid(from.cabdesigndoorsystemid());
    }
    if (from.has_cabdesignid()) {
      set_cabdesignid(from.cabdesignid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_doorsystemid()) {
      set_doorsystemid(from.doorsystemid());
    }
    if (from.has_installfacetype()) {
      set_installfacetype(from.installfacetype());
    }
    if (from.has_xadjustlen()) {
      set_xadjustlen(from.xadjustlen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_yadjustlen()) {
      set_yadjustlen(from.yadjustlen());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_iscandel()) {
      set_iscandel(from.iscandel());
    }
    if (from.has_xformula()) {
      set_xformula(from.xformula());
    }
    if (from.has_yformula()) {
      set_yformula(from.yformula());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabDesignDoorSystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabDesignDoorSystemInfo::CopyFrom(const JK_CabDesignDoorSystemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabDesignDoorSystemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;

  return true;
}

void JK_CabDesignDoorSystemInfo::Swap(JK_CabDesignDoorSystemInfo* other) {
  if (other != this) {
    std::swap(cabdesigndoorsystemid_, other->cabdesigndoorsystemid_);
    std::swap(cabdesignid_, other->cabdesignid_);
    std::swap(isdel_, other->isdel_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(doorsystemid_, other->doorsystemid_);
    std::swap(installfacetype_, other->installfacetype_);
    std::swap(xadjustlen_, other->xadjustlen_);
    std::swap(yadjustlen_, other->yadjustlen_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(iscandel_, other->iscandel_);
    std::swap(xformula_, other->xformula_);
    std::swap(yformula_, other->yformula_);
    std::swap(zlen_, other->zlen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabDesignDoorSystemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabDesignDoorSystemInfo_descriptor_;
  metadata.reflection = JK_CabDesignDoorSystemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabDesignFNFittingInfo::kCabDesignFNFittingIDFieldNumber;
const int JK_CabDesignFNFittingInfo::kContainerIDFieldNumber;
const int JK_CabDesignFNFittingInfo::kContainerGTypeIDFieldNumber;
const int JK_CabDesignFNFittingInfo::kIsCanDelFieldNumber;
const int JK_CabDesignFNFittingInfo::kXFormulaFieldNumber;
const int JK_CabDesignFNFittingInfo::kYFormulaFieldNumber;
const int JK_CabDesignFNFittingInfo::kZFormulaFieldNumber;
const int JK_CabDesignFNFittingInfo::kXDockFieldNumber;
const int JK_CabDesignFNFittingInfo::kYDockFieldNumber;
const int JK_CabDesignFNFittingInfo::kZDockFieldNumber;
const int JK_CabDesignFNFittingInfo::kXOffsetFormulaFieldNumber;
const int JK_CabDesignFNFittingInfo::kYOffsetFormulaFieldNumber;
const int JK_CabDesignFNFittingInfo::kZOffsetFormulaFieldNumber;
const int JK_CabDesignFNFittingInfo::kVerCodeFieldNumber;
const int JK_CabDesignFNFittingInfo::kFactoryIDFieldNumber;
const int JK_CabDesignFNFittingInfo::kIsDelFieldNumber;
const int JK_CabDesignFNFittingInfo::kCreatorIDFieldNumber;
const int JK_CabDesignFNFittingInfo::kUpdaterIDFieldNumber;
const int JK_CabDesignFNFittingInfo::kCreateTimeFieldNumber;
const int JK_CabDesignFNFittingInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_CabDesignFNFittingInfo::JK_CabDesignFNFittingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabDesignFNFittingInfo::InitAsDefaultInstance() {
}

JK_CabDesignFNFittingInfo::JK_CabDesignFNFittingInfo(const JK_CabDesignFNFittingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabDesignFNFittingInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdesignfnfittingid_ = 0;
  containerid_ = 0;
  containergtypeid_ = 0;
  iscandel_ = false;
  xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  isdel_ = false;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabDesignFNFittingInfo::~JK_CabDesignFNFittingInfo() {
  SharedDtor();
}

void JK_CabDesignFNFittingInfo::SharedDtor() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (zformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zformula_;
  }
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (this != default_instance_) {
  }
}

void JK_CabDesignFNFittingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabDesignFNFittingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabDesignFNFittingInfo_descriptor_;
}

const JK_CabDesignFNFittingInfo& JK_CabDesignFNFittingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabDesignFNFittingInfo* JK_CabDesignFNFittingInfo::default_instance_ = NULL;

JK_CabDesignFNFittingInfo* JK_CabDesignFNFittingInfo::New() const {
  return new JK_CabDesignFNFittingInfo;
}

void JK_CabDesignFNFittingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdesignfnfittingid_ = 0;
    containerid_ = 0;
    containergtypeid_ = 0;
    iscandel_ = false;
    if (has_xformula()) {
      if (xformula_ != &::google::protobuf::internal::kEmptyString) {
        xformula_->clear();
      }
    }
    if (has_yformula()) {
      if (yformula_ != &::google::protobuf::internal::kEmptyString) {
        yformula_->clear();
      }
    }
    if (has_zformula()) {
      if (zformula_ != &::google::protobuf::internal::kEmptyString) {
        zformula_->clear();
      }
    }
    xdock_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ydock_ = 0;
    zdock_ = 0;
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    isdel_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabDesignFNFittingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDesignFNFittingID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignfnfittingid_)));
          set_has_cabdesignfnfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ContainerID;
        break;
      }

      // required int32 ContainerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ContainerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &containerid_)));
          set_has_containerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ContainerGTypeID;
        break;
      }

      // required int32 ContainerGTypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ContainerGTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &containergtypeid_)));
          set_has_containergtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsCanDel;
        break;
      }

      // required bool IsCanDel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscandel_)));
          set_has_iscandel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_XFormula;
        break;
      }

      // required string XFormula = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xformula().data(), this->xformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_YFormula;
        break;
      }

      // required string YFormula = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yformula().data(), this->yformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ZFormula;
        break;
      }

      // required string ZFormula = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zformula().data(), this->zformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabDesignFNFittingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDesignFNFittingID = 1;
  if (has_cabdesignfnfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdesignfnfittingid(), output);
  }

  // required int32 ContainerID = 2;
  if (has_containerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->containerid(), output);
  }

  // required int32 ContainerGTypeID = 3;
  if (has_containergtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->containergtypeid(), output);
  }

  // required bool IsCanDel = 4;
  if (has_iscandel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->iscandel(), output);
  }

  // required string XFormula = 5;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->xformula(), output);
  }

  // required string YFormula = 6;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->yformula(), output);
  }

  // required string ZFormula = 7;
  if (has_zformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zformula().data(), this->zformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->zformula(), output);
  }

  // required int32 XDock = 8;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->xdock(), output);
  }

  // required int32 YDock = 9;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ydock(), output);
  }

  // required int32 ZDock = 10;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->zdock(), output);
  }

  // required string XOffsetFormula = 11;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 12;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 13;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->zoffsetformula(), output);
  }

  // required int64 VerCode = 14;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->vercode(), output);
  }

  // required int32 FactoryID = 15;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->factoryid(), output);
  }

  // required bool IsDel = 16;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isdel(), output);
  }

  // required int32 CreatorID = 17;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->creatorid(), output);
  }

  // required int32 UpdaterID = 18;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->updaterid(), output);
  }

  // required int64 CreateTime = 19;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->createtime(), output);
  }

  // required int64 UpdateTime = 20;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabDesignFNFittingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDesignFNFittingID = 1;
  if (has_cabdesignfnfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdesignfnfittingid(), target);
  }

  // required int32 ContainerID = 2;
  if (has_containerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->containerid(), target);
  }

  // required int32 ContainerGTypeID = 3;
  if (has_containergtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->containergtypeid(), target);
  }

  // required bool IsCanDel = 4;
  if (has_iscandel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->iscandel(), target);
  }

  // required string XFormula = 5;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->xformula(), target);
  }

  // required string YFormula = 6;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->yformula(), target);
  }

  // required string ZFormula = 7;
  if (has_zformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zformula().data(), this->zformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->zformula(), target);
  }

  // required int32 XDock = 8;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->xdock(), target);
  }

  // required int32 YDock = 9;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ydock(), target);
  }

  // required int32 ZDock = 10;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->zdock(), target);
  }

  // required string XOffsetFormula = 11;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 12;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 13;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->zoffsetformula(), target);
  }

  // required int64 VerCode = 14;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->vercode(), target);
  }

  // required int32 FactoryID = 15;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->factoryid(), target);
  }

  // required bool IsDel = 16;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isdel(), target);
  }

  // required int32 CreatorID = 17;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->creatorid(), target);
  }

  // required int32 UpdaterID = 18;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->updaterid(), target);
  }

  // required int64 CreateTime = 19;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->createtime(), target);
  }

  // required int64 UpdateTime = 20;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabDesignFNFittingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDesignFNFittingID = 1;
    if (has_cabdesignfnfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignfnfittingid());
    }

    // required int32 ContainerID = 2;
    if (has_containerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->containerid());
    }

    // required int32 ContainerGTypeID = 3;
    if (has_containergtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->containergtypeid());
    }

    // required bool IsCanDel = 4;
    if (has_iscandel()) {
      total_size += 1 + 1;
    }

    // required string XFormula = 5;
    if (has_xformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xformula());
    }

    // required string YFormula = 6;
    if (has_yformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yformula());
    }

    // required string ZFormula = 7;
    if (has_zformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zformula());
    }

    // required int32 XDock = 8;
    if (has_xdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 YDock = 9;
    if (has_ydock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 10;
    if (has_zdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // required string XOffsetFormula = 11;
    if (has_xoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

    // required string YOffsetFormula = 12;
    if (has_yoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

    // required string ZOffsetFormula = 13;
    if (has_zoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

    // required int64 VerCode = 14;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 15;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required bool IsDel = 16;
    if (has_isdel()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 CreatorID = 17;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 18;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 19;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 20;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabDesignFNFittingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabDesignFNFittingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabDesignFNFittingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabDesignFNFittingInfo::MergeFrom(const JK_CabDesignFNFittingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdesignfnfittingid()) {
      set_cabdesignfnfittingid(from.cabdesignfnfittingid());
    }
    if (from.has_containerid()) {
      set_containerid(from.containerid());
    }
    if (from.has_containergtypeid()) {
      set_containergtypeid(from.containergtypeid());
    }
    if (from.has_iscandel()) {
      set_iscandel(from.iscandel());
    }
    if (from.has_xformula()) {
      set_xformula(from.xformula());
    }
    if (from.has_yformula()) {
      set_yformula(from.yformula());
    }
    if (from.has_zformula()) {
      set_zformula(from.zformula());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabDesignFNFittingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabDesignFNFittingInfo::CopyFrom(const JK_CabDesignFNFittingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabDesignFNFittingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000fffff) != 0x000fffff) return false;

  return true;
}

void JK_CabDesignFNFittingInfo::Swap(JK_CabDesignFNFittingInfo* other) {
  if (other != this) {
    std::swap(cabdesignfnfittingid_, other->cabdesignfnfittingid_);
    std::swap(containerid_, other->containerid_);
    std::swap(containergtypeid_, other->containergtypeid_);
    std::swap(iscandel_, other->iscandel_);
    std::swap(xformula_, other->xformula_);
    std::swap(yformula_, other->yformula_);
    std::swap(zformula_, other->zformula_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(isdel_, other->isdel_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabDesignFNFittingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabDesignFNFittingInfo_descriptor_;
  metadata.reflection = JK_CabDesignFNFittingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabDesignFNFittingMapInfo::kFNFittingIDFieldNumber;
const int JK_CabDesignFNFittingMapInfo::kCabDesignFNFittingIDFieldNumber;
const int JK_CabDesignFNFittingMapInfo::kIsDefaultFieldNumber;
const int JK_CabDesignFNFittingMapInfo::kFNTypeFieldNumber;
const int JK_CabDesignFNFittingMapInfo::kVerCodeFieldNumber;
const int JK_CabDesignFNFittingMapInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_CabDesignFNFittingMapInfo::JK_CabDesignFNFittingMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabDesignFNFittingMapInfo::InitAsDefaultInstance() {
}

JK_CabDesignFNFittingMapInfo::JK_CabDesignFNFittingMapInfo(const JK_CabDesignFNFittingMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabDesignFNFittingMapInfo::SharedCtor() {
  _cached_size_ = 0;
  fnfittingid_ = 0;
  cabdesignfnfittingid_ = 0;
  isdefault_ = false;
  fntype_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabDesignFNFittingMapInfo::~JK_CabDesignFNFittingMapInfo() {
  SharedDtor();
}

void JK_CabDesignFNFittingMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_CabDesignFNFittingMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabDesignFNFittingMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabDesignFNFittingMapInfo_descriptor_;
}

const JK_CabDesignFNFittingMapInfo& JK_CabDesignFNFittingMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabDesignFNFittingMapInfo* JK_CabDesignFNFittingMapInfo::default_instance_ = NULL;

JK_CabDesignFNFittingMapInfo* JK_CabDesignFNFittingMapInfo::New() const {
  return new JK_CabDesignFNFittingMapInfo;
}

void JK_CabDesignFNFittingMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fnfittingid_ = 0;
    cabdesignfnfittingid_ = 0;
    isdefault_ = false;
    fntype_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabDesignFNFittingMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FNFittingID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingid_)));
          set_has_fnfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabDesignFNFittingID;
        break;
      }

      // required int32 CabDesignFNFittingID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabDesignFNFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignfnfittingid_)));
          set_has_cabdesignfnfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FNType;
        break;
      }

      // required int32 FNType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FNType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fntype_)));
          set_has_fntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabDesignFNFittingMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FNFittingID = 1;
  if (has_fnfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fnfittingid(), output);
  }

  // required int32 CabDesignFNFittingID = 2;
  if (has_cabdesignfnfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabdesignfnfittingid(), output);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdefault(), output);
  }

  // required int32 FNType = 4;
  if (has_fntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fntype(), output);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->vercode(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabDesignFNFittingMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FNFittingID = 1;
  if (has_fnfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fnfittingid(), target);
  }

  // required int32 CabDesignFNFittingID = 2;
  if (has_cabdesignfnfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabdesignfnfittingid(), target);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdefault(), target);
  }

  // required int32 FNType = 4;
  if (has_fntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fntype(), target);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->vercode(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabDesignFNFittingMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FNFittingID = 1;
    if (has_fnfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingid());
    }

    // required int32 CabDesignFNFittingID = 2;
    if (has_cabdesignfnfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignfnfittingid());
    }

    // required bool IsDefault = 3;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int32 FNType = 4;
    if (has_fntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fntype());
    }

    // required int64 VerCode = 5;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabDesignFNFittingMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabDesignFNFittingMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabDesignFNFittingMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabDesignFNFittingMapInfo::MergeFrom(const JK_CabDesignFNFittingMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fnfittingid()) {
      set_fnfittingid(from.fnfittingid());
    }
    if (from.has_cabdesignfnfittingid()) {
      set_cabdesignfnfittingid(from.cabdesignfnfittingid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_fntype()) {
      set_fntype(from.fntype());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabDesignFNFittingMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabDesignFNFittingMapInfo::CopyFrom(const JK_CabDesignFNFittingMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabDesignFNFittingMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void JK_CabDesignFNFittingMapInfo::Swap(JK_CabDesignFNFittingMapInfo* other) {
  if (other != this) {
    std::swap(fnfittingid_, other->fnfittingid_);
    std::swap(cabdesignfnfittingid_, other->cabdesignfnfittingid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(fntype_, other->fntype_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabDesignFNFittingMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabDesignFNFittingMapInfo_descriptor_;
  metadata.reflection = JK_CabDesignFNFittingMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabDesignFootInfo::kCabDesignIDFieldNumber;
const int JK_CabDesignFootInfo::kFootIDFieldNumber;
const int JK_CabDesignFootInfo::kIsDefaultFieldNumber;
const int JK_CabDesignFootInfo::kVerCodeFieldNumber;
const int JK_CabDesignFootInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_CabDesignFootInfo::JK_CabDesignFootInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabDesignFootInfo::InitAsDefaultInstance() {
}

JK_CabDesignFootInfo::JK_CabDesignFootInfo(const JK_CabDesignFootInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabDesignFootInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdesignid_ = 0;
  footid_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabDesignFootInfo::~JK_CabDesignFootInfo() {
  SharedDtor();
}

void JK_CabDesignFootInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_CabDesignFootInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabDesignFootInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabDesignFootInfo_descriptor_;
}

const JK_CabDesignFootInfo& JK_CabDesignFootInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabDesignFootInfo* JK_CabDesignFootInfo::default_instance_ = NULL;

JK_CabDesignFootInfo* JK_CabDesignFootInfo::New() const {
  return new JK_CabDesignFootInfo;
}

void JK_CabDesignFootInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdesignid_ = 0;
    footid_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabDesignFootInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDesignID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignid_)));
          set_has_cabdesignid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FootID;
        break;
      }

      // required int32 FootID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FootID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &footid_)));
          set_has_footid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabDesignFootInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDesignID = 1;
  if (has_cabdesignid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdesignid(), output);
  }

  // required int32 FootID = 2;
  if (has_footid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->footid(), output);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdefault(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabDesignFootInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDesignID = 1;
  if (has_cabdesignid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdesignid(), target);
  }

  // required int32 FootID = 2;
  if (has_footid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->footid(), target);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdefault(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabDesignFootInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDesignID = 1;
    if (has_cabdesignid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignid());
    }

    // required int32 FootID = 2;
    if (has_footid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->footid());
    }

    // required bool IsDefault = 3;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabDesignFootInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabDesignFootInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabDesignFootInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabDesignFootInfo::MergeFrom(const JK_CabDesignFootInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdesignid()) {
      set_cabdesignid(from.cabdesignid());
    }
    if (from.has_footid()) {
      set_footid(from.footid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabDesignFootInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabDesignFootInfo::CopyFrom(const JK_CabDesignFootInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabDesignFootInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void JK_CabDesignFootInfo::Swap(JK_CabDesignFootInfo* other) {
  if (other != this) {
    std::swap(cabdesignid_, other->cabdesignid_);
    std::swap(footid_, other->footid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabDesignFootInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabDesignFootInfo_descriptor_;
  metadata.reflection = JK_CabDesignFootInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabDesignInfo::kCabDesignIDFieldNumber;
const int JK_CabDesignInfo::kIsDelFieldNumber;
const int JK_CabDesignInfo::kGroupIDFieldNumber;
const int JK_CabDesignInfo::kCabFunctionFieldNumber;
const int JK_CabDesignInfo::kCabStructIDFieldNumber;
const int JK_CabDesignInfo::kPosTypeFieldNumber;
const int JK_CabDesignInfo::kFactoryIDFieldNumber;
const int JK_CabDesignInfo::kCreatorIDFieldNumber;
const int JK_CabDesignInfo::kUpdaterIDFieldNumber;
const int JK_CabDesignInfo::kCreateTimeFieldNumber;
const int JK_CabDesignInfo::kUpdateTimeFieldNumber;
const int JK_CabDesignInfo::kCabDesignCodeFieldNumber;
const int JK_CabDesignInfo::kCabDesignNameFieldNumber;
const int JK_CabDesignInfo::kCabDesignMemoFieldNumber;
const int JK_CabDesignInfo::kVerCodeFieldNumber;
const int JK_CabDesignInfo::kPhotoIDFieldNumber;
const int JK_CabDesignInfo::kIsActiveFieldNumber;
#endif  // !_MSC_VER

JK_CabDesignInfo::JK_CabDesignInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabDesignInfo::InitAsDefaultInstance() {
}

JK_CabDesignInfo::JK_CabDesignInfo(const JK_CabDesignInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabDesignInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdesignid_ = 0;
  isdel_ = false;
  groupid_ = 0;
  cabfunction_ = 0;
  cabstructid_ = 0;
  postype_ = 0;
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  cabdesigncode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cabdesignname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cabdesignmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  photoid_ = 0;
  isactive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabDesignInfo::~JK_CabDesignInfo() {
  SharedDtor();
}

void JK_CabDesignInfo::SharedDtor() {
  if (cabdesigncode_ != &::google::protobuf::internal::kEmptyString) {
    delete cabdesigncode_;
  }
  if (cabdesignname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabdesignname_;
  }
  if (cabdesignmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete cabdesignmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_CabDesignInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabDesignInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabDesignInfo_descriptor_;
}

const JK_CabDesignInfo& JK_CabDesignInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabDesignInfo* JK_CabDesignInfo::default_instance_ = NULL;

JK_CabDesignInfo* JK_CabDesignInfo::New() const {
  return new JK_CabDesignInfo;
}

void JK_CabDesignInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdesignid_ = 0;
    isdel_ = false;
    groupid_ = 0;
    cabfunction_ = 0;
    cabstructid_ = 0;
    postype_ = 0;
    factoryid_ = 0;
    creatorid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_cabdesigncode()) {
      if (cabdesigncode_ != &::google::protobuf::internal::kEmptyString) {
        cabdesigncode_->clear();
      }
    }
    if (has_cabdesignname()) {
      if (cabdesignname_ != &::google::protobuf::internal::kEmptyString) {
        cabdesignname_->clear();
      }
    }
    if (has_cabdesignmemo()) {
      if (cabdesignmemo_ != &::google::protobuf::internal::kEmptyString) {
        cabdesignmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
    photoid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    isactive_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabDesignInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDesignID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignid_)));
          set_has_cabdesignid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CabFunction;
        break;
      }

      // required int32 CabFunction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabFunction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabfunction_)));
          set_has_cabfunction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CabStructID;
        break;
      }

      // required int32 CabStructID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructid_)));
          set_has_cabstructid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_PosType;
        break;
      }

      // required int32 PosType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PosType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &postype_)));
          set_has_postype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_CabDesignCode;
        break;
      }

      // required string CabDesignCode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabDesignCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabdesigncode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabdesigncode().data(), this->cabdesigncode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_CabDesignName;
        break;
      }

      // required string CabDesignName = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabDesignName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabdesignname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabdesignname().data(), this->cabdesignname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_CabDesignMemo;
        break;
      }

      // required string CabDesignMemo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabDesignMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabdesignmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabdesignmemo().data(), this->cabdesignmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_PhotoID;
        break;
      }

      // required int32 PhotoID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PhotoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabDesignInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDesignID = 1;
  if (has_cabdesignid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdesignid(), output);
  }

  // required bool IsDel = 2;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isdel(), output);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // required int32 CabFunction = 4;
  if (has_cabfunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cabfunction(), output);
  }

  // required int32 CabStructID = 5;
  if (has_cabstructid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cabstructid(), output);
  }

  // required int32 PosType = 6;
  if (has_postype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->postype(), output);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->factoryid(), output);
  }

  // required int32 CreatorID = 8;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->creatorid(), output);
  }

  // required int32 UpdaterID = 9;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->updaterid(), output);
  }

  // required int64 CreateTime = 10;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->createtime(), output);
  }

  // required int64 UpdateTime = 11;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->updatetime(), output);
  }

  // required string CabDesignCode = 12;
  if (has_cabdesigncode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabdesigncode().data(), this->cabdesigncode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->cabdesigncode(), output);
  }

  // required string CabDesignName = 13;
  if (has_cabdesignname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabdesignname().data(), this->cabdesignname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->cabdesignname(), output);
  }

  // required string CabDesignMemo = 14;
  if (has_cabdesignmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabdesignmemo().data(), this->cabdesignmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->cabdesignmemo(), output);
  }

  // required int64 VerCode = 15;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->vercode(), output);
  }

  // required int32 PhotoID = 16;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->photoid(), output);
  }

  // required bool IsActive = 17;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->isactive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabDesignInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDesignID = 1;
  if (has_cabdesignid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdesignid(), target);
  }

  // required bool IsDel = 2;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isdel(), target);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  // required int32 CabFunction = 4;
  if (has_cabfunction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cabfunction(), target);
  }

  // required int32 CabStructID = 5;
  if (has_cabstructid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cabstructid(), target);
  }

  // required int32 PosType = 6;
  if (has_postype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->postype(), target);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->factoryid(), target);
  }

  // required int32 CreatorID = 8;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->creatorid(), target);
  }

  // required int32 UpdaterID = 9;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->updaterid(), target);
  }

  // required int64 CreateTime = 10;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->createtime(), target);
  }

  // required int64 UpdateTime = 11;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->updatetime(), target);
  }

  // required string CabDesignCode = 12;
  if (has_cabdesigncode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabdesigncode().data(), this->cabdesigncode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->cabdesigncode(), target);
  }

  // required string CabDesignName = 13;
  if (has_cabdesignname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabdesignname().data(), this->cabdesignname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->cabdesignname(), target);
  }

  // required string CabDesignMemo = 14;
  if (has_cabdesignmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabdesignmemo().data(), this->cabdesignmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->cabdesignmemo(), target);
  }

  // required int64 VerCode = 15;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->vercode(), target);
  }

  // required int32 PhotoID = 16;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->photoid(), target);
  }

  // required bool IsActive = 17;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->isactive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabDesignInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDesignID = 1;
    if (has_cabdesignid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignid());
    }

    // required bool IsDel = 2;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int32 GroupID = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required int32 CabFunction = 4;
    if (has_cabfunction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabfunction());
    }

    // required int32 CabStructID = 5;
    if (has_cabstructid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructid());
    }

    // required int32 PosType = 6;
    if (has_postype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->postype());
    }

    // required int32 FactoryID = 7;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 8;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 UpdaterID = 9;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 10;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 11;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string CabDesignCode = 12;
    if (has_cabdesigncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabdesigncode());
    }

    // required string CabDesignName = 13;
    if (has_cabdesignname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabdesignname());
    }

    // required string CabDesignMemo = 14;
    if (has_cabdesignmemo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabdesignmemo());
    }

    // required int64 VerCode = 15;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 PhotoID = 16;
    if (has_photoid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photoid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bool IsActive = 17;
    if (has_isactive()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabDesignInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabDesignInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabDesignInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabDesignInfo::MergeFrom(const JK_CabDesignInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdesignid()) {
      set_cabdesignid(from.cabdesignid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_cabfunction()) {
      set_cabfunction(from.cabfunction());
    }
    if (from.has_cabstructid()) {
      set_cabstructid(from.cabstructid());
    }
    if (from.has_postype()) {
      set_postype(from.postype());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_cabdesigncode()) {
      set_cabdesigncode(from.cabdesigncode());
    }
    if (from.has_cabdesignname()) {
      set_cabdesignname(from.cabdesignname());
    }
    if (from.has_cabdesignmemo()) {
      set_cabdesignmemo(from.cabdesignmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabDesignInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabDesignInfo::CopyFrom(const JK_CabDesignInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabDesignInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void JK_CabDesignInfo::Swap(JK_CabDesignInfo* other) {
  if (other != this) {
    std::swap(cabdesignid_, other->cabdesignid_);
    std::swap(isdel_, other->isdel_);
    std::swap(groupid_, other->groupid_);
    std::swap(cabfunction_, other->cabfunction_);
    std::swap(cabstructid_, other->cabstructid_);
    std::swap(postype_, other->postype_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(cabdesigncode_, other->cabdesigncode_);
    std::swap(cabdesignname_, other->cabdesignname_);
    std::swap(cabdesignmemo_, other->cabdesignmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(photoid_, other->photoid_);
    std::swap(isactive_, other->isactive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabDesignInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabDesignInfo_descriptor_;
  metadata.reflection = JK_CabDesignInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabDesignMatInfo::kCabDesignIDFieldNumber;
const int JK_CabDesignMatInfo::kCabMatPlanIDFieldNumber;
const int JK_CabDesignMatInfo::kIsDefaultFieldNumber;
const int JK_CabDesignMatInfo::kVerCodeFieldNumber;
const int JK_CabDesignMatInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_CabDesignMatInfo::JK_CabDesignMatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabDesignMatInfo::InitAsDefaultInstance() {
}

JK_CabDesignMatInfo::JK_CabDesignMatInfo(const JK_CabDesignMatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabDesignMatInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdesignid_ = 0;
  cabmatplanid_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabDesignMatInfo::~JK_CabDesignMatInfo() {
  SharedDtor();
}

void JK_CabDesignMatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_CabDesignMatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabDesignMatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabDesignMatInfo_descriptor_;
}

const JK_CabDesignMatInfo& JK_CabDesignMatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabDesignMatInfo* JK_CabDesignMatInfo::default_instance_ = NULL;

JK_CabDesignMatInfo* JK_CabDesignMatInfo::New() const {
  return new JK_CabDesignMatInfo;
}

void JK_CabDesignMatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdesignid_ = 0;
    cabmatplanid_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabDesignMatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDesignID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignid_)));
          set_has_cabdesignid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabMatPlanID;
        break;
      }

      // required int32 CabMatPlanID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabmatplanid_)));
          set_has_cabmatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabDesignMatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDesignID = 1;
  if (has_cabdesignid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdesignid(), output);
  }

  // required int32 CabMatPlanID = 2;
  if (has_cabmatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabmatplanid(), output);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdefault(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabDesignMatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDesignID = 1;
  if (has_cabdesignid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdesignid(), target);
  }

  // required int32 CabMatPlanID = 2;
  if (has_cabmatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabmatplanid(), target);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdefault(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabDesignMatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDesignID = 1;
    if (has_cabdesignid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignid());
    }

    // required int32 CabMatPlanID = 2;
    if (has_cabmatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabmatplanid());
    }

    // required bool IsDefault = 3;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabDesignMatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabDesignMatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabDesignMatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabDesignMatInfo::MergeFrom(const JK_CabDesignMatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdesignid()) {
      set_cabdesignid(from.cabdesignid());
    }
    if (from.has_cabmatplanid()) {
      set_cabmatplanid(from.cabmatplanid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabDesignMatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabDesignMatInfo::CopyFrom(const JK_CabDesignMatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabDesignMatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void JK_CabDesignMatInfo::Swap(JK_CabDesignMatInfo* other) {
  if (other != this) {
    std::swap(cabdesignid_, other->cabdesignid_);
    std::swap(cabmatplanid_, other->cabmatplanid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabDesignMatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabDesignMatInfo_descriptor_;
  metadata.reflection = JK_CabDesignMatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabMatPlanInfo::kCabMatPlanIDFieldNumber;
const int JK_CabMatPlanInfo::kGroupIDFieldNumber;
const int JK_CabMatPlanInfo::kIsDelFieldNumber;
const int JK_CabMatPlanInfo::kFactoryIDFieldNumber;
const int JK_CabMatPlanInfo::kMatGTypeFieldNumber;
const int JK_CabMatPlanInfo::kMatIDFieldNumber;
const int JK_CabMatPlanInfo::kCreatorIDFieldNumber;
const int JK_CabMatPlanInfo::kUpdaterIDFieldNumber;
const int JK_CabMatPlanInfo::kCreateTimeFieldNumber;
const int JK_CabMatPlanInfo::kUpdateTimeFieldNumber;
const int JK_CabMatPlanInfo::kCabMatPlanCodeFieldNumber;
const int JK_CabMatPlanInfo::kCabMatPlanNameFieldNumber;
const int JK_CabMatPlanInfo::kCabMatPlanMemoFieldNumber;
const int JK_CabMatPlanInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_CabMatPlanInfo::JK_CabMatPlanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabMatPlanInfo::InitAsDefaultInstance() {
}

JK_CabMatPlanInfo::JK_CabMatPlanInfo(const JK_CabMatPlanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabMatPlanInfo::SharedCtor() {
  _cached_size_ = 0;
  cabmatplanid_ = 0;
  groupid_ = 0;
  isdel_ = false;
  factoryid_ = 0;
  matgtype_ = 0;
  matid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  cabmatplancode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cabmatplanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cabmatplanmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabMatPlanInfo::~JK_CabMatPlanInfo() {
  SharedDtor();
}

void JK_CabMatPlanInfo::SharedDtor() {
  if (cabmatplancode_ != &::google::protobuf::internal::kEmptyString) {
    delete cabmatplancode_;
  }
  if (cabmatplanname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabmatplanname_;
  }
  if (cabmatplanmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete cabmatplanmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_CabMatPlanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabMatPlanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabMatPlanInfo_descriptor_;
}

const JK_CabMatPlanInfo& JK_CabMatPlanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabMatPlanInfo* JK_CabMatPlanInfo::default_instance_ = NULL;

JK_CabMatPlanInfo* JK_CabMatPlanInfo::New() const {
  return new JK_CabMatPlanInfo;
}

void JK_CabMatPlanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabmatplanid_ = 0;
    groupid_ = 0;
    isdel_ = false;
    factoryid_ = 0;
    matgtype_ = 0;
    matid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_cabmatplancode()) {
      if (cabmatplancode_ != &::google::protobuf::internal::kEmptyString) {
        cabmatplancode_->clear();
      }
    }
    if (has_cabmatplanname()) {
      if (cabmatplanname_ != &::google::protobuf::internal::kEmptyString) {
        cabmatplanname_->clear();
      }
    }
    if (has_cabmatplanmemo()) {
      if (cabmatplanmemo_ != &::google::protobuf::internal::kEmptyString) {
        cabmatplanmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabMatPlanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabMatPlanID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabmatplanid_)));
          set_has_cabmatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MatGType;
        break;
      }

      // required int32 MatGType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatGType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matgtype_)));
          set_has_matgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MatID;
        break;
      }

      // required int32 MatID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matid_)));
          set_has_matid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_CabMatPlanCode;
        break;
      }

      // required string CabMatPlanCode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabMatPlanCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabmatplancode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabmatplancode().data(), this->cabmatplancode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_CabMatPlanName;
        break;
      }

      // required string CabMatPlanName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabMatPlanName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabmatplanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabmatplanname().data(), this->cabmatplanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_CabMatPlanMemo;
        break;
      }

      // required string CabMatPlanMemo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabMatPlanMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabmatplanmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabmatplanmemo().data(), this->cabmatplanmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabMatPlanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabMatPlanID = 1;
  if (has_cabmatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabmatplanid(), output);
  }

  // required int32 GroupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->factoryid(), output);
  }

  // required int32 MatGType = 5;
  if (has_matgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->matgtype(), output);
  }

  // required int32 MatID = 6;
  if (has_matid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->matid(), output);
  }

  // required int32 CreatorID = 7;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->creatorid(), output);
  }

  // required int32 UpdaterID = 8;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->updaterid(), output);
  }

  // required int64 CreateTime = 9;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->createtime(), output);
  }

  // required int64 UpdateTime = 10;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->updatetime(), output);
  }

  // required string CabMatPlanCode = 11;
  if (has_cabmatplancode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabmatplancode().data(), this->cabmatplancode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->cabmatplancode(), output);
  }

  // required string CabMatPlanName = 12;
  if (has_cabmatplanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabmatplanname().data(), this->cabmatplanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->cabmatplanname(), output);
  }

  // required string CabMatPlanMemo = 13;
  if (has_cabmatplanmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabmatplanmemo().data(), this->cabmatplanmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->cabmatplanmemo(), output);
  }

  // required int64 VerCode = 14;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabMatPlanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabMatPlanID = 1;
  if (has_cabmatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabmatplanid(), target);
  }

  // required int32 GroupID = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->factoryid(), target);
  }

  // required int32 MatGType = 5;
  if (has_matgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->matgtype(), target);
  }

  // required int32 MatID = 6;
  if (has_matid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->matid(), target);
  }

  // required int32 CreatorID = 7;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->creatorid(), target);
  }

  // required int32 UpdaterID = 8;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->updaterid(), target);
  }

  // required int64 CreateTime = 9;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->createtime(), target);
  }

  // required int64 UpdateTime = 10;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->updatetime(), target);
  }

  // required string CabMatPlanCode = 11;
  if (has_cabmatplancode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabmatplancode().data(), this->cabmatplancode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->cabmatplancode(), target);
  }

  // required string CabMatPlanName = 12;
  if (has_cabmatplanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabmatplanname().data(), this->cabmatplanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->cabmatplanname(), target);
  }

  // required string CabMatPlanMemo = 13;
  if (has_cabmatplanmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabmatplanmemo().data(), this->cabmatplanmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->cabmatplanmemo(), target);
  }

  // required int64 VerCode = 14;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabMatPlanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabMatPlanID = 1;
    if (has_cabmatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabmatplanid());
    }

    // required int32 GroupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required bool IsDel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int32 FactoryID = 4;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 MatGType = 5;
    if (has_matgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matgtype());
    }

    // required int32 MatID = 6;
    if (has_matid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matid());
    }

    // required int32 CreatorID = 7;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 8;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 CreateTime = 9;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 10;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string CabMatPlanCode = 11;
    if (has_cabmatplancode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabmatplancode());
    }

    // required string CabMatPlanName = 12;
    if (has_cabmatplanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabmatplanname());
    }

    // required string CabMatPlanMemo = 13;
    if (has_cabmatplanmemo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabmatplanmemo());
    }

    // required int64 VerCode = 14;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabMatPlanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabMatPlanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabMatPlanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabMatPlanInfo::MergeFrom(const JK_CabMatPlanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabmatplanid()) {
      set_cabmatplanid(from.cabmatplanid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_matgtype()) {
      set_matgtype(from.matgtype());
    }
    if (from.has_matid()) {
      set_matid(from.matid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_cabmatplancode()) {
      set_cabmatplancode(from.cabmatplancode());
    }
    if (from.has_cabmatplanname()) {
      set_cabmatplanname(from.cabmatplanname());
    }
    if (from.has_cabmatplanmemo()) {
      set_cabmatplanmemo(from.cabmatplanmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabMatPlanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabMatPlanInfo::CopyFrom(const JK_CabMatPlanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabMatPlanInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void JK_CabMatPlanInfo::Swap(JK_CabMatPlanInfo* other) {
  if (other != this) {
    std::swap(cabmatplanid_, other->cabmatplanid_);
    std::swap(groupid_, other->groupid_);
    std::swap(isdel_, other->isdel_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(matgtype_, other->matgtype_);
    std::swap(matid_, other->matid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(cabmatplancode_, other->cabmatplancode_);
    std::swap(cabmatplanname_, other->cabmatplanname_);
    std::swap(cabmatplanmemo_, other->cabmatplanmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabMatPlanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabMatPlanInfo_descriptor_;
  metadata.reflection = JK_CabMatPlanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabStructBoardGapInfo::kCabStructBoardGapIDFieldNumber;
const int JK_CabStructBoardGapInfo::kCabStructBoardIDFieldNumber;
const int JK_CabStructBoardGapInfo::kGapPosFieldNumber;
const int JK_CabStructBoardGapInfo::kGapIndexFieldNumber;
const int JK_CabStructBoardGapInfo::kGapTypeFieldNumber;
const int JK_CabStructBoardGapInfo::kGapShapeFieldNumber;
const int JK_CabStructBoardGapInfo::kXLenFormulaFieldNumber;
const int JK_CabStructBoardGapInfo::kYLenFormulaFieldNumber;
const int JK_CabStructBoardGapInfo::kXOffsetFormulaFieldNumber;
const int JK_CabStructBoardGapInfo::kYOffsetFormulaFieldNumber;
const int JK_CabStructBoardGapInfo::kZOffsetFormulaFieldNumber;
const int JK_CabStructBoardGapInfo::kFactoryIDFieldNumber;
const int JK_CabStructBoardGapInfo::kCreatorIDFieldNumber;
const int JK_CabStructBoardGapInfo::kUpdaterIDFieldNumber;
const int JK_CabStructBoardGapInfo::kCreateTimeFieldNumber;
const int JK_CabStructBoardGapInfo::kUpdateTimeFieldNumber;
const int JK_CabStructBoardGapInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_CabStructBoardGapInfo::JK_CabStructBoardGapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabStructBoardGapInfo::InitAsDefaultInstance() {
}

JK_CabStructBoardGapInfo::JK_CabStructBoardGapInfo(const JK_CabStructBoardGapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabStructBoardGapInfo::SharedCtor() {
  _cached_size_ = 0;
  cabstructboardgapid_ = 0;
  cabstructboardid_ = 0;
  gappos_ = 0;
  gapindex_ = 0;
  gaptype_ = 0;
  gapshape_ = 0;
  xlenformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ylenformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabStructBoardGapInfo::~JK_CabStructBoardGapInfo() {
  SharedDtor();
}

void JK_CabStructBoardGapInfo::SharedDtor() {
  if (xlenformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xlenformula_;
  }
  if (ylenformula_ != &::google::protobuf::internal::kEmptyString) {
    delete ylenformula_;
  }
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (this != default_instance_) {
  }
}

void JK_CabStructBoardGapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabStructBoardGapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabStructBoardGapInfo_descriptor_;
}

const JK_CabStructBoardGapInfo& JK_CabStructBoardGapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabStructBoardGapInfo* JK_CabStructBoardGapInfo::default_instance_ = NULL;

JK_CabStructBoardGapInfo* JK_CabStructBoardGapInfo::New() const {
  return new JK_CabStructBoardGapInfo;
}

void JK_CabStructBoardGapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabstructboardgapid_ = 0;
    cabstructboardid_ = 0;
    gappos_ = 0;
    gapindex_ = 0;
    gaptype_ = 0;
    gapshape_ = 0;
    if (has_xlenformula()) {
      if (xlenformula_ != &::google::protobuf::internal::kEmptyString) {
        xlenformula_->clear();
      }
    }
    if (has_ylenformula()) {
      if (ylenformula_ != &::google::protobuf::internal::kEmptyString) {
        ylenformula_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabStructBoardGapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabStructBoardGapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardgapid_)));
          set_has_cabstructboardgapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabStructBoardID;
        break;
      }

      // required int32 CabStructBoardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardid_)));
          set_has_cabstructboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GapPos;
        break;
      }

      // required int32 GapPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gappos_)));
          set_has_gappos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GapIndex;
        break;
      }

      // required int32 GapIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gapindex_)));
          set_has_gapindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_GapType;
        break;
      }

      // required int32 GapType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaptype_)));
          set_has_gaptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_GapShape;
        break;
      }

      // required int32 GapShape = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapShape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gapshape_)));
          set_has_gapshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_XLenFormula;
        break;
      }

      // required string XLenFormula = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XLenFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xlenformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xlenformula().data(), this->xlenformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_YLenFormula;
        break;
      }

      // required string YLenFormula = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YLenFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ylenformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ylenformula().data(), this->ylenformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabStructBoardGapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabStructBoardGapID = 1;
  if (has_cabstructboardgapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabstructboardgapid(), output);
  }

  // required int32 CabStructBoardID = 2;
  if (has_cabstructboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabstructboardid(), output);
  }

  // required int32 GapPos = 3;
  if (has_gappos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gappos(), output);
  }

  // required int32 GapIndex = 4;
  if (has_gapindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gapindex(), output);
  }

  // required int32 GapType = 5;
  if (has_gaptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gaptype(), output);
  }

  // required int32 GapShape = 6;
  if (has_gapshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gapshape(), output);
  }

  // required string XLenFormula = 7;
  if (has_xlenformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xlenformula().data(), this->xlenformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->xlenformula(), output);
  }

  // required string YLenFormula = 8;
  if (has_ylenformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ylenformula().data(), this->ylenformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->ylenformula(), output);
  }

  // required string XOffsetFormula = 9;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 10;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 11;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->zoffsetformula(), output);
  }

  // required int32 FactoryID = 12;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->factoryid(), output);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->creatorid(), output);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->updaterid(), output);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->createtime(), output);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->updatetime(), output);
  }

  // required int64 VerCode = 17;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabStructBoardGapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabStructBoardGapID = 1;
  if (has_cabstructboardgapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabstructboardgapid(), target);
  }

  // required int32 CabStructBoardID = 2;
  if (has_cabstructboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabstructboardid(), target);
  }

  // required int32 GapPos = 3;
  if (has_gappos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gappos(), target);
  }

  // required int32 GapIndex = 4;
  if (has_gapindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gapindex(), target);
  }

  // required int32 GapType = 5;
  if (has_gaptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gaptype(), target);
  }

  // required int32 GapShape = 6;
  if (has_gapshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gapshape(), target);
  }

  // required string XLenFormula = 7;
  if (has_xlenformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xlenformula().data(), this->xlenformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->xlenformula(), target);
  }

  // required string YLenFormula = 8;
  if (has_ylenformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ylenformula().data(), this->ylenformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ylenformula(), target);
  }

  // required string XOffsetFormula = 9;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 10;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 11;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->zoffsetformula(), target);
  }

  // required int32 FactoryID = 12;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->factoryid(), target);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->creatorid(), target);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->updaterid(), target);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->createtime(), target);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->updatetime(), target);
  }

  // required int64 VerCode = 17;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabStructBoardGapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabStructBoardGapID = 1;
    if (has_cabstructboardgapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardgapid());
    }

    // required int32 CabStructBoardID = 2;
    if (has_cabstructboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardid());
    }

    // required int32 GapPos = 3;
    if (has_gappos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gappos());
    }

    // required int32 GapIndex = 4;
    if (has_gapindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gapindex());
    }

    // required int32 GapType = 5;
    if (has_gaptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaptype());
    }

    // required int32 GapShape = 6;
    if (has_gapshape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gapshape());
    }

    // required string XLenFormula = 7;
    if (has_xlenformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xlenformula());
    }

    // required string YLenFormula = 8;
    if (has_ylenformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ylenformula());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string XOffsetFormula = 9;
    if (has_xoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

    // required string YOffsetFormula = 10;
    if (has_yoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

    // required string ZOffsetFormula = 11;
    if (has_zoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

    // required int32 FactoryID = 12;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 13;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 14;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 15;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 16;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 VerCode = 17;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabStructBoardGapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabStructBoardGapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabStructBoardGapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabStructBoardGapInfo::MergeFrom(const JK_CabStructBoardGapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabstructboardgapid()) {
      set_cabstructboardgapid(from.cabstructboardgapid());
    }
    if (from.has_cabstructboardid()) {
      set_cabstructboardid(from.cabstructboardid());
    }
    if (from.has_gappos()) {
      set_gappos(from.gappos());
    }
    if (from.has_gapindex()) {
      set_gapindex(from.gapindex());
    }
    if (from.has_gaptype()) {
      set_gaptype(from.gaptype());
    }
    if (from.has_gapshape()) {
      set_gapshape(from.gapshape());
    }
    if (from.has_xlenformula()) {
      set_xlenformula(from.xlenformula());
    }
    if (from.has_ylenformula()) {
      set_ylenformula(from.ylenformula());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabStructBoardGapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabStructBoardGapInfo::CopyFrom(const JK_CabStructBoardGapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabStructBoardGapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void JK_CabStructBoardGapInfo::Swap(JK_CabStructBoardGapInfo* other) {
  if (other != this) {
    std::swap(cabstructboardgapid_, other->cabstructboardgapid_);
    std::swap(cabstructboardid_, other->cabstructboardid_);
    std::swap(gappos_, other->gappos_);
    std::swap(gapindex_, other->gapindex_);
    std::swap(gaptype_, other->gaptype_);
    std::swap(gapshape_, other->gapshape_);
    std::swap(xlenformula_, other->xlenformula_);
    std::swap(ylenformula_, other->ylenformula_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabStructBoardGapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabStructBoardGapInfo_descriptor_;
  metadata.reflection = JK_CabStructBoardGapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabStructBoardInfo::kCabStructBoardIDFieldNumber;
const int JK_CabStructBoardInfo::kCabStructIDFieldNumber;
const int JK_CabStructBoardInfo::kIsDelFieldNumber;
const int JK_CabStructBoardInfo::kIsUseMainFieldNumber;
const int JK_CabStructBoardInfo::kIsCanRepeatFieldNumber;
const int JK_CabStructBoardInfo::kIsCanDelFieldNumber;
const int JK_CabStructBoardInfo::kXFormulaFieldNumber;
const int JK_CabStructBoardInfo::kYFormulaFieldNumber;
const int JK_CabStructBoardInfo::kArcXFieldNumber;
const int JK_CabStructBoardInfo::kArcYFieldNumber;
const int JK_CabStructBoardInfo::kArcZFieldNumber;
const int JK_CabStructBoardInfo::kXDockFieldNumber;
const int JK_CabStructBoardInfo::kYDockFieldNumber;
const int JK_CabStructBoardInfo::kZDockFieldNumber;
const int JK_CabStructBoardInfo::kXOffsetFormulaFieldNumber;
const int JK_CabStructBoardInfo::kYOffsetFormulaFieldNumber;
const int JK_CabStructBoardInfo::kZOffsetFormulaFieldNumber;
const int JK_CabStructBoardInfo::kFactoryIDFieldNumber;
const int JK_CabStructBoardInfo::kCreatorIDFieldNumber;
const int JK_CabStructBoardInfo::kUpdaterIDFieldNumber;
const int JK_CabStructBoardInfo::kCreateTimeFieldNumber;
const int JK_CabStructBoardInfo::kUpdateTimeFieldNumber;
const int JK_CabStructBoardInfo::kCabStructBoardNameFieldNumber;
const int JK_CabStructBoardInfo::kDefaultSkinDirectionFieldNumber;
const int JK_CabStructBoardInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_CabStructBoardInfo::JK_CabStructBoardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabStructBoardInfo::InitAsDefaultInstance() {
}

JK_CabStructBoardInfo::JK_CabStructBoardInfo(const JK_CabStructBoardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabStructBoardInfo::SharedCtor() {
  _cached_size_ = 0;
  cabstructboardid_ = 0;
  cabstructid_ = 0;
  isdel_ = false;
  isusemain_ = false;
  iscanrepeat_ = false;
  iscandel_ = false;
  xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arcx_ = 0;
  arcy_ = 0;
  arcz_ = 0;
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  cabstructboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defaultskindirection_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabStructBoardInfo::~JK_CabStructBoardInfo() {
  SharedDtor();
}

void JK_CabStructBoardInfo::SharedDtor() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (cabstructboardname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructboardname_;
  }
  if (this != default_instance_) {
  }
}

void JK_CabStructBoardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabStructBoardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabStructBoardInfo_descriptor_;
}

const JK_CabStructBoardInfo& JK_CabStructBoardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabStructBoardInfo* JK_CabStructBoardInfo::default_instance_ = NULL;

JK_CabStructBoardInfo* JK_CabStructBoardInfo::New() const {
  return new JK_CabStructBoardInfo;
}

void JK_CabStructBoardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabstructboardid_ = 0;
    cabstructid_ = 0;
    isdel_ = false;
    isusemain_ = false;
    iscanrepeat_ = false;
    iscandel_ = false;
    if (has_xformula()) {
      if (xformula_ != &::google::protobuf::internal::kEmptyString) {
        xformula_->clear();
      }
    }
    if (has_yformula()) {
      if (yformula_ != &::google::protobuf::internal::kEmptyString) {
        yformula_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    arcx_ = 0;
    arcy_ = 0;
    arcz_ = 0;
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_cabstructboardname()) {
      if (cabstructboardname_ != &::google::protobuf::internal::kEmptyString) {
        cabstructboardname_->clear();
      }
    }
    defaultskindirection_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabStructBoardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabStructBoardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardid_)));
          set_has_cabstructboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabStructID;
        break;
      }

      // required int32 CabStructID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructid_)));
          set_has_cabstructid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsUseMain;
        break;
      }

      // required bool IsUseMain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUseMain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusemain_)));
          set_has_isusemain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsCanRepeat;
        break;
      }

      // required bool IsCanRepeat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanRepeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscanrepeat_)));
          set_has_iscanrepeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsCanDel;
        break;
      }

      // required bool IsCanDel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscandel_)));
          set_has_iscandel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_XFormula;
        break;
      }

      // required string XFormula = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xformula().data(), this->xformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_YFormula;
        break;
      }

      // required string YFormula = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yformula().data(), this->yformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_ArcX;
        break;
      }

      // required double ArcX = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcx_)));
          set_has_arcx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_ArcY;
        break;
      }

      // required double ArcY = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcy_)));
          set_has_arcy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_ArcZ;
        break;
      }

      // required double ArcZ = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcz_)));
          set_has_arcz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_CabStructBoardName;
        break;
      }

      // required string CabStructBoardName = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabStructBoardName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabstructboardname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabstructboardname().data(), this->cabstructboardname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_DefaultSkinDirection;
        break;
      }

      // required int32 DefaultSkinDirection = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefaultSkinDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defaultskindirection_)));
          set_has_defaultskindirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabStructBoardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabStructBoardID = 1;
  if (has_cabstructboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabstructboardid(), output);
  }

  // required int32 CabStructID = 2;
  if (has_cabstructid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabstructid(), output);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // required bool IsUseMain = 4;
  if (has_isusemain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isusemain(), output);
  }

  // required bool IsCanRepeat = 5;
  if (has_iscanrepeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->iscanrepeat(), output);
  }

  // required bool IsCanDel = 6;
  if (has_iscandel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->iscandel(), output);
  }

  // required string XFormula = 7;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->xformula(), output);
  }

  // required string YFormula = 8;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->yformula(), output);
  }

  // required double ArcX = 9;
  if (has_arcx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->arcx(), output);
  }

  // required double ArcY = 10;
  if (has_arcy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->arcy(), output);
  }

  // required double ArcZ = 11;
  if (has_arcz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->arcz(), output);
  }

  // required int32 XDock = 12;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->xdock(), output);
  }

  // required int32 YDock = 13;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ydock(), output);
  }

  // required int32 ZDock = 14;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->zdock(), output);
  }

  // required string XOffsetFormula = 15;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 16;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 17;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->zoffsetformula(), output);
  }

  // required int32 FactoryID = 18;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->factoryid(), output);
  }

  // required int32 CreatorID = 19;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->creatorid(), output);
  }

  // required int32 UpdaterID = 20;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->updaterid(), output);
  }

  // required int64 CreateTime = 21;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->createtime(), output);
  }

  // required int64 UpdateTime = 22;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->updatetime(), output);
  }

  // required string CabStructBoardName = 23;
  if (has_cabstructboardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructboardname().data(), this->cabstructboardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->cabstructboardname(), output);
  }

  // required int32 DefaultSkinDirection = 24;
  if (has_defaultskindirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->defaultskindirection(), output);
  }

  // required int64 VerCode = 25;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabStructBoardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabStructBoardID = 1;
  if (has_cabstructboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabstructboardid(), target);
  }

  // required int32 CabStructID = 2;
  if (has_cabstructid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabstructid(), target);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // required bool IsUseMain = 4;
  if (has_isusemain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isusemain(), target);
  }

  // required bool IsCanRepeat = 5;
  if (has_iscanrepeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->iscanrepeat(), target);
  }

  // required bool IsCanDel = 6;
  if (has_iscandel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->iscandel(), target);
  }

  // required string XFormula = 7;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->xformula(), target);
  }

  // required string YFormula = 8;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->yformula(), target);
  }

  // required double ArcX = 9;
  if (has_arcx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->arcx(), target);
  }

  // required double ArcY = 10;
  if (has_arcy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->arcy(), target);
  }

  // required double ArcZ = 11;
  if (has_arcz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->arcz(), target);
  }

  // required int32 XDock = 12;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->xdock(), target);
  }

  // required int32 YDock = 13;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ydock(), target);
  }

  // required int32 ZDock = 14;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->zdock(), target);
  }

  // required string XOffsetFormula = 15;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 16;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 17;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->zoffsetformula(), target);
  }

  // required int32 FactoryID = 18;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->factoryid(), target);
  }

  // required int32 CreatorID = 19;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->creatorid(), target);
  }

  // required int32 UpdaterID = 20;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->updaterid(), target);
  }

  // required int64 CreateTime = 21;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->createtime(), target);
  }

  // required int64 UpdateTime = 22;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->updatetime(), target);
  }

  // required string CabStructBoardName = 23;
  if (has_cabstructboardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructboardname().data(), this->cabstructboardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->cabstructboardname(), target);
  }

  // required int32 DefaultSkinDirection = 24;
  if (has_defaultskindirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->defaultskindirection(), target);
  }

  // required int64 VerCode = 25;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabStructBoardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabStructBoardID = 1;
    if (has_cabstructboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardid());
    }

    // required int32 CabStructID = 2;
    if (has_cabstructid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructid());
    }

    // required bool IsDel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsUseMain = 4;
    if (has_isusemain()) {
      total_size += 1 + 1;
    }

    // required bool IsCanRepeat = 5;
    if (has_iscanrepeat()) {
      total_size += 1 + 1;
    }

    // required bool IsCanDel = 6;
    if (has_iscandel()) {
      total_size += 1 + 1;
    }

    // required string XFormula = 7;
    if (has_xformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xformula());
    }

    // required string YFormula = 8;
    if (has_yformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yformula());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double ArcX = 9;
    if (has_arcx()) {
      total_size += 1 + 8;
    }

    // required double ArcY = 10;
    if (has_arcy()) {
      total_size += 1 + 8;
    }

    // required double ArcZ = 11;
    if (has_arcz()) {
      total_size += 1 + 8;
    }

    // required int32 XDock = 12;
    if (has_xdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 13;
    if (has_ydock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 14;
    if (has_zdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // required string XOffsetFormula = 15;
    if (has_xoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

    // required string YOffsetFormula = 16;
    if (has_yoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string ZOffsetFormula = 17;
    if (has_zoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

    // required int32 FactoryID = 18;
    if (has_factoryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 19;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 20;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 21;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 22;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string CabStructBoardName = 23;
    if (has_cabstructboardname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabstructboardname());
    }

    // required int32 DefaultSkinDirection = 24;
    if (has_defaultskindirection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defaultskindirection());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int64 VerCode = 25;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabStructBoardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabStructBoardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabStructBoardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabStructBoardInfo::MergeFrom(const JK_CabStructBoardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabstructboardid()) {
      set_cabstructboardid(from.cabstructboardid());
    }
    if (from.has_cabstructid()) {
      set_cabstructid(from.cabstructid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isusemain()) {
      set_isusemain(from.isusemain());
    }
    if (from.has_iscanrepeat()) {
      set_iscanrepeat(from.iscanrepeat());
    }
    if (from.has_iscandel()) {
      set_iscandel(from.iscandel());
    }
    if (from.has_xformula()) {
      set_xformula(from.xformula());
    }
    if (from.has_yformula()) {
      set_yformula(from.yformula());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_arcx()) {
      set_arcx(from.arcx());
    }
    if (from.has_arcy()) {
      set_arcy(from.arcy());
    }
    if (from.has_arcz()) {
      set_arcz(from.arcz());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_cabstructboardname()) {
      set_cabstructboardname(from.cabstructboardname());
    }
    if (from.has_defaultskindirection()) {
      set_defaultskindirection(from.defaultskindirection());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabStructBoardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabStructBoardInfo::CopyFrom(const JK_CabStructBoardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabStructBoardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x01ffffff) != 0x01ffffff) return false;

  return true;
}

void JK_CabStructBoardInfo::Swap(JK_CabStructBoardInfo* other) {
  if (other != this) {
    std::swap(cabstructboardid_, other->cabstructboardid_);
    std::swap(cabstructid_, other->cabstructid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isusemain_, other->isusemain_);
    std::swap(iscanrepeat_, other->iscanrepeat_);
    std::swap(iscandel_, other->iscandel_);
    std::swap(xformula_, other->xformula_);
    std::swap(yformula_, other->yformula_);
    std::swap(arcx_, other->arcx_);
    std::swap(arcy_, other->arcy_);
    std::swap(arcz_, other->arcz_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(cabstructboardname_, other->cabstructboardname_);
    std::swap(defaultskindirection_, other->defaultskindirection_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabStructBoardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabStructBoardInfo_descriptor_;
  metadata.reflection = JK_CabStructBoardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabStructBoardSealInfo::kCabStructBoardSealIDFieldNumber;
const int JK_CabStructBoardSealInfo::kSealOrderFieldNumber;
const int JK_CabStructBoardSealInfo::kCabStructBoardIDFieldNumber;
const int JK_CabStructBoardSealInfo::kSealTypeFieldNumber;
const int JK_CabStructBoardSealInfo::kVerCodeFieldNumber;
const int JK_CabStructBoardSealInfo::kFactoryIDFieldNumber;
const int JK_CabStructBoardSealInfo::kCreatorIDFieldNumber;
const int JK_CabStructBoardSealInfo::kUpdaterIDFieldNumber;
const int JK_CabStructBoardSealInfo::kCreateTimeFieldNumber;
const int JK_CabStructBoardSealInfo::kUpdateTimeFieldNumber;
const int JK_CabStructBoardSealInfo::kSealIndexFieldNumber;
#endif  // !_MSC_VER

JK_CabStructBoardSealInfo::JK_CabStructBoardSealInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabStructBoardSealInfo::InitAsDefaultInstance() {
}

JK_CabStructBoardSealInfo::JK_CabStructBoardSealInfo(const JK_CabStructBoardSealInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabStructBoardSealInfo::SharedCtor() {
  _cached_size_ = 0;
  cabstructboardsealid_ = 0;
  sealorder_ = 0;
  cabstructboardid_ = 0;
  sealtype_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  sealindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabStructBoardSealInfo::~JK_CabStructBoardSealInfo() {
  SharedDtor();
}

void JK_CabStructBoardSealInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_CabStructBoardSealInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabStructBoardSealInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabStructBoardSealInfo_descriptor_;
}

const JK_CabStructBoardSealInfo& JK_CabStructBoardSealInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabStructBoardSealInfo* JK_CabStructBoardSealInfo::default_instance_ = NULL;

JK_CabStructBoardSealInfo* JK_CabStructBoardSealInfo::New() const {
  return new JK_CabStructBoardSealInfo;
}

void JK_CabStructBoardSealInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabstructboardsealid_ = 0;
    sealorder_ = 0;
    cabstructboardid_ = 0;
    sealtype_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    sealindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabStructBoardSealInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabStructBoardSealID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardsealid_)));
          set_has_cabstructboardsealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SealOrder;
        break;
      }

      // required int32 SealOrder = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealorder_)));
          set_has_sealorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CabStructBoardID;
        break;
      }

      // required int32 CabStructBoardID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardid_)));
          set_has_cabstructboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SealType;
        break;
      }

      // required int32 SealType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealtype_)));
          set_has_sealtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SealIndex;
        break;
      }

      // required int32 SealIndex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealindex_)));
          set_has_sealindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabStructBoardSealInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabStructBoardSealID = 1;
  if (has_cabstructboardsealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabstructboardsealid(), output);
  }

  // required int32 SealOrder = 2;
  if (has_sealorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sealorder(), output);
  }

  // required int32 CabStructBoardID = 3;
  if (has_cabstructboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cabstructboardid(), output);
  }

  // required int32 SealType = 4;
  if (has_sealtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sealtype(), output);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->vercode(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int32 CreatorID = 7;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->creatorid(), output);
  }

  // required int32 UpdaterID = 8;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->updaterid(), output);
  }

  // required int64 CreateTime = 9;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->createtime(), output);
  }

  // required int64 UpdateTime = 10;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->updatetime(), output);
  }

  // required int32 SealIndex = 11;
  if (has_sealindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sealindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabStructBoardSealInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabStructBoardSealID = 1;
  if (has_cabstructboardsealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabstructboardsealid(), target);
  }

  // required int32 SealOrder = 2;
  if (has_sealorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sealorder(), target);
  }

  // required int32 CabStructBoardID = 3;
  if (has_cabstructboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cabstructboardid(), target);
  }

  // required int32 SealType = 4;
  if (has_sealtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sealtype(), target);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->vercode(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int32 CreatorID = 7;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->creatorid(), target);
  }

  // required int32 UpdaterID = 8;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->updaterid(), target);
  }

  // required int64 CreateTime = 9;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->createtime(), target);
  }

  // required int64 UpdateTime = 10;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->updatetime(), target);
  }

  // required int32 SealIndex = 11;
  if (has_sealindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sealindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabStructBoardSealInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabStructBoardSealID = 1;
    if (has_cabstructboardsealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardsealid());
    }

    // required int32 SealOrder = 2;
    if (has_sealorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealorder());
    }

    // required int32 CabStructBoardID = 3;
    if (has_cabstructboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardid());
    }

    // required int32 SealType = 4;
    if (has_sealtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealtype());
    }

    // required int64 VerCode = 5;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 7;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 8;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 CreateTime = 9;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 10;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required int32 SealIndex = 11;
    if (has_sealindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabStructBoardSealInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabStructBoardSealInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabStructBoardSealInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabStructBoardSealInfo::MergeFrom(const JK_CabStructBoardSealInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabstructboardsealid()) {
      set_cabstructboardsealid(from.cabstructboardsealid());
    }
    if (from.has_sealorder()) {
      set_sealorder(from.sealorder());
    }
    if (from.has_cabstructboardid()) {
      set_cabstructboardid(from.cabstructboardid());
    }
    if (from.has_sealtype()) {
      set_sealtype(from.sealtype());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_sealindex()) {
      set_sealindex(from.sealindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabStructBoardSealInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabStructBoardSealInfo::CopyFrom(const JK_CabStructBoardSealInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabStructBoardSealInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void JK_CabStructBoardSealInfo::Swap(JK_CabStructBoardSealInfo* other) {
  if (other != this) {
    std::swap(cabstructboardsealid_, other->cabstructboardsealid_);
    std::swap(sealorder_, other->sealorder_);
    std::swap(cabstructboardid_, other->cabstructboardid_);
    std::swap(sealtype_, other->sealtype_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(sealindex_, other->sealindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabStructBoardSealInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabStructBoardSealInfo_descriptor_;
  metadata.reflection = JK_CabStructBoardSealInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabStructGapInfo::kCabStructGapIDFieldNumber;
const int JK_CabStructGapInfo::kCabStructIDFieldNumber;
const int JK_CabStructGapInfo::kIsDelFieldNumber;
const int JK_CabStructGapInfo::kFactoryIDFieldNumber;
const int JK_CabStructGapInfo::kCabGapTypeFieldNumber;
const int JK_CabStructGapInfo::kXDockFieldNumber;
const int JK_CabStructGapInfo::kYDockFieldNumber;
const int JK_CabStructGapInfo::kZDockFieldNumber;
const int JK_CabStructGapInfo::kXOffsetFormulaFieldNumber;
const int JK_CabStructGapInfo::kYOffsetFormulaFieldNumber;
const int JK_CabStructGapInfo::kZOffsetFormulaFieldNumber;
const int JK_CabStructGapInfo::kXFormulaFieldNumber;
const int JK_CabStructGapInfo::kYFormulaFieldNumber;
const int JK_CabStructGapInfo::kZFormulaFieldNumber;
const int JK_CabStructGapInfo::kXVarFieldNumber;
const int JK_CabStructGapInfo::kYVarFieldNumber;
const int JK_CabStructGapInfo::kZVarFieldNumber;
const int JK_CabStructGapInfo::kXVarNameFieldNumber;
const int JK_CabStructGapInfo::kYVarNameFieldNumber;
const int JK_CabStructGapInfo::kZVarNameFieldNumber;
const int JK_CabStructGapInfo::kCabStructCabStructGapCodeFieldNumber;
const int JK_CabStructGapInfo::kCabStructGapNameFieldNumber;
const int JK_CabStructGapInfo::kCabStructGapMemoFieldNumber;
const int JK_CabStructGapInfo::kCreatorIDFieldNumber;
const int JK_CabStructGapInfo::kUpdaterIDFieldNumber;
const int JK_CabStructGapInfo::kCreateTimeFieldNumber;
const int JK_CabStructGapInfo::kUpdateTimeFieldNumber;
const int JK_CabStructGapInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_CabStructGapInfo::JK_CabStructGapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabStructGapInfo::InitAsDefaultInstance() {
}

JK_CabStructGapInfo::JK_CabStructGapInfo(const JK_CabStructGapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabStructGapInfo::SharedCtor() {
  _cached_size_ = 0;
  cabstructgapid_ = 0;
  cabstructid_ = 0;
  isdel_ = false;
  factoryid_ = 0;
  cabgaptype_ = 0;
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xvar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yvar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zvar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xvarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yvarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zvarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cabstructcabstructgapcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cabstructgapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cabstructgapmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabStructGapInfo::~JK_CabStructGapInfo() {
  SharedDtor();
}

void JK_CabStructGapInfo::SharedDtor() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (zformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zformula_;
  }
  if (xvar_ != &::google::protobuf::internal::kEmptyString) {
    delete xvar_;
  }
  if (yvar_ != &::google::protobuf::internal::kEmptyString) {
    delete yvar_;
  }
  if (zvar_ != &::google::protobuf::internal::kEmptyString) {
    delete zvar_;
  }
  if (xvarname_ != &::google::protobuf::internal::kEmptyString) {
    delete xvarname_;
  }
  if (yvarname_ != &::google::protobuf::internal::kEmptyString) {
    delete yvarname_;
  }
  if (zvarname_ != &::google::protobuf::internal::kEmptyString) {
    delete zvarname_;
  }
  if (cabstructcabstructgapcode_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructcabstructgapcode_;
  }
  if (cabstructgapname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructgapname_;
  }
  if (cabstructgapmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructgapmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_CabStructGapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabStructGapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabStructGapInfo_descriptor_;
}

const JK_CabStructGapInfo& JK_CabStructGapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabStructGapInfo* JK_CabStructGapInfo::default_instance_ = NULL;

JK_CabStructGapInfo* JK_CabStructGapInfo::New() const {
  return new JK_CabStructGapInfo;
}

void JK_CabStructGapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabstructgapid_ = 0;
    cabstructid_ = 0;
    isdel_ = false;
    factoryid_ = 0;
    cabgaptype_ = 0;
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
    if (has_xformula()) {
      if (xformula_ != &::google::protobuf::internal::kEmptyString) {
        xformula_->clear();
      }
    }
    if (has_yformula()) {
      if (yformula_ != &::google::protobuf::internal::kEmptyString) {
        yformula_->clear();
      }
    }
    if (has_zformula()) {
      if (zformula_ != &::google::protobuf::internal::kEmptyString) {
        zformula_->clear();
      }
    }
    if (has_xvar()) {
      if (xvar_ != &::google::protobuf::internal::kEmptyString) {
        xvar_->clear();
      }
    }
    if (has_yvar()) {
      if (yvar_ != &::google::protobuf::internal::kEmptyString) {
        yvar_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_zvar()) {
      if (zvar_ != &::google::protobuf::internal::kEmptyString) {
        zvar_->clear();
      }
    }
    if (has_xvarname()) {
      if (xvarname_ != &::google::protobuf::internal::kEmptyString) {
        xvarname_->clear();
      }
    }
    if (has_yvarname()) {
      if (yvarname_ != &::google::protobuf::internal::kEmptyString) {
        yvarname_->clear();
      }
    }
    if (has_zvarname()) {
      if (zvarname_ != &::google::protobuf::internal::kEmptyString) {
        zvarname_->clear();
      }
    }
    if (has_cabstructcabstructgapcode()) {
      if (cabstructcabstructgapcode_ != &::google::protobuf::internal::kEmptyString) {
        cabstructcabstructgapcode_->clear();
      }
    }
    if (has_cabstructgapname()) {
      if (cabstructgapname_ != &::google::protobuf::internal::kEmptyString) {
        cabstructgapname_->clear();
      }
    }
    if (has_cabstructgapmemo()) {
      if (cabstructgapmemo_ != &::google::protobuf::internal::kEmptyString) {
        cabstructgapmemo_->clear();
      }
    }
    creatorid_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabStructGapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabStructGapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructgapid_)));
          set_has_cabstructgapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabStructID;
        break;
      }

      // required int32 CabStructID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructid_)));
          set_has_cabstructid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CabGapType;
        break;
      }

      // required int32 CabGapType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabGapType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabgaptype_)));
          set_has_cabgaptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_XFormula;
        break;
      }

      // required string XFormula = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xformula().data(), this->xformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_YFormula;
        break;
      }

      // required string YFormula = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yformula().data(), this->yformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ZFormula;
        break;
      }

      // required string ZFormula = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zformula().data(), this->zformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_XVar;
        break;
      }

      // required string XVar = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XVar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xvar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xvar().data(), this->xvar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_YVar;
        break;
      }

      // required string YVar = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YVar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yvar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yvar().data(), this->yvar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_ZVar;
        break;
      }

      // required string ZVar = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZVar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zvar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zvar().data(), this->zvar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_XVarName;
        break;
      }

      // required string XVarName = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XVarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xvarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xvarname().data(), this->xvarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_YVarName;
        break;
      }

      // required string YVarName = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YVarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yvarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yvarname().data(), this->yvarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ZVarName;
        break;
      }

      // required string ZVarName = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZVarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zvarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zvarname().data(), this->zvarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_CabStructCabStructGapCode;
        break;
      }

      // required string CabStructCabStructGapCode = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabStructCabStructGapCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabstructcabstructgapcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabstructcabstructgapcode().data(), this->cabstructcabstructgapcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_CabStructGapName;
        break;
      }

      // required string CabStructGapName = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabStructGapName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabstructgapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabstructgapname().data(), this->cabstructgapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_CabStructGapMemo;
        break;
      }

      // required string CabStructGapMemo = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabStructGapMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabstructgapmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabstructgapmemo().data(), this->cabstructgapmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabStructGapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabStructGapID = 1;
  if (has_cabstructgapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabstructgapid(), output);
  }

  // required int32 CabStructID = 2;
  if (has_cabstructid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabstructid(), output);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->factoryid(), output);
  }

  // required int32 CabGapType = 5;
  if (has_cabgaptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cabgaptype(), output);
  }

  // required int32 XDock = 6;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->xdock(), output);
  }

  // required int32 YDock = 7;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ydock(), output);
  }

  // required int32 ZDock = 8;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->zdock(), output);
  }

  // required string XOffsetFormula = 9;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 10;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 11;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->zoffsetformula(), output);
  }

  // required string XFormula = 12;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->xformula(), output);
  }

  // required string YFormula = 13;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->yformula(), output);
  }

  // required string ZFormula = 14;
  if (has_zformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zformula().data(), this->zformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->zformula(), output);
  }

  // required string XVar = 15;
  if (has_xvar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xvar().data(), this->xvar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->xvar(), output);
  }

  // required string YVar = 16;
  if (has_yvar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yvar().data(), this->yvar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->yvar(), output);
  }

  // required string ZVar = 17;
  if (has_zvar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zvar().data(), this->zvar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->zvar(), output);
  }

  // required string XVarName = 18;
  if (has_xvarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xvarname().data(), this->xvarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->xvarname(), output);
  }

  // required string YVarName = 19;
  if (has_yvarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yvarname().data(), this->yvarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->yvarname(), output);
  }

  // required string ZVarName = 20;
  if (has_zvarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zvarname().data(), this->zvarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->zvarname(), output);
  }

  // required string CabStructCabStructGapCode = 21;
  if (has_cabstructcabstructgapcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructcabstructgapcode().data(), this->cabstructcabstructgapcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->cabstructcabstructgapcode(), output);
  }

  // required string CabStructGapName = 22;
  if (has_cabstructgapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructgapname().data(), this->cabstructgapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->cabstructgapname(), output);
  }

  // required string CabStructGapMemo = 23;
  if (has_cabstructgapmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructgapmemo().data(), this->cabstructgapmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->cabstructgapmemo(), output);
  }

  // required int32 CreatorID = 24;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->creatorid(), output);
  }

  // required int32 UpdaterID = 25;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->updaterid(), output);
  }

  // required int64 CreateTime = 26;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->createtime(), output);
  }

  // required int64 UpdateTime = 27;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->updatetime(), output);
  }

  // required int64 VerCode = 28;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabStructGapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabStructGapID = 1;
  if (has_cabstructgapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabstructgapid(), target);
  }

  // required int32 CabStructID = 2;
  if (has_cabstructid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabstructid(), target);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->factoryid(), target);
  }

  // required int32 CabGapType = 5;
  if (has_cabgaptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cabgaptype(), target);
  }

  // required int32 XDock = 6;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->xdock(), target);
  }

  // required int32 YDock = 7;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ydock(), target);
  }

  // required int32 ZDock = 8;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->zdock(), target);
  }

  // required string XOffsetFormula = 9;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 10;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 11;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->zoffsetformula(), target);
  }

  // required string XFormula = 12;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->xformula(), target);
  }

  // required string YFormula = 13;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->yformula(), target);
  }

  // required string ZFormula = 14;
  if (has_zformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zformula().data(), this->zformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->zformula(), target);
  }

  // required string XVar = 15;
  if (has_xvar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xvar().data(), this->xvar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->xvar(), target);
  }

  // required string YVar = 16;
  if (has_yvar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yvar().data(), this->yvar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->yvar(), target);
  }

  // required string ZVar = 17;
  if (has_zvar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zvar().data(), this->zvar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->zvar(), target);
  }

  // required string XVarName = 18;
  if (has_xvarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xvarname().data(), this->xvarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->xvarname(), target);
  }

  // required string YVarName = 19;
  if (has_yvarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yvarname().data(), this->yvarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->yvarname(), target);
  }

  // required string ZVarName = 20;
  if (has_zvarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zvarname().data(), this->zvarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->zvarname(), target);
  }

  // required string CabStructCabStructGapCode = 21;
  if (has_cabstructcabstructgapcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructcabstructgapcode().data(), this->cabstructcabstructgapcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->cabstructcabstructgapcode(), target);
  }

  // required string CabStructGapName = 22;
  if (has_cabstructgapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructgapname().data(), this->cabstructgapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->cabstructgapname(), target);
  }

  // required string CabStructGapMemo = 23;
  if (has_cabstructgapmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructgapmemo().data(), this->cabstructgapmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->cabstructgapmemo(), target);
  }

  // required int32 CreatorID = 24;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->creatorid(), target);
  }

  // required int32 UpdaterID = 25;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->updaterid(), target);
  }

  // required int64 CreateTime = 26;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->createtime(), target);
  }

  // required int64 UpdateTime = 27;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->updatetime(), target);
  }

  // required int64 VerCode = 28;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabStructGapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabStructGapID = 1;
    if (has_cabstructgapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructgapid());
    }

    // required int32 CabStructID = 2;
    if (has_cabstructid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructid());
    }

    // required bool IsDel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int32 FactoryID = 4;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CabGapType = 5;
    if (has_cabgaptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabgaptype());
    }

    // required int32 XDock = 6;
    if (has_xdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 7;
    if (has_ydock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 8;
    if (has_zdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string XOffsetFormula = 9;
    if (has_xoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

    // required string YOffsetFormula = 10;
    if (has_yoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

    // required string ZOffsetFormula = 11;
    if (has_zoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

    // required string XFormula = 12;
    if (has_xformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xformula());
    }

    // required string YFormula = 13;
    if (has_yformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yformula());
    }

    // required string ZFormula = 14;
    if (has_zformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zformula());
    }

    // required string XVar = 15;
    if (has_xvar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xvar());
    }

    // required string YVar = 16;
    if (has_yvar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yvar());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string ZVar = 17;
    if (has_zvar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zvar());
    }

    // required string XVarName = 18;
    if (has_xvarname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xvarname());
    }

    // required string YVarName = 19;
    if (has_yvarname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yvarname());
    }

    // required string ZVarName = 20;
    if (has_zvarname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zvarname());
    }

    // required string CabStructCabStructGapCode = 21;
    if (has_cabstructcabstructgapcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabstructcabstructgapcode());
    }

    // required string CabStructGapName = 22;
    if (has_cabstructgapname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabstructgapname());
    }

    // required string CabStructGapMemo = 23;
    if (has_cabstructgapmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabstructgapmemo());
    }

    // required int32 CreatorID = 24;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 UpdaterID = 25;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 26;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 27;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required int64 VerCode = 28;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabStructGapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabStructGapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabStructGapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabStructGapInfo::MergeFrom(const JK_CabStructGapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabstructgapid()) {
      set_cabstructgapid(from.cabstructgapid());
    }
    if (from.has_cabstructid()) {
      set_cabstructid(from.cabstructid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_cabgaptype()) {
      set_cabgaptype(from.cabgaptype());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
    if (from.has_xformula()) {
      set_xformula(from.xformula());
    }
    if (from.has_yformula()) {
      set_yformula(from.yformula());
    }
    if (from.has_zformula()) {
      set_zformula(from.zformula());
    }
    if (from.has_xvar()) {
      set_xvar(from.xvar());
    }
    if (from.has_yvar()) {
      set_yvar(from.yvar());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_zvar()) {
      set_zvar(from.zvar());
    }
    if (from.has_xvarname()) {
      set_xvarname(from.xvarname());
    }
    if (from.has_yvarname()) {
      set_yvarname(from.yvarname());
    }
    if (from.has_zvarname()) {
      set_zvarname(from.zvarname());
    }
    if (from.has_cabstructcabstructgapcode()) {
      set_cabstructcabstructgapcode(from.cabstructcabstructgapcode());
    }
    if (from.has_cabstructgapname()) {
      set_cabstructgapname(from.cabstructgapname());
    }
    if (from.has_cabstructgapmemo()) {
      set_cabstructgapmemo(from.cabstructgapmemo());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabStructGapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabStructGapInfo::CopyFrom(const JK_CabStructGapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabStructGapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0fffffff) != 0x0fffffff) return false;

  return true;
}

void JK_CabStructGapInfo::Swap(JK_CabStructGapInfo* other) {
  if (other != this) {
    std::swap(cabstructgapid_, other->cabstructgapid_);
    std::swap(cabstructid_, other->cabstructid_);
    std::swap(isdel_, other->isdel_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(cabgaptype_, other->cabgaptype_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(xformula_, other->xformula_);
    std::swap(yformula_, other->yformula_);
    std::swap(zformula_, other->zformula_);
    std::swap(xvar_, other->xvar_);
    std::swap(yvar_, other->yvar_);
    std::swap(zvar_, other->zvar_);
    std::swap(xvarname_, other->xvarname_);
    std::swap(yvarname_, other->yvarname_);
    std::swap(zvarname_, other->zvarname_);
    std::swap(cabstructcabstructgapcode_, other->cabstructcabstructgapcode_);
    std::swap(cabstructgapname_, other->cabstructgapname_);
    std::swap(cabstructgapmemo_, other->cabstructgapmemo_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabStructGapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabStructGapInfo_descriptor_;
  metadata.reflection = JK_CabStructGapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabStructInfo::kCabStructIDFieldNumber;
const int JK_CabStructInfo::kFactoryIDFieldNumber;
const int JK_CabStructInfo::kVerCodeFieldNumber;
const int JK_CabStructInfo::kGroupIDFieldNumber;
const int JK_CabStructInfo::kIsDelFieldNumber;
const int JK_CabStructInfo::kIsActiveFieldNumber;
const int JK_CabStructInfo::kCabGapTypeFieldNumber;
const int JK_CabStructInfo::kCabShapeIDFieldNumber;
const int JK_CabStructInfo::kVirtualXLenFieldNumber;
const int JK_CabStructInfo::kVirtualYLenFieldNumber;
const int JK_CabStructInfo::kVirtualZLenFieldNumber;
const int JK_CabStructInfo::kVirtualShapeXLenFieldNumber;
const int JK_CabStructInfo::kVirtualShapeZLenFieldNumber;
const int JK_CabStructInfo::kVirtualGapXLenFieldNumber;
const int JK_CabStructInfo::kVirtualGapYLenFieldNumber;
const int JK_CabStructInfo::kVirtualGapZLenFieldNumber;
const int JK_CabStructInfo::kCreatorIDFieldNumber;
const int JK_CabStructInfo::kUpdaterIDFieldNumber;
const int JK_CabStructInfo::kCreateTimeFieldNumber;
const int JK_CabStructInfo::kUpdateTimeFieldNumber;
const int JK_CabStructInfo::kCabStructCodeFieldNumber;
const int JK_CabStructInfo::kCabStructNameFieldNumber;
const int JK_CabStructInfo::kCabStructMemoFieldNumber;
#endif  // !_MSC_VER

JK_CabStructInfo::JK_CabStructInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabStructInfo::InitAsDefaultInstance() {
}

JK_CabStructInfo::JK_CabStructInfo(const JK_CabStructInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabStructInfo::SharedCtor() {
  _cached_size_ = 0;
  cabstructid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  groupid_ = 0;
  isdel_ = false;
  isactive_ = false;
  cabgaptype_ = 0;
  cabshapeid_ = 0;
  virtualxlen_ = 0;
  virtualylen_ = 0;
  virtualzlen_ = 0;
  virtualshapexlen_ = 0;
  virtualshapezlen_ = 0;
  virtualgapxlen_ = 0;
  virtualgapylen_ = 0;
  virtualgapzlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  cabstructcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cabstructname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cabstructmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabStructInfo::~JK_CabStructInfo() {
  SharedDtor();
}

void JK_CabStructInfo::SharedDtor() {
  if (cabstructcode_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructcode_;
  }
  if (cabstructname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructname_;
  }
  if (cabstructmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_CabStructInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabStructInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabStructInfo_descriptor_;
}

const JK_CabStructInfo& JK_CabStructInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabStructInfo* JK_CabStructInfo::default_instance_ = NULL;

JK_CabStructInfo* JK_CabStructInfo::New() const {
  return new JK_CabStructInfo;
}

void JK_CabStructInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabstructid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    groupid_ = 0;
    isdel_ = false;
    isactive_ = false;
    cabgaptype_ = 0;
    cabshapeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    virtualxlen_ = 0;
    virtualylen_ = 0;
    virtualzlen_ = 0;
    virtualshapexlen_ = 0;
    virtualshapezlen_ = 0;
    virtualgapxlen_ = 0;
    virtualgapylen_ = 0;
    virtualgapzlen_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_cabstructcode()) {
      if (cabstructcode_ != &::google::protobuf::internal::kEmptyString) {
        cabstructcode_->clear();
      }
    }
    if (has_cabstructname()) {
      if (cabstructname_ != &::google::protobuf::internal::kEmptyString) {
        cabstructname_->clear();
      }
    }
    if (has_cabstructmemo()) {
      if (cabstructmemo_ != &::google::protobuf::internal::kEmptyString) {
        cabstructmemo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabStructInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabStructID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructid_)));
          set_has_cabstructid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CabGapType;
        break;
      }

      // required int32 CabGapType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabGapType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabgaptype_)));
          set_has_cabgaptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CabShapeID;
        break;
      }

      // required int32 CabShapeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabShapeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabshapeid_)));
          set_has_cabshapeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_VirtualXLen;
        break;
      }

      // required double VirtualXLen = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualxlen_)));
          set_has_virtualxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_VirtualYLen;
        break;
      }

      // required double VirtualYLen = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualylen_)));
          set_has_virtualylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_VirtualZLen;
        break;
      }

      // required double VirtualZLen = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualzlen_)));
          set_has_virtualzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_VirtualShapeXLen;
        break;
      }

      // required double VirtualShapeXLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualShapeXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualshapexlen_)));
          set_has_virtualshapexlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_VirtualShapeZLen;
        break;
      }

      // required double VirtualShapeZLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualShapeZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualshapezlen_)));
          set_has_virtualshapezlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_VirtualGapXLen;
        break;
      }

      // required double VirtualGapXLen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualGapXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualgapxlen_)));
          set_has_virtualgapxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_VirtualGapYLen;
        break;
      }

      // required double VirtualGapYLen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualGapYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualgapylen_)));
          set_has_virtualgapylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_VirtualGapZLen;
        break;
      }

      // required double VirtualGapZLen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualGapZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualgapzlen_)));
          set_has_virtualgapzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_CabStructCode;
        break;
      }

      // required string CabStructCode = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabStructCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabstructcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabstructcode().data(), this->cabstructcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_CabStructName;
        break;
      }

      // required string CabStructName = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabStructName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabstructname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabstructname().data(), this->cabstructname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_CabStructMemo;
        break;
      }

      // required string CabStructMemo = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabStructMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabstructmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabstructmemo().data(), this->cabstructmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabStructInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabStructID = 1;
  if (has_cabstructid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabstructid(), output);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // required int64 VerCode = 3;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->vercode(), output);
  }

  // required int32 GroupID = 4;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->groupid(), output);
  }

  // required bool IsDel = 5;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdel(), output);
  }

  // required bool IsActive = 6;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isactive(), output);
  }

  // required int32 CabGapType = 7;
  if (has_cabgaptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cabgaptype(), output);
  }

  // required int32 CabShapeID = 8;
  if (has_cabshapeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cabshapeid(), output);
  }

  // required double VirtualXLen = 9;
  if (has_virtualxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->virtualxlen(), output);
  }

  // required double VirtualYLen = 10;
  if (has_virtualylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->virtualylen(), output);
  }

  // required double VirtualZLen = 11;
  if (has_virtualzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->virtualzlen(), output);
  }

  // required double VirtualShapeXLen = 12;
  if (has_virtualshapexlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->virtualshapexlen(), output);
  }

  // required double VirtualShapeZLen = 13;
  if (has_virtualshapezlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->virtualshapezlen(), output);
  }

  // required double VirtualGapXLen = 14;
  if (has_virtualgapxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->virtualgapxlen(), output);
  }

  // required double VirtualGapYLen = 15;
  if (has_virtualgapylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->virtualgapylen(), output);
  }

  // required double VirtualGapZLen = 16;
  if (has_virtualgapzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->virtualgapzlen(), output);
  }

  // required int32 CreatorID = 17;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->creatorid(), output);
  }

  // required int32 UpdaterID = 18;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->updaterid(), output);
  }

  // required int64 CreateTime = 19;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->createtime(), output);
  }

  // required int64 UpdateTime = 20;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->updatetime(), output);
  }

  // required string CabStructCode = 21;
  if (has_cabstructcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructcode().data(), this->cabstructcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->cabstructcode(), output);
  }

  // required string CabStructName = 22;
  if (has_cabstructname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructname().data(), this->cabstructname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->cabstructname(), output);
  }

  // required string CabStructMemo = 23;
  if (has_cabstructmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructmemo().data(), this->cabstructmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->cabstructmemo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabStructInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabStructID = 1;
  if (has_cabstructid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabstructid(), target);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // required int64 VerCode = 3;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->vercode(), target);
  }

  // required int32 GroupID = 4;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->groupid(), target);
  }

  // required bool IsDel = 5;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdel(), target);
  }

  // required bool IsActive = 6;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isactive(), target);
  }

  // required int32 CabGapType = 7;
  if (has_cabgaptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cabgaptype(), target);
  }

  // required int32 CabShapeID = 8;
  if (has_cabshapeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cabshapeid(), target);
  }

  // required double VirtualXLen = 9;
  if (has_virtualxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->virtualxlen(), target);
  }

  // required double VirtualYLen = 10;
  if (has_virtualylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->virtualylen(), target);
  }

  // required double VirtualZLen = 11;
  if (has_virtualzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->virtualzlen(), target);
  }

  // required double VirtualShapeXLen = 12;
  if (has_virtualshapexlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->virtualshapexlen(), target);
  }

  // required double VirtualShapeZLen = 13;
  if (has_virtualshapezlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->virtualshapezlen(), target);
  }

  // required double VirtualGapXLen = 14;
  if (has_virtualgapxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->virtualgapxlen(), target);
  }

  // required double VirtualGapYLen = 15;
  if (has_virtualgapylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->virtualgapylen(), target);
  }

  // required double VirtualGapZLen = 16;
  if (has_virtualgapzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->virtualgapzlen(), target);
  }

  // required int32 CreatorID = 17;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->creatorid(), target);
  }

  // required int32 UpdaterID = 18;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->updaterid(), target);
  }

  // required int64 CreateTime = 19;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->createtime(), target);
  }

  // required int64 UpdateTime = 20;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->updatetime(), target);
  }

  // required string CabStructCode = 21;
  if (has_cabstructcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructcode().data(), this->cabstructcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->cabstructcode(), target);
  }

  // required string CabStructName = 22;
  if (has_cabstructname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructname().data(), this->cabstructname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->cabstructname(), target);
  }

  // required string CabStructMemo = 23;
  if (has_cabstructmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructmemo().data(), this->cabstructmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->cabstructmemo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabStructInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabStructID = 1;
    if (has_cabstructid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructid());
    }

    // required int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 3;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 GroupID = 4;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required bool IsDel = 5;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsActive = 6;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required int32 CabGapType = 7;
    if (has_cabgaptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabgaptype());
    }

    // required int32 CabShapeID = 8;
    if (has_cabshapeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabshapeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double VirtualXLen = 9;
    if (has_virtualxlen()) {
      total_size += 1 + 8;
    }

    // required double VirtualYLen = 10;
    if (has_virtualylen()) {
      total_size += 1 + 8;
    }

    // required double VirtualZLen = 11;
    if (has_virtualzlen()) {
      total_size += 1 + 8;
    }

    // required double VirtualShapeXLen = 12;
    if (has_virtualshapexlen()) {
      total_size += 1 + 8;
    }

    // required double VirtualShapeZLen = 13;
    if (has_virtualshapezlen()) {
      total_size += 1 + 8;
    }

    // required double VirtualGapXLen = 14;
    if (has_virtualgapxlen()) {
      total_size += 1 + 8;
    }

    // required double VirtualGapYLen = 15;
    if (has_virtualgapylen()) {
      total_size += 1 + 8;
    }

    // required double VirtualGapZLen = 16;
    if (has_virtualgapzlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 CreatorID = 17;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 18;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 19;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 20;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string CabStructCode = 21;
    if (has_cabstructcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabstructcode());
    }

    // required string CabStructName = 22;
    if (has_cabstructname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabstructname());
    }

    // required string CabStructMemo = 23;
    if (has_cabstructmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabstructmemo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabStructInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabStructInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabStructInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabStructInfo::MergeFrom(const JK_CabStructInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabstructid()) {
      set_cabstructid(from.cabstructid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_cabgaptype()) {
      set_cabgaptype(from.cabgaptype());
    }
    if (from.has_cabshapeid()) {
      set_cabshapeid(from.cabshapeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_virtualxlen()) {
      set_virtualxlen(from.virtualxlen());
    }
    if (from.has_virtualylen()) {
      set_virtualylen(from.virtualylen());
    }
    if (from.has_virtualzlen()) {
      set_virtualzlen(from.virtualzlen());
    }
    if (from.has_virtualshapexlen()) {
      set_virtualshapexlen(from.virtualshapexlen());
    }
    if (from.has_virtualshapezlen()) {
      set_virtualshapezlen(from.virtualshapezlen());
    }
    if (from.has_virtualgapxlen()) {
      set_virtualgapxlen(from.virtualgapxlen());
    }
    if (from.has_virtualgapylen()) {
      set_virtualgapylen(from.virtualgapylen());
    }
    if (from.has_virtualgapzlen()) {
      set_virtualgapzlen(from.virtualgapzlen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_cabstructcode()) {
      set_cabstructcode(from.cabstructcode());
    }
    if (from.has_cabstructname()) {
      set_cabstructname(from.cabstructname());
    }
    if (from.has_cabstructmemo()) {
      set_cabstructmemo(from.cabstructmemo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabStructInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabStructInfo::CopyFrom(const JK_CabStructInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabStructInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;

  return true;
}

void JK_CabStructInfo::Swap(JK_CabStructInfo* other) {
  if (other != this) {
    std::swap(cabstructid_, other->cabstructid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(groupid_, other->groupid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isactive_, other->isactive_);
    std::swap(cabgaptype_, other->cabgaptype_);
    std::swap(cabshapeid_, other->cabshapeid_);
    std::swap(virtualxlen_, other->virtualxlen_);
    std::swap(virtualylen_, other->virtualylen_);
    std::swap(virtualzlen_, other->virtualzlen_);
    std::swap(virtualshapexlen_, other->virtualshapexlen_);
    std::swap(virtualshapezlen_, other->virtualshapezlen_);
    std::swap(virtualgapxlen_, other->virtualgapxlen_);
    std::swap(virtualgapylen_, other->virtualgapylen_);
    std::swap(virtualgapzlen_, other->virtualgapzlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(cabstructcode_, other->cabstructcode_);
    std::swap(cabstructname_, other->cabstructname_);
    std::swap(cabstructmemo_, other->cabstructmemo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabStructInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabStructInfo_descriptor_;
  metadata.reflection = JK_CabStructInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabStructMatPlanMapInfo::kCabMatPlanIDFieldNumber;
const int JK_CabStructMatPlanMapInfo::kCabStructIDFieldNumber;
const int JK_CabStructMatPlanMapInfo::kVerCodeFieldNumber;
const int JK_CabStructMatPlanMapInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_CabStructMatPlanMapInfo::JK_CabStructMatPlanMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabStructMatPlanMapInfo::InitAsDefaultInstance() {
}

JK_CabStructMatPlanMapInfo::JK_CabStructMatPlanMapInfo(const JK_CabStructMatPlanMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabStructMatPlanMapInfo::SharedCtor() {
  _cached_size_ = 0;
  cabmatplanid_ = 0;
  cabstructid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabStructMatPlanMapInfo::~JK_CabStructMatPlanMapInfo() {
  SharedDtor();
}

void JK_CabStructMatPlanMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_CabStructMatPlanMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabStructMatPlanMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabStructMatPlanMapInfo_descriptor_;
}

const JK_CabStructMatPlanMapInfo& JK_CabStructMatPlanMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabStructMatPlanMapInfo* JK_CabStructMatPlanMapInfo::default_instance_ = NULL;

JK_CabStructMatPlanMapInfo* JK_CabStructMatPlanMapInfo::New() const {
  return new JK_CabStructMatPlanMapInfo;
}

void JK_CabStructMatPlanMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabmatplanid_ = 0;
    cabstructid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabStructMatPlanMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabMatPlanID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabmatplanid_)));
          set_has_cabmatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabStructID;
        break;
      }

      // required int32 CabStructID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructid_)));
          set_has_cabstructid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabStructMatPlanMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabMatPlanID = 1;
  if (has_cabmatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabmatplanid(), output);
  }

  // required int32 CabStructID = 2;
  if (has_cabstructid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabstructid(), output);
  }

  // required int64 VerCode = 3;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->vercode(), output);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabStructMatPlanMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabMatPlanID = 1;
  if (has_cabmatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabmatplanid(), target);
  }

  // required int32 CabStructID = 2;
  if (has_cabstructid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabstructid(), target);
  }

  // required int64 VerCode = 3;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->vercode(), target);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabStructMatPlanMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabMatPlanID = 1;
    if (has_cabmatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabmatplanid());
    }

    // required int32 CabStructID = 2;
    if (has_cabstructid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructid());
    }

    // required int64 VerCode = 3;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 4;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabStructMatPlanMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabStructMatPlanMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabStructMatPlanMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabStructMatPlanMapInfo::MergeFrom(const JK_CabStructMatPlanMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabmatplanid()) {
      set_cabmatplanid(from.cabmatplanid());
    }
    if (from.has_cabstructid()) {
      set_cabstructid(from.cabstructid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabStructMatPlanMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabStructMatPlanMapInfo::CopyFrom(const JK_CabStructMatPlanMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabStructMatPlanMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void JK_CabStructMatPlanMapInfo::Swap(JK_CabStructMatPlanMapInfo* other) {
  if (other != this) {
    std::swap(cabmatplanid_, other->cabmatplanid_);
    std::swap(cabstructid_, other->cabstructid_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabStructMatPlanMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabStructMatPlanMapInfo_descriptor_;
  metadata.reflection = JK_CabStructMatPlanMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabinetSizeBoardInfo::kCabinetSizeBoardIDFieldNumber;
const int JK_CabinetSizeBoardInfo::kCabinetSizeIDFieldNumber;
const int JK_CabinetSizeBoardInfo::kIsDelFieldNumber;
const int JK_CabinetSizeBoardInfo::kCabStructBoardIDFieldNumber;
const int JK_CabinetSizeBoardInfo::kIsCanRelocateFieldNumber;
const int JK_CabinetSizeBoardInfo::kIsCanDelFieldNumber;
const int JK_CabinetSizeBoardInfo::kFactoryIDFieldNumber;
const int JK_CabinetSizeBoardInfo::kCreateTimeFieldNumber;
const int JK_CabinetSizeBoardInfo::kCreatorIDFieldNumber;
const int JK_CabinetSizeBoardInfo::kUpdateTimeFieldNumber;
const int JK_CabinetSizeBoardInfo::kUpdaterIDFieldNumber;
const int JK_CabinetSizeBoardInfo::kXDockFieldNumber;
const int JK_CabinetSizeBoardInfo::kYDockFieldNumber;
const int JK_CabinetSizeBoardInfo::kZDockFieldNumber;
const int JK_CabinetSizeBoardInfo::kXOffsetFormulaFieldNumber;
const int JK_CabinetSizeBoardInfo::kYOffsetFormulaFieldNumber;
const int JK_CabinetSizeBoardInfo::kZOffsetFormulaFieldNumber;
const int JK_CabinetSizeBoardInfo::kCabStructBoardNameFieldNumber;
const int JK_CabinetSizeBoardInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_CabinetSizeBoardInfo::JK_CabinetSizeBoardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabinetSizeBoardInfo::InitAsDefaultInstance() {
}

JK_CabinetSizeBoardInfo::JK_CabinetSizeBoardInfo(const JK_CabinetSizeBoardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabinetSizeBoardInfo::SharedCtor() {
  _cached_size_ = 0;
  cabinetsizeboardid_ = 0;
  cabinetsizeid_ = 0;
  isdel_ = false;
  cabstructboardid_ = 0;
  iscanrelocate_ = false;
  iscandel_ = false;
  factoryid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  creatorid_ = 0;
  updatetime_ = GOOGLE_LONGLONG(0);
  updaterid_ = 0;
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cabstructboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabinetSizeBoardInfo::~JK_CabinetSizeBoardInfo() {
  SharedDtor();
}

void JK_CabinetSizeBoardInfo::SharedDtor() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (cabstructboardname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabstructboardname_;
  }
  if (this != default_instance_) {
  }
}

void JK_CabinetSizeBoardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabinetSizeBoardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabinetSizeBoardInfo_descriptor_;
}

const JK_CabinetSizeBoardInfo& JK_CabinetSizeBoardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabinetSizeBoardInfo* JK_CabinetSizeBoardInfo::default_instance_ = NULL;

JK_CabinetSizeBoardInfo* JK_CabinetSizeBoardInfo::New() const {
  return new JK_CabinetSizeBoardInfo;
}

void JK_CabinetSizeBoardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabinetsizeboardid_ = 0;
    cabinetsizeid_ = 0;
    isdel_ = false;
    cabstructboardid_ = 0;
    iscanrelocate_ = false;
    iscandel_ = false;
    factoryid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    creatorid_ = 0;
    updatetime_ = GOOGLE_LONGLONG(0);
    updaterid_ = 0;
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
    if (has_cabstructboardname()) {
      if (cabstructboardname_ != &::google::protobuf::internal::kEmptyString) {
        cabstructboardname_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabinetSizeBoardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabinetSizeBoardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabinetsizeboardid_)));
          set_has_cabinetsizeboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabinetSizeID;
        break;
      }

      // required int32 CabinetSizeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabinetSizeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabinetsizeid_)));
          set_has_cabinetsizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CabStructBoardID;
        break;
      }

      // required int32 CabStructBoardID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabStructBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardid_)));
          set_has_cabstructboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsCanRelocate;
        break;
      }

      // required bool IsCanRelocate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanRelocate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscanrelocate_)));
          set_has_iscanrelocate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsCanDel;
        break;
      }

      // required bool IsCanDel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscandel_)));
          set_has_iscandel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_CabStructBoardName;
        break;
      }

      // required string CabStructBoardName = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabStructBoardName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabstructboardname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabstructboardname().data(), this->cabstructboardname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabinetSizeBoardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabinetSizeBoardID = 1;
  if (has_cabinetsizeboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabinetsizeboardid(), output);
  }

  // required int32 CabinetSizeID = 2;
  if (has_cabinetsizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabinetsizeid(), output);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // required int32 CabStructBoardID = 4;
  if (has_cabstructboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cabstructboardid(), output);
  }

  // required bool IsCanRelocate = 5;
  if (has_iscanrelocate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->iscanrelocate(), output);
  }

  // required bool IsCanDel = 6;
  if (has_iscandel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->iscandel(), output);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->factoryid(), output);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->createtime(), output);
  }

  // required int32 CreatorID = 9;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->creatorid(), output);
  }

  // required int64 UpdateTime = 10;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->updatetime(), output);
  }

  // required int32 UpdaterID = 11;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->updaterid(), output);
  }

  // required int32 XDock = 12;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->xdock(), output);
  }

  // required int32 YDock = 13;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ydock(), output);
  }

  // required int32 ZDock = 14;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->zdock(), output);
  }

  // required string XOffsetFormula = 15;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 16;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 17;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->zoffsetformula(), output);
  }

  // required string CabStructBoardName = 18;
  if (has_cabstructboardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructboardname().data(), this->cabstructboardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->cabstructboardname(), output);
  }

  // required int64 VerCode = 19;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabinetSizeBoardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabinetSizeBoardID = 1;
  if (has_cabinetsizeboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabinetsizeboardid(), target);
  }

  // required int32 CabinetSizeID = 2;
  if (has_cabinetsizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabinetsizeid(), target);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // required int32 CabStructBoardID = 4;
  if (has_cabstructboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cabstructboardid(), target);
  }

  // required bool IsCanRelocate = 5;
  if (has_iscanrelocate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->iscanrelocate(), target);
  }

  // required bool IsCanDel = 6;
  if (has_iscandel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->iscandel(), target);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->factoryid(), target);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->createtime(), target);
  }

  // required int32 CreatorID = 9;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->creatorid(), target);
  }

  // required int64 UpdateTime = 10;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->updatetime(), target);
  }

  // required int32 UpdaterID = 11;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->updaterid(), target);
  }

  // required int32 XDock = 12;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->xdock(), target);
  }

  // required int32 YDock = 13;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ydock(), target);
  }

  // required int32 ZDock = 14;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->zdock(), target);
  }

  // required string XOffsetFormula = 15;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 16;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 17;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->zoffsetformula(), target);
  }

  // required string CabStructBoardName = 18;
  if (has_cabstructboardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabstructboardname().data(), this->cabstructboardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->cabstructboardname(), target);
  }

  // required int64 VerCode = 19;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabinetSizeBoardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabinetSizeBoardID = 1;
    if (has_cabinetsizeboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabinetsizeboardid());
    }

    // required int32 CabinetSizeID = 2;
    if (has_cabinetsizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabinetsizeid());
    }

    // required bool IsDel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int32 CabStructBoardID = 4;
    if (has_cabstructboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardid());
    }

    // required bool IsCanRelocate = 5;
    if (has_iscanrelocate()) {
      total_size += 1 + 1;
    }

    // required bool IsCanDel = 6;
    if (has_iscandel()) {
      total_size += 1 + 1;
    }

    // required int32 FactoryID = 7;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 CreateTime = 8;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 CreatorID = 9;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int64 UpdateTime = 10;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required int32 UpdaterID = 11;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int32 XDock = 12;
    if (has_xdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 13;
    if (has_ydock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 14;
    if (has_zdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // required string XOffsetFormula = 15;
    if (has_xoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

    // required string YOffsetFormula = 16;
    if (has_yoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string ZOffsetFormula = 17;
    if (has_zoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

    // required string CabStructBoardName = 18;
    if (has_cabstructboardname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabstructboardname());
    }

    // required int64 VerCode = 19;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabinetSizeBoardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabinetSizeBoardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabinetSizeBoardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabinetSizeBoardInfo::MergeFrom(const JK_CabinetSizeBoardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabinetsizeboardid()) {
      set_cabinetsizeboardid(from.cabinetsizeboardid());
    }
    if (from.has_cabinetsizeid()) {
      set_cabinetsizeid(from.cabinetsizeid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_cabstructboardid()) {
      set_cabstructboardid(from.cabstructboardid());
    }
    if (from.has_iscanrelocate()) {
      set_iscanrelocate(from.iscanrelocate());
    }
    if (from.has_iscandel()) {
      set_iscandel(from.iscandel());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
    if (from.has_cabstructboardname()) {
      set_cabstructboardname(from.cabstructboardname());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabinetSizeBoardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabinetSizeBoardInfo::CopyFrom(const JK_CabinetSizeBoardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabinetSizeBoardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007ffff) != 0x0007ffff) return false;

  return true;
}

void JK_CabinetSizeBoardInfo::Swap(JK_CabinetSizeBoardInfo* other) {
  if (other != this) {
    std::swap(cabinetsizeboardid_, other->cabinetsizeboardid_);
    std::swap(cabinetsizeid_, other->cabinetsizeid_);
    std::swap(isdel_, other->isdel_);
    std::swap(cabstructboardid_, other->cabstructboardid_);
    std::swap(iscanrelocate_, other->iscanrelocate_);
    std::swap(iscandel_, other->iscandel_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(createtime_, other->createtime_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(cabstructboardname_, other->cabstructboardname_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabinetSizeBoardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabinetSizeBoardInfo_descriptor_;
  metadata.reflection = JK_CabinetSizeBoardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabinetSizeInfo::kCabDesignIDFieldNumber;
const int JK_CabinetSizeInfo::kIsDelFieldNumber;
const int JK_CabinetSizeInfo::kCabinetSizeIDFieldNumber;
const int JK_CabinetSizeInfo::kPhotoIDFieldNumber;
const int JK_CabinetSizeInfo::kXLenFieldNumber;
const int JK_CabinetSizeInfo::kYLenFieldNumber;
const int JK_CabinetSizeInfo::kZLenFieldNumber;
const int JK_CabinetSizeInfo::kIsStandardFieldNumber;
const int JK_CabinetSizeInfo::kMinXLenFieldNumber;
const int JK_CabinetSizeInfo::kMaxXLenFieldNumber;
const int JK_CabinetSizeInfo::kXLenStepFieldNumber;
const int JK_CabinetSizeInfo::kMinYLenFieldNumber;
const int JK_CabinetSizeInfo::kMaxYLenFieldNumber;
const int JK_CabinetSizeInfo::kYLenStepFieldNumber;
const int JK_CabinetSizeInfo::kMinZLenFieldNumber;
const int JK_CabinetSizeInfo::kMaxZLenFieldNumber;
const int JK_CabinetSizeInfo::kZLenStepFieldNumber;
const int JK_CabinetSizeInfo::kShapeXLenFieldNumber;
const int JK_CabinetSizeInfo::kShapeZLenFieldNumber;
const int JK_CabinetSizeInfo::kGapXLenFieldNumber;
const int JK_CabinetSizeInfo::kGapYLenFieldNumber;
const int JK_CabinetSizeInfo::kGapZLenFieldNumber;
const int JK_CabinetSizeInfo::kShapeMinXLenFieldNumber;
const int JK_CabinetSizeInfo::kShapeMaxXLenFieldNumber;
const int JK_CabinetSizeInfo::kShapeXLenStepFieldNumber;
const int JK_CabinetSizeInfo::kShapeMinZLenFieldNumber;
const int JK_CabinetSizeInfo::kShapeMaxZLenFieldNumber;
const int JK_CabinetSizeInfo::kShapeZLenStepFieldNumber;
const int JK_CabinetSizeInfo::kGapMinXLenFieldNumber;
const int JK_CabinetSizeInfo::kGapMaxXLenFieldNumber;
const int JK_CabinetSizeInfo::kGapXLenStepFieldNumber;
const int JK_CabinetSizeInfo::kGapMinYLenFieldNumber;
const int JK_CabinetSizeInfo::kGapMaxYLenFieldNumber;
const int JK_CabinetSizeInfo::kGapYLenStepFieldNumber;
const int JK_CabinetSizeInfo::kGapMinZLenFieldNumber;
const int JK_CabinetSizeInfo::kGapMaxZLenFieldNumber;
const int JK_CabinetSizeInfo::kGapZLenStepFieldNumber;
const int JK_CabinetSizeInfo::kFootCountFieldNumber;
const int JK_CabinetSizeInfo::kIsSysFootRuleFieldNumber;
const int JK_CabinetSizeInfo::kFactoryIDFieldNumber;
const int JK_CabinetSizeInfo::kCreatorIDFieldNumber;
const int JK_CabinetSizeInfo::kUpdaterIDFieldNumber;
const int JK_CabinetSizeInfo::kCreateTimeFieldNumber;
const int JK_CabinetSizeInfo::kUpdateTimeFieldNumber;
const int JK_CabinetSizeInfo::kCabinetSizeCodeFieldNumber;
const int JK_CabinetSizeInfo::kCabinetSizeNameFieldNumber;
const int JK_CabinetSizeInfo::kCabinetSizeMemoFieldNumber;
const int JK_CabinetSizeInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_CabinetSizeInfo::JK_CabinetSizeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabinetSizeInfo::InitAsDefaultInstance() {
}

JK_CabinetSizeInfo::JK_CabinetSizeInfo(const JK_CabinetSizeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabinetSizeInfo::SharedCtor() {
  _cached_size_ = 0;
  cabdesignid_ = 0;
  isdel_ = false;
  cabinetsizeid_ = 0;
  photoid_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  isstandard_ = false;
  minxlen_ = 0;
  maxxlen_ = 0;
  xlenstep_ = 0;
  minylen_ = 0;
  maxylen_ = 0;
  ylenstep_ = 0;
  minzlen_ = 0;
  maxzlen_ = 0;
  zlenstep_ = 0;
  shapexlen_ = 0;
  shapezlen_ = 0;
  gapxlen_ = 0;
  gapylen_ = 0;
  gapzlen_ = 0;
  shapeminxlen_ = 0;
  shapemaxxlen_ = 0;
  shapexlenstep_ = 0;
  shapeminzlen_ = 0;
  shapemaxzlen_ = 0;
  shapezlenstep_ = 0;
  gapminxlen_ = 0;
  gapmaxxlen_ = 0;
  gapxlenstep_ = 0;
  gapminylen_ = 0;
  gapmaxylen_ = 0;
  gapylenstep_ = 0;
  gapminzlen_ = 0;
  gapmaxzlen_ = 0;
  gapzlenstep_ = 0;
  footcount_ = 0;
  issysfootrule_ = false;
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  cabinetsizecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cabinetsizename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cabinetsizememo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabinetSizeInfo::~JK_CabinetSizeInfo() {
  SharedDtor();
}

void JK_CabinetSizeInfo::SharedDtor() {
  if (cabinetsizecode_ != &::google::protobuf::internal::kEmptyString) {
    delete cabinetsizecode_;
  }
  if (cabinetsizename_ != &::google::protobuf::internal::kEmptyString) {
    delete cabinetsizename_;
  }
  if (cabinetsizememo_ != &::google::protobuf::internal::kEmptyString) {
    delete cabinetsizememo_;
  }
  if (this != default_instance_) {
  }
}

void JK_CabinetSizeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabinetSizeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabinetSizeInfo_descriptor_;
}

const JK_CabinetSizeInfo& JK_CabinetSizeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabinetSizeInfo* JK_CabinetSizeInfo::default_instance_ = NULL;

JK_CabinetSizeInfo* JK_CabinetSizeInfo::New() const {
  return new JK_CabinetSizeInfo;
}

void JK_CabinetSizeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabdesignid_ = 0;
    isdel_ = false;
    cabinetsizeid_ = 0;
    photoid_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    isstandard_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    minxlen_ = 0;
    maxxlen_ = 0;
    xlenstep_ = 0;
    minylen_ = 0;
    maxylen_ = 0;
    ylenstep_ = 0;
    minzlen_ = 0;
    maxzlen_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    zlenstep_ = 0;
    shapexlen_ = 0;
    shapezlen_ = 0;
    gapxlen_ = 0;
    gapylen_ = 0;
    gapzlen_ = 0;
    shapeminxlen_ = 0;
    shapemaxxlen_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    shapexlenstep_ = 0;
    shapeminzlen_ = 0;
    shapemaxzlen_ = 0;
    shapezlenstep_ = 0;
    gapminxlen_ = 0;
    gapmaxxlen_ = 0;
    gapxlenstep_ = 0;
    gapminylen_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    gapmaxylen_ = 0;
    gapylenstep_ = 0;
    gapminzlen_ = 0;
    gapmaxzlen_ = 0;
    gapzlenstep_ = 0;
    footcount_ = 0;
    issysfootrule_ = false;
    factoryid_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_cabinetsizecode()) {
      if (cabinetsizecode_ != &::google::protobuf::internal::kEmptyString) {
        cabinetsizecode_->clear();
      }
    }
    if (has_cabinetsizename()) {
      if (cabinetsizename_ != &::google::protobuf::internal::kEmptyString) {
        cabinetsizename_->clear();
      }
    }
    if (has_cabinetsizememo()) {
      if (cabinetsizememo_ != &::google::protobuf::internal::kEmptyString) {
        cabinetsizememo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabinetSizeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabDesignID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabdesignid_)));
          set_has_cabdesignid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CabinetSizeID;
        break;
      }

      // required int32 CabinetSizeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabinetSizeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabinetsizeid_)));
          set_has_cabinetsizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PhotoID;
        break;
      }

      // required int32 PhotoID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PhotoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_XLen;
        break;
      }

      // required double XLen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_YLen;
        break;
      }

      // required double YLen = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_IsStandard;
        break;
      }

      // required bool IsStandard = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsStandard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstandard_)));
          set_has_isstandard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_MinXLen;
        break;
      }

      // required double MinXLen = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minxlen_)));
          set_has_minxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_MaxXLen;
        break;
      }

      // required double MaxXLen = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxxlen_)));
          set_has_maxxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_XLenStep;
        break;
      }

      // required double XLenStep = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLenStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlenstep_)));
          set_has_xlenstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_MinYLen;
        break;
      }

      // required double MinYLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minylen_)));
          set_has_minylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_MaxYLen;
        break;
      }

      // required double MaxYLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxylen_)));
          set_has_maxylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_YLenStep;
        break;
      }

      // required double YLenStep = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLenStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylenstep_)));
          set_has_ylenstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_MinZLen;
        break;
      }

      // required double MinZLen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minzlen_)));
          set_has_minzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_MaxZLen;
        break;
      }

      // required double MaxZLen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxzlen_)));
          set_has_maxzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_ZLenStep;
        break;
      }

      // required double ZLenStep = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLenStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlenstep_)));
          set_has_zlenstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_ShapeXLen;
        break;
      }

      // required double ShapeXLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShapeXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shapexlen_)));
          set_has_shapexlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_ShapeZLen;
        break;
      }

      // required double ShapeZLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShapeZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shapezlen_)));
          set_has_shapezlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_GapXLen;
        break;
      }

      // required double GapXLen = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapxlen_)));
          set_has_gapxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_GapYLen;
        break;
      }

      // required double GapYLen = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapylen_)));
          set_has_gapylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_GapZLen;
        break;
      }

      // required double GapZLen = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapzlen_)));
          set_has_gapzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_ShapeMinXLen;
        break;
      }

      // required double ShapeMinXLen = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShapeMinXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shapeminxlen_)));
          set_has_shapeminxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_ShapeMaxXLen;
        break;
      }

      // required double ShapeMaxXLen = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShapeMaxXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shapemaxxlen_)));
          set_has_shapemaxxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_ShapeXLenStep;
        break;
      }

      // required double ShapeXLenStep = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShapeXLenStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shapexlenstep_)));
          set_has_shapexlenstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_ShapeMinZLen;
        break;
      }

      // required double ShapeMinZLen = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShapeMinZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shapeminzlen_)));
          set_has_shapeminzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_ShapeMaxZLen;
        break;
      }

      // required double ShapeMaxZLen = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShapeMaxZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shapemaxzlen_)));
          set_has_shapemaxzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_ShapeZLenStep;
        break;
      }

      // required double ShapeZLenStep = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShapeZLenStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shapezlenstep_)));
          set_has_shapezlenstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_GapMinXLen;
        break;
      }

      // required double GapMinXLen = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapMinXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapminxlen_)));
          set_has_gapminxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_GapMaxXLen;
        break;
      }

      // required double GapMaxXLen = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapMaxXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapmaxxlen_)));
          set_has_gapmaxxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_GapXLenStep;
        break;
      }

      // required double GapXLenStep = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapXLenStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapxlenstep_)));
          set_has_gapxlenstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_GapMinYLen;
        break;
      }

      // required double GapMinYLen = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapMinYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapminylen_)));
          set_has_gapminylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_GapMaxYLen;
        break;
      }

      // required double GapMaxYLen = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapMaxYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapmaxylen_)));
          set_has_gapmaxylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(273)) goto parse_GapYLenStep;
        break;
      }

      // required double GapYLenStep = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapYLenStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapylenstep_)));
          set_has_gapylenstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(281)) goto parse_GapMinZLen;
        break;
      }

      // required double GapMinZLen = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapMinZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapminzlen_)));
          set_has_gapminzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(289)) goto parse_GapMaxZLen;
        break;
      }

      // required double GapMaxZLen = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapMaxZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapmaxzlen_)));
          set_has_gapmaxzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_GapZLenStep;
        break;
      }

      // required double GapZLenStep = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GapZLenStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gapzlenstep_)));
          set_has_gapzlenstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_FootCount;
        break;
      }

      // required int32 FootCount = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FootCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &footcount_)));
          set_has_footcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_IsSysFootRule;
        break;
      }

      // required bool IsSysFootRule = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSysFootRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issysfootrule_)));
          set_has_issysfootrule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_CabinetSizeCode;
        break;
      }

      // required string CabinetSizeCode = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabinetSizeCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabinetsizecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabinetsizecode().data(), this->cabinetsizecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_CabinetSizeName;
        break;
      }

      // required string CabinetSizeName = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabinetSizeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabinetsizename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabinetsizename().data(), this->cabinetsizename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_CabinetSizeMemo;
        break;
      }

      // required string CabinetSizeMemo = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CabinetSizeMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cabinetsizememo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cabinetsizememo().data(), this->cabinetsizememo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabinetSizeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabDesignID = 1;
  if (has_cabdesignid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabdesignid(), output);
  }

  // required bool IsDel = 2;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isdel(), output);
  }

  // required int32 CabinetSizeID = 3;
  if (has_cabinetsizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cabinetsizeid(), output);
  }

  // required int32 PhotoID = 4;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->photoid(), output);
  }

  // required double XLen = 5;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->xlen(), output);
  }

  // required double YLen = 6;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ylen(), output);
  }

  // required double ZLen = 7;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->zlen(), output);
  }

  // required bool IsStandard = 8;
  if (has_isstandard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isstandard(), output);
  }

  // required double MinXLen = 9;
  if (has_minxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->minxlen(), output);
  }

  // required double MaxXLen = 10;
  if (has_maxxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->maxxlen(), output);
  }

  // required double XLenStep = 11;
  if (has_xlenstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->xlenstep(), output);
  }

  // required double MinYLen = 12;
  if (has_minylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->minylen(), output);
  }

  // required double MaxYLen = 13;
  if (has_maxylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->maxylen(), output);
  }

  // required double YLenStep = 14;
  if (has_ylenstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->ylenstep(), output);
  }

  // required double MinZLen = 15;
  if (has_minzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->minzlen(), output);
  }

  // required double MaxZLen = 16;
  if (has_maxzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->maxzlen(), output);
  }

  // required double ZLenStep = 17;
  if (has_zlenstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->zlenstep(), output);
  }

  // required double ShapeXLen = 18;
  if (has_shapexlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->shapexlen(), output);
  }

  // required double ShapeZLen = 19;
  if (has_shapezlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->shapezlen(), output);
  }

  // required double GapXLen = 20;
  if (has_gapxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->gapxlen(), output);
  }

  // required double GapYLen = 21;
  if (has_gapylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->gapylen(), output);
  }

  // required double GapZLen = 22;
  if (has_gapzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->gapzlen(), output);
  }

  // required double ShapeMinXLen = 23;
  if (has_shapeminxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->shapeminxlen(), output);
  }

  // required double ShapeMaxXLen = 24;
  if (has_shapemaxxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->shapemaxxlen(), output);
  }

  // required double ShapeXLenStep = 25;
  if (has_shapexlenstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->shapexlenstep(), output);
  }

  // required double ShapeMinZLen = 26;
  if (has_shapeminzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->shapeminzlen(), output);
  }

  // required double ShapeMaxZLen = 27;
  if (has_shapemaxzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->shapemaxzlen(), output);
  }

  // required double ShapeZLenStep = 28;
  if (has_shapezlenstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->shapezlenstep(), output);
  }

  // required double GapMinXLen = 29;
  if (has_gapminxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->gapminxlen(), output);
  }

  // required double GapMaxXLen = 30;
  if (has_gapmaxxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->gapmaxxlen(), output);
  }

  // required double GapXLenStep = 31;
  if (has_gapxlenstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->gapxlenstep(), output);
  }

  // required double GapMinYLen = 32;
  if (has_gapminylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->gapminylen(), output);
  }

  // required double GapMaxYLen = 33;
  if (has_gapmaxylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->gapmaxylen(), output);
  }

  // required double GapYLenStep = 34;
  if (has_gapylenstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->gapylenstep(), output);
  }

  // required double GapMinZLen = 35;
  if (has_gapminzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->gapminzlen(), output);
  }

  // required double GapMaxZLen = 36;
  if (has_gapmaxzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->gapmaxzlen(), output);
  }

  // required double GapZLenStep = 37;
  if (has_gapzlenstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->gapzlenstep(), output);
  }

  // required int32 FootCount = 38;
  if (has_footcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->footcount(), output);
  }

  // required bool IsSysFootRule = 39;
  if (has_issysfootrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->issysfootrule(), output);
  }

  // required int32 FactoryID = 40;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->factoryid(), output);
  }

  // required int32 CreatorID = 41;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->creatorid(), output);
  }

  // required int32 UpdaterID = 42;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->updaterid(), output);
  }

  // required int64 CreateTime = 43;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(43, this->createtime(), output);
  }

  // required int64 UpdateTime = 44;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(44, this->updatetime(), output);
  }

  // required string CabinetSizeCode = 45;
  if (has_cabinetsizecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabinetsizecode().data(), this->cabinetsizecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      45, this->cabinetsizecode(), output);
  }

  // required string CabinetSizeName = 46;
  if (has_cabinetsizename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabinetsizename().data(), this->cabinetsizename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      46, this->cabinetsizename(), output);
  }

  // required string CabinetSizeMemo = 47;
  if (has_cabinetsizememo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabinetsizememo().data(), this->cabinetsizememo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      47, this->cabinetsizememo(), output);
  }

  // required int64 VerCode = 48;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(48, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabinetSizeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabDesignID = 1;
  if (has_cabdesignid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabdesignid(), target);
  }

  // required bool IsDel = 2;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isdel(), target);
  }

  // required int32 CabinetSizeID = 3;
  if (has_cabinetsizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cabinetsizeid(), target);
  }

  // required int32 PhotoID = 4;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->photoid(), target);
  }

  // required double XLen = 5;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->xlen(), target);
  }

  // required double YLen = 6;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ylen(), target);
  }

  // required double ZLen = 7;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->zlen(), target);
  }

  // required bool IsStandard = 8;
  if (has_isstandard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isstandard(), target);
  }

  // required double MinXLen = 9;
  if (has_minxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->minxlen(), target);
  }

  // required double MaxXLen = 10;
  if (has_maxxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->maxxlen(), target);
  }

  // required double XLenStep = 11;
  if (has_xlenstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->xlenstep(), target);
  }

  // required double MinYLen = 12;
  if (has_minylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->minylen(), target);
  }

  // required double MaxYLen = 13;
  if (has_maxylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->maxylen(), target);
  }

  // required double YLenStep = 14;
  if (has_ylenstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->ylenstep(), target);
  }

  // required double MinZLen = 15;
  if (has_minzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->minzlen(), target);
  }

  // required double MaxZLen = 16;
  if (has_maxzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->maxzlen(), target);
  }

  // required double ZLenStep = 17;
  if (has_zlenstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->zlenstep(), target);
  }

  // required double ShapeXLen = 18;
  if (has_shapexlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->shapexlen(), target);
  }

  // required double ShapeZLen = 19;
  if (has_shapezlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->shapezlen(), target);
  }

  // required double GapXLen = 20;
  if (has_gapxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->gapxlen(), target);
  }

  // required double GapYLen = 21;
  if (has_gapylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->gapylen(), target);
  }

  // required double GapZLen = 22;
  if (has_gapzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->gapzlen(), target);
  }

  // required double ShapeMinXLen = 23;
  if (has_shapeminxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->shapeminxlen(), target);
  }

  // required double ShapeMaxXLen = 24;
  if (has_shapemaxxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->shapemaxxlen(), target);
  }

  // required double ShapeXLenStep = 25;
  if (has_shapexlenstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->shapexlenstep(), target);
  }

  // required double ShapeMinZLen = 26;
  if (has_shapeminzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->shapeminzlen(), target);
  }

  // required double ShapeMaxZLen = 27;
  if (has_shapemaxzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->shapemaxzlen(), target);
  }

  // required double ShapeZLenStep = 28;
  if (has_shapezlenstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->shapezlenstep(), target);
  }

  // required double GapMinXLen = 29;
  if (has_gapminxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->gapminxlen(), target);
  }

  // required double GapMaxXLen = 30;
  if (has_gapmaxxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->gapmaxxlen(), target);
  }

  // required double GapXLenStep = 31;
  if (has_gapxlenstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->gapxlenstep(), target);
  }

  // required double GapMinYLen = 32;
  if (has_gapminylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->gapminylen(), target);
  }

  // required double GapMaxYLen = 33;
  if (has_gapmaxylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->gapmaxylen(), target);
  }

  // required double GapYLenStep = 34;
  if (has_gapylenstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->gapylenstep(), target);
  }

  // required double GapMinZLen = 35;
  if (has_gapminzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->gapminzlen(), target);
  }

  // required double GapMaxZLen = 36;
  if (has_gapmaxzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->gapmaxzlen(), target);
  }

  // required double GapZLenStep = 37;
  if (has_gapzlenstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->gapzlenstep(), target);
  }

  // required int32 FootCount = 38;
  if (has_footcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->footcount(), target);
  }

  // required bool IsSysFootRule = 39;
  if (has_issysfootrule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->issysfootrule(), target);
  }

  // required int32 FactoryID = 40;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->factoryid(), target);
  }

  // required int32 CreatorID = 41;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->creatorid(), target);
  }

  // required int32 UpdaterID = 42;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->updaterid(), target);
  }

  // required int64 CreateTime = 43;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(43, this->createtime(), target);
  }

  // required int64 UpdateTime = 44;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(44, this->updatetime(), target);
  }

  // required string CabinetSizeCode = 45;
  if (has_cabinetsizecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabinetsizecode().data(), this->cabinetsizecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->cabinetsizecode(), target);
  }

  // required string CabinetSizeName = 46;
  if (has_cabinetsizename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabinetsizename().data(), this->cabinetsizename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->cabinetsizename(), target);
  }

  // required string CabinetSizeMemo = 47;
  if (has_cabinetsizememo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cabinetsizememo().data(), this->cabinetsizememo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->cabinetsizememo(), target);
  }

  // required int64 VerCode = 48;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(48, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabinetSizeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabDesignID = 1;
    if (has_cabdesignid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabdesignid());
    }

    // required bool IsDel = 2;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int32 CabinetSizeID = 3;
    if (has_cabinetsizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabinetsizeid());
    }

    // required int32 PhotoID = 4;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photoid());
    }

    // required double XLen = 5;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 6;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double ZLen = 7;
    if (has_zlen()) {
      total_size += 1 + 8;
    }

    // required bool IsStandard = 8;
    if (has_isstandard()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double MinXLen = 9;
    if (has_minxlen()) {
      total_size += 1 + 8;
    }

    // required double MaxXLen = 10;
    if (has_maxxlen()) {
      total_size += 1 + 8;
    }

    // required double XLenStep = 11;
    if (has_xlenstep()) {
      total_size += 1 + 8;
    }

    // required double MinYLen = 12;
    if (has_minylen()) {
      total_size += 1 + 8;
    }

    // required double MaxYLen = 13;
    if (has_maxylen()) {
      total_size += 1 + 8;
    }

    // required double YLenStep = 14;
    if (has_ylenstep()) {
      total_size += 1 + 8;
    }

    // required double MinZLen = 15;
    if (has_minzlen()) {
      total_size += 1 + 8;
    }

    // required double MaxZLen = 16;
    if (has_maxzlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double ZLenStep = 17;
    if (has_zlenstep()) {
      total_size += 2 + 8;
    }

    // required double ShapeXLen = 18;
    if (has_shapexlen()) {
      total_size += 2 + 8;
    }

    // required double ShapeZLen = 19;
    if (has_shapezlen()) {
      total_size += 2 + 8;
    }

    // required double GapXLen = 20;
    if (has_gapxlen()) {
      total_size += 2 + 8;
    }

    // required double GapYLen = 21;
    if (has_gapylen()) {
      total_size += 2 + 8;
    }

    // required double GapZLen = 22;
    if (has_gapzlen()) {
      total_size += 2 + 8;
    }

    // required double ShapeMinXLen = 23;
    if (has_shapeminxlen()) {
      total_size += 2 + 8;
    }

    // required double ShapeMaxXLen = 24;
    if (has_shapemaxxlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double ShapeXLenStep = 25;
    if (has_shapexlenstep()) {
      total_size += 2 + 8;
    }

    // required double ShapeMinZLen = 26;
    if (has_shapeminzlen()) {
      total_size += 2 + 8;
    }

    // required double ShapeMaxZLen = 27;
    if (has_shapemaxzlen()) {
      total_size += 2 + 8;
    }

    // required double ShapeZLenStep = 28;
    if (has_shapezlenstep()) {
      total_size += 2 + 8;
    }

    // required double GapMinXLen = 29;
    if (has_gapminxlen()) {
      total_size += 2 + 8;
    }

    // required double GapMaxXLen = 30;
    if (has_gapmaxxlen()) {
      total_size += 2 + 8;
    }

    // required double GapXLenStep = 31;
    if (has_gapxlenstep()) {
      total_size += 2 + 8;
    }

    // required double GapMinYLen = 32;
    if (has_gapminylen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required double GapMaxYLen = 33;
    if (has_gapmaxylen()) {
      total_size += 2 + 8;
    }

    // required double GapYLenStep = 34;
    if (has_gapylenstep()) {
      total_size += 2 + 8;
    }

    // required double GapMinZLen = 35;
    if (has_gapminzlen()) {
      total_size += 2 + 8;
    }

    // required double GapMaxZLen = 36;
    if (has_gapmaxzlen()) {
      total_size += 2 + 8;
    }

    // required double GapZLenStep = 37;
    if (has_gapzlenstep()) {
      total_size += 2 + 8;
    }

    // required int32 FootCount = 38;
    if (has_footcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->footcount());
    }

    // required bool IsSysFootRule = 39;
    if (has_issysfootrule()) {
      total_size += 2 + 1;
    }

    // required int32 FactoryID = 40;
    if (has_factoryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required int32 CreatorID = 41;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 42;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 43;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 44;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string CabinetSizeCode = 45;
    if (has_cabinetsizecode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabinetsizecode());
    }

    // required string CabinetSizeName = 46;
    if (has_cabinetsizename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabinetsizename());
    }

    // required string CabinetSizeMemo = 47;
    if (has_cabinetsizememo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cabinetsizememo());
    }

    // required int64 VerCode = 48;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabinetSizeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabinetSizeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabinetSizeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabinetSizeInfo::MergeFrom(const JK_CabinetSizeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabdesignid()) {
      set_cabdesignid(from.cabdesignid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_cabinetsizeid()) {
      set_cabinetsizeid(from.cabinetsizeid());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_isstandard()) {
      set_isstandard(from.isstandard());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_minxlen()) {
      set_minxlen(from.minxlen());
    }
    if (from.has_maxxlen()) {
      set_maxxlen(from.maxxlen());
    }
    if (from.has_xlenstep()) {
      set_xlenstep(from.xlenstep());
    }
    if (from.has_minylen()) {
      set_minylen(from.minylen());
    }
    if (from.has_maxylen()) {
      set_maxylen(from.maxylen());
    }
    if (from.has_ylenstep()) {
      set_ylenstep(from.ylenstep());
    }
    if (from.has_minzlen()) {
      set_minzlen(from.minzlen());
    }
    if (from.has_maxzlen()) {
      set_maxzlen(from.maxzlen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_zlenstep()) {
      set_zlenstep(from.zlenstep());
    }
    if (from.has_shapexlen()) {
      set_shapexlen(from.shapexlen());
    }
    if (from.has_shapezlen()) {
      set_shapezlen(from.shapezlen());
    }
    if (from.has_gapxlen()) {
      set_gapxlen(from.gapxlen());
    }
    if (from.has_gapylen()) {
      set_gapylen(from.gapylen());
    }
    if (from.has_gapzlen()) {
      set_gapzlen(from.gapzlen());
    }
    if (from.has_shapeminxlen()) {
      set_shapeminxlen(from.shapeminxlen());
    }
    if (from.has_shapemaxxlen()) {
      set_shapemaxxlen(from.shapemaxxlen());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_shapexlenstep()) {
      set_shapexlenstep(from.shapexlenstep());
    }
    if (from.has_shapeminzlen()) {
      set_shapeminzlen(from.shapeminzlen());
    }
    if (from.has_shapemaxzlen()) {
      set_shapemaxzlen(from.shapemaxzlen());
    }
    if (from.has_shapezlenstep()) {
      set_shapezlenstep(from.shapezlenstep());
    }
    if (from.has_gapminxlen()) {
      set_gapminxlen(from.gapminxlen());
    }
    if (from.has_gapmaxxlen()) {
      set_gapmaxxlen(from.gapmaxxlen());
    }
    if (from.has_gapxlenstep()) {
      set_gapxlenstep(from.gapxlenstep());
    }
    if (from.has_gapminylen()) {
      set_gapminylen(from.gapminylen());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_gapmaxylen()) {
      set_gapmaxylen(from.gapmaxylen());
    }
    if (from.has_gapylenstep()) {
      set_gapylenstep(from.gapylenstep());
    }
    if (from.has_gapminzlen()) {
      set_gapminzlen(from.gapminzlen());
    }
    if (from.has_gapmaxzlen()) {
      set_gapmaxzlen(from.gapmaxzlen());
    }
    if (from.has_gapzlenstep()) {
      set_gapzlenstep(from.gapzlenstep());
    }
    if (from.has_footcount()) {
      set_footcount(from.footcount());
    }
    if (from.has_issysfootrule()) {
      set_issysfootrule(from.issysfootrule());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_cabinetsizecode()) {
      set_cabinetsizecode(from.cabinetsizecode());
    }
    if (from.has_cabinetsizename()) {
      set_cabinetsizename(from.cabinetsizename());
    }
    if (from.has_cabinetsizememo()) {
      set_cabinetsizememo(from.cabinetsizememo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabinetSizeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabinetSizeInfo::CopyFrom(const JK_CabinetSizeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabinetSizeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void JK_CabinetSizeInfo::Swap(JK_CabinetSizeInfo* other) {
  if (other != this) {
    std::swap(cabdesignid_, other->cabdesignid_);
    std::swap(isdel_, other->isdel_);
    std::swap(cabinetsizeid_, other->cabinetsizeid_);
    std::swap(photoid_, other->photoid_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(isstandard_, other->isstandard_);
    std::swap(minxlen_, other->minxlen_);
    std::swap(maxxlen_, other->maxxlen_);
    std::swap(xlenstep_, other->xlenstep_);
    std::swap(minylen_, other->minylen_);
    std::swap(maxylen_, other->maxylen_);
    std::swap(ylenstep_, other->ylenstep_);
    std::swap(minzlen_, other->minzlen_);
    std::swap(maxzlen_, other->maxzlen_);
    std::swap(zlenstep_, other->zlenstep_);
    std::swap(shapexlen_, other->shapexlen_);
    std::swap(shapezlen_, other->shapezlen_);
    std::swap(gapxlen_, other->gapxlen_);
    std::swap(gapylen_, other->gapylen_);
    std::swap(gapzlen_, other->gapzlen_);
    std::swap(shapeminxlen_, other->shapeminxlen_);
    std::swap(shapemaxxlen_, other->shapemaxxlen_);
    std::swap(shapexlenstep_, other->shapexlenstep_);
    std::swap(shapeminzlen_, other->shapeminzlen_);
    std::swap(shapemaxzlen_, other->shapemaxzlen_);
    std::swap(shapezlenstep_, other->shapezlenstep_);
    std::swap(gapminxlen_, other->gapminxlen_);
    std::swap(gapmaxxlen_, other->gapmaxxlen_);
    std::swap(gapxlenstep_, other->gapxlenstep_);
    std::swap(gapminylen_, other->gapminylen_);
    std::swap(gapmaxylen_, other->gapmaxylen_);
    std::swap(gapylenstep_, other->gapylenstep_);
    std::swap(gapminzlen_, other->gapminzlen_);
    std::swap(gapmaxzlen_, other->gapmaxzlen_);
    std::swap(gapzlenstep_, other->gapzlenstep_);
    std::swap(footcount_, other->footcount_);
    std::swap(issysfootrule_, other->issysfootrule_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(cabinetsizecode_, other->cabinetsizecode_);
    std::swap(cabinetsizename_, other->cabinetsizename_);
    std::swap(cabinetsizememo_, other->cabinetsizememo_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabinetSizeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabinetSizeInfo_descriptor_;
  metadata.reflection = JK_CabinetSizeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_CabinetSizeStructBoardInfo::kCabStructBoardIDFieldNumber;
const int JK_CabinetSizeStructBoardInfo::kCabinetSizeIDFieldNumber;
const int JK_CabinetSizeStructBoardInfo::kVerCodeFieldNumber;
const int JK_CabinetSizeStructBoardInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_CabinetSizeStructBoardInfo::JK_CabinetSizeStructBoardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_CabinetSizeStructBoardInfo::InitAsDefaultInstance() {
}

JK_CabinetSizeStructBoardInfo::JK_CabinetSizeStructBoardInfo(const JK_CabinetSizeStructBoardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_CabinetSizeStructBoardInfo::SharedCtor() {
  _cached_size_ = 0;
  cabstructboardid_ = 0;
  cabinetsizeid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_CabinetSizeStructBoardInfo::~JK_CabinetSizeStructBoardInfo() {
  SharedDtor();
}

void JK_CabinetSizeStructBoardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_CabinetSizeStructBoardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_CabinetSizeStructBoardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_CabinetSizeStructBoardInfo_descriptor_;
}

const JK_CabinetSizeStructBoardInfo& JK_CabinetSizeStructBoardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_CabinetSizeStructBoardInfo* JK_CabinetSizeStructBoardInfo::default_instance_ = NULL;

JK_CabinetSizeStructBoardInfo* JK_CabinetSizeStructBoardInfo::New() const {
  return new JK_CabinetSizeStructBoardInfo;
}

void JK_CabinetSizeStructBoardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabstructboardid_ = 0;
    cabinetsizeid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_CabinetSizeStructBoardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CabStructBoardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabstructboardid_)));
          set_has_cabstructboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabinetSizeID;
        break;
      }

      // required int32 CabinetSizeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabinetSizeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabinetsizeid_)));
          set_has_cabinetsizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_CabinetSizeStructBoardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CabStructBoardID = 1;
  if (has_cabstructboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabstructboardid(), output);
  }

  // required int32 CabinetSizeID = 2;
  if (has_cabinetsizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabinetsizeid(), output);
  }

  // required int64 VerCode = 3;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->vercode(), output);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_CabinetSizeStructBoardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CabStructBoardID = 1;
  if (has_cabstructboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabstructboardid(), target);
  }

  // required int32 CabinetSizeID = 2;
  if (has_cabinetsizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabinetsizeid(), target);
  }

  // required int64 VerCode = 3;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->vercode(), target);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_CabinetSizeStructBoardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CabStructBoardID = 1;
    if (has_cabstructboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabstructboardid());
    }

    // required int32 CabinetSizeID = 2;
    if (has_cabinetsizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabinetsizeid());
    }

    // required int64 VerCode = 3;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 4;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_CabinetSizeStructBoardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_CabinetSizeStructBoardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_CabinetSizeStructBoardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_CabinetSizeStructBoardInfo::MergeFrom(const JK_CabinetSizeStructBoardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabstructboardid()) {
      set_cabstructboardid(from.cabstructboardid());
    }
    if (from.has_cabinetsizeid()) {
      set_cabinetsizeid(from.cabinetsizeid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_CabinetSizeStructBoardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_CabinetSizeStructBoardInfo::CopyFrom(const JK_CabinetSizeStructBoardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_CabinetSizeStructBoardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void JK_CabinetSizeStructBoardInfo::Swap(JK_CabinetSizeStructBoardInfo* other) {
  if (other != this) {
    std::swap(cabstructboardid_, other->cabstructboardid_);
    std::swap(cabinetsizeid_, other->cabinetsizeid_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_CabinetSizeStructBoardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_CabinetSizeStructBoardInfo_descriptor_;
  metadata.reflection = JK_CabinetSizeStructBoardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DecorBoardFrameMapInfo::kDecorBoardIDFieldNumber;
const int JK_DecorBoardFrameMapInfo::kDecorFrameIDFieldNumber;
const int JK_DecorBoardFrameMapInfo::kIsDefaultFieldNumber;
const int JK_DecorBoardFrameMapInfo::kVerCodeFieldNumber;
const int JK_DecorBoardFrameMapInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_DecorBoardFrameMapInfo::JK_DecorBoardFrameMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DecorBoardFrameMapInfo::InitAsDefaultInstance() {
}

JK_DecorBoardFrameMapInfo::JK_DecorBoardFrameMapInfo(const JK_DecorBoardFrameMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DecorBoardFrameMapInfo::SharedCtor() {
  _cached_size_ = 0;
  decorboardid_ = 0;
  decorframeid_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DecorBoardFrameMapInfo::~JK_DecorBoardFrameMapInfo() {
  SharedDtor();
}

void JK_DecorBoardFrameMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DecorBoardFrameMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DecorBoardFrameMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DecorBoardFrameMapInfo_descriptor_;
}

const JK_DecorBoardFrameMapInfo& JK_DecorBoardFrameMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DecorBoardFrameMapInfo* JK_DecorBoardFrameMapInfo::default_instance_ = NULL;

JK_DecorBoardFrameMapInfo* JK_DecorBoardFrameMapInfo::New() const {
  return new JK_DecorBoardFrameMapInfo;
}

void JK_DecorBoardFrameMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    decorboardid_ = 0;
    decorframeid_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DecorBoardFrameMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DecorBoardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardid_)));
          set_has_decorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DecorFrameID;
        break;
      }

      // required int32 DecorFrameID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorFrameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorframeid_)));
          set_has_decorframeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DecorBoardFrameMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DecorBoardID = 1;
  if (has_decorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->decorboardid(), output);
  }

  // required int32 DecorFrameID = 2;
  if (has_decorframeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->decorframeid(), output);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdefault(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DecorBoardFrameMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DecorBoardID = 1;
  if (has_decorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->decorboardid(), target);
  }

  // required int32 DecorFrameID = 2;
  if (has_decorframeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->decorframeid(), target);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdefault(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DecorBoardFrameMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DecorBoardID = 1;
    if (has_decorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardid());
    }

    // required int32 DecorFrameID = 2;
    if (has_decorframeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorframeid());
    }

    // required bool IsDefault = 3;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DecorBoardFrameMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DecorBoardFrameMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DecorBoardFrameMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DecorBoardFrameMapInfo::MergeFrom(const JK_DecorBoardFrameMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decorboardid()) {
      set_decorboardid(from.decorboardid());
    }
    if (from.has_decorframeid()) {
      set_decorframeid(from.decorframeid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DecorBoardFrameMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DecorBoardFrameMapInfo::CopyFrom(const JK_DecorBoardFrameMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DecorBoardFrameMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void JK_DecorBoardFrameMapInfo::Swap(JK_DecorBoardFrameMapInfo* other) {
  if (other != this) {
    std::swap(decorboardid_, other->decorboardid_);
    std::swap(decorframeid_, other->decorframeid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DecorBoardFrameMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DecorBoardFrameMapInfo_descriptor_;
  metadata.reflection = JK_DecorBoardFrameMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DecorBoardInfo::kDecorBoardIDFieldNumber;
const int JK_DecorBoardInfo::kFactoryIDFieldNumber;
const int JK_DecorBoardInfo::kGroupIDFieldNumber;
const int JK_DecorBoardInfo::kIsDelFieldNumber;
const int JK_DecorBoardInfo::kIsActiveFieldNumber;
const int JK_DecorBoardInfo::kCreatorIDFieldNumber;
const int JK_DecorBoardInfo::kUpdaterIDFieldNumber;
const int JK_DecorBoardInfo::kCreateTimeFieldNumber;
const int JK_DecorBoardInfo::kUpdateTimeFieldNumber;
const int JK_DecorBoardInfo::kSourceTypeFieldNumber;
const int JK_DecorBoardInfo::kDefaultYPosFieldNumber;
const int JK_DecorBoardInfo::kDecorBoardCodeFieldNumber;
const int JK_DecorBoardInfo::kDecorBoardNameFieldNumber;
const int JK_DecorBoardInfo::kDecorBoardMemoFieldNumber;
const int JK_DecorBoardInfo::kVerCodeFieldNumber;
const int JK_DecorBoardInfo::kGTypeIDFieldNumber;
const int JK_DecorBoardInfo::kXFormulaFieldNumber;
const int JK_DecorBoardInfo::kYFormulaFieldNumber;
const int JK_DecorBoardInfo::kZLenFieldNumber;
const int JK_DecorBoardInfo::kIsCanResizeFieldNumber;
const int JK_DecorBoardInfo::kMinXLenFieldNumber;
const int JK_DecorBoardInfo::kMaxXLenFieldNumber;
const int JK_DecorBoardInfo::kXLenStepFieldNumber;
const int JK_DecorBoardInfo::kMinYLenFieldNumber;
const int JK_DecorBoardInfo::kMaxYLenFieldNumber;
const int JK_DecorBoardInfo::kYLenStepFieldNumber;
const int JK_DecorBoardInfo::kXDockFieldNumber;
const int JK_DecorBoardInfo::kYDockFieldNumber;
const int JK_DecorBoardInfo::kXOffsetFormulaFieldNumber;
const int JK_DecorBoardInfo::kYOffsetFormulaFieldNumber;
const int JK_DecorBoardInfo::kZOffsetFormulaFieldNumber;
const int JK_DecorBoardInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

JK_DecorBoardInfo::JK_DecorBoardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DecorBoardInfo::InitAsDefaultInstance() {
}

JK_DecorBoardInfo::JK_DecorBoardInfo(const JK_DecorBoardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DecorBoardInfo::SharedCtor() {
  _cached_size_ = 0;
  decorboardid_ = 0;
  factoryid_ = 0;
  groupid_ = 0;
  isdel_ = false;
  isactive_ = false;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  sourcetype_ = 0;
  defaultypos_ = 0;
  decorboardcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decorboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decorboardmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  gtypeid_ = 0;
  xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zlen_ = 0;
  iscanresize_ = false;
  minxlen_ = 0;
  maxxlen_ = 0;
  xlenstep_ = 0;
  minylen_ = 0;
  maxylen_ = 0;
  ylenstep_ = 0;
  xdock_ = 0;
  ydock_ = 0;
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  photoid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DecorBoardInfo::~JK_DecorBoardInfo() {
  SharedDtor();
}

void JK_DecorBoardInfo::SharedDtor() {
  if (decorboardcode_ != &::google::protobuf::internal::kEmptyString) {
    delete decorboardcode_;
  }
  if (decorboardname_ != &::google::protobuf::internal::kEmptyString) {
    delete decorboardname_;
  }
  if (decorboardmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete decorboardmemo_;
  }
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (this != default_instance_) {
  }
}

void JK_DecorBoardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DecorBoardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DecorBoardInfo_descriptor_;
}

const JK_DecorBoardInfo& JK_DecorBoardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DecorBoardInfo* JK_DecorBoardInfo::default_instance_ = NULL;

JK_DecorBoardInfo* JK_DecorBoardInfo::New() const {
  return new JK_DecorBoardInfo;
}

void JK_DecorBoardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    decorboardid_ = 0;
    factoryid_ = 0;
    groupid_ = 0;
    isdel_ = false;
    isactive_ = false;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    updatetime_ = GOOGLE_LONGLONG(0);
    sourcetype_ = 0;
    defaultypos_ = 0;
    if (has_decorboardcode()) {
      if (decorboardcode_ != &::google::protobuf::internal::kEmptyString) {
        decorboardcode_->clear();
      }
    }
    if (has_decorboardname()) {
      if (decorboardname_ != &::google::protobuf::internal::kEmptyString) {
        decorboardname_->clear();
      }
    }
    if (has_decorboardmemo()) {
      if (decorboardmemo_ != &::google::protobuf::internal::kEmptyString) {
        decorboardmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
    gtypeid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_xformula()) {
      if (xformula_ != &::google::protobuf::internal::kEmptyString) {
        xformula_->clear();
      }
    }
    if (has_yformula()) {
      if (yformula_ != &::google::protobuf::internal::kEmptyString) {
        yformula_->clear();
      }
    }
    zlen_ = 0;
    iscanresize_ = false;
    minxlen_ = 0;
    maxxlen_ = 0;
    xlenstep_ = 0;
    minylen_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    maxylen_ = 0;
    ylenstep_ = 0;
    xdock_ = 0;
    ydock_ = 0;
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
    photoid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DecorBoardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DecorBoardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardid_)));
          set_has_decorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_SourceType;
        break;
      }

      // required int32 SourceType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourcetype_)));
          set_has_sourcetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_DefaultYPos;
        break;
      }

      // required double DefaultYPos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultYPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultypos_)));
          set_has_defaultypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_DecorBoardCode;
        break;
      }

      // required string DecorBoardCode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorBoardCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decorboardcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->decorboardcode().data(), this->decorboardcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_DecorBoardName;
        break;
      }

      // required string DecorBoardName = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorBoardName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decorboardname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->decorboardname().data(), this->decorboardname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_DecorBoardMemo;
        break;
      }

      // required string DecorBoardMemo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorBoardMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decorboardmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->decorboardmemo().data(), this->decorboardmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_XFormula;
        break;
      }

      // required string XFormula = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xformula().data(), this->xformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_YFormula;
        break;
      }

      // required string YFormula = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yformula().data(), this->yformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_IsCanResize;
        break;
      }

      // required bool IsCanResize = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanResize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscanresize_)));
          set_has_iscanresize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_MinXLen;
        break;
      }

      // required double MinXLen = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minxlen_)));
          set_has_minxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_MaxXLen;
        break;
      }

      // required double MaxXLen = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxxlen_)));
          set_has_maxxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_XLenStep;
        break;
      }

      // required double XLenStep = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLenStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlenstep_)));
          set_has_xlenstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_MinYLen;
        break;
      }

      // required double MinYLen = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minylen_)));
          set_has_minylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_MaxYLen;
        break;
      }

      // required double MaxYLen = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxylen_)));
          set_has_maxylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_YLenStep;
        break;
      }

      // required double YLenStep = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLenStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylenstep_)));
          set_has_ylenstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_PhotoID;
        break;
      }

      // required int32 PhotoID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PhotoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DecorBoardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DecorBoardID = 1;
  if (has_decorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->decorboardid(), output);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdel(), output);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isactive(), output);
  }

  // required int32 CreatorID = 6;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->creatorid(), output);
  }

  // required int32 UpdaterID = 7;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->updaterid(), output);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->createtime(), output);
  }

  // required int64 UpdateTime = 9;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->updatetime(), output);
  }

  // required int32 SourceType = 10;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sourcetype(), output);
  }

  // required double DefaultYPos = 11;
  if (has_defaultypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->defaultypos(), output);
  }

  // required string DecorBoardCode = 12;
  if (has_decorboardcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorboardcode().data(), this->decorboardcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->decorboardcode(), output);
  }

  // required string DecorBoardName = 13;
  if (has_decorboardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorboardname().data(), this->decorboardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->decorboardname(), output);
  }

  // required string DecorBoardMemo = 14;
  if (has_decorboardmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorboardmemo().data(), this->decorboardmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->decorboardmemo(), output);
  }

  // required int64 VerCode = 15;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->vercode(), output);
  }

  // required int32 GTypeID = 16;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->gtypeid(), output);
  }

  // required string XFormula = 17;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->xformula(), output);
  }

  // required string YFormula = 18;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->yformula(), output);
  }

  // required double ZLen = 19;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->zlen(), output);
  }

  // required bool IsCanResize = 20;
  if (has_iscanresize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->iscanresize(), output);
  }

  // required double MinXLen = 21;
  if (has_minxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->minxlen(), output);
  }

  // required double MaxXLen = 22;
  if (has_maxxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->maxxlen(), output);
  }

  // required double XLenStep = 23;
  if (has_xlenstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->xlenstep(), output);
  }

  // required double MinYLen = 24;
  if (has_minylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->minylen(), output);
  }

  // required double MaxYLen = 25;
  if (has_maxylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->maxylen(), output);
  }

  // required double YLenStep = 26;
  if (has_ylenstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->ylenstep(), output);
  }

  // required int32 XDock = 27;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->xdock(), output);
  }

  // required int32 YDock = 28;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->ydock(), output);
  }

  // required string XOffsetFormula = 29;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 30;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 31;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->zoffsetformula(), output);
  }

  // required int32 PhotoID = 32;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DecorBoardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DecorBoardID = 1;
  if (has_decorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->decorboardid(), target);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdel(), target);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isactive(), target);
  }

  // required int32 CreatorID = 6;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->creatorid(), target);
  }

  // required int32 UpdaterID = 7;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->updaterid(), target);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->createtime(), target);
  }

  // required int64 UpdateTime = 9;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->updatetime(), target);
  }

  // required int32 SourceType = 10;
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sourcetype(), target);
  }

  // required double DefaultYPos = 11;
  if (has_defaultypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->defaultypos(), target);
  }

  // required string DecorBoardCode = 12;
  if (has_decorboardcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorboardcode().data(), this->decorboardcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->decorboardcode(), target);
  }

  // required string DecorBoardName = 13;
  if (has_decorboardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorboardname().data(), this->decorboardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->decorboardname(), target);
  }

  // required string DecorBoardMemo = 14;
  if (has_decorboardmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorboardmemo().data(), this->decorboardmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->decorboardmemo(), target);
  }

  // required int64 VerCode = 15;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->vercode(), target);
  }

  // required int32 GTypeID = 16;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->gtypeid(), target);
  }

  // required string XFormula = 17;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->xformula(), target);
  }

  // required string YFormula = 18;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->yformula(), target);
  }

  // required double ZLen = 19;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->zlen(), target);
  }

  // required bool IsCanResize = 20;
  if (has_iscanresize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->iscanresize(), target);
  }

  // required double MinXLen = 21;
  if (has_minxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->minxlen(), target);
  }

  // required double MaxXLen = 22;
  if (has_maxxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->maxxlen(), target);
  }

  // required double XLenStep = 23;
  if (has_xlenstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->xlenstep(), target);
  }

  // required double MinYLen = 24;
  if (has_minylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->minylen(), target);
  }

  // required double MaxYLen = 25;
  if (has_maxylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->maxylen(), target);
  }

  // required double YLenStep = 26;
  if (has_ylenstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->ylenstep(), target);
  }

  // required int32 XDock = 27;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->xdock(), target);
  }

  // required int32 YDock = 28;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->ydock(), target);
  }

  // required string XOffsetFormula = 29;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 30;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 31;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->zoffsetformula(), target);
  }

  // required int32 PhotoID = 32;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DecorBoardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DecorBoardID = 1;
    if (has_decorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardid());
    }

    // required int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 GroupID = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required bool IsDel = 4;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsActive = 5;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required int32 CreatorID = 6;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 7;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 8;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 UpdateTime = 9;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required int32 SourceType = 10;
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourcetype());
    }

    // required double DefaultYPos = 11;
    if (has_defaultypos()) {
      total_size += 1 + 8;
    }

    // required string DecorBoardCode = 12;
    if (has_decorboardcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decorboardcode());
    }

    // required string DecorBoardName = 13;
    if (has_decorboardname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decorboardname());
    }

    // required string DecorBoardMemo = 14;
    if (has_decorboardmemo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decorboardmemo());
    }

    // required int64 VerCode = 15;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 GTypeID = 16;
    if (has_gtypeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string XFormula = 17;
    if (has_xformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xformula());
    }

    // required string YFormula = 18;
    if (has_yformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yformula());
    }

    // required double ZLen = 19;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required bool IsCanResize = 20;
    if (has_iscanresize()) {
      total_size += 2 + 1;
    }

    // required double MinXLen = 21;
    if (has_minxlen()) {
      total_size += 2 + 8;
    }

    // required double MaxXLen = 22;
    if (has_maxxlen()) {
      total_size += 2 + 8;
    }

    // required double XLenStep = 23;
    if (has_xlenstep()) {
      total_size += 2 + 8;
    }

    // required double MinYLen = 24;
    if (has_minylen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double MaxYLen = 25;
    if (has_maxylen()) {
      total_size += 2 + 8;
    }

    // required double YLenStep = 26;
    if (has_ylenstep()) {
      total_size += 2 + 8;
    }

    // required int32 XDock = 27;
    if (has_xdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 28;
    if (has_ydock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required string XOffsetFormula = 29;
    if (has_xoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

    // required string YOffsetFormula = 30;
    if (has_yoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

    // required string ZOffsetFormula = 31;
    if (has_zoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

    // required int32 PhotoID = 32;
    if (has_photoid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DecorBoardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DecorBoardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DecorBoardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DecorBoardInfo::MergeFrom(const JK_DecorBoardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decorboardid()) {
      set_decorboardid(from.decorboardid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
    if (from.has_defaultypos()) {
      set_defaultypos(from.defaultypos());
    }
    if (from.has_decorboardcode()) {
      set_decorboardcode(from.decorboardcode());
    }
    if (from.has_decorboardname()) {
      set_decorboardname(from.decorboardname());
    }
    if (from.has_decorboardmemo()) {
      set_decorboardmemo(from.decorboardmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_xformula()) {
      set_xformula(from.xformula());
    }
    if (from.has_yformula()) {
      set_yformula(from.yformula());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_iscanresize()) {
      set_iscanresize(from.iscanresize());
    }
    if (from.has_minxlen()) {
      set_minxlen(from.minxlen());
    }
    if (from.has_maxxlen()) {
      set_maxxlen(from.maxxlen());
    }
    if (from.has_xlenstep()) {
      set_xlenstep(from.xlenstep());
    }
    if (from.has_minylen()) {
      set_minylen(from.minylen());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_maxylen()) {
      set_maxylen(from.maxylen());
    }
    if (from.has_ylenstep()) {
      set_ylenstep(from.ylenstep());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DecorBoardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DecorBoardInfo::CopyFrom(const JK_DecorBoardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DecorBoardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;

  return true;
}

void JK_DecorBoardInfo::Swap(JK_DecorBoardInfo* other) {
  if (other != this) {
    std::swap(decorboardid_, other->decorboardid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(groupid_, other->groupid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isactive_, other->isactive_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(defaultypos_, other->defaultypos_);
    std::swap(decorboardcode_, other->decorboardcode_);
    std::swap(decorboardname_, other->decorboardname_);
    std::swap(decorboardmemo_, other->decorboardmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(xformula_, other->xformula_);
    std::swap(yformula_, other->yformula_);
    std::swap(zlen_, other->zlen_);
    std::swap(iscanresize_, other->iscanresize_);
    std::swap(minxlen_, other->minxlen_);
    std::swap(maxxlen_, other->maxxlen_);
    std::swap(xlenstep_, other->xlenstep_);
    std::swap(minylen_, other->minylen_);
    std::swap(maxylen_, other->maxylen_);
    std::swap(ylenstep_, other->ylenstep_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DecorBoardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DecorBoardInfo_descriptor_;
  metadata.reflection = JK_DecorBoardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DecorBoardMatInfo::kDecorBoardIDFieldNumber;
const int JK_DecorBoardMatInfo::kMatIDFieldNumber;
const int JK_DecorBoardMatInfo::kMatGTypeFieldNumber;
const int JK_DecorBoardMatInfo::kIsDefaultFieldNumber;
const int JK_DecorBoardMatInfo::kVerCodeFieldNumber;
const int JK_DecorBoardMatInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_DecorBoardMatInfo::JK_DecorBoardMatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DecorBoardMatInfo::InitAsDefaultInstance() {
}

JK_DecorBoardMatInfo::JK_DecorBoardMatInfo(const JK_DecorBoardMatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DecorBoardMatInfo::SharedCtor() {
  _cached_size_ = 0;
  decorboardid_ = 0;
  matid_ = 0;
  matgtype_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DecorBoardMatInfo::~JK_DecorBoardMatInfo() {
  SharedDtor();
}

void JK_DecorBoardMatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DecorBoardMatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DecorBoardMatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DecorBoardMatInfo_descriptor_;
}

const JK_DecorBoardMatInfo& JK_DecorBoardMatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DecorBoardMatInfo* JK_DecorBoardMatInfo::default_instance_ = NULL;

JK_DecorBoardMatInfo* JK_DecorBoardMatInfo::New() const {
  return new JK_DecorBoardMatInfo;
}

void JK_DecorBoardMatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    decorboardid_ = 0;
    matid_ = 0;
    matgtype_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DecorBoardMatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DecorBoardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardid_)));
          set_has_decorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MatID;
        break;
      }

      // required int32 MatID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matid_)));
          set_has_matid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MatGType;
        break;
      }

      // required int32 MatGType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatGType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matgtype_)));
          set_has_matgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DecorBoardMatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DecorBoardID = 1;
  if (has_decorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->decorboardid(), output);
  }

  // required int32 MatID = 2;
  if (has_matid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->matid(), output);
  }

  // required int32 MatGType = 3;
  if (has_matgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->matgtype(), output);
  }

  // required bool IsDefault = 4;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdefault(), output);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->vercode(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DecorBoardMatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DecorBoardID = 1;
  if (has_decorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->decorboardid(), target);
  }

  // required int32 MatID = 2;
  if (has_matid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->matid(), target);
  }

  // required int32 MatGType = 3;
  if (has_matgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->matgtype(), target);
  }

  // required bool IsDefault = 4;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdefault(), target);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->vercode(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DecorBoardMatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DecorBoardID = 1;
    if (has_decorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardid());
    }

    // required int32 MatID = 2;
    if (has_matid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matid());
    }

    // required int32 MatGType = 3;
    if (has_matgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matgtype());
    }

    // required bool IsDefault = 4;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 5;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DecorBoardMatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DecorBoardMatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DecorBoardMatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DecorBoardMatInfo::MergeFrom(const JK_DecorBoardMatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decorboardid()) {
      set_decorboardid(from.decorboardid());
    }
    if (from.has_matid()) {
      set_matid(from.matid());
    }
    if (from.has_matgtype()) {
      set_matgtype(from.matgtype());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DecorBoardMatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DecorBoardMatInfo::CopyFrom(const JK_DecorBoardMatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DecorBoardMatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void JK_DecorBoardMatInfo::Swap(JK_DecorBoardMatInfo* other) {
  if (other != this) {
    std::swap(decorboardid_, other->decorboardid_);
    std::swap(matid_, other->matid_);
    std::swap(matgtype_, other->matgtype_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DecorBoardMatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DecorBoardMatInfo_descriptor_;
  metadata.reflection = JK_DecorBoardMatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DecorBoardUnitInfo::kDecorBoardUnitIDFieldNumber;
const int JK_DecorBoardUnitInfo::kIsDelFieldNumber;
const int JK_DecorBoardUnitInfo::kDecorBoardIDFieldNumber;
const int JK_DecorBoardUnitInfo::kSplitTypeFieldNumber;
const int JK_DecorBoardUnitInfo::kSkinDirectionFieldNumber;
const int JK_DecorBoardUnitInfo::kArcXFieldNumber;
const int JK_DecorBoardUnitInfo::kArcYFieldNumber;
const int JK_DecorBoardUnitInfo::kArcZFieldNumber;
const int JK_DecorBoardUnitInfo::kXFormulaFieldNumber;
const int JK_DecorBoardUnitInfo::kYFormulaFieldNumber;
const int JK_DecorBoardUnitInfo::kXDockFieldNumber;
const int JK_DecorBoardUnitInfo::kYDockFieldNumber;
const int JK_DecorBoardUnitInfo::kZDockFieldNumber;
const int JK_DecorBoardUnitInfo::kXOffsetFormulaFieldNumber;
const int JK_DecorBoardUnitInfo::kYOffsetFormulaFieldNumber;
const int JK_DecorBoardUnitInfo::kZOffsetFormulaFieldNumber;
const int JK_DecorBoardUnitInfo::kDecorBoardUnitIndexFieldNumber;
const int JK_DecorBoardUnitInfo::kDecorBoardUnitNameFieldNumber;
const int JK_DecorBoardUnitInfo::kDecorBoardUnitMemoFieldNumber;
const int JK_DecorBoardUnitInfo::kVerCodeFieldNumber;
const int JK_DecorBoardUnitInfo::kFactoryIDFieldNumber;
const int JK_DecorBoardUnitInfo::kCreatorIDFieldNumber;
const int JK_DecorBoardUnitInfo::kUpdaterIDFieldNumber;
const int JK_DecorBoardUnitInfo::kCreateTimeFieldNumber;
const int JK_DecorBoardUnitInfo::kUpdateTimeFieldNumber;
const int JK_DecorBoardUnitInfo::kIsUseDefaultMatFieldNumber;
#endif  // !_MSC_VER

JK_DecorBoardUnitInfo::JK_DecorBoardUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DecorBoardUnitInfo::InitAsDefaultInstance() {
}

JK_DecorBoardUnitInfo::JK_DecorBoardUnitInfo(const JK_DecorBoardUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DecorBoardUnitInfo::SharedCtor() {
  _cached_size_ = 0;
  decorboardunitid_ = 0;
  isdel_ = false;
  decorboardid_ = 0;
  splittype_ = 0;
  skindirection_ = 0;
  arcx_ = 0;
  arcy_ = 0;
  arcz_ = 0;
  xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decorboardunitindex_ = 0;
  decorboardunitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decorboardunitmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  isusedefaultmat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DecorBoardUnitInfo::~JK_DecorBoardUnitInfo() {
  SharedDtor();
}

void JK_DecorBoardUnitInfo::SharedDtor() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (decorboardunitname_ != &::google::protobuf::internal::kEmptyString) {
    delete decorboardunitname_;
  }
  if (decorboardunitmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete decorboardunitmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_DecorBoardUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DecorBoardUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DecorBoardUnitInfo_descriptor_;
}

const JK_DecorBoardUnitInfo& JK_DecorBoardUnitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DecorBoardUnitInfo* JK_DecorBoardUnitInfo::default_instance_ = NULL;

JK_DecorBoardUnitInfo* JK_DecorBoardUnitInfo::New() const {
  return new JK_DecorBoardUnitInfo;
}

void JK_DecorBoardUnitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    decorboardunitid_ = 0;
    isdel_ = false;
    decorboardid_ = 0;
    splittype_ = 0;
    skindirection_ = 0;
    arcx_ = 0;
    arcy_ = 0;
    arcz_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_xformula()) {
      if (xformula_ != &::google::protobuf::internal::kEmptyString) {
        xformula_->clear();
      }
    }
    if (has_yformula()) {
      if (yformula_ != &::google::protobuf::internal::kEmptyString) {
        yformula_->clear();
      }
    }
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    decorboardunitindex_ = 0;
    if (has_decorboardunitname()) {
      if (decorboardunitname_ != &::google::protobuf::internal::kEmptyString) {
        decorboardunitname_->clear();
      }
    }
    if (has_decorboardunitmemo()) {
      if (decorboardunitmemo_ != &::google::protobuf::internal::kEmptyString) {
        decorboardunitmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    updatetime_ = GOOGLE_LONGLONG(0);
    isusedefaultmat_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DecorBoardUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DecorBoardUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardunitid_)));
          set_has_decorboardunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DecorBoardID;
        break;
      }

      // required int32 DecorBoardID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardid_)));
          set_has_decorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SplitType;
        break;
      }

      // required int32 SplitType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SplitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &splittype_)));
          set_has_splittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SkinDirection;
        break;
      }

      // required int32 SkinDirection = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkinDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skindirection_)));
          set_has_skindirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_ArcX;
        break;
      }

      // required double ArcX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcx_)));
          set_has_arcx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_ArcY;
        break;
      }

      // required double ArcY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcy_)));
          set_has_arcy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_ArcZ;
        break;
      }

      // required double ArcZ = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcz_)));
          set_has_arcz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_XFormula;
        break;
      }

      // required string XFormula = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xformula().data(), this->xformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_YFormula;
        break;
      }

      // required string YFormula = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yformula().data(), this->yformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_DecorBoardUnitIndex;
        break;
      }

      // required int32 DecorBoardUnitIndex = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorBoardUnitIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardunitindex_)));
          set_has_decorboardunitindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_DecorBoardUnitName;
        break;
      }

      // required string DecorBoardUnitName = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorBoardUnitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decorboardunitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->decorboardunitname().data(), this->decorboardunitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_DecorBoardUnitMemo;
        break;
      }

      // required string DecorBoardUnitMemo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorBoardUnitMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decorboardunitmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->decorboardunitmemo().data(), this->decorboardunitmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_IsUseDefaultMat;
        break;
      }

      // required bool IsUseDefaultMat = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUseDefaultMat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusedefaultmat_)));
          set_has_isusedefaultmat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DecorBoardUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DecorBoardUnitID = 1;
  if (has_decorboardunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->decorboardunitid(), output);
  }

  // required bool IsDel = 2;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isdel(), output);
  }

  // required int32 DecorBoardID = 3;
  if (has_decorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->decorboardid(), output);
  }

  // required int32 SplitType = 4;
  if (has_splittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->splittype(), output);
  }

  // required int32 SkinDirection = 5;
  if (has_skindirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skindirection(), output);
  }

  // required double ArcX = 6;
  if (has_arcx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->arcx(), output);
  }

  // required double ArcY = 7;
  if (has_arcy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->arcy(), output);
  }

  // required double ArcZ = 8;
  if (has_arcz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->arcz(), output);
  }

  // required string XFormula = 9;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->xformula(), output);
  }

  // required string YFormula = 10;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->yformula(), output);
  }

  // required int32 XDock = 11;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->xdock(), output);
  }

  // required int32 YDock = 12;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ydock(), output);
  }

  // required int32 ZDock = 13;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->zdock(), output);
  }

  // required string XOffsetFormula = 14;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 15;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 16;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->zoffsetformula(), output);
  }

  // required int32 DecorBoardUnitIndex = 17;
  if (has_decorboardunitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->decorboardunitindex(), output);
  }

  // required string DecorBoardUnitName = 18;
  if (has_decorboardunitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorboardunitname().data(), this->decorboardunitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->decorboardunitname(), output);
  }

  // required string DecorBoardUnitMemo = 19;
  if (has_decorboardunitmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorboardunitmemo().data(), this->decorboardunitmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->decorboardunitmemo(), output);
  }

  // required int64 VerCode = 20;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->vercode(), output);
  }

  // required int32 FactoryID = 21;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->factoryid(), output);
  }

  // required int32 CreatorID = 22;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->creatorid(), output);
  }

  // required int32 UpdaterID = 23;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->updaterid(), output);
  }

  // required int64 CreateTime = 24;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->createtime(), output);
  }

  // required int64 UpdateTime = 25;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->updatetime(), output);
  }

  // required bool IsUseDefaultMat = 26;
  if (has_isusedefaultmat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->isusedefaultmat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DecorBoardUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DecorBoardUnitID = 1;
  if (has_decorboardunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->decorboardunitid(), target);
  }

  // required bool IsDel = 2;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isdel(), target);
  }

  // required int32 DecorBoardID = 3;
  if (has_decorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->decorboardid(), target);
  }

  // required int32 SplitType = 4;
  if (has_splittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->splittype(), target);
  }

  // required int32 SkinDirection = 5;
  if (has_skindirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skindirection(), target);
  }

  // required double ArcX = 6;
  if (has_arcx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->arcx(), target);
  }

  // required double ArcY = 7;
  if (has_arcy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->arcy(), target);
  }

  // required double ArcZ = 8;
  if (has_arcz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->arcz(), target);
  }

  // required string XFormula = 9;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->xformula(), target);
  }

  // required string YFormula = 10;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->yformula(), target);
  }

  // required int32 XDock = 11;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->xdock(), target);
  }

  // required int32 YDock = 12;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ydock(), target);
  }

  // required int32 ZDock = 13;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->zdock(), target);
  }

  // required string XOffsetFormula = 14;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 15;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 16;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->zoffsetformula(), target);
  }

  // required int32 DecorBoardUnitIndex = 17;
  if (has_decorboardunitindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->decorboardunitindex(), target);
  }

  // required string DecorBoardUnitName = 18;
  if (has_decorboardunitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorboardunitname().data(), this->decorboardunitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->decorboardunitname(), target);
  }

  // required string DecorBoardUnitMemo = 19;
  if (has_decorboardunitmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorboardunitmemo().data(), this->decorboardunitmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->decorboardunitmemo(), target);
  }

  // required int64 VerCode = 20;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->vercode(), target);
  }

  // required int32 FactoryID = 21;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->factoryid(), target);
  }

  // required int32 CreatorID = 22;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->creatorid(), target);
  }

  // required int32 UpdaterID = 23;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->updaterid(), target);
  }

  // required int64 CreateTime = 24;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->createtime(), target);
  }

  // required int64 UpdateTime = 25;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->updatetime(), target);
  }

  // required bool IsUseDefaultMat = 26;
  if (has_isusedefaultmat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->isusedefaultmat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DecorBoardUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DecorBoardUnitID = 1;
    if (has_decorboardunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardunitid());
    }

    // required bool IsDel = 2;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int32 DecorBoardID = 3;
    if (has_decorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardid());
    }

    // required int32 SplitType = 4;
    if (has_splittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->splittype());
    }

    // required int32 SkinDirection = 5;
    if (has_skindirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skindirection());
    }

    // required double ArcX = 6;
    if (has_arcx()) {
      total_size += 1 + 8;
    }

    // required double ArcY = 7;
    if (has_arcy()) {
      total_size += 1 + 8;
    }

    // required double ArcZ = 8;
    if (has_arcz()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string XFormula = 9;
    if (has_xformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xformula());
    }

    // required string YFormula = 10;
    if (has_yformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yformula());
    }

    // required int32 XDock = 11;
    if (has_xdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 12;
    if (has_ydock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 13;
    if (has_zdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // required string XOffsetFormula = 14;
    if (has_xoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

    // required string YOffsetFormula = 15;
    if (has_yoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

    // required string ZOffsetFormula = 16;
    if (has_zoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 DecorBoardUnitIndex = 17;
    if (has_decorboardunitindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardunitindex());
    }

    // required string DecorBoardUnitName = 18;
    if (has_decorboardunitname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decorboardunitname());
    }

    // required string DecorBoardUnitMemo = 19;
    if (has_decorboardunitmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decorboardunitmemo());
    }

    // required int64 VerCode = 20;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 21;
    if (has_factoryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 22;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 23;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 24;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int64 UpdateTime = 25;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required bool IsUseDefaultMat = 26;
    if (has_isusedefaultmat()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DecorBoardUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DecorBoardUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DecorBoardUnitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DecorBoardUnitInfo::MergeFrom(const JK_DecorBoardUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decorboardunitid()) {
      set_decorboardunitid(from.decorboardunitid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_decorboardid()) {
      set_decorboardid(from.decorboardid());
    }
    if (from.has_splittype()) {
      set_splittype(from.splittype());
    }
    if (from.has_skindirection()) {
      set_skindirection(from.skindirection());
    }
    if (from.has_arcx()) {
      set_arcx(from.arcx());
    }
    if (from.has_arcy()) {
      set_arcy(from.arcy());
    }
    if (from.has_arcz()) {
      set_arcz(from.arcz());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_xformula()) {
      set_xformula(from.xformula());
    }
    if (from.has_yformula()) {
      set_yformula(from.yformula());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_decorboardunitindex()) {
      set_decorboardunitindex(from.decorboardunitindex());
    }
    if (from.has_decorboardunitname()) {
      set_decorboardunitname(from.decorboardunitname());
    }
    if (from.has_decorboardunitmemo()) {
      set_decorboardunitmemo(from.decorboardunitmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_isusedefaultmat()) {
      set_isusedefaultmat(from.isusedefaultmat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DecorBoardUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DecorBoardUnitInfo::CopyFrom(const JK_DecorBoardUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DecorBoardUnitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x03ffffff) != 0x03ffffff) return false;

  return true;
}

void JK_DecorBoardUnitInfo::Swap(JK_DecorBoardUnitInfo* other) {
  if (other != this) {
    std::swap(decorboardunitid_, other->decorboardunitid_);
    std::swap(isdel_, other->isdel_);
    std::swap(decorboardid_, other->decorboardid_);
    std::swap(splittype_, other->splittype_);
    std::swap(skindirection_, other->skindirection_);
    std::swap(arcx_, other->arcx_);
    std::swap(arcy_, other->arcy_);
    std::swap(arcz_, other->arcz_);
    std::swap(xformula_, other->xformula_);
    std::swap(yformula_, other->yformula_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(decorboardunitindex_, other->decorboardunitindex_);
    std::swap(decorboardunitname_, other->decorboardunitname_);
    std::swap(decorboardunitmemo_, other->decorboardunitmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(isusedefaultmat_, other->isusedefaultmat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DecorBoardUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DecorBoardUnitInfo_descriptor_;
  metadata.reflection = JK_DecorBoardUnitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DecorBoardUnitMatInfo::kDecorBoardUnitIDFieldNumber;
const int JK_DecorBoardUnitMatInfo::kMatIDFieldNumber;
const int JK_DecorBoardUnitMatInfo::kMatGTypeFieldNumber;
const int JK_DecorBoardUnitMatInfo::kIsDefaultFieldNumber;
const int JK_DecorBoardUnitMatInfo::kDefaultSealRuleIDFieldNumber;
const int JK_DecorBoardUnitMatInfo::kSkinDirectionFieldNumber;
const int JK_DecorBoardUnitMatInfo::kVerCodeFieldNumber;
const int JK_DecorBoardUnitMatInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_DecorBoardUnitMatInfo::JK_DecorBoardUnitMatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DecorBoardUnitMatInfo::InitAsDefaultInstance() {
}

JK_DecorBoardUnitMatInfo::JK_DecorBoardUnitMatInfo(const JK_DecorBoardUnitMatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DecorBoardUnitMatInfo::SharedCtor() {
  _cached_size_ = 0;
  decorboardunitid_ = 0;
  matid_ = 0;
  matgtype_ = 0;
  isdefault_ = false;
  defaultsealruleid_ = 0;
  skindirection_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DecorBoardUnitMatInfo::~JK_DecorBoardUnitMatInfo() {
  SharedDtor();
}

void JK_DecorBoardUnitMatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DecorBoardUnitMatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DecorBoardUnitMatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DecorBoardUnitMatInfo_descriptor_;
}

const JK_DecorBoardUnitMatInfo& JK_DecorBoardUnitMatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DecorBoardUnitMatInfo* JK_DecorBoardUnitMatInfo::default_instance_ = NULL;

JK_DecorBoardUnitMatInfo* JK_DecorBoardUnitMatInfo::New() const {
  return new JK_DecorBoardUnitMatInfo;
}

void JK_DecorBoardUnitMatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    decorboardunitid_ = 0;
    matid_ = 0;
    matgtype_ = 0;
    isdefault_ = false;
    defaultsealruleid_ = 0;
    skindirection_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DecorBoardUnitMatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DecorBoardUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardunitid_)));
          set_has_decorboardunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MatID;
        break;
      }

      // required int32 MatID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matid_)));
          set_has_matid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MatGType;
        break;
      }

      // required int32 MatGType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatGType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matgtype_)));
          set_has_matgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DefaultSealRuleID;
        break;
      }

      // required int32 DefaultSealRuleID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefaultSealRuleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defaultsealruleid_)));
          set_has_defaultsealruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_SkinDirection;
        break;
      }

      // required int32 SkinDirection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkinDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skindirection_)));
          set_has_skindirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DecorBoardUnitMatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DecorBoardUnitID = 1;
  if (has_decorboardunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->decorboardunitid(), output);
  }

  // required int32 MatID = 2;
  if (has_matid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->matid(), output);
  }

  // required int32 MatGType = 3;
  if (has_matgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->matgtype(), output);
  }

  // required bool IsDefault = 4;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdefault(), output);
  }

  // required int32 DefaultSealRuleID = 5;
  if (has_defaultsealruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->defaultsealruleid(), output);
  }

  // required int32 SkinDirection = 6;
  if (has_skindirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skindirection(), output);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vercode(), output);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DecorBoardUnitMatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DecorBoardUnitID = 1;
  if (has_decorboardunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->decorboardunitid(), target);
  }

  // required int32 MatID = 2;
  if (has_matid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->matid(), target);
  }

  // required int32 MatGType = 3;
  if (has_matgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->matgtype(), target);
  }

  // required bool IsDefault = 4;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdefault(), target);
  }

  // required int32 DefaultSealRuleID = 5;
  if (has_defaultsealruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->defaultsealruleid(), target);
  }

  // required int32 SkinDirection = 6;
  if (has_skindirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skindirection(), target);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vercode(), target);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DecorBoardUnitMatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DecorBoardUnitID = 1;
    if (has_decorboardunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardunitid());
    }

    // required int32 MatID = 2;
    if (has_matid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matid());
    }

    // required int32 MatGType = 3;
    if (has_matgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matgtype());
    }

    // required bool IsDefault = 4;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int32 DefaultSealRuleID = 5;
    if (has_defaultsealruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defaultsealruleid());
    }

    // required int32 SkinDirection = 6;
    if (has_skindirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skindirection());
    }

    // required int64 VerCode = 7;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 8;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DecorBoardUnitMatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DecorBoardUnitMatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DecorBoardUnitMatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DecorBoardUnitMatInfo::MergeFrom(const JK_DecorBoardUnitMatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decorboardunitid()) {
      set_decorboardunitid(from.decorboardunitid());
    }
    if (from.has_matid()) {
      set_matid(from.matid());
    }
    if (from.has_matgtype()) {
      set_matgtype(from.matgtype());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_defaultsealruleid()) {
      set_defaultsealruleid(from.defaultsealruleid());
    }
    if (from.has_skindirection()) {
      set_skindirection(from.skindirection());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DecorBoardUnitMatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DecorBoardUnitMatInfo::CopyFrom(const JK_DecorBoardUnitMatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DecorBoardUnitMatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void JK_DecorBoardUnitMatInfo::Swap(JK_DecorBoardUnitMatInfo* other) {
  if (other != this) {
    std::swap(decorboardunitid_, other->decorboardunitid_);
    std::swap(matid_, other->matid_);
    std::swap(matgtype_, other->matgtype_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(defaultsealruleid_, other->defaultsealruleid_);
    std::swap(skindirection_, other->skindirection_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DecorBoardUnitMatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DecorBoardUnitMatInfo_descriptor_;
  metadata.reflection = JK_DecorBoardUnitMatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DecorBoardUnitSealInfo::kDecorBoardUnitIDFieldNumber;
const int JK_DecorBoardUnitSealInfo::kSealIndexFieldNumber;
const int JK_DecorBoardUnitSealInfo::kSealTypeFieldNumber;
const int JK_DecorBoardUnitSealInfo::kDefaultMaterialIDFieldNumber;
const int JK_DecorBoardUnitSealInfo::kVerCodeFieldNumber;
const int JK_DecorBoardUnitSealInfo::kFactoryIDFieldNumber;
const int JK_DecorBoardUnitSealInfo::kCreatorIDFieldNumber;
const int JK_DecorBoardUnitSealInfo::kUpdaterIDFieldNumber;
const int JK_DecorBoardUnitSealInfo::kCreateTimeFieldNumber;
const int JK_DecorBoardUnitSealInfo::kUpdateTimeFieldNumber;
const int JK_DecorBoardUnitSealInfo::kSealOrderFieldNumber;
const int JK_DecorBoardUnitSealInfo::kDecorBoardUnitSealIDFieldNumber;
#endif  // !_MSC_VER

JK_DecorBoardUnitSealInfo::JK_DecorBoardUnitSealInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DecorBoardUnitSealInfo::InitAsDefaultInstance() {
}

JK_DecorBoardUnitSealInfo::JK_DecorBoardUnitSealInfo(const JK_DecorBoardUnitSealInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DecorBoardUnitSealInfo::SharedCtor() {
  _cached_size_ = 0;
  decorboardunitid_ = 0;
  sealindex_ = 0;
  sealtype_ = 0;
  defaultmaterialid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  sealorder_ = 0;
  decorboardunitsealid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DecorBoardUnitSealInfo::~JK_DecorBoardUnitSealInfo() {
  SharedDtor();
}

void JK_DecorBoardUnitSealInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DecorBoardUnitSealInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DecorBoardUnitSealInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DecorBoardUnitSealInfo_descriptor_;
}

const JK_DecorBoardUnitSealInfo& JK_DecorBoardUnitSealInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DecorBoardUnitSealInfo* JK_DecorBoardUnitSealInfo::default_instance_ = NULL;

JK_DecorBoardUnitSealInfo* JK_DecorBoardUnitSealInfo::New() const {
  return new JK_DecorBoardUnitSealInfo;
}

void JK_DecorBoardUnitSealInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    decorboardunitid_ = 0;
    sealindex_ = 0;
    sealtype_ = 0;
    defaultmaterialid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    sealorder_ = 0;
    decorboardunitsealid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DecorBoardUnitSealInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DecorBoardUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardunitid_)));
          set_has_decorboardunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SealIndex;
        break;
      }

      // required int32 SealIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealindex_)));
          set_has_sealindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SealType;
        break;
      }

      // required int32 SealType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealtype_)));
          set_has_sealtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DefaultMaterialID;
        break;
      }

      // required int32 DefaultMaterialID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefaultMaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defaultmaterialid_)));
          set_has_defaultmaterialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SealOrder;
        break;
      }

      // required int32 SealOrder = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealorder_)));
          set_has_sealorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_DecorBoardUnitSealID;
        break;
      }

      // required int32 DecorBoardUnitSealID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecorBoardUnitSealID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardunitsealid_)));
          set_has_decorboardunitsealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DecorBoardUnitSealInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DecorBoardUnitID = 1;
  if (has_decorboardunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->decorboardunitid(), output);
  }

  // required int32 SealIndex = 2;
  if (has_sealindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sealindex(), output);
  }

  // required int32 SealType = 3;
  if (has_sealtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sealtype(), output);
  }

  // required int32 DefaultMaterialID = 4;
  if (has_defaultmaterialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->defaultmaterialid(), output);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->vercode(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int32 CreatorID = 7;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->creatorid(), output);
  }

  // required int32 UpdaterID = 8;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->updaterid(), output);
  }

  // required int64 CreateTime = 9;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->createtime(), output);
  }

  // required int64 UpdateTime = 10;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->updatetime(), output);
  }

  // required int32 SealOrder = 11;
  if (has_sealorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sealorder(), output);
  }

  // required int32 DecorBoardUnitSealID = 12;
  if (has_decorboardunitsealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->decorboardunitsealid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DecorBoardUnitSealInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DecorBoardUnitID = 1;
  if (has_decorboardunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->decorboardunitid(), target);
  }

  // required int32 SealIndex = 2;
  if (has_sealindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sealindex(), target);
  }

  // required int32 SealType = 3;
  if (has_sealtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sealtype(), target);
  }

  // required int32 DefaultMaterialID = 4;
  if (has_defaultmaterialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->defaultmaterialid(), target);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->vercode(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int32 CreatorID = 7;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->creatorid(), target);
  }

  // required int32 UpdaterID = 8;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->updaterid(), target);
  }

  // required int64 CreateTime = 9;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->createtime(), target);
  }

  // required int64 UpdateTime = 10;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->updatetime(), target);
  }

  // required int32 SealOrder = 11;
  if (has_sealorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sealorder(), target);
  }

  // required int32 DecorBoardUnitSealID = 12;
  if (has_decorboardunitsealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->decorboardunitsealid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DecorBoardUnitSealInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DecorBoardUnitID = 1;
    if (has_decorboardunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardunitid());
    }

    // required int32 SealIndex = 2;
    if (has_sealindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealindex());
    }

    // required int32 SealType = 3;
    if (has_sealtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealtype());
    }

    // required int32 DefaultMaterialID = 4;
    if (has_defaultmaterialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defaultmaterialid());
    }

    // required int64 VerCode = 5;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 7;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 8;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 CreateTime = 9;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 10;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required int32 SealOrder = 11;
    if (has_sealorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealorder());
    }

    // required int32 DecorBoardUnitSealID = 12;
    if (has_decorboardunitsealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardunitsealid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DecorBoardUnitSealInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DecorBoardUnitSealInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DecorBoardUnitSealInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DecorBoardUnitSealInfo::MergeFrom(const JK_DecorBoardUnitSealInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decorboardunitid()) {
      set_decorboardunitid(from.decorboardunitid());
    }
    if (from.has_sealindex()) {
      set_sealindex(from.sealindex());
    }
    if (from.has_sealtype()) {
      set_sealtype(from.sealtype());
    }
    if (from.has_defaultmaterialid()) {
      set_defaultmaterialid(from.defaultmaterialid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_sealorder()) {
      set_sealorder(from.sealorder());
    }
    if (from.has_decorboardunitsealid()) {
      set_decorboardunitsealid(from.decorboardunitsealid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DecorBoardUnitSealInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DecorBoardUnitSealInfo::CopyFrom(const JK_DecorBoardUnitSealInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DecorBoardUnitSealInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void JK_DecorBoardUnitSealInfo::Swap(JK_DecorBoardUnitSealInfo* other) {
  if (other != this) {
    std::swap(decorboardunitid_, other->decorboardunitid_);
    std::swap(sealindex_, other->sealindex_);
    std::swap(sealtype_, other->sealtype_);
    std::swap(defaultmaterialid_, other->defaultmaterialid_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(sealorder_, other->sealorder_);
    std::swap(decorboardunitsealid_, other->decorboardunitsealid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DecorBoardUnitSealInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DecorBoardUnitSealInfo_descriptor_;
  metadata.reflection = JK_DecorBoardUnitSealInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DecorInfo::kDecorIDFieldNumber;
const int JK_DecorInfo::kGroupIDFieldNumber;
const int JK_DecorInfo::kFactoryIDFieldNumber;
const int JK_DecorInfo::kIsActiveFieldNumber;
const int JK_DecorInfo::kIsSplitFieldNumber;
const int JK_DecorInfo::kIsDelFieldNumber;
const int JK_DecorInfo::kSupplyTypeFieldNumber;
const int JK_DecorInfo::kGTypeIDFieldNumber;
const int JK_DecorInfo::kShowIDFieldNumber;
const int JK_DecorInfo::kSkinIDFieldNumber;
const int JK_DecorInfo::kModelIDFieldNumber;
const int JK_DecorInfo::kXLenFieldNumber;
const int JK_DecorInfo::kYLenFieldNumber;
const int JK_DecorInfo::kZLenFieldNumber;
const int JK_DecorInfo::kCreatorIDFieldNumber;
const int JK_DecorInfo::kUpdaterIDFieldNumber;
const int JK_DecorInfo::kCreateTimeFieldNumber;
const int JK_DecorInfo::kUpdateTimeFieldNumber;
const int JK_DecorInfo::kDecorCodeFieldNumber;
const int JK_DecorInfo::kDecorNameFieldNumber;
const int JK_DecorInfo::kDecorMemoFieldNumber;
const int JK_DecorInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_DecorInfo::JK_DecorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DecorInfo::InitAsDefaultInstance() {
}

JK_DecorInfo::JK_DecorInfo(const JK_DecorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DecorInfo::SharedCtor() {
  _cached_size_ = 0;
  decorid_ = 0;
  groupid_ = 0;
  factoryid_ = 0;
  isactive_ = false;
  issplit_ = false;
  isdel_ = false;
  supplytype_ = 0;
  gtypeid_ = 0;
  showid_ = 0;
  skinid_ = 0;
  modelid_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  decorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decormemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DecorInfo::~JK_DecorInfo() {
  SharedDtor();
}

void JK_DecorInfo::SharedDtor() {
  if (decorcode_ != &::google::protobuf::internal::kEmptyString) {
    delete decorcode_;
  }
  if (decorname_ != &::google::protobuf::internal::kEmptyString) {
    delete decorname_;
  }
  if (decormemo_ != &::google::protobuf::internal::kEmptyString) {
    delete decormemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_DecorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DecorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DecorInfo_descriptor_;
}

const JK_DecorInfo& JK_DecorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DecorInfo* JK_DecorInfo::default_instance_ = NULL;

JK_DecorInfo* JK_DecorInfo::New() const {
  return new JK_DecorInfo;
}

void JK_DecorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    decorid_ = 0;
    groupid_ = 0;
    factoryid_ = 0;
    isactive_ = false;
    issplit_ = false;
    isdel_ = false;
    supplytype_ = 0;
    gtypeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    showid_ = 0;
    skinid_ = 0;
    modelid_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_decorcode()) {
      if (decorcode_ != &::google::protobuf::internal::kEmptyString) {
        decorcode_->clear();
      }
    }
    if (has_decorname()) {
      if (decorname_ != &::google::protobuf::internal::kEmptyString) {
        decorname_->clear();
      }
    }
    if (has_decormemo()) {
      if (decormemo_ != &::google::protobuf::internal::kEmptyString) {
        decormemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DecorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DecorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorid_)));
          set_has_decorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsSplit;
        break;
      }

      // required bool IsSplit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSplit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issplit_)));
          set_has_issplit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ShowID;
        break;
      }

      // required int32 ShowID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_SkinID;
        break;
      }

      // required int32 SkinID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkinID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skinid_)));
          set_has_skinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ModelID;
        break;
      }

      // required int32 ModelID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_XLen;
        break;
      }

      // required double XLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_YLen;
        break;
      }

      // required double YLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_DecorCode;
        break;
      }

      // required string DecorCode = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decorcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->decorcode().data(), this->decorcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_DecorName;
        break;
      }

      // required string DecorName = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->decorname().data(), this->decorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_DecorMemo;
        break;
      }

      // required string DecorMemo = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decormemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->decormemo().data(), this->decormemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DecorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DecorID = 1;
  if (has_decorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->decorid(), output);
  }

  // required int32 GroupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->factoryid(), output);
  }

  // required bool IsActive = 4;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isactive(), output);
  }

  // required bool IsSplit = 5;
  if (has_issplit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->issplit(), output);
  }

  // required bool IsDel = 6;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isdel(), output);
  }

  // required int32 SupplyType = 7;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->supplytype(), output);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gtypeid(), output);
  }

  // required int32 ShowID = 9;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->showid(), output);
  }

  // required int32 SkinID = 10;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->skinid(), output);
  }

  // required int32 ModelID = 11;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->modelid(), output);
  }

  // required double XLen = 12;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->xlen(), output);
  }

  // required double YLen = 13;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->ylen(), output);
  }

  // required double ZLen = 14;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->zlen(), output);
  }

  // required int32 CreatorID = 15;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->creatorid(), output);
  }

  // required int32 UpdaterID = 16;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->updaterid(), output);
  }

  // required int64 CreateTime = 17;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->createtime(), output);
  }

  // required int64 UpdateTime = 18;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->updatetime(), output);
  }

  // required string DecorCode = 19;
  if (has_decorcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorcode().data(), this->decorcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->decorcode(), output);
  }

  // required string DecorName = 20;
  if (has_decorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorname().data(), this->decorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->decorname(), output);
  }

  // required string DecorMemo = 21;
  if (has_decormemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decormemo().data(), this->decormemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->decormemo(), output);
  }

  // required int64 VerCode = 22;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DecorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DecorID = 1;
  if (has_decorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->decorid(), target);
  }

  // required int32 GroupID = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->factoryid(), target);
  }

  // required bool IsActive = 4;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isactive(), target);
  }

  // required bool IsSplit = 5;
  if (has_issplit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->issplit(), target);
  }

  // required bool IsDel = 6;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isdel(), target);
  }

  // required int32 SupplyType = 7;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->supplytype(), target);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gtypeid(), target);
  }

  // required int32 ShowID = 9;
  if (has_showid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->showid(), target);
  }

  // required int32 SkinID = 10;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->skinid(), target);
  }

  // required int32 ModelID = 11;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->modelid(), target);
  }

  // required double XLen = 12;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->xlen(), target);
  }

  // required double YLen = 13;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->ylen(), target);
  }

  // required double ZLen = 14;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->zlen(), target);
  }

  // required int32 CreatorID = 15;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->creatorid(), target);
  }

  // required int32 UpdaterID = 16;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->updaterid(), target);
  }

  // required int64 CreateTime = 17;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->createtime(), target);
  }

  // required int64 UpdateTime = 18;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->updatetime(), target);
  }

  // required string DecorCode = 19;
  if (has_decorcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorcode().data(), this->decorcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->decorcode(), target);
  }

  // required string DecorName = 20;
  if (has_decorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorname().data(), this->decorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->decorname(), target);
  }

  // required string DecorMemo = 21;
  if (has_decormemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decormemo().data(), this->decormemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->decormemo(), target);
  }

  // required int64 VerCode = 22;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DecorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DecorID = 1;
    if (has_decorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorid());
    }

    // required int32 GroupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required int32 FactoryID = 3;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required bool IsActive = 4;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required bool IsSplit = 5;
    if (has_issplit()) {
      total_size += 1 + 1;
    }

    // required bool IsDel = 6;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int32 SupplyType = 7;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 GTypeID = 8;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 ShowID = 9;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showid());
    }

    // required int32 SkinID = 10;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skinid());
    }

    // required int32 ModelID = 11;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

    // required double XLen = 12;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 13;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double ZLen = 14;
    if (has_zlen()) {
      total_size += 1 + 8;
    }

    // required int32 CreatorID = 15;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 16;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 CreateTime = 17;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 18;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string DecorCode = 19;
    if (has_decorcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decorcode());
    }

    // required string DecorName = 20;
    if (has_decorname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decorname());
    }

    // required string DecorMemo = 21;
    if (has_decormemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decormemo());
    }

    // required int64 VerCode = 22;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DecorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DecorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DecorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DecorInfo::MergeFrom(const JK_DecorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decorid()) {
      set_decorid(from.decorid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_issplit()) {
      set_issplit(from.issplit());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_decorcode()) {
      set_decorcode(from.decorcode());
    }
    if (from.has_decorname()) {
      set_decorname(from.decorname());
    }
    if (from.has_decormemo()) {
      set_decormemo(from.decormemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DecorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DecorInfo::CopyFrom(const JK_DecorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DecorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;

  return true;
}

void JK_DecorInfo::Swap(JK_DecorInfo* other) {
  if (other != this) {
    std::swap(decorid_, other->decorid_);
    std::swap(groupid_, other->groupid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(isactive_, other->isactive_);
    std::swap(issplit_, other->issplit_);
    std::swap(isdel_, other->isdel_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(showid_, other->showid_);
    std::swap(skinid_, other->skinid_);
    std::swap(modelid_, other->modelid_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(decorcode_, other->decorcode_);
    std::swap(decorname_, other->decorname_);
    std::swap(decormemo_, other->decormemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DecorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DecorInfo_descriptor_;
  metadata.reflection = JK_DecorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DecorLineInfo::kDecorLineIDFieldNumber;
const int JK_DecorLineInfo::kFactoryIDFieldNumber;
const int JK_DecorLineInfo::kGroupIDFieldNumber;
const int JK_DecorLineInfo::kIsDelFieldNumber;
const int JK_DecorLineInfo::kIsActiveFieldNumber;
const int JK_DecorLineInfo::kGTypeIDFieldNumber;
const int JK_DecorLineInfo::kShowIDFieldNumber;
const int JK_DecorLineInfo::kModelIDFieldNumber;
const int JK_DecorLineInfo::kZOffsetFieldNumber;
const int JK_DecorLineInfo::kCreatorIDFieldNumber;
const int JK_DecorLineInfo::kUpdaterIDFieldNumber;
const int JK_DecorLineInfo::kCreateTimeFieldNumber;
const int JK_DecorLineInfo::kUpdateTimeFieldNumber;
const int JK_DecorLineInfo::kDecorLineCodeFieldNumber;
const int JK_DecorLineInfo::kDecorLineNameFieldNumber;
const int JK_DecorLineInfo::kDecorLineMemoFieldNumber;
const int JK_DecorLineInfo::kVerCodeFieldNumber;
const int JK_DecorLineInfo::kDefaultYLenFieldNumber;
#endif  // !_MSC_VER

JK_DecorLineInfo::JK_DecorLineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DecorLineInfo::InitAsDefaultInstance() {
}

JK_DecorLineInfo::JK_DecorLineInfo(const JK_DecorLineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DecorLineInfo::SharedCtor() {
  _cached_size_ = 0;
  decorlineid_ = 0;
  factoryid_ = 0;
  groupid_ = 0;
  isdel_ = false;
  isactive_ = false;
  gtypeid_ = 0;
  showid_ = 0;
  modelid_ = 0;
  zoffset_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  decorlinecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decorlinename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decorlinememo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  defaultylen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DecorLineInfo::~JK_DecorLineInfo() {
  SharedDtor();
}

void JK_DecorLineInfo::SharedDtor() {
  if (decorlinecode_ != &::google::protobuf::internal::kEmptyString) {
    delete decorlinecode_;
  }
  if (decorlinename_ != &::google::protobuf::internal::kEmptyString) {
    delete decorlinename_;
  }
  if (decorlinememo_ != &::google::protobuf::internal::kEmptyString) {
    delete decorlinememo_;
  }
  if (this != default_instance_) {
  }
}

void JK_DecorLineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DecorLineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DecorLineInfo_descriptor_;
}

const JK_DecorLineInfo& JK_DecorLineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DecorLineInfo* JK_DecorLineInfo::default_instance_ = NULL;

JK_DecorLineInfo* JK_DecorLineInfo::New() const {
  return new JK_DecorLineInfo;
}

void JK_DecorLineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    decorlineid_ = 0;
    factoryid_ = 0;
    groupid_ = 0;
    isdel_ = false;
    isactive_ = false;
    gtypeid_ = 0;
    showid_ = 0;
    modelid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    zoffset_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_decorlinecode()) {
      if (decorlinecode_ != &::google::protobuf::internal::kEmptyString) {
        decorlinecode_->clear();
      }
    }
    if (has_decorlinename()) {
      if (decorlinename_ != &::google::protobuf::internal::kEmptyString) {
        decorlinename_->clear();
      }
    }
    if (has_decorlinememo()) {
      if (decorlinememo_ != &::google::protobuf::internal::kEmptyString) {
        decorlinememo_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    defaultylen_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DecorLineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DecorLineID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorlineid_)));
          set_has_decorlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ShowID;
        break;
      }

      // required int32 ShowID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ModelID;
        break;
      }

      // required int32 ModelID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_ZOffset;
        break;
      }

      // required double ZOffset = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoffset_)));
          set_has_zoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_DecorLineCode;
        break;
      }

      // required string DecorLineCode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorLineCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decorlinecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->decorlinecode().data(), this->decorlinecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_DecorLineName;
        break;
      }

      // required string DecorLineName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorLineName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decorlinename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->decorlinename().data(), this->decorlinename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_DecorLineMemo;
        break;
      }

      // required string DecorLineMemo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DecorLineMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decorlinememo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->decorlinememo().data(), this->decorlinememo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_DefaultYLen;
        break;
      }

      // required double DefaultYLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultylen_)));
          set_has_defaultylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DecorLineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DecorLineID = 1;
  if (has_decorlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->decorlineid(), output);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdel(), output);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isactive(), output);
  }

  // required int32 GTypeID = 6;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gtypeid(), output);
  }

  // required int32 ShowID = 7;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->showid(), output);
  }

  // required int32 ModelID = 8;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->modelid(), output);
  }

  // required double ZOffset = 9;
  if (has_zoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->zoffset(), output);
  }

  // required int32 CreatorID = 10;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->creatorid(), output);
  }

  // required int32 UpdaterID = 11;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->updaterid(), output);
  }

  // required int64 CreateTime = 12;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->createtime(), output);
  }

  // required int64 UpdateTime = 13;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->updatetime(), output);
  }

  // required string DecorLineCode = 14;
  if (has_decorlinecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorlinecode().data(), this->decorlinecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->decorlinecode(), output);
  }

  // required string DecorLineName = 15;
  if (has_decorlinename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorlinename().data(), this->decorlinename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->decorlinename(), output);
  }

  // required string DecorLineMemo = 16;
  if (has_decorlinememo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorlinememo().data(), this->decorlinememo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->decorlinememo(), output);
  }

  // required int64 VerCode = 17;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->vercode(), output);
  }

  // required double DefaultYLen = 18;
  if (has_defaultylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->defaultylen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DecorLineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DecorLineID = 1;
  if (has_decorlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->decorlineid(), target);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdel(), target);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isactive(), target);
  }

  // required int32 GTypeID = 6;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gtypeid(), target);
  }

  // required int32 ShowID = 7;
  if (has_showid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->showid(), target);
  }

  // required int32 ModelID = 8;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->modelid(), target);
  }

  // required double ZOffset = 9;
  if (has_zoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->zoffset(), target);
  }

  // required int32 CreatorID = 10;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->creatorid(), target);
  }

  // required int32 UpdaterID = 11;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->updaterid(), target);
  }

  // required int64 CreateTime = 12;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->createtime(), target);
  }

  // required int64 UpdateTime = 13;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->updatetime(), target);
  }

  // required string DecorLineCode = 14;
  if (has_decorlinecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorlinecode().data(), this->decorlinecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->decorlinecode(), target);
  }

  // required string DecorLineName = 15;
  if (has_decorlinename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorlinename().data(), this->decorlinename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->decorlinename(), target);
  }

  // required string DecorLineMemo = 16;
  if (has_decorlinememo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decorlinememo().data(), this->decorlinememo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->decorlinememo(), target);
  }

  // required int64 VerCode = 17;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->vercode(), target);
  }

  // required double DefaultYLen = 18;
  if (has_defaultylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->defaultylen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DecorLineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DecorLineID = 1;
    if (has_decorlineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorlineid());
    }

    // required int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 GroupID = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required bool IsDel = 4;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsActive = 5;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required int32 GTypeID = 6;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required int32 ShowID = 7;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showid());
    }

    // required int32 ModelID = 8;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double ZOffset = 9;
    if (has_zoffset()) {
      total_size += 1 + 8;
    }

    // required int32 CreatorID = 10;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 11;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 12;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 13;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string DecorLineCode = 14;
    if (has_decorlinecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decorlinecode());
    }

    // required string DecorLineName = 15;
    if (has_decorlinename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decorlinename());
    }

    // required string DecorLineMemo = 16;
    if (has_decorlinememo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decorlinememo());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 VerCode = 17;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required double DefaultYLen = 18;
    if (has_defaultylen()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DecorLineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DecorLineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DecorLineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DecorLineInfo::MergeFrom(const JK_DecorLineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decorlineid()) {
      set_decorlineid(from.decorlineid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zoffset()) {
      set_zoffset(from.zoffset());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_decorlinecode()) {
      set_decorlinecode(from.decorlinecode());
    }
    if (from.has_decorlinename()) {
      set_decorlinename(from.decorlinename());
    }
    if (from.has_decorlinememo()) {
      set_decorlinememo(from.decorlinememo());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_defaultylen()) {
      set_defaultylen(from.defaultylen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DecorLineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DecorLineInfo::CopyFrom(const JK_DecorLineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DecorLineInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;

  return true;
}

void JK_DecorLineInfo::Swap(JK_DecorLineInfo* other) {
  if (other != this) {
    std::swap(decorlineid_, other->decorlineid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(groupid_, other->groupid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isactive_, other->isactive_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(showid_, other->showid_);
    std::swap(modelid_, other->modelid_);
    std::swap(zoffset_, other->zoffset_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(decorlinecode_, other->decorlinecode_);
    std::swap(decorlinename_, other->decorlinename_);
    std::swap(decorlinememo_, other->decorlinememo_);
    std::swap(vercode_, other->vercode_);
    std::swap(defaultylen_, other->defaultylen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DecorLineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DecorLineInfo_descriptor_;
  metadata.reflection = JK_DecorLineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DecorLineMatInfo::kDecorLineIDFieldNumber;
const int JK_DecorLineMatInfo::kMaterialIDFieldNumber;
const int JK_DecorLineMatInfo::kIsDefaultFieldNumber;
const int JK_DecorLineMatInfo::kVerCodeFieldNumber;
const int JK_DecorLineMatInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_DecorLineMatInfo::JK_DecorLineMatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DecorLineMatInfo::InitAsDefaultInstance() {
}

JK_DecorLineMatInfo::JK_DecorLineMatInfo(const JK_DecorLineMatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DecorLineMatInfo::SharedCtor() {
  _cached_size_ = 0;
  decorlineid_ = 0;
  materialid_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DecorLineMatInfo::~JK_DecorLineMatInfo() {
  SharedDtor();
}

void JK_DecorLineMatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DecorLineMatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DecorLineMatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DecorLineMatInfo_descriptor_;
}

const JK_DecorLineMatInfo& JK_DecorLineMatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DecorLineMatInfo* JK_DecorLineMatInfo::default_instance_ = NULL;

JK_DecorLineMatInfo* JK_DecorLineMatInfo::New() const {
  return new JK_DecorLineMatInfo;
}

void JK_DecorLineMatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    decorlineid_ = 0;
    materialid_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DecorLineMatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DecorLineID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorlineid_)));
          set_has_decorlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DecorLineMatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DecorLineID = 1;
  if (has_decorlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->decorlineid(), output);
  }

  // required int32 MaterialID = 2;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->materialid(), output);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdefault(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DecorLineMatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DecorLineID = 1;
  if (has_decorlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->decorlineid(), target);
  }

  // required int32 MaterialID = 2;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->materialid(), target);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdefault(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DecorLineMatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DecorLineID = 1;
    if (has_decorlineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorlineid());
    }

    // required int32 MaterialID = 2;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required bool IsDefault = 3;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DecorLineMatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DecorLineMatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DecorLineMatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DecorLineMatInfo::MergeFrom(const JK_DecorLineMatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decorlineid()) {
      set_decorlineid(from.decorlineid());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DecorLineMatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DecorLineMatInfo::CopyFrom(const JK_DecorLineMatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DecorLineMatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void JK_DecorLineMatInfo::Swap(JK_DecorLineMatInfo* other) {
  if (other != this) {
    std::swap(decorlineid_, other->decorlineid_);
    std::swap(materialid_, other->materialid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DecorLineMatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DecorLineMatInfo_descriptor_;
  metadata.reflection = JK_DecorLineMatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DecorUnitHWFittingMapInfo::kDecorBoardUnitIDFieldNumber;
const int JK_DecorUnitHWFittingMapInfo::kHWFittingIDFieldNumber;
const int JK_DecorUnitHWFittingMapInfo::kIsDefaultFieldNumber;
const int JK_DecorUnitHWFittingMapInfo::kVerCodeFieldNumber;
const int JK_DecorUnitHWFittingMapInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_DecorUnitHWFittingMapInfo::JK_DecorUnitHWFittingMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DecorUnitHWFittingMapInfo::InitAsDefaultInstance() {
}

JK_DecorUnitHWFittingMapInfo::JK_DecorUnitHWFittingMapInfo(const JK_DecorUnitHWFittingMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DecorUnitHWFittingMapInfo::SharedCtor() {
  _cached_size_ = 0;
  decorboardunitid_ = 0;
  hwfittingid_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DecorUnitHWFittingMapInfo::~JK_DecorUnitHWFittingMapInfo() {
  SharedDtor();
}

void JK_DecorUnitHWFittingMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DecorUnitHWFittingMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DecorUnitHWFittingMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DecorUnitHWFittingMapInfo_descriptor_;
}

const JK_DecorUnitHWFittingMapInfo& JK_DecorUnitHWFittingMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DecorUnitHWFittingMapInfo* JK_DecorUnitHWFittingMapInfo::default_instance_ = NULL;

JK_DecorUnitHWFittingMapInfo* JK_DecorUnitHWFittingMapInfo::New() const {
  return new JK_DecorUnitHWFittingMapInfo;
}

void JK_DecorUnitHWFittingMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    decorboardunitid_ = 0;
    hwfittingid_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DecorUnitHWFittingMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DecorBoardUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decorboardunitid_)));
          set_has_decorboardunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HWFittingID;
        break;
      }

      // required int32 HWFittingID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HWFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hwfittingid_)));
          set_has_hwfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DecorUnitHWFittingMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DecorBoardUnitID = 1;
  if (has_decorboardunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->decorboardunitid(), output);
  }

  // required int32 HWFittingID = 2;
  if (has_hwfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hwfittingid(), output);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdefault(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DecorUnitHWFittingMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DecorBoardUnitID = 1;
  if (has_decorboardunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->decorboardunitid(), target);
  }

  // required int32 HWFittingID = 2;
  if (has_hwfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hwfittingid(), target);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdefault(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DecorUnitHWFittingMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DecorBoardUnitID = 1;
    if (has_decorboardunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decorboardunitid());
    }

    // required int32 HWFittingID = 2;
    if (has_hwfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hwfittingid());
    }

    // required bool IsDefault = 3;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DecorUnitHWFittingMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DecorUnitHWFittingMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DecorUnitHWFittingMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DecorUnitHWFittingMapInfo::MergeFrom(const JK_DecorUnitHWFittingMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decorboardunitid()) {
      set_decorboardunitid(from.decorboardunitid());
    }
    if (from.has_hwfittingid()) {
      set_hwfittingid(from.hwfittingid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DecorUnitHWFittingMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DecorUnitHWFittingMapInfo::CopyFrom(const JK_DecorUnitHWFittingMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DecorUnitHWFittingMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void JK_DecorUnitHWFittingMapInfo::Swap(JK_DecorUnitHWFittingMapInfo* other) {
  if (other != this) {
    std::swap(decorboardunitid_, other->decorboardunitid_);
    std::swap(hwfittingid_, other->hwfittingid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DecorUnitHWFittingMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DecorUnitHWFittingMapInfo_descriptor_;
  metadata.reflection = JK_DecorUnitHWFittingMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorBoardGapInfo::kDoorBoardGapIDFieldNumber;
const int JK_DoorBoardGapInfo::kDoorBoardIDFieldNumber;
const int JK_DoorBoardGapInfo::kGapPosFieldNumber;
const int JK_DoorBoardGapInfo::kGapIndexFieldNumber;
const int JK_DoorBoardGapInfo::kGapTypeFieldNumber;
const int JK_DoorBoardGapInfo::kGapShapeFieldNumber;
const int JK_DoorBoardGapInfo::kXLenFormulaFieldNumber;
const int JK_DoorBoardGapInfo::kYLenFormulaFieldNumber;
const int JK_DoorBoardGapInfo::kXOffsetFormulaFieldNumber;
const int JK_DoorBoardGapInfo::kYOffsetFormulaFieldNumber;
const int JK_DoorBoardGapInfo::kZOffsetFormulaFieldNumber;
const int JK_DoorBoardGapInfo::kFactoryIDFieldNumber;
const int JK_DoorBoardGapInfo::kCreatorIDFieldNumber;
const int JK_DoorBoardGapInfo::kUpdaterIDFieldNumber;
const int JK_DoorBoardGapInfo::kCreateTimeFieldNumber;
const int JK_DoorBoardGapInfo::kUpdateTimeFieldNumber;
const int JK_DoorBoardGapInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_DoorBoardGapInfo::JK_DoorBoardGapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorBoardGapInfo::InitAsDefaultInstance() {
}

JK_DoorBoardGapInfo::JK_DoorBoardGapInfo(const JK_DoorBoardGapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorBoardGapInfo::SharedCtor() {
  _cached_size_ = 0;
  doorboardgapid_ = 0;
  doorboardid_ = 0;
  gappos_ = 0;
  gapindex_ = 0;
  gaptype_ = 0;
  gapshape_ = 0;
  xlenformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ylenformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorBoardGapInfo::~JK_DoorBoardGapInfo() {
  SharedDtor();
}

void JK_DoorBoardGapInfo::SharedDtor() {
  if (xlenformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xlenformula_;
  }
  if (ylenformula_ != &::google::protobuf::internal::kEmptyString) {
    delete ylenformula_;
  }
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (this != default_instance_) {
  }
}

void JK_DoorBoardGapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorBoardGapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorBoardGapInfo_descriptor_;
}

const JK_DoorBoardGapInfo& JK_DoorBoardGapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorBoardGapInfo* JK_DoorBoardGapInfo::default_instance_ = NULL;

JK_DoorBoardGapInfo* JK_DoorBoardGapInfo::New() const {
  return new JK_DoorBoardGapInfo;
}

void JK_DoorBoardGapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doorboardgapid_ = 0;
    doorboardid_ = 0;
    gappos_ = 0;
    gapindex_ = 0;
    gaptype_ = 0;
    gapshape_ = 0;
    if (has_xlenformula()) {
      if (xlenformula_ != &::google::protobuf::internal::kEmptyString) {
        xlenformula_->clear();
      }
    }
    if (has_ylenformula()) {
      if (ylenformula_ != &::google::protobuf::internal::kEmptyString) {
        ylenformula_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorBoardGapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorBoardGapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorboardgapid_)));
          set_has_doorboardgapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DoorBoardID;
        break;
      }

      // required int32 DoorBoardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorBoardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorboardid_)));
          set_has_doorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GapPos;
        break;
      }

      // required int32 GapPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gappos_)));
          set_has_gappos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GapIndex;
        break;
      }

      // required int32 GapIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gapindex_)));
          set_has_gapindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_GapType;
        break;
      }

      // required int32 GapType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaptype_)));
          set_has_gaptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_GapShape;
        break;
      }

      // required int32 GapShape = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GapShape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gapshape_)));
          set_has_gapshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_XLenFormula;
        break;
      }

      // required string XLenFormula = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XLenFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xlenformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xlenformula().data(), this->xlenformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_YLenFormula;
        break;
      }

      // required string YLenFormula = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YLenFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ylenformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ylenformula().data(), this->ylenformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorBoardGapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorBoardGapID = 1;
  if (has_doorboardgapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doorboardgapid(), output);
  }

  // required int32 DoorBoardID = 2;
  if (has_doorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->doorboardid(), output);
  }

  // required int32 GapPos = 3;
  if (has_gappos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gappos(), output);
  }

  // required int32 GapIndex = 4;
  if (has_gapindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gapindex(), output);
  }

  // required int32 GapType = 5;
  if (has_gaptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gaptype(), output);
  }

  // required int32 GapShape = 6;
  if (has_gapshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gapshape(), output);
  }

  // required string XLenFormula = 7;
  if (has_xlenformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xlenformula().data(), this->xlenformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->xlenformula(), output);
  }

  // required string YLenFormula = 8;
  if (has_ylenformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ylenformula().data(), this->ylenformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->ylenformula(), output);
  }

  // required string XOffsetFormula = 9;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 10;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 11;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->zoffsetformula(), output);
  }

  // required int32 FactoryID = 12;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->factoryid(), output);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->creatorid(), output);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->updaterid(), output);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->createtime(), output);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->updatetime(), output);
  }

  // required int64 VerCode = 17;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorBoardGapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorBoardGapID = 1;
  if (has_doorboardgapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doorboardgapid(), target);
  }

  // required int32 DoorBoardID = 2;
  if (has_doorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->doorboardid(), target);
  }

  // required int32 GapPos = 3;
  if (has_gappos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gappos(), target);
  }

  // required int32 GapIndex = 4;
  if (has_gapindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gapindex(), target);
  }

  // required int32 GapType = 5;
  if (has_gaptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gaptype(), target);
  }

  // required int32 GapShape = 6;
  if (has_gapshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gapshape(), target);
  }

  // required string XLenFormula = 7;
  if (has_xlenformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xlenformula().data(), this->xlenformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->xlenformula(), target);
  }

  // required string YLenFormula = 8;
  if (has_ylenformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ylenformula().data(), this->ylenformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ylenformula(), target);
  }

  // required string XOffsetFormula = 9;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 10;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 11;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->zoffsetformula(), target);
  }

  // required int32 FactoryID = 12;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->factoryid(), target);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->creatorid(), target);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->updaterid(), target);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->createtime(), target);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->updatetime(), target);
  }

  // required int64 VerCode = 17;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorBoardGapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorBoardGapID = 1;
    if (has_doorboardgapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorboardgapid());
    }

    // required int32 DoorBoardID = 2;
    if (has_doorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorboardid());
    }

    // required int32 GapPos = 3;
    if (has_gappos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gappos());
    }

    // required int32 GapIndex = 4;
    if (has_gapindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gapindex());
    }

    // required int32 GapType = 5;
    if (has_gaptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaptype());
    }

    // required int32 GapShape = 6;
    if (has_gapshape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gapshape());
    }

    // required string XLenFormula = 7;
    if (has_xlenformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xlenformula());
    }

    // required string YLenFormula = 8;
    if (has_ylenformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ylenformula());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string XOffsetFormula = 9;
    if (has_xoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

    // required string YOffsetFormula = 10;
    if (has_yoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

    // required string ZOffsetFormula = 11;
    if (has_zoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

    // required int32 FactoryID = 12;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 13;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 14;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 15;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 16;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 VerCode = 17;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorBoardGapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorBoardGapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorBoardGapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorBoardGapInfo::MergeFrom(const JK_DoorBoardGapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doorboardgapid()) {
      set_doorboardgapid(from.doorboardgapid());
    }
    if (from.has_doorboardid()) {
      set_doorboardid(from.doorboardid());
    }
    if (from.has_gappos()) {
      set_gappos(from.gappos());
    }
    if (from.has_gapindex()) {
      set_gapindex(from.gapindex());
    }
    if (from.has_gaptype()) {
      set_gaptype(from.gaptype());
    }
    if (from.has_gapshape()) {
      set_gapshape(from.gapshape());
    }
    if (from.has_xlenformula()) {
      set_xlenformula(from.xlenformula());
    }
    if (from.has_ylenformula()) {
      set_ylenformula(from.ylenformula());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorBoardGapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorBoardGapInfo::CopyFrom(const JK_DoorBoardGapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorBoardGapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void JK_DoorBoardGapInfo::Swap(JK_DoorBoardGapInfo* other) {
  if (other != this) {
    std::swap(doorboardgapid_, other->doorboardgapid_);
    std::swap(doorboardid_, other->doorboardid_);
    std::swap(gappos_, other->gappos_);
    std::swap(gapindex_, other->gapindex_);
    std::swap(gaptype_, other->gaptype_);
    std::swap(gapshape_, other->gapshape_);
    std::swap(xlenformula_, other->xlenformula_);
    std::swap(ylenformula_, other->ylenformula_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorBoardGapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorBoardGapInfo_descriptor_;
  metadata.reflection = JK_DoorBoardGapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorBoardInfo::kDoorBoardIDFieldNumber;
const int JK_DoorBoardInfo::kDoorIDFieldNumber;
const int JK_DoorBoardInfo::kIsDelFieldNumber;
const int JK_DoorBoardInfo::kIsUseDefaultMatFieldNumber;
const int JK_DoorBoardInfo::kSplitTypeFieldNumber;
const int JK_DoorBoardInfo::kSkinDirectionFieldNumber;
const int JK_DoorBoardInfo::kArcXFieldNumber;
const int JK_DoorBoardInfo::kArcYFieldNumber;
const int JK_DoorBoardInfo::kArcZFieldNumber;
const int JK_DoorBoardInfo::kXFormulaFieldNumber;
const int JK_DoorBoardInfo::kYFormulaFieldNumber;
const int JK_DoorBoardInfo::kXDockFieldNumber;
const int JK_DoorBoardInfo::kYDockFieldNumber;
const int JK_DoorBoardInfo::kZDockFieldNumber;
const int JK_DoorBoardInfo::kXOffsetFormulaFieldNumber;
const int JK_DoorBoardInfo::kYOffsetFormulaFieldNumber;
const int JK_DoorBoardInfo::kZOffsetFormulaFieldNumber;
const int JK_DoorBoardInfo::kDoorBoardIndexFieldNumber;
const int JK_DoorBoardInfo::kDoorBoardNameFieldNumber;
const int JK_DoorBoardInfo::kDoorBoardMemoFieldNumber;
const int JK_DoorBoardInfo::kVerCodeFieldNumber;
const int JK_DoorBoardInfo::kFactoryIDFieldNumber;
const int JK_DoorBoardInfo::kCreatorIDFieldNumber;
const int JK_DoorBoardInfo::kUpdaterIDFieldNumber;
const int JK_DoorBoardInfo::kCreateTimeFieldNumber;
const int JK_DoorBoardInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_DoorBoardInfo::JK_DoorBoardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorBoardInfo::InitAsDefaultInstance() {
}

JK_DoorBoardInfo::JK_DoorBoardInfo(const JK_DoorBoardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorBoardInfo::SharedCtor() {
  _cached_size_ = 0;
  doorboardid_ = 0;
  doorid_ = 0;
  isdel_ = false;
  isusedefaultmat_ = false;
  splittype_ = 0;
  skindirection_ = 0;
  arcx_ = 0;
  arcy_ = 0;
  arcz_ = 0;
  xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doorboardindex_ = 0;
  doorboardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doorboardmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorBoardInfo::~JK_DoorBoardInfo() {
  SharedDtor();
}

void JK_DoorBoardInfo::SharedDtor() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (doorboardname_ != &::google::protobuf::internal::kEmptyString) {
    delete doorboardname_;
  }
  if (doorboardmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete doorboardmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_DoorBoardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorBoardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorBoardInfo_descriptor_;
}

const JK_DoorBoardInfo& JK_DoorBoardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorBoardInfo* JK_DoorBoardInfo::default_instance_ = NULL;

JK_DoorBoardInfo* JK_DoorBoardInfo::New() const {
  return new JK_DoorBoardInfo;
}

void JK_DoorBoardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doorboardid_ = 0;
    doorid_ = 0;
    isdel_ = false;
    isusedefaultmat_ = false;
    splittype_ = 0;
    skindirection_ = 0;
    arcx_ = 0;
    arcy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    arcz_ = 0;
    if (has_xformula()) {
      if (xformula_ != &::google::protobuf::internal::kEmptyString) {
        xformula_->clear();
      }
    }
    if (has_yformula()) {
      if (yformula_ != &::google::protobuf::internal::kEmptyString) {
        yformula_->clear();
      }
    }
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
    doorboardindex_ = 0;
    if (has_doorboardname()) {
      if (doorboardname_ != &::google::protobuf::internal::kEmptyString) {
        doorboardname_->clear();
      }
    }
    if (has_doorboardmemo()) {
      if (doorboardmemo_ != &::google::protobuf::internal::kEmptyString) {
        doorboardmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorBoardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorBoardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorboardid_)));
          set_has_doorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DoorID;
        break;
      }

      // required int32 DoorID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorid_)));
          set_has_doorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsUseDefaultMat;
        break;
      }

      // required bool IsUseDefaultMat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUseDefaultMat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusedefaultmat_)));
          set_has_isusedefaultmat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SplitType;
        break;
      }

      // required int32 SplitType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SplitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &splittype_)));
          set_has_splittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_SkinDirection;
        break;
      }

      // required int32 SkinDirection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkinDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skindirection_)));
          set_has_skindirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_ArcX;
        break;
      }

      // required double ArcX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcx_)));
          set_has_arcx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_ArcY;
        break;
      }

      // required double ArcY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcy_)));
          set_has_arcy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_ArcZ;
        break;
      }

      // required double ArcZ = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcz_)));
          set_has_arcz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_XFormula;
        break;
      }

      // required string XFormula = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xformula().data(), this->xformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_YFormula;
        break;
      }

      // required string YFormula = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yformula().data(), this->yformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_DoorBoardIndex;
        break;
      }

      // required int32 DoorBoardIndex = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorBoardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorboardindex_)));
          set_has_doorboardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_DoorBoardName;
        break;
      }

      // required string DoorBoardName = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DoorBoardName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doorboardname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doorboardname().data(), this->doorboardname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_DoorBoardMemo;
        break;
      }

      // required string DoorBoardMemo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DoorBoardMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doorboardmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doorboardmemo().data(), this->doorboardmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorBoardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorBoardID = 1;
  if (has_doorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doorboardid(), output);
  }

  // required int32 DoorID = 2;
  if (has_doorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->doorid(), output);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // required bool IsUseDefaultMat = 4;
  if (has_isusedefaultmat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isusedefaultmat(), output);
  }

  // required int32 SplitType = 5;
  if (has_splittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->splittype(), output);
  }

  // required int32 SkinDirection = 6;
  if (has_skindirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skindirection(), output);
  }

  // required double ArcX = 7;
  if (has_arcx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->arcx(), output);
  }

  // required double ArcY = 8;
  if (has_arcy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->arcy(), output);
  }

  // required double ArcZ = 9;
  if (has_arcz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->arcz(), output);
  }

  // required string XFormula = 10;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->xformula(), output);
  }

  // required string YFormula = 11;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->yformula(), output);
  }

  // required int32 XDock = 12;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->xdock(), output);
  }

  // required int32 YDock = 13;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ydock(), output);
  }

  // required int32 ZDock = 14;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->zdock(), output);
  }

  // required string XOffsetFormula = 15;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 16;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 17;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->zoffsetformula(), output);
  }

  // required int32 DoorBoardIndex = 18;
  if (has_doorboardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->doorboardindex(), output);
  }

  // required string DoorBoardName = 19;
  if (has_doorboardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorboardname().data(), this->doorboardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->doorboardname(), output);
  }

  // required string DoorBoardMemo = 20;
  if (has_doorboardmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorboardmemo().data(), this->doorboardmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->doorboardmemo(), output);
  }

  // required int64 VerCode = 21;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->vercode(), output);
  }

  // required int32 FactoryID = 22;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->factoryid(), output);
  }

  // required int32 CreatorID = 23;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->creatorid(), output);
  }

  // required int32 UpdaterID = 24;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->updaterid(), output);
  }

  // required int64 CreateTime = 25;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->createtime(), output);
  }

  // required int64 UpdateTime = 26;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorBoardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorBoardID = 1;
  if (has_doorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doorboardid(), target);
  }

  // required int32 DoorID = 2;
  if (has_doorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->doorid(), target);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // required bool IsUseDefaultMat = 4;
  if (has_isusedefaultmat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isusedefaultmat(), target);
  }

  // required int32 SplitType = 5;
  if (has_splittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->splittype(), target);
  }

  // required int32 SkinDirection = 6;
  if (has_skindirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skindirection(), target);
  }

  // required double ArcX = 7;
  if (has_arcx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->arcx(), target);
  }

  // required double ArcY = 8;
  if (has_arcy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->arcy(), target);
  }

  // required double ArcZ = 9;
  if (has_arcz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->arcz(), target);
  }

  // required string XFormula = 10;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->xformula(), target);
  }

  // required string YFormula = 11;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->yformula(), target);
  }

  // required int32 XDock = 12;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->xdock(), target);
  }

  // required int32 YDock = 13;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ydock(), target);
  }

  // required int32 ZDock = 14;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->zdock(), target);
  }

  // required string XOffsetFormula = 15;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 16;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 17;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->zoffsetformula(), target);
  }

  // required int32 DoorBoardIndex = 18;
  if (has_doorboardindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->doorboardindex(), target);
  }

  // required string DoorBoardName = 19;
  if (has_doorboardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorboardname().data(), this->doorboardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->doorboardname(), target);
  }

  // required string DoorBoardMemo = 20;
  if (has_doorboardmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorboardmemo().data(), this->doorboardmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->doorboardmemo(), target);
  }

  // required int64 VerCode = 21;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->vercode(), target);
  }

  // required int32 FactoryID = 22;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->factoryid(), target);
  }

  // required int32 CreatorID = 23;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->creatorid(), target);
  }

  // required int32 UpdaterID = 24;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->updaterid(), target);
  }

  // required int64 CreateTime = 25;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->createtime(), target);
  }

  // required int64 UpdateTime = 26;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorBoardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorBoardID = 1;
    if (has_doorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorboardid());
    }

    // required int32 DoorID = 2;
    if (has_doorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorid());
    }

    // required bool IsDel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsUseDefaultMat = 4;
    if (has_isusedefaultmat()) {
      total_size += 1 + 1;
    }

    // required int32 SplitType = 5;
    if (has_splittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->splittype());
    }

    // required int32 SkinDirection = 6;
    if (has_skindirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skindirection());
    }

    // required double ArcX = 7;
    if (has_arcx()) {
      total_size += 1 + 8;
    }

    // required double ArcY = 8;
    if (has_arcy()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double ArcZ = 9;
    if (has_arcz()) {
      total_size += 1 + 8;
    }

    // required string XFormula = 10;
    if (has_xformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xformula());
    }

    // required string YFormula = 11;
    if (has_yformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yformula());
    }

    // required int32 XDock = 12;
    if (has_xdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 13;
    if (has_ydock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 14;
    if (has_zdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // required string XOffsetFormula = 15;
    if (has_xoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

    // required string YOffsetFormula = 16;
    if (has_yoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string ZOffsetFormula = 17;
    if (has_zoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

    // required int32 DoorBoardIndex = 18;
    if (has_doorboardindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorboardindex());
    }

    // required string DoorBoardName = 19;
    if (has_doorboardname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doorboardname());
    }

    // required string DoorBoardMemo = 20;
    if (has_doorboardmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doorboardmemo());
    }

    // required int64 VerCode = 21;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 22;
    if (has_factoryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 23;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 24;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int64 CreateTime = 25;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 26;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorBoardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorBoardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorBoardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorBoardInfo::MergeFrom(const JK_DoorBoardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doorboardid()) {
      set_doorboardid(from.doorboardid());
    }
    if (from.has_doorid()) {
      set_doorid(from.doorid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isusedefaultmat()) {
      set_isusedefaultmat(from.isusedefaultmat());
    }
    if (from.has_splittype()) {
      set_splittype(from.splittype());
    }
    if (from.has_skindirection()) {
      set_skindirection(from.skindirection());
    }
    if (from.has_arcx()) {
      set_arcx(from.arcx());
    }
    if (from.has_arcy()) {
      set_arcy(from.arcy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_arcz()) {
      set_arcz(from.arcz());
    }
    if (from.has_xformula()) {
      set_xformula(from.xformula());
    }
    if (from.has_yformula()) {
      set_yformula(from.yformula());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
    if (from.has_doorboardindex()) {
      set_doorboardindex(from.doorboardindex());
    }
    if (from.has_doorboardname()) {
      set_doorboardname(from.doorboardname());
    }
    if (from.has_doorboardmemo()) {
      set_doorboardmemo(from.doorboardmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorBoardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorBoardInfo::CopyFrom(const JK_DoorBoardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorBoardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x03ffffff) != 0x03ffffff) return false;

  return true;
}

void JK_DoorBoardInfo::Swap(JK_DoorBoardInfo* other) {
  if (other != this) {
    std::swap(doorboardid_, other->doorboardid_);
    std::swap(doorid_, other->doorid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isusedefaultmat_, other->isusedefaultmat_);
    std::swap(splittype_, other->splittype_);
    std::swap(skindirection_, other->skindirection_);
    std::swap(arcx_, other->arcx_);
    std::swap(arcy_, other->arcy_);
    std::swap(arcz_, other->arcz_);
    std::swap(xformula_, other->xformula_);
    std::swap(yformula_, other->yformula_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(doorboardindex_, other->doorboardindex_);
    std::swap(doorboardname_, other->doorboardname_);
    std::swap(doorboardmemo_, other->doorboardmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorBoardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorBoardInfo_descriptor_;
  metadata.reflection = JK_DoorBoardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorBoardMatMapInfo::kDoorBoardIDFieldNumber;
const int JK_DoorBoardMatMapInfo::kMatIDFieldNumber;
const int JK_DoorBoardMatMapInfo::kMatGTypeFieldNumber;
const int JK_DoorBoardMatMapInfo::kIsDefaultFieldNumber;
const int JK_DoorBoardMatMapInfo::kVerCodeFieldNumber;
const int JK_DoorBoardMatMapInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_DoorBoardMatMapInfo::JK_DoorBoardMatMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorBoardMatMapInfo::InitAsDefaultInstance() {
}

JK_DoorBoardMatMapInfo::JK_DoorBoardMatMapInfo(const JK_DoorBoardMatMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorBoardMatMapInfo::SharedCtor() {
  _cached_size_ = 0;
  doorboardid_ = 0;
  matid_ = 0;
  matgtype_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorBoardMatMapInfo::~JK_DoorBoardMatMapInfo() {
  SharedDtor();
}

void JK_DoorBoardMatMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DoorBoardMatMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorBoardMatMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorBoardMatMapInfo_descriptor_;
}

const JK_DoorBoardMatMapInfo& JK_DoorBoardMatMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorBoardMatMapInfo* JK_DoorBoardMatMapInfo::default_instance_ = NULL;

JK_DoorBoardMatMapInfo* JK_DoorBoardMatMapInfo::New() const {
  return new JK_DoorBoardMatMapInfo;
}

void JK_DoorBoardMatMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doorboardid_ = 0;
    matid_ = 0;
    matgtype_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorBoardMatMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorBoardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorboardid_)));
          set_has_doorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MatID;
        break;
      }

      // required int32 MatID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matid_)));
          set_has_matid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MatGType;
        break;
      }

      // required int32 MatGType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatGType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matgtype_)));
          set_has_matgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorBoardMatMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorBoardID = 1;
  if (has_doorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doorboardid(), output);
  }

  // required int32 MatID = 2;
  if (has_matid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->matid(), output);
  }

  // required int32 MatGType = 3;
  if (has_matgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->matgtype(), output);
  }

  // required bool IsDefault = 4;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdefault(), output);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->vercode(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorBoardMatMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorBoardID = 1;
  if (has_doorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doorboardid(), target);
  }

  // required int32 MatID = 2;
  if (has_matid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->matid(), target);
  }

  // required int32 MatGType = 3;
  if (has_matgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->matgtype(), target);
  }

  // required bool IsDefault = 4;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdefault(), target);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->vercode(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorBoardMatMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorBoardID = 1;
    if (has_doorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorboardid());
    }

    // required int32 MatID = 2;
    if (has_matid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matid());
    }

    // required int32 MatGType = 3;
    if (has_matgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matgtype());
    }

    // required bool IsDefault = 4;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 5;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorBoardMatMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorBoardMatMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorBoardMatMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorBoardMatMapInfo::MergeFrom(const JK_DoorBoardMatMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doorboardid()) {
      set_doorboardid(from.doorboardid());
    }
    if (from.has_matid()) {
      set_matid(from.matid());
    }
    if (from.has_matgtype()) {
      set_matgtype(from.matgtype());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorBoardMatMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorBoardMatMapInfo::CopyFrom(const JK_DoorBoardMatMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorBoardMatMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void JK_DoorBoardMatMapInfo::Swap(JK_DoorBoardMatMapInfo* other) {
  if (other != this) {
    std::swap(doorboardid_, other->doorboardid_);
    std::swap(matid_, other->matid_);
    std::swap(matgtype_, other->matgtype_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorBoardMatMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorBoardMatMapInfo_descriptor_;
  metadata.reflection = JK_DoorBoardMatMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorBoardSealInfo::kDoorBoardIDFieldNumber;
const int JK_DoorBoardSealInfo::kSealOrderFieldNumber;
const int JK_DoorBoardSealInfo::kSealTypeFieldNumber;
const int JK_DoorBoardSealInfo::kVerCodeFieldNumber;
const int JK_DoorBoardSealInfo::kFactoryIDFieldNumber;
const int JK_DoorBoardSealInfo::kCreatorIDFieldNumber;
const int JK_DoorBoardSealInfo::kUpdaterIDFieldNumber;
const int JK_DoorBoardSealInfo::kCreateTimeFieldNumber;
const int JK_DoorBoardSealInfo::kUpdateTimeFieldNumber;
const int JK_DoorBoardSealInfo::kSealIndexFieldNumber;
#endif  // !_MSC_VER

JK_DoorBoardSealInfo::JK_DoorBoardSealInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorBoardSealInfo::InitAsDefaultInstance() {
}

JK_DoorBoardSealInfo::JK_DoorBoardSealInfo(const JK_DoorBoardSealInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorBoardSealInfo::SharedCtor() {
  _cached_size_ = 0;
  doorboardid_ = 0;
  sealorder_ = 0;
  sealtype_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  sealindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorBoardSealInfo::~JK_DoorBoardSealInfo() {
  SharedDtor();
}

void JK_DoorBoardSealInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DoorBoardSealInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorBoardSealInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorBoardSealInfo_descriptor_;
}

const JK_DoorBoardSealInfo& JK_DoorBoardSealInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorBoardSealInfo* JK_DoorBoardSealInfo::default_instance_ = NULL;

JK_DoorBoardSealInfo* JK_DoorBoardSealInfo::New() const {
  return new JK_DoorBoardSealInfo;
}

void JK_DoorBoardSealInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doorboardid_ = 0;
    sealorder_ = 0;
    sealtype_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    updatetime_ = GOOGLE_LONGLONG(0);
    sealindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorBoardSealInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorBoardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorboardid_)));
          set_has_doorboardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SealOrder;
        break;
      }

      // required int32 SealOrder = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealorder_)));
          set_has_sealorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SealType;
        break;
      }

      // required int32 SealType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealtype_)));
          set_has_sealtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_SealIndex;
        break;
      }

      // required int32 SealIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealindex_)));
          set_has_sealindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorBoardSealInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorBoardID = 1;
  if (has_doorboardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doorboardid(), output);
  }

  // required int32 SealOrder = 2;
  if (has_sealorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sealorder(), output);
  }

  // required int32 SealType = 3;
  if (has_sealtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sealtype(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  // required int32 CreatorID = 6;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->creatorid(), output);
  }

  // required int32 UpdaterID = 7;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->updaterid(), output);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->createtime(), output);
  }

  // required int64 UpdateTime = 9;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->updatetime(), output);
  }

  // required int32 SealIndex = 10;
  if (has_sealindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sealindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorBoardSealInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorBoardID = 1;
  if (has_doorboardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doorboardid(), target);
  }

  // required int32 SealOrder = 2;
  if (has_sealorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sealorder(), target);
  }

  // required int32 SealType = 3;
  if (has_sealtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sealtype(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  // required int32 CreatorID = 6;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->creatorid(), target);
  }

  // required int32 UpdaterID = 7;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->updaterid(), target);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->createtime(), target);
  }

  // required int64 UpdateTime = 9;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->updatetime(), target);
  }

  // required int32 SealIndex = 10;
  if (has_sealindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sealindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorBoardSealInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorBoardID = 1;
    if (has_doorboardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorboardid());
    }

    // required int32 SealOrder = 2;
    if (has_sealorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealorder());
    }

    // required int32 SealType = 3;
    if (has_sealtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealtype());
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 6;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 7;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 8;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 UpdateTime = 9;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required int32 SealIndex = 10;
    if (has_sealindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorBoardSealInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorBoardSealInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorBoardSealInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorBoardSealInfo::MergeFrom(const JK_DoorBoardSealInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doorboardid()) {
      set_doorboardid(from.doorboardid());
    }
    if (from.has_sealorder()) {
      set_sealorder(from.sealorder());
    }
    if (from.has_sealtype()) {
      set_sealtype(from.sealtype());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_sealindex()) {
      set_sealindex(from.sealindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorBoardSealInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorBoardSealInfo::CopyFrom(const JK_DoorBoardSealInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorBoardSealInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void JK_DoorBoardSealInfo::Swap(JK_DoorBoardSealInfo* other) {
  if (other != this) {
    std::swap(doorboardid_, other->doorboardid_);
    std::swap(sealorder_, other->sealorder_);
    std::swap(sealtype_, other->sealtype_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(sealindex_, other->sealindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorBoardSealInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorBoardSealInfo_descriptor_;
  metadata.reflection = JK_DoorBoardSealInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorInfo::kDoorIDFieldNumber;
const int JK_DoorInfo::kGroupIDFieldNumber;
const int JK_DoorInfo::kFactoryIDFieldNumber;
const int JK_DoorInfo::kVerCodeFieldNumber;
const int JK_DoorInfo::kIsDelFieldNumber;
const int JK_DoorInfo::kIsActiveFieldNumber;
const int JK_DoorInfo::kGTypeIDFieldNumber;
const int JK_DoorInfo::kCombineTypeFieldNumber;
const int JK_DoorInfo::kPhotoIDFieldNumber;
const int JK_DoorInfo::kVirtualContainerXLenFieldNumber;
const int JK_DoorInfo::kVirtualContainerYLenFieldNumber;
const int JK_DoorInfo::kVirtualContainerZLenFieldNumber;
const int JK_DoorInfo::kCreatorIDFieldNumber;
const int JK_DoorInfo::kUpdaterIDFieldNumber;
const int JK_DoorInfo::kCreateTimeFieldNumber;
const int JK_DoorInfo::kUpdateTimeFieldNumber;
const int JK_DoorInfo::kDoorCodeFieldNumber;
const int JK_DoorInfo::kDoorNameFieldNumber;
const int JK_DoorInfo::kDoorMemoFieldNumber;
#endif  // !_MSC_VER

JK_DoorInfo::JK_DoorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorInfo::InitAsDefaultInstance() {
}

JK_DoorInfo::JK_DoorInfo(const JK_DoorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorInfo::SharedCtor() {
  _cached_size_ = 0;
  doorid_ = 0;
  groupid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  isdel_ = false;
  isactive_ = false;
  gtypeid_ = 0;
  combinetype_ = 0;
  photoid_ = 0;
  virtualcontainerxlen_ = 0;
  virtualcontainerylen_ = 0;
  virtualcontainerzlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  doorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doormemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorInfo::~JK_DoorInfo() {
  SharedDtor();
}

void JK_DoorInfo::SharedDtor() {
  if (doorcode_ != &::google::protobuf::internal::kEmptyString) {
    delete doorcode_;
  }
  if (doorname_ != &::google::protobuf::internal::kEmptyString) {
    delete doorname_;
  }
  if (doormemo_ != &::google::protobuf::internal::kEmptyString) {
    delete doormemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_DoorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorInfo_descriptor_;
}

const JK_DoorInfo& JK_DoorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorInfo* JK_DoorInfo::default_instance_ = NULL;

JK_DoorInfo* JK_DoorInfo::New() const {
  return new JK_DoorInfo;
}

void JK_DoorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doorid_ = 0;
    groupid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    isdel_ = false;
    isactive_ = false;
    gtypeid_ = 0;
    combinetype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    photoid_ = 0;
    virtualcontainerxlen_ = 0;
    virtualcontainerylen_ = 0;
    virtualcontainerzlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_doorcode()) {
      if (doorcode_ != &::google::protobuf::internal::kEmptyString) {
        doorcode_->clear();
      }
    }
    if (has_doorname()) {
      if (doorname_ != &::google::protobuf::internal::kEmptyString) {
        doorname_->clear();
      }
    }
    if (has_doormemo()) {
      if (doormemo_ != &::google::protobuf::internal::kEmptyString) {
        doormemo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorid_)));
          set_has_doorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CombineType;
        break;
      }

      // required int32 CombineType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CombineType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combinetype_)));
          set_has_combinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_PhotoID;
        break;
      }

      // required int32 PhotoID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PhotoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_VirtualContainerXLen;
        break;
      }

      // required double VirtualContainerXLen = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualContainerXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualcontainerxlen_)));
          set_has_virtualcontainerxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_VirtualContainerYLen;
        break;
      }

      // required double VirtualContainerYLen = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualContainerYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualcontainerylen_)));
          set_has_virtualcontainerylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_VirtualContainerZLen;
        break;
      }

      // required double VirtualContainerZLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualContainerZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualcontainerzlen_)));
          set_has_virtualcontainerzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_DoorCode;
        break;
      }

      // required string DoorCode = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DoorCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doorcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doorcode().data(), this->doorcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_DoorName;
        break;
      }

      // required string DoorName = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DoorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doorname().data(), this->doorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_DoorMemo;
        break;
      }

      // required string DoorMemo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DoorMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doormemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doormemo().data(), this->doormemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorID = 1;
  if (has_doorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doorid(), output);
  }

  // required int32 GroupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->factoryid(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required bool IsDel = 5;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdel(), output);
  }

  // required bool IsActive = 6;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isactive(), output);
  }

  // required int32 GTypeID = 7;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gtypeid(), output);
  }

  // required int32 CombineType = 8;
  if (has_combinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->combinetype(), output);
  }

  // required int32 PhotoID = 9;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->photoid(), output);
  }

  // required double VirtualContainerXLen = 10;
  if (has_virtualcontainerxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->virtualcontainerxlen(), output);
  }

  // required double VirtualContainerYLen = 11;
  if (has_virtualcontainerylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->virtualcontainerylen(), output);
  }

  // required double VirtualContainerZLen = 12;
  if (has_virtualcontainerzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->virtualcontainerzlen(), output);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->creatorid(), output);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->updaterid(), output);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->createtime(), output);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->updatetime(), output);
  }

  // required string DoorCode = 17;
  if (has_doorcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorcode().data(), this->doorcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->doorcode(), output);
  }

  // required string DoorName = 18;
  if (has_doorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorname().data(), this->doorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->doorname(), output);
  }

  // required string DoorMemo = 19;
  if (has_doormemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doormemo().data(), this->doormemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->doormemo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorID = 1;
  if (has_doorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doorid(), target);
  }

  // required int32 GroupID = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->factoryid(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required bool IsDel = 5;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdel(), target);
  }

  // required bool IsActive = 6;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isactive(), target);
  }

  // required int32 GTypeID = 7;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gtypeid(), target);
  }

  // required int32 CombineType = 8;
  if (has_combinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->combinetype(), target);
  }

  // required int32 PhotoID = 9;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->photoid(), target);
  }

  // required double VirtualContainerXLen = 10;
  if (has_virtualcontainerxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->virtualcontainerxlen(), target);
  }

  // required double VirtualContainerYLen = 11;
  if (has_virtualcontainerylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->virtualcontainerylen(), target);
  }

  // required double VirtualContainerZLen = 12;
  if (has_virtualcontainerzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->virtualcontainerzlen(), target);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->creatorid(), target);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->updaterid(), target);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->createtime(), target);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->updatetime(), target);
  }

  // required string DoorCode = 17;
  if (has_doorcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorcode().data(), this->doorcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->doorcode(), target);
  }

  // required string DoorName = 18;
  if (has_doorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorname().data(), this->doorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->doorname(), target);
  }

  // required string DoorMemo = 19;
  if (has_doormemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doormemo().data(), this->doormemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->doormemo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorID = 1;
    if (has_doorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorid());
    }

    // required int32 GroupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required int32 FactoryID = 3;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required bool IsDel = 5;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsActive = 6;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required int32 GTypeID = 7;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required int32 CombineType = 8;
    if (has_combinetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combinetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 PhotoID = 9;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photoid());
    }

    // required double VirtualContainerXLen = 10;
    if (has_virtualcontainerxlen()) {
      total_size += 1 + 8;
    }

    // required double VirtualContainerYLen = 11;
    if (has_virtualcontainerylen()) {
      total_size += 1 + 8;
    }

    // required double VirtualContainerZLen = 12;
    if (has_virtualcontainerzlen()) {
      total_size += 1 + 8;
    }

    // required int32 CreatorID = 13;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 14;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 15;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 16;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string DoorCode = 17;
    if (has_doorcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doorcode());
    }

    // required string DoorName = 18;
    if (has_doorname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doorname());
    }

    // required string DoorMemo = 19;
    if (has_doormemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doormemo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorInfo::MergeFrom(const JK_DoorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doorid()) {
      set_doorid(from.doorid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_combinetype()) {
      set_combinetype(from.combinetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
    if (from.has_virtualcontainerxlen()) {
      set_virtualcontainerxlen(from.virtualcontainerxlen());
    }
    if (from.has_virtualcontainerylen()) {
      set_virtualcontainerylen(from.virtualcontainerylen());
    }
    if (from.has_virtualcontainerzlen()) {
      set_virtualcontainerzlen(from.virtualcontainerzlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_doorcode()) {
      set_doorcode(from.doorcode());
    }
    if (from.has_doorname()) {
      set_doorname(from.doorname());
    }
    if (from.has_doormemo()) {
      set_doormemo(from.doormemo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorInfo::CopyFrom(const JK_DoorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007ffff) != 0x0007ffff) return false;

  return true;
}

void JK_DoorInfo::Swap(JK_DoorInfo* other) {
  if (other != this) {
    std::swap(doorid_, other->doorid_);
    std::swap(groupid_, other->groupid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(isdel_, other->isdel_);
    std::swap(isactive_, other->isactive_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(combinetype_, other->combinetype_);
    std::swap(photoid_, other->photoid_);
    std::swap(virtualcontainerxlen_, other->virtualcontainerxlen_);
    std::swap(virtualcontainerylen_, other->virtualcontainerylen_);
    std::swap(virtualcontainerzlen_, other->virtualcontainerzlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(doorcode_, other->doorcode_);
    std::swap(doorname_, other->doorname_);
    std::swap(doormemo_, other->doormemo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorInfo_descriptor_;
  metadata.reflection = JK_DoorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorMatMapInfo::kDoorIDFieldNumber;
const int JK_DoorMatMapInfo::kDoorMatPlanIDFieldNumber;
const int JK_DoorMatMapInfo::kIsDefaultFieldNumber;
const int JK_DoorMatMapInfo::kVerCodeFieldNumber;
const int JK_DoorMatMapInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_DoorMatMapInfo::JK_DoorMatMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorMatMapInfo::InitAsDefaultInstance() {
}

JK_DoorMatMapInfo::JK_DoorMatMapInfo(const JK_DoorMatMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorMatMapInfo::SharedCtor() {
  _cached_size_ = 0;
  doorid_ = 0;
  doormatplanid_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorMatMapInfo::~JK_DoorMatMapInfo() {
  SharedDtor();
}

void JK_DoorMatMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DoorMatMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorMatMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorMatMapInfo_descriptor_;
}

const JK_DoorMatMapInfo& JK_DoorMatMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorMatMapInfo* JK_DoorMatMapInfo::default_instance_ = NULL;

JK_DoorMatMapInfo* JK_DoorMatMapInfo::New() const {
  return new JK_DoorMatMapInfo;
}

void JK_DoorMatMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doorid_ = 0;
    doormatplanid_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorMatMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorid_)));
          set_has_doorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DoorMatPlanID;
        break;
      }

      // required int32 DoorMatPlanID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doormatplanid_)));
          set_has_doormatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorMatMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorID = 1;
  if (has_doorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doorid(), output);
  }

  // required int32 DoorMatPlanID = 2;
  if (has_doormatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->doormatplanid(), output);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdefault(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorMatMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorID = 1;
  if (has_doorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doorid(), target);
  }

  // required int32 DoorMatPlanID = 2;
  if (has_doormatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->doormatplanid(), target);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdefault(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorMatMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorID = 1;
    if (has_doorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorid());
    }

    // required int32 DoorMatPlanID = 2;
    if (has_doormatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doormatplanid());
    }

    // required bool IsDefault = 3;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorMatMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorMatMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorMatMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorMatMapInfo::MergeFrom(const JK_DoorMatMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doorid()) {
      set_doorid(from.doorid());
    }
    if (from.has_doormatplanid()) {
      set_doormatplanid(from.doormatplanid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorMatMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorMatMapInfo::CopyFrom(const JK_DoorMatMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorMatMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void JK_DoorMatMapInfo::Swap(JK_DoorMatMapInfo* other) {
  if (other != this) {
    std::swap(doorid_, other->doorid_);
    std::swap(doormatplanid_, other->doormatplanid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorMatMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorMatMapInfo_descriptor_;
  metadata.reflection = JK_DoorMatMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorMatPlanHandleMapInfo::kDoorMatPlanIDFieldNumber;
const int JK_DoorMatPlanHandleMapInfo::kHandleIDFieldNumber;
const int JK_DoorMatPlanHandleMapInfo::kVerCodeFieldNumber;
const int JK_DoorMatPlanHandleMapInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_DoorMatPlanHandleMapInfo::JK_DoorMatPlanHandleMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorMatPlanHandleMapInfo::InitAsDefaultInstance() {
}

JK_DoorMatPlanHandleMapInfo::JK_DoorMatPlanHandleMapInfo(const JK_DoorMatPlanHandleMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorMatPlanHandleMapInfo::SharedCtor() {
  _cached_size_ = 0;
  doormatplanid_ = 0;
  handleid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorMatPlanHandleMapInfo::~JK_DoorMatPlanHandleMapInfo() {
  SharedDtor();
}

void JK_DoorMatPlanHandleMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DoorMatPlanHandleMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorMatPlanHandleMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorMatPlanHandleMapInfo_descriptor_;
}

const JK_DoorMatPlanHandleMapInfo& JK_DoorMatPlanHandleMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorMatPlanHandleMapInfo* JK_DoorMatPlanHandleMapInfo::default_instance_ = NULL;

JK_DoorMatPlanHandleMapInfo* JK_DoorMatPlanHandleMapInfo::New() const {
  return new JK_DoorMatPlanHandleMapInfo;
}

void JK_DoorMatPlanHandleMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doormatplanid_ = 0;
    handleid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorMatPlanHandleMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorMatPlanID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doormatplanid_)));
          set_has_doormatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HandleID;
        break;
      }

      // required int32 HandleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HandleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handleid_)));
          set_has_handleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorMatPlanHandleMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorMatPlanID = 1;
  if (has_doormatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doormatplanid(), output);
  }

  // required int32 HandleID = 2;
  if (has_handleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->handleid(), output);
  }

  // required int64 VerCode = 3;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->vercode(), output);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorMatPlanHandleMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorMatPlanID = 1;
  if (has_doormatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doormatplanid(), target);
  }

  // required int32 HandleID = 2;
  if (has_handleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->handleid(), target);
  }

  // required int64 VerCode = 3;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->vercode(), target);
  }

  // required int32 FactoryID = 4;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorMatPlanHandleMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorMatPlanID = 1;
    if (has_doormatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doormatplanid());
    }

    // required int32 HandleID = 2;
    if (has_handleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handleid());
    }

    // required int64 VerCode = 3;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 4;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorMatPlanHandleMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorMatPlanHandleMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorMatPlanHandleMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorMatPlanHandleMapInfo::MergeFrom(const JK_DoorMatPlanHandleMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doormatplanid()) {
      set_doormatplanid(from.doormatplanid());
    }
    if (from.has_handleid()) {
      set_handleid(from.handleid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorMatPlanHandleMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorMatPlanHandleMapInfo::CopyFrom(const JK_DoorMatPlanHandleMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorMatPlanHandleMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void JK_DoorMatPlanHandleMapInfo::Swap(JK_DoorMatPlanHandleMapInfo* other) {
  if (other != this) {
    std::swap(doormatplanid_, other->doormatplanid_);
    std::swap(handleid_, other->handleid_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorMatPlanHandleMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorMatPlanHandleMapInfo_descriptor_;
  metadata.reflection = JK_DoorMatPlanHandleMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorMatPlanInfo::kDoorMatPlanIDFieldNumber;
const int JK_DoorMatPlanInfo::kGroupIDFieldNumber;
const int JK_DoorMatPlanInfo::kIsDelFieldNumber;
const int JK_DoorMatPlanInfo::kIsActiveFieldNumber;
const int JK_DoorMatPlanInfo::kFactoryIDFieldNumber;
const int JK_DoorMatPlanInfo::kCreatorIDFieldNumber;
const int JK_DoorMatPlanInfo::kUpdaterIDFieldNumber;
const int JK_DoorMatPlanInfo::kCreateTimeFieldNumber;
const int JK_DoorMatPlanInfo::kUpdateTimeFieldNumber;
const int JK_DoorMatPlanInfo::kMatIDFieldNumber;
const int JK_DoorMatPlanInfo::kMatGTypeFieldNumber;
const int JK_DoorMatPlanInfo::kDoorMatPlanCodeFieldNumber;
const int JK_DoorMatPlanInfo::kDoorMatPlanNameFieldNumber;
const int JK_DoorMatPlanInfo::kDoorMatPlanMemoFieldNumber;
const int JK_DoorMatPlanInfo::kVerCodeFieldNumber;
const int JK_DoorMatPlanInfo::kModelIDFieldNumber;
const int JK_DoorMatPlanInfo::kIsCanSealFieldNumber;
#endif  // !_MSC_VER

JK_DoorMatPlanInfo::JK_DoorMatPlanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorMatPlanInfo::InitAsDefaultInstance() {
}

JK_DoorMatPlanInfo::JK_DoorMatPlanInfo(const JK_DoorMatPlanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorMatPlanInfo::SharedCtor() {
  _cached_size_ = 0;
  doormatplanid_ = 0;
  groupid_ = 0;
  isdel_ = false;
  isactive_ = false;
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  matid_ = 0;
  matgtype_ = 0;
  doormatplancode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doormatplanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doormatplanmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  modelid_ = 0;
  iscanseal_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorMatPlanInfo::~JK_DoorMatPlanInfo() {
  SharedDtor();
}

void JK_DoorMatPlanInfo::SharedDtor() {
  if (doormatplancode_ != &::google::protobuf::internal::kEmptyString) {
    delete doormatplancode_;
  }
  if (doormatplanname_ != &::google::protobuf::internal::kEmptyString) {
    delete doormatplanname_;
  }
  if (doormatplanmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete doormatplanmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_DoorMatPlanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorMatPlanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorMatPlanInfo_descriptor_;
}

const JK_DoorMatPlanInfo& JK_DoorMatPlanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorMatPlanInfo* JK_DoorMatPlanInfo::default_instance_ = NULL;

JK_DoorMatPlanInfo* JK_DoorMatPlanInfo::New() const {
  return new JK_DoorMatPlanInfo;
}

void JK_DoorMatPlanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doormatplanid_ = 0;
    groupid_ = 0;
    isdel_ = false;
    isactive_ = false;
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    updatetime_ = GOOGLE_LONGLONG(0);
    matid_ = 0;
    matgtype_ = 0;
    if (has_doormatplancode()) {
      if (doormatplancode_ != &::google::protobuf::internal::kEmptyString) {
        doormatplancode_->clear();
      }
    }
    if (has_doormatplanname()) {
      if (doormatplanname_ != &::google::protobuf::internal::kEmptyString) {
        doormatplanname_->clear();
      }
    }
    if (has_doormatplanmemo()) {
      if (doormatplanmemo_ != &::google::protobuf::internal::kEmptyString) {
        doormatplanmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
    modelid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    iscanseal_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorMatPlanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorMatPlanID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doormatplanid_)));
          set_has_doormatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_MatID;
        break;
      }

      // required int32 MatID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matid_)));
          set_has_matid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_MatGType;
        break;
      }

      // required int32 MatGType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatGType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matgtype_)));
          set_has_matgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_DoorMatPlanCode;
        break;
      }

      // required string DoorMatPlanCode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DoorMatPlanCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doormatplancode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doormatplancode().data(), this->doormatplancode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_DoorMatPlanName;
        break;
      }

      // required string DoorMatPlanName = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DoorMatPlanName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doormatplanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doormatplanname().data(), this->doormatplanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_DoorMatPlanMemo;
        break;
      }

      // required string DoorMatPlanMemo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DoorMatPlanMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doormatplanmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doormatplanmemo().data(), this->doormatplanmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ModelID;
        break;
      }

      // required int32 ModelID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_IsCanSeal;
        break;
      }

      // required bool IsCanSeal = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanSeal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscanseal_)));
          set_has_iscanseal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorMatPlanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorMatPlanID = 1;
  if (has_doormatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doormatplanid(), output);
  }

  // required int32 GroupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // required bool IsActive = 4;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isactive(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  // required int32 CreatorID = 6;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->creatorid(), output);
  }

  // required int32 UpdaterID = 7;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->updaterid(), output);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->createtime(), output);
  }

  // required int64 UpdateTime = 9;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->updatetime(), output);
  }

  // required int32 MatID = 10;
  if (has_matid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->matid(), output);
  }

  // required int32 MatGType = 11;
  if (has_matgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->matgtype(), output);
  }

  // required string DoorMatPlanCode = 12;
  if (has_doormatplancode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doormatplancode().data(), this->doormatplancode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->doormatplancode(), output);
  }

  // required string DoorMatPlanName = 13;
  if (has_doormatplanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doormatplanname().data(), this->doormatplanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->doormatplanname(), output);
  }

  // required string DoorMatPlanMemo = 14;
  if (has_doormatplanmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doormatplanmemo().data(), this->doormatplanmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->doormatplanmemo(), output);
  }

  // required int64 VerCode = 15;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->vercode(), output);
  }

  // required int32 ModelID = 16;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->modelid(), output);
  }

  // required bool IsCanSeal = 17;
  if (has_iscanseal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->iscanseal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorMatPlanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorMatPlanID = 1;
  if (has_doormatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doormatplanid(), target);
  }

  // required int32 GroupID = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // required bool IsActive = 4;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isactive(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  // required int32 CreatorID = 6;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->creatorid(), target);
  }

  // required int32 UpdaterID = 7;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->updaterid(), target);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->createtime(), target);
  }

  // required int64 UpdateTime = 9;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->updatetime(), target);
  }

  // required int32 MatID = 10;
  if (has_matid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->matid(), target);
  }

  // required int32 MatGType = 11;
  if (has_matgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->matgtype(), target);
  }

  // required string DoorMatPlanCode = 12;
  if (has_doormatplancode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doormatplancode().data(), this->doormatplancode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->doormatplancode(), target);
  }

  // required string DoorMatPlanName = 13;
  if (has_doormatplanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doormatplanname().data(), this->doormatplanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->doormatplanname(), target);
  }

  // required string DoorMatPlanMemo = 14;
  if (has_doormatplanmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doormatplanmemo().data(), this->doormatplanmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->doormatplanmemo(), target);
  }

  // required int64 VerCode = 15;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->vercode(), target);
  }

  // required int32 ModelID = 16;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->modelid(), target);
  }

  // required bool IsCanSeal = 17;
  if (has_iscanseal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->iscanseal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorMatPlanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorMatPlanID = 1;
    if (has_doormatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doormatplanid());
    }

    // required int32 GroupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required bool IsDel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsActive = 4;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 6;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 7;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 8;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 UpdateTime = 9;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required int32 MatID = 10;
    if (has_matid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matid());
    }

    // required int32 MatGType = 11;
    if (has_matgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matgtype());
    }

    // required string DoorMatPlanCode = 12;
    if (has_doormatplancode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doormatplancode());
    }

    // required string DoorMatPlanName = 13;
    if (has_doormatplanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doormatplanname());
    }

    // required string DoorMatPlanMemo = 14;
    if (has_doormatplanmemo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doormatplanmemo());
    }

    // required int64 VerCode = 15;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 ModelID = 16;
    if (has_modelid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bool IsCanSeal = 17;
    if (has_iscanseal()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorMatPlanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorMatPlanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorMatPlanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorMatPlanInfo::MergeFrom(const JK_DoorMatPlanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doormatplanid()) {
      set_doormatplanid(from.doormatplanid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_matid()) {
      set_matid(from.matid());
    }
    if (from.has_matgtype()) {
      set_matgtype(from.matgtype());
    }
    if (from.has_doormatplancode()) {
      set_doormatplancode(from.doormatplancode());
    }
    if (from.has_doormatplanname()) {
      set_doormatplanname(from.doormatplanname());
    }
    if (from.has_doormatplanmemo()) {
      set_doormatplanmemo(from.doormatplanmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_iscanseal()) {
      set_iscanseal(from.iscanseal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorMatPlanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorMatPlanInfo::CopyFrom(const JK_DoorMatPlanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorMatPlanInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void JK_DoorMatPlanInfo::Swap(JK_DoorMatPlanInfo* other) {
  if (other != this) {
    std::swap(doormatplanid_, other->doormatplanid_);
    std::swap(groupid_, other->groupid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isactive_, other->isactive_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(matid_, other->matid_);
    std::swap(matgtype_, other->matgtype_);
    std::swap(doormatplancode_, other->doormatplancode_);
    std::swap(doormatplanname_, other->doormatplanname_);
    std::swap(doormatplanmemo_, other->doormatplanmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(modelid_, other->modelid_);
    std::swap(iscanseal_, other->iscanseal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorMatPlanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorMatPlanInfo_descriptor_;
  metadata.reflection = JK_DoorMatPlanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorRegionHWFittingMapInfo::kDoorSystemRegionIDFieldNumber;
const int JK_DoorRegionHWFittingMapInfo::kHWFittingIDFieldNumber;
const int JK_DoorRegionHWFittingMapInfo::kIsDefaultFieldNumber;
const int JK_DoorRegionHWFittingMapInfo::kVerCodeFieldNumber;
const int JK_DoorRegionHWFittingMapInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_DoorRegionHWFittingMapInfo::JK_DoorRegionHWFittingMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorRegionHWFittingMapInfo::InitAsDefaultInstance() {
}

JK_DoorRegionHWFittingMapInfo::JK_DoorRegionHWFittingMapInfo(const JK_DoorRegionHWFittingMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorRegionHWFittingMapInfo::SharedCtor() {
  _cached_size_ = 0;
  doorsystemregionid_ = 0;
  hwfittingid_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorRegionHWFittingMapInfo::~JK_DoorRegionHWFittingMapInfo() {
  SharedDtor();
}

void JK_DoorRegionHWFittingMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DoorRegionHWFittingMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorRegionHWFittingMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorRegionHWFittingMapInfo_descriptor_;
}

const JK_DoorRegionHWFittingMapInfo& JK_DoorRegionHWFittingMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorRegionHWFittingMapInfo* JK_DoorRegionHWFittingMapInfo::default_instance_ = NULL;

JK_DoorRegionHWFittingMapInfo* JK_DoorRegionHWFittingMapInfo::New() const {
  return new JK_DoorRegionHWFittingMapInfo;
}

void JK_DoorRegionHWFittingMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doorsystemregionid_ = 0;
    hwfittingid_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorRegionHWFittingMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorSystemRegionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemregionid_)));
          set_has_doorsystemregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HWFittingID;
        break;
      }

      // required int32 HWFittingID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HWFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hwfittingid_)));
          set_has_hwfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorRegionHWFittingMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorSystemRegionID = 1;
  if (has_doorsystemregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doorsystemregionid(), output);
  }

  // required int32 HWFittingID = 2;
  if (has_hwfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hwfittingid(), output);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdefault(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorRegionHWFittingMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorSystemRegionID = 1;
  if (has_doorsystemregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doorsystemregionid(), target);
  }

  // required int32 HWFittingID = 2;
  if (has_hwfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hwfittingid(), target);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdefault(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorRegionHWFittingMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorSystemRegionID = 1;
    if (has_doorsystemregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemregionid());
    }

    // required int32 HWFittingID = 2;
    if (has_hwfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hwfittingid());
    }

    // required bool IsDefault = 3;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorRegionHWFittingMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorRegionHWFittingMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorRegionHWFittingMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorRegionHWFittingMapInfo::MergeFrom(const JK_DoorRegionHWFittingMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doorsystemregionid()) {
      set_doorsystemregionid(from.doorsystemregionid());
    }
    if (from.has_hwfittingid()) {
      set_hwfittingid(from.hwfittingid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorRegionHWFittingMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorRegionHWFittingMapInfo::CopyFrom(const JK_DoorRegionHWFittingMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorRegionHWFittingMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void JK_DoorRegionHWFittingMapInfo::Swap(JK_DoorRegionHWFittingMapInfo* other) {
  if (other != this) {
    std::swap(doorsystemregionid_, other->doorsystemregionid_);
    std::swap(hwfittingid_, other->hwfittingid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorRegionHWFittingMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorRegionHWFittingMapInfo_descriptor_;
  metadata.reflection = JK_DoorRegionHWFittingMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorSystemInfo::kDoorSystemIDFieldNumber;
const int JK_DoorSystemInfo::kFactoryIDFieldNumber;
const int JK_DoorSystemInfo::kVerCodeFieldNumber;
const int JK_DoorSystemInfo::kGroupIDFieldNumber;
const int JK_DoorSystemInfo::kIsDelFieldNumber;
const int JK_DoorSystemInfo::kIsActiveFieldNumber;
const int JK_DoorSystemInfo::kSupplyTypeFieldNumber;
const int JK_DoorSystemInfo::kMatchCabShapeFieldNumber;
const int JK_DoorSystemInfo::kInstallTypeFieldNumber;
const int JK_DoorSystemInfo::kVirtualXLenFieldNumber;
const int JK_DoorSystemInfo::kVirtualYLenFieldNumber;
const int JK_DoorSystemInfo::kVirtualShapeXLenFieldNumber;
const int JK_DoorSystemInfo::kVirtualShapeZLenFieldNumber;
const int JK_DoorSystemInfo::kCreatorIDFieldNumber;
const int JK_DoorSystemInfo::kUpdaterIDFieldNumber;
const int JK_DoorSystemInfo::kCreateTimeFieldNumber;
const int JK_DoorSystemInfo::kUpdateTimeFieldNumber;
const int JK_DoorSystemInfo::kDoorSystemCodeFieldNumber;
const int JK_DoorSystemInfo::kDoorSystemNameFieldNumber;
const int JK_DoorSystemInfo::kDoorSystemMemoFieldNumber;
#endif  // !_MSC_VER

JK_DoorSystemInfo::JK_DoorSystemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorSystemInfo::InitAsDefaultInstance() {
}

JK_DoorSystemInfo::JK_DoorSystemInfo(const JK_DoorSystemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorSystemInfo::SharedCtor() {
  _cached_size_ = 0;
  doorsystemid_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  groupid_ = 0;
  isdel_ = false;
  isactive_ = false;
  supplytype_ = 0;
  matchcabshape_ = 0;
  installtype_ = 0;
  virtualxlen_ = 0;
  virtualylen_ = 0;
  virtualshapexlen_ = 0;
  virtualshapezlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  doorsystemcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doorsystemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doorsystemmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorSystemInfo::~JK_DoorSystemInfo() {
  SharedDtor();
}

void JK_DoorSystemInfo::SharedDtor() {
  if (doorsystemcode_ != &::google::protobuf::internal::kEmptyString) {
    delete doorsystemcode_;
  }
  if (doorsystemname_ != &::google::protobuf::internal::kEmptyString) {
    delete doorsystemname_;
  }
  if (doorsystemmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete doorsystemmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_DoorSystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorSystemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorSystemInfo_descriptor_;
}

const JK_DoorSystemInfo& JK_DoorSystemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorSystemInfo* JK_DoorSystemInfo::default_instance_ = NULL;

JK_DoorSystemInfo* JK_DoorSystemInfo::New() const {
  return new JK_DoorSystemInfo;
}

void JK_DoorSystemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doorsystemid_ = 0;
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    groupid_ = 0;
    isdel_ = false;
    isactive_ = false;
    supplytype_ = 0;
    matchcabshape_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    installtype_ = 0;
    virtualxlen_ = 0;
    virtualylen_ = 0;
    virtualshapexlen_ = 0;
    virtualshapezlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_doorsystemcode()) {
      if (doorsystemcode_ != &::google::protobuf::internal::kEmptyString) {
        doorsystemcode_->clear();
      }
    }
    if (has_doorsystemname()) {
      if (doorsystemname_ != &::google::protobuf::internal::kEmptyString) {
        doorsystemname_->clear();
      }
    }
    if (has_doorsystemmemo()) {
      if (doorsystemmemo_ != &::google::protobuf::internal::kEmptyString) {
        doorsystemmemo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorSystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorSystemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemid_)));
          set_has_doorsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_MatchCabShape;
        break;
      }

      // required int32 MatchCabShape = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatchCabShape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchcabshape_)));
          set_has_matchcabshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_InstallType;
        break;
      }

      // required int32 InstallType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstallType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &installtype_)));
          set_has_installtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_VirtualXLen;
        break;
      }

      // required double VirtualXLen = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualxlen_)));
          set_has_virtualxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_VirtualYLen;
        break;
      }

      // required double VirtualYLen = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualylen_)));
          set_has_virtualylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_VirtualShapeXLen;
        break;
      }

      // required double VirtualShapeXLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualShapeXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualshapexlen_)));
          set_has_virtualshapexlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_VirtualShapeZLen;
        break;
      }

      // required double VirtualShapeZLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VirtualShapeZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualshapezlen_)));
          set_has_virtualshapezlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_DoorSystemCode;
        break;
      }

      // required string DoorSystemCode = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DoorSystemCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doorsystemcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doorsystemcode().data(), this->doorsystemcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_DoorSystemName;
        break;
      }

      // required string DoorSystemName = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DoorSystemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doorsystemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doorsystemname().data(), this->doorsystemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_DoorSystemMemo;
        break;
      }

      // required string DoorSystemMemo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DoorSystemMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doorsystemmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doorsystemmemo().data(), this->doorsystemmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorSystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorSystemID = 1;
  if (has_doorsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doorsystemid(), output);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // required int64 VerCode = 3;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->vercode(), output);
  }

  // required int32 GroupID = 4;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->groupid(), output);
  }

  // required bool IsDel = 5;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdel(), output);
  }

  // required bool IsActive = 6;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isactive(), output);
  }

  // required int32 SupplyType = 7;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->supplytype(), output);
  }

  // required int32 MatchCabShape = 8;
  if (has_matchcabshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->matchcabshape(), output);
  }

  // required int32 InstallType = 9;
  if (has_installtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->installtype(), output);
  }

  // required double VirtualXLen = 10;
  if (has_virtualxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->virtualxlen(), output);
  }

  // required double VirtualYLen = 11;
  if (has_virtualylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->virtualylen(), output);
  }

  // required double VirtualShapeXLen = 12;
  if (has_virtualshapexlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->virtualshapexlen(), output);
  }

  // required double VirtualShapeZLen = 13;
  if (has_virtualshapezlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->virtualshapezlen(), output);
  }

  // required int32 CreatorID = 14;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->creatorid(), output);
  }

  // required int32 UpdaterID = 15;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->updaterid(), output);
  }

  // required int64 CreateTime = 16;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->createtime(), output);
  }

  // required int64 UpdateTime = 17;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->updatetime(), output);
  }

  // required string DoorSystemCode = 18;
  if (has_doorsystemcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorsystemcode().data(), this->doorsystemcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->doorsystemcode(), output);
  }

  // required string DoorSystemName = 19;
  if (has_doorsystemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorsystemname().data(), this->doorsystemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->doorsystemname(), output);
  }

  // required string DoorSystemMemo = 20;
  if (has_doorsystemmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorsystemmemo().data(), this->doorsystemmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->doorsystemmemo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorSystemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorSystemID = 1;
  if (has_doorsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doorsystemid(), target);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // required int64 VerCode = 3;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->vercode(), target);
  }

  // required int32 GroupID = 4;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->groupid(), target);
  }

  // required bool IsDel = 5;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdel(), target);
  }

  // required bool IsActive = 6;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isactive(), target);
  }

  // required int32 SupplyType = 7;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->supplytype(), target);
  }

  // required int32 MatchCabShape = 8;
  if (has_matchcabshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->matchcabshape(), target);
  }

  // required int32 InstallType = 9;
  if (has_installtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->installtype(), target);
  }

  // required double VirtualXLen = 10;
  if (has_virtualxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->virtualxlen(), target);
  }

  // required double VirtualYLen = 11;
  if (has_virtualylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->virtualylen(), target);
  }

  // required double VirtualShapeXLen = 12;
  if (has_virtualshapexlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->virtualshapexlen(), target);
  }

  // required double VirtualShapeZLen = 13;
  if (has_virtualshapezlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->virtualshapezlen(), target);
  }

  // required int32 CreatorID = 14;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->creatorid(), target);
  }

  // required int32 UpdaterID = 15;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->updaterid(), target);
  }

  // required int64 CreateTime = 16;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->createtime(), target);
  }

  // required int64 UpdateTime = 17;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->updatetime(), target);
  }

  // required string DoorSystemCode = 18;
  if (has_doorsystemcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorsystemcode().data(), this->doorsystemcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->doorsystemcode(), target);
  }

  // required string DoorSystemName = 19;
  if (has_doorsystemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorsystemname().data(), this->doorsystemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->doorsystemname(), target);
  }

  // required string DoorSystemMemo = 20;
  if (has_doorsystemmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doorsystemmemo().data(), this->doorsystemmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->doorsystemmemo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorSystemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorSystemID = 1;
    if (has_doorsystemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemid());
    }

    // required int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 3;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 GroupID = 4;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required bool IsDel = 5;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsActive = 6;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required int32 SupplyType = 7;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 MatchCabShape = 8;
    if (has_matchcabshape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchcabshape());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 InstallType = 9;
    if (has_installtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->installtype());
    }

    // required double VirtualXLen = 10;
    if (has_virtualxlen()) {
      total_size += 1 + 8;
    }

    // required double VirtualYLen = 11;
    if (has_virtualylen()) {
      total_size += 1 + 8;
    }

    // required double VirtualShapeXLen = 12;
    if (has_virtualshapexlen()) {
      total_size += 1 + 8;
    }

    // required double VirtualShapeZLen = 13;
    if (has_virtualshapezlen()) {
      total_size += 1 + 8;
    }

    // required int32 CreatorID = 14;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 15;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 16;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 UpdateTime = 17;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string DoorSystemCode = 18;
    if (has_doorsystemcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doorsystemcode());
    }

    // required string DoorSystemName = 19;
    if (has_doorsystemname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doorsystemname());
    }

    // required string DoorSystemMemo = 20;
    if (has_doorsystemmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doorsystemmemo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorSystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorSystemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorSystemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorSystemInfo::MergeFrom(const JK_DoorSystemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doorsystemid()) {
      set_doorsystemid(from.doorsystemid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_matchcabshape()) {
      set_matchcabshape(from.matchcabshape());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_installtype()) {
      set_installtype(from.installtype());
    }
    if (from.has_virtualxlen()) {
      set_virtualxlen(from.virtualxlen());
    }
    if (from.has_virtualylen()) {
      set_virtualylen(from.virtualylen());
    }
    if (from.has_virtualshapexlen()) {
      set_virtualshapexlen(from.virtualshapexlen());
    }
    if (from.has_virtualshapezlen()) {
      set_virtualshapezlen(from.virtualshapezlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_doorsystemcode()) {
      set_doorsystemcode(from.doorsystemcode());
    }
    if (from.has_doorsystemname()) {
      set_doorsystemname(from.doorsystemname());
    }
    if (from.has_doorsystemmemo()) {
      set_doorsystemmemo(from.doorsystemmemo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorSystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorSystemInfo::CopyFrom(const JK_DoorSystemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorSystemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000fffff) != 0x000fffff) return false;

  return true;
}

void JK_DoorSystemInfo::Swap(JK_DoorSystemInfo* other) {
  if (other != this) {
    std::swap(doorsystemid_, other->doorsystemid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(groupid_, other->groupid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isactive_, other->isactive_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(matchcabshape_, other->matchcabshape_);
    std::swap(installtype_, other->installtype_);
    std::swap(virtualxlen_, other->virtualxlen_);
    std::swap(virtualylen_, other->virtualylen_);
    std::swap(virtualshapexlen_, other->virtualshapexlen_);
    std::swap(virtualshapezlen_, other->virtualshapezlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(doorsystemcode_, other->doorsystemcode_);
    std::swap(doorsystemname_, other->doorsystemname_);
    std::swap(doorsystemmemo_, other->doorsystemmemo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorSystemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorSystemInfo_descriptor_;
  metadata.reflection = JK_DoorSystemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorSystemMatMapInfo::kDoorSystemIDFieldNumber;
const int JK_DoorSystemMatMapInfo::kDoorMatPlanIDFieldNumber;
const int JK_DoorSystemMatMapInfo::kIsDefaultFieldNumber;
const int JK_DoorSystemMatMapInfo::kVerCodeFieldNumber;
const int JK_DoorSystemMatMapInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_DoorSystemMatMapInfo::JK_DoorSystemMatMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorSystemMatMapInfo::InitAsDefaultInstance() {
}

JK_DoorSystemMatMapInfo::JK_DoorSystemMatMapInfo(const JK_DoorSystemMatMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorSystemMatMapInfo::SharedCtor() {
  _cached_size_ = 0;
  doorsystemid_ = 0;
  doormatplanid_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorSystemMatMapInfo::~JK_DoorSystemMatMapInfo() {
  SharedDtor();
}

void JK_DoorSystemMatMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DoorSystemMatMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorSystemMatMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorSystemMatMapInfo_descriptor_;
}

const JK_DoorSystemMatMapInfo& JK_DoorSystemMatMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorSystemMatMapInfo* JK_DoorSystemMatMapInfo::default_instance_ = NULL;

JK_DoorSystemMatMapInfo* JK_DoorSystemMatMapInfo::New() const {
  return new JK_DoorSystemMatMapInfo;
}

void JK_DoorSystemMatMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doorsystemid_ = 0;
    doormatplanid_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorSystemMatMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorSystemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemid_)));
          set_has_doorsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DoorMatPlanID;
        break;
      }

      // required int32 DoorMatPlanID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorMatPlanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doormatplanid_)));
          set_has_doormatplanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorSystemMatMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorSystemID = 1;
  if (has_doorsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doorsystemid(), output);
  }

  // required int32 DoorMatPlanID = 2;
  if (has_doormatplanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->doormatplanid(), output);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdefault(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorSystemMatMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorSystemID = 1;
  if (has_doorsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doorsystemid(), target);
  }

  // required int32 DoorMatPlanID = 2;
  if (has_doormatplanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->doormatplanid(), target);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdefault(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorSystemMatMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorSystemID = 1;
    if (has_doorsystemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemid());
    }

    // required int32 DoorMatPlanID = 2;
    if (has_doormatplanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doormatplanid());
    }

    // required bool IsDefault = 3;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorSystemMatMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorSystemMatMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorSystemMatMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorSystemMatMapInfo::MergeFrom(const JK_DoorSystemMatMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doorsystemid()) {
      set_doorsystemid(from.doorsystemid());
    }
    if (from.has_doormatplanid()) {
      set_doormatplanid(from.doormatplanid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorSystemMatMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorSystemMatMapInfo::CopyFrom(const JK_DoorSystemMatMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorSystemMatMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void JK_DoorSystemMatMapInfo::Swap(JK_DoorSystemMatMapInfo* other) {
  if (other != this) {
    std::swap(doorsystemid_, other->doorsystemid_);
    std::swap(doormatplanid_, other->doormatplanid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorSystemMatMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorSystemMatMapInfo_descriptor_;
  metadata.reflection = JK_DoorSystemMatMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorSystemRegionDoorMapInfo::kDoorSystemRegionIDFieldNumber;
const int JK_DoorSystemRegionDoorMapInfo::kDoorIDFieldNumber;
const int JK_DoorSystemRegionDoorMapInfo::kIsDefaultFieldNumber;
const int JK_DoorSystemRegionDoorMapInfo::kVerCodeFieldNumber;
const int JK_DoorSystemRegionDoorMapInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_DoorSystemRegionDoorMapInfo::JK_DoorSystemRegionDoorMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorSystemRegionDoorMapInfo::InitAsDefaultInstance() {
}

JK_DoorSystemRegionDoorMapInfo::JK_DoorSystemRegionDoorMapInfo(const JK_DoorSystemRegionDoorMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorSystemRegionDoorMapInfo::SharedCtor() {
  _cached_size_ = 0;
  doorsystemregionid_ = 0;
  doorid_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorSystemRegionDoorMapInfo::~JK_DoorSystemRegionDoorMapInfo() {
  SharedDtor();
}

void JK_DoorSystemRegionDoorMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DoorSystemRegionDoorMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorSystemRegionDoorMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorSystemRegionDoorMapInfo_descriptor_;
}

const JK_DoorSystemRegionDoorMapInfo& JK_DoorSystemRegionDoorMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorSystemRegionDoorMapInfo* JK_DoorSystemRegionDoorMapInfo::default_instance_ = NULL;

JK_DoorSystemRegionDoorMapInfo* JK_DoorSystemRegionDoorMapInfo::New() const {
  return new JK_DoorSystemRegionDoorMapInfo;
}

void JK_DoorSystemRegionDoorMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doorsystemregionid_ = 0;
    doorid_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorSystemRegionDoorMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorSystemRegionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemregionid_)));
          set_has_doorsystemregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DoorID;
        break;
      }

      // required int32 DoorID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorid_)));
          set_has_doorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorSystemRegionDoorMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorSystemRegionID = 1;
  if (has_doorsystemregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doorsystemregionid(), output);
  }

  // required int32 DoorID = 2;
  if (has_doorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->doorid(), output);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdefault(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorSystemRegionDoorMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorSystemRegionID = 1;
  if (has_doorsystemregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doorsystemregionid(), target);
  }

  // required int32 DoorID = 2;
  if (has_doorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->doorid(), target);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdefault(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorSystemRegionDoorMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorSystemRegionID = 1;
    if (has_doorsystemregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemregionid());
    }

    // required int32 DoorID = 2;
    if (has_doorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorid());
    }

    // required bool IsDefault = 3;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorSystemRegionDoorMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorSystemRegionDoorMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorSystemRegionDoorMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorSystemRegionDoorMapInfo::MergeFrom(const JK_DoorSystemRegionDoorMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doorsystemregionid()) {
      set_doorsystemregionid(from.doorsystemregionid());
    }
    if (from.has_doorid()) {
      set_doorid(from.doorid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorSystemRegionDoorMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorSystemRegionDoorMapInfo::CopyFrom(const JK_DoorSystemRegionDoorMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorSystemRegionDoorMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void JK_DoorSystemRegionDoorMapInfo::Swap(JK_DoorSystemRegionDoorMapInfo* other) {
  if (other != this) {
    std::swap(doorsystemregionid_, other->doorsystemregionid_);
    std::swap(doorid_, other->doorid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorSystemRegionDoorMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorSystemRegionDoorMapInfo_descriptor_;
  metadata.reflection = JK_DoorSystemRegionDoorMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorSystemRegionInfo::kDoorSystemRegionIDFieldNumber;
const int JK_DoorSystemRegionInfo::kDoorSystemIDFieldNumber;
const int JK_DoorSystemRegionInfo::kParentIDFieldNumber;
const int JK_DoorSystemRegionInfo::kIsDelFieldNumber;
const int JK_DoorSystemRegionInfo::kRegionIndexFieldNumber;
const int JK_DoorSystemRegionInfo::kCutDirectionFieldNumber;
const int JK_DoorSystemRegionInfo::kCutFormulaFieldNumber;
const int JK_DoorSystemRegionInfo::kIsSlideFieldNumber;
const int JK_DoorSystemRegionInfo::kIsRoundFieldNumber;
const int JK_DoorSystemRegionInfo::kLenPrecisionFieldNumber;
const int JK_DoorSystemRegionInfo::kOpenDoorTypeFieldNumber;
const int JK_DoorSystemRegionInfo::kXAdjustLenFieldNumber;
const int JK_DoorSystemRegionInfo::kYAdjustLenFieldNumber;
const int JK_DoorSystemRegionInfo::kXDockFieldNumber;
const int JK_DoorSystemRegionInfo::kYDockFieldNumber;
const int JK_DoorSystemRegionInfo::kZDockFieldNumber;
const int JK_DoorSystemRegionInfo::kXOffsetFormulaFieldNumber;
const int JK_DoorSystemRegionInfo::kYOffsetFormulaFieldNumber;
const int JK_DoorSystemRegionInfo::kZOffsetFormulaFieldNumber;
const int JK_DoorSystemRegionInfo::kIsCanResizeFieldNumber;
const int JK_DoorSystemRegionInfo::kDoorFunctionFieldNumber;
const int JK_DoorSystemRegionInfo::kVerCodeFieldNumber;
const int JK_DoorSystemRegionInfo::kFactoryIDFieldNumber;
const int JK_DoorSystemRegionInfo::kCreatorIDFieldNumber;
const int JK_DoorSystemRegionInfo::kUpdaterIDFieldNumber;
const int JK_DoorSystemRegionInfo::kCreateTimeFieldNumber;
const int JK_DoorSystemRegionInfo::kUpdateTimeFieldNumber;
const int JK_DoorSystemRegionInfo::kHandleXDockFieldNumber;
const int JK_DoorSystemRegionInfo::kHandleYDockFieldNumber;
const int JK_DoorSystemRegionInfo::kHandleZDockFieldNumber;
const int JK_DoorSystemRegionInfo::kHandleXOffsetFormulaFieldNumber;
const int JK_DoorSystemRegionInfo::kHandleYOffsetFormulaFieldNumber;
const int JK_DoorSystemRegionInfo::kHandleZOffsetFormulaFieldNumber;
const int JK_DoorSystemRegionInfo::kZLenFieldNumber;
const int JK_DoorSystemRegionInfo::kDoorBoardMatTypeFieldNumber;
const int JK_DoorSystemRegionInfo::kDoorBoardMatIDFieldNumber;
const int JK_DoorSystemRegionInfo::kIsUseCustomThickFieldNumber;
#endif  // !_MSC_VER

JK_DoorSystemRegionInfo::JK_DoorSystemRegionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorSystemRegionInfo::InitAsDefaultInstance() {
}

JK_DoorSystemRegionInfo::JK_DoorSystemRegionInfo(const JK_DoorSystemRegionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorSystemRegionInfo::SharedCtor() {
  _cached_size_ = 0;
  doorsystemregionid_ = 0;
  doorsystemid_ = 0;
  parentid_ = 0;
  isdel_ = false;
  regionindex_ = 0;
  cutdirection_ = 0;
  cutformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isslide_ = false;
  isround_ = false;
  lenprecision_ = 0;
  opendoortype_ = 0;
  xadjustlen_ = 0;
  yadjustlen_ = 0;
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscanresize_ = false;
  doorfunction_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  handlexdock_ = 0;
  handleydock_ = 0;
  handlezdock_ = 0;
  handlexoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handleyoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handlezoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zlen_ = 0;
  doorboardmattype_ = 0;
  doorboardmatid_ = 0;
  isusecustomthick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorSystemRegionInfo::~JK_DoorSystemRegionInfo() {
  SharedDtor();
}

void JK_DoorSystemRegionInfo::SharedDtor() {
  if (cutformula_ != &::google::protobuf::internal::kEmptyString) {
    delete cutformula_;
  }
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (handlexoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete handlexoffsetformula_;
  }
  if (handleyoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete handleyoffsetformula_;
  }
  if (handlezoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete handlezoffsetformula_;
  }
  if (this != default_instance_) {
  }
}

void JK_DoorSystemRegionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorSystemRegionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorSystemRegionInfo_descriptor_;
}

const JK_DoorSystemRegionInfo& JK_DoorSystemRegionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorSystemRegionInfo* JK_DoorSystemRegionInfo::default_instance_ = NULL;

JK_DoorSystemRegionInfo* JK_DoorSystemRegionInfo::New() const {
  return new JK_DoorSystemRegionInfo;
}

void JK_DoorSystemRegionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doorsystemregionid_ = 0;
    doorsystemid_ = 0;
    parentid_ = 0;
    isdel_ = false;
    regionindex_ = 0;
    cutdirection_ = 0;
    if (has_cutformula()) {
      if (cutformula_ != &::google::protobuf::internal::kEmptyString) {
        cutformula_->clear();
      }
    }
    isslide_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isround_ = false;
    lenprecision_ = 0;
    opendoortype_ = 0;
    xadjustlen_ = 0;
    yadjustlen_ = 0;
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
    iscanresize_ = false;
    doorfunction_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    handlexdock_ = 0;
    handleydock_ = 0;
    handlezdock_ = 0;
    if (has_handlexoffsetformula()) {
      if (handlexoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        handlexoffsetformula_->clear();
      }
    }
    if (has_handleyoffsetformula()) {
      if (handleyoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        handleyoffsetformula_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_handlezoffsetformula()) {
      if (handlezoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        handlezoffsetformula_->clear();
      }
    }
    zlen_ = 0;
    doorboardmattype_ = 0;
    doorboardmatid_ = 0;
    isusecustomthick_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorSystemRegionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorSystemRegionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemregionid_)));
          set_has_doorsystemregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DoorSystemID;
        break;
      }

      // required int32 DoorSystemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorSystemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemid_)));
          set_has_doorsystemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ParentID;
        break;
      }

      // required int32 ParentID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentid_)));
          set_has_parentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RegionIndex;
        break;
      }

      // required int32 RegionIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RegionIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &regionindex_)));
          set_has_regionindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CutDirection;
        break;
      }

      // required int32 CutDirection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CutDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutdirection_)));
          set_has_cutdirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_CutFormula;
        break;
      }

      // required string CutFormula = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CutFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cutformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cutformula().data(), this->cutformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_IsSlide;
        break;
      }

      // required bool IsSlide = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSlide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isslide_)));
          set_has_isslide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsRound;
        break;
      }

      // required bool IsRound = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isround_)));
          set_has_isround();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LenPrecision;
        break;
      }

      // required int32 LenPrecision = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LenPrecision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lenprecision_)));
          set_has_lenprecision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_OpenDoorType;
        break;
      }

      // required int32 OpenDoorType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenDoorType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opendoortype_)));
          set_has_opendoortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_XAdjustLen;
        break;
      }

      // required double XAdjustLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XAdjustLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xadjustlen_)));
          set_has_xadjustlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_YAdjustLen;
        break;
      }

      // required double YAdjustLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YAdjustLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yadjustlen_)));
          set_has_yadjustlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_IsCanResize;
        break;
      }

      // required bool IsCanResize = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanResize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscanresize_)));
          set_has_iscanresize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_DoorFunction;
        break;
      }

      // required int32 DoorFunction = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorFunction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorfunction_)));
          set_has_doorfunction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_HandleXDock;
        break;
      }

      // required int32 HandleXDock = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HandleXDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handlexdock_)));
          set_has_handlexdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_HandleYDock;
        break;
      }

      // required int32 HandleYDock = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HandleYDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handleydock_)));
          set_has_handleydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_HandleZDock;
        break;
      }

      // required int32 HandleZDock = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HandleZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handlezdock_)));
          set_has_handlezdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_HandleXOffsetFormula;
        break;
      }

      // required string HandleXOffsetFormula = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HandleXOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handlexoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->handlexoffsetformula().data(), this->handlexoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_HandleYOffsetFormula;
        break;
      }

      // required string HandleYOffsetFormula = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HandleYOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handleyoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->handleyoffsetformula().data(), this->handleyoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_HandleZOffsetFormula;
        break;
      }

      // required string HandleZOffsetFormula = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HandleZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handlezoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->handlezoffsetformula().data(), this->handlezoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(273)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_DoorBoardMatType;
        break;
      }

      // required int32 DoorBoardMatType = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorBoardMatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorboardmattype_)));
          set_has_doorboardmattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_DoorBoardMatID;
        break;
      }

      // required int32 DoorBoardMatID = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoorBoardMatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorboardmatid_)));
          set_has_doorboardmatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_IsUseCustomThick;
        break;
      }

      // required bool IsUseCustomThick = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUseCustomThick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusecustomthick_)));
          set_has_isusecustomthick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorSystemRegionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorSystemRegionID = 1;
  if (has_doorsystemregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doorsystemregionid(), output);
  }

  // required int32 DoorSystemID = 2;
  if (has_doorsystemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->doorsystemid(), output);
  }

  // required int32 ParentID = 3;
  if (has_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parentid(), output);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdel(), output);
  }

  // required int32 RegionIndex = 5;
  if (has_regionindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->regionindex(), output);
  }

  // required int32 CutDirection = 6;
  if (has_cutdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cutdirection(), output);
  }

  // required string CutFormula = 7;
  if (has_cutformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cutformula().data(), this->cutformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cutformula(), output);
  }

  // required bool IsSlide = 8;
  if (has_isslide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isslide(), output);
  }

  // required bool IsRound = 9;
  if (has_isround()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isround(), output);
  }

  // required int32 LenPrecision = 10;
  if (has_lenprecision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lenprecision(), output);
  }

  // required int32 OpenDoorType = 11;
  if (has_opendoortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->opendoortype(), output);
  }

  // required double XAdjustLen = 12;
  if (has_xadjustlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->xadjustlen(), output);
  }

  // required double YAdjustLen = 13;
  if (has_yadjustlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->yadjustlen(), output);
  }

  // required int32 XDock = 14;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->xdock(), output);
  }

  // required int32 YDock = 15;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ydock(), output);
  }

  // required int32 ZDock = 16;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->zdock(), output);
  }

  // required string XOffsetFormula = 17;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 18;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 19;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->zoffsetformula(), output);
  }

  // required bool IsCanResize = 20;
  if (has_iscanresize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->iscanresize(), output);
  }

  // required int32 DoorFunction = 21;
  if (has_doorfunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->doorfunction(), output);
  }

  // required int64 VerCode = 22;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->vercode(), output);
  }

  // required int32 FactoryID = 23;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->factoryid(), output);
  }

  // required int32 CreatorID = 24;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->creatorid(), output);
  }

  // required int32 UpdaterID = 25;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->updaterid(), output);
  }

  // required int64 CreateTime = 26;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->createtime(), output);
  }

  // required int64 UpdateTime = 27;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->updatetime(), output);
  }

  // required int32 HandleXDock = 28;
  if (has_handlexdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->handlexdock(), output);
  }

  // required int32 HandleYDock = 29;
  if (has_handleydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->handleydock(), output);
  }

  // required int32 HandleZDock = 30;
  if (has_handlezdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->handlezdock(), output);
  }

  // required string HandleXOffsetFormula = 31;
  if (has_handlexoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->handlexoffsetformula().data(), this->handlexoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->handlexoffsetformula(), output);
  }

  // required string HandleYOffsetFormula = 32;
  if (has_handleyoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->handleyoffsetformula().data(), this->handleyoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->handleyoffsetformula(), output);
  }

  // required string HandleZOffsetFormula = 33;
  if (has_handlezoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->handlezoffsetformula().data(), this->handlezoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->handlezoffsetformula(), output);
  }

  // required double ZLen = 34;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->zlen(), output);
  }

  // required int32 DoorBoardMatType = 35;
  if (has_doorboardmattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->doorboardmattype(), output);
  }

  // required int32 DoorBoardMatID = 36;
  if (has_doorboardmatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->doorboardmatid(), output);
  }

  // required bool IsUseCustomThick = 37;
  if (has_isusecustomthick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->isusecustomthick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorSystemRegionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorSystemRegionID = 1;
  if (has_doorsystemregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doorsystemregionid(), target);
  }

  // required int32 DoorSystemID = 2;
  if (has_doorsystemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->doorsystemid(), target);
  }

  // required int32 ParentID = 3;
  if (has_parentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parentid(), target);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdel(), target);
  }

  // required int32 RegionIndex = 5;
  if (has_regionindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->regionindex(), target);
  }

  // required int32 CutDirection = 6;
  if (has_cutdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cutdirection(), target);
  }

  // required string CutFormula = 7;
  if (has_cutformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cutformula().data(), this->cutformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cutformula(), target);
  }

  // required bool IsSlide = 8;
  if (has_isslide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isslide(), target);
  }

  // required bool IsRound = 9;
  if (has_isround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isround(), target);
  }

  // required int32 LenPrecision = 10;
  if (has_lenprecision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lenprecision(), target);
  }

  // required int32 OpenDoorType = 11;
  if (has_opendoortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->opendoortype(), target);
  }

  // required double XAdjustLen = 12;
  if (has_xadjustlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->xadjustlen(), target);
  }

  // required double YAdjustLen = 13;
  if (has_yadjustlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->yadjustlen(), target);
  }

  // required int32 XDock = 14;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->xdock(), target);
  }

  // required int32 YDock = 15;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ydock(), target);
  }

  // required int32 ZDock = 16;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->zdock(), target);
  }

  // required string XOffsetFormula = 17;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 18;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 19;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->zoffsetformula(), target);
  }

  // required bool IsCanResize = 20;
  if (has_iscanresize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->iscanresize(), target);
  }

  // required int32 DoorFunction = 21;
  if (has_doorfunction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->doorfunction(), target);
  }

  // required int64 VerCode = 22;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->vercode(), target);
  }

  // required int32 FactoryID = 23;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->factoryid(), target);
  }

  // required int32 CreatorID = 24;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->creatorid(), target);
  }

  // required int32 UpdaterID = 25;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->updaterid(), target);
  }

  // required int64 CreateTime = 26;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->createtime(), target);
  }

  // required int64 UpdateTime = 27;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->updatetime(), target);
  }

  // required int32 HandleXDock = 28;
  if (has_handlexdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->handlexdock(), target);
  }

  // required int32 HandleYDock = 29;
  if (has_handleydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->handleydock(), target);
  }

  // required int32 HandleZDock = 30;
  if (has_handlezdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->handlezdock(), target);
  }

  // required string HandleXOffsetFormula = 31;
  if (has_handlexoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->handlexoffsetformula().data(), this->handlexoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->handlexoffsetformula(), target);
  }

  // required string HandleYOffsetFormula = 32;
  if (has_handleyoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->handleyoffsetformula().data(), this->handleyoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->handleyoffsetformula(), target);
  }

  // required string HandleZOffsetFormula = 33;
  if (has_handlezoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->handlezoffsetformula().data(), this->handlezoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->handlezoffsetformula(), target);
  }

  // required double ZLen = 34;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->zlen(), target);
  }

  // required int32 DoorBoardMatType = 35;
  if (has_doorboardmattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->doorboardmattype(), target);
  }

  // required int32 DoorBoardMatID = 36;
  if (has_doorboardmatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->doorboardmatid(), target);
  }

  // required bool IsUseCustomThick = 37;
  if (has_isusecustomthick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->isusecustomthick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorSystemRegionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorSystemRegionID = 1;
    if (has_doorsystemregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemregionid());
    }

    // required int32 DoorSystemID = 2;
    if (has_doorsystemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemid());
    }

    // required int32 ParentID = 3;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parentid());
    }

    // required bool IsDel = 4;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int32 RegionIndex = 5;
    if (has_regionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regionindex());
    }

    // required int32 CutDirection = 6;
    if (has_cutdirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cutdirection());
    }

    // required string CutFormula = 7;
    if (has_cutformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cutformula());
    }

    // required bool IsSlide = 8;
    if (has_isslide()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool IsRound = 9;
    if (has_isround()) {
      total_size += 1 + 1;
    }

    // required int32 LenPrecision = 10;
    if (has_lenprecision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lenprecision());
    }

    // required int32 OpenDoorType = 11;
    if (has_opendoortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opendoortype());
    }

    // required double XAdjustLen = 12;
    if (has_xadjustlen()) {
      total_size += 1 + 8;
    }

    // required double YAdjustLen = 13;
    if (has_yadjustlen()) {
      total_size += 1 + 8;
    }

    // required int32 XDock = 14;
    if (has_xdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 15;
    if (has_ydock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 16;
    if (has_zdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string XOffsetFormula = 17;
    if (has_xoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

    // required string YOffsetFormula = 18;
    if (has_yoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

    // required string ZOffsetFormula = 19;
    if (has_zoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

    // required bool IsCanResize = 20;
    if (has_iscanresize()) {
      total_size += 2 + 1;
    }

    // required int32 DoorFunction = 21;
    if (has_doorfunction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorfunction());
    }

    // required int64 VerCode = 22;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 23;
    if (has_factoryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 24;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 UpdaterID = 25;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 26;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 27;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required int32 HandleXDock = 28;
    if (has_handlexdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handlexdock());
    }

    // required int32 HandleYDock = 29;
    if (has_handleydock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handleydock());
    }

    // required int32 HandleZDock = 30;
    if (has_handlezdock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handlezdock());
    }

    // required string HandleXOffsetFormula = 31;
    if (has_handlexoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->handlexoffsetformula());
    }

    // required string HandleYOffsetFormula = 32;
    if (has_handleyoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->handleyoffsetformula());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required string HandleZOffsetFormula = 33;
    if (has_handlezoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->handlezoffsetformula());
    }

    // required double ZLen = 34;
    if (has_zlen()) {
      total_size += 2 + 8;
    }

    // required int32 DoorBoardMatType = 35;
    if (has_doorboardmattype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorboardmattype());
    }

    // required int32 DoorBoardMatID = 36;
    if (has_doorboardmatid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorboardmatid());
    }

    // required bool IsUseCustomThick = 37;
    if (has_isusecustomthick()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorSystemRegionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorSystemRegionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorSystemRegionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorSystemRegionInfo::MergeFrom(const JK_DoorSystemRegionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doorsystemregionid()) {
      set_doorsystemregionid(from.doorsystemregionid());
    }
    if (from.has_doorsystemid()) {
      set_doorsystemid(from.doorsystemid());
    }
    if (from.has_parentid()) {
      set_parentid(from.parentid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_regionindex()) {
      set_regionindex(from.regionindex());
    }
    if (from.has_cutdirection()) {
      set_cutdirection(from.cutdirection());
    }
    if (from.has_cutformula()) {
      set_cutformula(from.cutformula());
    }
    if (from.has_isslide()) {
      set_isslide(from.isslide());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isround()) {
      set_isround(from.isround());
    }
    if (from.has_lenprecision()) {
      set_lenprecision(from.lenprecision());
    }
    if (from.has_opendoortype()) {
      set_opendoortype(from.opendoortype());
    }
    if (from.has_xadjustlen()) {
      set_xadjustlen(from.xadjustlen());
    }
    if (from.has_yadjustlen()) {
      set_yadjustlen(from.yadjustlen());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
    if (from.has_iscanresize()) {
      set_iscanresize(from.iscanresize());
    }
    if (from.has_doorfunction()) {
      set_doorfunction(from.doorfunction());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_handlexdock()) {
      set_handlexdock(from.handlexdock());
    }
    if (from.has_handleydock()) {
      set_handleydock(from.handleydock());
    }
    if (from.has_handlezdock()) {
      set_handlezdock(from.handlezdock());
    }
    if (from.has_handlexoffsetformula()) {
      set_handlexoffsetformula(from.handlexoffsetformula());
    }
    if (from.has_handleyoffsetformula()) {
      set_handleyoffsetformula(from.handleyoffsetformula());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_handlezoffsetformula()) {
      set_handlezoffsetformula(from.handlezoffsetformula());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_doorboardmattype()) {
      set_doorboardmattype(from.doorboardmattype());
    }
    if (from.has_doorboardmatid()) {
      set_doorboardmatid(from.doorboardmatid());
    }
    if (from.has_isusecustomthick()) {
      set_isusecustomthick(from.isusecustomthick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorSystemRegionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorSystemRegionInfo::CopyFrom(const JK_DoorSystemRegionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorSystemRegionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void JK_DoorSystemRegionInfo::Swap(JK_DoorSystemRegionInfo* other) {
  if (other != this) {
    std::swap(doorsystemregionid_, other->doorsystemregionid_);
    std::swap(doorsystemid_, other->doorsystemid_);
    std::swap(parentid_, other->parentid_);
    std::swap(isdel_, other->isdel_);
    std::swap(regionindex_, other->regionindex_);
    std::swap(cutdirection_, other->cutdirection_);
    std::swap(cutformula_, other->cutformula_);
    std::swap(isslide_, other->isslide_);
    std::swap(isround_, other->isround_);
    std::swap(lenprecision_, other->lenprecision_);
    std::swap(opendoortype_, other->opendoortype_);
    std::swap(xadjustlen_, other->xadjustlen_);
    std::swap(yadjustlen_, other->yadjustlen_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(iscanresize_, other->iscanresize_);
    std::swap(doorfunction_, other->doorfunction_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(handlexdock_, other->handlexdock_);
    std::swap(handleydock_, other->handleydock_);
    std::swap(handlezdock_, other->handlezdock_);
    std::swap(handlexoffsetformula_, other->handlexoffsetformula_);
    std::swap(handleyoffsetformula_, other->handleyoffsetformula_);
    std::swap(handlezoffsetformula_, other->handlezoffsetformula_);
    std::swap(zlen_, other->zlen_);
    std::swap(doorboardmattype_, other->doorboardmattype_);
    std::swap(doorboardmatid_, other->doorboardmatid_);
    std::swap(isusecustomthick_, other->isusecustomthick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorSystemRegionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorSystemRegionInfo_descriptor_;
  metadata.reflection = JK_DoorSystemRegionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorSystemRegionSlideMapInfo::kDoorSystemRegionIDFieldNumber;
const int JK_DoorSystemRegionSlideMapInfo::kSlideIDFieldNumber;
const int JK_DoorSystemRegionSlideMapInfo::kSlidePositionFieldNumber;
const int JK_DoorSystemRegionSlideMapInfo::kIsDefaultFieldNumber;
const int JK_DoorSystemRegionSlideMapInfo::kVerCodeFieldNumber;
const int JK_DoorSystemRegionSlideMapInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_DoorSystemRegionSlideMapInfo::JK_DoorSystemRegionSlideMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorSystemRegionSlideMapInfo::InitAsDefaultInstance() {
}

JK_DoorSystemRegionSlideMapInfo::JK_DoorSystemRegionSlideMapInfo(const JK_DoorSystemRegionSlideMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorSystemRegionSlideMapInfo::SharedCtor() {
  _cached_size_ = 0;
  doorsystemregionid_ = 0;
  slideid_ = 0;
  slideposition_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorSystemRegionSlideMapInfo::~JK_DoorSystemRegionSlideMapInfo() {
  SharedDtor();
}

void JK_DoorSystemRegionSlideMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_DoorSystemRegionSlideMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorSystemRegionSlideMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorSystemRegionSlideMapInfo_descriptor_;
}

const JK_DoorSystemRegionSlideMapInfo& JK_DoorSystemRegionSlideMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorSystemRegionSlideMapInfo* JK_DoorSystemRegionSlideMapInfo::default_instance_ = NULL;

JK_DoorSystemRegionSlideMapInfo* JK_DoorSystemRegionSlideMapInfo::New() const {
  return new JK_DoorSystemRegionSlideMapInfo;
}

void JK_DoorSystemRegionSlideMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doorsystemregionid_ = 0;
    slideid_ = 0;
    slideposition_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorSystemRegionSlideMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorSystemRegionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemregionid_)));
          set_has_doorsystemregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SlideID;
        break;
      }

      // required int32 SlideID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SlideID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slideid_)));
          set_has_slideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SlidePosition;
        break;
      }

      // required int32 SlidePosition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SlidePosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slideposition_)));
          set_has_slideposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorSystemRegionSlideMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorSystemRegionID = 1;
  if (has_doorsystemregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doorsystemregionid(), output);
  }

  // required int32 SlideID = 2;
  if (has_slideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slideid(), output);
  }

  // required int32 SlidePosition = 3;
  if (has_slideposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slideposition(), output);
  }

  // required bool IsDefault = 4;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdefault(), output);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->vercode(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorSystemRegionSlideMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorSystemRegionID = 1;
  if (has_doorsystemregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doorsystemregionid(), target);
  }

  // required int32 SlideID = 2;
  if (has_slideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slideid(), target);
  }

  // required int32 SlidePosition = 3;
  if (has_slideposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slideposition(), target);
  }

  // required bool IsDefault = 4;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdefault(), target);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->vercode(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorSystemRegionSlideMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorSystemRegionID = 1;
    if (has_doorsystemregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemregionid());
    }

    // required int32 SlideID = 2;
    if (has_slideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slideid());
    }

    // required int32 SlidePosition = 3;
    if (has_slideposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slideposition());
    }

    // required bool IsDefault = 4;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 5;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorSystemRegionSlideMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorSystemRegionSlideMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorSystemRegionSlideMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorSystemRegionSlideMapInfo::MergeFrom(const JK_DoorSystemRegionSlideMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doorsystemregionid()) {
      set_doorsystemregionid(from.doorsystemregionid());
    }
    if (from.has_slideid()) {
      set_slideid(from.slideid());
    }
    if (from.has_slideposition()) {
      set_slideposition(from.slideposition());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorSystemRegionSlideMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorSystemRegionSlideMapInfo::CopyFrom(const JK_DoorSystemRegionSlideMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorSystemRegionSlideMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void JK_DoorSystemRegionSlideMapInfo::Swap(JK_DoorSystemRegionSlideMapInfo* other) {
  if (other != this) {
    std::swap(doorsystemregionid_, other->doorsystemregionid_);
    std::swap(slideid_, other->slideid_);
    std::swap(slideposition_, other->slideposition_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorSystemRegionSlideMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorSystemRegionSlideMapInfo_descriptor_;
  metadata.reflection = JK_DoorSystemRegionSlideMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_DoorSystemRegionSlidePositionSizeInfo::kDoorSystemRegionIDFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kSlidePositionFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kXAdjustLenFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kXDockFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kYDockFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kZDockFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kXOffsetFormulaFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kYOffsetFormulaFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kZOffsetFormulaFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kVerCodeFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kFactoryIDFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kCreatorIDFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kUpdaterIDFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kCreateTimeFieldNumber;
const int JK_DoorSystemRegionSlidePositionSizeInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_DoorSystemRegionSlidePositionSizeInfo::JK_DoorSystemRegionSlidePositionSizeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_DoorSystemRegionSlidePositionSizeInfo::InitAsDefaultInstance() {
}

JK_DoorSystemRegionSlidePositionSizeInfo::JK_DoorSystemRegionSlidePositionSizeInfo(const JK_DoorSystemRegionSlidePositionSizeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_DoorSystemRegionSlidePositionSizeInfo::SharedCtor() {
  _cached_size_ = 0;
  doorsystemregionid_ = 0;
  slideposition_ = 0;
  xadjustlen_ = 0;
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_DoorSystemRegionSlidePositionSizeInfo::~JK_DoorSystemRegionSlidePositionSizeInfo() {
  SharedDtor();
}

void JK_DoorSystemRegionSlidePositionSizeInfo::SharedDtor() {
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (this != default_instance_) {
  }
}

void JK_DoorSystemRegionSlidePositionSizeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_DoorSystemRegionSlidePositionSizeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_DoorSystemRegionSlidePositionSizeInfo_descriptor_;
}

const JK_DoorSystemRegionSlidePositionSizeInfo& JK_DoorSystemRegionSlidePositionSizeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_DoorSystemRegionSlidePositionSizeInfo* JK_DoorSystemRegionSlidePositionSizeInfo::default_instance_ = NULL;

JK_DoorSystemRegionSlidePositionSizeInfo* JK_DoorSystemRegionSlidePositionSizeInfo::New() const {
  return new JK_DoorSystemRegionSlidePositionSizeInfo;
}

void JK_DoorSystemRegionSlidePositionSizeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doorsystemregionid_ = 0;
    slideposition_ = 0;
    xadjustlen_ = 0;
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_DoorSystemRegionSlidePositionSizeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DoorSystemRegionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorsystemregionid_)));
          set_has_doorsystemregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SlidePosition;
        break;
      }

      // required int32 SlidePosition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SlidePosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slideposition_)));
          set_has_slideposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_XAdjustLen;
        break;
      }

      // required double XAdjustLen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XAdjustLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xadjustlen_)));
          set_has_xadjustlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_DoorSystemRegionSlidePositionSizeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 DoorSystemRegionID = 1;
  if (has_doorsystemregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doorsystemregionid(), output);
  }

  // required int32 SlidePosition = 2;
  if (has_slideposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slideposition(), output);
  }

  // required double XAdjustLen = 3;
  if (has_xadjustlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->xadjustlen(), output);
  }

  // required int32 XDock = 4;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->xdock(), output);
  }

  // required int32 YDock = 5;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ydock(), output);
  }

  // required int32 ZDock = 6;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->zdock(), output);
  }

  // required string XOffsetFormula = 7;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 8;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 9;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->zoffsetformula(), output);
  }

  // required int64 VerCode = 10;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->vercode(), output);
  }

  // required int32 FactoryID = 11;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->factoryid(), output);
  }

  // required int32 CreatorID = 12;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->creatorid(), output);
  }

  // required int32 UpdaterID = 13;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->updaterid(), output);
  }

  // required int64 CreateTime = 14;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->createtime(), output);
  }

  // required int64 UpdateTime = 15;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_DoorSystemRegionSlidePositionSizeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 DoorSystemRegionID = 1;
  if (has_doorsystemregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doorsystemregionid(), target);
  }

  // required int32 SlidePosition = 2;
  if (has_slideposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slideposition(), target);
  }

  // required double XAdjustLen = 3;
  if (has_xadjustlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->xadjustlen(), target);
  }

  // required int32 XDock = 4;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->xdock(), target);
  }

  // required int32 YDock = 5;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ydock(), target);
  }

  // required int32 ZDock = 6;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->zdock(), target);
  }

  // required string XOffsetFormula = 7;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 8;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 9;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->zoffsetformula(), target);
  }

  // required int64 VerCode = 10;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->vercode(), target);
  }

  // required int32 FactoryID = 11;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->factoryid(), target);
  }

  // required int32 CreatorID = 12;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->creatorid(), target);
  }

  // required int32 UpdaterID = 13;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->updaterid(), target);
  }

  // required int64 CreateTime = 14;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->createtime(), target);
  }

  // required int64 UpdateTime = 15;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_DoorSystemRegionSlidePositionSizeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DoorSystemRegionID = 1;
    if (has_doorsystemregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorsystemregionid());
    }

    // required int32 SlidePosition = 2;
    if (has_slideposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slideposition());
    }

    // required double XAdjustLen = 3;
    if (has_xadjustlen()) {
      total_size += 1 + 8;
    }

    // required int32 XDock = 4;
    if (has_xdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 5;
    if (has_ydock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 6;
    if (has_zdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // required string XOffsetFormula = 7;
    if (has_xoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

    // required string YOffsetFormula = 8;
    if (has_yoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string ZOffsetFormula = 9;
    if (has_zoffsetformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

    // required int64 VerCode = 10;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 11;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 12;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 13;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 14;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 15;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_DoorSystemRegionSlidePositionSizeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_DoorSystemRegionSlidePositionSizeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_DoorSystemRegionSlidePositionSizeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_DoorSystemRegionSlidePositionSizeInfo::MergeFrom(const JK_DoorSystemRegionSlidePositionSizeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doorsystemregionid()) {
      set_doorsystemregionid(from.doorsystemregionid());
    }
    if (from.has_slideposition()) {
      set_slideposition(from.slideposition());
    }
    if (from.has_xadjustlen()) {
      set_xadjustlen(from.xadjustlen());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_DoorSystemRegionSlidePositionSizeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_DoorSystemRegionSlidePositionSizeInfo::CopyFrom(const JK_DoorSystemRegionSlidePositionSizeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_DoorSystemRegionSlidePositionSizeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void JK_DoorSystemRegionSlidePositionSizeInfo::Swap(JK_DoorSystemRegionSlidePositionSizeInfo* other) {
  if (other != this) {
    std::swap(doorsystemregionid_, other->doorsystemregionid_);
    std::swap(slideposition_, other->slideposition_);
    std::swap(xadjustlen_, other->xadjustlen_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_DoorSystemRegionSlidePositionSizeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_DoorSystemRegionSlidePositionSizeInfo_descriptor_;
  metadata.reflection = JK_DoorSystemRegionSlidePositionSizeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_FNFittingInfo::kFNFittingIDFieldNumber;
const int JK_FNFittingInfo::kFactoryIDFieldNumber;
const int JK_FNFittingInfo::kGroupIDFieldNumber;
const int JK_FNFittingInfo::kIsDelFieldNumber;
const int JK_FNFittingInfo::kIsActiveFieldNumber;
const int JK_FNFittingInfo::kIsSplitFieldNumber;
const int JK_FNFittingInfo::kSupplyTypeFieldNumber;
const int JK_FNFittingInfo::kGTypeIDFieldNumber;
const int JK_FNFittingInfo::kIsEntireFieldNumber;
const int JK_FNFittingInfo::kShowIDFieldNumber;
const int JK_FNFittingInfo::kModelIDFieldNumber;
const int JK_FNFittingInfo::kXLenFieldNumber;
const int JK_FNFittingInfo::kYLenFieldNumber;
const int JK_FNFittingInfo::kZLenFieldNumber;
const int JK_FNFittingInfo::kMinInstallXFieldNumber;
const int JK_FNFittingInfo::kMinInstallYFieldNumber;
const int JK_FNFittingInfo::kMinInstallZFieldNumber;
const int JK_FNFittingInfo::kMinXLenFieldNumber;
const int JK_FNFittingInfo::kMaxXLenFieldNumber;
const int JK_FNFittingInfo::kMinYLenFieldNumber;
const int JK_FNFittingInfo::kMaxYLenFieldNumber;
const int JK_FNFittingInfo::kMinZLenFieldNumber;
const int JK_FNFittingInfo::kMaxZLenFieldNumber;
const int JK_FNFittingInfo::kIsMatchXLenFieldNumber;
const int JK_FNFittingInfo::kIsMatchYLenFieldNumber;
const int JK_FNFittingInfo::kIsMatchZLenFieldNumber;
const int JK_FNFittingInfo::kDefaultYPosFieldNumber;
const int JK_FNFittingInfo::kCreatorIDFieldNumber;
const int JK_FNFittingInfo::kUpdaterIDFieldNumber;
const int JK_FNFittingInfo::kCreateTimeFieldNumber;
const int JK_FNFittingInfo::kUpdateTimeFieldNumber;
const int JK_FNFittingInfo::kFNFittingCodeFieldNumber;
const int JK_FNFittingInfo::kFNFittingNameFieldNumber;
const int JK_FNFittingInfo::kFNFittingMemoFieldNumber;
const int JK_FNFittingInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_FNFittingInfo::JK_FNFittingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_FNFittingInfo::InitAsDefaultInstance() {
}

JK_FNFittingInfo::JK_FNFittingInfo(const JK_FNFittingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_FNFittingInfo::SharedCtor() {
  _cached_size_ = 0;
  fnfittingid_ = 0;
  factoryid_ = 0;
  groupid_ = 0;
  isdel_ = false;
  isactive_ = false;
  issplit_ = false;
  supplytype_ = 0;
  gtypeid_ = 0;
  isentire_ = false;
  showid_ = 0;
  modelid_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  mininstallx_ = 0;
  mininstally_ = 0;
  mininstallz_ = 0;
  minxlen_ = 0;
  maxxlen_ = 0;
  minylen_ = 0;
  maxylen_ = 0;
  minzlen_ = 0;
  maxzlen_ = 0;
  ismatchxlen_ = false;
  ismatchylen_ = false;
  ismatchzlen_ = false;
  defaultypos_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  fnfittingcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fnfittingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fnfittingmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_FNFittingInfo::~JK_FNFittingInfo() {
  SharedDtor();
}

void JK_FNFittingInfo::SharedDtor() {
  if (fnfittingcode_ != &::google::protobuf::internal::kEmptyString) {
    delete fnfittingcode_;
  }
  if (fnfittingname_ != &::google::protobuf::internal::kEmptyString) {
    delete fnfittingname_;
  }
  if (fnfittingmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete fnfittingmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_FNFittingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_FNFittingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_FNFittingInfo_descriptor_;
}

const JK_FNFittingInfo& JK_FNFittingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_FNFittingInfo* JK_FNFittingInfo::default_instance_ = NULL;

JK_FNFittingInfo* JK_FNFittingInfo::New() const {
  return new JK_FNFittingInfo;
}

void JK_FNFittingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fnfittingid_ = 0;
    factoryid_ = 0;
    groupid_ = 0;
    isdel_ = false;
    isactive_ = false;
    issplit_ = false;
    supplytype_ = 0;
    gtypeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isentire_ = false;
    showid_ = 0;
    modelid_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    mininstallx_ = 0;
    mininstally_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mininstallz_ = 0;
    minxlen_ = 0;
    maxxlen_ = 0;
    minylen_ = 0;
    maxylen_ = 0;
    minzlen_ = 0;
    maxzlen_ = 0;
    ismatchxlen_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ismatchylen_ = false;
    ismatchzlen_ = false;
    defaultypos_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_fnfittingcode()) {
      if (fnfittingcode_ != &::google::protobuf::internal::kEmptyString) {
        fnfittingcode_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_fnfittingname()) {
      if (fnfittingname_ != &::google::protobuf::internal::kEmptyString) {
        fnfittingname_->clear();
      }
    }
    if (has_fnfittingmemo()) {
      if (fnfittingmemo_ != &::google::protobuf::internal::kEmptyString) {
        fnfittingmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_FNFittingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FNFittingID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingid_)));
          set_has_fnfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsSplit;
        break;
      }

      // required bool IsSplit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSplit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issplit_)));
          set_has_issplit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsEntire;
        break;
      }

      // required bool IsEntire = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsEntire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isentire_)));
          set_has_isentire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ShowID;
        break;
      }

      // required int32 ShowID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ModelID;
        break;
      }

      // required int32 ModelID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_XLen;
        break;
      }

      // required double XLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_YLen;
        break;
      }

      // required double YLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_MinInstallX;
        break;
      }

      // required double MinInstallX = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinInstallX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mininstallx_)));
          set_has_mininstallx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_MinInstallY;
        break;
      }

      // required double MinInstallY = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinInstallY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mininstally_)));
          set_has_mininstally();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_MinInstallZ;
        break;
      }

      // required double MinInstallZ = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinInstallZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mininstallz_)));
          set_has_mininstallz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_MinXLen;
        break;
      }

      // required double MinXLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minxlen_)));
          set_has_minxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_MaxXLen;
        break;
      }

      // required double MaxXLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxxlen_)));
          set_has_maxxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_MinYLen;
        break;
      }

      // required double MinYLen = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minylen_)));
          set_has_minylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_MaxYLen;
        break;
      }

      // required double MaxYLen = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxylen_)));
          set_has_maxylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_MinZLen;
        break;
      }

      // required double MinZLen = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minzlen_)));
          set_has_minzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_MaxZLen;
        break;
      }

      // required double MaxZLen = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxzlen_)));
          set_has_maxzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_IsMatchXLen;
        break;
      }

      // required bool IsMatchXLen = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMatchXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismatchxlen_)));
          set_has_ismatchxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_IsMatchYLen;
        break;
      }

      // required bool IsMatchYLen = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMatchYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismatchylen_)));
          set_has_ismatchylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_IsMatchZLen;
        break;
      }

      // required bool IsMatchZLen = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMatchZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismatchzlen_)));
          set_has_ismatchzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_DefaultYPos;
        break;
      }

      // required double DefaultYPos = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultYPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultypos_)));
          set_has_defaultypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_FNFittingCode;
        break;
      }

      // required string FNFittingCode = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FNFittingCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fnfittingcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fnfittingcode().data(), this->fnfittingcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_FNFittingName;
        break;
      }

      // required string FNFittingName = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FNFittingName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fnfittingname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fnfittingname().data(), this->fnfittingname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_FNFittingMemo;
        break;
      }

      // required string FNFittingMemo = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FNFittingMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fnfittingmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fnfittingmemo().data(), this->fnfittingmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_FNFittingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FNFittingID = 1;
  if (has_fnfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fnfittingid(), output);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdel(), output);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isactive(), output);
  }

  // required bool IsSplit = 6;
  if (has_issplit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->issplit(), output);
  }

  // required int32 SupplyType = 7;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->supplytype(), output);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gtypeid(), output);
  }

  // required bool IsEntire = 9;
  if (has_isentire()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isentire(), output);
  }

  // required int32 ShowID = 10;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->showid(), output);
  }

  // required int32 ModelID = 11;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->modelid(), output);
  }

  // required double XLen = 12;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->xlen(), output);
  }

  // required double YLen = 13;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->ylen(), output);
  }

  // required double ZLen = 14;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->zlen(), output);
  }

  // required double MinInstallX = 15;
  if (has_mininstallx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->mininstallx(), output);
  }

  // required double MinInstallY = 16;
  if (has_mininstally()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->mininstally(), output);
  }

  // required double MinInstallZ = 17;
  if (has_mininstallz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->mininstallz(), output);
  }

  // required double MinXLen = 18;
  if (has_minxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->minxlen(), output);
  }

  // required double MaxXLen = 19;
  if (has_maxxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->maxxlen(), output);
  }

  // required double MinYLen = 20;
  if (has_minylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->minylen(), output);
  }

  // required double MaxYLen = 21;
  if (has_maxylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->maxylen(), output);
  }

  // required double MinZLen = 22;
  if (has_minzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->minzlen(), output);
  }

  // required double MaxZLen = 23;
  if (has_maxzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->maxzlen(), output);
  }

  // required bool IsMatchXLen = 24;
  if (has_ismatchxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->ismatchxlen(), output);
  }

  // required bool IsMatchYLen = 25;
  if (has_ismatchylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->ismatchylen(), output);
  }

  // required bool IsMatchZLen = 26;
  if (has_ismatchzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->ismatchzlen(), output);
  }

  // required double DefaultYPos = 27;
  if (has_defaultypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->defaultypos(), output);
  }

  // required int32 CreatorID = 28;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->creatorid(), output);
  }

  // required int32 UpdaterID = 29;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->updaterid(), output);
  }

  // required int64 CreateTime = 30;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->createtime(), output);
  }

  // required int64 UpdateTime = 31;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->updatetime(), output);
  }

  // required string FNFittingCode = 32;
  if (has_fnfittingcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnfittingcode().data(), this->fnfittingcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->fnfittingcode(), output);
  }

  // required string FNFittingName = 33;
  if (has_fnfittingname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnfittingname().data(), this->fnfittingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->fnfittingname(), output);
  }

  // required string FNFittingMemo = 34;
  if (has_fnfittingmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnfittingmemo().data(), this->fnfittingmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->fnfittingmemo(), output);
  }

  // required int64 VerCode = 35;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_FNFittingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FNFittingID = 1;
  if (has_fnfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fnfittingid(), target);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdel(), target);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isactive(), target);
  }

  // required bool IsSplit = 6;
  if (has_issplit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->issplit(), target);
  }

  // required int32 SupplyType = 7;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->supplytype(), target);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gtypeid(), target);
  }

  // required bool IsEntire = 9;
  if (has_isentire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isentire(), target);
  }

  // required int32 ShowID = 10;
  if (has_showid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->showid(), target);
  }

  // required int32 ModelID = 11;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->modelid(), target);
  }

  // required double XLen = 12;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->xlen(), target);
  }

  // required double YLen = 13;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->ylen(), target);
  }

  // required double ZLen = 14;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->zlen(), target);
  }

  // required double MinInstallX = 15;
  if (has_mininstallx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->mininstallx(), target);
  }

  // required double MinInstallY = 16;
  if (has_mininstally()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->mininstally(), target);
  }

  // required double MinInstallZ = 17;
  if (has_mininstallz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->mininstallz(), target);
  }

  // required double MinXLen = 18;
  if (has_minxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->minxlen(), target);
  }

  // required double MaxXLen = 19;
  if (has_maxxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->maxxlen(), target);
  }

  // required double MinYLen = 20;
  if (has_minylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->minylen(), target);
  }

  // required double MaxYLen = 21;
  if (has_maxylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->maxylen(), target);
  }

  // required double MinZLen = 22;
  if (has_minzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->minzlen(), target);
  }

  // required double MaxZLen = 23;
  if (has_maxzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->maxzlen(), target);
  }

  // required bool IsMatchXLen = 24;
  if (has_ismatchxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->ismatchxlen(), target);
  }

  // required bool IsMatchYLen = 25;
  if (has_ismatchylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->ismatchylen(), target);
  }

  // required bool IsMatchZLen = 26;
  if (has_ismatchzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->ismatchzlen(), target);
  }

  // required double DefaultYPos = 27;
  if (has_defaultypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->defaultypos(), target);
  }

  // required int32 CreatorID = 28;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->creatorid(), target);
  }

  // required int32 UpdaterID = 29;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->updaterid(), target);
  }

  // required int64 CreateTime = 30;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->createtime(), target);
  }

  // required int64 UpdateTime = 31;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->updatetime(), target);
  }

  // required string FNFittingCode = 32;
  if (has_fnfittingcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnfittingcode().data(), this->fnfittingcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->fnfittingcode(), target);
  }

  // required string FNFittingName = 33;
  if (has_fnfittingname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnfittingname().data(), this->fnfittingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->fnfittingname(), target);
  }

  // required string FNFittingMemo = 34;
  if (has_fnfittingmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnfittingmemo().data(), this->fnfittingmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->fnfittingmemo(), target);
  }

  // required int64 VerCode = 35;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_FNFittingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FNFittingID = 1;
    if (has_fnfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingid());
    }

    // required int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 GroupID = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required bool IsDel = 4;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsActive = 5;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required bool IsSplit = 6;
    if (has_issplit()) {
      total_size += 1 + 1;
    }

    // required int32 SupplyType = 7;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 GTypeID = 8;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool IsEntire = 9;
    if (has_isentire()) {
      total_size += 1 + 1;
    }

    // required int32 ShowID = 10;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showid());
    }

    // required int32 ModelID = 11;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

    // required double XLen = 12;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 13;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double ZLen = 14;
    if (has_zlen()) {
      total_size += 1 + 8;
    }

    // required double MinInstallX = 15;
    if (has_mininstallx()) {
      total_size += 1 + 8;
    }

    // required double MinInstallY = 16;
    if (has_mininstally()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double MinInstallZ = 17;
    if (has_mininstallz()) {
      total_size += 2 + 8;
    }

    // required double MinXLen = 18;
    if (has_minxlen()) {
      total_size += 2 + 8;
    }

    // required double MaxXLen = 19;
    if (has_maxxlen()) {
      total_size += 2 + 8;
    }

    // required double MinYLen = 20;
    if (has_minylen()) {
      total_size += 2 + 8;
    }

    // required double MaxYLen = 21;
    if (has_maxylen()) {
      total_size += 2 + 8;
    }

    // required double MinZLen = 22;
    if (has_minzlen()) {
      total_size += 2 + 8;
    }

    // required double MaxZLen = 23;
    if (has_maxzlen()) {
      total_size += 2 + 8;
    }

    // required bool IsMatchXLen = 24;
    if (has_ismatchxlen()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required bool IsMatchYLen = 25;
    if (has_ismatchylen()) {
      total_size += 2 + 1;
    }

    // required bool IsMatchZLen = 26;
    if (has_ismatchzlen()) {
      total_size += 2 + 1;
    }

    // required double DefaultYPos = 27;
    if (has_defaultypos()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 28;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 29;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 30;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 31;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string FNFittingCode = 32;
    if (has_fnfittingcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fnfittingcode());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required string FNFittingName = 33;
    if (has_fnfittingname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fnfittingname());
    }

    // required string FNFittingMemo = 34;
    if (has_fnfittingmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fnfittingmemo());
    }

    // required int64 VerCode = 35;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_FNFittingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_FNFittingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_FNFittingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_FNFittingInfo::MergeFrom(const JK_FNFittingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fnfittingid()) {
      set_fnfittingid(from.fnfittingid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_issplit()) {
      set_issplit(from.issplit());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isentire()) {
      set_isentire(from.isentire());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_mininstallx()) {
      set_mininstallx(from.mininstallx());
    }
    if (from.has_mininstally()) {
      set_mininstally(from.mininstally());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mininstallz()) {
      set_mininstallz(from.mininstallz());
    }
    if (from.has_minxlen()) {
      set_minxlen(from.minxlen());
    }
    if (from.has_maxxlen()) {
      set_maxxlen(from.maxxlen());
    }
    if (from.has_minylen()) {
      set_minylen(from.minylen());
    }
    if (from.has_maxylen()) {
      set_maxylen(from.maxylen());
    }
    if (from.has_minzlen()) {
      set_minzlen(from.minzlen());
    }
    if (from.has_maxzlen()) {
      set_maxzlen(from.maxzlen());
    }
    if (from.has_ismatchxlen()) {
      set_ismatchxlen(from.ismatchxlen());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ismatchylen()) {
      set_ismatchylen(from.ismatchylen());
    }
    if (from.has_ismatchzlen()) {
      set_ismatchzlen(from.ismatchzlen());
    }
    if (from.has_defaultypos()) {
      set_defaultypos(from.defaultypos());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_fnfittingcode()) {
      set_fnfittingcode(from.fnfittingcode());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_fnfittingname()) {
      set_fnfittingname(from.fnfittingname());
    }
    if (from.has_fnfittingmemo()) {
      set_fnfittingmemo(from.fnfittingmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_FNFittingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_FNFittingInfo::CopyFrom(const JK_FNFittingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_FNFittingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00000007) != 0x00000007) return false;

  return true;
}

void JK_FNFittingInfo::Swap(JK_FNFittingInfo* other) {
  if (other != this) {
    std::swap(fnfittingid_, other->fnfittingid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(groupid_, other->groupid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isactive_, other->isactive_);
    std::swap(issplit_, other->issplit_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(isentire_, other->isentire_);
    std::swap(showid_, other->showid_);
    std::swap(modelid_, other->modelid_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(mininstallx_, other->mininstallx_);
    std::swap(mininstally_, other->mininstally_);
    std::swap(mininstallz_, other->mininstallz_);
    std::swap(minxlen_, other->minxlen_);
    std::swap(maxxlen_, other->maxxlen_);
    std::swap(minylen_, other->minylen_);
    std::swap(maxylen_, other->maxylen_);
    std::swap(minzlen_, other->minzlen_);
    std::swap(maxzlen_, other->maxzlen_);
    std::swap(ismatchxlen_, other->ismatchxlen_);
    std::swap(ismatchylen_, other->ismatchylen_);
    std::swap(ismatchzlen_, other->ismatchzlen_);
    std::swap(defaultypos_, other->defaultypos_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(fnfittingcode_, other->fnfittingcode_);
    std::swap(fnfittingname_, other->fnfittingname_);
    std::swap(fnfittingmemo_, other->fnfittingmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_FNFittingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_FNFittingInfo_descriptor_;
  metadata.reflection = JK_FNFittingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_FNFittingMatInfo::kFNFittingIDFieldNumber;
const int JK_FNFittingMatInfo::kMaterialIDFieldNumber;
const int JK_FNFittingMatInfo::kIsDefaultFieldNumber;
const int JK_FNFittingMatInfo::kVerCodeFieldNumber;
const int JK_FNFittingMatInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_FNFittingMatInfo::JK_FNFittingMatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_FNFittingMatInfo::InitAsDefaultInstance() {
}

JK_FNFittingMatInfo::JK_FNFittingMatInfo(const JK_FNFittingMatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_FNFittingMatInfo::SharedCtor() {
  _cached_size_ = 0;
  fnfittingid_ = 0;
  materialid_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_FNFittingMatInfo::~JK_FNFittingMatInfo() {
  SharedDtor();
}

void JK_FNFittingMatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_FNFittingMatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_FNFittingMatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_FNFittingMatInfo_descriptor_;
}

const JK_FNFittingMatInfo& JK_FNFittingMatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_FNFittingMatInfo* JK_FNFittingMatInfo::default_instance_ = NULL;

JK_FNFittingMatInfo* JK_FNFittingMatInfo::New() const {
  return new JK_FNFittingMatInfo;
}

void JK_FNFittingMatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fnfittingid_ = 0;
    materialid_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_FNFittingMatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FNFittingID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingid_)));
          set_has_fnfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_FNFittingMatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FNFittingID = 1;
  if (has_fnfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fnfittingid(), output);
  }

  // required int32 MaterialID = 2;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->materialid(), output);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdefault(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_FNFittingMatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FNFittingID = 1;
  if (has_fnfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fnfittingid(), target);
  }

  // required int32 MaterialID = 2;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->materialid(), target);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdefault(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_FNFittingMatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FNFittingID = 1;
    if (has_fnfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingid());
    }

    // required int32 MaterialID = 2;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required bool IsDefault = 3;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_FNFittingMatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_FNFittingMatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_FNFittingMatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_FNFittingMatInfo::MergeFrom(const JK_FNFittingMatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fnfittingid()) {
      set_fnfittingid(from.fnfittingid());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_FNFittingMatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_FNFittingMatInfo::CopyFrom(const JK_FNFittingMatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_FNFittingMatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void JK_FNFittingMatInfo::Swap(JK_FNFittingMatInfo* other) {
  if (other != this) {
    std::swap(fnfittingid_, other->fnfittingid_);
    std::swap(materialid_, other->materialid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_FNFittingMatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_FNFittingMatInfo_descriptor_;
  metadata.reflection = JK_FNFittingMatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_FNFittingPartInfo::kFNFittingPartIDFieldNumber;
const int JK_FNFittingPartInfo::kPartTypeFieldNumber;
const int JK_FNFittingPartInfo::kIsDelFieldNumber;
const int JK_FNFittingPartInfo::kFNFittingIDFieldNumber;
const int JK_FNFittingPartInfo::kIsUseMainFieldNumber;
const int JK_FNFittingPartInfo::kSkinDirectionFieldNumber;
const int JK_FNFittingPartInfo::kSplitTypeFieldNumber;
const int JK_FNFittingPartInfo::kArcXFieldNumber;
const int JK_FNFittingPartInfo::kArcYFieldNumber;
const int JK_FNFittingPartInfo::kArcZFieldNumber;
const int JK_FNFittingPartInfo::kXFormulaFieldNumber;
const int JK_FNFittingPartInfo::kYFormulaFieldNumber;
const int JK_FNFittingPartInfo::kXDockFieldNumber;
const int JK_FNFittingPartInfo::kYDockFieldNumber;
const int JK_FNFittingPartInfo::kZDockFieldNumber;
const int JK_FNFittingPartInfo::kXOffsetFormulaFieldNumber;
const int JK_FNFittingPartInfo::kYOffsetFormulaFieldNumber;
const int JK_FNFittingPartInfo::kZOffsetFormulaFieldNumber;
const int JK_FNFittingPartInfo::kFNFittingPartCodeFieldNumber;
const int JK_FNFittingPartInfo::kFNFittingPartNameFieldNumber;
const int JK_FNFittingPartInfo::kFNFittingPartMemoFieldNumber;
const int JK_FNFittingPartInfo::kVerCodeFieldNumber;
const int JK_FNFittingPartInfo::kFactoryIDFieldNumber;
const int JK_FNFittingPartInfo::kCreatorIDFieldNumber;
const int JK_FNFittingPartInfo::kUpdaterIDFieldNumber;
const int JK_FNFittingPartInfo::kCreateTimeFieldNumber;
const int JK_FNFittingPartInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_FNFittingPartInfo::JK_FNFittingPartInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_FNFittingPartInfo::InitAsDefaultInstance() {
}

JK_FNFittingPartInfo::JK_FNFittingPartInfo(const JK_FNFittingPartInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_FNFittingPartInfo::SharedCtor() {
  _cached_size_ = 0;
  fnfittingpartid_ = 0;
  parttype_ = 0;
  isdel_ = false;
  fnfittingid_ = 0;
  isusemain_ = false;
  skindirection_ = 0;
  splittype_ = 0;
  arcx_ = 0;
  arcy_ = 0;
  arcz_ = 0;
  xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffsetformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fnfittingpartcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fnfittingpartname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fnfittingpartmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_FNFittingPartInfo::~JK_FNFittingPartInfo() {
  SharedDtor();
}

void JK_FNFittingPartInfo::SharedDtor() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffsetformula_;
  }
  if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffsetformula_;
  }
  if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffsetformula_;
  }
  if (fnfittingpartcode_ != &::google::protobuf::internal::kEmptyString) {
    delete fnfittingpartcode_;
  }
  if (fnfittingpartname_ != &::google::protobuf::internal::kEmptyString) {
    delete fnfittingpartname_;
  }
  if (fnfittingpartmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete fnfittingpartmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_FNFittingPartInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_FNFittingPartInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_FNFittingPartInfo_descriptor_;
}

const JK_FNFittingPartInfo& JK_FNFittingPartInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_FNFittingPartInfo* JK_FNFittingPartInfo::default_instance_ = NULL;

JK_FNFittingPartInfo* JK_FNFittingPartInfo::New() const {
  return new JK_FNFittingPartInfo;
}

void JK_FNFittingPartInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fnfittingpartid_ = 0;
    parttype_ = 0;
    isdel_ = false;
    fnfittingid_ = 0;
    isusemain_ = false;
    skindirection_ = 0;
    splittype_ = 0;
    arcx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    arcy_ = 0;
    arcz_ = 0;
    if (has_xformula()) {
      if (xformula_ != &::google::protobuf::internal::kEmptyString) {
        xformula_->clear();
      }
    }
    if (has_yformula()) {
      if (yformula_ != &::google::protobuf::internal::kEmptyString) {
        yformula_->clear();
      }
    }
    xdock_ = 0;
    ydock_ = 0;
    zdock_ = 0;
    if (has_xoffsetformula()) {
      if (xoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        xoffsetformula_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_yoffsetformula()) {
      if (yoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        yoffsetformula_->clear();
      }
    }
    if (has_zoffsetformula()) {
      if (zoffsetformula_ != &::google::protobuf::internal::kEmptyString) {
        zoffsetformula_->clear();
      }
    }
    if (has_fnfittingpartcode()) {
      if (fnfittingpartcode_ != &::google::protobuf::internal::kEmptyString) {
        fnfittingpartcode_->clear();
      }
    }
    if (has_fnfittingpartname()) {
      if (fnfittingpartname_ != &::google::protobuf::internal::kEmptyString) {
        fnfittingpartname_->clear();
      }
    }
    if (has_fnfittingpartmemo()) {
      if (fnfittingpartmemo_ != &::google::protobuf::internal::kEmptyString) {
        fnfittingpartmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_FNFittingPartInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FNFittingPartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingpartid_)));
          set_has_fnfittingpartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PartType;
        break;
      }

      // required int32 PartType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PartType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parttype_)));
          set_has_parttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FNFittingID;
        break;
      }

      // required int32 FNFittingID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FNFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingid_)));
          set_has_fnfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsUseMain;
        break;
      }

      // required bool IsUseMain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsUseMain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusemain_)));
          set_has_isusemain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_SkinDirection;
        break;
      }

      // required int32 SkinDirection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkinDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skindirection_)));
          set_has_skindirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SplitType;
        break;
      }

      // required int32 SplitType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SplitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &splittype_)));
          set_has_splittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_ArcX;
        break;
      }

      // required double ArcX = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcx_)));
          set_has_arcx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_ArcY;
        break;
      }

      // required double ArcY = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcy_)));
          set_has_arcy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_ArcZ;
        break;
      }

      // required double ArcZ = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcz_)));
          set_has_arcz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_XFormula;
        break;
      }

      // required string XFormula = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xformula().data(), this->xformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_YFormula;
        break;
      }

      // required string YFormula = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yformula().data(), this->yformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_XDock;
        break;
      }

      // required int32 XDock = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_YDock;
        break;
      }

      // required int32 YDock = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ZDock;
        break;
      }

      // required int32 ZDock = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_XOffsetFormula;
        break;
      }

      // required string XOffsetFormula = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffsetformula().data(), this->xoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_YOffsetFormula;
        break;
      }

      // required string YOffsetFormula = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffsetformula().data(), this->yoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_ZOffsetFormula;
        break;
      }

      // required string ZOffsetFormula = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffsetFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffsetformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffsetformula().data(), this->zoffsetformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_FNFittingPartCode;
        break;
      }

      // required string FNFittingPartCode = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FNFittingPartCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fnfittingpartcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fnfittingpartcode().data(), this->fnfittingpartcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_FNFittingPartName;
        break;
      }

      // required string FNFittingPartName = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FNFittingPartName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fnfittingpartname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fnfittingpartname().data(), this->fnfittingpartname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_FNFittingPartMemo;
        break;
      }

      // required string FNFittingPartMemo = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FNFittingPartMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fnfittingpartmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fnfittingpartmemo().data(), this->fnfittingpartmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_FNFittingPartInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FNFittingPartID = 1;
  if (has_fnfittingpartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fnfittingpartid(), output);
  }

  // required int32 PartType = 2;
  if (has_parttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parttype(), output);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // required int32 FNFittingID = 4;
  if (has_fnfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fnfittingid(), output);
  }

  // required bool IsUseMain = 5;
  if (has_isusemain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isusemain(), output);
  }

  // required int32 SkinDirection = 6;
  if (has_skindirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skindirection(), output);
  }

  // required int32 SplitType = 7;
  if (has_splittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->splittype(), output);
  }

  // required double ArcX = 8;
  if (has_arcx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->arcx(), output);
  }

  // required double ArcY = 9;
  if (has_arcy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->arcy(), output);
  }

  // required double ArcZ = 10;
  if (has_arcz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->arcz(), output);
  }

  // required string XFormula = 11;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->xformula(), output);
  }

  // required string YFormula = 12;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->yformula(), output);
  }

  // required int32 XDock = 13;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->xdock(), output);
  }

  // required int32 YDock = 14;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ydock(), output);
  }

  // required int32 ZDock = 15;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->zdock(), output);
  }

  // required string XOffsetFormula = 16;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->xoffsetformula(), output);
  }

  // required string YOffsetFormula = 17;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->yoffsetformula(), output);
  }

  // required string ZOffsetFormula = 18;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->zoffsetformula(), output);
  }

  // required string FNFittingPartCode = 19;
  if (has_fnfittingpartcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnfittingpartcode().data(), this->fnfittingpartcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->fnfittingpartcode(), output);
  }

  // required string FNFittingPartName = 20;
  if (has_fnfittingpartname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnfittingpartname().data(), this->fnfittingpartname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->fnfittingpartname(), output);
  }

  // required string FNFittingPartMemo = 21;
  if (has_fnfittingpartmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnfittingpartmemo().data(), this->fnfittingpartmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->fnfittingpartmemo(), output);
  }

  // required int64 VerCode = 22;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->vercode(), output);
  }

  // required int32 FactoryID = 23;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->factoryid(), output);
  }

  // required int32 CreatorID = 24;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->creatorid(), output);
  }

  // required int32 UpdaterID = 25;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->updaterid(), output);
  }

  // required int64 CreateTime = 26;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->createtime(), output);
  }

  // required int64 UpdateTime = 27;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_FNFittingPartInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FNFittingPartID = 1;
  if (has_fnfittingpartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fnfittingpartid(), target);
  }

  // required int32 PartType = 2;
  if (has_parttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parttype(), target);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // required int32 FNFittingID = 4;
  if (has_fnfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fnfittingid(), target);
  }

  // required bool IsUseMain = 5;
  if (has_isusemain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isusemain(), target);
  }

  // required int32 SkinDirection = 6;
  if (has_skindirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skindirection(), target);
  }

  // required int32 SplitType = 7;
  if (has_splittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->splittype(), target);
  }

  // required double ArcX = 8;
  if (has_arcx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->arcx(), target);
  }

  // required double ArcY = 9;
  if (has_arcy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->arcy(), target);
  }

  // required double ArcZ = 10;
  if (has_arcz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->arcz(), target);
  }

  // required string XFormula = 11;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->xformula(), target);
  }

  // required string YFormula = 12;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->yformula(), target);
  }

  // required int32 XDock = 13;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->xdock(), target);
  }

  // required int32 YDock = 14;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ydock(), target);
  }

  // required int32 ZDock = 15;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->zdock(), target);
  }

  // required string XOffsetFormula = 16;
  if (has_xoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffsetformula().data(), this->xoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->xoffsetformula(), target);
  }

  // required string YOffsetFormula = 17;
  if (has_yoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffsetformula().data(), this->yoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->yoffsetformula(), target);
  }

  // required string ZOffsetFormula = 18;
  if (has_zoffsetformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffsetformula().data(), this->zoffsetformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->zoffsetformula(), target);
  }

  // required string FNFittingPartCode = 19;
  if (has_fnfittingpartcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnfittingpartcode().data(), this->fnfittingpartcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->fnfittingpartcode(), target);
  }

  // required string FNFittingPartName = 20;
  if (has_fnfittingpartname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnfittingpartname().data(), this->fnfittingpartname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->fnfittingpartname(), target);
  }

  // required string FNFittingPartMemo = 21;
  if (has_fnfittingpartmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fnfittingpartmemo().data(), this->fnfittingpartmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->fnfittingpartmemo(), target);
  }

  // required int64 VerCode = 22;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->vercode(), target);
  }

  // required int32 FactoryID = 23;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->factoryid(), target);
  }

  // required int32 CreatorID = 24;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->creatorid(), target);
  }

  // required int32 UpdaterID = 25;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->updaterid(), target);
  }

  // required int64 CreateTime = 26;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->createtime(), target);
  }

  // required int64 UpdateTime = 27;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_FNFittingPartInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FNFittingPartID = 1;
    if (has_fnfittingpartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingpartid());
    }

    // required int32 PartType = 2;
    if (has_parttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parttype());
    }

    // required bool IsDel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int32 FNFittingID = 4;
    if (has_fnfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingid());
    }

    // required bool IsUseMain = 5;
    if (has_isusemain()) {
      total_size += 1 + 1;
    }

    // required int32 SkinDirection = 6;
    if (has_skindirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skindirection());
    }

    // required int32 SplitType = 7;
    if (has_splittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->splittype());
    }

    // required double ArcX = 8;
    if (has_arcx()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double ArcY = 9;
    if (has_arcy()) {
      total_size += 1 + 8;
    }

    // required double ArcZ = 10;
    if (has_arcz()) {
      total_size += 1 + 8;
    }

    // required string XFormula = 11;
    if (has_xformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xformula());
    }

    // required string YFormula = 12;
    if (has_yformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yformula());
    }

    // required int32 XDock = 13;
    if (has_xdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

    // required int32 YDock = 14;
    if (has_ydock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // required int32 ZDock = 15;
    if (has_zdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // required string XOffsetFormula = 16;
    if (has_xoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffsetformula());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string YOffsetFormula = 17;
    if (has_yoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffsetformula());
    }

    // required string ZOffsetFormula = 18;
    if (has_zoffsetformula()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffsetformula());
    }

    // required string FNFittingPartCode = 19;
    if (has_fnfittingpartcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fnfittingpartcode());
    }

    // required string FNFittingPartName = 20;
    if (has_fnfittingpartname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fnfittingpartname());
    }

    // required string FNFittingPartMemo = 21;
    if (has_fnfittingpartmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fnfittingpartmemo());
    }

    // required int64 VerCode = 22;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 23;
    if (has_factoryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 24;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 UpdaterID = 25;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 26;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 27;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_FNFittingPartInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_FNFittingPartInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_FNFittingPartInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_FNFittingPartInfo::MergeFrom(const JK_FNFittingPartInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fnfittingpartid()) {
      set_fnfittingpartid(from.fnfittingpartid());
    }
    if (from.has_parttype()) {
      set_parttype(from.parttype());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_fnfittingid()) {
      set_fnfittingid(from.fnfittingid());
    }
    if (from.has_isusemain()) {
      set_isusemain(from.isusemain());
    }
    if (from.has_skindirection()) {
      set_skindirection(from.skindirection());
    }
    if (from.has_splittype()) {
      set_splittype(from.splittype());
    }
    if (from.has_arcx()) {
      set_arcx(from.arcx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_arcy()) {
      set_arcy(from.arcy());
    }
    if (from.has_arcz()) {
      set_arcz(from.arcz());
    }
    if (from.has_xformula()) {
      set_xformula(from.xformula());
    }
    if (from.has_yformula()) {
      set_yformula(from.yformula());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xoffsetformula()) {
      set_xoffsetformula(from.xoffsetformula());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_yoffsetformula()) {
      set_yoffsetformula(from.yoffsetformula());
    }
    if (from.has_zoffsetformula()) {
      set_zoffsetformula(from.zoffsetformula());
    }
    if (from.has_fnfittingpartcode()) {
      set_fnfittingpartcode(from.fnfittingpartcode());
    }
    if (from.has_fnfittingpartname()) {
      set_fnfittingpartname(from.fnfittingpartname());
    }
    if (from.has_fnfittingpartmemo()) {
      set_fnfittingpartmemo(from.fnfittingpartmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_FNFittingPartInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_FNFittingPartInfo::CopyFrom(const JK_FNFittingPartInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_FNFittingPartInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x07ffffff) != 0x07ffffff) return false;

  return true;
}

void JK_FNFittingPartInfo::Swap(JK_FNFittingPartInfo* other) {
  if (other != this) {
    std::swap(fnfittingpartid_, other->fnfittingpartid_);
    std::swap(parttype_, other->parttype_);
    std::swap(isdel_, other->isdel_);
    std::swap(fnfittingid_, other->fnfittingid_);
    std::swap(isusemain_, other->isusemain_);
    std::swap(skindirection_, other->skindirection_);
    std::swap(splittype_, other->splittype_);
    std::swap(arcx_, other->arcx_);
    std::swap(arcy_, other->arcy_);
    std::swap(arcz_, other->arcz_);
    std::swap(xformula_, other->xformula_);
    std::swap(yformula_, other->yformula_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xoffsetformula_, other->xoffsetformula_);
    std::swap(yoffsetformula_, other->yoffsetformula_);
    std::swap(zoffsetformula_, other->zoffsetformula_);
    std::swap(fnfittingpartcode_, other->fnfittingpartcode_);
    std::swap(fnfittingpartname_, other->fnfittingpartname_);
    std::swap(fnfittingpartmemo_, other->fnfittingpartmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_FNFittingPartInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_FNFittingPartInfo_descriptor_;
  metadata.reflection = JK_FNFittingPartInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_FNFittingPartMatInfo::kFNFittingPartIDFieldNumber;
const int JK_FNFittingPartMatInfo::kMaterialIDFieldNumber;
const int JK_FNFittingPartMatInfo::kIsDefaultFieldNumber;
const int JK_FNFittingPartMatInfo::kVerCodeFieldNumber;
const int JK_FNFittingPartMatInfo::kFactoryIDFieldNumber;
const int JK_FNFittingPartMatInfo::kMatGTypeFieldNumber;
#endif  // !_MSC_VER

JK_FNFittingPartMatInfo::JK_FNFittingPartMatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_FNFittingPartMatInfo::InitAsDefaultInstance() {
}

JK_FNFittingPartMatInfo::JK_FNFittingPartMatInfo(const JK_FNFittingPartMatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_FNFittingPartMatInfo::SharedCtor() {
  _cached_size_ = 0;
  fnfittingpartid_ = 0;
  materialid_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  matgtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_FNFittingPartMatInfo::~JK_FNFittingPartMatInfo() {
  SharedDtor();
}

void JK_FNFittingPartMatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_FNFittingPartMatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_FNFittingPartMatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_FNFittingPartMatInfo_descriptor_;
}

const JK_FNFittingPartMatInfo& JK_FNFittingPartMatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_FNFittingPartMatInfo* JK_FNFittingPartMatInfo::default_instance_ = NULL;

JK_FNFittingPartMatInfo* JK_FNFittingPartMatInfo::New() const {
  return new JK_FNFittingPartMatInfo;
}

void JK_FNFittingPartMatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fnfittingpartid_ = 0;
    materialid_ = 0;
    isdefault_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    matgtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_FNFittingPartMatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FNFittingPartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingpartid_)));
          set_has_fnfittingpartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MatGType;
        break;
      }

      // required int32 MatGType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatGType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matgtype_)));
          set_has_matgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_FNFittingPartMatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FNFittingPartID = 1;
  if (has_fnfittingpartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fnfittingpartid(), output);
  }

  // required int32 MaterialID = 2;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->materialid(), output);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdefault(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  // required int32 MatGType = 6;
  if (has_matgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->matgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_FNFittingPartMatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FNFittingPartID = 1;
  if (has_fnfittingpartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fnfittingpartid(), target);
  }

  // required int32 MaterialID = 2;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->materialid(), target);
  }

  // required bool IsDefault = 3;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdefault(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  // required int32 MatGType = 6;
  if (has_matgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->matgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_FNFittingPartMatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FNFittingPartID = 1;
    if (has_fnfittingpartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingpartid());
    }

    // required int32 MaterialID = 2;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required bool IsDefault = 3;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 MatGType = 6;
    if (has_matgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_FNFittingPartMatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_FNFittingPartMatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_FNFittingPartMatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_FNFittingPartMatInfo::MergeFrom(const JK_FNFittingPartMatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fnfittingpartid()) {
      set_fnfittingpartid(from.fnfittingpartid());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_matgtype()) {
      set_matgtype(from.matgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_FNFittingPartMatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_FNFittingPartMatInfo::CopyFrom(const JK_FNFittingPartMatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_FNFittingPartMatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void JK_FNFittingPartMatInfo::Swap(JK_FNFittingPartMatInfo* other) {
  if (other != this) {
    std::swap(fnfittingpartid_, other->fnfittingpartid_);
    std::swap(materialid_, other->materialid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(matgtype_, other->matgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_FNFittingPartMatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_FNFittingPartMatInfo_descriptor_;
  metadata.reflection = JK_FNFittingPartMatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_FNFittingPartSealInfo::kFNFittingPartIDFieldNumber;
const int JK_FNFittingPartSealInfo::kSealOrderFieldNumber;
const int JK_FNFittingPartSealInfo::kSealIndexFieldNumber;
const int JK_FNFittingPartSealInfo::kSealTypeFieldNumber;
const int JK_FNFittingPartSealInfo::kVerCodeFieldNumber;
const int JK_FNFittingPartSealInfo::kFactoryIDFieldNumber;
const int JK_FNFittingPartSealInfo::kCreatorIDFieldNumber;
const int JK_FNFittingPartSealInfo::kUpdaterIDFieldNumber;
const int JK_FNFittingPartSealInfo::kCreateTimeFieldNumber;
const int JK_FNFittingPartSealInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_FNFittingPartSealInfo::JK_FNFittingPartSealInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_FNFittingPartSealInfo::InitAsDefaultInstance() {
}

JK_FNFittingPartSealInfo::JK_FNFittingPartSealInfo(const JK_FNFittingPartSealInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_FNFittingPartSealInfo::SharedCtor() {
  _cached_size_ = 0;
  fnfittingpartid_ = 0;
  sealorder_ = 0;
  sealindex_ = 0;
  sealtype_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_FNFittingPartSealInfo::~JK_FNFittingPartSealInfo() {
  SharedDtor();
}

void JK_FNFittingPartSealInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_FNFittingPartSealInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_FNFittingPartSealInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_FNFittingPartSealInfo_descriptor_;
}

const JK_FNFittingPartSealInfo& JK_FNFittingPartSealInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_FNFittingPartSealInfo* JK_FNFittingPartSealInfo::default_instance_ = NULL;

JK_FNFittingPartSealInfo* JK_FNFittingPartSealInfo::New() const {
  return new JK_FNFittingPartSealInfo;
}

void JK_FNFittingPartSealInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fnfittingpartid_ = 0;
    sealorder_ = 0;
    sealindex_ = 0;
    sealtype_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_FNFittingPartSealInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FNFittingPartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingpartid_)));
          set_has_fnfittingpartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SealOrder;
        break;
      }

      // required int32 SealOrder = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealorder_)));
          set_has_sealorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SealIndex;
        break;
      }

      // required int32 SealIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealindex_)));
          set_has_sealindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SealType;
        break;
      }

      // required int32 SealType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealtype_)));
          set_has_sealtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_FNFittingPartSealInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FNFittingPartID = 1;
  if (has_fnfittingpartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fnfittingpartid(), output);
  }

  // required int32 SealOrder = 2;
  if (has_sealorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sealorder(), output);
  }

  // required int32 SealIndex = 3;
  if (has_sealindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sealindex(), output);
  }

  // required int32 SealType = 4;
  if (has_sealtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sealtype(), output);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->vercode(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  // required int32 CreatorID = 7;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->creatorid(), output);
  }

  // required int32 UpdaterID = 8;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->updaterid(), output);
  }

  // required int64 CreateTime = 9;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->createtime(), output);
  }

  // required int64 UpdateTime = 10;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_FNFittingPartSealInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FNFittingPartID = 1;
  if (has_fnfittingpartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fnfittingpartid(), target);
  }

  // required int32 SealOrder = 2;
  if (has_sealorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sealorder(), target);
  }

  // required int32 SealIndex = 3;
  if (has_sealindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sealindex(), target);
  }

  // required int32 SealType = 4;
  if (has_sealtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sealtype(), target);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->vercode(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  // required int32 CreatorID = 7;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->creatorid(), target);
  }

  // required int32 UpdaterID = 8;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->updaterid(), target);
  }

  // required int64 CreateTime = 9;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->createtime(), target);
  }

  // required int64 UpdateTime = 10;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_FNFittingPartSealInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FNFittingPartID = 1;
    if (has_fnfittingpartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingpartid());
    }

    // required int32 SealOrder = 2;
    if (has_sealorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealorder());
    }

    // required int32 SealIndex = 3;
    if (has_sealindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealindex());
    }

    // required int32 SealType = 4;
    if (has_sealtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealtype());
    }

    // required int64 VerCode = 5;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 7;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 8;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 CreateTime = 9;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 10;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_FNFittingPartSealInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_FNFittingPartSealInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_FNFittingPartSealInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_FNFittingPartSealInfo::MergeFrom(const JK_FNFittingPartSealInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fnfittingpartid()) {
      set_fnfittingpartid(from.fnfittingpartid());
    }
    if (from.has_sealorder()) {
      set_sealorder(from.sealorder());
    }
    if (from.has_sealindex()) {
      set_sealindex(from.sealindex());
    }
    if (from.has_sealtype()) {
      set_sealtype(from.sealtype());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_FNFittingPartSealInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_FNFittingPartSealInfo::CopyFrom(const JK_FNFittingPartSealInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_FNFittingPartSealInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void JK_FNFittingPartSealInfo::Swap(JK_FNFittingPartSealInfo* other) {
  if (other != this) {
    std::swap(fnfittingpartid_, other->fnfittingpartid_);
    std::swap(sealorder_, other->sealorder_);
    std::swap(sealindex_, other->sealindex_);
    std::swap(sealtype_, other->sealtype_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_FNFittingPartSealInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_FNFittingPartSealInfo_descriptor_;
  metadata.reflection = JK_FNFittingPartSealInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_FittingInfo::kFittingIDFieldNumber;
const int JK_FittingInfo::kFactoryIDFieldNumber;
const int JK_FittingInfo::kGroupIDFieldNumber;
const int JK_FittingInfo::kIsDelFieldNumber;
const int JK_FittingInfo::kIsActiveFieldNumber;
const int JK_FittingInfo::kIsSplitFieldNumber;
const int JK_FittingInfo::kGTypeIDFieldNumber;
const int JK_FittingInfo::kSupplyTypeFieldNumber;
const int JK_FittingInfo::kShowIDFieldNumber;
const int JK_FittingInfo::kCreatorIDFieldNumber;
const int JK_FittingInfo::kUpdaterIDFieldNumber;
const int JK_FittingInfo::kCreateTimeFieldNumber;
const int JK_FittingInfo::kUpdateTimeFieldNumber;
const int JK_FittingInfo::kFittingCodeFieldNumber;
const int JK_FittingInfo::kFittingNameFieldNumber;
const int JK_FittingInfo::kFittingMemoFieldNumber;
const int JK_FittingInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_FittingInfo::JK_FittingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_FittingInfo::InitAsDefaultInstance() {
}

JK_FittingInfo::JK_FittingInfo(const JK_FittingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_FittingInfo::SharedCtor() {
  _cached_size_ = 0;
  fittingid_ = 0;
  factoryid_ = 0;
  groupid_ = 0;
  isdel_ = false;
  isactive_ = false;
  issplit_ = false;
  gtypeid_ = 0;
  supplytype_ = 0;
  showid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  fittingcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fittingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fittingmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_FittingInfo::~JK_FittingInfo() {
  SharedDtor();
}

void JK_FittingInfo::SharedDtor() {
  if (fittingcode_ != &::google::protobuf::internal::kEmptyString) {
    delete fittingcode_;
  }
  if (fittingname_ != &::google::protobuf::internal::kEmptyString) {
    delete fittingname_;
  }
  if (fittingmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete fittingmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_FittingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_FittingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_FittingInfo_descriptor_;
}

const JK_FittingInfo& JK_FittingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_FittingInfo* JK_FittingInfo::default_instance_ = NULL;

JK_FittingInfo* JK_FittingInfo::New() const {
  return new JK_FittingInfo;
}

void JK_FittingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fittingid_ = 0;
    factoryid_ = 0;
    groupid_ = 0;
    isdel_ = false;
    isactive_ = false;
    issplit_ = false;
    gtypeid_ = 0;
    supplytype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    showid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_fittingcode()) {
      if (fittingcode_ != &::google::protobuf::internal::kEmptyString) {
        fittingcode_->clear();
      }
    }
    if (has_fittingname()) {
      if (fittingname_ != &::google::protobuf::internal::kEmptyString) {
        fittingname_->clear();
      }
    }
    if (has_fittingmemo()) {
      if (fittingmemo_ != &::google::protobuf::internal::kEmptyString) {
        fittingmemo_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_FittingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FittingID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fittingid_)));
          set_has_fittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsSplit;
        break;
      }

      // required bool IsSplit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSplit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issplit_)));
          set_has_issplit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ShowID;
        break;
      }

      // required int32 ShowID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_FittingCode;
        break;
      }

      // required string FittingCode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FittingCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fittingcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fittingcode().data(), this->fittingcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_FittingName;
        break;
      }

      // required string FittingName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FittingName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fittingname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fittingname().data(), this->fittingname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_FittingMemo;
        break;
      }

      // required string FittingMemo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FittingMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fittingmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fittingmemo().data(), this->fittingmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_FittingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FittingID = 1;
  if (has_fittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fittingid(), output);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdel(), output);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isactive(), output);
  }

  // required bool IsSplit = 6;
  if (has_issplit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->issplit(), output);
  }

  // required int32 GTypeID = 7;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gtypeid(), output);
  }

  // required int32 SupplyType = 8;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->supplytype(), output);
  }

  // required int32 ShowID = 9;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->showid(), output);
  }

  // required int32 CreatorID = 10;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->creatorid(), output);
  }

  // required int32 UpdaterID = 11;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->updaterid(), output);
  }

  // required int64 CreateTime = 12;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->createtime(), output);
  }

  // required int64 UpdateTime = 13;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->updatetime(), output);
  }

  // required string FittingCode = 14;
  if (has_fittingcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fittingcode().data(), this->fittingcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->fittingcode(), output);
  }

  // required string FittingName = 15;
  if (has_fittingname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fittingname().data(), this->fittingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->fittingname(), output);
  }

  // required string FittingMemo = 16;
  if (has_fittingmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fittingmemo().data(), this->fittingmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->fittingmemo(), output);
  }

  // required int64 VerCode = 17;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_FittingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FittingID = 1;
  if (has_fittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fittingid(), target);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdel(), target);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isactive(), target);
  }

  // required bool IsSplit = 6;
  if (has_issplit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->issplit(), target);
  }

  // required int32 GTypeID = 7;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gtypeid(), target);
  }

  // required int32 SupplyType = 8;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->supplytype(), target);
  }

  // required int32 ShowID = 9;
  if (has_showid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->showid(), target);
  }

  // required int32 CreatorID = 10;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->creatorid(), target);
  }

  // required int32 UpdaterID = 11;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->updaterid(), target);
  }

  // required int64 CreateTime = 12;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->createtime(), target);
  }

  // required int64 UpdateTime = 13;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->updatetime(), target);
  }

  // required string FittingCode = 14;
  if (has_fittingcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fittingcode().data(), this->fittingcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->fittingcode(), target);
  }

  // required string FittingName = 15;
  if (has_fittingname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fittingname().data(), this->fittingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->fittingname(), target);
  }

  // required string FittingMemo = 16;
  if (has_fittingmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fittingmemo().data(), this->fittingmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->fittingmemo(), target);
  }

  // required int64 VerCode = 17;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_FittingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FittingID = 1;
    if (has_fittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fittingid());
    }

    // required int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 GroupID = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required bool IsDel = 4;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsActive = 5;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required bool IsSplit = 6;
    if (has_issplit()) {
      total_size += 1 + 1;
    }

    // required int32 GTypeID = 7;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required int32 SupplyType = 8;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 ShowID = 9;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showid());
    }

    // required int32 CreatorID = 10;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 11;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 12;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 13;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string FittingCode = 14;
    if (has_fittingcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fittingcode());
    }

    // required string FittingName = 15;
    if (has_fittingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fittingname());
    }

    // required string FittingMemo = 16;
    if (has_fittingmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fittingmemo());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 VerCode = 17;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_FittingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_FittingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_FittingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_FittingInfo::MergeFrom(const JK_FittingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fittingid()) {
      set_fittingid(from.fittingid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_issplit()) {
      set_issplit(from.issplit());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_fittingcode()) {
      set_fittingcode(from.fittingcode());
    }
    if (from.has_fittingname()) {
      set_fittingname(from.fittingname());
    }
    if (from.has_fittingmemo()) {
      set_fittingmemo(from.fittingmemo());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_FittingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_FittingInfo::CopyFrom(const JK_FittingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_FittingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void JK_FittingInfo::Swap(JK_FittingInfo* other) {
  if (other != this) {
    std::swap(fittingid_, other->fittingid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(groupid_, other->groupid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isactive_, other->isactive_);
    std::swap(issplit_, other->issplit_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(showid_, other->showid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(fittingcode_, other->fittingcode_);
    std::swap(fittingname_, other->fittingname_);
    std::swap(fittingmemo_, other->fittingmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_FittingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_FittingInfo_descriptor_;
  metadata.reflection = JK_FittingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_FittingRuleInfo::kFittingRuleIDFieldNumber;
const int JK_FittingRuleInfo::kOwnerIDFieldNumber;
const int JK_FittingRuleInfo::kOwnerGTypeIDFieldNumber;
const int JK_FittingRuleInfo::kIsDefaultFieldNumber;
const int JK_FittingRuleInfo::kIsCanDelFieldNumber;
const int JK_FittingRuleInfo::kMinLenFieldNumber;
const int JK_FittingRuleInfo::kMaxLenFieldNumber;
const int JK_FittingRuleInfo::kFittingIDFieldNumber;
const int JK_FittingRuleInfo::kFittingTypeFieldNumber;
const int JK_FittingRuleInfo::kUseCountFieldNumber;
const int JK_FittingRuleInfo::kVerCodeFieldNumber;
const int JK_FittingRuleInfo::kFactoryIDFieldNumber;
const int JK_FittingRuleInfo::kCreatorIDFieldNumber;
const int JK_FittingRuleInfo::kUpdaterIDFieldNumber;
const int JK_FittingRuleInfo::kCreateTimeFieldNumber;
const int JK_FittingRuleInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_FittingRuleInfo::JK_FittingRuleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_FittingRuleInfo::InitAsDefaultInstance() {
}

JK_FittingRuleInfo::JK_FittingRuleInfo(const JK_FittingRuleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_FittingRuleInfo::SharedCtor() {
  _cached_size_ = 0;
  fittingruleid_ = 0;
  ownerid_ = 0;
  ownergtypeid_ = 0;
  isdefault_ = false;
  iscandel_ = false;
  minlen_ = 0;
  maxlen_ = 0;
  fittingid_ = 0;
  fittingtype_ = 0;
  usecount_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_FittingRuleInfo::~JK_FittingRuleInfo() {
  SharedDtor();
}

void JK_FittingRuleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_FittingRuleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_FittingRuleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_FittingRuleInfo_descriptor_;
}

const JK_FittingRuleInfo& JK_FittingRuleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_FittingRuleInfo* JK_FittingRuleInfo::default_instance_ = NULL;

JK_FittingRuleInfo* JK_FittingRuleInfo::New() const {
  return new JK_FittingRuleInfo;
}

void JK_FittingRuleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fittingruleid_ = 0;
    ownerid_ = 0;
    ownergtypeid_ = 0;
    isdefault_ = false;
    iscandel_ = false;
    minlen_ = 0;
    maxlen_ = 0;
    fittingid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fittingtype_ = 0;
    usecount_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_FittingRuleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FittingRuleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fittingruleid_)));
          set_has_fittingruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OwnerID;
        break;
      }

      // required int32 OwnerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OwnerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OwnerGTypeID;
        break;
      }

      // required int32 OwnerGTypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OwnerGTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownergtypeid_)));
          set_has_ownergtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsCanDel;
        break;
      }

      // required bool IsCanDel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscandel_)));
          set_has_iscandel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_MinLen;
        break;
      }

      // required double MinLen = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minlen_)));
          set_has_minlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_MaxLen;
        break;
      }

      // required double MaxLen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxlen_)));
          set_has_maxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FittingID;
        break;
      }

      // required int32 FittingID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fittingid_)));
          set_has_fittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FittingType;
        break;
      }

      // required int32 FittingType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FittingType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fittingtype_)));
          set_has_fittingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_UseCount;
        break;
      }

      // required int32 UseCount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usecount_)));
          set_has_usecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_FittingRuleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FittingRuleID = 1;
  if (has_fittingruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fittingruleid(), output);
  }

  // required int32 OwnerID = 2;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ownerid(), output);
  }

  // required int32 OwnerGTypeID = 3;
  if (has_ownergtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ownergtypeid(), output);
  }

  // required bool IsDefault = 4;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdefault(), output);
  }

  // required bool IsCanDel = 5;
  if (has_iscandel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->iscandel(), output);
  }

  // required double MinLen = 6;
  if (has_minlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->minlen(), output);
  }

  // required double MaxLen = 7;
  if (has_maxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->maxlen(), output);
  }

  // required int32 FittingID = 8;
  if (has_fittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fittingid(), output);
  }

  // required int32 FittingType = 9;
  if (has_fittingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fittingtype(), output);
  }

  // required int32 UseCount = 10;
  if (has_usecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->usecount(), output);
  }

  // required int64 VerCode = 11;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->vercode(), output);
  }

  // required int32 FactoryID = 12;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->factoryid(), output);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->creatorid(), output);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->updaterid(), output);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->createtime(), output);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_FittingRuleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FittingRuleID = 1;
  if (has_fittingruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fittingruleid(), target);
  }

  // required int32 OwnerID = 2;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ownerid(), target);
  }

  // required int32 OwnerGTypeID = 3;
  if (has_ownergtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ownergtypeid(), target);
  }

  // required bool IsDefault = 4;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdefault(), target);
  }

  // required bool IsCanDel = 5;
  if (has_iscandel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->iscandel(), target);
  }

  // required double MinLen = 6;
  if (has_minlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->minlen(), target);
  }

  // required double MaxLen = 7;
  if (has_maxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->maxlen(), target);
  }

  // required int32 FittingID = 8;
  if (has_fittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fittingid(), target);
  }

  // required int32 FittingType = 9;
  if (has_fittingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fittingtype(), target);
  }

  // required int32 UseCount = 10;
  if (has_usecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->usecount(), target);
  }

  // required int64 VerCode = 11;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->vercode(), target);
  }

  // required int32 FactoryID = 12;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->factoryid(), target);
  }

  // required int32 CreatorID = 13;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->creatorid(), target);
  }

  // required int32 UpdaterID = 14;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->updaterid(), target);
  }

  // required int64 CreateTime = 15;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->createtime(), target);
  }

  // required int64 UpdateTime = 16;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_FittingRuleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FittingRuleID = 1;
    if (has_fittingruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fittingruleid());
    }

    // required int32 OwnerID = 2;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

    // required int32 OwnerGTypeID = 3;
    if (has_ownergtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownergtypeid());
    }

    // required bool IsDefault = 4;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required bool IsCanDel = 5;
    if (has_iscandel()) {
      total_size += 1 + 1;
    }

    // required double MinLen = 6;
    if (has_minlen()) {
      total_size += 1 + 8;
    }

    // required double MaxLen = 7;
    if (has_maxlen()) {
      total_size += 1 + 8;
    }

    // required int32 FittingID = 8;
    if (has_fittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fittingid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 FittingType = 9;
    if (has_fittingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fittingtype());
    }

    // required int32 UseCount = 10;
    if (has_usecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usecount());
    }

    // required int64 VerCode = 11;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 12;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 13;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 14;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 15;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 16;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_FittingRuleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_FittingRuleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_FittingRuleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_FittingRuleInfo::MergeFrom(const JK_FittingRuleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fittingruleid()) {
      set_fittingruleid(from.fittingruleid());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_ownergtypeid()) {
      set_ownergtypeid(from.ownergtypeid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_iscandel()) {
      set_iscandel(from.iscandel());
    }
    if (from.has_minlen()) {
      set_minlen(from.minlen());
    }
    if (from.has_maxlen()) {
      set_maxlen(from.maxlen());
    }
    if (from.has_fittingid()) {
      set_fittingid(from.fittingid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fittingtype()) {
      set_fittingtype(from.fittingtype());
    }
    if (from.has_usecount()) {
      set_usecount(from.usecount());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_FittingRuleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_FittingRuleInfo::CopyFrom(const JK_FittingRuleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_FittingRuleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void JK_FittingRuleInfo::Swap(JK_FittingRuleInfo* other) {
  if (other != this) {
    std::swap(fittingruleid_, other->fittingruleid_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(ownergtypeid_, other->ownergtypeid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(iscandel_, other->iscandel_);
    std::swap(minlen_, other->minlen_);
    std::swap(maxlen_, other->maxlen_);
    std::swap(fittingid_, other->fittingid_);
    std::swap(fittingtype_, other->fittingtype_);
    std::swap(usecount_, other->usecount_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_FittingRuleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_FittingRuleInfo_descriptor_;
  metadata.reflection = JK_FittingRuleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_FormulaConstInfo::kFactoryIDFieldNumber;
const int JK_FormulaConstInfo::kVerCodeFieldNumber;
const int JK_FormulaConstInfo::kConstCodeFieldNumber;
const int JK_FormulaConstInfo::kConstTextFieldNumber;
const int JK_FormulaConstInfo::kConstValueFieldNumber;
const int JK_FormulaConstInfo::kCreatorIDFieldNumber;
const int JK_FormulaConstInfo::kUpdaterIDFieldNumber;
const int JK_FormulaConstInfo::kCreateTimeFieldNumber;
const int JK_FormulaConstInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_FormulaConstInfo::JK_FormulaConstInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_FormulaConstInfo::InitAsDefaultInstance() {
}

JK_FormulaConstInfo::JK_FormulaConstInfo(const JK_FormulaConstInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_FormulaConstInfo::SharedCtor() {
  _cached_size_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  constcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  consttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  constvalue_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_FormulaConstInfo::~JK_FormulaConstInfo() {
  SharedDtor();
}

void JK_FormulaConstInfo::SharedDtor() {
  if (constcode_ != &::google::protobuf::internal::kEmptyString) {
    delete constcode_;
  }
  if (consttext_ != &::google::protobuf::internal::kEmptyString) {
    delete consttext_;
  }
  if (this != default_instance_) {
  }
}

void JK_FormulaConstInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_FormulaConstInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_FormulaConstInfo_descriptor_;
}

const JK_FormulaConstInfo& JK_FormulaConstInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_FormulaConstInfo* JK_FormulaConstInfo::default_instance_ = NULL;

JK_FormulaConstInfo* JK_FormulaConstInfo::New() const {
  return new JK_FormulaConstInfo;
}

void JK_FormulaConstInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    if (has_constcode()) {
      if (constcode_ != &::google::protobuf::internal::kEmptyString) {
        constcode_->clear();
      }
    }
    if (has_consttext()) {
      if (consttext_ != &::google::protobuf::internal::kEmptyString) {
        consttext_->clear();
      }
    }
    constvalue_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_FormulaConstInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FactoryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ConstCode;
        break;
      }

      // required string ConstCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConstCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_constcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->constcode().data(), this->constcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ConstText;
        break;
      }

      // required string ConstText = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConstText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->consttext().data(), this->consttext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ConstValue;
        break;
      }

      // required double ConstValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ConstValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &constvalue_)));
          set_has_constvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_FormulaConstInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FactoryID = 1;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->factoryid(), output);
  }

  // required int64 VerCode = 2;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->vercode(), output);
  }

  // required string ConstCode = 3;
  if (has_constcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->constcode().data(), this->constcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->constcode(), output);
  }

  // required string ConstText = 4;
  if (has_consttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->consttext().data(), this->consttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->consttext(), output);
  }

  // required double ConstValue = 5;
  if (has_constvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->constvalue(), output);
  }

  // required int32 CreatorID = 6;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->creatorid(), output);
  }

  // required int32 UpdaterID = 7;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->updaterid(), output);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->createtime(), output);
  }

  // required int64 UpdateTime = 9;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_FormulaConstInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FactoryID = 1;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->factoryid(), target);
  }

  // required int64 VerCode = 2;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->vercode(), target);
  }

  // required string ConstCode = 3;
  if (has_constcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->constcode().data(), this->constcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->constcode(), target);
  }

  // required string ConstText = 4;
  if (has_consttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->consttext().data(), this->consttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->consttext(), target);
  }

  // required double ConstValue = 5;
  if (has_constvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->constvalue(), target);
  }

  // required int32 CreatorID = 6;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->creatorid(), target);
  }

  // required int32 UpdaterID = 7;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->updaterid(), target);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->createtime(), target);
  }

  // required int64 UpdateTime = 9;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_FormulaConstInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FactoryID = 1;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 2;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required string ConstCode = 3;
    if (has_constcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->constcode());
    }

    // required string ConstText = 4;
    if (has_consttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->consttext());
    }

    // required double ConstValue = 5;
    if (has_constvalue()) {
      total_size += 1 + 8;
    }

    // required int32 CreatorID = 6;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 7;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 8;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 UpdateTime = 9;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_FormulaConstInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_FormulaConstInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_FormulaConstInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_FormulaConstInfo::MergeFrom(const JK_FormulaConstInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_constcode()) {
      set_constcode(from.constcode());
    }
    if (from.has_consttext()) {
      set_consttext(from.consttext());
    }
    if (from.has_constvalue()) {
      set_constvalue(from.constvalue());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_FormulaConstInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_FormulaConstInfo::CopyFrom(const JK_FormulaConstInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_FormulaConstInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void JK_FormulaConstInfo::Swap(JK_FormulaConstInfo* other) {
  if (other != this) {
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(constcode_, other->constcode_);
    std::swap(consttext_, other->consttext_);
    std::swap(constvalue_, other->constvalue_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_FormulaConstInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_FormulaConstInfo_descriptor_;
  metadata.reflection = JK_FormulaConstInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_GroupInfo::kGroupIDFieldNumber;
const int JK_GroupInfo::kParentIDFieldNumber;
const int JK_GroupInfo::kFactoryIDFieldNumber;
const int JK_GroupInfo::kIsDelFieldNumber;
const int JK_GroupInfo::kGTypeIDFieldNumber;
const int JK_GroupInfo::kCreatorIDFieldNumber;
const int JK_GroupInfo::kUpdaterIDFieldNumber;
const int JK_GroupInfo::kCreateTimeFieldNumber;
const int JK_GroupInfo::kUpdateTimeFieldNumber;
const int JK_GroupInfo::kGroupCodeFieldNumber;
const int JK_GroupInfo::kGroupNameFieldNumber;
const int JK_GroupInfo::kGroupMemoFieldNumber;
const int JK_GroupInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_GroupInfo::JK_GroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_GroupInfo::InitAsDefaultInstance() {
}

JK_GroupInfo::JK_GroupInfo(const JK_GroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_GroupInfo::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  parentid_ = 0;
  factoryid_ = 0;
  isdel_ = false;
  gtypeid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  groupcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_GroupInfo::~JK_GroupInfo() {
  SharedDtor();
}

void JK_GroupInfo::SharedDtor() {
  if (groupcode_ != &::google::protobuf::internal::kEmptyString) {
    delete groupcode_;
  }
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (groupmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete groupmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_GroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_GroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_GroupInfo_descriptor_;
}

const JK_GroupInfo& JK_GroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_GroupInfo* JK_GroupInfo::default_instance_ = NULL;

JK_GroupInfo* JK_GroupInfo::New() const {
  return new JK_GroupInfo;
}

void JK_GroupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0;
    parentid_ = 0;
    factoryid_ = 0;
    isdel_ = false;
    gtypeid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_groupcode()) {
      if (groupcode_ != &::google::protobuf::internal::kEmptyString) {
        groupcode_->clear();
      }
    }
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
    if (has_groupmemo()) {
      if (groupmemo_ != &::google::protobuf::internal::kEmptyString) {
        groupmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_GroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GroupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ParentID;
        break;
      }

      // required int32 ParentID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentid_)));
          set_has_parentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_GroupCode;
        break;
      }

      // required string GroupCode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GroupCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupcode().data(), this->groupcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_GroupName;
        break;
      }

      // required string GroupName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GroupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_GroupMemo;
        break;
      }

      // required string GroupMemo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GroupMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupmemo().data(), this->groupmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_GroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GroupID = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // required int32 ParentID = 2;
  if (has_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parentid(), output);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->factoryid(), output);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdel(), output);
  }

  // required int32 GTypeID = 5;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gtypeid(), output);
  }

  // required int32 CreatorID = 6;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->creatorid(), output);
  }

  // required int32 UpdaterID = 7;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->updaterid(), output);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->createtime(), output);
  }

  // required int64 UpdateTime = 9;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->updatetime(), output);
  }

  // required string GroupCode = 10;
  if (has_groupcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupcode().data(), this->groupcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->groupcode(), output);
  }

  // required string GroupName = 11;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->groupname(), output);
  }

  // required string GroupMemo = 12;
  if (has_groupmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupmemo().data(), this->groupmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->groupmemo(), output);
  }

  // required int64 VerCode = 13;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_GroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GroupID = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // required int32 ParentID = 2;
  if (has_parentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parentid(), target);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->factoryid(), target);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdel(), target);
  }

  // required int32 GTypeID = 5;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gtypeid(), target);
  }

  // required int32 CreatorID = 6;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->creatorid(), target);
  }

  // required int32 UpdaterID = 7;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->updaterid(), target);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->createtime(), target);
  }

  // required int64 UpdateTime = 9;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->updatetime(), target);
  }

  // required string GroupCode = 10;
  if (has_groupcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupcode().data(), this->groupcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->groupcode(), target);
  }

  // required string GroupName = 11;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->groupname(), target);
  }

  // required string GroupMemo = 12;
  if (has_groupmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupmemo().data(), this->groupmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->groupmemo(), target);
  }

  // required int64 VerCode = 13;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_GroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GroupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required int32 ParentID = 2;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parentid());
    }

    // required int32 FactoryID = 3;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required bool IsDel = 4;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int32 GTypeID = 5;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required int32 CreatorID = 6;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 7;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 8;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 UpdateTime = 9;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string GroupCode = 10;
    if (has_groupcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupcode());
    }

    // required string GroupName = 11;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // required string GroupMemo = 12;
    if (has_groupmemo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupmemo());
    }

    // required int64 VerCode = 13;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_GroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_GroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_GroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_GroupInfo::MergeFrom(const JK_GroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_parentid()) {
      set_parentid(from.parentid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_groupcode()) {
      set_groupcode(from.groupcode());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_groupmemo()) {
      set_groupmemo(from.groupmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_GroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_GroupInfo::CopyFrom(const JK_GroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_GroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void JK_GroupInfo::Swap(JK_GroupInfo* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(parentid_, other->parentid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(isdel_, other->isdel_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(groupcode_, other->groupcode_);
    std::swap(groupname_, other->groupname_);
    std::swap(groupmemo_, other->groupmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_GroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_GroupInfo_descriptor_;
  metadata.reflection = JK_GroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_HWFittingInfo::kHWFittingIDFieldNumber;
const int JK_HWFittingInfo::kFactoryIDFieldNumber;
const int JK_HWFittingInfo::kGroupIDFieldNumber;
const int JK_HWFittingInfo::kIsDelFieldNumber;
const int JK_HWFittingInfo::kIsActiveFieldNumber;
const int JK_HWFittingInfo::kIsSplitFieldNumber;
const int JK_HWFittingInfo::kSupplyTypeFieldNumber;
const int JK_HWFittingInfo::kGTypeIDFieldNumber;
const int JK_HWFittingInfo::kShowIDFieldNumber;
const int JK_HWFittingInfo::kModelIDFieldNumber;
const int JK_HWFittingInfo::kXLenFieldNumber;
const int JK_HWFittingInfo::kYLenFieldNumber;
const int JK_HWFittingInfo::kZLenFieldNumber;
const int JK_HWFittingInfo::kSettingCountRuleIDFieldNumber;
const int JK_HWFittingInfo::kIsMatchXLenFieldNumber;
const int JK_HWFittingInfo::kIsMatchYLenFieldNumber;
const int JK_HWFittingInfo::kIsMatchZLenFieldNumber;
const int JK_HWFittingInfo::kEffectLenFieldNumber;
const int JK_HWFittingInfo::kXAdjustLenFieldNumber;
const int JK_HWFittingInfo::kIsEmbedFieldNumber;
const int JK_HWFittingInfo::kInstallDirectionFieldNumber;
const int JK_HWFittingInfo::kCreatorIDFieldNumber;
const int JK_HWFittingInfo::kUpdaterIDFieldNumber;
const int JK_HWFittingInfo::kCreateTimeFieldNumber;
const int JK_HWFittingInfo::kUpdateTimeFieldNumber;
const int JK_HWFittingInfo::kHWFittingCodeFieldNumber;
const int JK_HWFittingInfo::kHWFittingNameFieldNumber;
const int JK_HWFittingInfo::kHWFittingMemoFieldNumber;
const int JK_HWFittingInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_HWFittingInfo::JK_HWFittingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_HWFittingInfo::InitAsDefaultInstance() {
}

JK_HWFittingInfo::JK_HWFittingInfo(const JK_HWFittingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_HWFittingInfo::SharedCtor() {
  _cached_size_ = 0;
  hwfittingid_ = 0;
  factoryid_ = 0;
  groupid_ = 0;
  isdel_ = false;
  isactive_ = false;
  issplit_ = false;
  supplytype_ = 0;
  gtypeid_ = 0;
  showid_ = 0;
  modelid_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  settingcountruleid_ = 0;
  ismatchxlen_ = false;
  ismatchylen_ = false;
  ismatchzlen_ = false;
  effectlen_ = 0;
  xadjustlen_ = 0;
  isembed_ = false;
  installdirection_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  hwfittingcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hwfittingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hwfittingmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_HWFittingInfo::~JK_HWFittingInfo() {
  SharedDtor();
}

void JK_HWFittingInfo::SharedDtor() {
  if (hwfittingcode_ != &::google::protobuf::internal::kEmptyString) {
    delete hwfittingcode_;
  }
  if (hwfittingname_ != &::google::protobuf::internal::kEmptyString) {
    delete hwfittingname_;
  }
  if (hwfittingmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete hwfittingmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_HWFittingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_HWFittingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_HWFittingInfo_descriptor_;
}

const JK_HWFittingInfo& JK_HWFittingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_HWFittingInfo* JK_HWFittingInfo::default_instance_ = NULL;

JK_HWFittingInfo* JK_HWFittingInfo::New() const {
  return new JK_HWFittingInfo;
}

void JK_HWFittingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hwfittingid_ = 0;
    factoryid_ = 0;
    groupid_ = 0;
    isdel_ = false;
    isactive_ = false;
    issplit_ = false;
    supplytype_ = 0;
    gtypeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    showid_ = 0;
    modelid_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    settingcountruleid_ = 0;
    ismatchxlen_ = false;
    ismatchylen_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    ismatchzlen_ = false;
    effectlen_ = 0;
    xadjustlen_ = 0;
    isembed_ = false;
    installdirection_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_hwfittingcode()) {
      if (hwfittingcode_ != &::google::protobuf::internal::kEmptyString) {
        hwfittingcode_->clear();
      }
    }
    if (has_hwfittingname()) {
      if (hwfittingname_ != &::google::protobuf::internal::kEmptyString) {
        hwfittingname_->clear();
      }
    }
    if (has_hwfittingmemo()) {
      if (hwfittingmemo_ != &::google::protobuf::internal::kEmptyString) {
        hwfittingmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_HWFittingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 HWFittingID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hwfittingid_)));
          set_has_hwfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsSplit;
        break;
      }

      // required bool IsSplit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSplit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issplit_)));
          set_has_issplit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ShowID;
        break;
      }

      // required int32 ShowID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ModelID;
        break;
      }

      // required int32 ModelID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_XLen;
        break;
      }

      // required double XLen = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_YLen;
        break;
      }

      // required double YLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_SettingCountRuleID;
        break;
      }

      // required int32 SettingCountRuleID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettingCountRuleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settingcountruleid_)));
          set_has_settingcountruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_IsMatchXLen;
        break;
      }

      // required bool IsMatchXLen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMatchXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismatchxlen_)));
          set_has_ismatchxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_IsMatchYLen;
        break;
      }

      // required bool IsMatchYLen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMatchYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismatchylen_)));
          set_has_ismatchylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_IsMatchZLen;
        break;
      }

      // required bool IsMatchZLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMatchZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismatchzlen_)));
          set_has_ismatchzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_EffectLen;
        break;
      }

      // required double EffectLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EffectLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &effectlen_)));
          set_has_effectlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_XAdjustLen;
        break;
      }

      // required double XAdjustLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XAdjustLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xadjustlen_)));
          set_has_xadjustlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_IsEmbed;
        break;
      }

      // required bool IsEmbed = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsEmbed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isembed_)));
          set_has_isembed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_InstallDirection;
        break;
      }

      // required int32 InstallDirection = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstallDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &installdirection_)));
          set_has_installdirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_HWFittingCode;
        break;
      }

      // required string HWFittingCode = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HWFittingCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hwfittingcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hwfittingcode().data(), this->hwfittingcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_HWFittingName;
        break;
      }

      // required string HWFittingName = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HWFittingName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hwfittingname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hwfittingname().data(), this->hwfittingname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_HWFittingMemo;
        break;
      }

      // required string HWFittingMemo = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HWFittingMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hwfittingmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hwfittingmemo().data(), this->hwfittingmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_HWFittingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 HWFittingID = 1;
  if (has_hwfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hwfittingid(), output);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdel(), output);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isactive(), output);
  }

  // required bool IsSplit = 6;
  if (has_issplit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->issplit(), output);
  }

  // required int32 SupplyType = 7;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->supplytype(), output);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gtypeid(), output);
  }

  // required int32 ShowID = 9;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->showid(), output);
  }

  // required int32 ModelID = 10;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->modelid(), output);
  }

  // required double XLen = 11;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->xlen(), output);
  }

  // required double YLen = 12;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->ylen(), output);
  }

  // required double ZLen = 13;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->zlen(), output);
  }

  // required int32 SettingCountRuleID = 14;
  if (has_settingcountruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->settingcountruleid(), output);
  }

  // required bool IsMatchXLen = 15;
  if (has_ismatchxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->ismatchxlen(), output);
  }

  // required bool IsMatchYLen = 16;
  if (has_ismatchylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->ismatchylen(), output);
  }

  // required bool IsMatchZLen = 17;
  if (has_ismatchzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->ismatchzlen(), output);
  }

  // required double EffectLen = 18;
  if (has_effectlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->effectlen(), output);
  }

  // required double XAdjustLen = 19;
  if (has_xadjustlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->xadjustlen(), output);
  }

  // required bool IsEmbed = 20;
  if (has_isembed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->isembed(), output);
  }

  // required int32 InstallDirection = 21;
  if (has_installdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->installdirection(), output);
  }

  // required int32 CreatorID = 22;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->creatorid(), output);
  }

  // required int32 UpdaterID = 23;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->updaterid(), output);
  }

  // required int64 CreateTime = 24;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->createtime(), output);
  }

  // required int64 UpdateTime = 25;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->updatetime(), output);
  }

  // required string HWFittingCode = 26;
  if (has_hwfittingcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hwfittingcode().data(), this->hwfittingcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->hwfittingcode(), output);
  }

  // required string HWFittingName = 27;
  if (has_hwfittingname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hwfittingname().data(), this->hwfittingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->hwfittingname(), output);
  }

  // required string HWFittingMemo = 28;
  if (has_hwfittingmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hwfittingmemo().data(), this->hwfittingmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->hwfittingmemo(), output);
  }

  // required int64 VerCode = 29;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_HWFittingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 HWFittingID = 1;
  if (has_hwfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hwfittingid(), target);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdel(), target);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isactive(), target);
  }

  // required bool IsSplit = 6;
  if (has_issplit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->issplit(), target);
  }

  // required int32 SupplyType = 7;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->supplytype(), target);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gtypeid(), target);
  }

  // required int32 ShowID = 9;
  if (has_showid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->showid(), target);
  }

  // required int32 ModelID = 10;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->modelid(), target);
  }

  // required double XLen = 11;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->xlen(), target);
  }

  // required double YLen = 12;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->ylen(), target);
  }

  // required double ZLen = 13;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->zlen(), target);
  }

  // required int32 SettingCountRuleID = 14;
  if (has_settingcountruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->settingcountruleid(), target);
  }

  // required bool IsMatchXLen = 15;
  if (has_ismatchxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->ismatchxlen(), target);
  }

  // required bool IsMatchYLen = 16;
  if (has_ismatchylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->ismatchylen(), target);
  }

  // required bool IsMatchZLen = 17;
  if (has_ismatchzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->ismatchzlen(), target);
  }

  // required double EffectLen = 18;
  if (has_effectlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->effectlen(), target);
  }

  // required double XAdjustLen = 19;
  if (has_xadjustlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->xadjustlen(), target);
  }

  // required bool IsEmbed = 20;
  if (has_isembed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->isembed(), target);
  }

  // required int32 InstallDirection = 21;
  if (has_installdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->installdirection(), target);
  }

  // required int32 CreatorID = 22;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->creatorid(), target);
  }

  // required int32 UpdaterID = 23;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->updaterid(), target);
  }

  // required int64 CreateTime = 24;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->createtime(), target);
  }

  // required int64 UpdateTime = 25;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->updatetime(), target);
  }

  // required string HWFittingCode = 26;
  if (has_hwfittingcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hwfittingcode().data(), this->hwfittingcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->hwfittingcode(), target);
  }

  // required string HWFittingName = 27;
  if (has_hwfittingname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hwfittingname().data(), this->hwfittingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->hwfittingname(), target);
  }

  // required string HWFittingMemo = 28;
  if (has_hwfittingmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hwfittingmemo().data(), this->hwfittingmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->hwfittingmemo(), target);
  }

  // required int64 VerCode = 29;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_HWFittingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 HWFittingID = 1;
    if (has_hwfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hwfittingid());
    }

    // required int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 GroupID = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required bool IsDel = 4;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsActive = 5;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required bool IsSplit = 6;
    if (has_issplit()) {
      total_size += 1 + 1;
    }

    // required int32 SupplyType = 7;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 GTypeID = 8;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 ShowID = 9;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showid());
    }

    // required int32 ModelID = 10;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

    // required double XLen = 11;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 12;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double ZLen = 13;
    if (has_zlen()) {
      total_size += 1 + 8;
    }

    // required int32 SettingCountRuleID = 14;
    if (has_settingcountruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settingcountruleid());
    }

    // required bool IsMatchXLen = 15;
    if (has_ismatchxlen()) {
      total_size += 1 + 1;
    }

    // required bool IsMatchYLen = 16;
    if (has_ismatchylen()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bool IsMatchZLen = 17;
    if (has_ismatchzlen()) {
      total_size += 2 + 1;
    }

    // required double EffectLen = 18;
    if (has_effectlen()) {
      total_size += 2 + 8;
    }

    // required double XAdjustLen = 19;
    if (has_xadjustlen()) {
      total_size += 2 + 8;
    }

    // required bool IsEmbed = 20;
    if (has_isembed()) {
      total_size += 2 + 1;
    }

    // required int32 InstallDirection = 21;
    if (has_installdirection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->installdirection());
    }

    // required int32 CreatorID = 22;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 23;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 24;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int64 UpdateTime = 25;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string HWFittingCode = 26;
    if (has_hwfittingcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hwfittingcode());
    }

    // required string HWFittingName = 27;
    if (has_hwfittingname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hwfittingname());
    }

    // required string HWFittingMemo = 28;
    if (has_hwfittingmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hwfittingmemo());
    }

    // required int64 VerCode = 29;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_HWFittingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_HWFittingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_HWFittingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_HWFittingInfo::MergeFrom(const JK_HWFittingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hwfittingid()) {
      set_hwfittingid(from.hwfittingid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_issplit()) {
      set_issplit(from.issplit());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_settingcountruleid()) {
      set_settingcountruleid(from.settingcountruleid());
    }
    if (from.has_ismatchxlen()) {
      set_ismatchxlen(from.ismatchxlen());
    }
    if (from.has_ismatchylen()) {
      set_ismatchylen(from.ismatchylen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ismatchzlen()) {
      set_ismatchzlen(from.ismatchzlen());
    }
    if (from.has_effectlen()) {
      set_effectlen(from.effectlen());
    }
    if (from.has_xadjustlen()) {
      set_xadjustlen(from.xadjustlen());
    }
    if (from.has_isembed()) {
      set_isembed(from.isembed());
    }
    if (from.has_installdirection()) {
      set_installdirection(from.installdirection());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_hwfittingcode()) {
      set_hwfittingcode(from.hwfittingcode());
    }
    if (from.has_hwfittingname()) {
      set_hwfittingname(from.hwfittingname());
    }
    if (from.has_hwfittingmemo()) {
      set_hwfittingmemo(from.hwfittingmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_HWFittingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_HWFittingInfo::CopyFrom(const JK_HWFittingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_HWFittingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x1fffffff) != 0x1fffffff) return false;

  return true;
}

void JK_HWFittingInfo::Swap(JK_HWFittingInfo* other) {
  if (other != this) {
    std::swap(hwfittingid_, other->hwfittingid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(groupid_, other->groupid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isactive_, other->isactive_);
    std::swap(issplit_, other->issplit_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(showid_, other->showid_);
    std::swap(modelid_, other->modelid_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(settingcountruleid_, other->settingcountruleid_);
    std::swap(ismatchxlen_, other->ismatchxlen_);
    std::swap(ismatchylen_, other->ismatchylen_);
    std::swap(ismatchzlen_, other->ismatchzlen_);
    std::swap(effectlen_, other->effectlen_);
    std::swap(xadjustlen_, other->xadjustlen_);
    std::swap(isembed_, other->isembed_);
    std::swap(installdirection_, other->installdirection_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(hwfittingcode_, other->hwfittingcode_);
    std::swap(hwfittingname_, other->hwfittingname_);
    std::swap(hwfittingmemo_, other->hwfittingmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_HWFittingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_HWFittingInfo_descriptor_;
  metadata.reflection = JK_HWFittingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_HoleRuleInfo::kHoleIDFieldNumber;
const int JK_HoleRuleInfo::kFNFittingIDFieldNumber;
const int JK_HoleRuleInfo::kHoleTypeIDFieldNumber;
const int JK_HoleRuleInfo::kXLenFieldNumber;
const int JK_HoleRuleInfo::kYLenFieldNumber;
const int JK_HoleRuleInfo::kOverHeightFieldNumber;
const int JK_HoleRuleInfo::kHolePicIDFieldNumber;
const int JK_HoleRuleInfo::kMinXDistanceFieldNumber;
const int JK_HoleRuleInfo::kMinZDistanceFieldNumber;
const int JK_HoleRuleInfo::kVerCodeFieldNumber;
const int JK_HoleRuleInfo::kFactoryIDFieldNumber;
const int JK_HoleRuleInfo::kCreatorIDFieldNumber;
const int JK_HoleRuleInfo::kUpdaterIDFieldNumber;
const int JK_HoleRuleInfo::kCreateTimeFieldNumber;
const int JK_HoleRuleInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_HoleRuleInfo::JK_HoleRuleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_HoleRuleInfo::InitAsDefaultInstance() {
}

JK_HoleRuleInfo::JK_HoleRuleInfo(const JK_HoleRuleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_HoleRuleInfo::SharedCtor() {
  _cached_size_ = 0;
  holeid_ = 0;
  fnfittingid_ = 0;
  holetypeid_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  overheight_ = 0;
  holepicid_ = 0;
  minxdistance_ = 0;
  minzdistance_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_HoleRuleInfo::~JK_HoleRuleInfo() {
  SharedDtor();
}

void JK_HoleRuleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_HoleRuleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_HoleRuleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_HoleRuleInfo_descriptor_;
}

const JK_HoleRuleInfo& JK_HoleRuleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_HoleRuleInfo* JK_HoleRuleInfo::default_instance_ = NULL;

JK_HoleRuleInfo* JK_HoleRuleInfo::New() const {
  return new JK_HoleRuleInfo;
}

void JK_HoleRuleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    holeid_ = 0;
    fnfittingid_ = 0;
    holetypeid_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    overheight_ = 0;
    holepicid_ = 0;
    minxdistance_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    minzdistance_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_HoleRuleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 HoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holeid_)));
          set_has_holeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FNFittingID;
        break;
      }

      // required int32 FNFittingID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FNFittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fnfittingid_)));
          set_has_fnfittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HoleTypeID;
        break;
      }

      // required int32 HoleTypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HoleTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holetypeid_)));
          set_has_holetypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_XLen;
        break;
      }

      // required double XLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_YLen;
        break;
      }

      // required double YLen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_OverHeight;
        break;
      }

      // required double OverHeight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OverHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &overheight_)));
          set_has_overheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_HolePicID;
        break;
      }

      // required int32 HolePicID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HolePicID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holepicid_)));
          set_has_holepicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_MinXDistance;
        break;
      }

      // required double MinXDistance = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinXDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minxdistance_)));
          set_has_minxdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_MinZDistance;
        break;
      }

      // required double MinZDistance = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinZDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minzdistance_)));
          set_has_minzdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_HoleRuleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 HoleID = 1;
  if (has_holeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->holeid(), output);
  }

  // required int32 FNFittingID = 2;
  if (has_fnfittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fnfittingid(), output);
  }

  // required int32 HoleTypeID = 3;
  if (has_holetypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->holetypeid(), output);
  }

  // required double XLen = 4;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->xlen(), output);
  }

  // required double YLen = 5;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ylen(), output);
  }

  // required double OverHeight = 6;
  if (has_overheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->overheight(), output);
  }

  // required int32 HolePicID = 7;
  if (has_holepicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->holepicid(), output);
  }

  // required double MinXDistance = 8;
  if (has_minxdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->minxdistance(), output);
  }

  // required double MinZDistance = 9;
  if (has_minzdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->minzdistance(), output);
  }

  // required int64 VerCode = 10;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->vercode(), output);
  }

  // required int32 FactoryID = 11;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->factoryid(), output);
  }

  // required int32 CreatorID = 12;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->creatorid(), output);
  }

  // required int32 UpdaterID = 13;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->updaterid(), output);
  }

  // required int64 CreateTime = 14;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->createtime(), output);
  }

  // required int64 UpdateTime = 15;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_HoleRuleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 HoleID = 1;
  if (has_holeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->holeid(), target);
  }

  // required int32 FNFittingID = 2;
  if (has_fnfittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fnfittingid(), target);
  }

  // required int32 HoleTypeID = 3;
  if (has_holetypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->holetypeid(), target);
  }

  // required double XLen = 4;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->xlen(), target);
  }

  // required double YLen = 5;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ylen(), target);
  }

  // required double OverHeight = 6;
  if (has_overheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->overheight(), target);
  }

  // required int32 HolePicID = 7;
  if (has_holepicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->holepicid(), target);
  }

  // required double MinXDistance = 8;
  if (has_minxdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->minxdistance(), target);
  }

  // required double MinZDistance = 9;
  if (has_minzdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->minzdistance(), target);
  }

  // required int64 VerCode = 10;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->vercode(), target);
  }

  // required int32 FactoryID = 11;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->factoryid(), target);
  }

  // required int32 CreatorID = 12;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->creatorid(), target);
  }

  // required int32 UpdaterID = 13;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->updaterid(), target);
  }

  // required int64 CreateTime = 14;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->createtime(), target);
  }

  // required int64 UpdateTime = 15;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_HoleRuleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 HoleID = 1;
    if (has_holeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holeid());
    }

    // required int32 FNFittingID = 2;
    if (has_fnfittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fnfittingid());
    }

    // required int32 HoleTypeID = 3;
    if (has_holetypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holetypeid());
    }

    // required double XLen = 4;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 5;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double OverHeight = 6;
    if (has_overheight()) {
      total_size += 1 + 8;
    }

    // required int32 HolePicID = 7;
    if (has_holepicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holepicid());
    }

    // required double MinXDistance = 8;
    if (has_minxdistance()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double MinZDistance = 9;
    if (has_minzdistance()) {
      total_size += 1 + 8;
    }

    // required int64 VerCode = 10;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 11;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 12;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 13;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 14;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 15;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_HoleRuleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_HoleRuleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_HoleRuleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_HoleRuleInfo::MergeFrom(const JK_HoleRuleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_holeid()) {
      set_holeid(from.holeid());
    }
    if (from.has_fnfittingid()) {
      set_fnfittingid(from.fnfittingid());
    }
    if (from.has_holetypeid()) {
      set_holetypeid(from.holetypeid());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_overheight()) {
      set_overheight(from.overheight());
    }
    if (from.has_holepicid()) {
      set_holepicid(from.holepicid());
    }
    if (from.has_minxdistance()) {
      set_minxdistance(from.minxdistance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_minzdistance()) {
      set_minzdistance(from.minzdistance());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_HoleRuleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_HoleRuleInfo::CopyFrom(const JK_HoleRuleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_HoleRuleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void JK_HoleRuleInfo::Swap(JK_HoleRuleInfo* other) {
  if (other != this) {
    std::swap(holeid_, other->holeid_);
    std::swap(fnfittingid_, other->fnfittingid_);
    std::swap(holetypeid_, other->holetypeid_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(overheight_, other->overheight_);
    std::swap(holepicid_, other->holepicid_);
    std::swap(minxdistance_, other->minxdistance_);
    std::swap(minzdistance_, other->minzdistance_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_HoleRuleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_HoleRuleInfo_descriptor_;
  metadata.reflection = JK_HoleRuleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_MaterialInfo::kMaterialIDFieldNumber;
const int JK_MaterialInfo::kFactoryIDFieldNumber;
const int JK_MaterialInfo::kGroupIDFieldNumber;
const int JK_MaterialInfo::kIsDelFieldNumber;
const int JK_MaterialInfo::kIsActiveFieldNumber;
const int JK_MaterialInfo::kIsSplitFieldNumber;
const int JK_MaterialInfo::kSupplyTypeFieldNumber;
const int JK_MaterialInfo::kGTypeIDFieldNumber;
const int JK_MaterialInfo::kShowIDFieldNumber;
const int JK_MaterialInfo::kModelIDFieldNumber;
const int JK_MaterialInfo::kXLenFieldNumber;
const int JK_MaterialInfo::kYLenFieldNumber;
const int JK_MaterialInfo::kZLenFieldNumber;
const int JK_MaterialInfo::kIsMatchXLenFieldNumber;
const int JK_MaterialInfo::kIsMatchYLenFieldNumber;
const int JK_MaterialInfo::kIsMatchZLenFieldNumber;
const int JK_MaterialInfo::kSkinIDFieldNumber;
const int JK_MaterialInfo::kSkinDirectionFieldNumber;
const int JK_MaterialInfo::kTransCodeFieldNumber;
const int JK_MaterialInfo::kCreatorIDFieldNumber;
const int JK_MaterialInfo::kUpdaterIDFieldNumber;
const int JK_MaterialInfo::kCreateTimeFieldNumber;
const int JK_MaterialInfo::kUpdateTimeFieldNumber;
const int JK_MaterialInfo::kMaterialCodeFieldNumber;
const int JK_MaterialInfo::kMaterialNameFieldNumber;
const int JK_MaterialInfo::kMaterialMemoFieldNumber;
const int JK_MaterialInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_MaterialInfo::JK_MaterialInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_MaterialInfo::InitAsDefaultInstance() {
}

JK_MaterialInfo::JK_MaterialInfo(const JK_MaterialInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_MaterialInfo::SharedCtor() {
  _cached_size_ = 0;
  materialid_ = 0;
  factoryid_ = 0;
  groupid_ = 0;
  isdel_ = false;
  isactive_ = false;
  issplit_ = false;
  supplytype_ = 0;
  gtypeid_ = 0;
  showid_ = 0;
  modelid_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  ismatchxlen_ = false;
  ismatchylen_ = false;
  ismatchzlen_ = false;
  skinid_ = 0;
  skindirection_ = 0;
  transcode_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  materialcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  materialname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  materialmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_MaterialInfo::~JK_MaterialInfo() {
  SharedDtor();
}

void JK_MaterialInfo::SharedDtor() {
  if (materialcode_ != &::google::protobuf::internal::kEmptyString) {
    delete materialcode_;
  }
  if (materialname_ != &::google::protobuf::internal::kEmptyString) {
    delete materialname_;
  }
  if (materialmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete materialmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_MaterialInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_MaterialInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_MaterialInfo_descriptor_;
}

const JK_MaterialInfo& JK_MaterialInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_MaterialInfo* JK_MaterialInfo::default_instance_ = NULL;

JK_MaterialInfo* JK_MaterialInfo::New() const {
  return new JK_MaterialInfo;
}

void JK_MaterialInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    materialid_ = 0;
    factoryid_ = 0;
    groupid_ = 0;
    isdel_ = false;
    isactive_ = false;
    issplit_ = false;
    supplytype_ = 0;
    gtypeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    showid_ = 0;
    modelid_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    ismatchxlen_ = false;
    ismatchylen_ = false;
    ismatchzlen_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    skinid_ = 0;
    skindirection_ = 0;
    transcode_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_materialcode()) {
      if (materialcode_ != &::google::protobuf::internal::kEmptyString) {
        materialcode_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_materialname()) {
      if (materialname_ != &::google::protobuf::internal::kEmptyString) {
        materialname_->clear();
      }
    }
    if (has_materialmemo()) {
      if (materialmemo_ != &::google::protobuf::internal::kEmptyString) {
        materialmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_MaterialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MaterialID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsSplit;
        break;
      }

      // required bool IsSplit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSplit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issplit_)));
          set_has_issplit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ShowID;
        break;
      }

      // required int32 ShowID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ModelID;
        break;
      }

      // required int32 ModelID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_XLen;
        break;
      }

      // required double XLen = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_YLen;
        break;
      }

      // required double YLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_IsMatchXLen;
        break;
      }

      // required bool IsMatchXLen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMatchXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismatchxlen_)));
          set_has_ismatchxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_IsMatchYLen;
        break;
      }

      // required bool IsMatchYLen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMatchYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismatchylen_)));
          set_has_ismatchylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_IsMatchZLen;
        break;
      }

      // required bool IsMatchZLen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMatchZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismatchzlen_)));
          set_has_ismatchzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_SkinID;
        break;
      }

      // required int32 SkinID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkinID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skinid_)));
          set_has_skinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_SkinDirection;
        break;
      }

      // required int32 SkinDirection = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkinDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skindirection_)));
          set_has_skindirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_TransCode;
        break;
      }

      // required int32 TransCode = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TransCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transcode_)));
          set_has_transcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_MaterialCode;
        break;
      }

      // required string MaterialCode = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MaterialCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_materialcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->materialcode().data(), this->materialcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_MaterialName;
        break;
      }

      // required string MaterialName = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MaterialName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_materialname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->materialname().data(), this->materialname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_MaterialMemo;
        break;
      }

      // required string MaterialMemo = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MaterialMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_materialmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->materialmemo().data(), this->materialmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_MaterialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MaterialID = 1;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->materialid(), output);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdel(), output);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isactive(), output);
  }

  // required bool IsSplit = 6;
  if (has_issplit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->issplit(), output);
  }

  // required int32 SupplyType = 7;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->supplytype(), output);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gtypeid(), output);
  }

  // required int32 ShowID = 9;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->showid(), output);
  }

  // required int32 ModelID = 10;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->modelid(), output);
  }

  // required double XLen = 11;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->xlen(), output);
  }

  // required double YLen = 12;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->ylen(), output);
  }

  // required double ZLen = 13;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->zlen(), output);
  }

  // required bool IsMatchXLen = 14;
  if (has_ismatchxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->ismatchxlen(), output);
  }

  // required bool IsMatchYLen = 15;
  if (has_ismatchylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->ismatchylen(), output);
  }

  // required bool IsMatchZLen = 16;
  if (has_ismatchzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->ismatchzlen(), output);
  }

  // required int32 SkinID = 17;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->skinid(), output);
  }

  // required int32 SkinDirection = 18;
  if (has_skindirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->skindirection(), output);
  }

  // required int32 TransCode = 19;
  if (has_transcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->transcode(), output);
  }

  // required int32 CreatorID = 20;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->creatorid(), output);
  }

  // required int32 UpdaterID = 21;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->updaterid(), output);
  }

  // required int64 CreateTime = 22;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->createtime(), output);
  }

  // required int64 UpdateTime = 23;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->updatetime(), output);
  }

  // required string MaterialCode = 24;
  if (has_materialcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->materialcode().data(), this->materialcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->materialcode(), output);
  }

  // required string MaterialName = 25;
  if (has_materialname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->materialname().data(), this->materialname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->materialname(), output);
  }

  // required string MaterialMemo = 26;
  if (has_materialmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->materialmemo().data(), this->materialmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->materialmemo(), output);
  }

  // required int64 VerCode = 27;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_MaterialInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MaterialID = 1;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->materialid(), target);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdel(), target);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isactive(), target);
  }

  // required bool IsSplit = 6;
  if (has_issplit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->issplit(), target);
  }

  // required int32 SupplyType = 7;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->supplytype(), target);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gtypeid(), target);
  }

  // required int32 ShowID = 9;
  if (has_showid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->showid(), target);
  }

  // required int32 ModelID = 10;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->modelid(), target);
  }

  // required double XLen = 11;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->xlen(), target);
  }

  // required double YLen = 12;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->ylen(), target);
  }

  // required double ZLen = 13;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->zlen(), target);
  }

  // required bool IsMatchXLen = 14;
  if (has_ismatchxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->ismatchxlen(), target);
  }

  // required bool IsMatchYLen = 15;
  if (has_ismatchylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->ismatchylen(), target);
  }

  // required bool IsMatchZLen = 16;
  if (has_ismatchzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->ismatchzlen(), target);
  }

  // required int32 SkinID = 17;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->skinid(), target);
  }

  // required int32 SkinDirection = 18;
  if (has_skindirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->skindirection(), target);
  }

  // required int32 TransCode = 19;
  if (has_transcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->transcode(), target);
  }

  // required int32 CreatorID = 20;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->creatorid(), target);
  }

  // required int32 UpdaterID = 21;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->updaterid(), target);
  }

  // required int64 CreateTime = 22;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->createtime(), target);
  }

  // required int64 UpdateTime = 23;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->updatetime(), target);
  }

  // required string MaterialCode = 24;
  if (has_materialcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->materialcode().data(), this->materialcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->materialcode(), target);
  }

  // required string MaterialName = 25;
  if (has_materialname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->materialname().data(), this->materialname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->materialname(), target);
  }

  // required string MaterialMemo = 26;
  if (has_materialmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->materialmemo().data(), this->materialmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->materialmemo(), target);
  }

  // required int64 VerCode = 27;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_MaterialInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MaterialID = 1;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 GroupID = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required bool IsDel = 4;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsActive = 5;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required bool IsSplit = 6;
    if (has_issplit()) {
      total_size += 1 + 1;
    }

    // required int32 SupplyType = 7;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 GTypeID = 8;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 ShowID = 9;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showid());
    }

    // required int32 ModelID = 10;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

    // required double XLen = 11;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 12;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double ZLen = 13;
    if (has_zlen()) {
      total_size += 1 + 8;
    }

    // required bool IsMatchXLen = 14;
    if (has_ismatchxlen()) {
      total_size += 1 + 1;
    }

    // required bool IsMatchYLen = 15;
    if (has_ismatchylen()) {
      total_size += 1 + 1;
    }

    // required bool IsMatchZLen = 16;
    if (has_ismatchzlen()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 SkinID = 17;
    if (has_skinid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skinid());
    }

    // required int32 SkinDirection = 18;
    if (has_skindirection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skindirection());
    }

    // required int32 TransCode = 19;
    if (has_transcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transcode());
    }

    // required int32 CreatorID = 20;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 21;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 22;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 23;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string MaterialCode = 24;
    if (has_materialcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->materialcode());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required string MaterialName = 25;
    if (has_materialname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->materialname());
    }

    // required string MaterialMemo = 26;
    if (has_materialmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->materialmemo());
    }

    // required int64 VerCode = 27;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_MaterialInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_MaterialInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_MaterialInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_MaterialInfo::MergeFrom(const JK_MaterialInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_issplit()) {
      set_issplit(from.issplit());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_ismatchxlen()) {
      set_ismatchxlen(from.ismatchxlen());
    }
    if (from.has_ismatchylen()) {
      set_ismatchylen(from.ismatchylen());
    }
    if (from.has_ismatchzlen()) {
      set_ismatchzlen(from.ismatchzlen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
    if (from.has_skindirection()) {
      set_skindirection(from.skindirection());
    }
    if (from.has_transcode()) {
      set_transcode(from.transcode());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_materialcode()) {
      set_materialcode(from.materialcode());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_materialname()) {
      set_materialname(from.materialname());
    }
    if (from.has_materialmemo()) {
      set_materialmemo(from.materialmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_MaterialInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_MaterialInfo::CopyFrom(const JK_MaterialInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_MaterialInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x07ffffff) != 0x07ffffff) return false;

  return true;
}

void JK_MaterialInfo::Swap(JK_MaterialInfo* other) {
  if (other != this) {
    std::swap(materialid_, other->materialid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(groupid_, other->groupid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isactive_, other->isactive_);
    std::swap(issplit_, other->issplit_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(showid_, other->showid_);
    std::swap(modelid_, other->modelid_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(ismatchxlen_, other->ismatchxlen_);
    std::swap(ismatchylen_, other->ismatchylen_);
    std::swap(ismatchzlen_, other->ismatchzlen_);
    std::swap(skinid_, other->skinid_);
    std::swap(skindirection_, other->skindirection_);
    std::swap(transcode_, other->transcode_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(materialcode_, other->materialcode_);
    std::swap(materialname_, other->materialname_);
    std::swap(materialmemo_, other->materialmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_MaterialInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_MaterialInfo_descriptor_;
  metadata.reflection = JK_MaterialInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_MaterialSealRuleMapInfo::kMaterialIDFieldNumber;
const int JK_MaterialSealRuleMapInfo::kSealRuleIDFieldNumber;
const int JK_MaterialSealRuleMapInfo::kIsCabDefFieldNumber;
const int JK_MaterialSealRuleMapInfo::kIsDoorDefFieldNumber;
const int JK_MaterialSealRuleMapInfo::kVerCodeFieldNumber;
const int JK_MaterialSealRuleMapInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_MaterialSealRuleMapInfo::JK_MaterialSealRuleMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_MaterialSealRuleMapInfo::InitAsDefaultInstance() {
}

JK_MaterialSealRuleMapInfo::JK_MaterialSealRuleMapInfo(const JK_MaterialSealRuleMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_MaterialSealRuleMapInfo::SharedCtor() {
  _cached_size_ = 0;
  materialid_ = 0;
  sealruleid_ = 0;
  iscabdef_ = false;
  isdoordef_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_MaterialSealRuleMapInfo::~JK_MaterialSealRuleMapInfo() {
  SharedDtor();
}

void JK_MaterialSealRuleMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_MaterialSealRuleMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_MaterialSealRuleMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_MaterialSealRuleMapInfo_descriptor_;
}

const JK_MaterialSealRuleMapInfo& JK_MaterialSealRuleMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_MaterialSealRuleMapInfo* JK_MaterialSealRuleMapInfo::default_instance_ = NULL;

JK_MaterialSealRuleMapInfo* JK_MaterialSealRuleMapInfo::New() const {
  return new JK_MaterialSealRuleMapInfo;
}

void JK_MaterialSealRuleMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    materialid_ = 0;
    sealruleid_ = 0;
    iscabdef_ = false;
    isdoordef_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_MaterialSealRuleMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MaterialID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SealRuleID;
        break;
      }

      // required int32 SealRuleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SealRuleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealruleid_)));
          set_has_sealruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsCabDef;
        break;
      }

      // required bool IsCabDef = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCabDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscabdef_)));
          set_has_iscabdef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDoorDef;
        break;
      }

      // required bool IsDoorDef = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDoorDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdoordef_)));
          set_has_isdoordef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_MaterialSealRuleMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MaterialID = 1;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->materialid(), output);
  }

  // required int32 SealRuleID = 2;
  if (has_sealruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sealruleid(), output);
  }

  // required bool IsCabDef = 3;
  if (has_iscabdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->iscabdef(), output);
  }

  // required bool IsDoorDef = 4;
  if (has_isdoordef()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdoordef(), output);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->vercode(), output);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_MaterialSealRuleMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MaterialID = 1;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->materialid(), target);
  }

  // required int32 SealRuleID = 2;
  if (has_sealruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sealruleid(), target);
  }

  // required bool IsCabDef = 3;
  if (has_iscabdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iscabdef(), target);
  }

  // required bool IsDoorDef = 4;
  if (has_isdoordef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdoordef(), target);
  }

  // required int64 VerCode = 5;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->vercode(), target);
  }

  // required int32 FactoryID = 6;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_MaterialSealRuleMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MaterialID = 1;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required int32 SealRuleID = 2;
    if (has_sealruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealruleid());
    }

    // required bool IsCabDef = 3;
    if (has_iscabdef()) {
      total_size += 1 + 1;
    }

    // required bool IsDoorDef = 4;
    if (has_isdoordef()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 5;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 6;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_MaterialSealRuleMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_MaterialSealRuleMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_MaterialSealRuleMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_MaterialSealRuleMapInfo::MergeFrom(const JK_MaterialSealRuleMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_sealruleid()) {
      set_sealruleid(from.sealruleid());
    }
    if (from.has_iscabdef()) {
      set_iscabdef(from.iscabdef());
    }
    if (from.has_isdoordef()) {
      set_isdoordef(from.isdoordef());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_MaterialSealRuleMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_MaterialSealRuleMapInfo::CopyFrom(const JK_MaterialSealRuleMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_MaterialSealRuleMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void JK_MaterialSealRuleMapInfo::Swap(JK_MaterialSealRuleMapInfo* other) {
  if (other != this) {
    std::swap(materialid_, other->materialid_);
    std::swap(sealruleid_, other->sealruleid_);
    std::swap(iscabdef_, other->iscabdef_);
    std::swap(isdoordef_, other->isdoordef_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_MaterialSealRuleMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_MaterialSealRuleMapInfo_descriptor_;
  metadata.reflection = JK_MaterialSealRuleMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_ModelInfo::kModelIDFieldNumber;
const int JK_ModelInfo::kGroupIDFieldNumber;
const int JK_ModelInfo::kFactoryIDFieldNumber;
const int JK_ModelInfo::kGTypeIDFieldNumber;
const int JK_ModelInfo::kArcXFieldNumber;
const int JK_ModelInfo::kArcYFieldNumber;
const int JK_ModelInfo::kArcZFieldNumber;
const int JK_ModelInfo::kIsDelFieldNumber;
const int JK_ModelInfo::kCreatorIDFieldNumber;
const int JK_ModelInfo::kUpdaterIDFieldNumber;
const int JK_ModelInfo::kCreateTimeFieldNumber;
const int JK_ModelInfo::kUpdateTimeFieldNumber;
const int JK_ModelInfo::kModelCodeFieldNumber;
const int JK_ModelInfo::kModelNameFieldNumber;
const int JK_ModelInfo::kRelativePathFieldNumber;
const int JK_ModelInfo::kModelMemoFieldNumber;
const int JK_ModelInfo::kHASHCodeFieldNumber;
const int JK_ModelInfo::kVerCodeFieldNumber;
const int JK_ModelInfo::kFrontViewIDFieldNumber;
const int JK_ModelInfo::kRightViewIDFieldNumber;
const int JK_ModelInfo::kTopViewIDFieldNumber;
const int JK_ModelInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

JK_ModelInfo::JK_ModelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_ModelInfo::InitAsDefaultInstance() {
}

JK_ModelInfo::JK_ModelInfo(const JK_ModelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_ModelInfo::SharedCtor() {
  _cached_size_ = 0;
  modelid_ = 0;
  groupid_ = 0;
  factoryid_ = 0;
  gtypeid_ = 0;
  arcx_ = 0;
  arcy_ = 0;
  arcz_ = 0;
  isdel_ = false;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  modelcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modelmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  frontviewid_ = 0;
  rightviewid_ = 0;
  topviewid_ = 0;
  photoid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_ModelInfo::~JK_ModelInfo() {
  SharedDtor();
}

void JK_ModelInfo::SharedDtor() {
  if (modelcode_ != &::google::protobuf::internal::kEmptyString) {
    delete modelcode_;
  }
  if (modelname_ != &::google::protobuf::internal::kEmptyString) {
    delete modelname_;
  }
  if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
    delete relativepath_;
  }
  if (modelmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete modelmemo_;
  }
  if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
    delete hashcode_;
  }
  if (this != default_instance_) {
  }
}

void JK_ModelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_ModelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_ModelInfo_descriptor_;
}

const JK_ModelInfo& JK_ModelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_ModelInfo* JK_ModelInfo::default_instance_ = NULL;

JK_ModelInfo* JK_ModelInfo::New() const {
  return new JK_ModelInfo;
}

void JK_ModelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modelid_ = 0;
    groupid_ = 0;
    factoryid_ = 0;
    gtypeid_ = 0;
    arcx_ = 0;
    arcy_ = 0;
    arcz_ = 0;
    isdel_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_modelcode()) {
      if (modelcode_ != &::google::protobuf::internal::kEmptyString) {
        modelcode_->clear();
      }
    }
    if (has_modelname()) {
      if (modelname_ != &::google::protobuf::internal::kEmptyString) {
        modelname_->clear();
      }
    }
    if (has_relativepath()) {
      if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
        relativepath_->clear();
      }
    }
    if (has_modelmemo()) {
      if (modelmemo_ != &::google::protobuf::internal::kEmptyString) {
        modelmemo_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_hashcode()) {
      if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
        hashcode_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
    frontviewid_ = 0;
    rightviewid_ = 0;
    topviewid_ = 0;
    photoid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_ModelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ModelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ArcX;
        break;
      }

      // required double ArcX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcx_)));
          set_has_arcx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_ArcY;
        break;
      }

      // required double ArcY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcy_)));
          set_has_arcy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_ArcZ;
        break;
      }

      // required double ArcZ = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcz_)));
          set_has_arcz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ModelCode;
        break;
      }

      // required string ModelCode = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ModelCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelcode().data(), this->modelcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ModelName;
        break;
      }

      // required string ModelName = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ModelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelname().data(), this->modelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_RelativePath;
        break;
      }

      // required string RelativePath = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RelativePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->relativepath().data(), this->relativepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_ModelMemo;
        break;
      }

      // required string ModelMemo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ModelMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelmemo().data(), this->modelmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_HASHCode;
        break;
      }

      // required string HASHCode = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HASHCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hashcode().data(), this->hashcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_FrontViewID;
        break;
      }

      // required int32 FrontViewID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrontViewID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontviewid_)));
          set_has_frontviewid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_RightViewID;
        break;
      }

      // required int32 RightViewID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RightViewID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightviewid_)));
          set_has_rightviewid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_TopViewID;
        break;
      }

      // required int32 TopViewID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TopViewID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topviewid_)));
          set_has_topviewid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_PhotoID;
        break;
      }

      // required int32 PhotoID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PhotoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_ModelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ModelID = 1;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modelid(), output);
  }

  // required int32 GroupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->factoryid(), output);
  }

  // required int32 GTypeID = 4;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gtypeid(), output);
  }

  // required double ArcX = 5;
  if (has_arcx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->arcx(), output);
  }

  // required double ArcY = 6;
  if (has_arcy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->arcy(), output);
  }

  // required double ArcZ = 7;
  if (has_arcz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->arcz(), output);
  }

  // required bool IsDel = 8;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isdel(), output);
  }

  // required int32 CreatorID = 9;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->creatorid(), output);
  }

  // required int32 UpdaterID = 10;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->updaterid(), output);
  }

  // required int64 CreateTime = 11;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->createtime(), output);
  }

  // required int64 UpdateTime = 12;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->updatetime(), output);
  }

  // required string ModelCode = 13;
  if (has_modelcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelcode().data(), this->modelcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->modelcode(), output);
  }

  // required string ModelName = 14;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->modelname(), output);
  }

  // required string RelativePath = 15;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->relativepath(), output);
  }

  // required string ModelMemo = 16;
  if (has_modelmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelmemo().data(), this->modelmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->modelmemo(), output);
  }

  // required string HASHCode = 17;
  if (has_hashcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashcode().data(), this->hashcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->hashcode(), output);
  }

  // required int64 VerCode = 18;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->vercode(), output);
  }

  // required int32 FrontViewID = 19;
  if (has_frontviewid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->frontviewid(), output);
  }

  // required int32 RightViewID = 20;
  if (has_rightviewid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->rightviewid(), output);
  }

  // required int32 TopViewID = 21;
  if (has_topviewid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->topviewid(), output);
  }

  // required int32 PhotoID = 22;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_ModelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ModelID = 1;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modelid(), target);
  }

  // required int32 GroupID = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->factoryid(), target);
  }

  // required int32 GTypeID = 4;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gtypeid(), target);
  }

  // required double ArcX = 5;
  if (has_arcx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->arcx(), target);
  }

  // required double ArcY = 6;
  if (has_arcy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->arcy(), target);
  }

  // required double ArcZ = 7;
  if (has_arcz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->arcz(), target);
  }

  // required bool IsDel = 8;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isdel(), target);
  }

  // required int32 CreatorID = 9;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->creatorid(), target);
  }

  // required int32 UpdaterID = 10;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->updaterid(), target);
  }

  // required int64 CreateTime = 11;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->createtime(), target);
  }

  // required int64 UpdateTime = 12;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->updatetime(), target);
  }

  // required string ModelCode = 13;
  if (has_modelcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelcode().data(), this->modelcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->modelcode(), target);
  }

  // required string ModelName = 14;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->modelname(), target);
  }

  // required string RelativePath = 15;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->relativepath(), target);
  }

  // required string ModelMemo = 16;
  if (has_modelmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelmemo().data(), this->modelmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->modelmemo(), target);
  }

  // required string HASHCode = 17;
  if (has_hashcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashcode().data(), this->hashcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->hashcode(), target);
  }

  // required int64 VerCode = 18;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->vercode(), target);
  }

  // required int32 FrontViewID = 19;
  if (has_frontviewid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->frontviewid(), target);
  }

  // required int32 RightViewID = 20;
  if (has_rightviewid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->rightviewid(), target);
  }

  // required int32 TopViewID = 21;
  if (has_topviewid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->topviewid(), target);
  }

  // required int32 PhotoID = 22;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_ModelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ModelID = 1;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

    // required int32 GroupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required int32 FactoryID = 3;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 GTypeID = 4;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required double ArcX = 5;
    if (has_arcx()) {
      total_size += 1 + 8;
    }

    // required double ArcY = 6;
    if (has_arcy()) {
      total_size += 1 + 8;
    }

    // required double ArcZ = 7;
    if (has_arcz()) {
      total_size += 1 + 8;
    }

    // required bool IsDel = 8;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 CreatorID = 9;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 10;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 11;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 12;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string ModelCode = 13;
    if (has_modelcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelcode());
    }

    // required string ModelName = 14;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelname());
    }

    // required string RelativePath = 15;
    if (has_relativepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relativepath());
    }

    // required string ModelMemo = 16;
    if (has_modelmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelmemo());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string HASHCode = 17;
    if (has_hashcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hashcode());
    }

    // required int64 VerCode = 18;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FrontViewID = 19;
    if (has_frontviewid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontviewid());
    }

    // required int32 RightViewID = 20;
    if (has_rightviewid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightviewid());
    }

    // required int32 TopViewID = 21;
    if (has_topviewid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topviewid());
    }

    // required int32 PhotoID = 22;
    if (has_photoid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_ModelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_ModelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_ModelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_ModelInfo::MergeFrom(const JK_ModelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_arcx()) {
      set_arcx(from.arcx());
    }
    if (from.has_arcy()) {
      set_arcy(from.arcy());
    }
    if (from.has_arcz()) {
      set_arcz(from.arcz());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_modelcode()) {
      set_modelcode(from.modelcode());
    }
    if (from.has_modelname()) {
      set_modelname(from.modelname());
    }
    if (from.has_relativepath()) {
      set_relativepath(from.relativepath());
    }
    if (from.has_modelmemo()) {
      set_modelmemo(from.modelmemo());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hashcode()) {
      set_hashcode(from.hashcode());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_frontviewid()) {
      set_frontviewid(from.frontviewid());
    }
    if (from.has_rightviewid()) {
      set_rightviewid(from.rightviewid());
    }
    if (from.has_topviewid()) {
      set_topviewid(from.topviewid());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_ModelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_ModelInfo::CopyFrom(const JK_ModelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_ModelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;

  return true;
}

void JK_ModelInfo::Swap(JK_ModelInfo* other) {
  if (other != this) {
    std::swap(modelid_, other->modelid_);
    std::swap(groupid_, other->groupid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(arcx_, other->arcx_);
    std::swap(arcy_, other->arcy_);
    std::swap(arcz_, other->arcz_);
    std::swap(isdel_, other->isdel_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(modelcode_, other->modelcode_);
    std::swap(modelname_, other->modelname_);
    std::swap(relativepath_, other->relativepath_);
    std::swap(modelmemo_, other->modelmemo_);
    std::swap(hashcode_, other->hashcode_);
    std::swap(vercode_, other->vercode_);
    std::swap(frontviewid_, other->frontviewid_);
    std::swap(rightviewid_, other->rightviewid_);
    std::swap(topviewid_, other->topviewid_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_ModelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_ModelInfo_descriptor_;
  metadata.reflection = JK_ModelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_NumberRuleInfo::kNumberRuleIDFieldNumber;
const int JK_NumberRuleInfo::kFittingIDFieldNumber;
const int JK_NumberRuleInfo::kMinLenFieldNumber;
const int JK_NumberRuleInfo::kMaxLenFieldNumber;
const int JK_NumberRuleInfo::kUseCountFieldNumber;
const int JK_NumberRuleInfo::kVerCodeFieldNumber;
const int JK_NumberRuleInfo::kFactoryIDFieldNumber;
const int JK_NumberRuleInfo::kCreatorIDFieldNumber;
const int JK_NumberRuleInfo::kUpdaterIDFieldNumber;
const int JK_NumberRuleInfo::kCreateTimeFieldNumber;
const int JK_NumberRuleInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_NumberRuleInfo::JK_NumberRuleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_NumberRuleInfo::InitAsDefaultInstance() {
}

JK_NumberRuleInfo::JK_NumberRuleInfo(const JK_NumberRuleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_NumberRuleInfo::SharedCtor() {
  _cached_size_ = 0;
  numberruleid_ = 0;
  fittingid_ = 0;
  minlen_ = 0;
  maxlen_ = 0;
  usecount_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_NumberRuleInfo::~JK_NumberRuleInfo() {
  SharedDtor();
}

void JK_NumberRuleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_NumberRuleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_NumberRuleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_NumberRuleInfo_descriptor_;
}

const JK_NumberRuleInfo& JK_NumberRuleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_NumberRuleInfo* JK_NumberRuleInfo::default_instance_ = NULL;

JK_NumberRuleInfo* JK_NumberRuleInfo::New() const {
  return new JK_NumberRuleInfo;
}

void JK_NumberRuleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numberruleid_ = 0;
    fittingid_ = 0;
    minlen_ = 0;
    maxlen_ = 0;
    usecount_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_NumberRuleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 NumberRuleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberruleid_)));
          set_has_numberruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FittingID;
        break;
      }

      // required int32 FittingID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fittingid_)));
          set_has_fittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_MinLen;
        break;
      }

      // required double MinLen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minlen_)));
          set_has_minlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_MaxLen;
        break;
      }

      // required double MaxLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxlen_)));
          set_has_maxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_UseCount;
        break;
      }

      // required int32 UseCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usecount_)));
          set_has_usecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_NumberRuleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 NumberRuleID = 1;
  if (has_numberruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numberruleid(), output);
  }

  // required int32 FittingID = 2;
  if (has_fittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fittingid(), output);
  }

  // required double MinLen = 3;
  if (has_minlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->minlen(), output);
  }

  // required double MaxLen = 4;
  if (has_maxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->maxlen(), output);
  }

  // required int32 UseCount = 5;
  if (has_usecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usecount(), output);
  }

  // required int64 VerCode = 6;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->vercode(), output);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->factoryid(), output);
  }

  // required int32 CreatorID = 8;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->creatorid(), output);
  }

  // required int32 UpdaterID = 9;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->updaterid(), output);
  }

  // required int64 CreateTime = 10;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->createtime(), output);
  }

  // required int64 UpdateTime = 11;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_NumberRuleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 NumberRuleID = 1;
  if (has_numberruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->numberruleid(), target);
  }

  // required int32 FittingID = 2;
  if (has_fittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fittingid(), target);
  }

  // required double MinLen = 3;
  if (has_minlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->minlen(), target);
  }

  // required double MaxLen = 4;
  if (has_maxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->maxlen(), target);
  }

  // required int32 UseCount = 5;
  if (has_usecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usecount(), target);
  }

  // required int64 VerCode = 6;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->vercode(), target);
  }

  // required int32 FactoryID = 7;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->factoryid(), target);
  }

  // required int32 CreatorID = 8;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->creatorid(), target);
  }

  // required int32 UpdaterID = 9;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->updaterid(), target);
  }

  // required int64 CreateTime = 10;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->createtime(), target);
  }

  // required int64 UpdateTime = 11;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_NumberRuleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 NumberRuleID = 1;
    if (has_numberruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberruleid());
    }

    // required int32 FittingID = 2;
    if (has_fittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fittingid());
    }

    // required double MinLen = 3;
    if (has_minlen()) {
      total_size += 1 + 8;
    }

    // required double MaxLen = 4;
    if (has_maxlen()) {
      total_size += 1 + 8;
    }

    // required int32 UseCount = 5;
    if (has_usecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usecount());
    }

    // required int64 VerCode = 6;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 7;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 8;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 UpdaterID = 9;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 10;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 11;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_NumberRuleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_NumberRuleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_NumberRuleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_NumberRuleInfo::MergeFrom(const JK_NumberRuleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numberruleid()) {
      set_numberruleid(from.numberruleid());
    }
    if (from.has_fittingid()) {
      set_fittingid(from.fittingid());
    }
    if (from.has_minlen()) {
      set_minlen(from.minlen());
    }
    if (from.has_maxlen()) {
      set_maxlen(from.maxlen());
    }
    if (from.has_usecount()) {
      set_usecount(from.usecount());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_NumberRuleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_NumberRuleInfo::CopyFrom(const JK_NumberRuleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_NumberRuleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void JK_NumberRuleInfo::Swap(JK_NumberRuleInfo* other) {
  if (other != this) {
    std::swap(numberruleid_, other->numberruleid_);
    std::swap(fittingid_, other->fittingid_);
    std::swap(minlen_, other->minlen_);
    std::swap(maxlen_, other->maxlen_);
    std::swap(usecount_, other->usecount_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_NumberRuleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_NumberRuleInfo_descriptor_;
  metadata.reflection = JK_NumberRuleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_PackageInfo::kFittingPackIDFieldNumber;
const int JK_PackageInfo::kFactoryIDFieldNumber;
const int JK_PackageInfo::kGroupIDFieldNumber;
const int JK_PackageInfo::kIsDelFieldNumber;
const int JK_PackageInfo::kIsActiveFieldNumber;
const int JK_PackageInfo::kIsSplitFieldNumber;
const int JK_PackageInfo::kIsSeparateFieldNumber;
const int JK_PackageInfo::kGTypeIDFieldNumber;
const int JK_PackageInfo::kCreatorIDFieldNumber;
const int JK_PackageInfo::kUpdaterIDFieldNumber;
const int JK_PackageInfo::kCreateTimeFieldNumber;
const int JK_PackageInfo::kUpdateTimeFieldNumber;
const int JK_PackageInfo::kFittingPackCodeFieldNumber;
const int JK_PackageInfo::kFittingPackNameFieldNumber;
const int JK_PackageInfo::kFittingPackMemoFieldNumber;
const int JK_PackageInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_PackageInfo::JK_PackageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_PackageInfo::InitAsDefaultInstance() {
}

JK_PackageInfo::JK_PackageInfo(const JK_PackageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_PackageInfo::SharedCtor() {
  _cached_size_ = 0;
  fittingpackid_ = 0;
  factoryid_ = 0;
  groupid_ = 0;
  isdel_ = false;
  isactive_ = false;
  issplit_ = false;
  isseparate_ = false;
  gtypeid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  fittingpackcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fittingpackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fittingpackmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_PackageInfo::~JK_PackageInfo() {
  SharedDtor();
}

void JK_PackageInfo::SharedDtor() {
  if (fittingpackcode_ != &::google::protobuf::internal::kEmptyString) {
    delete fittingpackcode_;
  }
  if (fittingpackname_ != &::google::protobuf::internal::kEmptyString) {
    delete fittingpackname_;
  }
  if (fittingpackmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete fittingpackmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_PackageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_PackageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_PackageInfo_descriptor_;
}

const JK_PackageInfo& JK_PackageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_PackageInfo* JK_PackageInfo::default_instance_ = NULL;

JK_PackageInfo* JK_PackageInfo::New() const {
  return new JK_PackageInfo;
}

void JK_PackageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fittingpackid_ = 0;
    factoryid_ = 0;
    groupid_ = 0;
    isdel_ = false;
    isactive_ = false;
    issplit_ = false;
    isseparate_ = false;
    gtypeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_fittingpackcode()) {
      if (fittingpackcode_ != &::google::protobuf::internal::kEmptyString) {
        fittingpackcode_->clear();
      }
    }
    if (has_fittingpackname()) {
      if (fittingpackname_ != &::google::protobuf::internal::kEmptyString) {
        fittingpackname_->clear();
      }
    }
    if (has_fittingpackmemo()) {
      if (fittingpackmemo_ != &::google::protobuf::internal::kEmptyString) {
        fittingpackmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_PackageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FittingPackID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fittingpackid_)));
          set_has_fittingpackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsSplit;
        break;
      }

      // required bool IsSplit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSplit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issplit_)));
          set_has_issplit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_IsSeparate;
        break;
      }

      // required bool IsSeparate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSeparate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isseparate_)));
          set_has_isseparate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_FittingPackCode;
        break;
      }

      // required string FittingPackCode = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FittingPackCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fittingpackcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fittingpackcode().data(), this->fittingpackcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_FittingPackName;
        break;
      }

      // required string FittingPackName = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FittingPackName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fittingpackname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fittingpackname().data(), this->fittingpackname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_FittingPackMemo;
        break;
      }

      // required string FittingPackMemo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FittingPackMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fittingpackmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fittingpackmemo().data(), this->fittingpackmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_PackageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FittingPackID = 1;
  if (has_fittingpackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fittingpackid(), output);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdel(), output);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isactive(), output);
  }

  // required bool IsSplit = 6;
  if (has_issplit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->issplit(), output);
  }

  // required bool IsSeparate = 7;
  if (has_isseparate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isseparate(), output);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gtypeid(), output);
  }

  // required int32 CreatorID = 9;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->creatorid(), output);
  }

  // required int32 UpdaterID = 10;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->updaterid(), output);
  }

  // required int64 CreateTime = 11;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->createtime(), output);
  }

  // required int64 UpdateTime = 12;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->updatetime(), output);
  }

  // required string FittingPackCode = 13;
  if (has_fittingpackcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fittingpackcode().data(), this->fittingpackcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->fittingpackcode(), output);
  }

  // required string FittingPackName = 14;
  if (has_fittingpackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fittingpackname().data(), this->fittingpackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->fittingpackname(), output);
  }

  // required string FittingPackMemo = 15;
  if (has_fittingpackmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fittingpackmemo().data(), this->fittingpackmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->fittingpackmemo(), output);
  }

  // required int64 VerCode = 16;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_PackageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FittingPackID = 1;
  if (has_fittingpackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fittingpackid(), target);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdel(), target);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isactive(), target);
  }

  // required bool IsSplit = 6;
  if (has_issplit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->issplit(), target);
  }

  // required bool IsSeparate = 7;
  if (has_isseparate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isseparate(), target);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gtypeid(), target);
  }

  // required int32 CreatorID = 9;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->creatorid(), target);
  }

  // required int32 UpdaterID = 10;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->updaterid(), target);
  }

  // required int64 CreateTime = 11;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->createtime(), target);
  }

  // required int64 UpdateTime = 12;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->updatetime(), target);
  }

  // required string FittingPackCode = 13;
  if (has_fittingpackcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fittingpackcode().data(), this->fittingpackcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->fittingpackcode(), target);
  }

  // required string FittingPackName = 14;
  if (has_fittingpackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fittingpackname().data(), this->fittingpackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->fittingpackname(), target);
  }

  // required string FittingPackMemo = 15;
  if (has_fittingpackmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fittingpackmemo().data(), this->fittingpackmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->fittingpackmemo(), target);
  }

  // required int64 VerCode = 16;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_PackageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FittingPackID = 1;
    if (has_fittingpackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fittingpackid());
    }

    // required int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 GroupID = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required bool IsDel = 4;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsActive = 5;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required bool IsSplit = 6;
    if (has_issplit()) {
      total_size += 1 + 1;
    }

    // required bool IsSeparate = 7;
    if (has_isseparate()) {
      total_size += 1 + 1;
    }

    // required int32 GTypeID = 8;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 CreatorID = 9;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 10;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 11;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 12;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string FittingPackCode = 13;
    if (has_fittingpackcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fittingpackcode());
    }

    // required string FittingPackName = 14;
    if (has_fittingpackname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fittingpackname());
    }

    // required string FittingPackMemo = 15;
    if (has_fittingpackmemo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fittingpackmemo());
    }

    // required int64 VerCode = 16;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_PackageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_PackageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_PackageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_PackageInfo::MergeFrom(const JK_PackageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fittingpackid()) {
      set_fittingpackid(from.fittingpackid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_issplit()) {
      set_issplit(from.issplit());
    }
    if (from.has_isseparate()) {
      set_isseparate(from.isseparate());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_fittingpackcode()) {
      set_fittingpackcode(from.fittingpackcode());
    }
    if (from.has_fittingpackname()) {
      set_fittingpackname(from.fittingpackname());
    }
    if (from.has_fittingpackmemo()) {
      set_fittingpackmemo(from.fittingpackmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_PackageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_PackageInfo::CopyFrom(const JK_PackageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_PackageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void JK_PackageInfo::Swap(JK_PackageInfo* other) {
  if (other != this) {
    std::swap(fittingpackid_, other->fittingpackid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(groupid_, other->groupid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isactive_, other->isactive_);
    std::swap(issplit_, other->issplit_);
    std::swap(isseparate_, other->isseparate_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(fittingpackcode_, other->fittingpackcode_);
    std::swap(fittingpackname_, other->fittingpackname_);
    std::swap(fittingpackmemo_, other->fittingpackmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_PackageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_PackageInfo_descriptor_;
  metadata.reflection = JK_PackageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_PackageMapInfo::kPackageIDFieldNumber;
const int JK_PackageMapInfo::kFittingIDFieldNumber;
const int JK_PackageMapInfo::kFittingCountFieldNumber;
const int JK_PackageMapInfo::kVerCodeFieldNumber;
const int JK_PackageMapInfo::kFactoryIDFieldNumber;
#endif  // !_MSC_VER

JK_PackageMapInfo::JK_PackageMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_PackageMapInfo::InitAsDefaultInstance() {
}

JK_PackageMapInfo::JK_PackageMapInfo(const JK_PackageMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_PackageMapInfo::SharedCtor() {
  _cached_size_ = 0;
  packageid_ = 0;
  fittingid_ = 0;
  fittingcount_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_PackageMapInfo::~JK_PackageMapInfo() {
  SharedDtor();
}

void JK_PackageMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_PackageMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_PackageMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_PackageMapInfo_descriptor_;
}

const JK_PackageMapInfo& JK_PackageMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_PackageMapInfo* JK_PackageMapInfo::default_instance_ = NULL;

JK_PackageMapInfo* JK_PackageMapInfo::New() const {
  return new JK_PackageMapInfo;
}

void JK_PackageMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packageid_ = 0;
    fittingid_ = 0;
    fittingcount_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_PackageMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PackageID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FittingID;
        break;
      }

      // required int32 FittingID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FittingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fittingid_)));
          set_has_fittingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FittingCount;
        break;
      }

      // required int32 FittingCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FittingCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fittingcount_)));
          set_has_fittingcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_PackageMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PackageID = 1;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packageid(), output);
  }

  // required int32 FittingID = 2;
  if (has_fittingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fittingid(), output);
  }

  // required int32 FittingCount = 3;
  if (has_fittingcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fittingcount(), output);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->vercode(), output);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_PackageMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PackageID = 1;
  if (has_packageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packageid(), target);
  }

  // required int32 FittingID = 2;
  if (has_fittingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fittingid(), target);
  }

  // required int32 FittingCount = 3;
  if (has_fittingcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fittingcount(), target);
  }

  // required int64 VerCode = 4;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->vercode(), target);
  }

  // required int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_PackageMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PackageID = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packageid());
    }

    // required int32 FittingID = 2;
    if (has_fittingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fittingid());
    }

    // required int32 FittingCount = 3;
    if (has_fittingcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fittingcount());
    }

    // required int64 VerCode = 4;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_PackageMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_PackageMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_PackageMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_PackageMapInfo::MergeFrom(const JK_PackageMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
    if (from.has_fittingid()) {
      set_fittingid(from.fittingid());
    }
    if (from.has_fittingcount()) {
      set_fittingcount(from.fittingcount());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_PackageMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_PackageMapInfo::CopyFrom(const JK_PackageMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_PackageMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void JK_PackageMapInfo::Swap(JK_PackageMapInfo* other) {
  if (other != this) {
    std::swap(packageid_, other->packageid_);
    std::swap(fittingid_, other->fittingid_);
    std::swap(fittingcount_, other->fittingcount_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_PackageMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_PackageMapInfo_descriptor_;
  metadata.reflection = JK_PackageMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_ProductInfo::kProductIDFieldNumber;
const int JK_ProductInfo::kFactoryIDFieldNumber;
const int JK_ProductInfo::kGroupIDFieldNumber;
const int JK_ProductInfo::kIsDelFieldNumber;
const int JK_ProductInfo::kIsActiveFieldNumber;
const int JK_ProductInfo::kIsSplitFieldNumber;
const int JK_ProductInfo::kSupplyTypeFieldNumber;
const int JK_ProductInfo::kGTypeIDFieldNumber;
const int JK_ProductInfo::kShowIDFieldNumber;
const int JK_ProductInfo::kModelIDFieldNumber;
const int JK_ProductInfo::kXLenFieldNumber;
const int JK_ProductInfo::kYLenFieldNumber;
const int JK_ProductInfo::kZLenFieldNumber;
const int JK_ProductInfo::kCreatorIDFieldNumber;
const int JK_ProductInfo::kUpdaterIDFieldNumber;
const int JK_ProductInfo::kCreateTimeFieldNumber;
const int JK_ProductInfo::kUpdateTimeFieldNumber;
const int JK_ProductInfo::kProductCodeFieldNumber;
const int JK_ProductInfo::kProductNameFieldNumber;
const int JK_ProductInfo::kProductMemoFieldNumber;
const int JK_ProductInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_ProductInfo::JK_ProductInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_ProductInfo::InitAsDefaultInstance() {
}

JK_ProductInfo::JK_ProductInfo(const JK_ProductInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_ProductInfo::SharedCtor() {
  _cached_size_ = 0;
  productid_ = 0;
  factoryid_ = 0;
  groupid_ = 0;
  isdel_ = false;
  isactive_ = false;
  issplit_ = false;
  supplytype_ = 0;
  gtypeid_ = 0;
  showid_ = 0;
  modelid_ = 0;
  xlen_ = 0;
  ylen_ = 0;
  zlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  productcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_ProductInfo::~JK_ProductInfo() {
  SharedDtor();
}

void JK_ProductInfo::SharedDtor() {
  if (productcode_ != &::google::protobuf::internal::kEmptyString) {
    delete productcode_;
  }
  if (productname_ != &::google::protobuf::internal::kEmptyString) {
    delete productname_;
  }
  if (productmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete productmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_ProductInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_ProductInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_ProductInfo_descriptor_;
}

const JK_ProductInfo& JK_ProductInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_ProductInfo* JK_ProductInfo::default_instance_ = NULL;

JK_ProductInfo* JK_ProductInfo::New() const {
  return new JK_ProductInfo;
}

void JK_ProductInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    productid_ = 0;
    factoryid_ = 0;
    groupid_ = 0;
    isdel_ = false;
    isactive_ = false;
    issplit_ = false;
    supplytype_ = 0;
    gtypeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    showid_ = 0;
    modelid_ = 0;
    xlen_ = 0;
    ylen_ = 0;
    zlen_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_productcode()) {
      if (productcode_ != &::google::protobuf::internal::kEmptyString) {
        productcode_->clear();
      }
    }
    if (has_productname()) {
      if (productname_ != &::google::protobuf::internal::kEmptyString) {
        productname_->clear();
      }
    }
    if (has_productmemo()) {
      if (productmemo_ != &::google::protobuf::internal::kEmptyString) {
        productmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_ProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ProductID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsSplit;
        break;
      }

      // required bool IsSplit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSplit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issplit_)));
          set_has_issplit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SupplyType;
        break;
      }

      // required int32 SupplyType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SupplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplytype_)));
          set_has_supplytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ShowID;
        break;
      }

      // required int32 ShowID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ModelID;
        break;
      }

      // required int32 ModelID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_XLen;
        break;
      }

      // required double XLen = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_YLen;
        break;
      }

      // required double YLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_ZLen;
        break;
      }

      // required double ZLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zlen_)));
          set_has_zlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_ProductCode;
        break;
      }

      // required string ProductCode = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProductCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productcode().data(), this->productcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_ProductName;
        break;
      }

      // required string ProductName = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProductName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productname().data(), this->productname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ProductMemo;
        break;
      }

      // required string ProductMemo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProductMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productmemo().data(), this->productmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_ProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ProductID = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->productid(), output);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdel(), output);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isactive(), output);
  }

  // required bool IsSplit = 6;
  if (has_issplit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->issplit(), output);
  }

  // required int32 SupplyType = 7;
  if (has_supplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->supplytype(), output);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gtypeid(), output);
  }

  // required int32 ShowID = 9;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->showid(), output);
  }

  // required int32 ModelID = 10;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->modelid(), output);
  }

  // required double XLen = 11;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->xlen(), output);
  }

  // required double YLen = 12;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->ylen(), output);
  }

  // required double ZLen = 13;
  if (has_zlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->zlen(), output);
  }

  // required int32 CreatorID = 14;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->creatorid(), output);
  }

  // required int32 UpdaterID = 15;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->updaterid(), output);
  }

  // required int64 CreateTime = 16;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->createtime(), output);
  }

  // required int64 UpdateTime = 17;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->updatetime(), output);
  }

  // required string ProductCode = 18;
  if (has_productcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productcode().data(), this->productcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->productcode(), output);
  }

  // required string ProductName = 19;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->productname(), output);
  }

  // required string ProductMemo = 20;
  if (has_productmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productmemo().data(), this->productmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->productmemo(), output);
  }

  // required int64 VerCode = 21;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_ProductInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ProductID = 1;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->productid(), target);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdel(), target);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isactive(), target);
  }

  // required bool IsSplit = 6;
  if (has_issplit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->issplit(), target);
  }

  // required int32 SupplyType = 7;
  if (has_supplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->supplytype(), target);
  }

  // required int32 GTypeID = 8;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gtypeid(), target);
  }

  // required int32 ShowID = 9;
  if (has_showid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->showid(), target);
  }

  // required int32 ModelID = 10;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->modelid(), target);
  }

  // required double XLen = 11;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->xlen(), target);
  }

  // required double YLen = 12;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->ylen(), target);
  }

  // required double ZLen = 13;
  if (has_zlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->zlen(), target);
  }

  // required int32 CreatorID = 14;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->creatorid(), target);
  }

  // required int32 UpdaterID = 15;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->updaterid(), target);
  }

  // required int64 CreateTime = 16;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->createtime(), target);
  }

  // required int64 UpdateTime = 17;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->updatetime(), target);
  }

  // required string ProductCode = 18;
  if (has_productcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productcode().data(), this->productcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->productcode(), target);
  }

  // required string ProductName = 19;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->productname(), target);
  }

  // required string ProductMemo = 20;
  if (has_productmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productmemo().data(), this->productmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->productmemo(), target);
  }

  // required int64 VerCode = 21;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_ProductInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ProductID = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }

    // required int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 GroupID = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required bool IsDel = 4;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsActive = 5;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required bool IsSplit = 6;
    if (has_issplit()) {
      total_size += 1 + 1;
    }

    // required int32 SupplyType = 7;
    if (has_supplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplytype());
    }

    // required int32 GTypeID = 8;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 ShowID = 9;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showid());
    }

    // required int32 ModelID = 10;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

    // required double XLen = 11;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 12;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required double ZLen = 13;
    if (has_zlen()) {
      total_size += 1 + 8;
    }

    // required int32 CreatorID = 14;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 15;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 16;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 UpdateTime = 17;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string ProductCode = 18;
    if (has_productcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productcode());
    }

    // required string ProductName = 19;
    if (has_productname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productname());
    }

    // required string ProductMemo = 20;
    if (has_productmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productmemo());
    }

    // required int64 VerCode = 21;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_ProductInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_ProductInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_ProductInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_ProductInfo::MergeFrom(const JK_ProductInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_issplit()) {
      set_issplit(from.issplit());
    }
    if (from.has_supplytype()) {
      set_supplytype(from.supplytype());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_zlen()) {
      set_zlen(from.zlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_productcode()) {
      set_productcode(from.productcode());
    }
    if (from.has_productname()) {
      set_productname(from.productname());
    }
    if (from.has_productmemo()) {
      set_productmemo(from.productmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_ProductInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_ProductInfo::CopyFrom(const JK_ProductInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_ProductInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fffff) != 0x001fffff) return false;

  return true;
}

void JK_ProductInfo::Swap(JK_ProductInfo* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(groupid_, other->groupid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isactive_, other->isactive_);
    std::swap(issplit_, other->issplit_);
    std::swap(supplytype_, other->supplytype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(showid_, other->showid_);
    std::swap(modelid_, other->modelid_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(zlen_, other->zlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(productcode_, other->productcode_);
    std::swap(productname_, other->productname_);
    std::swap(productmemo_, other->productmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_ProductInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_ProductInfo_descriptor_;
  metadata.reflection = JK_ProductInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_ProductSeriesInfo::kProductSeriesIDFieldNumber;
const int JK_ProductSeriesInfo::kFactoryIDFieldNumber;
const int JK_ProductSeriesInfo::kGroupIDFieldNumber;
const int JK_ProductSeriesInfo::kIsDelFieldNumber;
const int JK_ProductSeriesInfo::kIsActiveFieldNumber;
const int JK_ProductSeriesInfo::kCreatorIDFieldNumber;
const int JK_ProductSeriesInfo::kUpdaterIDFieldNumber;
const int JK_ProductSeriesInfo::kCreateTimeFieldNumber;
const int JK_ProductSeriesInfo::kUpdateTimeFieldNumber;
const int JK_ProductSeriesInfo::kProductSeriesCodeFieldNumber;
const int JK_ProductSeriesInfo::kProductSeriesNameFieldNumber;
const int JK_ProductSeriesInfo::kProductSeriesMemoFieldNumber;
const int JK_ProductSeriesInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_ProductSeriesInfo::JK_ProductSeriesInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_ProductSeriesInfo::InitAsDefaultInstance() {
}

JK_ProductSeriesInfo::JK_ProductSeriesInfo(const JK_ProductSeriesInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_ProductSeriesInfo::SharedCtor() {
  _cached_size_ = 0;
  productseriesid_ = 0;
  factoryid_ = 0;
  groupid_ = 0;
  isdel_ = false;
  isactive_ = false;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  productseriescode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productseriesname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productseriesmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_ProductSeriesInfo::~JK_ProductSeriesInfo() {
  SharedDtor();
}

void JK_ProductSeriesInfo::SharedDtor() {
  if (productseriescode_ != &::google::protobuf::internal::kEmptyString) {
    delete productseriescode_;
  }
  if (productseriesname_ != &::google::protobuf::internal::kEmptyString) {
    delete productseriesname_;
  }
  if (productseriesmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete productseriesmemo_;
  }
  if (this != default_instance_) {
  }
}

void JK_ProductSeriesInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_ProductSeriesInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_ProductSeriesInfo_descriptor_;
}

const JK_ProductSeriesInfo& JK_ProductSeriesInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_ProductSeriesInfo* JK_ProductSeriesInfo::default_instance_ = NULL;

JK_ProductSeriesInfo* JK_ProductSeriesInfo::New() const {
  return new JK_ProductSeriesInfo;
}

void JK_ProductSeriesInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    productseriesid_ = 0;
    factoryid_ = 0;
    groupid_ = 0;
    isdel_ = false;
    isactive_ = false;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_productseriescode()) {
      if (productseriescode_ != &::google::protobuf::internal::kEmptyString) {
        productseriescode_->clear();
      }
    }
    if (has_productseriesname()) {
      if (productseriesname_ != &::google::protobuf::internal::kEmptyString) {
        productseriesname_->clear();
      }
    }
    if (has_productseriesmemo()) {
      if (productseriesmemo_ != &::google::protobuf::internal::kEmptyString) {
        productseriesmemo_->clear();
      }
    }
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_ProductSeriesInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ProductSeriesID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productseriesid_)));
          set_has_productseriesid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsActive;
        break;
      }

      // required bool IsActive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ProductSeriesCode;
        break;
      }

      // required string ProductSeriesCode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProductSeriesCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productseriescode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productseriescode().data(), this->productseriescode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ProductSeriesName;
        break;
      }

      // required string ProductSeriesName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProductSeriesName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productseriesname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productseriesname().data(), this->productseriesname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ProductSeriesMemo;
        break;
      }

      // required string ProductSeriesMemo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProductSeriesMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productseriesmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productseriesmemo().data(), this->productseriesmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_ProductSeriesInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ProductSeriesID = 1;
  if (has_productseriesid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->productseriesid(), output);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdel(), output);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isactive(), output);
  }

  // required int32 CreatorID = 6;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->creatorid(), output);
  }

  // required int32 UpdaterID = 7;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->updaterid(), output);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->createtime(), output);
  }

  // required int64 UpdateTime = 9;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->updatetime(), output);
  }

  // required string ProductSeriesCode = 10;
  if (has_productseriescode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productseriescode().data(), this->productseriescode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->productseriescode(), output);
  }

  // required string ProductSeriesName = 11;
  if (has_productseriesname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productseriesname().data(), this->productseriesname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->productseriesname(), output);
  }

  // required string ProductSeriesMemo = 12;
  if (has_productseriesmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productseriesmemo().data(), this->productseriesmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->productseriesmemo(), output);
  }

  // required int64 VerCode = 13;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_ProductSeriesInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ProductSeriesID = 1;
  if (has_productseriesid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->productseriesid(), target);
  }

  // required int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // required int32 GroupID = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdel(), target);
  }

  // required bool IsActive = 5;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isactive(), target);
  }

  // required int32 CreatorID = 6;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->creatorid(), target);
  }

  // required int32 UpdaterID = 7;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->updaterid(), target);
  }

  // required int64 CreateTime = 8;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->createtime(), target);
  }

  // required int64 UpdateTime = 9;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->updatetime(), target);
  }

  // required string ProductSeriesCode = 10;
  if (has_productseriescode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productseriescode().data(), this->productseriescode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->productseriescode(), target);
  }

  // required string ProductSeriesName = 11;
  if (has_productseriesname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productseriesname().data(), this->productseriesname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->productseriesname(), target);
  }

  // required string ProductSeriesMemo = 12;
  if (has_productseriesmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productseriesmemo().data(), this->productseriesmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->productseriesmemo(), target);
  }

  // required int64 VerCode = 13;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_ProductSeriesInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ProductSeriesID = 1;
    if (has_productseriesid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productseriesid());
    }

    // required int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 GroupID = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required bool IsDel = 4;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required bool IsActive = 5;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // required int32 CreatorID = 6;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 7;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 8;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 UpdateTime = 9;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string ProductSeriesCode = 10;
    if (has_productseriescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productseriescode());
    }

    // required string ProductSeriesName = 11;
    if (has_productseriesname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productseriesname());
    }

    // required string ProductSeriesMemo = 12;
    if (has_productseriesmemo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productseriesmemo());
    }

    // required int64 VerCode = 13;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_ProductSeriesInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_ProductSeriesInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_ProductSeriesInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_ProductSeriesInfo::MergeFrom(const JK_ProductSeriesInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productseriesid()) {
      set_productseriesid(from.productseriesid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_productseriescode()) {
      set_productseriescode(from.productseriescode());
    }
    if (from.has_productseriesname()) {
      set_productseriesname(from.productseriesname());
    }
    if (from.has_productseriesmemo()) {
      set_productseriesmemo(from.productseriesmemo());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_ProductSeriesInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_ProductSeriesInfo::CopyFrom(const JK_ProductSeriesInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_ProductSeriesInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void JK_ProductSeriesInfo::Swap(JK_ProductSeriesInfo* other) {
  if (other != this) {
    std::swap(productseriesid_, other->productseriesid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(groupid_, other->groupid_);
    std::swap(isdel_, other->isdel_);
    std::swap(isactive_, other->isactive_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(productseriescode_, other->productseriescode_);
    std::swap(productseriesname_, other->productseriesname_);
    std::swap(productseriesmemo_, other->productseriesmemo_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_ProductSeriesInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_ProductSeriesInfo_descriptor_;
  metadata.reflection = JK_ProductSeriesInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_ProductSeriesValidInfo::kProductSeriesIDFieldNumber;
const int JK_ProductSeriesValidInfo::kProductSeriesItemIDFieldNumber;
const int JK_ProductSeriesValidInfo::kPSTypeFieldNumber;
const int JK_ProductSeriesValidInfo::kParentIDFieldNumber;
const int JK_ProductSeriesValidInfo::kIsDefaultFieldNumber;
const int JK_ProductSeriesValidInfo::kIsGroupFieldNumber;
const int JK_ProductSeriesValidInfo::kVerCodeFieldNumber;
const int JK_ProductSeriesValidInfo::kFactoryIDFieldNumber;
const int JK_ProductSeriesValidInfo::kCreatorIDFieldNumber;
const int JK_ProductSeriesValidInfo::kUpdaterIDFieldNumber;
const int JK_ProductSeriesValidInfo::kCreateTimeFieldNumber;
const int JK_ProductSeriesValidInfo::kUpdateTimeFieldNumber;
const int JK_ProductSeriesValidInfo::kDefaultItemIDFieldNumber;
#endif  // !_MSC_VER

JK_ProductSeriesValidInfo::JK_ProductSeriesValidInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_ProductSeriesValidInfo::InitAsDefaultInstance() {
}

JK_ProductSeriesValidInfo::JK_ProductSeriesValidInfo(const JK_ProductSeriesValidInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_ProductSeriesValidInfo::SharedCtor() {
  _cached_size_ = 0;
  productseriesid_ = 0;
  productseriesitemid_ = 0;
  pstype_ = 0;
  parentid_ = 0;
  isdefault_ = false;
  isgroup_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  defaultitemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_ProductSeriesValidInfo::~JK_ProductSeriesValidInfo() {
  SharedDtor();
}

void JK_ProductSeriesValidInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_ProductSeriesValidInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_ProductSeriesValidInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_ProductSeriesValidInfo_descriptor_;
}

const JK_ProductSeriesValidInfo& JK_ProductSeriesValidInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_ProductSeriesValidInfo* JK_ProductSeriesValidInfo::default_instance_ = NULL;

JK_ProductSeriesValidInfo* JK_ProductSeriesValidInfo::New() const {
  return new JK_ProductSeriesValidInfo;
}

void JK_ProductSeriesValidInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    productseriesid_ = 0;
    productseriesitemid_ = 0;
    pstype_ = 0;
    parentid_ = 0;
    isdefault_ = false;
    isgroup_ = false;
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    defaultitemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_ProductSeriesValidInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ProductSeriesID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productseriesid_)));
          set_has_productseriesid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ProductSeriesItemID;
        break;
      }

      // required int32 ProductSeriesItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProductSeriesItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productseriesitemid_)));
          set_has_productseriesitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PSType;
        break;
      }

      // required int32 PSType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PSType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pstype_)));
          set_has_pstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ParentID;
        break;
      }

      // required int32 ParentID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentid_)));
          set_has_parentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsGroup;
        break;
      }

      // required bool IsGroup = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgroup_)));
          set_has_isgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_DefaultItemID;
        break;
      }

      // required int32 DefaultItemID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefaultItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defaultitemid_)));
          set_has_defaultitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_ProductSeriesValidInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ProductSeriesID = 1;
  if (has_productseriesid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->productseriesid(), output);
  }

  // required int32 ProductSeriesItemID = 2;
  if (has_productseriesitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->productseriesitemid(), output);
  }

  // required int32 PSType = 3;
  if (has_pstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pstype(), output);
  }

  // required int32 ParentID = 4;
  if (has_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->parentid(), output);
  }

  // required bool IsDefault = 5;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdefault(), output);
  }

  // required bool IsGroup = 6;
  if (has_isgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isgroup(), output);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vercode(), output);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->factoryid(), output);
  }

  // required int32 CreatorID = 9;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->creatorid(), output);
  }

  // required int32 UpdaterID = 10;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->updaterid(), output);
  }

  // required int64 CreateTime = 11;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->createtime(), output);
  }

  // required int64 UpdateTime = 12;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->updatetime(), output);
  }

  // required int32 DefaultItemID = 13;
  if (has_defaultitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->defaultitemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_ProductSeriesValidInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ProductSeriesID = 1;
  if (has_productseriesid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->productseriesid(), target);
  }

  // required int32 ProductSeriesItemID = 2;
  if (has_productseriesitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->productseriesitemid(), target);
  }

  // required int32 PSType = 3;
  if (has_pstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pstype(), target);
  }

  // required int32 ParentID = 4;
  if (has_parentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->parentid(), target);
  }

  // required bool IsDefault = 5;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdefault(), target);
  }

  // required bool IsGroup = 6;
  if (has_isgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isgroup(), target);
  }

  // required int64 VerCode = 7;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vercode(), target);
  }

  // required int32 FactoryID = 8;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->factoryid(), target);
  }

  // required int32 CreatorID = 9;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->creatorid(), target);
  }

  // required int32 UpdaterID = 10;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->updaterid(), target);
  }

  // required int64 CreateTime = 11;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->createtime(), target);
  }

  // required int64 UpdateTime = 12;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->updatetime(), target);
  }

  // required int32 DefaultItemID = 13;
  if (has_defaultitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->defaultitemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_ProductSeriesValidInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ProductSeriesID = 1;
    if (has_productseriesid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productseriesid());
    }

    // required int32 ProductSeriesItemID = 2;
    if (has_productseriesitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productseriesitemid());
    }

    // required int32 PSType = 3;
    if (has_pstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pstype());
    }

    // required int32 ParentID = 4;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parentid());
    }

    // required bool IsDefault = 5;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required bool IsGroup = 6;
    if (has_isgroup()) {
      total_size += 1 + 1;
    }

    // required int64 VerCode = 7;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 8;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 CreatorID = 9;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 10;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 11;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 12;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required int32 DefaultItemID = 13;
    if (has_defaultitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defaultitemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_ProductSeriesValidInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_ProductSeriesValidInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_ProductSeriesValidInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_ProductSeriesValidInfo::MergeFrom(const JK_ProductSeriesValidInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productseriesid()) {
      set_productseriesid(from.productseriesid());
    }
    if (from.has_productseriesitemid()) {
      set_productseriesitemid(from.productseriesitemid());
    }
    if (from.has_pstype()) {
      set_pstype(from.pstype());
    }
    if (from.has_parentid()) {
      set_parentid(from.parentid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_isgroup()) {
      set_isgroup(from.isgroup());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_defaultitemid()) {
      set_defaultitemid(from.defaultitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_ProductSeriesValidInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_ProductSeriesValidInfo::CopyFrom(const JK_ProductSeriesValidInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_ProductSeriesValidInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void JK_ProductSeriesValidInfo::Swap(JK_ProductSeriesValidInfo* other) {
  if (other != this) {
    std::swap(productseriesid_, other->productseriesid_);
    std::swap(productseriesitemid_, other->productseriesitemid_);
    std::swap(pstype_, other->pstype_);
    std::swap(parentid_, other->parentid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(isgroup_, other->isgroup_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(defaultitemid_, other->defaultitemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_ProductSeriesValidInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_ProductSeriesValidInfo_descriptor_;
  metadata.reflection = JK_ProductSeriesValidInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_ResourceInfo::kResourceIDFieldNumber;
const int JK_ResourceInfo::kGroupIDFieldNumber;
const int JK_ResourceInfo::kFactoryIDFieldNumber;
const int JK_ResourceInfo::kGTypeIDFieldNumber;
const int JK_ResourceInfo::kIsDelFieldNumber;
const int JK_ResourceInfo::kXLenFieldNumber;
const int JK_ResourceInfo::kYLenFieldNumber;
const int JK_ResourceInfo::kCreatorIDFieldNumber;
const int JK_ResourceInfo::kUpdaterIDFieldNumber;
const int JK_ResourceInfo::kCreateTimeFieldNumber;
const int JK_ResourceInfo::kUpdateTimeFieldNumber;
const int JK_ResourceInfo::kResourceCodeFieldNumber;
const int JK_ResourceInfo::kResourceNameFieldNumber;
const int JK_ResourceInfo::kRelativePathFieldNumber;
const int JK_ResourceInfo::kResourceMemoFieldNumber;
const int JK_ResourceInfo::kHASHCodeFieldNumber;
const int JK_ResourceInfo::kVerCodeFieldNumber;
#endif  // !_MSC_VER

JK_ResourceInfo::JK_ResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_ResourceInfo::InitAsDefaultInstance() {
}

JK_ResourceInfo::JK_ResourceInfo(const JK_ResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_ResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  resourceid_ = 0;
  groupid_ = 0;
  factoryid_ = 0;
  gtypeid_ = 0;
  isdel_ = false;
  xlen_ = 0;
  ylen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  resourcecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resourcememo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_ResourceInfo::~JK_ResourceInfo() {
  SharedDtor();
}

void JK_ResourceInfo::SharedDtor() {
  if (resourcecode_ != &::google::protobuf::internal::kEmptyString) {
    delete resourcecode_;
  }
  if (resourcename_ != &::google::protobuf::internal::kEmptyString) {
    delete resourcename_;
  }
  if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
    delete relativepath_;
  }
  if (resourcememo_ != &::google::protobuf::internal::kEmptyString) {
    delete resourcememo_;
  }
  if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
    delete hashcode_;
  }
  if (this != default_instance_) {
  }
}

void JK_ResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_ResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_ResourceInfo_descriptor_;
}

const JK_ResourceInfo& JK_ResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_ResourceInfo* JK_ResourceInfo::default_instance_ = NULL;

JK_ResourceInfo* JK_ResourceInfo::New() const {
  return new JK_ResourceInfo;
}

void JK_ResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resourceid_ = 0;
    groupid_ = 0;
    factoryid_ = 0;
    gtypeid_ = 0;
    isdel_ = false;
    xlen_ = 0;
    ylen_ = 0;
    creatorid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_resourcecode()) {
      if (resourcecode_ != &::google::protobuf::internal::kEmptyString) {
        resourcecode_->clear();
      }
    }
    if (has_resourcename()) {
      if (resourcename_ != &::google::protobuf::internal::kEmptyString) {
        resourcename_->clear();
      }
    }
    if (has_relativepath()) {
      if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
        relativepath_->clear();
      }
    }
    if (has_resourcememo()) {
      if (resourcememo_ != &::google::protobuf::internal::kEmptyString) {
        resourcememo_->clear();
      }
    }
    if (has_hashcode()) {
      if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
        hashcode_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_ResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ResourceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resourceid_)));
          set_has_resourceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }

      // required int32 GroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GTypeID;
        break;
      }

      // required int32 GTypeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_XLen;
        break;
      }

      // required double XLen = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xlen_)));
          set_has_xlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_YLen;
        break;
      }

      // required double YLen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ylen_)));
          set_has_ylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ResourceCode;
        break;
      }

      // required string ResourceCode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResourceCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resourcecode().data(), this->resourcecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ResourceName;
        break;
      }

      // required string ResourceName = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResourceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resourcename().data(), this->resourcename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_RelativePath;
        break;
      }

      // required string RelativePath = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RelativePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->relativepath().data(), this->relativepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_ResourceMemo;
        break;
      }

      // required string ResourceMemo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResourceMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcememo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resourcememo().data(), this->resourcememo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_HASHCode;
        break;
      }

      // required string HASHCode = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HASHCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hashcode().data(), this->hashcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_ResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ResourceID = 1;
  if (has_resourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resourceid(), output);
  }

  // required int32 GroupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->factoryid(), output);
  }

  // required int32 GTypeID = 4;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gtypeid(), output);
  }

  // required bool IsDel = 5;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdel(), output);
  }

  // required double XLen = 6;
  if (has_xlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->xlen(), output);
  }

  // required double YLen = 7;
  if (has_ylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ylen(), output);
  }

  // required int32 CreatorID = 8;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->creatorid(), output);
  }

  // required int32 UpdaterID = 9;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->updaterid(), output);
  }

  // required int64 CreateTime = 10;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->createtime(), output);
  }

  // required int64 UpdateTime = 11;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->updatetime(), output);
  }

  // required string ResourceCode = 12;
  if (has_resourcecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcecode().data(), this->resourcecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->resourcecode(), output);
  }

  // required string ResourceName = 13;
  if (has_resourcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcename().data(), this->resourcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->resourcename(), output);
  }

  // required string RelativePath = 14;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->relativepath(), output);
  }

  // required string ResourceMemo = 15;
  if (has_resourcememo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcememo().data(), this->resourcememo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->resourcememo(), output);
  }

  // required string HASHCode = 16;
  if (has_hashcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashcode().data(), this->hashcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->hashcode(), output);
  }

  // required int64 VerCode = 17;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->vercode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_ResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ResourceID = 1;
  if (has_resourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resourceid(), target);
  }

  // required int32 GroupID = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // required int32 FactoryID = 3;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->factoryid(), target);
  }

  // required int32 GTypeID = 4;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gtypeid(), target);
  }

  // required bool IsDel = 5;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdel(), target);
  }

  // required double XLen = 6;
  if (has_xlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->xlen(), target);
  }

  // required double YLen = 7;
  if (has_ylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ylen(), target);
  }

  // required int32 CreatorID = 8;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->creatorid(), target);
  }

  // required int32 UpdaterID = 9;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->updaterid(), target);
  }

  // required int64 CreateTime = 10;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->createtime(), target);
  }

  // required int64 UpdateTime = 11;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->updatetime(), target);
  }

  // required string ResourceCode = 12;
  if (has_resourcecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcecode().data(), this->resourcecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->resourcecode(), target);
  }

  // required string ResourceName = 13;
  if (has_resourcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcename().data(), this->resourcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->resourcename(), target);
  }

  // required string RelativePath = 14;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->relativepath(), target);
  }

  // required string ResourceMemo = 15;
  if (has_resourcememo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourcememo().data(), this->resourcememo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->resourcememo(), target);
  }

  // required string HASHCode = 16;
  if (has_hashcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashcode().data(), this->hashcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->hashcode(), target);
  }

  // required int64 VerCode = 17;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->vercode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_ResourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ResourceID = 1;
    if (has_resourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resourceid());
    }

    // required int32 GroupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required int32 FactoryID = 3;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 GTypeID = 4;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // required bool IsDel = 5;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required double XLen = 6;
    if (has_xlen()) {
      total_size += 1 + 8;
    }

    // required double YLen = 7;
    if (has_ylen()) {
      total_size += 1 + 8;
    }

    // required int32 CreatorID = 8;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 UpdaterID = 9;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 10;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 11;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // required string ResourceCode = 12;
    if (has_resourcecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourcecode());
    }

    // required string ResourceName = 13;
    if (has_resourcename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourcename());
    }

    // required string RelativePath = 14;
    if (has_relativepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relativepath());
    }

    // required string ResourceMemo = 15;
    if (has_resourcememo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourcememo());
    }

    // required string HASHCode = 16;
    if (has_hashcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hashcode());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 VerCode = 17;
    if (has_vercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_ResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_ResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_ResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_ResourceInfo::MergeFrom(const JK_ResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resourceid()) {
      set_resourceid(from.resourceid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_xlen()) {
      set_xlen(from.xlen());
    }
    if (from.has_ylen()) {
      set_ylen(from.ylen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_resourcecode()) {
      set_resourcecode(from.resourcecode());
    }
    if (from.has_resourcename()) {
      set_resourcename(from.resourcename());
    }
    if (from.has_relativepath()) {
      set_relativepath(from.relativepath());
    }
    if (from.has_resourcememo()) {
      set_resourcememo(from.resourcememo());
    }
    if (from.has_hashcode()) {
      set_hashcode(from.hashcode());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_ResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_ResourceInfo::CopyFrom(const JK_ResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_ResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void JK_ResourceInfo::Swap(JK_ResourceInfo* other) {
  if (other != this) {
    std::swap(resourceid_, other->resourceid_);
    std::swap(groupid_, other->groupid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(isdel_, other->isdel_);
    std::swap(xlen_, other->xlen_);
    std::swap(ylen_, other->ylen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(resourcecode_, other->resourcecode_);
    std::swap(resourcename_, other->resourcename_);
    std::swap(relativepath_, other->relativepath_);
    std::swap(resourcememo_, other->resourcememo_);
    std::swap(hashcode_, other->hashcode_);
    std::swap(vercode_, other->vercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_ResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_ResourceInfo_descriptor_;
  metadata.reflection = JK_ResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_SealRuleInfo::kSealRuleIDFieldNumber;
const int JK_SealRuleInfo::kIsDelFieldNumber;
const int JK_SealRuleInfo::kVisibleSealIDFieldNumber;
const int JK_SealRuleInfo::kInvisibleSealIDFieldNumber;
const int JK_SealRuleInfo::kVisPreMillFieldNumber;
const int JK_SealRuleInfo::kInvisPreMillFieldNumber;
const int JK_SealRuleInfo::kSTypeIDFieldNumber;
const int JK_SealRuleInfo::kSealRuleNameFieldNumber;
const int JK_SealRuleInfo::kVerCodeFieldNumber;
const int JK_SealRuleInfo::kFactoryIDFieldNumber;
const int JK_SealRuleInfo::kCreatorIDFieldNumber;
const int JK_SealRuleInfo::kUpdaterIDFieldNumber;
const int JK_SealRuleInfo::kCreateTimeFieldNumber;
const int JK_SealRuleInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_SealRuleInfo::JK_SealRuleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_SealRuleInfo::InitAsDefaultInstance() {
}

JK_SealRuleInfo::JK_SealRuleInfo(const JK_SealRuleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_SealRuleInfo::SharedCtor() {
  _cached_size_ = 0;
  sealruleid_ = 0;
  isdel_ = false;
  visiblesealid_ = 0;
  invisiblesealid_ = 0;
  vispremill_ = 0;
  invispremill_ = 0;
  stypeid_ = 0;
  sealrulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_SealRuleInfo::~JK_SealRuleInfo() {
  SharedDtor();
}

void JK_SealRuleInfo::SharedDtor() {
  if (sealrulename_ != &::google::protobuf::internal::kEmptyString) {
    delete sealrulename_;
  }
  if (this != default_instance_) {
  }
}

void JK_SealRuleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_SealRuleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_SealRuleInfo_descriptor_;
}

const JK_SealRuleInfo& JK_SealRuleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_SealRuleInfo* JK_SealRuleInfo::default_instance_ = NULL;

JK_SealRuleInfo* JK_SealRuleInfo::New() const {
  return new JK_SealRuleInfo;
}

void JK_SealRuleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sealruleid_ = 0;
    isdel_ = false;
    visiblesealid_ = 0;
    invisiblesealid_ = 0;
    vispremill_ = 0;
    invispremill_ = 0;
    stypeid_ = 0;
    if (has_sealrulename()) {
      if (sealrulename_ != &::google::protobuf::internal::kEmptyString) {
        sealrulename_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_SealRuleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SealRuleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sealruleid_)));
          set_has_sealruleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_VisibleSealID;
        break;
      }

      // required int32 VisibleSealID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VisibleSealID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visiblesealid_)));
          set_has_visiblesealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_InvisibleSealID;
        break;
      }

      // required int32 InvisibleSealID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InvisibleSealID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invisiblesealid_)));
          set_has_invisiblesealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_VisPreMill;
        break;
      }

      // required double VisPreMill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VisPreMill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vispremill_)));
          set_has_vispremill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_InvisPreMill;
        break;
      }

      // required double InvisPreMill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_InvisPreMill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &invispremill_)));
          set_has_invispremill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_STypeID;
        break;
      }

      // required int32 STypeID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_STypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stypeid_)));
          set_has_stypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_SealRuleName;
        break;
      }

      // required string SealRuleName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SealRuleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sealrulename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sealrulename().data(), this->sealrulename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_SealRuleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 SealRuleID = 1;
  if (has_sealruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sealruleid(), output);
  }

  // required bool IsDel = 2;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isdel(), output);
  }

  // required int32 VisibleSealID = 3;
  if (has_visiblesealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->visiblesealid(), output);
  }

  // required int32 InvisibleSealID = 4;
  if (has_invisiblesealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->invisiblesealid(), output);
  }

  // required double VisPreMill = 5;
  if (has_vispremill()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->vispremill(), output);
  }

  // required double InvisPreMill = 6;
  if (has_invispremill()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->invispremill(), output);
  }

  // required int32 STypeID = 7;
  if (has_stypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stypeid(), output);
  }

  // required string SealRuleName = 8;
  if (has_sealrulename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sealrulename().data(), this->sealrulename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sealrulename(), output);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vercode(), output);
  }

  // required int32 FactoryID = 10;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->factoryid(), output);
  }

  // required int32 CreatorID = 11;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->creatorid(), output);
  }

  // required int32 UpdaterID = 12;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->updaterid(), output);
  }

  // required int64 CreateTime = 13;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->createtime(), output);
  }

  // required int64 UpdateTime = 14;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_SealRuleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 SealRuleID = 1;
  if (has_sealruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sealruleid(), target);
  }

  // required bool IsDel = 2;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isdel(), target);
  }

  // required int32 VisibleSealID = 3;
  if (has_visiblesealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->visiblesealid(), target);
  }

  // required int32 InvisibleSealID = 4;
  if (has_invisiblesealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->invisiblesealid(), target);
  }

  // required double VisPreMill = 5;
  if (has_vispremill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->vispremill(), target);
  }

  // required double InvisPreMill = 6;
  if (has_invispremill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->invispremill(), target);
  }

  // required int32 STypeID = 7;
  if (has_stypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stypeid(), target);
  }

  // required string SealRuleName = 8;
  if (has_sealrulename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sealrulename().data(), this->sealrulename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sealrulename(), target);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vercode(), target);
  }

  // required int32 FactoryID = 10;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->factoryid(), target);
  }

  // required int32 CreatorID = 11;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->creatorid(), target);
  }

  // required int32 UpdaterID = 12;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->updaterid(), target);
  }

  // required int64 CreateTime = 13;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->createtime(), target);
  }

  // required int64 UpdateTime = 14;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_SealRuleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SealRuleID = 1;
    if (has_sealruleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sealruleid());
    }

    // required bool IsDel = 2;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int32 VisibleSealID = 3;
    if (has_visiblesealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->visiblesealid());
    }

    // required int32 InvisibleSealID = 4;
    if (has_invisiblesealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invisiblesealid());
    }

    // required double VisPreMill = 5;
    if (has_vispremill()) {
      total_size += 1 + 8;
    }

    // required double InvisPreMill = 6;
    if (has_invispremill()) {
      total_size += 1 + 8;
    }

    // required int32 STypeID = 7;
    if (has_stypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stypeid());
    }

    // required string SealRuleName = 8;
    if (has_sealrulename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sealrulename());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 VerCode = 9;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 10;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 11;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 12;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 13;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 14;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_SealRuleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_SealRuleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_SealRuleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_SealRuleInfo::MergeFrom(const JK_SealRuleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sealruleid()) {
      set_sealruleid(from.sealruleid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_visiblesealid()) {
      set_visiblesealid(from.visiblesealid());
    }
    if (from.has_invisiblesealid()) {
      set_invisiblesealid(from.invisiblesealid());
    }
    if (from.has_vispremill()) {
      set_vispremill(from.vispremill());
    }
    if (from.has_invispremill()) {
      set_invispremill(from.invispremill());
    }
    if (from.has_stypeid()) {
      set_stypeid(from.stypeid());
    }
    if (from.has_sealrulename()) {
      set_sealrulename(from.sealrulename());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_SealRuleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_SealRuleInfo::CopyFrom(const JK_SealRuleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_SealRuleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void JK_SealRuleInfo::Swap(JK_SealRuleInfo* other) {
  if (other != this) {
    std::swap(sealruleid_, other->sealruleid_);
    std::swap(isdel_, other->isdel_);
    std::swap(visiblesealid_, other->visiblesealid_);
    std::swap(invisiblesealid_, other->invisiblesealid_);
    std::swap(vispremill_, other->vispremill_);
    std::swap(invispremill_, other->invispremill_);
    std::swap(stypeid_, other->stypeid_);
    std::swap(sealrulename_, other->sealrulename_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_SealRuleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_SealRuleInfo_descriptor_;
  metadata.reflection = JK_SealRuleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_SysConfigInfo::kFactoryIDFieldNumber;
const int JK_SysConfigInfo::kVerCodeFieldNumber;
const int JK_SysConfigInfo::kConfigIDFieldNumber;
const int JK_SysConfigInfo::kTableFrontLenFieldNumber;
const int JK_SysConfigInfo::kTableSideLenFieldNumber;
const int JK_SysConfigInfo::kBaseCabDefaultYPosFieldNumber;
const int JK_SysConfigInfo::kBaseCabSideLenFieldNumber;
const int JK_SysConfigInfo::kWallCabDefaultYPosFieldNumber;
const int JK_SysConfigInfo::kWallCabSideLenFieldNumber;
const int JK_SysConfigInfo::kToekickFrontLenFieldNumber;
const int JK_SysConfigInfo::kDefaultBarHeightFieldNumber;
const int JK_SysConfigInfo::kDefaultSealExtraLenFieldNumber;
const int JK_SysConfigInfo::kDefaultSealPreMillLenFieldNumber;
const int JK_SysConfigInfo::kShelfDefaultYPosFieldNumber;
const int JK_SysConfigInfo::kBGPanelDefaultYPosFieldNumber;
const int JK_SysConfigInfo::kTableToCabDefaultYLenFieldNumber;
const int JK_SysConfigInfo::kDefaultBaseCabinetXLenFieldNumber;
const int JK_SysConfigInfo::kDefaultBaseCabinetYLenFieldNumber;
const int JK_SysConfigInfo::kDefaultBaseCabinetZLenFieldNumber;
const int JK_SysConfigInfo::kDefaultWallCabinetXLenFieldNumber;
const int JK_SysConfigInfo::kDefaultWallCabinetYLenFieldNumber;
const int JK_SysConfigInfo::kDefaultWallCabinetZLenFieldNumber;
const int JK_SysConfigInfo::kDefaultLCabinetXLenFieldNumber;
const int JK_SysConfigInfo::kDefaultLCabinetZLenFieldNumber;
const int JK_SysConfigInfo::kDefaultCabinetBoardThickFieldNumber;
const int JK_SysConfigInfo::kDefaultDoorBoardThickFieldNumber;
const int JK_SysConfigInfo::kDefaultThinBoardThickFieldNumber;
const int JK_SysConfigInfo::kDefaultDecorLineHeightFieldNumber;
const int JK_SysConfigInfo::kDefaultDrawerXLenFieldNumber;
const int JK_SysConfigInfo::kDefaultDrawerYLenFieldNumber;
const int JK_SysConfigInfo::kDefaultDrawerZLenFieldNumber;
const int JK_SysConfigInfo::kCreatorIDFieldNumber;
const int JK_SysConfigInfo::kUpdaterIDFieldNumber;
const int JK_SysConfigInfo::kCreateTimeFieldNumber;
const int JK_SysConfigInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_SysConfigInfo::JK_SysConfigInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_SysConfigInfo::InitAsDefaultInstance() {
}

JK_SysConfigInfo::JK_SysConfigInfo(const JK_SysConfigInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_SysConfigInfo::SharedCtor() {
  _cached_size_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  configid_ = 0;
  tablefrontlen_ = 0;
  tablesidelen_ = 0;
  basecabdefaultypos_ = 0;
  basecabsidelen_ = 0;
  wallcabdefaultypos_ = 0;
  wallcabsidelen_ = 0;
  toekickfrontlen_ = 0;
  defaultbarheight_ = 0;
  defaultsealextralen_ = 0;
  defaultsealpremilllen_ = 0;
  shelfdefaultypos_ = 0;
  bgpaneldefaultypos_ = 0;
  tabletocabdefaultylen_ = 0;
  defaultbasecabinetxlen_ = 0;
  defaultbasecabinetylen_ = 0;
  defaultbasecabinetzlen_ = 0;
  defaultwallcabinetxlen_ = 0;
  defaultwallcabinetylen_ = 0;
  defaultwallcabinetzlen_ = 0;
  defaultlcabinetxlen_ = 0;
  defaultlcabinetzlen_ = 0;
  defaultcabinetboardthick_ = 0;
  defaultdoorboardthick_ = 0;
  defaultthinboardthick_ = 0;
  defaultdecorlineheight_ = 0;
  defaultdrawerxlen_ = 0;
  defaultdrawerylen_ = 0;
  defaultdrawerzlen_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_SysConfigInfo::~JK_SysConfigInfo() {
  SharedDtor();
}

void JK_SysConfigInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_SysConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_SysConfigInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_SysConfigInfo_descriptor_;
}

const JK_SysConfigInfo& JK_SysConfigInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_SysConfigInfo* JK_SysConfigInfo::default_instance_ = NULL;

JK_SysConfigInfo* JK_SysConfigInfo::New() const {
  return new JK_SysConfigInfo;
}

void JK_SysConfigInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    configid_ = 0;
    tablefrontlen_ = 0;
    tablesidelen_ = 0;
    basecabdefaultypos_ = 0;
    basecabsidelen_ = 0;
    wallcabdefaultypos_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wallcabsidelen_ = 0;
    toekickfrontlen_ = 0;
    defaultbarheight_ = 0;
    defaultsealextralen_ = 0;
    defaultsealpremilllen_ = 0;
    shelfdefaultypos_ = 0;
    bgpaneldefaultypos_ = 0;
    tabletocabdefaultylen_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    defaultbasecabinetxlen_ = 0;
    defaultbasecabinetylen_ = 0;
    defaultbasecabinetzlen_ = 0;
    defaultwallcabinetxlen_ = 0;
    defaultwallcabinetylen_ = 0;
    defaultwallcabinetzlen_ = 0;
    defaultlcabinetxlen_ = 0;
    defaultlcabinetzlen_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    defaultcabinetboardthick_ = 0;
    defaultdoorboardthick_ = 0;
    defaultthinboardthick_ = 0;
    defaultdecorlineheight_ = 0;
    defaultdrawerxlen_ = 0;
    defaultdrawerylen_ = 0;
    defaultdrawerzlen_ = 0;
    creatorid_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_SysConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FactoryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ConfigID;
        break;
      }

      // required int32 ConfigID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_TableFrontLen;
        break;
      }

      // required double TableFrontLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TableFrontLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tablefrontlen_)));
          set_has_tablefrontlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_TableSideLen;
        break;
      }

      // required double TableSideLen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TableSideLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tablesidelen_)));
          set_has_tablesidelen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_BaseCabDefaultYPos;
        break;
      }

      // required double BaseCabDefaultYPos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BaseCabDefaultYPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &basecabdefaultypos_)));
          set_has_basecabdefaultypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_BaseCabSideLen;
        break;
      }

      // required double BaseCabSideLen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BaseCabSideLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &basecabsidelen_)));
          set_has_basecabsidelen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_WallCabDefaultYPos;
        break;
      }

      // required double WallCabDefaultYPos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_WallCabDefaultYPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wallcabdefaultypos_)));
          set_has_wallcabdefaultypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_WallCabSideLen;
        break;
      }

      // required double WallCabSideLen = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_WallCabSideLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wallcabsidelen_)));
          set_has_wallcabsidelen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_ToekickFrontLen;
        break;
      }

      // required double ToekickFrontLen = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ToekickFrontLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toekickfrontlen_)));
          set_has_toekickfrontlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_DefaultBarHeight;
        break;
      }

      // required double DefaultBarHeight = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultBarHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultbarheight_)));
          set_has_defaultbarheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_DefaultSealExtraLen;
        break;
      }

      // required double DefaultSealExtraLen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultSealExtraLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultsealextralen_)));
          set_has_defaultsealextralen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_DefaultSealPreMillLen;
        break;
      }

      // required double DefaultSealPreMillLen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultSealPreMillLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultsealpremilllen_)));
          set_has_defaultsealpremilllen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_ShelfDefaultYPos;
        break;
      }

      // required double ShelfDefaultYPos = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShelfDefaultYPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shelfdefaultypos_)));
          set_has_shelfdefaultypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_BGPanelDefaultYPos;
        break;
      }

      // required double BGPanelDefaultYPos = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BGPanelDefaultYPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bgpaneldefaultypos_)));
          set_has_bgpaneldefaultypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_TableToCabDefaultYLen;
        break;
      }

      // required double TableToCabDefaultYLen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TableToCabDefaultYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tabletocabdefaultylen_)));
          set_has_tabletocabdefaultylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_DefaultBaseCabinetXLen;
        break;
      }

      // required double DefaultBaseCabinetXLen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultBaseCabinetXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultbasecabinetxlen_)));
          set_has_defaultbasecabinetxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_DefaultBaseCabinetYLen;
        break;
      }

      // required double DefaultBaseCabinetYLen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultBaseCabinetYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultbasecabinetylen_)));
          set_has_defaultbasecabinetylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_DefaultBaseCabinetZLen;
        break;
      }

      // required double DefaultBaseCabinetZLen = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultBaseCabinetZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultbasecabinetzlen_)));
          set_has_defaultbasecabinetzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_DefaultWallCabinetXLen;
        break;
      }

      // required double DefaultWallCabinetXLen = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultWallCabinetXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultwallcabinetxlen_)));
          set_has_defaultwallcabinetxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_DefaultWallCabinetYLen;
        break;
      }

      // required double DefaultWallCabinetYLen = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultWallCabinetYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultwallcabinetylen_)));
          set_has_defaultwallcabinetylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_DefaultWallCabinetZLen;
        break;
      }

      // required double DefaultWallCabinetZLen = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultWallCabinetZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultwallcabinetzlen_)));
          set_has_defaultwallcabinetzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_DefaultLCabinetXLen;
        break;
      }

      // required double DefaultLCabinetXLen = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultLCabinetXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultlcabinetxlen_)));
          set_has_defaultlcabinetxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_DefaultLCabinetZLen;
        break;
      }

      // required double DefaultLCabinetZLen = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultLCabinetZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultlcabinetzlen_)));
          set_has_defaultlcabinetzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_DefaultCabinetBoardThick;
        break;
      }

      // required double DefaultCabinetBoardThick = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultCabinetBoardThick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultcabinetboardthick_)));
          set_has_defaultcabinetboardthick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_DefaultDoorBoardThick;
        break;
      }

      // required double DefaultDoorBoardThick = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultDoorBoardThick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultdoorboardthick_)));
          set_has_defaultdoorboardthick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_DefaultThinBoardThick;
        break;
      }

      // required double DefaultThinBoardThick = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultThinBoardThick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultthinboardthick_)));
          set_has_defaultthinboardthick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_DefaultDecorLineHeight;
        break;
      }

      // required double DefaultDecorLineHeight = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultDecorLineHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultdecorlineheight_)));
          set_has_defaultdecorlineheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_DefaultDrawerXLen;
        break;
      }

      // required double DefaultDrawerXLen = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultDrawerXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultdrawerxlen_)));
          set_has_defaultdrawerxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_DefaultDrawerYLen;
        break;
      }

      // required double DefaultDrawerYLen = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultDrawerYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultdrawerylen_)));
          set_has_defaultdrawerylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_DefaultDrawerZLen;
        break;
      }

      // required double DefaultDrawerZLen = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DefaultDrawerZLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defaultdrawerzlen_)));
          set_has_defaultdrawerzlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_SysConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FactoryID = 1;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->factoryid(), output);
  }

  // required int64 VerCode = 2;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->vercode(), output);
  }

  // required int32 ConfigID = 3;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->configid(), output);
  }

  // required double TableFrontLen = 4;
  if (has_tablefrontlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tablefrontlen(), output);
  }

  // required double TableSideLen = 5;
  if (has_tablesidelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->tablesidelen(), output);
  }

  // required double BaseCabDefaultYPos = 6;
  if (has_basecabdefaultypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->basecabdefaultypos(), output);
  }

  // required double BaseCabSideLen = 7;
  if (has_basecabsidelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->basecabsidelen(), output);
  }

  // required double WallCabDefaultYPos = 8;
  if (has_wallcabdefaultypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->wallcabdefaultypos(), output);
  }

  // required double WallCabSideLen = 9;
  if (has_wallcabsidelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->wallcabsidelen(), output);
  }

  // required double ToekickFrontLen = 10;
  if (has_toekickfrontlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->toekickfrontlen(), output);
  }

  // required double DefaultBarHeight = 11;
  if (has_defaultbarheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->defaultbarheight(), output);
  }

  // required double DefaultSealExtraLen = 12;
  if (has_defaultsealextralen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->defaultsealextralen(), output);
  }

  // required double DefaultSealPreMillLen = 13;
  if (has_defaultsealpremilllen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->defaultsealpremilllen(), output);
  }

  // required double ShelfDefaultYPos = 14;
  if (has_shelfdefaultypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->shelfdefaultypos(), output);
  }

  // required double BGPanelDefaultYPos = 15;
  if (has_bgpaneldefaultypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->bgpaneldefaultypos(), output);
  }

  // required double TableToCabDefaultYLen = 16;
  if (has_tabletocabdefaultylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->tabletocabdefaultylen(), output);
  }

  // required double DefaultBaseCabinetXLen = 17;
  if (has_defaultbasecabinetxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->defaultbasecabinetxlen(), output);
  }

  // required double DefaultBaseCabinetYLen = 18;
  if (has_defaultbasecabinetylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->defaultbasecabinetylen(), output);
  }

  // required double DefaultBaseCabinetZLen = 19;
  if (has_defaultbasecabinetzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->defaultbasecabinetzlen(), output);
  }

  // required double DefaultWallCabinetXLen = 20;
  if (has_defaultwallcabinetxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->defaultwallcabinetxlen(), output);
  }

  // required double DefaultWallCabinetYLen = 21;
  if (has_defaultwallcabinetylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->defaultwallcabinetylen(), output);
  }

  // required double DefaultWallCabinetZLen = 22;
  if (has_defaultwallcabinetzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->defaultwallcabinetzlen(), output);
  }

  // required double DefaultLCabinetXLen = 23;
  if (has_defaultlcabinetxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->defaultlcabinetxlen(), output);
  }

  // required double DefaultLCabinetZLen = 24;
  if (has_defaultlcabinetzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->defaultlcabinetzlen(), output);
  }

  // required double DefaultCabinetBoardThick = 25;
  if (has_defaultcabinetboardthick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->defaultcabinetboardthick(), output);
  }

  // required double DefaultDoorBoardThick = 26;
  if (has_defaultdoorboardthick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->defaultdoorboardthick(), output);
  }

  // required double DefaultThinBoardThick = 27;
  if (has_defaultthinboardthick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->defaultthinboardthick(), output);
  }

  // required double DefaultDecorLineHeight = 28;
  if (has_defaultdecorlineheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->defaultdecorlineheight(), output);
  }

  // required double DefaultDrawerXLen = 29;
  if (has_defaultdrawerxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->defaultdrawerxlen(), output);
  }

  // required double DefaultDrawerYLen = 30;
  if (has_defaultdrawerylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->defaultdrawerylen(), output);
  }

  // required double DefaultDrawerZLen = 31;
  if (has_defaultdrawerzlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->defaultdrawerzlen(), output);
  }

  // required int32 CreatorID = 32;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->creatorid(), output);
  }

  // required int32 UpdaterID = 33;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->updaterid(), output);
  }

  // required int64 CreateTime = 34;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->createtime(), output);
  }

  // required int64 UpdateTime = 35;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_SysConfigInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FactoryID = 1;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->factoryid(), target);
  }

  // required int64 VerCode = 2;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->vercode(), target);
  }

  // required int32 ConfigID = 3;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->configid(), target);
  }

  // required double TableFrontLen = 4;
  if (has_tablefrontlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tablefrontlen(), target);
  }

  // required double TableSideLen = 5;
  if (has_tablesidelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->tablesidelen(), target);
  }

  // required double BaseCabDefaultYPos = 6;
  if (has_basecabdefaultypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->basecabdefaultypos(), target);
  }

  // required double BaseCabSideLen = 7;
  if (has_basecabsidelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->basecabsidelen(), target);
  }

  // required double WallCabDefaultYPos = 8;
  if (has_wallcabdefaultypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->wallcabdefaultypos(), target);
  }

  // required double WallCabSideLen = 9;
  if (has_wallcabsidelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->wallcabsidelen(), target);
  }

  // required double ToekickFrontLen = 10;
  if (has_toekickfrontlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->toekickfrontlen(), target);
  }

  // required double DefaultBarHeight = 11;
  if (has_defaultbarheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->defaultbarheight(), target);
  }

  // required double DefaultSealExtraLen = 12;
  if (has_defaultsealextralen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->defaultsealextralen(), target);
  }

  // required double DefaultSealPreMillLen = 13;
  if (has_defaultsealpremilllen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->defaultsealpremilllen(), target);
  }

  // required double ShelfDefaultYPos = 14;
  if (has_shelfdefaultypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->shelfdefaultypos(), target);
  }

  // required double BGPanelDefaultYPos = 15;
  if (has_bgpaneldefaultypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->bgpaneldefaultypos(), target);
  }

  // required double TableToCabDefaultYLen = 16;
  if (has_tabletocabdefaultylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->tabletocabdefaultylen(), target);
  }

  // required double DefaultBaseCabinetXLen = 17;
  if (has_defaultbasecabinetxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->defaultbasecabinetxlen(), target);
  }

  // required double DefaultBaseCabinetYLen = 18;
  if (has_defaultbasecabinetylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->defaultbasecabinetylen(), target);
  }

  // required double DefaultBaseCabinetZLen = 19;
  if (has_defaultbasecabinetzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->defaultbasecabinetzlen(), target);
  }

  // required double DefaultWallCabinetXLen = 20;
  if (has_defaultwallcabinetxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->defaultwallcabinetxlen(), target);
  }

  // required double DefaultWallCabinetYLen = 21;
  if (has_defaultwallcabinetylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->defaultwallcabinetylen(), target);
  }

  // required double DefaultWallCabinetZLen = 22;
  if (has_defaultwallcabinetzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->defaultwallcabinetzlen(), target);
  }

  // required double DefaultLCabinetXLen = 23;
  if (has_defaultlcabinetxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->defaultlcabinetxlen(), target);
  }

  // required double DefaultLCabinetZLen = 24;
  if (has_defaultlcabinetzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->defaultlcabinetzlen(), target);
  }

  // required double DefaultCabinetBoardThick = 25;
  if (has_defaultcabinetboardthick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->defaultcabinetboardthick(), target);
  }

  // required double DefaultDoorBoardThick = 26;
  if (has_defaultdoorboardthick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->defaultdoorboardthick(), target);
  }

  // required double DefaultThinBoardThick = 27;
  if (has_defaultthinboardthick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->defaultthinboardthick(), target);
  }

  // required double DefaultDecorLineHeight = 28;
  if (has_defaultdecorlineheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->defaultdecorlineheight(), target);
  }

  // required double DefaultDrawerXLen = 29;
  if (has_defaultdrawerxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->defaultdrawerxlen(), target);
  }

  // required double DefaultDrawerYLen = 30;
  if (has_defaultdrawerylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->defaultdrawerylen(), target);
  }

  // required double DefaultDrawerZLen = 31;
  if (has_defaultdrawerzlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->defaultdrawerzlen(), target);
  }

  // required int32 CreatorID = 32;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->creatorid(), target);
  }

  // required int32 UpdaterID = 33;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->updaterid(), target);
  }

  // required int64 CreateTime = 34;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->createtime(), target);
  }

  // required int64 UpdateTime = 35;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_SysConfigInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FactoryID = 1;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 2;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 ConfigID = 3;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // required double TableFrontLen = 4;
    if (has_tablefrontlen()) {
      total_size += 1 + 8;
    }

    // required double TableSideLen = 5;
    if (has_tablesidelen()) {
      total_size += 1 + 8;
    }

    // required double BaseCabDefaultYPos = 6;
    if (has_basecabdefaultypos()) {
      total_size += 1 + 8;
    }

    // required double BaseCabSideLen = 7;
    if (has_basecabsidelen()) {
      total_size += 1 + 8;
    }

    // required double WallCabDefaultYPos = 8;
    if (has_wallcabdefaultypos()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double WallCabSideLen = 9;
    if (has_wallcabsidelen()) {
      total_size += 1 + 8;
    }

    // required double ToekickFrontLen = 10;
    if (has_toekickfrontlen()) {
      total_size += 1 + 8;
    }

    // required double DefaultBarHeight = 11;
    if (has_defaultbarheight()) {
      total_size += 1 + 8;
    }

    // required double DefaultSealExtraLen = 12;
    if (has_defaultsealextralen()) {
      total_size += 1 + 8;
    }

    // required double DefaultSealPreMillLen = 13;
    if (has_defaultsealpremilllen()) {
      total_size += 1 + 8;
    }

    // required double ShelfDefaultYPos = 14;
    if (has_shelfdefaultypos()) {
      total_size += 1 + 8;
    }

    // required double BGPanelDefaultYPos = 15;
    if (has_bgpaneldefaultypos()) {
      total_size += 1 + 8;
    }

    // required double TableToCabDefaultYLen = 16;
    if (has_tabletocabdefaultylen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double DefaultBaseCabinetXLen = 17;
    if (has_defaultbasecabinetxlen()) {
      total_size += 2 + 8;
    }

    // required double DefaultBaseCabinetYLen = 18;
    if (has_defaultbasecabinetylen()) {
      total_size += 2 + 8;
    }

    // required double DefaultBaseCabinetZLen = 19;
    if (has_defaultbasecabinetzlen()) {
      total_size += 2 + 8;
    }

    // required double DefaultWallCabinetXLen = 20;
    if (has_defaultwallcabinetxlen()) {
      total_size += 2 + 8;
    }

    // required double DefaultWallCabinetYLen = 21;
    if (has_defaultwallcabinetylen()) {
      total_size += 2 + 8;
    }

    // required double DefaultWallCabinetZLen = 22;
    if (has_defaultwallcabinetzlen()) {
      total_size += 2 + 8;
    }

    // required double DefaultLCabinetXLen = 23;
    if (has_defaultlcabinetxlen()) {
      total_size += 2 + 8;
    }

    // required double DefaultLCabinetZLen = 24;
    if (has_defaultlcabinetzlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double DefaultCabinetBoardThick = 25;
    if (has_defaultcabinetboardthick()) {
      total_size += 2 + 8;
    }

    // required double DefaultDoorBoardThick = 26;
    if (has_defaultdoorboardthick()) {
      total_size += 2 + 8;
    }

    // required double DefaultThinBoardThick = 27;
    if (has_defaultthinboardthick()) {
      total_size += 2 + 8;
    }

    // required double DefaultDecorLineHeight = 28;
    if (has_defaultdecorlineheight()) {
      total_size += 2 + 8;
    }

    // required double DefaultDrawerXLen = 29;
    if (has_defaultdrawerxlen()) {
      total_size += 2 + 8;
    }

    // required double DefaultDrawerYLen = 30;
    if (has_defaultdrawerylen()) {
      total_size += 2 + 8;
    }

    // required double DefaultDrawerZLen = 31;
    if (has_defaultdrawerzlen()) {
      total_size += 2 + 8;
    }

    // required int32 CreatorID = 32;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int32 UpdaterID = 33;
    if (has_updaterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 34;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 35;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_SysConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_SysConfigInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_SysConfigInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_SysConfigInfo::MergeFrom(const JK_SysConfigInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_tablefrontlen()) {
      set_tablefrontlen(from.tablefrontlen());
    }
    if (from.has_tablesidelen()) {
      set_tablesidelen(from.tablesidelen());
    }
    if (from.has_basecabdefaultypos()) {
      set_basecabdefaultypos(from.basecabdefaultypos());
    }
    if (from.has_basecabsidelen()) {
      set_basecabsidelen(from.basecabsidelen());
    }
    if (from.has_wallcabdefaultypos()) {
      set_wallcabdefaultypos(from.wallcabdefaultypos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wallcabsidelen()) {
      set_wallcabsidelen(from.wallcabsidelen());
    }
    if (from.has_toekickfrontlen()) {
      set_toekickfrontlen(from.toekickfrontlen());
    }
    if (from.has_defaultbarheight()) {
      set_defaultbarheight(from.defaultbarheight());
    }
    if (from.has_defaultsealextralen()) {
      set_defaultsealextralen(from.defaultsealextralen());
    }
    if (from.has_defaultsealpremilllen()) {
      set_defaultsealpremilllen(from.defaultsealpremilllen());
    }
    if (from.has_shelfdefaultypos()) {
      set_shelfdefaultypos(from.shelfdefaultypos());
    }
    if (from.has_bgpaneldefaultypos()) {
      set_bgpaneldefaultypos(from.bgpaneldefaultypos());
    }
    if (from.has_tabletocabdefaultylen()) {
      set_tabletocabdefaultylen(from.tabletocabdefaultylen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_defaultbasecabinetxlen()) {
      set_defaultbasecabinetxlen(from.defaultbasecabinetxlen());
    }
    if (from.has_defaultbasecabinetylen()) {
      set_defaultbasecabinetylen(from.defaultbasecabinetylen());
    }
    if (from.has_defaultbasecabinetzlen()) {
      set_defaultbasecabinetzlen(from.defaultbasecabinetzlen());
    }
    if (from.has_defaultwallcabinetxlen()) {
      set_defaultwallcabinetxlen(from.defaultwallcabinetxlen());
    }
    if (from.has_defaultwallcabinetylen()) {
      set_defaultwallcabinetylen(from.defaultwallcabinetylen());
    }
    if (from.has_defaultwallcabinetzlen()) {
      set_defaultwallcabinetzlen(from.defaultwallcabinetzlen());
    }
    if (from.has_defaultlcabinetxlen()) {
      set_defaultlcabinetxlen(from.defaultlcabinetxlen());
    }
    if (from.has_defaultlcabinetzlen()) {
      set_defaultlcabinetzlen(from.defaultlcabinetzlen());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_defaultcabinetboardthick()) {
      set_defaultcabinetboardthick(from.defaultcabinetboardthick());
    }
    if (from.has_defaultdoorboardthick()) {
      set_defaultdoorboardthick(from.defaultdoorboardthick());
    }
    if (from.has_defaultthinboardthick()) {
      set_defaultthinboardthick(from.defaultthinboardthick());
    }
    if (from.has_defaultdecorlineheight()) {
      set_defaultdecorlineheight(from.defaultdecorlineheight());
    }
    if (from.has_defaultdrawerxlen()) {
      set_defaultdrawerxlen(from.defaultdrawerxlen());
    }
    if (from.has_defaultdrawerylen()) {
      set_defaultdrawerylen(from.defaultdrawerylen());
    }
    if (from.has_defaultdrawerzlen()) {
      set_defaultdrawerzlen(from.defaultdrawerzlen());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_SysConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_SysConfigInfo::CopyFrom(const JK_SysConfigInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_SysConfigInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00000007) != 0x00000007) return false;

  return true;
}

void JK_SysConfigInfo::Swap(JK_SysConfigInfo* other) {
  if (other != this) {
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(configid_, other->configid_);
    std::swap(tablefrontlen_, other->tablefrontlen_);
    std::swap(tablesidelen_, other->tablesidelen_);
    std::swap(basecabdefaultypos_, other->basecabdefaultypos_);
    std::swap(basecabsidelen_, other->basecabsidelen_);
    std::swap(wallcabdefaultypos_, other->wallcabdefaultypos_);
    std::swap(wallcabsidelen_, other->wallcabsidelen_);
    std::swap(toekickfrontlen_, other->toekickfrontlen_);
    std::swap(defaultbarheight_, other->defaultbarheight_);
    std::swap(defaultsealextralen_, other->defaultsealextralen_);
    std::swap(defaultsealpremilllen_, other->defaultsealpremilllen_);
    std::swap(shelfdefaultypos_, other->shelfdefaultypos_);
    std::swap(bgpaneldefaultypos_, other->bgpaneldefaultypos_);
    std::swap(tabletocabdefaultylen_, other->tabletocabdefaultylen_);
    std::swap(defaultbasecabinetxlen_, other->defaultbasecabinetxlen_);
    std::swap(defaultbasecabinetylen_, other->defaultbasecabinetylen_);
    std::swap(defaultbasecabinetzlen_, other->defaultbasecabinetzlen_);
    std::swap(defaultwallcabinetxlen_, other->defaultwallcabinetxlen_);
    std::swap(defaultwallcabinetylen_, other->defaultwallcabinetylen_);
    std::swap(defaultwallcabinetzlen_, other->defaultwallcabinetzlen_);
    std::swap(defaultlcabinetxlen_, other->defaultlcabinetxlen_);
    std::swap(defaultlcabinetzlen_, other->defaultlcabinetzlen_);
    std::swap(defaultcabinetboardthick_, other->defaultcabinetboardthick_);
    std::swap(defaultdoorboardthick_, other->defaultdoorboardthick_);
    std::swap(defaultthinboardthick_, other->defaultthinboardthick_);
    std::swap(defaultdecorlineheight_, other->defaultdecorlineheight_);
    std::swap(defaultdrawerxlen_, other->defaultdrawerxlen_);
    std::swap(defaultdrawerylen_, other->defaultdrawerylen_);
    std::swap(defaultdrawerzlen_, other->defaultdrawerzlen_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_SysConfigInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_SysConfigInfo_descriptor_;
  metadata.reflection = JK_SysConfigInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_SysRuleConfigInfo::kFactoryIDFieldNumber;
const int JK_SysRuleConfigInfo::kVerCodeFieldNumber;
const int JK_SysRuleConfigInfo::kIsDelFieldNumber;
const int JK_SysRuleConfigInfo::kRuleConfigIDFieldNumber;
const int JK_SysRuleConfigInfo::kRuleTypeIDFieldNumber;
const int JK_SysRuleConfigInfo::kCabTypeFieldNumber;
const int JK_SysRuleConfigInfo::kMinXLenFieldNumber;
const int JK_SysRuleConfigInfo::kMinYLenFieldNumber;
const int JK_SysRuleConfigInfo::kMaxXLenFieldNumber;
const int JK_SysRuleConfigInfo::kMaxYLenFieldNumber;
const int JK_SysRuleConfigInfo::kUseCountFieldNumber;
const int JK_SysRuleConfigInfo::kCreatorIDFieldNumber;
const int JK_SysRuleConfigInfo::kUpdaterIDFieldNumber;
const int JK_SysRuleConfigInfo::kCreateTimeFieldNumber;
const int JK_SysRuleConfigInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_SysRuleConfigInfo::JK_SysRuleConfigInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_SysRuleConfigInfo::InitAsDefaultInstance() {
}

JK_SysRuleConfigInfo::JK_SysRuleConfigInfo(const JK_SysRuleConfigInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_SysRuleConfigInfo::SharedCtor() {
  _cached_size_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  isdel_ = false;
  ruleconfigid_ = 0;
  ruletypeid_ = 0;
  cabtype_ = 0;
  minxlen_ = 0;
  minylen_ = 0;
  maxxlen_ = 0;
  maxylen_ = 0;
  usecount_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_SysRuleConfigInfo::~JK_SysRuleConfigInfo() {
  SharedDtor();
}

void JK_SysRuleConfigInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_SysRuleConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_SysRuleConfigInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_SysRuleConfigInfo_descriptor_;
}

const JK_SysRuleConfigInfo& JK_SysRuleConfigInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_SysRuleConfigInfo* JK_SysRuleConfigInfo::default_instance_ = NULL;

JK_SysRuleConfigInfo* JK_SysRuleConfigInfo::New() const {
  return new JK_SysRuleConfigInfo;
}

void JK_SysRuleConfigInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    isdel_ = false;
    ruleconfigid_ = 0;
    ruletypeid_ = 0;
    cabtype_ = 0;
    minxlen_ = 0;
    minylen_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxxlen_ = 0;
    maxylen_ = 0;
    usecount_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_SysRuleConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FactoryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RuleConfigID;
        break;
      }

      // required int32 RuleConfigID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RuleConfigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ruleconfigid_)));
          set_has_ruleconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RuleTypeID;
        break;
      }

      // required int32 RuleTypeID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RuleTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ruletypeid_)));
          set_has_ruletypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CabType;
        break;
      }

      // required int32 CabType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabtype_)));
          set_has_cabtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_MinXLen;
        break;
      }

      // required double MinXLen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minxlen_)));
          set_has_minxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_MinYLen;
        break;
      }

      // required double MinYLen = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MinYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minylen_)));
          set_has_minylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_MaxXLen;
        break;
      }

      // required double MaxXLen = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxXLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxxlen_)));
          set_has_maxxlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_MaxYLen;
        break;
      }

      // required double MaxYLen = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MaxYLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxylen_)));
          set_has_maxylen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UseCount;
        break;
      }

      // required int32 UseCount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usecount_)));
          set_has_usecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_SysRuleConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FactoryID = 1;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->factoryid(), output);
  }

  // required int64 VerCode = 2;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->vercode(), output);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // required int32 RuleConfigID = 4;
  if (has_ruleconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ruleconfigid(), output);
  }

  // required int32 RuleTypeID = 5;
  if (has_ruletypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ruletypeid(), output);
  }

  // required int32 CabType = 6;
  if (has_cabtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cabtype(), output);
  }

  // required double MinXLen = 7;
  if (has_minxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->minxlen(), output);
  }

  // required double MinYLen = 8;
  if (has_minylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->minylen(), output);
  }

  // required double MaxXLen = 9;
  if (has_maxxlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->maxxlen(), output);
  }

  // required double MaxYLen = 10;
  if (has_maxylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->maxylen(), output);
  }

  // required int32 UseCount = 11;
  if (has_usecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->usecount(), output);
  }

  // required int32 CreatorID = 12;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->creatorid(), output);
  }

  // required int32 UpdaterID = 13;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->updaterid(), output);
  }

  // required int64 CreateTime = 14;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->createtime(), output);
  }

  // required int64 UpdateTime = 15;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_SysRuleConfigInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FactoryID = 1;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->factoryid(), target);
  }

  // required int64 VerCode = 2;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->vercode(), target);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // required int32 RuleConfigID = 4;
  if (has_ruleconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ruleconfigid(), target);
  }

  // required int32 RuleTypeID = 5;
  if (has_ruletypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ruletypeid(), target);
  }

  // required int32 CabType = 6;
  if (has_cabtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cabtype(), target);
  }

  // required double MinXLen = 7;
  if (has_minxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->minxlen(), target);
  }

  // required double MinYLen = 8;
  if (has_minylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->minylen(), target);
  }

  // required double MaxXLen = 9;
  if (has_maxxlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->maxxlen(), target);
  }

  // required double MaxYLen = 10;
  if (has_maxylen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->maxylen(), target);
  }

  // required int32 UseCount = 11;
  if (has_usecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->usecount(), target);
  }

  // required int32 CreatorID = 12;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->creatorid(), target);
  }

  // required int32 UpdaterID = 13;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->updaterid(), target);
  }

  // required int64 CreateTime = 14;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->createtime(), target);
  }

  // required int64 UpdateTime = 15;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_SysRuleConfigInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FactoryID = 1;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 2;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required bool IsDel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int32 RuleConfigID = 4;
    if (has_ruleconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ruleconfigid());
    }

    // required int32 RuleTypeID = 5;
    if (has_ruletypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ruletypeid());
    }

    // required int32 CabType = 6;
    if (has_cabtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabtype());
    }

    // required double MinXLen = 7;
    if (has_minxlen()) {
      total_size += 1 + 8;
    }

    // required double MinYLen = 8;
    if (has_minylen()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double MaxXLen = 9;
    if (has_maxxlen()) {
      total_size += 1 + 8;
    }

    // required double MaxYLen = 10;
    if (has_maxylen()) {
      total_size += 1 + 8;
    }

    // required int32 UseCount = 11;
    if (has_usecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usecount());
    }

    // required int32 CreatorID = 12;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 13;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 14;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 15;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_SysRuleConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_SysRuleConfigInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_SysRuleConfigInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_SysRuleConfigInfo::MergeFrom(const JK_SysRuleConfigInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_ruleconfigid()) {
      set_ruleconfigid(from.ruleconfigid());
    }
    if (from.has_ruletypeid()) {
      set_ruletypeid(from.ruletypeid());
    }
    if (from.has_cabtype()) {
      set_cabtype(from.cabtype());
    }
    if (from.has_minxlen()) {
      set_minxlen(from.minxlen());
    }
    if (from.has_minylen()) {
      set_minylen(from.minylen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxxlen()) {
      set_maxxlen(from.maxxlen());
    }
    if (from.has_maxylen()) {
      set_maxylen(from.maxylen());
    }
    if (from.has_usecount()) {
      set_usecount(from.usecount());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_SysRuleConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_SysRuleConfigInfo::CopyFrom(const JK_SysRuleConfigInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_SysRuleConfigInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void JK_SysRuleConfigInfo::Swap(JK_SysRuleConfigInfo* other) {
  if (other != this) {
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(isdel_, other->isdel_);
    std::swap(ruleconfigid_, other->ruleconfigid_);
    std::swap(ruletypeid_, other->ruletypeid_);
    std::swap(cabtype_, other->cabtype_);
    std::swap(minxlen_, other->minxlen_);
    std::swap(minylen_, other->minylen_);
    std::swap(maxxlen_, other->maxxlen_);
    std::swap(maxylen_, other->maxylen_);
    std::swap(usecount_, other->usecount_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_SysRuleConfigInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_SysRuleConfigInfo_descriptor_;
  metadata.reflection = JK_SysRuleConfigInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_SysRuleTypeInfo::kFactoryIDFieldNumber;
const int JK_SysRuleTypeInfo::kVerCodeFieldNumber;
const int JK_SysRuleTypeInfo::kRuleTypeIDFieldNumber;
const int JK_SysRuleTypeInfo::kIsDelFieldNumber;
const int JK_SysRuleTypeInfo::kRuleTypeNameFieldNumber;
const int JK_SysRuleTypeInfo::kIsDefaultFieldNumber;
const int JK_SysRuleTypeInfo::kRTypeFieldNumber;
const int JK_SysRuleTypeInfo::kCreatorIDFieldNumber;
const int JK_SysRuleTypeInfo::kUpdaterIDFieldNumber;
const int JK_SysRuleTypeInfo::kCreateTimeFieldNumber;
const int JK_SysRuleTypeInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_SysRuleTypeInfo::JK_SysRuleTypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_SysRuleTypeInfo::InitAsDefaultInstance() {
}

JK_SysRuleTypeInfo::JK_SysRuleTypeInfo(const JK_SysRuleTypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_SysRuleTypeInfo::SharedCtor() {
  _cached_size_ = 0;
  factoryid_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  ruletypeid_ = 0;
  isdel_ = false;
  ruletypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isdefault_ = false;
  rtype_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_SysRuleTypeInfo::~JK_SysRuleTypeInfo() {
  SharedDtor();
}

void JK_SysRuleTypeInfo::SharedDtor() {
  if (ruletypename_ != &::google::protobuf::internal::kEmptyString) {
    delete ruletypename_;
  }
  if (this != default_instance_) {
  }
}

void JK_SysRuleTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_SysRuleTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_SysRuleTypeInfo_descriptor_;
}

const JK_SysRuleTypeInfo& JK_SysRuleTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_SysRuleTypeInfo* JK_SysRuleTypeInfo::default_instance_ = NULL;

JK_SysRuleTypeInfo* JK_SysRuleTypeInfo::New() const {
  return new JK_SysRuleTypeInfo;
}

void JK_SysRuleTypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factoryid_ = 0;
    vercode_ = GOOGLE_LONGLONG(0);
    ruletypeid_ = 0;
    isdel_ = false;
    if (has_ruletypename()) {
      if (ruletypename_ != &::google::protobuf::internal::kEmptyString) {
        ruletypename_->clear();
      }
    }
    isdefault_ = false;
    rtype_ = 0;
    creatorid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_SysRuleTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FactoryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RuleTypeID;
        break;
      }

      // required int32 RuleTypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RuleTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ruletypeid_)));
          set_has_ruletypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_RuleTypeName;
        break;
      }

      // required string RuleTypeName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RuleTypeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ruletypename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ruletypename().data(), this->ruletypename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_RType;
        break;
      }

      // required int32 RType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtype_)));
          set_has_rtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_SysRuleTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FactoryID = 1;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->factoryid(), output);
  }

  // required int64 VerCode = 2;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->vercode(), output);
  }

  // required int32 RuleTypeID = 3;
  if (has_ruletypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ruletypeid(), output);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdel(), output);
  }

  // required string RuleTypeName = 5;
  if (has_ruletypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ruletypename().data(), this->ruletypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ruletypename(), output);
  }

  // required bool IsDefault = 6;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isdefault(), output);
  }

  // required int32 RType = 7;
  if (has_rtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rtype(), output);
  }

  // required int32 CreatorID = 8;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->creatorid(), output);
  }

  // required int32 UpdaterID = 9;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->updaterid(), output);
  }

  // required int64 CreateTime = 10;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->createtime(), output);
  }

  // required int64 UpdateTime = 11;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_SysRuleTypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FactoryID = 1;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->factoryid(), target);
  }

  // required int64 VerCode = 2;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->vercode(), target);
  }

  // required int32 RuleTypeID = 3;
  if (has_ruletypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ruletypeid(), target);
  }

  // required bool IsDel = 4;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdel(), target);
  }

  // required string RuleTypeName = 5;
  if (has_ruletypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ruletypename().data(), this->ruletypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ruletypename(), target);
  }

  // required bool IsDefault = 6;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isdefault(), target);
  }

  // required int32 RType = 7;
  if (has_rtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rtype(), target);
  }

  // required int32 CreatorID = 8;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->creatorid(), target);
  }

  // required int32 UpdaterID = 9;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->updaterid(), target);
  }

  // required int64 CreateTime = 10;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->createtime(), target);
  }

  // required int64 UpdateTime = 11;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_SysRuleTypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FactoryID = 1;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int64 VerCode = 2;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 RuleTypeID = 3;
    if (has_ruletypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ruletypeid());
    }

    // required bool IsDel = 4;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required string RuleTypeName = 5;
    if (has_ruletypename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ruletypename());
    }

    // required bool IsDefault = 6;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

    // required int32 RType = 7;
    if (has_rtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtype());
    }

    // required int32 CreatorID = 8;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 UpdaterID = 9;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 10;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 11;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_SysRuleTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_SysRuleTypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_SysRuleTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_SysRuleTypeInfo::MergeFrom(const JK_SysRuleTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_ruletypeid()) {
      set_ruletypeid(from.ruletypeid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_ruletypename()) {
      set_ruletypename(from.ruletypename());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
    if (from.has_rtype()) {
      set_rtype(from.rtype());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_SysRuleTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_SysRuleTypeInfo::CopyFrom(const JK_SysRuleTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_SysRuleTypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void JK_SysRuleTypeInfo::Swap(JK_SysRuleTypeInfo* other) {
  if (other != this) {
    std::swap(factoryid_, other->factoryid_);
    std::swap(vercode_, other->vercode_);
    std::swap(ruletypeid_, other->ruletypeid_);
    std::swap(isdel_, other->isdel_);
    std::swap(ruletypename_, other->ruletypename_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(rtype_, other->rtype_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_SysRuleTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_SysRuleTypeInfo_descriptor_;
  metadata.reflection = JK_SysRuleTypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_TableTopSideInfo::kTableTopSideIDFieldNumber;
const int JK_TableTopSideInfo::kTableTopIDFieldNumber;
const int JK_TableTopSideInfo::kIsDelFieldNumber;
const int JK_TableTopSideInfo::kModelIDFieldNumber;
const int JK_TableTopSideInfo::kShowIDFieldNumber;
const int JK_TableTopSideInfo::kSideWidthFieldNumber;
const int JK_TableTopSideInfo::kMaterialIDFieldNumber;
const int JK_TableTopSideInfo::kIsDefaultFieldNumber;
const int JK_TableTopSideInfo::kVerCodeFieldNumber;
const int JK_TableTopSideInfo::kFactoryIDFieldNumber;
const int JK_TableTopSideInfo::kCreatorIDFieldNumber;
const int JK_TableTopSideInfo::kUpdaterIDFieldNumber;
const int JK_TableTopSideInfo::kCreateTimeFieldNumber;
const int JK_TableTopSideInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

JK_TableTopSideInfo::JK_TableTopSideInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_TableTopSideInfo::InitAsDefaultInstance() {
}

JK_TableTopSideInfo::JK_TableTopSideInfo(const JK_TableTopSideInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_TableTopSideInfo::SharedCtor() {
  _cached_size_ = 0;
  tabletopsideid_ = 0;
  tabletopid_ = 0;
  isdel_ = false;
  modelid_ = 0;
  showid_ = 0;
  sidewidth_ = 0;
  materialid_ = 0;
  isdefault_ = false;
  vercode_ = GOOGLE_LONGLONG(0);
  factoryid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_TableTopSideInfo::~JK_TableTopSideInfo() {
  SharedDtor();
}

void JK_TableTopSideInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_TableTopSideInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_TableTopSideInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_TableTopSideInfo_descriptor_;
}

const JK_TableTopSideInfo& JK_TableTopSideInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_TableTopSideInfo* JK_TableTopSideInfo::default_instance_ = NULL;

JK_TableTopSideInfo* JK_TableTopSideInfo::New() const {
  return new JK_TableTopSideInfo;
}

void JK_TableTopSideInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tabletopsideid_ = 0;
    tabletopid_ = 0;
    isdel_ = false;
    modelid_ = 0;
    showid_ = 0;
    sidewidth_ = 0;
    materialid_ = 0;
    isdefault_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    factoryid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_TableTopSideInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 TableTopSideID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletopsideid_)));
          set_has_tabletopsideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TableTopID;
        break;
      }

      // required int32 TableTopID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableTopID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletopid_)));
          set_has_tabletopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDel;
        break;
      }

      // required bool IsDel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ModelID;
        break;
      }

      // required int32 ModelID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ShowID;
        break;
      }

      // required int32 ShowID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_SideWidth;
        break;
      }

      // required double SideWidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SideWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sidewidth_)));
          set_has_sidewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_MaterialID;
        break;
      }

      // required int32 MaterialID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VerCode;
        break;
      }

      // required int64 VerCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_FactoryID;
        break;
      }

      // required int32 FactoryID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CreatorID;
        break;
      }

      // required int32 CreatorID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_UpdaterID;
        break;
      }

      // required int32 UpdaterID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CreateTime;
        break;
      }

      // required int64 CreateTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UpdateTime;
        break;
      }

      // required int64 UpdateTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_TableTopSideInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 TableTopSideID = 1;
  if (has_tabletopsideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tabletopsideid(), output);
  }

  // required int32 TableTopID = 2;
  if (has_tabletopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabletopid(), output);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // required int32 ModelID = 4;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->modelid(), output);
  }

  // required int32 ShowID = 5;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->showid(), output);
  }

  // required double SideWidth = 6;
  if (has_sidewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sidewidth(), output);
  }

  // required int32 MaterialID = 7;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->materialid(), output);
  }

  // required bool IsDefault = 8;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isdefault(), output);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vercode(), output);
  }

  // required int32 FactoryID = 10;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->factoryid(), output);
  }

  // required int32 CreatorID = 11;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->creatorid(), output);
  }

  // required int32 UpdaterID = 12;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->updaterid(), output);
  }

  // required int64 CreateTime = 13;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->createtime(), output);
  }

  // required int64 UpdateTime = 14;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_TableTopSideInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 TableTopSideID = 1;
  if (has_tabletopsideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tabletopsideid(), target);
  }

  // required int32 TableTopID = 2;
  if (has_tabletopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabletopid(), target);
  }

  // required bool IsDel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // required int32 ModelID = 4;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->modelid(), target);
  }

  // required int32 ShowID = 5;
  if (has_showid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->showid(), target);
  }

  // required double SideWidth = 6;
  if (has_sidewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sidewidth(), target);
  }

  // required int32 MaterialID = 7;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->materialid(), target);
  }

  // required bool IsDefault = 8;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isdefault(), target);
  }

  // required int64 VerCode = 9;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vercode(), target);
  }

  // required int32 FactoryID = 10;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->factoryid(), target);
  }

  // required int32 CreatorID = 11;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->creatorid(), target);
  }

  // required int32 UpdaterID = 12;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->updaterid(), target);
  }

  // required int64 CreateTime = 13;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->createtime(), target);
  }

  // required int64 UpdateTime = 14;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_TableTopSideInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 TableTopSideID = 1;
    if (has_tabletopsideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletopsideid());
    }

    // required int32 TableTopID = 2;
    if (has_tabletopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletopid());
    }

    // required bool IsDel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // required int32 ModelID = 4;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

    // required int32 ShowID = 5;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showid());
    }

    // required double SideWidth = 6;
    if (has_sidewidth()) {
      total_size += 1 + 8;
    }

    // required int32 MaterialID = 7;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialid());
    }

    // required bool IsDefault = 8;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 VerCode = 9;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // required int32 FactoryID = 10;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // required int32 CreatorID = 11;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // required int32 UpdaterID = 12;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // required int64 CreateTime = 13;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 UpdateTime = 14;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_TableTopSideInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_TableTopSideInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_TableTopSideInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_TableTopSideInfo::MergeFrom(const JK_TableTopSideInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tabletopsideid()) {
      set_tabletopsideid(from.tabletopsideid());
    }
    if (from.has_tabletopid()) {
      set_tabletopid(from.tabletopid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_sidewidth()) {
      set_sidewidth(from.sidewidth());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_TableTopSideInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_TableTopSideInfo::CopyFrom(const JK_TableTopSideInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_TableTopSideInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void JK_TableTopSideInfo::Swap(JK_TableTopSideInfo* other) {
  if (other != this) {
    std::swap(tabletopsideid_, other->tabletopsideid_);
    std::swap(tabletopid_, other->tabletopid_);
    std::swap(isdel_, other->isdel_);
    std::swap(modelid_, other->modelid_);
    std::swap(showid_, other->showid_);
    std::swap(sidewidth_, other->sidewidth_);
    std::swap(materialid_, other->materialid_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(vercode_, other->vercode_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_TableTopSideInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_TableTopSideInfo_descriptor_;
  metadata.reflection = JK_TableTopSideInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JK_Table::kJKCabBoardMatInfoFieldNumber;
const int JK_Table::kJKCabBoardMatSkinInfoFieldNumber;
const int JK_Table::kJKCabDesignBoardSealEdgeInfoFieldNumber;
const int JK_Table::kJKCabDesignBoardSealInfoFieldNumber;
const int JK_Table::kJKCabDesignDoorRegionHandleInfoFieldNumber;
const int JK_Table::kJKCabDesignDoorRegionInfoFieldNumber;
const int JK_Table::kJKCabDesignDoorSystemInfoFieldNumber;
const int JK_Table::kJKCabDesignFNFittingInfoFieldNumber;
const int JK_Table::kJKCabDesignFNFittingMapInfoFieldNumber;
const int JK_Table::kJKCabDesignFootInfoFieldNumber;
const int JK_Table::kJKCabDesignInfoFieldNumber;
const int JK_Table::kJKCabDesignMatInfoFieldNumber;
const int JK_Table::kJKCabMatPlanInfoFieldNumber;
const int JK_Table::kJKCabStructBoardGapInfoFieldNumber;
const int JK_Table::kJKCabStructBoardInfoFieldNumber;
const int JK_Table::kJKCabStructBoardSealInfoFieldNumber;
const int JK_Table::kJKCabStructGapInfoFieldNumber;
const int JK_Table::kJKCabStructInfoFieldNumber;
const int JK_Table::kJKCabStructMatPlanMapInfoFieldNumber;
const int JK_Table::kJKCabinetSizeBoardInfoFieldNumber;
const int JK_Table::kJKCabinetSizeInfoFieldNumber;
const int JK_Table::kJKCabinetSizeStructBoardInfoFieldNumber;
const int JK_Table::kJKDecorBoardFrameMapInfoFieldNumber;
const int JK_Table::kJKDecorBoardInfoFieldNumber;
const int JK_Table::kJKDecorBoardMatInfoFieldNumber;
const int JK_Table::kJKDecorBoardUnitInfoFieldNumber;
const int JK_Table::kJKDecorBoardUnitMatInfoFieldNumber;
const int JK_Table::kJKDecorBoardUnitSealInfoFieldNumber;
const int JK_Table::kJKDecorInfoFieldNumber;
const int JK_Table::kJKDecorLineInfoFieldNumber;
const int JK_Table::kJKDecorLineMatInfoFieldNumber;
const int JK_Table::kJKDecorUnitHWFittingMapInfoFieldNumber;
const int JK_Table::kJKDoorBoardGapInfoFieldNumber;
const int JK_Table::kJKDoorBoardInfoFieldNumber;
const int JK_Table::kJKDoorBoardMatMapInfoFieldNumber;
const int JK_Table::kJKDoorBoardSealInfoFieldNumber;
const int JK_Table::kJKDoorInfoFieldNumber;
const int JK_Table::kJKDoorMatMapInfoFieldNumber;
const int JK_Table::kJKDoorMatPlanHandleMapInfoFieldNumber;
const int JK_Table::kJKDoorMatPlanInfoFieldNumber;
const int JK_Table::kJKDoorRegionHWFittingMapInfoFieldNumber;
const int JK_Table::kJKDoorSystemInfoFieldNumber;
const int JK_Table::kJKDoorSystemMatMapInfoFieldNumber;
const int JK_Table::kJKDoorSystemRegionDoorMapInfoFieldNumber;
const int JK_Table::kJKDoorSystemRegionInfoFieldNumber;
const int JK_Table::kJKDoorSystemRegionSlideMapInfoFieldNumber;
const int JK_Table::kJKDoorSystemRegionSlidePositionSizeInfoFieldNumber;
const int JK_Table::kJKFNFittingInfoFieldNumber;
const int JK_Table::kJKFNFittingMatInfoFieldNumber;
const int JK_Table::kJKFNFittingPartInfoFieldNumber;
const int JK_Table::kJKFNFittingPartMatInfoFieldNumber;
const int JK_Table::kJKFNFittingPartSealInfoFieldNumber;
const int JK_Table::kJKFittingInfoFieldNumber;
const int JK_Table::kJKFittingRuleInfoFieldNumber;
const int JK_Table::kJKFormulaConstInfoFieldNumber;
const int JK_Table::kJKGroupInfoFieldNumber;
const int JK_Table::kJKHWFittingInfoFieldNumber;
const int JK_Table::kJKHoleRuleInfoFieldNumber;
const int JK_Table::kJKMaterialInfoFieldNumber;
const int JK_Table::kJKMaterialSealRuleMapInfoFieldNumber;
const int JK_Table::kJKModelInfoFieldNumber;
const int JK_Table::kJKNumberRuleInfoFieldNumber;
const int JK_Table::kJKPackageInfoFieldNumber;
const int JK_Table::kJKPackageMapInfoFieldNumber;
const int JK_Table::kJKProductInfoFieldNumber;
const int JK_Table::kJKProductSeriesInfoFieldNumber;
const int JK_Table::kJKProductSeriesValidInfoFieldNumber;
const int JK_Table::kJKResourceInfoFieldNumber;
const int JK_Table::kJKSealRuleInfoFieldNumber;
const int JK_Table::kJKSysConfigInfoFieldNumber;
const int JK_Table::kJKSysRuleConfigInfoFieldNumber;
const int JK_Table::kJKSysRuleTypeInfoFieldNumber;
const int JK_Table::kJKTableTopSideInfoFieldNumber;
#endif  // !_MSC_VER

JK_Table::JK_Table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JK_Table::InitAsDefaultInstance() {
}

JK_Table::JK_Table(const JK_Table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JK_Table::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JK_Table::~JK_Table() {
  SharedDtor();
}

void JK_Table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JK_Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JK_Table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JK_Table_descriptor_;
}

const JK_Table& JK_Table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dJK_2eproto();
  return *default_instance_;
}

JK_Table* JK_Table::default_instance_ = NULL;

JK_Table* JK_Table::New() const {
  return new JK_Table;
}

void JK_Table::Clear() {
  jk_cabboardmatinfo_.Clear();
  jk_cabboardmatskininfo_.Clear();
  jk_cabdesignboardsealedgeinfo_.Clear();
  jk_cabdesignboardsealinfo_.Clear();
  jk_cabdesigndoorregionhandleinfo_.Clear();
  jk_cabdesigndoorregioninfo_.Clear();
  jk_cabdesigndoorsysteminfo_.Clear();
  jk_cabdesignfnfittinginfo_.Clear();
  jk_cabdesignfnfittingmapinfo_.Clear();
  jk_cabdesignfootinfo_.Clear();
  jk_cabdesigninfo_.Clear();
  jk_cabdesignmatinfo_.Clear();
  jk_cabmatplaninfo_.Clear();
  jk_cabstructboardgapinfo_.Clear();
  jk_cabstructboardinfo_.Clear();
  jk_cabstructboardsealinfo_.Clear();
  jk_cabstructgapinfo_.Clear();
  jk_cabstructinfo_.Clear();
  jk_cabstructmatplanmapinfo_.Clear();
  jk_cabinetsizeboardinfo_.Clear();
  jk_cabinetsizeinfo_.Clear();
  jk_cabinetsizestructboardinfo_.Clear();
  jk_decorboardframemapinfo_.Clear();
  jk_decorboardinfo_.Clear();
  jk_decorboardmatinfo_.Clear();
  jk_decorboardunitinfo_.Clear();
  jk_decorboardunitmatinfo_.Clear();
  jk_decorboardunitsealinfo_.Clear();
  jk_decorinfo_.Clear();
  jk_decorlineinfo_.Clear();
  jk_decorlinematinfo_.Clear();
  jk_decorunithwfittingmapinfo_.Clear();
  jk_doorboardgapinfo_.Clear();
  jk_doorboardinfo_.Clear();
  jk_doorboardmatmapinfo_.Clear();
  jk_doorboardsealinfo_.Clear();
  jk_doorinfo_.Clear();
  jk_doormatmapinfo_.Clear();
  jk_doormatplanhandlemapinfo_.Clear();
  jk_doormatplaninfo_.Clear();
  jk_doorregionhwfittingmapinfo_.Clear();
  jk_doorsysteminfo_.Clear();
  jk_doorsystemmatmapinfo_.Clear();
  jk_doorsystemregiondoormapinfo_.Clear();
  jk_doorsystemregioninfo_.Clear();
  jk_doorsystemregionslidemapinfo_.Clear();
  jk_doorsystemregionslidepositionsizeinfo_.Clear();
  jk_fnfittinginfo_.Clear();
  jk_fnfittingmatinfo_.Clear();
  jk_fnfittingpartinfo_.Clear();
  jk_fnfittingpartmatinfo_.Clear();
  jk_fnfittingpartsealinfo_.Clear();
  jk_fittinginfo_.Clear();
  jk_fittingruleinfo_.Clear();
  jk_formulaconstinfo_.Clear();
  jk_groupinfo_.Clear();
  jk_hwfittinginfo_.Clear();
  jk_holeruleinfo_.Clear();
  jk_materialinfo_.Clear();
  jk_materialsealrulemapinfo_.Clear();
  jk_modelinfo_.Clear();
  jk_numberruleinfo_.Clear();
  jk_packageinfo_.Clear();
  jk_packagemapinfo_.Clear();
  jk_productinfo_.Clear();
  jk_productseriesinfo_.Clear();
  jk_productseriesvalidinfo_.Clear();
  jk_resourceinfo_.Clear();
  jk_sealruleinfo_.Clear();
  jk_sysconfiginfo_.Clear();
  jk_sysruleconfiginfo_.Clear();
  jk_sysruletypeinfo_.Clear();
  jk_tabletopsideinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JK_Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transMsg.JK_CabBoardMatInfo JK_CabBoardMatInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabBoardMatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabboardmatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_JK_CabBoardMatInfo;
        if (input->ExpectTag(18)) goto parse_JK_CabBoardMatSkinInfo;
        break;
      }

      // repeated .transMsg.JK_CabBoardMatSkinInfo JK_CabBoardMatSkinInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabBoardMatSkinInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabboardmatskininfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JK_CabBoardMatSkinInfo;
        if (input->ExpectTag(26)) goto parse_JK_CabDesignBoardSealEdgeInfo;
        break;
      }

      // repeated .transMsg.JK_CabDesignBoardSealEdgeInfo JK_CabDesignBoardSealEdgeInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabDesignBoardSealEdgeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabdesignboardsealedgeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_JK_CabDesignBoardSealEdgeInfo;
        if (input->ExpectTag(34)) goto parse_JK_CabDesignBoardSealInfo;
        break;
      }

      // repeated .transMsg.JK_CabDesignBoardSealInfo JK_CabDesignBoardSealInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabDesignBoardSealInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabdesignboardsealinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_JK_CabDesignBoardSealInfo;
        if (input->ExpectTag(42)) goto parse_JK_CabDesignDoorRegionHandleInfo;
        break;
      }

      // repeated .transMsg.JK_CabDesignDoorRegionHandleInfo JK_CabDesignDoorRegionHandleInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabDesignDoorRegionHandleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabdesigndoorregionhandleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_JK_CabDesignDoorRegionHandleInfo;
        if (input->ExpectTag(50)) goto parse_JK_CabDesignDoorRegionInfo;
        break;
      }

      // repeated .transMsg.JK_CabDesignDoorRegionInfo JK_CabDesignDoorRegionInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabDesignDoorRegionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabdesigndoorregioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_JK_CabDesignDoorRegionInfo;
        if (input->ExpectTag(58)) goto parse_JK_CabDesignDoorSystemInfo;
        break;
      }

      // repeated .transMsg.JK_CabDesignDoorSystemInfo JK_CabDesignDoorSystemInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabDesignDoorSystemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabdesigndoorsysteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_JK_CabDesignDoorSystemInfo;
        if (input->ExpectTag(66)) goto parse_JK_CabDesignFNFittingInfo;
        break;
      }

      // repeated .transMsg.JK_CabDesignFNFittingInfo JK_CabDesignFNFittingInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabDesignFNFittingInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabdesignfnfittinginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_JK_CabDesignFNFittingInfo;
        if (input->ExpectTag(74)) goto parse_JK_CabDesignFNFittingMapInfo;
        break;
      }

      // repeated .transMsg.JK_CabDesignFNFittingMapInfo JK_CabDesignFNFittingMapInfo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabDesignFNFittingMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabdesignfnfittingmapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_JK_CabDesignFNFittingMapInfo;
        if (input->ExpectTag(82)) goto parse_JK_CabDesignFootInfo;
        break;
      }

      // repeated .transMsg.JK_CabDesignFootInfo JK_CabDesignFootInfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabDesignFootInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabdesignfootinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_JK_CabDesignFootInfo;
        if (input->ExpectTag(90)) goto parse_JK_CabDesignInfo;
        break;
      }

      // repeated .transMsg.JK_CabDesignInfo JK_CabDesignInfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabDesignInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabdesigninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_JK_CabDesignInfo;
        if (input->ExpectTag(98)) goto parse_JK_CabDesignMatInfo;
        break;
      }

      // repeated .transMsg.JK_CabDesignMatInfo JK_CabDesignMatInfo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabDesignMatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabdesignmatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_JK_CabDesignMatInfo;
        if (input->ExpectTag(106)) goto parse_JK_CabMatPlanInfo;
        break;
      }

      // repeated .transMsg.JK_CabMatPlanInfo JK_CabMatPlanInfo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabMatPlanInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabmatplaninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_JK_CabMatPlanInfo;
        if (input->ExpectTag(114)) goto parse_JK_CabStructBoardGapInfo;
        break;
      }

      // repeated .transMsg.JK_CabStructBoardGapInfo JK_CabStructBoardGapInfo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabStructBoardGapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabstructboardgapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_JK_CabStructBoardGapInfo;
        if (input->ExpectTag(122)) goto parse_JK_CabStructBoardInfo;
        break;
      }

      // repeated .transMsg.JK_CabStructBoardInfo JK_CabStructBoardInfo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabStructBoardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabstructboardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_JK_CabStructBoardInfo;
        if (input->ExpectTag(130)) goto parse_JK_CabStructBoardSealInfo;
        break;
      }

      // repeated .transMsg.JK_CabStructBoardSealInfo JK_CabStructBoardSealInfo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabStructBoardSealInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabstructboardsealinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_JK_CabStructBoardSealInfo;
        if (input->ExpectTag(138)) goto parse_JK_CabStructGapInfo;
        break;
      }

      // repeated .transMsg.JK_CabStructGapInfo JK_CabStructGapInfo = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabStructGapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabstructgapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_JK_CabStructGapInfo;
        if (input->ExpectTag(146)) goto parse_JK_CabStructInfo;
        break;
      }

      // repeated .transMsg.JK_CabStructInfo JK_CabStructInfo = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabStructInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabstructinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_JK_CabStructInfo;
        if (input->ExpectTag(154)) goto parse_JK_CabStructMatPlanMapInfo;
        break;
      }

      // repeated .transMsg.JK_CabStructMatPlanMapInfo JK_CabStructMatPlanMapInfo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabStructMatPlanMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabstructmatplanmapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_JK_CabStructMatPlanMapInfo;
        if (input->ExpectTag(162)) goto parse_JK_CabinetSizeBoardInfo;
        break;
      }

      // repeated .transMsg.JK_CabinetSizeBoardInfo JK_CabinetSizeBoardInfo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabinetSizeBoardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabinetsizeboardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_JK_CabinetSizeBoardInfo;
        if (input->ExpectTag(170)) goto parse_JK_CabinetSizeInfo;
        break;
      }

      // repeated .transMsg.JK_CabinetSizeInfo JK_CabinetSizeInfo = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabinetSizeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabinetsizeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_JK_CabinetSizeInfo;
        if (input->ExpectTag(178)) goto parse_JK_CabinetSizeStructBoardInfo;
        break;
      }

      // repeated .transMsg.JK_CabinetSizeStructBoardInfo JK_CabinetSizeStructBoardInfo = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_CabinetSizeStructBoardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_cabinetsizestructboardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_JK_CabinetSizeStructBoardInfo;
        if (input->ExpectTag(186)) goto parse_JK_DecorBoardFrameMapInfo;
        break;
      }

      // repeated .transMsg.JK_DecorBoardFrameMapInfo JK_DecorBoardFrameMapInfo = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DecorBoardFrameMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_decorboardframemapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_JK_DecorBoardFrameMapInfo;
        if (input->ExpectTag(194)) goto parse_JK_DecorBoardInfo;
        break;
      }

      // repeated .transMsg.JK_DecorBoardInfo JK_DecorBoardInfo = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DecorBoardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_decorboardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_JK_DecorBoardInfo;
        if (input->ExpectTag(202)) goto parse_JK_DecorBoardMatInfo;
        break;
      }

      // repeated .transMsg.JK_DecorBoardMatInfo JK_DecorBoardMatInfo = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DecorBoardMatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_decorboardmatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_JK_DecorBoardMatInfo;
        if (input->ExpectTag(210)) goto parse_JK_DecorBoardUnitInfo;
        break;
      }

      // repeated .transMsg.JK_DecorBoardUnitInfo JK_DecorBoardUnitInfo = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DecorBoardUnitInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_decorboardunitinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_JK_DecorBoardUnitInfo;
        if (input->ExpectTag(218)) goto parse_JK_DecorBoardUnitMatInfo;
        break;
      }

      // repeated .transMsg.JK_DecorBoardUnitMatInfo JK_DecorBoardUnitMatInfo = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DecorBoardUnitMatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_decorboardunitmatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_JK_DecorBoardUnitMatInfo;
        if (input->ExpectTag(226)) goto parse_JK_DecorBoardUnitSealInfo;
        break;
      }

      // repeated .transMsg.JK_DecorBoardUnitSealInfo JK_DecorBoardUnitSealInfo = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DecorBoardUnitSealInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_decorboardunitsealinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_JK_DecorBoardUnitSealInfo;
        if (input->ExpectTag(234)) goto parse_JK_DecorInfo;
        break;
      }

      // repeated .transMsg.JK_DecorInfo JK_DecorInfo = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DecorInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_decorinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_JK_DecorInfo;
        if (input->ExpectTag(242)) goto parse_JK_DecorLineInfo;
        break;
      }

      // repeated .transMsg.JK_DecorLineInfo JK_DecorLineInfo = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DecorLineInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_decorlineinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_JK_DecorLineInfo;
        if (input->ExpectTag(250)) goto parse_JK_DecorLineMatInfo;
        break;
      }

      // repeated .transMsg.JK_DecorLineMatInfo JK_DecorLineMatInfo = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DecorLineMatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_decorlinematinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_JK_DecorLineMatInfo;
        if (input->ExpectTag(258)) goto parse_JK_DecorUnitHWFittingMapInfo;
        break;
      }

      // repeated .transMsg.JK_DecorUnitHWFittingMapInfo JK_DecorUnitHWFittingMapInfo = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DecorUnitHWFittingMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_decorunithwfittingmapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_JK_DecorUnitHWFittingMapInfo;
        if (input->ExpectTag(266)) goto parse_JK_DoorBoardGapInfo;
        break;
      }

      // repeated .transMsg.JK_DoorBoardGapInfo JK_DoorBoardGapInfo = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorBoardGapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doorboardgapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_JK_DoorBoardGapInfo;
        if (input->ExpectTag(274)) goto parse_JK_DoorBoardInfo;
        break;
      }

      // repeated .transMsg.JK_DoorBoardInfo JK_DoorBoardInfo = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorBoardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doorboardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_JK_DoorBoardInfo;
        if (input->ExpectTag(282)) goto parse_JK_DoorBoardMatMapInfo;
        break;
      }

      // repeated .transMsg.JK_DoorBoardMatMapInfo JK_DoorBoardMatMapInfo = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorBoardMatMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doorboardmatmapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_JK_DoorBoardMatMapInfo;
        if (input->ExpectTag(290)) goto parse_JK_DoorBoardSealInfo;
        break;
      }

      // repeated .transMsg.JK_DoorBoardSealInfo JK_DoorBoardSealInfo = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorBoardSealInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doorboardsealinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_JK_DoorBoardSealInfo;
        if (input->ExpectTag(298)) goto parse_JK_DoorInfo;
        break;
      }

      // repeated .transMsg.JK_DoorInfo JK_DoorInfo = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doorinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_JK_DoorInfo;
        if (input->ExpectTag(306)) goto parse_JK_DoorMatMapInfo;
        break;
      }

      // repeated .transMsg.JK_DoorMatMapInfo JK_DoorMatMapInfo = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorMatMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doormatmapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_JK_DoorMatMapInfo;
        if (input->ExpectTag(314)) goto parse_JK_DoorMatPlanHandleMapInfo;
        break;
      }

      // repeated .transMsg.JK_DoorMatPlanHandleMapInfo JK_DoorMatPlanHandleMapInfo = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorMatPlanHandleMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doormatplanhandlemapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_JK_DoorMatPlanHandleMapInfo;
        if (input->ExpectTag(322)) goto parse_JK_DoorMatPlanInfo;
        break;
      }

      // repeated .transMsg.JK_DoorMatPlanInfo JK_DoorMatPlanInfo = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorMatPlanInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doormatplaninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_JK_DoorMatPlanInfo;
        if (input->ExpectTag(330)) goto parse_JK_DoorRegionHWFittingMapInfo;
        break;
      }

      // repeated .transMsg.JK_DoorRegionHWFittingMapInfo JK_DoorRegionHWFittingMapInfo = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorRegionHWFittingMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doorregionhwfittingmapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_JK_DoorRegionHWFittingMapInfo;
        if (input->ExpectTag(338)) goto parse_JK_DoorSystemInfo;
        break;
      }

      // repeated .transMsg.JK_DoorSystemInfo JK_DoorSystemInfo = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorSystemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doorsysteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_JK_DoorSystemInfo;
        if (input->ExpectTag(346)) goto parse_JK_DoorSystemMatMapInfo;
        break;
      }

      // repeated .transMsg.JK_DoorSystemMatMapInfo JK_DoorSystemMatMapInfo = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorSystemMatMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doorsystemmatmapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_JK_DoorSystemMatMapInfo;
        if (input->ExpectTag(354)) goto parse_JK_DoorSystemRegionDoorMapInfo;
        break;
      }

      // repeated .transMsg.JK_DoorSystemRegionDoorMapInfo JK_DoorSystemRegionDoorMapInfo = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorSystemRegionDoorMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doorsystemregiondoormapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_JK_DoorSystemRegionDoorMapInfo;
        if (input->ExpectTag(362)) goto parse_JK_DoorSystemRegionInfo;
        break;
      }

      // repeated .transMsg.JK_DoorSystemRegionInfo JK_DoorSystemRegionInfo = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorSystemRegionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doorsystemregioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_JK_DoorSystemRegionInfo;
        if (input->ExpectTag(370)) goto parse_JK_DoorSystemRegionSlideMapInfo;
        break;
      }

      // repeated .transMsg.JK_DoorSystemRegionSlideMapInfo JK_DoorSystemRegionSlideMapInfo = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorSystemRegionSlideMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doorsystemregionslidemapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_JK_DoorSystemRegionSlideMapInfo;
        if (input->ExpectTag(378)) goto parse_JK_DoorSystemRegionSlidePositionSizeInfo;
        break;
      }

      // repeated .transMsg.JK_DoorSystemRegionSlidePositionSizeInfo JK_DoorSystemRegionSlidePositionSizeInfo = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_DoorSystemRegionSlidePositionSizeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_doorsystemregionslidepositionsizeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_JK_DoorSystemRegionSlidePositionSizeInfo;
        if (input->ExpectTag(386)) goto parse_JK_FNFittingInfo;
        break;
      }

      // repeated .transMsg.JK_FNFittingInfo JK_FNFittingInfo = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_FNFittingInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_fnfittinginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_JK_FNFittingInfo;
        if (input->ExpectTag(394)) goto parse_JK_FNFittingMatInfo;
        break;
      }

      // repeated .transMsg.JK_FNFittingMatInfo JK_FNFittingMatInfo = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_FNFittingMatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_fnfittingmatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_JK_FNFittingMatInfo;
        if (input->ExpectTag(402)) goto parse_JK_FNFittingPartInfo;
        break;
      }

      // repeated .transMsg.JK_FNFittingPartInfo JK_FNFittingPartInfo = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_FNFittingPartInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_fnfittingpartinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_JK_FNFittingPartInfo;
        if (input->ExpectTag(410)) goto parse_JK_FNFittingPartMatInfo;
        break;
      }

      // repeated .transMsg.JK_FNFittingPartMatInfo JK_FNFittingPartMatInfo = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_FNFittingPartMatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_fnfittingpartmatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_JK_FNFittingPartMatInfo;
        if (input->ExpectTag(418)) goto parse_JK_FNFittingPartSealInfo;
        break;
      }

      // repeated .transMsg.JK_FNFittingPartSealInfo JK_FNFittingPartSealInfo = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_FNFittingPartSealInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_fnfittingpartsealinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_JK_FNFittingPartSealInfo;
        if (input->ExpectTag(426)) goto parse_JK_FittingInfo;
        break;
      }

      // repeated .transMsg.JK_FittingInfo JK_FittingInfo = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_FittingInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_fittinginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_JK_FittingInfo;
        if (input->ExpectTag(434)) goto parse_JK_FittingRuleInfo;
        break;
      }

      // repeated .transMsg.JK_FittingRuleInfo JK_FittingRuleInfo = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_FittingRuleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_fittingruleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_JK_FittingRuleInfo;
        if (input->ExpectTag(442)) goto parse_JK_FormulaConstInfo;
        break;
      }

      // repeated .transMsg.JK_FormulaConstInfo JK_FormulaConstInfo = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_FormulaConstInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_formulaconstinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_JK_FormulaConstInfo;
        if (input->ExpectTag(450)) goto parse_JK_GroupInfo;
        break;
      }

      // repeated .transMsg.JK_GroupInfo JK_GroupInfo = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_GroupInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_groupinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_JK_GroupInfo;
        if (input->ExpectTag(458)) goto parse_JK_HWFittingInfo;
        break;
      }

      // repeated .transMsg.JK_HWFittingInfo JK_HWFittingInfo = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_HWFittingInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_hwfittinginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_JK_HWFittingInfo;
        if (input->ExpectTag(466)) goto parse_JK_HoleRuleInfo;
        break;
      }

      // repeated .transMsg.JK_HoleRuleInfo JK_HoleRuleInfo = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_HoleRuleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_holeruleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_JK_HoleRuleInfo;
        if (input->ExpectTag(474)) goto parse_JK_MaterialInfo;
        break;
      }

      // repeated .transMsg.JK_MaterialInfo JK_MaterialInfo = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_MaterialInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_materialinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_JK_MaterialInfo;
        if (input->ExpectTag(482)) goto parse_JK_MaterialSealRuleMapInfo;
        break;
      }

      // repeated .transMsg.JK_MaterialSealRuleMapInfo JK_MaterialSealRuleMapInfo = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_MaterialSealRuleMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_materialsealrulemapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_JK_MaterialSealRuleMapInfo;
        if (input->ExpectTag(490)) goto parse_JK_ModelInfo;
        break;
      }

      // repeated .transMsg.JK_ModelInfo JK_ModelInfo = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_ModelInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_modelinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_JK_ModelInfo;
        if (input->ExpectTag(498)) goto parse_JK_NumberRuleInfo;
        break;
      }

      // repeated .transMsg.JK_NumberRuleInfo JK_NumberRuleInfo = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_NumberRuleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_numberruleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_JK_NumberRuleInfo;
        if (input->ExpectTag(506)) goto parse_JK_PackageInfo;
        break;
      }

      // repeated .transMsg.JK_PackageInfo JK_PackageInfo = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_PackageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_packageinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse_JK_PackageInfo;
        if (input->ExpectTag(514)) goto parse_JK_PackageMapInfo;
        break;
      }

      // repeated .transMsg.JK_PackageMapInfo JK_PackageMapInfo = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_PackageMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_packagemapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_JK_PackageMapInfo;
        if (input->ExpectTag(522)) goto parse_JK_ProductInfo;
        break;
      }

      // repeated .transMsg.JK_ProductInfo JK_ProductInfo = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_ProductInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_productinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_JK_ProductInfo;
        if (input->ExpectTag(530)) goto parse_JK_ProductSeriesInfo;
        break;
      }

      // repeated .transMsg.JK_ProductSeriesInfo JK_ProductSeriesInfo = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_ProductSeriesInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_productseriesinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(530)) goto parse_JK_ProductSeriesInfo;
        if (input->ExpectTag(538)) goto parse_JK_ProductSeriesValidInfo;
        break;
      }

      // repeated .transMsg.JK_ProductSeriesValidInfo JK_ProductSeriesValidInfo = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_ProductSeriesValidInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_productseriesvalidinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(538)) goto parse_JK_ProductSeriesValidInfo;
        if (input->ExpectTag(546)) goto parse_JK_ResourceInfo;
        break;
      }

      // repeated .transMsg.JK_ResourceInfo JK_ResourceInfo = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_ResourceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_resourceinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(546)) goto parse_JK_ResourceInfo;
        if (input->ExpectTag(554)) goto parse_JK_SealRuleInfo;
        break;
      }

      // repeated .transMsg.JK_SealRuleInfo JK_SealRuleInfo = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_SealRuleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_sealruleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(554)) goto parse_JK_SealRuleInfo;
        if (input->ExpectTag(562)) goto parse_JK_SysConfigInfo;
        break;
      }

      // repeated .transMsg.JK_SysConfigInfo JK_SysConfigInfo = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_SysConfigInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_sysconfiginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_JK_SysConfigInfo;
        if (input->ExpectTag(570)) goto parse_JK_SysRuleConfigInfo;
        break;
      }

      // repeated .transMsg.JK_SysRuleConfigInfo JK_SysRuleConfigInfo = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_SysRuleConfigInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_sysruleconfiginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_JK_SysRuleConfigInfo;
        if (input->ExpectTag(578)) goto parse_JK_SysRuleTypeInfo;
        break;
      }

      // repeated .transMsg.JK_SysRuleTypeInfo JK_SysRuleTypeInfo = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_SysRuleTypeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_sysruletypeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_JK_SysRuleTypeInfo;
        if (input->ExpectTag(586)) goto parse_JK_TableTopSideInfo;
        break;
      }

      // repeated .transMsg.JK_TableTopSideInfo JK_TableTopSideInfo = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JK_TableTopSideInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jk_tabletopsideinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse_JK_TableTopSideInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JK_Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .transMsg.JK_CabBoardMatInfo JK_CabBoardMatInfo = 1;
  for (int i = 0; i < this->jk_cabboardmatinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jk_cabboardmatinfo(i), output);
  }

  // repeated .transMsg.JK_CabBoardMatSkinInfo JK_CabBoardMatSkinInfo = 2;
  for (int i = 0; i < this->jk_cabboardmatskininfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jk_cabboardmatskininfo(i), output);
  }

  // repeated .transMsg.JK_CabDesignBoardSealEdgeInfo JK_CabDesignBoardSealEdgeInfo = 3;
  for (int i = 0; i < this->jk_cabdesignboardsealedgeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->jk_cabdesignboardsealedgeinfo(i), output);
  }

  // repeated .transMsg.JK_CabDesignBoardSealInfo JK_CabDesignBoardSealInfo = 4;
  for (int i = 0; i < this->jk_cabdesignboardsealinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->jk_cabdesignboardsealinfo(i), output);
  }

  // repeated .transMsg.JK_CabDesignDoorRegionHandleInfo JK_CabDesignDoorRegionHandleInfo = 5;
  for (int i = 0; i < this->jk_cabdesigndoorregionhandleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->jk_cabdesigndoorregionhandleinfo(i), output);
  }

  // repeated .transMsg.JK_CabDesignDoorRegionInfo JK_CabDesignDoorRegionInfo = 6;
  for (int i = 0; i < this->jk_cabdesigndoorregioninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->jk_cabdesigndoorregioninfo(i), output);
  }

  // repeated .transMsg.JK_CabDesignDoorSystemInfo JK_CabDesignDoorSystemInfo = 7;
  for (int i = 0; i < this->jk_cabdesigndoorsysteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->jk_cabdesigndoorsysteminfo(i), output);
  }

  // repeated .transMsg.JK_CabDesignFNFittingInfo JK_CabDesignFNFittingInfo = 8;
  for (int i = 0; i < this->jk_cabdesignfnfittinginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->jk_cabdesignfnfittinginfo(i), output);
  }

  // repeated .transMsg.JK_CabDesignFNFittingMapInfo JK_CabDesignFNFittingMapInfo = 9;
  for (int i = 0; i < this->jk_cabdesignfnfittingmapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->jk_cabdesignfnfittingmapinfo(i), output);
  }

  // repeated .transMsg.JK_CabDesignFootInfo JK_CabDesignFootInfo = 10;
  for (int i = 0; i < this->jk_cabdesignfootinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->jk_cabdesignfootinfo(i), output);
  }

  // repeated .transMsg.JK_CabDesignInfo JK_CabDesignInfo = 11;
  for (int i = 0; i < this->jk_cabdesigninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->jk_cabdesigninfo(i), output);
  }

  // repeated .transMsg.JK_CabDesignMatInfo JK_CabDesignMatInfo = 12;
  for (int i = 0; i < this->jk_cabdesignmatinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->jk_cabdesignmatinfo(i), output);
  }

  // repeated .transMsg.JK_CabMatPlanInfo JK_CabMatPlanInfo = 13;
  for (int i = 0; i < this->jk_cabmatplaninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->jk_cabmatplaninfo(i), output);
  }

  // repeated .transMsg.JK_CabStructBoardGapInfo JK_CabStructBoardGapInfo = 14;
  for (int i = 0; i < this->jk_cabstructboardgapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->jk_cabstructboardgapinfo(i), output);
  }

  // repeated .transMsg.JK_CabStructBoardInfo JK_CabStructBoardInfo = 15;
  for (int i = 0; i < this->jk_cabstructboardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->jk_cabstructboardinfo(i), output);
  }

  // repeated .transMsg.JK_CabStructBoardSealInfo JK_CabStructBoardSealInfo = 16;
  for (int i = 0; i < this->jk_cabstructboardsealinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->jk_cabstructboardsealinfo(i), output);
  }

  // repeated .transMsg.JK_CabStructGapInfo JK_CabStructGapInfo = 17;
  for (int i = 0; i < this->jk_cabstructgapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->jk_cabstructgapinfo(i), output);
  }

  // repeated .transMsg.JK_CabStructInfo JK_CabStructInfo = 18;
  for (int i = 0; i < this->jk_cabstructinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->jk_cabstructinfo(i), output);
  }

  // repeated .transMsg.JK_CabStructMatPlanMapInfo JK_CabStructMatPlanMapInfo = 19;
  for (int i = 0; i < this->jk_cabstructmatplanmapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->jk_cabstructmatplanmapinfo(i), output);
  }

  // repeated .transMsg.JK_CabinetSizeBoardInfo JK_CabinetSizeBoardInfo = 20;
  for (int i = 0; i < this->jk_cabinetsizeboardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->jk_cabinetsizeboardinfo(i), output);
  }

  // repeated .transMsg.JK_CabinetSizeInfo JK_CabinetSizeInfo = 21;
  for (int i = 0; i < this->jk_cabinetsizeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->jk_cabinetsizeinfo(i), output);
  }

  // repeated .transMsg.JK_CabinetSizeStructBoardInfo JK_CabinetSizeStructBoardInfo = 22;
  for (int i = 0; i < this->jk_cabinetsizestructboardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->jk_cabinetsizestructboardinfo(i), output);
  }

  // repeated .transMsg.JK_DecorBoardFrameMapInfo JK_DecorBoardFrameMapInfo = 23;
  for (int i = 0; i < this->jk_decorboardframemapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->jk_decorboardframemapinfo(i), output);
  }

  // repeated .transMsg.JK_DecorBoardInfo JK_DecorBoardInfo = 24;
  for (int i = 0; i < this->jk_decorboardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->jk_decorboardinfo(i), output);
  }

  // repeated .transMsg.JK_DecorBoardMatInfo JK_DecorBoardMatInfo = 25;
  for (int i = 0; i < this->jk_decorboardmatinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->jk_decorboardmatinfo(i), output);
  }

  // repeated .transMsg.JK_DecorBoardUnitInfo JK_DecorBoardUnitInfo = 26;
  for (int i = 0; i < this->jk_decorboardunitinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->jk_decorboardunitinfo(i), output);
  }

  // repeated .transMsg.JK_DecorBoardUnitMatInfo JK_DecorBoardUnitMatInfo = 27;
  for (int i = 0; i < this->jk_decorboardunitmatinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->jk_decorboardunitmatinfo(i), output);
  }

  // repeated .transMsg.JK_DecorBoardUnitSealInfo JK_DecorBoardUnitSealInfo = 28;
  for (int i = 0; i < this->jk_decorboardunitsealinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->jk_decorboardunitsealinfo(i), output);
  }

  // repeated .transMsg.JK_DecorInfo JK_DecorInfo = 29;
  for (int i = 0; i < this->jk_decorinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->jk_decorinfo(i), output);
  }

  // repeated .transMsg.JK_DecorLineInfo JK_DecorLineInfo = 30;
  for (int i = 0; i < this->jk_decorlineinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->jk_decorlineinfo(i), output);
  }

  // repeated .transMsg.JK_DecorLineMatInfo JK_DecorLineMatInfo = 31;
  for (int i = 0; i < this->jk_decorlinematinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->jk_decorlinematinfo(i), output);
  }

  // repeated .transMsg.JK_DecorUnitHWFittingMapInfo JK_DecorUnitHWFittingMapInfo = 32;
  for (int i = 0; i < this->jk_decorunithwfittingmapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->jk_decorunithwfittingmapinfo(i), output);
  }

  // repeated .transMsg.JK_DoorBoardGapInfo JK_DoorBoardGapInfo = 33;
  for (int i = 0; i < this->jk_doorboardgapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->jk_doorboardgapinfo(i), output);
  }

  // repeated .transMsg.JK_DoorBoardInfo JK_DoorBoardInfo = 34;
  for (int i = 0; i < this->jk_doorboardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->jk_doorboardinfo(i), output);
  }

  // repeated .transMsg.JK_DoorBoardMatMapInfo JK_DoorBoardMatMapInfo = 35;
  for (int i = 0; i < this->jk_doorboardmatmapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->jk_doorboardmatmapinfo(i), output);
  }

  // repeated .transMsg.JK_DoorBoardSealInfo JK_DoorBoardSealInfo = 36;
  for (int i = 0; i < this->jk_doorboardsealinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->jk_doorboardsealinfo(i), output);
  }

  // repeated .transMsg.JK_DoorInfo JK_DoorInfo = 37;
  for (int i = 0; i < this->jk_doorinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->jk_doorinfo(i), output);
  }

  // repeated .transMsg.JK_DoorMatMapInfo JK_DoorMatMapInfo = 38;
  for (int i = 0; i < this->jk_doormatmapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->jk_doormatmapinfo(i), output);
  }

  // repeated .transMsg.JK_DoorMatPlanHandleMapInfo JK_DoorMatPlanHandleMapInfo = 39;
  for (int i = 0; i < this->jk_doormatplanhandlemapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->jk_doormatplanhandlemapinfo(i), output);
  }

  // repeated .transMsg.JK_DoorMatPlanInfo JK_DoorMatPlanInfo = 40;
  for (int i = 0; i < this->jk_doormatplaninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->jk_doormatplaninfo(i), output);
  }

  // repeated .transMsg.JK_DoorRegionHWFittingMapInfo JK_DoorRegionHWFittingMapInfo = 41;
  for (int i = 0; i < this->jk_doorregionhwfittingmapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->jk_doorregionhwfittingmapinfo(i), output);
  }

  // repeated .transMsg.JK_DoorSystemInfo JK_DoorSystemInfo = 42;
  for (int i = 0; i < this->jk_doorsysteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->jk_doorsysteminfo(i), output);
  }

  // repeated .transMsg.JK_DoorSystemMatMapInfo JK_DoorSystemMatMapInfo = 43;
  for (int i = 0; i < this->jk_doorsystemmatmapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->jk_doorsystemmatmapinfo(i), output);
  }

  // repeated .transMsg.JK_DoorSystemRegionDoorMapInfo JK_DoorSystemRegionDoorMapInfo = 44;
  for (int i = 0; i < this->jk_doorsystemregiondoormapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->jk_doorsystemregiondoormapinfo(i), output);
  }

  // repeated .transMsg.JK_DoorSystemRegionInfo JK_DoorSystemRegionInfo = 45;
  for (int i = 0; i < this->jk_doorsystemregioninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->jk_doorsystemregioninfo(i), output);
  }

  // repeated .transMsg.JK_DoorSystemRegionSlideMapInfo JK_DoorSystemRegionSlideMapInfo = 46;
  for (int i = 0; i < this->jk_doorsystemregionslidemapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->jk_doorsystemregionslidemapinfo(i), output);
  }

  // repeated .transMsg.JK_DoorSystemRegionSlidePositionSizeInfo JK_DoorSystemRegionSlidePositionSizeInfo = 47;
  for (int i = 0; i < this->jk_doorsystemregionslidepositionsizeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->jk_doorsystemregionslidepositionsizeinfo(i), output);
  }

  // repeated .transMsg.JK_FNFittingInfo JK_FNFittingInfo = 48;
  for (int i = 0; i < this->jk_fnfittinginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->jk_fnfittinginfo(i), output);
  }

  // repeated .transMsg.JK_FNFittingMatInfo JK_FNFittingMatInfo = 49;
  for (int i = 0; i < this->jk_fnfittingmatinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->jk_fnfittingmatinfo(i), output);
  }

  // repeated .transMsg.JK_FNFittingPartInfo JK_FNFittingPartInfo = 50;
  for (int i = 0; i < this->jk_fnfittingpartinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->jk_fnfittingpartinfo(i), output);
  }

  // repeated .transMsg.JK_FNFittingPartMatInfo JK_FNFittingPartMatInfo = 51;
  for (int i = 0; i < this->jk_fnfittingpartmatinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->jk_fnfittingpartmatinfo(i), output);
  }

  // repeated .transMsg.JK_FNFittingPartSealInfo JK_FNFittingPartSealInfo = 52;
  for (int i = 0; i < this->jk_fnfittingpartsealinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->jk_fnfittingpartsealinfo(i), output);
  }

  // repeated .transMsg.JK_FittingInfo JK_FittingInfo = 53;
  for (int i = 0; i < this->jk_fittinginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->jk_fittinginfo(i), output);
  }

  // repeated .transMsg.JK_FittingRuleInfo JK_FittingRuleInfo = 54;
  for (int i = 0; i < this->jk_fittingruleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->jk_fittingruleinfo(i), output);
  }

  // repeated .transMsg.JK_FormulaConstInfo JK_FormulaConstInfo = 55;
  for (int i = 0; i < this->jk_formulaconstinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->jk_formulaconstinfo(i), output);
  }

  // repeated .transMsg.JK_GroupInfo JK_GroupInfo = 56;
  for (int i = 0; i < this->jk_groupinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->jk_groupinfo(i), output);
  }

  // repeated .transMsg.JK_HWFittingInfo JK_HWFittingInfo = 57;
  for (int i = 0; i < this->jk_hwfittinginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->jk_hwfittinginfo(i), output);
  }

  // repeated .transMsg.JK_HoleRuleInfo JK_HoleRuleInfo = 58;
  for (int i = 0; i < this->jk_holeruleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->jk_holeruleinfo(i), output);
  }

  // repeated .transMsg.JK_MaterialInfo JK_MaterialInfo = 59;
  for (int i = 0; i < this->jk_materialinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->jk_materialinfo(i), output);
  }

  // repeated .transMsg.JK_MaterialSealRuleMapInfo JK_MaterialSealRuleMapInfo = 60;
  for (int i = 0; i < this->jk_materialsealrulemapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->jk_materialsealrulemapinfo(i), output);
  }

  // repeated .transMsg.JK_ModelInfo JK_ModelInfo = 61;
  for (int i = 0; i < this->jk_modelinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->jk_modelinfo(i), output);
  }

  // repeated .transMsg.JK_NumberRuleInfo JK_NumberRuleInfo = 62;
  for (int i = 0; i < this->jk_numberruleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->jk_numberruleinfo(i), output);
  }

  // repeated .transMsg.JK_PackageInfo JK_PackageInfo = 63;
  for (int i = 0; i < this->jk_packageinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->jk_packageinfo(i), output);
  }

  // repeated .transMsg.JK_PackageMapInfo JK_PackageMapInfo = 64;
  for (int i = 0; i < this->jk_packagemapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->jk_packagemapinfo(i), output);
  }

  // repeated .transMsg.JK_ProductInfo JK_ProductInfo = 65;
  for (int i = 0; i < this->jk_productinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->jk_productinfo(i), output);
  }

  // repeated .transMsg.JK_ProductSeriesInfo JK_ProductSeriesInfo = 66;
  for (int i = 0; i < this->jk_productseriesinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->jk_productseriesinfo(i), output);
  }

  // repeated .transMsg.JK_ProductSeriesValidInfo JK_ProductSeriesValidInfo = 67;
  for (int i = 0; i < this->jk_productseriesvalidinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, this->jk_productseriesvalidinfo(i), output);
  }

  // repeated .transMsg.JK_ResourceInfo JK_ResourceInfo = 68;
  for (int i = 0; i < this->jk_resourceinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->jk_resourceinfo(i), output);
  }

  // repeated .transMsg.JK_SealRuleInfo JK_SealRuleInfo = 69;
  for (int i = 0; i < this->jk_sealruleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->jk_sealruleinfo(i), output);
  }

  // repeated .transMsg.JK_SysConfigInfo JK_SysConfigInfo = 70;
  for (int i = 0; i < this->jk_sysconfiginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->jk_sysconfiginfo(i), output);
  }

  // repeated .transMsg.JK_SysRuleConfigInfo JK_SysRuleConfigInfo = 71;
  for (int i = 0; i < this->jk_sysruleconfiginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->jk_sysruleconfiginfo(i), output);
  }

  // repeated .transMsg.JK_SysRuleTypeInfo JK_SysRuleTypeInfo = 72;
  for (int i = 0; i < this->jk_sysruletypeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->jk_sysruletypeinfo(i), output);
  }

  // repeated .transMsg.JK_TableTopSideInfo JK_TableTopSideInfo = 73;
  for (int i = 0; i < this->jk_tabletopsideinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->jk_tabletopsideinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JK_Table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .transMsg.JK_CabBoardMatInfo JK_CabBoardMatInfo = 1;
  for (int i = 0; i < this->jk_cabboardmatinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jk_cabboardmatinfo(i), target);
  }

  // repeated .transMsg.JK_CabBoardMatSkinInfo JK_CabBoardMatSkinInfo = 2;
  for (int i = 0; i < this->jk_cabboardmatskininfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->jk_cabboardmatskininfo(i), target);
  }

  // repeated .transMsg.JK_CabDesignBoardSealEdgeInfo JK_CabDesignBoardSealEdgeInfo = 3;
  for (int i = 0; i < this->jk_cabdesignboardsealedgeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->jk_cabdesignboardsealedgeinfo(i), target);
  }

  // repeated .transMsg.JK_CabDesignBoardSealInfo JK_CabDesignBoardSealInfo = 4;
  for (int i = 0; i < this->jk_cabdesignboardsealinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->jk_cabdesignboardsealinfo(i), target);
  }

  // repeated .transMsg.JK_CabDesignDoorRegionHandleInfo JK_CabDesignDoorRegionHandleInfo = 5;
  for (int i = 0; i < this->jk_cabdesigndoorregionhandleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->jk_cabdesigndoorregionhandleinfo(i), target);
  }

  // repeated .transMsg.JK_CabDesignDoorRegionInfo JK_CabDesignDoorRegionInfo = 6;
  for (int i = 0; i < this->jk_cabdesigndoorregioninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->jk_cabdesigndoorregioninfo(i), target);
  }

  // repeated .transMsg.JK_CabDesignDoorSystemInfo JK_CabDesignDoorSystemInfo = 7;
  for (int i = 0; i < this->jk_cabdesigndoorsysteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->jk_cabdesigndoorsysteminfo(i), target);
  }

  // repeated .transMsg.JK_CabDesignFNFittingInfo JK_CabDesignFNFittingInfo = 8;
  for (int i = 0; i < this->jk_cabdesignfnfittinginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->jk_cabdesignfnfittinginfo(i), target);
  }

  // repeated .transMsg.JK_CabDesignFNFittingMapInfo JK_CabDesignFNFittingMapInfo = 9;
  for (int i = 0; i < this->jk_cabdesignfnfittingmapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->jk_cabdesignfnfittingmapinfo(i), target);
  }

  // repeated .transMsg.JK_CabDesignFootInfo JK_CabDesignFootInfo = 10;
  for (int i = 0; i < this->jk_cabdesignfootinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->jk_cabdesignfootinfo(i), target);
  }

  // repeated .transMsg.JK_CabDesignInfo JK_CabDesignInfo = 11;
  for (int i = 0; i < this->jk_cabdesigninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->jk_cabdesigninfo(i), target);
  }

  // repeated .transMsg.JK_CabDesignMatInfo JK_CabDesignMatInfo = 12;
  for (int i = 0; i < this->jk_cabdesignmatinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->jk_cabdesignmatinfo(i), target);
  }

  // repeated .transMsg.JK_CabMatPlanInfo JK_CabMatPlanInfo = 13;
  for (int i = 0; i < this->jk_cabmatplaninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->jk_cabmatplaninfo(i), target);
  }

  // repeated .transMsg.JK_CabStructBoardGapInfo JK_CabStructBoardGapInfo = 14;
  for (int i = 0; i < this->jk_cabstructboardgapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->jk_cabstructboardgapinfo(i), target);
  }

  // repeated .transMsg.JK_CabStructBoardInfo JK_CabStructBoardInfo = 15;
  for (int i = 0; i < this->jk_cabstructboardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->jk_cabstructboardinfo(i), target);
  }

  // repeated .transMsg.JK_CabStructBoardSealInfo JK_CabStructBoardSealInfo = 16;
  for (int i = 0; i < this->jk_cabstructboardsealinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->jk_cabstructboardsealinfo(i), target);
  }

  // repeated .transMsg.JK_CabStructGapInfo JK_CabStructGapInfo = 17;
  for (int i = 0; i < this->jk_cabstructgapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->jk_cabstructgapinfo(i), target);
  }

  // repeated .transMsg.JK_CabStructInfo JK_CabStructInfo = 18;
  for (int i = 0; i < this->jk_cabstructinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->jk_cabstructinfo(i), target);
  }

  // repeated .transMsg.JK_CabStructMatPlanMapInfo JK_CabStructMatPlanMapInfo = 19;
  for (int i = 0; i < this->jk_cabstructmatplanmapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->jk_cabstructmatplanmapinfo(i), target);
  }

  // repeated .transMsg.JK_CabinetSizeBoardInfo JK_CabinetSizeBoardInfo = 20;
  for (int i = 0; i < this->jk_cabinetsizeboardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->jk_cabinetsizeboardinfo(i), target);
  }

  // repeated .transMsg.JK_CabinetSizeInfo JK_CabinetSizeInfo = 21;
  for (int i = 0; i < this->jk_cabinetsizeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->jk_cabinetsizeinfo(i), target);
  }

  // repeated .transMsg.JK_CabinetSizeStructBoardInfo JK_CabinetSizeStructBoardInfo = 22;
  for (int i = 0; i < this->jk_cabinetsizestructboardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->jk_cabinetsizestructboardinfo(i), target);
  }

  // repeated .transMsg.JK_DecorBoardFrameMapInfo JK_DecorBoardFrameMapInfo = 23;
  for (int i = 0; i < this->jk_decorboardframemapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->jk_decorboardframemapinfo(i), target);
  }

  // repeated .transMsg.JK_DecorBoardInfo JK_DecorBoardInfo = 24;
  for (int i = 0; i < this->jk_decorboardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->jk_decorboardinfo(i), target);
  }

  // repeated .transMsg.JK_DecorBoardMatInfo JK_DecorBoardMatInfo = 25;
  for (int i = 0; i < this->jk_decorboardmatinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->jk_decorboardmatinfo(i), target);
  }

  // repeated .transMsg.JK_DecorBoardUnitInfo JK_DecorBoardUnitInfo = 26;
  for (int i = 0; i < this->jk_decorboardunitinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->jk_decorboardunitinfo(i), target);
  }

  // repeated .transMsg.JK_DecorBoardUnitMatInfo JK_DecorBoardUnitMatInfo = 27;
  for (int i = 0; i < this->jk_decorboardunitmatinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->jk_decorboardunitmatinfo(i), target);
  }

  // repeated .transMsg.JK_DecorBoardUnitSealInfo JK_DecorBoardUnitSealInfo = 28;
  for (int i = 0; i < this->jk_decorboardunitsealinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->jk_decorboardunitsealinfo(i), target);
  }

  // repeated .transMsg.JK_DecorInfo JK_DecorInfo = 29;
  for (int i = 0; i < this->jk_decorinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->jk_decorinfo(i), target);
  }

  // repeated .transMsg.JK_DecorLineInfo JK_DecorLineInfo = 30;
  for (int i = 0; i < this->jk_decorlineinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->jk_decorlineinfo(i), target);
  }

  // repeated .transMsg.JK_DecorLineMatInfo JK_DecorLineMatInfo = 31;
  for (int i = 0; i < this->jk_decorlinematinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->jk_decorlinematinfo(i), target);
  }

  // repeated .transMsg.JK_DecorUnitHWFittingMapInfo JK_DecorUnitHWFittingMapInfo = 32;
  for (int i = 0; i < this->jk_decorunithwfittingmapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->jk_decorunithwfittingmapinfo(i), target);
  }

  // repeated .transMsg.JK_DoorBoardGapInfo JK_DoorBoardGapInfo = 33;
  for (int i = 0; i < this->jk_doorboardgapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->jk_doorboardgapinfo(i), target);
  }

  // repeated .transMsg.JK_DoorBoardInfo JK_DoorBoardInfo = 34;
  for (int i = 0; i < this->jk_doorboardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->jk_doorboardinfo(i), target);
  }

  // repeated .transMsg.JK_DoorBoardMatMapInfo JK_DoorBoardMatMapInfo = 35;
  for (int i = 0; i < this->jk_doorboardmatmapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->jk_doorboardmatmapinfo(i), target);
  }

  // repeated .transMsg.JK_DoorBoardSealInfo JK_DoorBoardSealInfo = 36;
  for (int i = 0; i < this->jk_doorboardsealinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->jk_doorboardsealinfo(i), target);
  }

  // repeated .transMsg.JK_DoorInfo JK_DoorInfo = 37;
  for (int i = 0; i < this->jk_doorinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->jk_doorinfo(i), target);
  }

  // repeated .transMsg.JK_DoorMatMapInfo JK_DoorMatMapInfo = 38;
  for (int i = 0; i < this->jk_doormatmapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->jk_doormatmapinfo(i), target);
  }

  // repeated .transMsg.JK_DoorMatPlanHandleMapInfo JK_DoorMatPlanHandleMapInfo = 39;
  for (int i = 0; i < this->jk_doormatplanhandlemapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->jk_doormatplanhandlemapinfo(i), target);
  }

  // repeated .transMsg.JK_DoorMatPlanInfo JK_DoorMatPlanInfo = 40;
  for (int i = 0; i < this->jk_doormatplaninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->jk_doormatplaninfo(i), target);
  }

  // repeated .transMsg.JK_DoorRegionHWFittingMapInfo JK_DoorRegionHWFittingMapInfo = 41;
  for (int i = 0; i < this->jk_doorregionhwfittingmapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->jk_doorregionhwfittingmapinfo(i), target);
  }

  // repeated .transMsg.JK_DoorSystemInfo JK_DoorSystemInfo = 42;
  for (int i = 0; i < this->jk_doorsysteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->jk_doorsysteminfo(i), target);
  }

  // repeated .transMsg.JK_DoorSystemMatMapInfo JK_DoorSystemMatMapInfo = 43;
  for (int i = 0; i < this->jk_doorsystemmatmapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->jk_doorsystemmatmapinfo(i), target);
  }

  // repeated .transMsg.JK_DoorSystemRegionDoorMapInfo JK_DoorSystemRegionDoorMapInfo = 44;
  for (int i = 0; i < this->jk_doorsystemregiondoormapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->jk_doorsystemregiondoormapinfo(i), target);
  }

  // repeated .transMsg.JK_DoorSystemRegionInfo JK_DoorSystemRegionInfo = 45;
  for (int i = 0; i < this->jk_doorsystemregioninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->jk_doorsystemregioninfo(i), target);
  }

  // repeated .transMsg.JK_DoorSystemRegionSlideMapInfo JK_DoorSystemRegionSlideMapInfo = 46;
  for (int i = 0; i < this->jk_doorsystemregionslidemapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->jk_doorsystemregionslidemapinfo(i), target);
  }

  // repeated .transMsg.JK_DoorSystemRegionSlidePositionSizeInfo JK_DoorSystemRegionSlidePositionSizeInfo = 47;
  for (int i = 0; i < this->jk_doorsystemregionslidepositionsizeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->jk_doorsystemregionslidepositionsizeinfo(i), target);
  }

  // repeated .transMsg.JK_FNFittingInfo JK_FNFittingInfo = 48;
  for (int i = 0; i < this->jk_fnfittinginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->jk_fnfittinginfo(i), target);
  }

  // repeated .transMsg.JK_FNFittingMatInfo JK_FNFittingMatInfo = 49;
  for (int i = 0; i < this->jk_fnfittingmatinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->jk_fnfittingmatinfo(i), target);
  }

  // repeated .transMsg.JK_FNFittingPartInfo JK_FNFittingPartInfo = 50;
  for (int i = 0; i < this->jk_fnfittingpartinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->jk_fnfittingpartinfo(i), target);
  }

  // repeated .transMsg.JK_FNFittingPartMatInfo JK_FNFittingPartMatInfo = 51;
  for (int i = 0; i < this->jk_fnfittingpartmatinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->jk_fnfittingpartmatinfo(i), target);
  }

  // repeated .transMsg.JK_FNFittingPartSealInfo JK_FNFittingPartSealInfo = 52;
  for (int i = 0; i < this->jk_fnfittingpartsealinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->jk_fnfittingpartsealinfo(i), target);
  }

  // repeated .transMsg.JK_FittingInfo JK_FittingInfo = 53;
  for (int i = 0; i < this->jk_fittinginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->jk_fittinginfo(i), target);
  }

  // repeated .transMsg.JK_FittingRuleInfo JK_FittingRuleInfo = 54;
  for (int i = 0; i < this->jk_fittingruleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->jk_fittingruleinfo(i), target);
  }

  // repeated .transMsg.JK_FormulaConstInfo JK_FormulaConstInfo = 55;
  for (int i = 0; i < this->jk_formulaconstinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->jk_formulaconstinfo(i), target);
  }

  // repeated .transMsg.JK_GroupInfo JK_GroupInfo = 56;
  for (int i = 0; i < this->jk_groupinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->jk_groupinfo(i), target);
  }

  // repeated .transMsg.JK_HWFittingInfo JK_HWFittingInfo = 57;
  for (int i = 0; i < this->jk_hwfittinginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->jk_hwfittinginfo(i), target);
  }

  // repeated .transMsg.JK_HoleRuleInfo JK_HoleRuleInfo = 58;
  for (int i = 0; i < this->jk_holeruleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->jk_holeruleinfo(i), target);
  }

  // repeated .transMsg.JK_MaterialInfo JK_MaterialInfo = 59;
  for (int i = 0; i < this->jk_materialinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->jk_materialinfo(i), target);
  }

  // repeated .transMsg.JK_MaterialSealRuleMapInfo JK_MaterialSealRuleMapInfo = 60;
  for (int i = 0; i < this->jk_materialsealrulemapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->jk_materialsealrulemapinfo(i), target);
  }

  // repeated .transMsg.JK_ModelInfo JK_ModelInfo = 61;
  for (int i = 0; i < this->jk_modelinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->jk_modelinfo(i), target);
  }

  // repeated .transMsg.JK_NumberRuleInfo JK_NumberRuleInfo = 62;
  for (int i = 0; i < this->jk_numberruleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->jk_numberruleinfo(i), target);
  }

  // repeated .transMsg.JK_PackageInfo JK_PackageInfo = 63;
  for (int i = 0; i < this->jk_packageinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->jk_packageinfo(i), target);
  }

  // repeated .transMsg.JK_PackageMapInfo JK_PackageMapInfo = 64;
  for (int i = 0; i < this->jk_packagemapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->jk_packagemapinfo(i), target);
  }

  // repeated .transMsg.JK_ProductInfo JK_ProductInfo = 65;
  for (int i = 0; i < this->jk_productinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->jk_productinfo(i), target);
  }

  // repeated .transMsg.JK_ProductSeriesInfo JK_ProductSeriesInfo = 66;
  for (int i = 0; i < this->jk_productseriesinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->jk_productseriesinfo(i), target);
  }

  // repeated .transMsg.JK_ProductSeriesValidInfo JK_ProductSeriesValidInfo = 67;
  for (int i = 0; i < this->jk_productseriesvalidinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        67, this->jk_productseriesvalidinfo(i), target);
  }

  // repeated .transMsg.JK_ResourceInfo JK_ResourceInfo = 68;
  for (int i = 0; i < this->jk_resourceinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->jk_resourceinfo(i), target);
  }

  // repeated .transMsg.JK_SealRuleInfo JK_SealRuleInfo = 69;
  for (int i = 0; i < this->jk_sealruleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->jk_sealruleinfo(i), target);
  }

  // repeated .transMsg.JK_SysConfigInfo JK_SysConfigInfo = 70;
  for (int i = 0; i < this->jk_sysconfiginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->jk_sysconfiginfo(i), target);
  }

  // repeated .transMsg.JK_SysRuleConfigInfo JK_SysRuleConfigInfo = 71;
  for (int i = 0; i < this->jk_sysruleconfiginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->jk_sysruleconfiginfo(i), target);
  }

  // repeated .transMsg.JK_SysRuleTypeInfo JK_SysRuleTypeInfo = 72;
  for (int i = 0; i < this->jk_sysruletypeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->jk_sysruletypeinfo(i), target);
  }

  // repeated .transMsg.JK_TableTopSideInfo JK_TableTopSideInfo = 73;
  for (int i = 0; i < this->jk_tabletopsideinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->jk_tabletopsideinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JK_Table::ByteSize() const {
  int total_size = 0;

  // repeated .transMsg.JK_CabBoardMatInfo JK_CabBoardMatInfo = 1;
  total_size += 1 * this->jk_cabboardmatinfo_size();
  for (int i = 0; i < this->jk_cabboardmatinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabboardmatinfo(i));
  }

  // repeated .transMsg.JK_CabBoardMatSkinInfo JK_CabBoardMatSkinInfo = 2;
  total_size += 1 * this->jk_cabboardmatskininfo_size();
  for (int i = 0; i < this->jk_cabboardmatskininfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabboardmatskininfo(i));
  }

  // repeated .transMsg.JK_CabDesignBoardSealEdgeInfo JK_CabDesignBoardSealEdgeInfo = 3;
  total_size += 1 * this->jk_cabdesignboardsealedgeinfo_size();
  for (int i = 0; i < this->jk_cabdesignboardsealedgeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabdesignboardsealedgeinfo(i));
  }

  // repeated .transMsg.JK_CabDesignBoardSealInfo JK_CabDesignBoardSealInfo = 4;
  total_size += 1 * this->jk_cabdesignboardsealinfo_size();
  for (int i = 0; i < this->jk_cabdesignboardsealinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabdesignboardsealinfo(i));
  }

  // repeated .transMsg.JK_CabDesignDoorRegionHandleInfo JK_CabDesignDoorRegionHandleInfo = 5;
  total_size += 1 * this->jk_cabdesigndoorregionhandleinfo_size();
  for (int i = 0; i < this->jk_cabdesigndoorregionhandleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabdesigndoorregionhandleinfo(i));
  }

  // repeated .transMsg.JK_CabDesignDoorRegionInfo JK_CabDesignDoorRegionInfo = 6;
  total_size += 1 * this->jk_cabdesigndoorregioninfo_size();
  for (int i = 0; i < this->jk_cabdesigndoorregioninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabdesigndoorregioninfo(i));
  }

  // repeated .transMsg.JK_CabDesignDoorSystemInfo JK_CabDesignDoorSystemInfo = 7;
  total_size += 1 * this->jk_cabdesigndoorsysteminfo_size();
  for (int i = 0; i < this->jk_cabdesigndoorsysteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabdesigndoorsysteminfo(i));
  }

  // repeated .transMsg.JK_CabDesignFNFittingInfo JK_CabDesignFNFittingInfo = 8;
  total_size += 1 * this->jk_cabdesignfnfittinginfo_size();
  for (int i = 0; i < this->jk_cabdesignfnfittinginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabdesignfnfittinginfo(i));
  }

  // repeated .transMsg.JK_CabDesignFNFittingMapInfo JK_CabDesignFNFittingMapInfo = 9;
  total_size += 1 * this->jk_cabdesignfnfittingmapinfo_size();
  for (int i = 0; i < this->jk_cabdesignfnfittingmapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabdesignfnfittingmapinfo(i));
  }

  // repeated .transMsg.JK_CabDesignFootInfo JK_CabDesignFootInfo = 10;
  total_size += 1 * this->jk_cabdesignfootinfo_size();
  for (int i = 0; i < this->jk_cabdesignfootinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabdesignfootinfo(i));
  }

  // repeated .transMsg.JK_CabDesignInfo JK_CabDesignInfo = 11;
  total_size += 1 * this->jk_cabdesigninfo_size();
  for (int i = 0; i < this->jk_cabdesigninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabdesigninfo(i));
  }

  // repeated .transMsg.JK_CabDesignMatInfo JK_CabDesignMatInfo = 12;
  total_size += 1 * this->jk_cabdesignmatinfo_size();
  for (int i = 0; i < this->jk_cabdesignmatinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabdesignmatinfo(i));
  }

  // repeated .transMsg.JK_CabMatPlanInfo JK_CabMatPlanInfo = 13;
  total_size += 1 * this->jk_cabmatplaninfo_size();
  for (int i = 0; i < this->jk_cabmatplaninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabmatplaninfo(i));
  }

  // repeated .transMsg.JK_CabStructBoardGapInfo JK_CabStructBoardGapInfo = 14;
  total_size += 1 * this->jk_cabstructboardgapinfo_size();
  for (int i = 0; i < this->jk_cabstructboardgapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabstructboardgapinfo(i));
  }

  // repeated .transMsg.JK_CabStructBoardInfo JK_CabStructBoardInfo = 15;
  total_size += 1 * this->jk_cabstructboardinfo_size();
  for (int i = 0; i < this->jk_cabstructboardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabstructboardinfo(i));
  }

  // repeated .transMsg.JK_CabStructBoardSealInfo JK_CabStructBoardSealInfo = 16;
  total_size += 2 * this->jk_cabstructboardsealinfo_size();
  for (int i = 0; i < this->jk_cabstructboardsealinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabstructboardsealinfo(i));
  }

  // repeated .transMsg.JK_CabStructGapInfo JK_CabStructGapInfo = 17;
  total_size += 2 * this->jk_cabstructgapinfo_size();
  for (int i = 0; i < this->jk_cabstructgapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabstructgapinfo(i));
  }

  // repeated .transMsg.JK_CabStructInfo JK_CabStructInfo = 18;
  total_size += 2 * this->jk_cabstructinfo_size();
  for (int i = 0; i < this->jk_cabstructinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabstructinfo(i));
  }

  // repeated .transMsg.JK_CabStructMatPlanMapInfo JK_CabStructMatPlanMapInfo = 19;
  total_size += 2 * this->jk_cabstructmatplanmapinfo_size();
  for (int i = 0; i < this->jk_cabstructmatplanmapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabstructmatplanmapinfo(i));
  }

  // repeated .transMsg.JK_CabinetSizeBoardInfo JK_CabinetSizeBoardInfo = 20;
  total_size += 2 * this->jk_cabinetsizeboardinfo_size();
  for (int i = 0; i < this->jk_cabinetsizeboardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabinetsizeboardinfo(i));
  }

  // repeated .transMsg.JK_CabinetSizeInfo JK_CabinetSizeInfo = 21;
  total_size += 2 * this->jk_cabinetsizeinfo_size();
  for (int i = 0; i < this->jk_cabinetsizeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabinetsizeinfo(i));
  }

  // repeated .transMsg.JK_CabinetSizeStructBoardInfo JK_CabinetSizeStructBoardInfo = 22;
  total_size += 2 * this->jk_cabinetsizestructboardinfo_size();
  for (int i = 0; i < this->jk_cabinetsizestructboardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_cabinetsizestructboardinfo(i));
  }

  // repeated .transMsg.JK_DecorBoardFrameMapInfo JK_DecorBoardFrameMapInfo = 23;
  total_size += 2 * this->jk_decorboardframemapinfo_size();
  for (int i = 0; i < this->jk_decorboardframemapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_decorboardframemapinfo(i));
  }

  // repeated .transMsg.JK_DecorBoardInfo JK_DecorBoardInfo = 24;
  total_size += 2 * this->jk_decorboardinfo_size();
  for (int i = 0; i < this->jk_decorboardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_decorboardinfo(i));
  }

  // repeated .transMsg.JK_DecorBoardMatInfo JK_DecorBoardMatInfo = 25;
  total_size += 2 * this->jk_decorboardmatinfo_size();
  for (int i = 0; i < this->jk_decorboardmatinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_decorboardmatinfo(i));
  }

  // repeated .transMsg.JK_DecorBoardUnitInfo JK_DecorBoardUnitInfo = 26;
  total_size += 2 * this->jk_decorboardunitinfo_size();
  for (int i = 0; i < this->jk_decorboardunitinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_decorboardunitinfo(i));
  }

  // repeated .transMsg.JK_DecorBoardUnitMatInfo JK_DecorBoardUnitMatInfo = 27;
  total_size += 2 * this->jk_decorboardunitmatinfo_size();
  for (int i = 0; i < this->jk_decorboardunitmatinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_decorboardunitmatinfo(i));
  }

  // repeated .transMsg.JK_DecorBoardUnitSealInfo JK_DecorBoardUnitSealInfo = 28;
  total_size += 2 * this->jk_decorboardunitsealinfo_size();
  for (int i = 0; i < this->jk_decorboardunitsealinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_decorboardunitsealinfo(i));
  }

  // repeated .transMsg.JK_DecorInfo JK_DecorInfo = 29;
  total_size += 2 * this->jk_decorinfo_size();
  for (int i = 0; i < this->jk_decorinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_decorinfo(i));
  }

  // repeated .transMsg.JK_DecorLineInfo JK_DecorLineInfo = 30;
  total_size += 2 * this->jk_decorlineinfo_size();
  for (int i = 0; i < this->jk_decorlineinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_decorlineinfo(i));
  }

  // repeated .transMsg.JK_DecorLineMatInfo JK_DecorLineMatInfo = 31;
  total_size += 2 * this->jk_decorlinematinfo_size();
  for (int i = 0; i < this->jk_decorlinematinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_decorlinematinfo(i));
  }

  // repeated .transMsg.JK_DecorUnitHWFittingMapInfo JK_DecorUnitHWFittingMapInfo = 32;
  total_size += 2 * this->jk_decorunithwfittingmapinfo_size();
  for (int i = 0; i < this->jk_decorunithwfittingmapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_decorunithwfittingmapinfo(i));
  }

  // repeated .transMsg.JK_DoorBoardGapInfo JK_DoorBoardGapInfo = 33;
  total_size += 2 * this->jk_doorboardgapinfo_size();
  for (int i = 0; i < this->jk_doorboardgapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doorboardgapinfo(i));
  }

  // repeated .transMsg.JK_DoorBoardInfo JK_DoorBoardInfo = 34;
  total_size += 2 * this->jk_doorboardinfo_size();
  for (int i = 0; i < this->jk_doorboardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doorboardinfo(i));
  }

  // repeated .transMsg.JK_DoorBoardMatMapInfo JK_DoorBoardMatMapInfo = 35;
  total_size += 2 * this->jk_doorboardmatmapinfo_size();
  for (int i = 0; i < this->jk_doorboardmatmapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doorboardmatmapinfo(i));
  }

  // repeated .transMsg.JK_DoorBoardSealInfo JK_DoorBoardSealInfo = 36;
  total_size += 2 * this->jk_doorboardsealinfo_size();
  for (int i = 0; i < this->jk_doorboardsealinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doorboardsealinfo(i));
  }

  // repeated .transMsg.JK_DoorInfo JK_DoorInfo = 37;
  total_size += 2 * this->jk_doorinfo_size();
  for (int i = 0; i < this->jk_doorinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doorinfo(i));
  }

  // repeated .transMsg.JK_DoorMatMapInfo JK_DoorMatMapInfo = 38;
  total_size += 2 * this->jk_doormatmapinfo_size();
  for (int i = 0; i < this->jk_doormatmapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doormatmapinfo(i));
  }

  // repeated .transMsg.JK_DoorMatPlanHandleMapInfo JK_DoorMatPlanHandleMapInfo = 39;
  total_size += 2 * this->jk_doormatplanhandlemapinfo_size();
  for (int i = 0; i < this->jk_doormatplanhandlemapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doormatplanhandlemapinfo(i));
  }

  // repeated .transMsg.JK_DoorMatPlanInfo JK_DoorMatPlanInfo = 40;
  total_size += 2 * this->jk_doormatplaninfo_size();
  for (int i = 0; i < this->jk_doormatplaninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doormatplaninfo(i));
  }

  // repeated .transMsg.JK_DoorRegionHWFittingMapInfo JK_DoorRegionHWFittingMapInfo = 41;
  total_size += 2 * this->jk_doorregionhwfittingmapinfo_size();
  for (int i = 0; i < this->jk_doorregionhwfittingmapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doorregionhwfittingmapinfo(i));
  }

  // repeated .transMsg.JK_DoorSystemInfo JK_DoorSystemInfo = 42;
  total_size += 2 * this->jk_doorsysteminfo_size();
  for (int i = 0; i < this->jk_doorsysteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doorsysteminfo(i));
  }

  // repeated .transMsg.JK_DoorSystemMatMapInfo JK_DoorSystemMatMapInfo = 43;
  total_size += 2 * this->jk_doorsystemmatmapinfo_size();
  for (int i = 0; i < this->jk_doorsystemmatmapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doorsystemmatmapinfo(i));
  }

  // repeated .transMsg.JK_DoorSystemRegionDoorMapInfo JK_DoorSystemRegionDoorMapInfo = 44;
  total_size += 2 * this->jk_doorsystemregiondoormapinfo_size();
  for (int i = 0; i < this->jk_doorsystemregiondoormapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doorsystemregiondoormapinfo(i));
  }

  // repeated .transMsg.JK_DoorSystemRegionInfo JK_DoorSystemRegionInfo = 45;
  total_size += 2 * this->jk_doorsystemregioninfo_size();
  for (int i = 0; i < this->jk_doorsystemregioninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doorsystemregioninfo(i));
  }

  // repeated .transMsg.JK_DoorSystemRegionSlideMapInfo JK_DoorSystemRegionSlideMapInfo = 46;
  total_size += 2 * this->jk_doorsystemregionslidemapinfo_size();
  for (int i = 0; i < this->jk_doorsystemregionslidemapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doorsystemregionslidemapinfo(i));
  }

  // repeated .transMsg.JK_DoorSystemRegionSlidePositionSizeInfo JK_DoorSystemRegionSlidePositionSizeInfo = 47;
  total_size += 2 * this->jk_doorsystemregionslidepositionsizeinfo_size();
  for (int i = 0; i < this->jk_doorsystemregionslidepositionsizeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_doorsystemregionslidepositionsizeinfo(i));
  }

  // repeated .transMsg.JK_FNFittingInfo JK_FNFittingInfo = 48;
  total_size += 2 * this->jk_fnfittinginfo_size();
  for (int i = 0; i < this->jk_fnfittinginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_fnfittinginfo(i));
  }

  // repeated .transMsg.JK_FNFittingMatInfo JK_FNFittingMatInfo = 49;
  total_size += 2 * this->jk_fnfittingmatinfo_size();
  for (int i = 0; i < this->jk_fnfittingmatinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_fnfittingmatinfo(i));
  }

  // repeated .transMsg.JK_FNFittingPartInfo JK_FNFittingPartInfo = 50;
  total_size += 2 * this->jk_fnfittingpartinfo_size();
  for (int i = 0; i < this->jk_fnfittingpartinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_fnfittingpartinfo(i));
  }

  // repeated .transMsg.JK_FNFittingPartMatInfo JK_FNFittingPartMatInfo = 51;
  total_size += 2 * this->jk_fnfittingpartmatinfo_size();
  for (int i = 0; i < this->jk_fnfittingpartmatinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_fnfittingpartmatinfo(i));
  }

  // repeated .transMsg.JK_FNFittingPartSealInfo JK_FNFittingPartSealInfo = 52;
  total_size += 2 * this->jk_fnfittingpartsealinfo_size();
  for (int i = 0; i < this->jk_fnfittingpartsealinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_fnfittingpartsealinfo(i));
  }

  // repeated .transMsg.JK_FittingInfo JK_FittingInfo = 53;
  total_size += 2 * this->jk_fittinginfo_size();
  for (int i = 0; i < this->jk_fittinginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_fittinginfo(i));
  }

  // repeated .transMsg.JK_FittingRuleInfo JK_FittingRuleInfo = 54;
  total_size += 2 * this->jk_fittingruleinfo_size();
  for (int i = 0; i < this->jk_fittingruleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_fittingruleinfo(i));
  }

  // repeated .transMsg.JK_FormulaConstInfo JK_FormulaConstInfo = 55;
  total_size += 2 * this->jk_formulaconstinfo_size();
  for (int i = 0; i < this->jk_formulaconstinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_formulaconstinfo(i));
  }

  // repeated .transMsg.JK_GroupInfo JK_GroupInfo = 56;
  total_size += 2 * this->jk_groupinfo_size();
  for (int i = 0; i < this->jk_groupinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_groupinfo(i));
  }

  // repeated .transMsg.JK_HWFittingInfo JK_HWFittingInfo = 57;
  total_size += 2 * this->jk_hwfittinginfo_size();
  for (int i = 0; i < this->jk_hwfittinginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_hwfittinginfo(i));
  }

  // repeated .transMsg.JK_HoleRuleInfo JK_HoleRuleInfo = 58;
  total_size += 2 * this->jk_holeruleinfo_size();
  for (int i = 0; i < this->jk_holeruleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_holeruleinfo(i));
  }

  // repeated .transMsg.JK_MaterialInfo JK_MaterialInfo = 59;
  total_size += 2 * this->jk_materialinfo_size();
  for (int i = 0; i < this->jk_materialinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_materialinfo(i));
  }

  // repeated .transMsg.JK_MaterialSealRuleMapInfo JK_MaterialSealRuleMapInfo = 60;
  total_size += 2 * this->jk_materialsealrulemapinfo_size();
  for (int i = 0; i < this->jk_materialsealrulemapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_materialsealrulemapinfo(i));
  }

  // repeated .transMsg.JK_ModelInfo JK_ModelInfo = 61;
  total_size += 2 * this->jk_modelinfo_size();
  for (int i = 0; i < this->jk_modelinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_modelinfo(i));
  }

  // repeated .transMsg.JK_NumberRuleInfo JK_NumberRuleInfo = 62;
  total_size += 2 * this->jk_numberruleinfo_size();
  for (int i = 0; i < this->jk_numberruleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_numberruleinfo(i));
  }

  // repeated .transMsg.JK_PackageInfo JK_PackageInfo = 63;
  total_size += 2 * this->jk_packageinfo_size();
  for (int i = 0; i < this->jk_packageinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_packageinfo(i));
  }

  // repeated .transMsg.JK_PackageMapInfo JK_PackageMapInfo = 64;
  total_size += 2 * this->jk_packagemapinfo_size();
  for (int i = 0; i < this->jk_packagemapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_packagemapinfo(i));
  }

  // repeated .transMsg.JK_ProductInfo JK_ProductInfo = 65;
  total_size += 2 * this->jk_productinfo_size();
  for (int i = 0; i < this->jk_productinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_productinfo(i));
  }

  // repeated .transMsg.JK_ProductSeriesInfo JK_ProductSeriesInfo = 66;
  total_size += 2 * this->jk_productseriesinfo_size();
  for (int i = 0; i < this->jk_productseriesinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_productseriesinfo(i));
  }

  // repeated .transMsg.JK_ProductSeriesValidInfo JK_ProductSeriesValidInfo = 67;
  total_size += 2 * this->jk_productseriesvalidinfo_size();
  for (int i = 0; i < this->jk_productseriesvalidinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_productseriesvalidinfo(i));
  }

  // repeated .transMsg.JK_ResourceInfo JK_ResourceInfo = 68;
  total_size += 2 * this->jk_resourceinfo_size();
  for (int i = 0; i < this->jk_resourceinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_resourceinfo(i));
  }

  // repeated .transMsg.JK_SealRuleInfo JK_SealRuleInfo = 69;
  total_size += 2 * this->jk_sealruleinfo_size();
  for (int i = 0; i < this->jk_sealruleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_sealruleinfo(i));
  }

  // repeated .transMsg.JK_SysConfigInfo JK_SysConfigInfo = 70;
  total_size += 2 * this->jk_sysconfiginfo_size();
  for (int i = 0; i < this->jk_sysconfiginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_sysconfiginfo(i));
  }

  // repeated .transMsg.JK_SysRuleConfigInfo JK_SysRuleConfigInfo = 71;
  total_size += 2 * this->jk_sysruleconfiginfo_size();
  for (int i = 0; i < this->jk_sysruleconfiginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_sysruleconfiginfo(i));
  }

  // repeated .transMsg.JK_SysRuleTypeInfo JK_SysRuleTypeInfo = 72;
  total_size += 2 * this->jk_sysruletypeinfo_size();
  for (int i = 0; i < this->jk_sysruletypeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_sysruletypeinfo(i));
  }

  // repeated .transMsg.JK_TableTopSideInfo JK_TableTopSideInfo = 73;
  total_size += 2 * this->jk_tabletopsideinfo_size();
  for (int i = 0; i < this->jk_tabletopsideinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jk_tabletopsideinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JK_Table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JK_Table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JK_Table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JK_Table::MergeFrom(const JK_Table& from) {
  GOOGLE_CHECK_NE(&from, this);
  jk_cabboardmatinfo_.MergeFrom(from.jk_cabboardmatinfo_);
  jk_cabboardmatskininfo_.MergeFrom(from.jk_cabboardmatskininfo_);
  jk_cabdesignboardsealedgeinfo_.MergeFrom(from.jk_cabdesignboardsealedgeinfo_);
  jk_cabdesignboardsealinfo_.MergeFrom(from.jk_cabdesignboardsealinfo_);
  jk_cabdesigndoorregionhandleinfo_.MergeFrom(from.jk_cabdesigndoorregionhandleinfo_);
  jk_cabdesigndoorregioninfo_.MergeFrom(from.jk_cabdesigndoorregioninfo_);
  jk_cabdesigndoorsysteminfo_.MergeFrom(from.jk_cabdesigndoorsysteminfo_);
  jk_cabdesignfnfittinginfo_.MergeFrom(from.jk_cabdesignfnfittinginfo_);
  jk_cabdesignfnfittingmapinfo_.MergeFrom(from.jk_cabdesignfnfittingmapinfo_);
  jk_cabdesignfootinfo_.MergeFrom(from.jk_cabdesignfootinfo_);
  jk_cabdesigninfo_.MergeFrom(from.jk_cabdesigninfo_);
  jk_cabdesignmatinfo_.MergeFrom(from.jk_cabdesignmatinfo_);
  jk_cabmatplaninfo_.MergeFrom(from.jk_cabmatplaninfo_);
  jk_cabstructboardgapinfo_.MergeFrom(from.jk_cabstructboardgapinfo_);
  jk_cabstructboardinfo_.MergeFrom(from.jk_cabstructboardinfo_);
  jk_cabstructboardsealinfo_.MergeFrom(from.jk_cabstructboardsealinfo_);
  jk_cabstructgapinfo_.MergeFrom(from.jk_cabstructgapinfo_);
  jk_cabstructinfo_.MergeFrom(from.jk_cabstructinfo_);
  jk_cabstructmatplanmapinfo_.MergeFrom(from.jk_cabstructmatplanmapinfo_);
  jk_cabinetsizeboardinfo_.MergeFrom(from.jk_cabinetsizeboardinfo_);
  jk_cabinetsizeinfo_.MergeFrom(from.jk_cabinetsizeinfo_);
  jk_cabinetsizestructboardinfo_.MergeFrom(from.jk_cabinetsizestructboardinfo_);
  jk_decorboardframemapinfo_.MergeFrom(from.jk_decorboardframemapinfo_);
  jk_decorboardinfo_.MergeFrom(from.jk_decorboardinfo_);
  jk_decorboardmatinfo_.MergeFrom(from.jk_decorboardmatinfo_);
  jk_decorboardunitinfo_.MergeFrom(from.jk_decorboardunitinfo_);
  jk_decorboardunitmatinfo_.MergeFrom(from.jk_decorboardunitmatinfo_);
  jk_decorboardunitsealinfo_.MergeFrom(from.jk_decorboardunitsealinfo_);
  jk_decorinfo_.MergeFrom(from.jk_decorinfo_);
  jk_decorlineinfo_.MergeFrom(from.jk_decorlineinfo_);
  jk_decorlinematinfo_.MergeFrom(from.jk_decorlinematinfo_);
  jk_decorunithwfittingmapinfo_.MergeFrom(from.jk_decorunithwfittingmapinfo_);
  jk_doorboardgapinfo_.MergeFrom(from.jk_doorboardgapinfo_);
  jk_doorboardinfo_.MergeFrom(from.jk_doorboardinfo_);
  jk_doorboardmatmapinfo_.MergeFrom(from.jk_doorboardmatmapinfo_);
  jk_doorboardsealinfo_.MergeFrom(from.jk_doorboardsealinfo_);
  jk_doorinfo_.MergeFrom(from.jk_doorinfo_);
  jk_doormatmapinfo_.MergeFrom(from.jk_doormatmapinfo_);
  jk_doormatplanhandlemapinfo_.MergeFrom(from.jk_doormatplanhandlemapinfo_);
  jk_doormatplaninfo_.MergeFrom(from.jk_doormatplaninfo_);
  jk_doorregionhwfittingmapinfo_.MergeFrom(from.jk_doorregionhwfittingmapinfo_);
  jk_doorsysteminfo_.MergeFrom(from.jk_doorsysteminfo_);
  jk_doorsystemmatmapinfo_.MergeFrom(from.jk_doorsystemmatmapinfo_);
  jk_doorsystemregiondoormapinfo_.MergeFrom(from.jk_doorsystemregiondoormapinfo_);
  jk_doorsystemregioninfo_.MergeFrom(from.jk_doorsystemregioninfo_);
  jk_doorsystemregionslidemapinfo_.MergeFrom(from.jk_doorsystemregionslidemapinfo_);
  jk_doorsystemregionslidepositionsizeinfo_.MergeFrom(from.jk_doorsystemregionslidepositionsizeinfo_);
  jk_fnfittinginfo_.MergeFrom(from.jk_fnfittinginfo_);
  jk_fnfittingmatinfo_.MergeFrom(from.jk_fnfittingmatinfo_);
  jk_fnfittingpartinfo_.MergeFrom(from.jk_fnfittingpartinfo_);
  jk_fnfittingpartmatinfo_.MergeFrom(from.jk_fnfittingpartmatinfo_);
  jk_fnfittingpartsealinfo_.MergeFrom(from.jk_fnfittingpartsealinfo_);
  jk_fittinginfo_.MergeFrom(from.jk_fittinginfo_);
  jk_fittingruleinfo_.MergeFrom(from.jk_fittingruleinfo_);
  jk_formulaconstinfo_.MergeFrom(from.jk_formulaconstinfo_);
  jk_groupinfo_.MergeFrom(from.jk_groupinfo_);
  jk_hwfittinginfo_.MergeFrom(from.jk_hwfittinginfo_);
  jk_holeruleinfo_.MergeFrom(from.jk_holeruleinfo_);
  jk_materialinfo_.MergeFrom(from.jk_materialinfo_);
  jk_materialsealrulemapinfo_.MergeFrom(from.jk_materialsealrulemapinfo_);
  jk_modelinfo_.MergeFrom(from.jk_modelinfo_);
  jk_numberruleinfo_.MergeFrom(from.jk_numberruleinfo_);
  jk_packageinfo_.MergeFrom(from.jk_packageinfo_);
  jk_packagemapinfo_.MergeFrom(from.jk_packagemapinfo_);
  jk_productinfo_.MergeFrom(from.jk_productinfo_);
  jk_productseriesinfo_.MergeFrom(from.jk_productseriesinfo_);
  jk_productseriesvalidinfo_.MergeFrom(from.jk_productseriesvalidinfo_);
  jk_resourceinfo_.MergeFrom(from.jk_resourceinfo_);
  jk_sealruleinfo_.MergeFrom(from.jk_sealruleinfo_);
  jk_sysconfiginfo_.MergeFrom(from.jk_sysconfiginfo_);
  jk_sysruleconfiginfo_.MergeFrom(from.jk_sysruleconfiginfo_);
  jk_sysruletypeinfo_.MergeFrom(from.jk_sysruletypeinfo_);
  jk_tabletopsideinfo_.MergeFrom(from.jk_tabletopsideinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JK_Table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JK_Table::CopyFrom(const JK_Table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JK_Table::IsInitialized() const {

  for (int i = 0; i < jk_cabboardmatinfo_size(); i++) {
    if (!this->jk_cabboardmatinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabboardmatskininfo_size(); i++) {
    if (!this->jk_cabboardmatskininfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabdesignboardsealedgeinfo_size(); i++) {
    if (!this->jk_cabdesignboardsealedgeinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabdesignboardsealinfo_size(); i++) {
    if (!this->jk_cabdesignboardsealinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabdesigndoorregionhandleinfo_size(); i++) {
    if (!this->jk_cabdesigndoorregionhandleinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabdesigndoorregioninfo_size(); i++) {
    if (!this->jk_cabdesigndoorregioninfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabdesigndoorsysteminfo_size(); i++) {
    if (!this->jk_cabdesigndoorsysteminfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabdesignfnfittinginfo_size(); i++) {
    if (!this->jk_cabdesignfnfittinginfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabdesignfnfittingmapinfo_size(); i++) {
    if (!this->jk_cabdesignfnfittingmapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabdesignfootinfo_size(); i++) {
    if (!this->jk_cabdesignfootinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabdesigninfo_size(); i++) {
    if (!this->jk_cabdesigninfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabdesignmatinfo_size(); i++) {
    if (!this->jk_cabdesignmatinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabmatplaninfo_size(); i++) {
    if (!this->jk_cabmatplaninfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabstructboardgapinfo_size(); i++) {
    if (!this->jk_cabstructboardgapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabstructboardinfo_size(); i++) {
    if (!this->jk_cabstructboardinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabstructboardsealinfo_size(); i++) {
    if (!this->jk_cabstructboardsealinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabstructgapinfo_size(); i++) {
    if (!this->jk_cabstructgapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabstructinfo_size(); i++) {
    if (!this->jk_cabstructinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabstructmatplanmapinfo_size(); i++) {
    if (!this->jk_cabstructmatplanmapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabinetsizeboardinfo_size(); i++) {
    if (!this->jk_cabinetsizeboardinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabinetsizeinfo_size(); i++) {
    if (!this->jk_cabinetsizeinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_cabinetsizestructboardinfo_size(); i++) {
    if (!this->jk_cabinetsizestructboardinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_decorboardframemapinfo_size(); i++) {
    if (!this->jk_decorboardframemapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_decorboardinfo_size(); i++) {
    if (!this->jk_decorboardinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_decorboardmatinfo_size(); i++) {
    if (!this->jk_decorboardmatinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_decorboardunitinfo_size(); i++) {
    if (!this->jk_decorboardunitinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_decorboardunitmatinfo_size(); i++) {
    if (!this->jk_decorboardunitmatinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_decorboardunitsealinfo_size(); i++) {
    if (!this->jk_decorboardunitsealinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_decorinfo_size(); i++) {
    if (!this->jk_decorinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_decorlineinfo_size(); i++) {
    if (!this->jk_decorlineinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_decorlinematinfo_size(); i++) {
    if (!this->jk_decorlinematinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_decorunithwfittingmapinfo_size(); i++) {
    if (!this->jk_decorunithwfittingmapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doorboardgapinfo_size(); i++) {
    if (!this->jk_doorboardgapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doorboardinfo_size(); i++) {
    if (!this->jk_doorboardinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doorboardmatmapinfo_size(); i++) {
    if (!this->jk_doorboardmatmapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doorboardsealinfo_size(); i++) {
    if (!this->jk_doorboardsealinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doorinfo_size(); i++) {
    if (!this->jk_doorinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doormatmapinfo_size(); i++) {
    if (!this->jk_doormatmapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doormatplanhandlemapinfo_size(); i++) {
    if (!this->jk_doormatplanhandlemapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doormatplaninfo_size(); i++) {
    if (!this->jk_doormatplaninfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doorregionhwfittingmapinfo_size(); i++) {
    if (!this->jk_doorregionhwfittingmapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doorsysteminfo_size(); i++) {
    if (!this->jk_doorsysteminfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doorsystemmatmapinfo_size(); i++) {
    if (!this->jk_doorsystemmatmapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doorsystemregiondoormapinfo_size(); i++) {
    if (!this->jk_doorsystemregiondoormapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doorsystemregioninfo_size(); i++) {
    if (!this->jk_doorsystemregioninfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doorsystemregionslidemapinfo_size(); i++) {
    if (!this->jk_doorsystemregionslidemapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_doorsystemregionslidepositionsizeinfo_size(); i++) {
    if (!this->jk_doorsystemregionslidepositionsizeinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_fnfittinginfo_size(); i++) {
    if (!this->jk_fnfittinginfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_fnfittingmatinfo_size(); i++) {
    if (!this->jk_fnfittingmatinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_fnfittingpartinfo_size(); i++) {
    if (!this->jk_fnfittingpartinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_fnfittingpartmatinfo_size(); i++) {
    if (!this->jk_fnfittingpartmatinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_fnfittingpartsealinfo_size(); i++) {
    if (!this->jk_fnfittingpartsealinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_fittinginfo_size(); i++) {
    if (!this->jk_fittinginfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_fittingruleinfo_size(); i++) {
    if (!this->jk_fittingruleinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_formulaconstinfo_size(); i++) {
    if (!this->jk_formulaconstinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_groupinfo_size(); i++) {
    if (!this->jk_groupinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_hwfittinginfo_size(); i++) {
    if (!this->jk_hwfittinginfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_holeruleinfo_size(); i++) {
    if (!this->jk_holeruleinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_materialinfo_size(); i++) {
    if (!this->jk_materialinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_materialsealrulemapinfo_size(); i++) {
    if (!this->jk_materialsealrulemapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_modelinfo_size(); i++) {
    if (!this->jk_modelinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_numberruleinfo_size(); i++) {
    if (!this->jk_numberruleinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_packageinfo_size(); i++) {
    if (!this->jk_packageinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_packagemapinfo_size(); i++) {
    if (!this->jk_packagemapinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_productinfo_size(); i++) {
    if (!this->jk_productinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_productseriesinfo_size(); i++) {
    if (!this->jk_productseriesinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_productseriesvalidinfo_size(); i++) {
    if (!this->jk_productseriesvalidinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_resourceinfo_size(); i++) {
    if (!this->jk_resourceinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_sealruleinfo_size(); i++) {
    if (!this->jk_sealruleinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_sysconfiginfo_size(); i++) {
    if (!this->jk_sysconfiginfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_sysruleconfiginfo_size(); i++) {
    if (!this->jk_sysruleconfiginfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_sysruletypeinfo_size(); i++) {
    if (!this->jk_sysruletypeinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < jk_tabletopsideinfo_size(); i++) {
    if (!this->jk_tabletopsideinfo(i).IsInitialized()) return false;
  }
  return true;
}

void JK_Table::Swap(JK_Table* other) {
  if (other != this) {
    jk_cabboardmatinfo_.Swap(&other->jk_cabboardmatinfo_);
    jk_cabboardmatskininfo_.Swap(&other->jk_cabboardmatskininfo_);
    jk_cabdesignboardsealedgeinfo_.Swap(&other->jk_cabdesignboardsealedgeinfo_);
    jk_cabdesignboardsealinfo_.Swap(&other->jk_cabdesignboardsealinfo_);
    jk_cabdesigndoorregionhandleinfo_.Swap(&other->jk_cabdesigndoorregionhandleinfo_);
    jk_cabdesigndoorregioninfo_.Swap(&other->jk_cabdesigndoorregioninfo_);
    jk_cabdesigndoorsysteminfo_.Swap(&other->jk_cabdesigndoorsysteminfo_);
    jk_cabdesignfnfittinginfo_.Swap(&other->jk_cabdesignfnfittinginfo_);
    jk_cabdesignfnfittingmapinfo_.Swap(&other->jk_cabdesignfnfittingmapinfo_);
    jk_cabdesignfootinfo_.Swap(&other->jk_cabdesignfootinfo_);
    jk_cabdesigninfo_.Swap(&other->jk_cabdesigninfo_);
    jk_cabdesignmatinfo_.Swap(&other->jk_cabdesignmatinfo_);
    jk_cabmatplaninfo_.Swap(&other->jk_cabmatplaninfo_);
    jk_cabstructboardgapinfo_.Swap(&other->jk_cabstructboardgapinfo_);
    jk_cabstructboardinfo_.Swap(&other->jk_cabstructboardinfo_);
    jk_cabstructboardsealinfo_.Swap(&other->jk_cabstructboardsealinfo_);
    jk_cabstructgapinfo_.Swap(&other->jk_cabstructgapinfo_);
    jk_cabstructinfo_.Swap(&other->jk_cabstructinfo_);
    jk_cabstructmatplanmapinfo_.Swap(&other->jk_cabstructmatplanmapinfo_);
    jk_cabinetsizeboardinfo_.Swap(&other->jk_cabinetsizeboardinfo_);
    jk_cabinetsizeinfo_.Swap(&other->jk_cabinetsizeinfo_);
    jk_cabinetsizestructboardinfo_.Swap(&other->jk_cabinetsizestructboardinfo_);
    jk_decorboardframemapinfo_.Swap(&other->jk_decorboardframemapinfo_);
    jk_decorboardinfo_.Swap(&other->jk_decorboardinfo_);
    jk_decorboardmatinfo_.Swap(&other->jk_decorboardmatinfo_);
    jk_decorboardunitinfo_.Swap(&other->jk_decorboardunitinfo_);
    jk_decorboardunitmatinfo_.Swap(&other->jk_decorboardunitmatinfo_);
    jk_decorboardunitsealinfo_.Swap(&other->jk_decorboardunitsealinfo_);
    jk_decorinfo_.Swap(&other->jk_decorinfo_);
    jk_decorlineinfo_.Swap(&other->jk_decorlineinfo_);
    jk_decorlinematinfo_.Swap(&other->jk_decorlinematinfo_);
    jk_decorunithwfittingmapinfo_.Swap(&other->jk_decorunithwfittingmapinfo_);
    jk_doorboardgapinfo_.Swap(&other->jk_doorboardgapinfo_);
    jk_doorboardinfo_.Swap(&other->jk_doorboardinfo_);
    jk_doorboardmatmapinfo_.Swap(&other->jk_doorboardmatmapinfo_);
    jk_doorboardsealinfo_.Swap(&other->jk_doorboardsealinfo_);
    jk_doorinfo_.Swap(&other->jk_doorinfo_);
    jk_doormatmapinfo_.Swap(&other->jk_doormatmapinfo_);
    jk_doormatplanhandlemapinfo_.Swap(&other->jk_doormatplanhandlemapinfo_);
    jk_doormatplaninfo_.Swap(&other->jk_doormatplaninfo_);
    jk_doorregionhwfittingmapinfo_.Swap(&other->jk_doorregionhwfittingmapinfo_);
    jk_doorsysteminfo_.Swap(&other->jk_doorsysteminfo_);
    jk_doorsystemmatmapinfo_.Swap(&other->jk_doorsystemmatmapinfo_);
    jk_doorsystemregiondoormapinfo_.Swap(&other->jk_doorsystemregiondoormapinfo_);
    jk_doorsystemregioninfo_.Swap(&other->jk_doorsystemregioninfo_);
    jk_doorsystemregionslidemapinfo_.Swap(&other->jk_doorsystemregionslidemapinfo_);
    jk_doorsystemregionslidepositionsizeinfo_.Swap(&other->jk_doorsystemregionslidepositionsizeinfo_);
    jk_fnfittinginfo_.Swap(&other->jk_fnfittinginfo_);
    jk_fnfittingmatinfo_.Swap(&other->jk_fnfittingmatinfo_);
    jk_fnfittingpartinfo_.Swap(&other->jk_fnfittingpartinfo_);
    jk_fnfittingpartmatinfo_.Swap(&other->jk_fnfittingpartmatinfo_);
    jk_fnfittingpartsealinfo_.Swap(&other->jk_fnfittingpartsealinfo_);
    jk_fittinginfo_.Swap(&other->jk_fittinginfo_);
    jk_fittingruleinfo_.Swap(&other->jk_fittingruleinfo_);
    jk_formulaconstinfo_.Swap(&other->jk_formulaconstinfo_);
    jk_groupinfo_.Swap(&other->jk_groupinfo_);
    jk_hwfittinginfo_.Swap(&other->jk_hwfittinginfo_);
    jk_holeruleinfo_.Swap(&other->jk_holeruleinfo_);
    jk_materialinfo_.Swap(&other->jk_materialinfo_);
    jk_materialsealrulemapinfo_.Swap(&other->jk_materialsealrulemapinfo_);
    jk_modelinfo_.Swap(&other->jk_modelinfo_);
    jk_numberruleinfo_.Swap(&other->jk_numberruleinfo_);
    jk_packageinfo_.Swap(&other->jk_packageinfo_);
    jk_packagemapinfo_.Swap(&other->jk_packagemapinfo_);
    jk_productinfo_.Swap(&other->jk_productinfo_);
    jk_productseriesinfo_.Swap(&other->jk_productseriesinfo_);
    jk_productseriesvalidinfo_.Swap(&other->jk_productseriesvalidinfo_);
    jk_resourceinfo_.Swap(&other->jk_resourceinfo_);
    jk_sealruleinfo_.Swap(&other->jk_sealruleinfo_);
    jk_sysconfiginfo_.Swap(&other->jk_sysconfiginfo_);
    jk_sysruleconfiginfo_.Swap(&other->jk_sysruleconfiginfo_);
    jk_sysruletypeinfo_.Swap(&other->jk_sysruletypeinfo_);
    jk_tabletopsideinfo_.Swap(&other->jk_tabletopsideinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JK_Table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JK_Table_descriptor_;
  metadata.reflection = JK_Table_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

// @@protoc_insertion_point(global_scope)
