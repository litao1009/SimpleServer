// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg-GL.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg-GL.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

namespace {

const ::google::protobuf::Descriptor* GL_AppVerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_AppVerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_AppleseedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_AppleseedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_AreaGeoMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_AreaGeoMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_AreaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_AreaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_BaseBoardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_BaseBoardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_ChargeLogInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_ChargeLogInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_DeptInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_DeptInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_DesignerConfigInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_DesignerConfigInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_GTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_GTypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_GeoCodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_GeoCodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_MajorCateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_MajorCateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_MinorCateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_MinorCateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_MinorGTypeMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_MinorGTypeMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_OrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_OrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_PinYin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_PinYin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_PrepaidCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_PrepaidCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_PrintTemplateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_PrintTemplateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_RoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_RoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_RoleRightInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_RoleRightInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_SugarVerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_SugarVerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_TransferOrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_TransferOrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_UnitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_UnitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_UserActivationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_UserActivationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GL_Table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GL_Table_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2dGL_2eproto() {
  protobuf_AddDesc_msg_2dGL_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg-GL.proto");
  GOOGLE_CHECK(file != NULL);
  GL_AppVerInfo_descriptor_ = file->message_type(0);
  static const int GL_AppVerInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppVerInfo, appverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppVerInfo, clienttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppVerInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppVerInfo, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppVerInfo, appvercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppVerInfo, hashcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppVerInfo, filepath_),
  };
  GL_AppVerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_AppVerInfo_descriptor_,
      GL_AppVerInfo::default_instance_,
      GL_AppVerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppVerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppVerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_AppVerInfo));
  GL_AppleseedInfo_descriptor_ = file->message_type(1);
  static const int GL_AppleseedInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppleseedInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppleseedInfo, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppleseedInfo, itemdata_),
  };
  GL_AppleseedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_AppleseedInfo_descriptor_,
      GL_AppleseedInfo::default_instance_,
      GL_AppleseedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppleseedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AppleseedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_AppleseedInfo));
  GL_AreaGeoMapInfo_descriptor_ = file->message_type(2);
  static const int GL_AreaGeoMapInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AreaGeoMapInfo, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AreaGeoMapInfo, geocode_),
  };
  GL_AreaGeoMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_AreaGeoMapInfo_descriptor_,
      GL_AreaGeoMapInfo::default_instance_,
      GL_AreaGeoMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AreaGeoMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AreaGeoMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_AreaGeoMapInfo));
  GL_AreaInfo_descriptor_ = file->message_type(3);
  static const int GL_AreaInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AreaInfo, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AreaInfo, deptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AreaInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AreaInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AreaInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AreaInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AreaInfo, areaname_),
  };
  GL_AreaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_AreaInfo_descriptor_,
      GL_AreaInfo::default_instance_,
      GL_AreaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AreaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_AreaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_AreaInfo));
  GL_BaseBoardInfo_descriptor_ = file->message_type(4);
  static const int GL_BaseBoardInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, cabshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, cabgaptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, boardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, boardposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, xformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, yformula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, xdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, ydock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, zdock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, xoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, yoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, zoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, arcx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, arcy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, arcz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, name_),
  };
  GL_BaseBoardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_BaseBoardInfo_descriptor_,
      GL_BaseBoardInfo::default_instance_,
      GL_BaseBoardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_BaseBoardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_BaseBoardInfo));
  GL_ChargeLogInfo_descriptor_ = file->message_type(5);
  static const int GL_ChargeLogInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_ChargeLogInfo, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_ChargeLogInfo, cardno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_ChargeLogInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_ChargeLogInfo, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_ChargeLogInfo, userid_),
  };
  GL_ChargeLogInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_ChargeLogInfo_descriptor_,
      GL_ChargeLogInfo::default_instance_,
      GL_ChargeLogInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_ChargeLogInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_ChargeLogInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_ChargeLogInfo));
  GL_DeptInfo_descriptor_ = file->message_type(6);
  static const int GL_DeptInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, deptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, parentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, dtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, incorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, showorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, geocode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, deptcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, deptname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, postcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, tel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, contacter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, contactaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, deptmemo_),
  };
  GL_DeptInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_DeptInfo_descriptor_,
      GL_DeptInfo::default_instance_,
      GL_DeptInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DeptInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_DeptInfo));
  GL_DesignerConfigInfo_descriptor_ = file->message_type(7);
  static const int GL_DesignerConfigInfo_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, enablesnap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, allpole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, crosspole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, wallpole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, hotspotcapture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, gridshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, anglestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, targetrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, designbgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, printbgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, gridbigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, gridsmallid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, hotspotrotateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, hotspotnormalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, hotspotselectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, createpointid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, designbgcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, printbgcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, gridbigcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, gridsmallcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, hotspotrotatecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, hotspotnormalcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, hotspotselectcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, createpointcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, wallthickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, wallheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, baselinelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, gridwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, snaprange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, skirtlineoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, bottomlineoffsetlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, toplineoffsetlen_),
  };
  GL_DesignerConfigInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_DesignerConfigInfo_descriptor_,
      GL_DesignerConfigInfo::default_instance_,
      GL_DesignerConfigInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_DesignerConfigInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_DesignerConfigInfo));
  GL_GTypeInfo_descriptor_ = file->message_type(8);
  static const int GL_GTypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_GTypeInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_GTypeInfo, gtypename_),
  };
  GL_GTypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_GTypeInfo_descriptor_,
      GL_GTypeInfo::default_instance_,
      GL_GTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_GTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_GTypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_GTypeInfo));
  GL_GeoCodeInfo_descriptor_ = file->message_type(9);
  static const int GL_GeoCodeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_GeoCodeInfo, geocode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_GeoCodeInfo, geoname_),
  };
  GL_GeoCodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_GeoCodeInfo_descriptor_,
      GL_GeoCodeInfo::default_instance_,
      GL_GeoCodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_GeoCodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_GeoCodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_GeoCodeInfo));
  GL_MajorCateInfo_descriptor_ = file->message_type(10);
  static const int GL_MajorCateInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MajorCateInfo, majorcateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MajorCateInfo, majorcatename_),
  };
  GL_MajorCateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_MajorCateInfo_descriptor_,
      GL_MajorCateInfo::default_instance_,
      GL_MajorCateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MajorCateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MajorCateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_MajorCateInfo));
  GL_MinorCateInfo_descriptor_ = file->message_type(11);
  static const int GL_MinorCateInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MinorCateInfo, majorcateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MinorCateInfo, minorcateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MinorCateInfo, minorcatename_),
  };
  GL_MinorCateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_MinorCateInfo_descriptor_,
      GL_MinorCateInfo::default_instance_,
      GL_MinorCateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MinorCateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MinorCateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_MinorCateInfo));
  GL_MinorGTypeMapInfo_descriptor_ = file->message_type(12);
  static const int GL_MinorGTypeMapInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MinorGTypeMapInfo, majorcateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MinorGTypeMapInfo, minorcateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MinorGTypeMapInfo, createtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MinorGTypeMapInfo, gtypeid_),
  };
  GL_MinorGTypeMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_MinorGTypeMapInfo_descriptor_,
      GL_MinorGTypeMapInfo::default_instance_,
      GL_MinorGTypeMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MinorGTypeMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_MinorGTypeMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_MinorGTypeMapInfo));
  GL_OrderInfo_descriptor_ = file->message_type(13);
  static const int GL_OrderInfo_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, clientorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, orderindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, orderstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, designerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, shopauditorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, shopcommitorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, factorygraphauditorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, factorylistauditorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, factoryfinanceauditorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, shopaudittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, shopcommittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, graphaudittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, listaudittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, financeaudittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, ordercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, shopauditcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, shopcommitcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, graphauditcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, listauditcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, financeauditcontent_),
  };
  GL_OrderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_OrderInfo_descriptor_,
      GL_OrderInfo::default_instance_,
      GL_OrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_OrderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_OrderInfo));
  GL_PinYin_descriptor_ = file->message_type(14);
  static const int GL_PinYin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PinYin, pycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PinYin, pyname_),
  };
  GL_PinYin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_PinYin_descriptor_,
      GL_PinYin::default_instance_,
      GL_PinYin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PinYin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PinYin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_PinYin));
  GL_PrepaidCardInfo_descriptor_ = file->message_type(15);
  static const int GL_PrepaidCardInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrepaidCardInfo, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrepaidCardInfo, cardcategory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrepaidCardInfo, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrepaidCardInfo, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrepaidCardInfo, securecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrepaidCardInfo, cardpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrepaidCardInfo, serialno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrepaidCardInfo, cardno_),
  };
  GL_PrepaidCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_PrepaidCardInfo_descriptor_,
      GL_PrepaidCardInfo::default_instance_,
      GL_PrepaidCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrepaidCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrepaidCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_PrepaidCardInfo));
  GL_PrintTemplateInfo_descriptor_ = file->message_type(16);
  static const int GL_PrintTemplateInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrintTemplateInfo, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrintTemplateInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrintTemplateInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrintTemplateInfo, relativepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrintTemplateInfo, templatename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrintTemplateInfo, templatememo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrintTemplateInfo, hashcode_),
  };
  GL_PrintTemplateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_PrintTemplateInfo_descriptor_,
      GL_PrintTemplateInfo::default_instance_,
      GL_PrintTemplateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrintTemplateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_PrintTemplateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_PrintTemplateInfo));
  GL_RoleInfo_descriptor_ = file->message_type(17);
  static const int GL_RoleInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleInfo, deptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleInfo, dtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleInfo, rolename_),
  };
  GL_RoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_RoleInfo_descriptor_,
      GL_RoleInfo::default_instance_,
      GL_RoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_RoleInfo));
  GL_RoleRightInfo_descriptor_ = file->message_type(18);
  static const int GL_RoleRightInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleRightInfo, rightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleRightInfo, righttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleRightInfo, roleid_),
  };
  GL_RoleRightInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_RoleRightInfo_descriptor_,
      GL_RoleRightInfo::default_instance_,
      GL_RoleRightInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleRightInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_RoleRightInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_RoleRightInfo));
  GL_SugarVerInfo_descriptor_ = file->message_type(19);
  static const int GL_SugarVerInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, vercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, deptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, vertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, verindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, uploadstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, filecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, verdbstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, stoptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, vermemo_),
  };
  GL_SugarVerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_SugarVerInfo_descriptor_,
      GL_SugarVerInfo::default_instance_,
      GL_SugarVerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_SugarVerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_SugarVerInfo));
  GL_TransferOrderInfo_descriptor_ = file->message_type(20);
  static const int GL_TransferOrderInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_TransferOrderInfo, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_TransferOrderInfo, transferbyuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_TransferOrderInfo, transfertouserid_),
  };
  GL_TransferOrderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_TransferOrderInfo_descriptor_,
      GL_TransferOrderInfo::default_instance_,
      GL_TransferOrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_TransferOrderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_TransferOrderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_TransferOrderInfo));
  GL_UnitInfo_descriptor_ = file->message_type(21);
  static const int GL_UnitInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UnitInfo, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UnitInfo, gtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UnitInfo, unitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UnitInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UnitInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UnitInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UnitInfo, updatetime_),
  };
  GL_UnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_UnitInfo_descriptor_,
      GL_UnitInfo::default_instance_,
      GL_UnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_UnitInfo));
  GL_UserActivationInfo_descriptor_ = file->message_type(22);
  static const int GL_UserActivationInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserActivationInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserActivationInfo, activationcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserActivationInfo, trycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserActivationInfo, lasttrytime_),
  };
  GL_UserActivationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_UserActivationInfo_descriptor_,
      GL_UserActivationInfo::default_instance_,
      GL_UserActivationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserActivationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserActivationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_UserActivationInfo));
  GL_UserInfo_descriptor_ = file->message_type(23);
  static const int GL_UserInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, factoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, deptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, updaterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, userpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, usercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, encodestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, truename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, idcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, qqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, tel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, cellphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, postcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, contactaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, isactived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, islocked_),
  };
  GL_UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_UserInfo_descriptor_,
      GL_UserInfo::default_instance_,
      GL_UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_UserInfo));
  GL_Table_descriptor_ = file->message_type(24);
  static const int GL_Table_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_appverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_appleseedinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_areageomapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_areainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_baseboardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_chargeloginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_deptinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_designerconfiginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_gtypeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_geocodeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_majorcateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_minorcateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_minorgtypemapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_orderinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_pinyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_prepaidcardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_printtemplateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_roleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_rolerightinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_sugarverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_transferorderinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_unitinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_useractivationinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, gl_userinfo_),
  };
  GL_Table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GL_Table_descriptor_,
      GL_Table::default_instance_,
      GL_Table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GL_Table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GL_Table));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2dGL_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_AppVerInfo_descriptor_, &GL_AppVerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_AppleseedInfo_descriptor_, &GL_AppleseedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_AreaGeoMapInfo_descriptor_, &GL_AreaGeoMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_AreaInfo_descriptor_, &GL_AreaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_BaseBoardInfo_descriptor_, &GL_BaseBoardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_ChargeLogInfo_descriptor_, &GL_ChargeLogInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_DeptInfo_descriptor_, &GL_DeptInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_DesignerConfigInfo_descriptor_, &GL_DesignerConfigInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_GTypeInfo_descriptor_, &GL_GTypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_GeoCodeInfo_descriptor_, &GL_GeoCodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_MajorCateInfo_descriptor_, &GL_MajorCateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_MinorCateInfo_descriptor_, &GL_MinorCateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_MinorGTypeMapInfo_descriptor_, &GL_MinorGTypeMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_OrderInfo_descriptor_, &GL_OrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_PinYin_descriptor_, &GL_PinYin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_PrepaidCardInfo_descriptor_, &GL_PrepaidCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_PrintTemplateInfo_descriptor_, &GL_PrintTemplateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_RoleInfo_descriptor_, &GL_RoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_RoleRightInfo_descriptor_, &GL_RoleRightInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_SugarVerInfo_descriptor_, &GL_SugarVerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_TransferOrderInfo_descriptor_, &GL_TransferOrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_UnitInfo_descriptor_, &GL_UnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_UserActivationInfo_descriptor_, &GL_UserActivationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_UserInfo_descriptor_, &GL_UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GL_Table_descriptor_, &GL_Table::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2dGL_2eproto() {
  delete GL_AppVerInfo::default_instance_;
  delete GL_AppVerInfo_reflection_;
  delete GL_AppleseedInfo::default_instance_;
  delete GL_AppleseedInfo_reflection_;
  delete GL_AreaGeoMapInfo::default_instance_;
  delete GL_AreaGeoMapInfo_reflection_;
  delete GL_AreaInfo::default_instance_;
  delete GL_AreaInfo_reflection_;
  delete GL_BaseBoardInfo::default_instance_;
  delete GL_BaseBoardInfo_reflection_;
  delete GL_ChargeLogInfo::default_instance_;
  delete GL_ChargeLogInfo_reflection_;
  delete GL_DeptInfo::default_instance_;
  delete GL_DeptInfo_reflection_;
  delete GL_DesignerConfigInfo::default_instance_;
  delete GL_DesignerConfigInfo_reflection_;
  delete GL_GTypeInfo::default_instance_;
  delete GL_GTypeInfo_reflection_;
  delete GL_GeoCodeInfo::default_instance_;
  delete GL_GeoCodeInfo_reflection_;
  delete GL_MajorCateInfo::default_instance_;
  delete GL_MajorCateInfo_reflection_;
  delete GL_MinorCateInfo::default_instance_;
  delete GL_MinorCateInfo_reflection_;
  delete GL_MinorGTypeMapInfo::default_instance_;
  delete GL_MinorGTypeMapInfo_reflection_;
  delete GL_OrderInfo::default_instance_;
  delete GL_OrderInfo_reflection_;
  delete GL_PinYin::default_instance_;
  delete GL_PinYin_reflection_;
  delete GL_PrepaidCardInfo::default_instance_;
  delete GL_PrepaidCardInfo_reflection_;
  delete GL_PrintTemplateInfo::default_instance_;
  delete GL_PrintTemplateInfo_reflection_;
  delete GL_RoleInfo::default_instance_;
  delete GL_RoleInfo_reflection_;
  delete GL_RoleRightInfo::default_instance_;
  delete GL_RoleRightInfo_reflection_;
  delete GL_SugarVerInfo::default_instance_;
  delete GL_SugarVerInfo_reflection_;
  delete GL_TransferOrderInfo::default_instance_;
  delete GL_TransferOrderInfo_reflection_;
  delete GL_UnitInfo::default_instance_;
  delete GL_UnitInfo_reflection_;
  delete GL_UserActivationInfo::default_instance_;
  delete GL_UserActivationInfo_reflection_;
  delete GL_UserInfo::default_instance_;
  delete GL_UserInfo_reflection_;
  delete GL_Table::default_instance_;
  delete GL_Table_reflection_;
}

void protobuf_AddDesc_msg_2dGL_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014msg-GL.proto\022\010transMsg\"\221\001\n\rGL_AppVerIn"
    "fo\022\020\n\010AppVerID\030\001 \001(\005\022\022\n\nClientType\030\002 \001(\005"
    "\022\020\n\010IsActive\030\003 \001(\010\022\020\n\010FileSize\030\004 \001(\003\022\022\n\n"
    "AppVerCode\030\005 \001(\t\022\020\n\010HashCode\030\006 \001(\t\022\020\n\010Fi"
    "lePath\030\007 \001(\t\"F\n\020GL_AppleseedInfo\022\016\n\006Item"
    "ID\030\001 \001(\005\022\020\n\010ItemName\030\002 \001(\t\022\020\n\010ItemData\030\003"
    " \001(\t\"4\n\021GL_AreaGeoMapInfo\022\016\n\006AreaID\030\001 \001("
    "\005\022\017\n\007GeoCode\030\002 \001(\t\"\215\001\n\013GL_AreaInfo\022\016\n\006Ar"
    "eaID\030\001 \001(\005\022\016\n\006DeptID\030\002 \001(\005\022\021\n\tCreatorID\030"
    "\003 \001(\005\022\021\n\tUpdaterID\030\004 \001(\005\022\022\n\nCreateTime\030\005"
    " \001(\003\022\022\n\nUpdateTime\030\006 \001(\003\022\020\n\010AreaName\030\007 \001"
    "(\t\"\261\002\n\020GL_BaseBoardInfo\022\020\n\010CabShape\030\001 \001("
    "\005\022\022\n\nCabGapType\030\002 \001(\005\022\021\n\tBoardType\030\003 \001(\005"
    "\022\025\n\rBoardPosition\030\004 \001(\005\022\021\n\tFactoryID\030\005 \001"
    "(\005\022\020\n\010XFormula\030\006 \001(\t\022\020\n\010YFormula\030\007 \001(\t\022\r"
    "\n\005XDock\030\010 \001(\005\022\r\n\005YDock\030\t \001(\005\022\r\n\005ZDock\030\n "
    "\001(\005\022\017\n\007XOffset\030\013 \001(\t\022\017\n\007YOffset\030\014 \001(\t\022\017\n"
    "\007ZOffset\030\r \001(\t\022\014\n\004ArcX\030\016 \001(\001\022\014\n\004ArcY\030\017 \001"
    "(\001\022\014\n\004ArcZ\030\020 \001(\001\022\014\n\004Name\030\021 \001(\t\"d\n\020GL_Cha"
    "rgeLogInfo\022\r\n\005LogID\030\001 \001(\005\022\016\n\006CardNo\030\002 \001("
    "\t\022\021\n\tFactoryID\030\003 \001(\005\022\016\n\006ShopID\030\004 \001(\005\022\016\n\006"
    "UserID\030\005 \001(\005\"\323\002\n\013GL_DeptInfo\022\016\n\006DeptID\030\001"
    " \001(\005\022\020\n\010ParentID\030\002 \001(\005\022\r\n\005IsDel\030\003 \001(\010\022\017\n"
    "\007DTypeID\030\004 \001(\005\022\020\n\010IncOrder\030\005 \001(\005\022\021\n\tShow"
    "Order\030\006 \001(\005\022\021\n\tCreatorID\030\007 \001(\005\022\021\n\tUpdate"
    "rID\030\010 \001(\005\022\022\n\nCreateTime\030\t \001(\003\022\022\n\nUpdateT"
    "ime\030\n \001(\003\022\017\n\007GeoCode\030\013 \001(\t\022\020\n\010DeptCode\030\014"
    " \001(\t\022\020\n\010DeptName\030\r \001(\t\022\020\n\010Postcode\030\016 \001(\t"
    "\022\013\n\003Tel\030\017 \001(\t\022\021\n\tContacter\030\020 \001(\t\022\026\n\016Cont"
    "actAddress\030\021 \001(\t\022\020\n\010DeptMemo\030\022 \001(\t\"\366\005\n\025G"
    "L_DesignerConfigInfo\022\022\n\nEnableSnap\030\001 \001(\010"
    "\022\017\n\007AllPole\030\002 \001(\010\022\021\n\tCrossPole\030\003 \001(\010\022\020\n\010"
    "WallPole\030\004 \001(\010\022\026\n\016HotspotCapture\030\005 \001(\010\022\020"
    "\n\010GridShow\030\006 \001(\010\022\021\n\tAngleStep\030\007 \001(\005\022\023\n\013T"
    "argetRange\030\010 \001(\005\022\022\n\nDesignBGID\030\t \001(\005\022\021\n\t"
    "PrintBGID\030\n \001(\005\022\021\n\tGridBigID\030\013 \001(\005\022\023\n\013Gr"
    "idSmallID\030\014 \001(\005\022\027\n\017HotspotRotateID\030\r \001(\005"
    "\022\027\n\017HotspotNormalID\030\016 \001(\005\022\027\n\017HotspotSele"
    "ctID\030\017 \001(\005\022\025\n\rCreatePointID\030\020 \001(\005\022\025\n\rDes"
    "ignBGColor\030\021 \001(\003\022\024\n\014PrintBGColor\030\022 \001(\003\022\024"
    "\n\014GridBigColor\030\023 \001(\003\022\026\n\016GridSmallColor\030\024"
    " \001(\003\022\032\n\022HotspotRotateColor\030\025 \001(\003\022\032\n\022Hots"
    "potNormalColor\030\026 \001(\003\022\032\n\022HotspotSelectCol"
    "or\030\027 \001(\003\022\030\n\020CreatePointColor\030\030 \001(\003\022\016\n\006Us"
    "erID\030\031 \001(\005\022\025\n\rWallThickness\030\032 \001(\001\022\022\n\nWal"
    "lHeight\030\033 \001(\001\022\023\n\013BaseLineLen\030\034 \001(\001\022\021\n\tGr"
    "idWidth\030\035 \001(\001\022\021\n\tSnapRange\030\036 \001(\001\022\032\n\022Skir"
    "tLineOffsetLen\030\037 \001(\001\022\033\n\023BottomLineOffset"
    "Len\030  \001(\001\022\030\n\020TopLineOffsetLen\030! \001(\001\"2\n\014G"
    "L_GTypeInfo\022\017\n\007GTypeID\030\001 \001(\005\022\021\n\tGTypeNam"
    "e\030\002 \001(\t\"2\n\016GL_GeoCodeInfo\022\017\n\007GeoCode\030\001 \001"
    "(\t\022\017\n\007GeoName\030\002 \001(\t\">\n\020GL_MajorCateInfo\022"
    "\023\n\013MajorCateID\030\001 \001(\005\022\025\n\rMajorCateName\030\002 "
    "\001(\t\"S\n\020GL_MinorCateInfo\022\023\n\013MajorCateID\030\001"
    " \001(\005\022\023\n\013MinorCateID\030\002 \001(\005\022\025\n\rMinorCateNa"
    "me\030\003 \001(\t\"e\n\024GL_MinorGTypeMapInfo\022\023\n\013Majo"
    "rCateID\030\001 \001(\005\022\023\n\013MinorCateID\030\002 \001(\005\022\022\n\nCr"
    "eateType\030\003 \001(\005\022\017\n\007GTypeID\030\004 \001(\005\"\327\004\n\014GL_O"
    "rderInfo\022\017\n\007OrderID\030\001 \001(\003\022\025\n\rClientOrder"
    "ID\030\002 \001(\003\022\022\n\nOrderIndex\030\003 \001(\005\022\021\n\tOrderTyp"
    "e\030\004 \001(\005\022\021\n\tFactoryID\030\005 \001(\005\022\016\n\006ShopID\030\006 \001"
    "(\005\022\023\n\013OrderStatus\030\007 \001(\005\022\r\n\005IsDel\030\010 \001(\010\022\022"
    "\n\nDesignerID\030\t \001(\005\022\025\n\rShopAuditorID\030\n \001("
    "\005\022\026\n\016ShopCommitorID\030\013 \001(\005\022\035\n\025FactoryGrap"
    "hAuditorID\030\014 \001(\005\022\034\n\024FactoryListAuditorID"
    "\030\r \001(\005\022\037\n\027FactoryFinanceAuditorID\030\016 \001(\005\022"
    "\025\n\rShopAuditTime\030\017 \001(\003\022\026\n\016ShopCommitTime"
    "\030\020 \001(\003\022\026\n\016GraphAuditTime\030\021 \001(\003\022\025\n\rListAu"
    "ditTime\030\022 \001(\003\022\030\n\020FinanceAuditTime\030\023 \001(\003\022"
    "\021\n\tOrderCode\030\024 \001(\t\022\030\n\020ShopAuditContent\030\025"
    " \001(\t\022\031\n\021ShopCommitContent\030\026 \001(\t\022\031\n\021Graph"
    "AuditContent\030\027 \001(\t\022\030\n\020ListAuditContent\030\030"
    " \001(\t\022\033\n\023FinanceAuditContent\030\031 \001(\t\"+\n\tGL_"
    "PinYin\022\016\n\006PYCode\030\001 \001(\t\022\016\n\006PYName\030\002 \001(\t\"\243"
    "\001\n\022GL_PrepaidCardInfo\022\016\n\006CardID\030\001 \001(\005\022\024\n"
    "\014CardCategory\030\002 \001(\005\022\020\n\010CardType\030\003 \001(\005\022\016\n"
    "\006Period\030\004 \001(\005\022\022\n\nSecureCode\030\005 \001(\t\022\017\n\007Car"
    "dPwd\030\006 \001(\t\022\020\n\010SerialNo\030\007 \001(\t\022\016\n\006CardNo\030\010"
    " \001(\t\"\243\001\n\024GL_PrintTemplateInfo\022\022\n\nTemplat"
    "eID\030\001 \001(\005\022\021\n\tFactoryID\030\002 \001(\005\022\020\n\010IsActive"
    "\030\003 \001(\010\022\024\n\014RelativePath\030\004 \001(\t\022\024\n\014Template"
    "Name\030\005 \001(\t\022\024\n\014TemplateMemo\030\006 \001(\t\022\020\n\010Hash"
    "Code\030\007 \001(\t\"\236\001\n\013GL_RoleInfo\022\016\n\006RoleID\030\001 \001"
    "(\005\022\016\n\006DeptID\030\002 \001(\005\022\017\n\007DTypeID\030\003 \001(\005\022\021\n\tC"
    "reatorID\030\004 \001(\005\022\021\n\tUpdaterID\030\005 \001(\005\022\022\n\nCre"
    "ateTime\030\006 \001(\003\022\022\n\nUpdateTime\030\007 \001(\003\022\020\n\010Rol"
    "eName\030\010 \001(\t\"F\n\020GL_RoleRightInfo\022\017\n\007Right"
    "ID\030\001 \001(\005\022\021\n\tRightType\030\002 \001(\005\022\016\n\006RoleID\030\003 "
    "\001(\005\"\357\001\n\017GL_SugarVerInfo\022\017\n\007VerCode\030\001 \001(\003"
    "\022\016\n\006DeptID\030\002 \001(\005\022\017\n\007VerType\030\003 \001(\005\022\020\n\010Ver"
    "Index\030\004 \001(\005\022\024\n\014UploadStatus\030\005 \001(\005\022\021\n\tFil"
    "eCount\030\006 \001(\005\022\022\n\nVerDBState\030\007 \001(\005\022\021\n\tCrea"
    "torID\030\010 \001(\005\022\021\n\tStartTime\030\t \001(\003\022\020\n\010StopTi"
    "me\030\n \001(\003\022\022\n\nCreateTime\030\013 \001(\003\022\017\n\007VerMemo\030"
    "\014 \001(\t\"\\\n\024GL_TransferOrderInfo\022\020\n\010RecordI"
    "D\030\001 \001(\003\022\030\n\020TransferByUserID\030\002 \001(\005\022\030\n\020Tra"
    "nsferToUserID\030\003 \001(\005\"\216\001\n\013GL_UnitInfo\022\016\n\006U"
    "nitID\030\001 \001(\005\022\017\n\007GTypeID\030\002 \001(\005\022\020\n\010UnitName"
    "\030\003 \001(\t\022\021\n\tCreatorID\030\004 \001(\005\022\021\n\tUpdaterID\030\005"
    " \001(\005\022\022\n\nCreateTime\030\006 \001(\003\022\022\n\nUpdateTime\030\007"
    " \001(\003\"f\n\025GL_UserActivationInfo\022\016\n\006UserID\030"
    "\001 \001(\005\022\026\n\016ActivationCode\030\002 \001(\t\022\020\n\010TryCoun"
    "t\030\003 \001(\005\022\023\n\013LastTryTime\030\004 \001(\003\"\242\003\n\013GL_User"
    "Info\022\016\n\006UserID\030\001 \001(\005\022\021\n\tFactoryID\030\002 \001(\005\022"
    "\016\n\006ShopID\030\003 \001(\005\022\016\n\006DeptID\030\004 \001(\005\022\r\n\005IsDel"
    "\030\005 \001(\010\022\016\n\006RoleID\030\006 \001(\005\022\021\n\tCreatorID\030\007 \001("
    "\005\022\021\n\tUpdaterID\030\010 \001(\005\022\022\n\nCreateTime\030\t \001(\003"
    "\022\022\n\nUpdateTime\030\n \001(\003\022\017\n\007UserPwd\030\013 \001(\t\022\020\n"
    "\010UserCode\030\014 \001(\t\022\021\n\tEncodeStr\030\r \001(\t\022\020\n\010Tr"
    "ueName\030\016 \001(\t\022\016\n\006IDCode\030\017 \001(\t\022\r\n\005QQNum\030\020 "
    "\001(\t\022\r\n\005Email\030\021 \001(\t\022\013\n\003Tel\030\022 \001(\t\022\021\n\tCellP"
    "hone\030\023 \001(\t\022\020\n\010PostCode\030\024 \001(\t\022\026\n\016ContactA"
    "ddress\030\025 \001(\t\022\021\n\tIsActived\030\026 \001(\010\022\020\n\010IsLoc"
    "ked\030\027 \001(\010\"\360\t\n\010GL_Table\022.\n\rGL_AppVerInfo\030"
    "\001 \003(\0132\027.transMsg.GL_AppVerInfo\0224\n\020GL_App"
    "leseedInfo\030\002 \003(\0132\032.transMsg.GL_Appleseed"
    "Info\0226\n\021GL_AreaGeoMapInfo\030\003 \003(\0132\033.transM"
    "sg.GL_AreaGeoMapInfo\022*\n\013GL_AreaInfo\030\004 \003("
    "\0132\025.transMsg.GL_AreaInfo\0224\n\020GL_BaseBoard"
    "Info\030\005 \003(\0132\032.transMsg.GL_BaseBoardInfo\0224"
    "\n\020GL_ChargeLogInfo\030\006 \003(\0132\032.transMsg.GL_C"
    "hargeLogInfo\022*\n\013GL_DeptInfo\030\007 \003(\0132\025.tran"
    "sMsg.GL_DeptInfo\022>\n\025GL_DesignerConfigInf"
    "o\030\010 \003(\0132\037.transMsg.GL_DesignerConfigInfo"
    "\022,\n\014GL_GTypeInfo\030\t \003(\0132\026.transMsg.GL_GTy"
    "peInfo\0220\n\016GL_GeoCodeInfo\030\n \003(\0132\030.transMs"
    "g.GL_GeoCodeInfo\0224\n\020GL_MajorCateInfo\030\013 \003"
    "(\0132\032.transMsg.GL_MajorCateInfo\0224\n\020GL_Min"
    "orCateInfo\030\014 \003(\0132\032.transMsg.GL_MinorCate"
    "Info\022<\n\024GL_MinorGTypeMapInfo\030\r \003(\0132\036.tra"
    "nsMsg.GL_MinorGTypeMapInfo\022,\n\014GL_OrderIn"
    "fo\030\016 \003(\0132\026.transMsg.GL_OrderInfo\022&\n\tGL_P"
    "inYin\030\017 \003(\0132\023.transMsg.GL_PinYin\0228\n\022GL_P"
    "repaidCardInfo\030\020 \003(\0132\034.transMsg.GL_Prepa"
    "idCardInfo\022<\n\024GL_PrintTemplateInfo\030\021 \003(\013"
    "2\036.transMsg.GL_PrintTemplateInfo\022*\n\013GL_R"
    "oleInfo\030\022 \003(\0132\025.transMsg.GL_RoleInfo\0224\n\020"
    "GL_RoleRightInfo\030\023 \003(\0132\032.transMsg.GL_Rol"
    "eRightInfo\0222\n\017GL_SugarVerInfo\030\024 \003(\0132\031.tr"
    "ansMsg.GL_SugarVerInfo\022<\n\024GL_TransferOrd"
    "erInfo\030\025 \003(\0132\036.transMsg.GL_TransferOrder"
    "Info\022*\n\013GL_UnitInfo\030\026 \003(\0132\025.transMsg.GL_"
    "UnitInfo\022>\n\025GL_UserActivationInfo\030\027 \003(\0132"
    "\037.transMsg.GL_UserActivationInfo\022*\n\013GL_U"
    "serInfo\030\030 \003(\0132\025.transMsg.GL_UserInfo", 5796);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg-GL.proto", &protobuf_RegisterTypes);
  GL_AppVerInfo::default_instance_ = new GL_AppVerInfo();
  GL_AppleseedInfo::default_instance_ = new GL_AppleseedInfo();
  GL_AreaGeoMapInfo::default_instance_ = new GL_AreaGeoMapInfo();
  GL_AreaInfo::default_instance_ = new GL_AreaInfo();
  GL_BaseBoardInfo::default_instance_ = new GL_BaseBoardInfo();
  GL_ChargeLogInfo::default_instance_ = new GL_ChargeLogInfo();
  GL_DeptInfo::default_instance_ = new GL_DeptInfo();
  GL_DesignerConfigInfo::default_instance_ = new GL_DesignerConfigInfo();
  GL_GTypeInfo::default_instance_ = new GL_GTypeInfo();
  GL_GeoCodeInfo::default_instance_ = new GL_GeoCodeInfo();
  GL_MajorCateInfo::default_instance_ = new GL_MajorCateInfo();
  GL_MinorCateInfo::default_instance_ = new GL_MinorCateInfo();
  GL_MinorGTypeMapInfo::default_instance_ = new GL_MinorGTypeMapInfo();
  GL_OrderInfo::default_instance_ = new GL_OrderInfo();
  GL_PinYin::default_instance_ = new GL_PinYin();
  GL_PrepaidCardInfo::default_instance_ = new GL_PrepaidCardInfo();
  GL_PrintTemplateInfo::default_instance_ = new GL_PrintTemplateInfo();
  GL_RoleInfo::default_instance_ = new GL_RoleInfo();
  GL_RoleRightInfo::default_instance_ = new GL_RoleRightInfo();
  GL_SugarVerInfo::default_instance_ = new GL_SugarVerInfo();
  GL_TransferOrderInfo::default_instance_ = new GL_TransferOrderInfo();
  GL_UnitInfo::default_instance_ = new GL_UnitInfo();
  GL_UserActivationInfo::default_instance_ = new GL_UserActivationInfo();
  GL_UserInfo::default_instance_ = new GL_UserInfo();
  GL_Table::default_instance_ = new GL_Table();
  GL_AppVerInfo::default_instance_->InitAsDefaultInstance();
  GL_AppleseedInfo::default_instance_->InitAsDefaultInstance();
  GL_AreaGeoMapInfo::default_instance_->InitAsDefaultInstance();
  GL_AreaInfo::default_instance_->InitAsDefaultInstance();
  GL_BaseBoardInfo::default_instance_->InitAsDefaultInstance();
  GL_ChargeLogInfo::default_instance_->InitAsDefaultInstance();
  GL_DeptInfo::default_instance_->InitAsDefaultInstance();
  GL_DesignerConfigInfo::default_instance_->InitAsDefaultInstance();
  GL_GTypeInfo::default_instance_->InitAsDefaultInstance();
  GL_GeoCodeInfo::default_instance_->InitAsDefaultInstance();
  GL_MajorCateInfo::default_instance_->InitAsDefaultInstance();
  GL_MinorCateInfo::default_instance_->InitAsDefaultInstance();
  GL_MinorGTypeMapInfo::default_instance_->InitAsDefaultInstance();
  GL_OrderInfo::default_instance_->InitAsDefaultInstance();
  GL_PinYin::default_instance_->InitAsDefaultInstance();
  GL_PrepaidCardInfo::default_instance_->InitAsDefaultInstance();
  GL_PrintTemplateInfo::default_instance_->InitAsDefaultInstance();
  GL_RoleInfo::default_instance_->InitAsDefaultInstance();
  GL_RoleRightInfo::default_instance_->InitAsDefaultInstance();
  GL_SugarVerInfo::default_instance_->InitAsDefaultInstance();
  GL_TransferOrderInfo::default_instance_->InitAsDefaultInstance();
  GL_UnitInfo::default_instance_->InitAsDefaultInstance();
  GL_UserActivationInfo::default_instance_->InitAsDefaultInstance();
  GL_UserInfo::default_instance_->InitAsDefaultInstance();
  GL_Table::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2dGL_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2dGL_2eproto {
  StaticDescriptorInitializer_msg_2dGL_2eproto() {
    protobuf_AddDesc_msg_2dGL_2eproto();
  }
} static_descriptor_initializer_msg_2dGL_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GL_AppVerInfo::kAppVerIDFieldNumber;
const int GL_AppVerInfo::kClientTypeFieldNumber;
const int GL_AppVerInfo::kIsActiveFieldNumber;
const int GL_AppVerInfo::kFileSizeFieldNumber;
const int GL_AppVerInfo::kAppVerCodeFieldNumber;
const int GL_AppVerInfo::kHashCodeFieldNumber;
const int GL_AppVerInfo::kFilePathFieldNumber;
#endif  // !_MSC_VER

GL_AppVerInfo::GL_AppVerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_AppVerInfo::InitAsDefaultInstance() {
}

GL_AppVerInfo::GL_AppVerInfo(const GL_AppVerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_AppVerInfo::SharedCtor() {
  _cached_size_ = 0;
  appverid_ = 0;
  clienttype_ = 0;
  isactive_ = false;
  filesize_ = GOOGLE_LONGLONG(0);
  appvercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_AppVerInfo::~GL_AppVerInfo() {
  SharedDtor();
}

void GL_AppVerInfo::SharedDtor() {
  if (appvercode_ != &::google::protobuf::internal::kEmptyString) {
    delete appvercode_;
  }
  if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
    delete hashcode_;
  }
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (this != default_instance_) {
  }
}

void GL_AppVerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_AppVerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_AppVerInfo_descriptor_;
}

const GL_AppVerInfo& GL_AppVerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_AppVerInfo* GL_AppVerInfo::default_instance_ = NULL;

GL_AppVerInfo* GL_AppVerInfo::New() const {
  return new GL_AppVerInfo;
}

void GL_AppVerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appverid_ = 0;
    clienttype_ = 0;
    isactive_ = false;
    filesize_ = GOOGLE_LONGLONG(0);
    if (has_appvercode()) {
      if (appvercode_ != &::google::protobuf::internal::kEmptyString) {
        appvercode_->clear();
      }
    }
    if (has_hashcode()) {
      if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
        hashcode_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_AppVerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AppVerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appverid_)));
          set_has_appverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ClientType;
        break;
      }

      // optional int32 ClientType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClientType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clienttype_)));
          set_has_clienttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsActive;
        break;
      }

      // optional bool IsActive = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FileSize;
        break;
      }

      // optional int64 FileSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AppVerCode;
        break;
      }

      // optional string AppVerCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AppVerCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appvercode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appvercode().data(), this->appvercode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_HashCode;
        break;
      }

      // optional string HashCode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HashCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hashcode().data(), this->hashcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_FilePath;
        break;
      }

      // optional string FilePath = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FilePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_AppVerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 AppVerID = 1;
  if (has_appverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appverid(), output);
  }

  // optional int32 ClientType = 2;
  if (has_clienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clienttype(), output);
  }

  // optional bool IsActive = 3;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isactive(), output);
  }

  // optional int64 FileSize = 4;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->filesize(), output);
  }

  // optional string AppVerCode = 5;
  if (has_appvercode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appvercode().data(), this->appvercode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->appvercode(), output);
  }

  // optional string HashCode = 6;
  if (has_hashcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashcode().data(), this->hashcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->hashcode(), output);
  }

  // optional string FilePath = 7;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->filepath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_AppVerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 AppVerID = 1;
  if (has_appverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appverid(), target);
  }

  // optional int32 ClientType = 2;
  if (has_clienttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clienttype(), target);
  }

  // optional bool IsActive = 3;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isactive(), target);
  }

  // optional int64 FileSize = 4;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->filesize(), target);
  }

  // optional string AppVerCode = 5;
  if (has_appvercode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appvercode().data(), this->appvercode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->appvercode(), target);
  }

  // optional string HashCode = 6;
  if (has_hashcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashcode().data(), this->hashcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hashcode(), target);
  }

  // optional string FilePath = 7;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filepath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_AppVerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 AppVerID = 1;
    if (has_appverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appverid());
    }

    // optional int32 ClientType = 2;
    if (has_clienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clienttype());
    }

    // optional bool IsActive = 3;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // optional int64 FileSize = 4;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filesize());
    }

    // optional string AppVerCode = 5;
    if (has_appvercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appvercode());
    }

    // optional string HashCode = 6;
    if (has_hashcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hashcode());
    }

    // optional string FilePath = 7;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_AppVerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_AppVerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_AppVerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_AppVerInfo::MergeFrom(const GL_AppVerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appverid()) {
      set_appverid(from.appverid());
    }
    if (from.has_clienttype()) {
      set_clienttype(from.clienttype());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_appvercode()) {
      set_appvercode(from.appvercode());
    }
    if (from.has_hashcode()) {
      set_hashcode(from.hashcode());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_AppVerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_AppVerInfo::CopyFrom(const GL_AppVerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_AppVerInfo::IsInitialized() const {

  return true;
}

void GL_AppVerInfo::Swap(GL_AppVerInfo* other) {
  if (other != this) {
    std::swap(appverid_, other->appverid_);
    std::swap(clienttype_, other->clienttype_);
    std::swap(isactive_, other->isactive_);
    std::swap(filesize_, other->filesize_);
    std::swap(appvercode_, other->appvercode_);
    std::swap(hashcode_, other->hashcode_);
    std::swap(filepath_, other->filepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_AppVerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_AppVerInfo_descriptor_;
  metadata.reflection = GL_AppVerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_AppleseedInfo::kItemIDFieldNumber;
const int GL_AppleseedInfo::kItemNameFieldNumber;
const int GL_AppleseedInfo::kItemDataFieldNumber;
#endif  // !_MSC_VER

GL_AppleseedInfo::GL_AppleseedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_AppleseedInfo::InitAsDefaultInstance() {
}

GL_AppleseedInfo::GL_AppleseedInfo(const GL_AppleseedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_AppleseedInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_AppleseedInfo::~GL_AppleseedInfo() {
  SharedDtor();
}

void GL_AppleseedInfo::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    delete itemname_;
  }
  if (itemdata_ != &::google::protobuf::internal::kEmptyString) {
    delete itemdata_;
  }
  if (this != default_instance_) {
  }
}

void GL_AppleseedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_AppleseedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_AppleseedInfo_descriptor_;
}

const GL_AppleseedInfo& GL_AppleseedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_AppleseedInfo* GL_AppleseedInfo::default_instance_ = NULL;

GL_AppleseedInfo* GL_AppleseedInfo::New() const {
  return new GL_AppleseedInfo;
}

void GL_AppleseedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::kEmptyString) {
        itemname_->clear();
      }
    }
    if (has_itemdata()) {
      if (itemdata_ != &::google::protobuf::internal::kEmptyString) {
        itemdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_AppleseedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemName;
        break;
      }

      // optional string ItemName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ItemData;
        break;
      }

      // optional string ItemData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemdata().data(), this->itemdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_AppleseedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ItemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional string ItemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->itemname(), output);
  }

  // optional string ItemData = 3;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemdata().data(), this->itemdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->itemdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_AppleseedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ItemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional string ItemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional string ItemData = 3;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemdata().data(), this->itemdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->itemdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_AppleseedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional string ItemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional string ItemData = 3;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_AppleseedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_AppleseedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_AppleseedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_AppleseedInfo::MergeFrom(const GL_AppleseedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_itemdata()) {
      set_itemdata(from.itemdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_AppleseedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_AppleseedInfo::CopyFrom(const GL_AppleseedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_AppleseedInfo::IsInitialized() const {

  return true;
}

void GL_AppleseedInfo::Swap(GL_AppleseedInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemname_, other->itemname_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_AppleseedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_AppleseedInfo_descriptor_;
  metadata.reflection = GL_AppleseedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_AreaGeoMapInfo::kAreaIDFieldNumber;
const int GL_AreaGeoMapInfo::kGeoCodeFieldNumber;
#endif  // !_MSC_VER

GL_AreaGeoMapInfo::GL_AreaGeoMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_AreaGeoMapInfo::InitAsDefaultInstance() {
}

GL_AreaGeoMapInfo::GL_AreaGeoMapInfo(const GL_AreaGeoMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_AreaGeoMapInfo::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0;
  geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_AreaGeoMapInfo::~GL_AreaGeoMapInfo() {
  SharedDtor();
}

void GL_AreaGeoMapInfo::SharedDtor() {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    delete geocode_;
  }
  if (this != default_instance_) {
  }
}

void GL_AreaGeoMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_AreaGeoMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_AreaGeoMapInfo_descriptor_;
}

const GL_AreaGeoMapInfo& GL_AreaGeoMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_AreaGeoMapInfo* GL_AreaGeoMapInfo::default_instance_ = NULL;

GL_AreaGeoMapInfo* GL_AreaGeoMapInfo::New() const {
  return new GL_AreaGeoMapInfo;
}

void GL_AreaGeoMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areaid_ = 0;
    if (has_geocode()) {
      if (geocode_ != &::google::protobuf::internal::kEmptyString) {
        geocode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_AreaGeoMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AreaID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GeoCode;
        break;
      }

      // optional string GeoCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GeoCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geocode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geocode().data(), this->geocode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_AreaGeoMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 AreaID = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  // optional string GeoCode = 2;
  if (has_geocode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geocode().data(), this->geocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->geocode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_AreaGeoMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 AreaID = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  // optional string GeoCode = 2;
  if (has_geocode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geocode().data(), this->geocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->geocode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_AreaGeoMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 AreaID = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // optional string GeoCode = 2;
    if (has_geocode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geocode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_AreaGeoMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_AreaGeoMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_AreaGeoMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_AreaGeoMapInfo::MergeFrom(const GL_AreaGeoMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_geocode()) {
      set_geocode(from.geocode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_AreaGeoMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_AreaGeoMapInfo::CopyFrom(const GL_AreaGeoMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_AreaGeoMapInfo::IsInitialized() const {

  return true;
}

void GL_AreaGeoMapInfo::Swap(GL_AreaGeoMapInfo* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(geocode_, other->geocode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_AreaGeoMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_AreaGeoMapInfo_descriptor_;
  metadata.reflection = GL_AreaGeoMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_AreaInfo::kAreaIDFieldNumber;
const int GL_AreaInfo::kDeptIDFieldNumber;
const int GL_AreaInfo::kCreatorIDFieldNumber;
const int GL_AreaInfo::kUpdaterIDFieldNumber;
const int GL_AreaInfo::kCreateTimeFieldNumber;
const int GL_AreaInfo::kUpdateTimeFieldNumber;
const int GL_AreaInfo::kAreaNameFieldNumber;
#endif  // !_MSC_VER

GL_AreaInfo::GL_AreaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_AreaInfo::InitAsDefaultInstance() {
}

GL_AreaInfo::GL_AreaInfo(const GL_AreaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_AreaInfo::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0;
  deptid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  areaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_AreaInfo::~GL_AreaInfo() {
  SharedDtor();
}

void GL_AreaInfo::SharedDtor() {
  if (areaname_ != &::google::protobuf::internal::kEmptyString) {
    delete areaname_;
  }
  if (this != default_instance_) {
  }
}

void GL_AreaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_AreaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_AreaInfo_descriptor_;
}

const GL_AreaInfo& GL_AreaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_AreaInfo* GL_AreaInfo::default_instance_ = NULL;

GL_AreaInfo* GL_AreaInfo::New() const {
  return new GL_AreaInfo;
}

void GL_AreaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areaid_ = 0;
    deptid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_areaname()) {
      if (areaname_ != &::google::protobuf::internal::kEmptyString) {
        areaname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_AreaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AreaID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DeptID;
        break;
      }

      // optional int32 DeptID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeptID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deptid_)));
          set_has_deptid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CreatorID;
        break;
      }

      // optional int32 CreatorID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_UpdaterID;
        break;
      }

      // optional int32 UpdaterID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CreateTime;
        break;
      }

      // optional int64 CreateTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_UpdateTime;
        break;
      }

      // optional int64 UpdateTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_AreaName;
        break;
      }

      // optional string AreaName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AreaName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_areaname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->areaname().data(), this->areaname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_AreaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 AreaID = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  // optional int32 DeptID = 2;
  if (has_deptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->deptid(), output);
  }

  // optional int32 CreatorID = 3;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->creatorid(), output);
  }

  // optional int32 UpdaterID = 4;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->updaterid(), output);
  }

  // optional int64 CreateTime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->createtime(), output);
  }

  // optional int64 UpdateTime = 6;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->updatetime(), output);
  }

  // optional string AreaName = 7;
  if (has_areaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areaname().data(), this->areaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->areaname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_AreaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 AreaID = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  // optional int32 DeptID = 2;
  if (has_deptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->deptid(), target);
  }

  // optional int32 CreatorID = 3;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->creatorid(), target);
  }

  // optional int32 UpdaterID = 4;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->updaterid(), target);
  }

  // optional int64 CreateTime = 5;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->createtime(), target);
  }

  // optional int64 UpdateTime = 6;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->updatetime(), target);
  }

  // optional string AreaName = 7;
  if (has_areaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areaname().data(), this->areaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->areaname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_AreaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 AreaID = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // optional int32 DeptID = 2;
    if (has_deptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deptid());
    }

    // optional int32 CreatorID = 3;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // optional int32 UpdaterID = 4;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // optional int64 CreateTime = 5;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int64 UpdateTime = 6;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // optional string AreaName = 7;
    if (has_areaname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->areaname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_AreaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_AreaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_AreaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_AreaInfo::MergeFrom(const GL_AreaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_deptid()) {
      set_deptid(from.deptid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_areaname()) {
      set_areaname(from.areaname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_AreaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_AreaInfo::CopyFrom(const GL_AreaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_AreaInfo::IsInitialized() const {

  return true;
}

void GL_AreaInfo::Swap(GL_AreaInfo* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(deptid_, other->deptid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(areaname_, other->areaname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_AreaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_AreaInfo_descriptor_;
  metadata.reflection = GL_AreaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_BaseBoardInfo::kCabShapeFieldNumber;
const int GL_BaseBoardInfo::kCabGapTypeFieldNumber;
const int GL_BaseBoardInfo::kBoardTypeFieldNumber;
const int GL_BaseBoardInfo::kBoardPositionFieldNumber;
const int GL_BaseBoardInfo::kFactoryIDFieldNumber;
const int GL_BaseBoardInfo::kXFormulaFieldNumber;
const int GL_BaseBoardInfo::kYFormulaFieldNumber;
const int GL_BaseBoardInfo::kXDockFieldNumber;
const int GL_BaseBoardInfo::kYDockFieldNumber;
const int GL_BaseBoardInfo::kZDockFieldNumber;
const int GL_BaseBoardInfo::kXOffsetFieldNumber;
const int GL_BaseBoardInfo::kYOffsetFieldNumber;
const int GL_BaseBoardInfo::kZOffsetFieldNumber;
const int GL_BaseBoardInfo::kArcXFieldNumber;
const int GL_BaseBoardInfo::kArcYFieldNumber;
const int GL_BaseBoardInfo::kArcZFieldNumber;
const int GL_BaseBoardInfo::kNameFieldNumber;
#endif  // !_MSC_VER

GL_BaseBoardInfo::GL_BaseBoardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_BaseBoardInfo::InitAsDefaultInstance() {
}

GL_BaseBoardInfo::GL_BaseBoardInfo(const GL_BaseBoardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_BaseBoardInfo::SharedCtor() {
  _cached_size_ = 0;
  cabshape_ = 0;
  cabgaptype_ = 0;
  boardtype_ = 0;
  boardposition_ = 0;
  factoryid_ = 0;
  xformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yformula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xdock_ = 0;
  ydock_ = 0;
  zdock_ = 0;
  xoffset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yoffset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoffset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arcx_ = 0;
  arcy_ = 0;
  arcz_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_BaseBoardInfo::~GL_BaseBoardInfo() {
  SharedDtor();
}

void GL_BaseBoardInfo::SharedDtor() {
  if (xformula_ != &::google::protobuf::internal::kEmptyString) {
    delete xformula_;
  }
  if (yformula_ != &::google::protobuf::internal::kEmptyString) {
    delete yformula_;
  }
  if (xoffset_ != &::google::protobuf::internal::kEmptyString) {
    delete xoffset_;
  }
  if (yoffset_ != &::google::protobuf::internal::kEmptyString) {
    delete yoffset_;
  }
  if (zoffset_ != &::google::protobuf::internal::kEmptyString) {
    delete zoffset_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GL_BaseBoardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_BaseBoardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_BaseBoardInfo_descriptor_;
}

const GL_BaseBoardInfo& GL_BaseBoardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_BaseBoardInfo* GL_BaseBoardInfo::default_instance_ = NULL;

GL_BaseBoardInfo* GL_BaseBoardInfo::New() const {
  return new GL_BaseBoardInfo;
}

void GL_BaseBoardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cabshape_ = 0;
    cabgaptype_ = 0;
    boardtype_ = 0;
    boardposition_ = 0;
    factoryid_ = 0;
    if (has_xformula()) {
      if (xformula_ != &::google::protobuf::internal::kEmptyString) {
        xformula_->clear();
      }
    }
    if (has_yformula()) {
      if (yformula_ != &::google::protobuf::internal::kEmptyString) {
        yformula_->clear();
      }
    }
    xdock_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ydock_ = 0;
    zdock_ = 0;
    if (has_xoffset()) {
      if (xoffset_ != &::google::protobuf::internal::kEmptyString) {
        xoffset_->clear();
      }
    }
    if (has_yoffset()) {
      if (yoffset_ != &::google::protobuf::internal::kEmptyString) {
        yoffset_->clear();
      }
    }
    if (has_zoffset()) {
      if (zoffset_ != &::google::protobuf::internal::kEmptyString) {
        zoffset_->clear();
      }
    }
    arcx_ = 0;
    arcy_ = 0;
    arcz_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_BaseBoardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CabShape = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabshape_)));
          set_has_cabshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CabGapType;
        break;
      }

      // optional int32 CabGapType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CabGapType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cabgaptype_)));
          set_has_cabgaptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BoardType;
        break;
      }

      // optional int32 BoardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BoardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boardtype_)));
          set_has_boardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BoardPosition;
        break;
      }

      // optional int32 BoardPosition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BoardPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boardposition_)));
          set_has_boardposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // optional int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_XFormula;
        break;
      }

      // optional string XFormula = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xformula().data(), this->xformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_YFormula;
        break;
      }

      // optional string YFormula = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YFormula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yformula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yformula().data(), this->yformula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_XDock;
        break;
      }

      // optional int32 XDock = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_XDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdock_)));
          set_has_xdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_YDock;
        break;
      }

      // optional int32 YDock = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydock_)));
          set_has_ydock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ZDock;
        break;
      }

      // optional int32 ZDock = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZDock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zdock_)));
          set_has_zdock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_XOffset;
        break;
      }

      // optional string XOffset = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_XOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xoffset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xoffset().data(), this->xoffset().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_YOffset;
        break;
      }

      // optional string YOffset = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_YOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yoffset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yoffset().data(), this->yoffset().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ZOffset;
        break;
      }

      // optional string ZOffset = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ZOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoffset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoffset().data(), this->zoffset().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_ArcX;
        break;
      }

      // optional double ArcX = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcx_)));
          set_has_arcx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_ArcY;
        break;
      }

      // optional double ArcY = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcy_)));
          set_has_arcy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_ArcZ;
        break;
      }

      // optional double ArcZ = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ArcZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arcz_)));
          set_has_arcz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_Name;
        break;
      }

      // optional string Name = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_BaseBoardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CabShape = 1;
  if (has_cabshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cabshape(), output);
  }

  // optional int32 CabGapType = 2;
  if (has_cabgaptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cabgaptype(), output);
  }

  // optional int32 BoardType = 3;
  if (has_boardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boardtype(), output);
  }

  // optional int32 BoardPosition = 4;
  if (has_boardposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boardposition(), output);
  }

  // optional int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  // optional string XFormula = 6;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->xformula(), output);
  }

  // optional string YFormula = 7;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->yformula(), output);
  }

  // optional int32 XDock = 8;
  if (has_xdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->xdock(), output);
  }

  // optional int32 YDock = 9;
  if (has_ydock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ydock(), output);
  }

  // optional int32 ZDock = 10;
  if (has_zdock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->zdock(), output);
  }

  // optional string XOffset = 11;
  if (has_xoffset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffset().data(), this->xoffset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->xoffset(), output);
  }

  // optional string YOffset = 12;
  if (has_yoffset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffset().data(), this->yoffset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->yoffset(), output);
  }

  // optional string ZOffset = 13;
  if (has_zoffset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffset().data(), this->zoffset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->zoffset(), output);
  }

  // optional double ArcX = 14;
  if (has_arcx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->arcx(), output);
  }

  // optional double ArcY = 15;
  if (has_arcy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->arcy(), output);
  }

  // optional double ArcZ = 16;
  if (has_arcz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->arcz(), output);
  }

  // optional string Name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_BaseBoardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CabShape = 1;
  if (has_cabshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cabshape(), target);
  }

  // optional int32 CabGapType = 2;
  if (has_cabgaptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cabgaptype(), target);
  }

  // optional int32 BoardType = 3;
  if (has_boardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boardtype(), target);
  }

  // optional int32 BoardPosition = 4;
  if (has_boardposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boardposition(), target);
  }

  // optional int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  // optional string XFormula = 6;
  if (has_xformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xformula().data(), this->xformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->xformula(), target);
  }

  // optional string YFormula = 7;
  if (has_yformula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yformula().data(), this->yformula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->yformula(), target);
  }

  // optional int32 XDock = 8;
  if (has_xdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->xdock(), target);
  }

  // optional int32 YDock = 9;
  if (has_ydock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ydock(), target);
  }

  // optional int32 ZDock = 10;
  if (has_zdock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->zdock(), target);
  }

  // optional string XOffset = 11;
  if (has_xoffset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xoffset().data(), this->xoffset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->xoffset(), target);
  }

  // optional string YOffset = 12;
  if (has_yoffset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yoffset().data(), this->yoffset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->yoffset(), target);
  }

  // optional string ZOffset = 13;
  if (has_zoffset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoffset().data(), this->zoffset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->zoffset(), target);
  }

  // optional double ArcX = 14;
  if (has_arcx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->arcx(), target);
  }

  // optional double ArcY = 15;
  if (has_arcy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->arcy(), target);
  }

  // optional double ArcZ = 16;
  if (has_arcz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->arcz(), target);
  }

  // optional string Name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_BaseBoardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CabShape = 1;
    if (has_cabshape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabshape());
    }

    // optional int32 CabGapType = 2;
    if (has_cabgaptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cabgaptype());
    }

    // optional int32 BoardType = 3;
    if (has_boardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boardtype());
    }

    // optional int32 BoardPosition = 4;
    if (has_boardposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boardposition());
    }

    // optional int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // optional string XFormula = 6;
    if (has_xformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xformula());
    }

    // optional string YFormula = 7;
    if (has_yformula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yformula());
    }

    // optional int32 XDock = 8;
    if (has_xdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdock());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 YDock = 9;
    if (has_ydock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydock());
    }

    // optional int32 ZDock = 10;
    if (has_zdock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zdock());
    }

    // optional string XOffset = 11;
    if (has_xoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xoffset());
    }

    // optional string YOffset = 12;
    if (has_yoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yoffset());
    }

    // optional string ZOffset = 13;
    if (has_zoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoffset());
    }

    // optional double ArcX = 14;
    if (has_arcx()) {
      total_size += 1 + 8;
    }

    // optional double ArcY = 15;
    if (has_arcy()) {
      total_size += 1 + 8;
    }

    // optional double ArcZ = 16;
    if (has_arcz()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string Name = 17;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_BaseBoardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_BaseBoardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_BaseBoardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_BaseBoardInfo::MergeFrom(const GL_BaseBoardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cabshape()) {
      set_cabshape(from.cabshape());
    }
    if (from.has_cabgaptype()) {
      set_cabgaptype(from.cabgaptype());
    }
    if (from.has_boardtype()) {
      set_boardtype(from.boardtype());
    }
    if (from.has_boardposition()) {
      set_boardposition(from.boardposition());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_xformula()) {
      set_xformula(from.xformula());
    }
    if (from.has_yformula()) {
      set_yformula(from.yformula());
    }
    if (from.has_xdock()) {
      set_xdock(from.xdock());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ydock()) {
      set_ydock(from.ydock());
    }
    if (from.has_zdock()) {
      set_zdock(from.zdock());
    }
    if (from.has_xoffset()) {
      set_xoffset(from.xoffset());
    }
    if (from.has_yoffset()) {
      set_yoffset(from.yoffset());
    }
    if (from.has_zoffset()) {
      set_zoffset(from.zoffset());
    }
    if (from.has_arcx()) {
      set_arcx(from.arcx());
    }
    if (from.has_arcy()) {
      set_arcy(from.arcy());
    }
    if (from.has_arcz()) {
      set_arcz(from.arcz());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_BaseBoardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_BaseBoardInfo::CopyFrom(const GL_BaseBoardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_BaseBoardInfo::IsInitialized() const {

  return true;
}

void GL_BaseBoardInfo::Swap(GL_BaseBoardInfo* other) {
  if (other != this) {
    std::swap(cabshape_, other->cabshape_);
    std::swap(cabgaptype_, other->cabgaptype_);
    std::swap(boardtype_, other->boardtype_);
    std::swap(boardposition_, other->boardposition_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(xformula_, other->xformula_);
    std::swap(yformula_, other->yformula_);
    std::swap(xdock_, other->xdock_);
    std::swap(ydock_, other->ydock_);
    std::swap(zdock_, other->zdock_);
    std::swap(xoffset_, other->xoffset_);
    std::swap(yoffset_, other->yoffset_);
    std::swap(zoffset_, other->zoffset_);
    std::swap(arcx_, other->arcx_);
    std::swap(arcy_, other->arcy_);
    std::swap(arcz_, other->arcz_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_BaseBoardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_BaseBoardInfo_descriptor_;
  metadata.reflection = GL_BaseBoardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_ChargeLogInfo::kLogIDFieldNumber;
const int GL_ChargeLogInfo::kCardNoFieldNumber;
const int GL_ChargeLogInfo::kFactoryIDFieldNumber;
const int GL_ChargeLogInfo::kShopIDFieldNumber;
const int GL_ChargeLogInfo::kUserIDFieldNumber;
#endif  // !_MSC_VER

GL_ChargeLogInfo::GL_ChargeLogInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_ChargeLogInfo::InitAsDefaultInstance() {
}

GL_ChargeLogInfo::GL_ChargeLogInfo(const GL_ChargeLogInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_ChargeLogInfo::SharedCtor() {
  _cached_size_ = 0;
  logid_ = 0;
  cardno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  factoryid_ = 0;
  shopid_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_ChargeLogInfo::~GL_ChargeLogInfo() {
  SharedDtor();
}

void GL_ChargeLogInfo::SharedDtor() {
  if (cardno_ != &::google::protobuf::internal::kEmptyString) {
    delete cardno_;
  }
  if (this != default_instance_) {
  }
}

void GL_ChargeLogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_ChargeLogInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_ChargeLogInfo_descriptor_;
}

const GL_ChargeLogInfo& GL_ChargeLogInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_ChargeLogInfo* GL_ChargeLogInfo::default_instance_ = NULL;

GL_ChargeLogInfo* GL_ChargeLogInfo::New() const {
  return new GL_ChargeLogInfo;
}

void GL_ChargeLogInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logid_ = 0;
    if (has_cardno()) {
      if (cardno_ != &::google::protobuf::internal::kEmptyString) {
        cardno_->clear();
      }
    }
    factoryid_ = 0;
    shopid_ = 0;
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_ChargeLogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LogID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logid_)));
          set_has_logid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CardNo;
        break;
      }

      // optional string CardNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardno().data(), this->cardno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FactoryID;
        break;
      }

      // optional int32 FactoryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ShopID;
        break;
      }

      // optional int32 ShopID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShopID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_UserID;
        break;
      }

      // optional int32 UserID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_ChargeLogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LogID = 1;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->logid(), output);
  }

  // optional string CardNo = 2;
  if (has_cardno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardno().data(), this->cardno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cardno(), output);
  }

  // optional int32 FactoryID = 3;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->factoryid(), output);
  }

  // optional int32 ShopID = 4;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shopid(), output);
  }

  // optional int32 UserID = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_ChargeLogInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LogID = 1;
  if (has_logid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->logid(), target);
  }

  // optional string CardNo = 2;
  if (has_cardno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardno().data(), this->cardno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cardno(), target);
  }

  // optional int32 FactoryID = 3;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->factoryid(), target);
  }

  // optional int32 ShopID = 4;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shopid(), target);
  }

  // optional int32 UserID = 5;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_ChargeLogInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LogID = 1;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logid());
    }

    // optional string CardNo = 2;
    if (has_cardno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardno());
    }

    // optional int32 FactoryID = 3;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // optional int32 ShopID = 4;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

    // optional int32 UserID = 5;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_ChargeLogInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_ChargeLogInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_ChargeLogInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_ChargeLogInfo::MergeFrom(const GL_ChargeLogInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_cardno()) {
      set_cardno(from.cardno());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_ChargeLogInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_ChargeLogInfo::CopyFrom(const GL_ChargeLogInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_ChargeLogInfo::IsInitialized() const {

  return true;
}

void GL_ChargeLogInfo::Swap(GL_ChargeLogInfo* other) {
  if (other != this) {
    std::swap(logid_, other->logid_);
    std::swap(cardno_, other->cardno_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(shopid_, other->shopid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_ChargeLogInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_ChargeLogInfo_descriptor_;
  metadata.reflection = GL_ChargeLogInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_DeptInfo::kDeptIDFieldNumber;
const int GL_DeptInfo::kParentIDFieldNumber;
const int GL_DeptInfo::kIsDelFieldNumber;
const int GL_DeptInfo::kDTypeIDFieldNumber;
const int GL_DeptInfo::kIncOrderFieldNumber;
const int GL_DeptInfo::kShowOrderFieldNumber;
const int GL_DeptInfo::kCreatorIDFieldNumber;
const int GL_DeptInfo::kUpdaterIDFieldNumber;
const int GL_DeptInfo::kCreateTimeFieldNumber;
const int GL_DeptInfo::kUpdateTimeFieldNumber;
const int GL_DeptInfo::kGeoCodeFieldNumber;
const int GL_DeptInfo::kDeptCodeFieldNumber;
const int GL_DeptInfo::kDeptNameFieldNumber;
const int GL_DeptInfo::kPostcodeFieldNumber;
const int GL_DeptInfo::kTelFieldNumber;
const int GL_DeptInfo::kContacterFieldNumber;
const int GL_DeptInfo::kContactAddressFieldNumber;
const int GL_DeptInfo::kDeptMemoFieldNumber;
#endif  // !_MSC_VER

GL_DeptInfo::GL_DeptInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_DeptInfo::InitAsDefaultInstance() {
}

GL_DeptInfo::GL_DeptInfo(const GL_DeptInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_DeptInfo::SharedCtor() {
  _cached_size_ = 0;
  deptid_ = 0;
  parentid_ = 0;
  isdel_ = false;
  dtypeid_ = 0;
  incorder_ = 0;
  showorder_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deptcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deptname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  postcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contacter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contactaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deptmemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_DeptInfo::~GL_DeptInfo() {
  SharedDtor();
}

void GL_DeptInfo::SharedDtor() {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    delete geocode_;
  }
  if (deptcode_ != &::google::protobuf::internal::kEmptyString) {
    delete deptcode_;
  }
  if (deptname_ != &::google::protobuf::internal::kEmptyString) {
    delete deptname_;
  }
  if (postcode_ != &::google::protobuf::internal::kEmptyString) {
    delete postcode_;
  }
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    delete tel_;
  }
  if (contacter_ != &::google::protobuf::internal::kEmptyString) {
    delete contacter_;
  }
  if (contactaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete contactaddress_;
  }
  if (deptmemo_ != &::google::protobuf::internal::kEmptyString) {
    delete deptmemo_;
  }
  if (this != default_instance_) {
  }
}

void GL_DeptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_DeptInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_DeptInfo_descriptor_;
}

const GL_DeptInfo& GL_DeptInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_DeptInfo* GL_DeptInfo::default_instance_ = NULL;

GL_DeptInfo* GL_DeptInfo::New() const {
  return new GL_DeptInfo;
}

void GL_DeptInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deptid_ = 0;
    parentid_ = 0;
    isdel_ = false;
    dtypeid_ = 0;
    incorder_ = 0;
    showorder_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_geocode()) {
      if (geocode_ != &::google::protobuf::internal::kEmptyString) {
        geocode_->clear();
      }
    }
    if (has_deptcode()) {
      if (deptcode_ != &::google::protobuf::internal::kEmptyString) {
        deptcode_->clear();
      }
    }
    if (has_deptname()) {
      if (deptname_ != &::google::protobuf::internal::kEmptyString) {
        deptname_->clear();
      }
    }
    if (has_postcode()) {
      if (postcode_ != &::google::protobuf::internal::kEmptyString) {
        postcode_->clear();
      }
    }
    if (has_tel()) {
      if (tel_ != &::google::protobuf::internal::kEmptyString) {
        tel_->clear();
      }
    }
    if (has_contacter()) {
      if (contacter_ != &::google::protobuf::internal::kEmptyString) {
        contacter_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_contactaddress()) {
      if (contactaddress_ != &::google::protobuf::internal::kEmptyString) {
        contactaddress_->clear();
      }
    }
    if (has_deptmemo()) {
      if (deptmemo_ != &::google::protobuf::internal::kEmptyString) {
        deptmemo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_DeptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 DeptID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deptid_)));
          set_has_deptid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ParentID;
        break;
      }

      // optional int32 ParentID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentid_)));
          set_has_parentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsDel;
        break;
      }

      // optional bool IsDel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DTypeID;
        break;
      }

      // optional int32 DTypeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtypeid_)));
          set_has_dtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IncOrder;
        break;
      }

      // optional int32 IncOrder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IncOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &incorder_)));
          set_has_incorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ShowOrder;
        break;
      }

      // optional int32 ShowOrder = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showorder_)));
          set_has_showorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CreatorID;
        break;
      }

      // optional int32 CreatorID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UpdaterID;
        break;
      }

      // optional int32 UpdaterID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CreateTime;
        break;
      }

      // optional int64 CreateTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_UpdateTime;
        break;
      }

      // optional int64 UpdateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_GeoCode;
        break;
      }

      // optional string GeoCode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GeoCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geocode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geocode().data(), this->geocode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_DeptCode;
        break;
      }

      // optional string DeptCode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeptCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deptcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deptcode().data(), this->deptcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_DeptName;
        break;
      }

      // optional string DeptName = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeptName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deptname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deptname().data(), this->deptname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_Postcode;
        break;
      }

      // optional string Postcode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Postcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->postcode().data(), this->postcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_Tel;
        break;
      }

      // optional string Tel = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tel().data(), this->tel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_Contacter;
        break;
      }

      // optional string Contacter = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Contacter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contacter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contacter().data(), this->contacter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_ContactAddress;
        break;
      }

      // optional string ContactAddress = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContactAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contactaddress().data(), this->contactaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_DeptMemo;
        break;
      }

      // optional string DeptMemo = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeptMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deptmemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deptmemo().data(), this->deptmemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_DeptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 DeptID = 1;
  if (has_deptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deptid(), output);
  }

  // optional int32 ParentID = 2;
  if (has_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parentid(), output);
  }

  // optional bool IsDel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // optional int32 DTypeID = 4;
  if (has_dtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dtypeid(), output);
  }

  // optional int32 IncOrder = 5;
  if (has_incorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->incorder(), output);
  }

  // optional int32 ShowOrder = 6;
  if (has_showorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->showorder(), output);
  }

  // optional int32 CreatorID = 7;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->creatorid(), output);
  }

  // optional int32 UpdaterID = 8;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->updaterid(), output);
  }

  // optional int64 CreateTime = 9;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->createtime(), output);
  }

  // optional int64 UpdateTime = 10;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->updatetime(), output);
  }

  // optional string GeoCode = 11;
  if (has_geocode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geocode().data(), this->geocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->geocode(), output);
  }

  // optional string DeptCode = 12;
  if (has_deptcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deptcode().data(), this->deptcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->deptcode(), output);
  }

  // optional string DeptName = 13;
  if (has_deptname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deptname().data(), this->deptname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->deptname(), output);
  }

  // optional string Postcode = 14;
  if (has_postcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postcode().data(), this->postcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->postcode(), output);
  }

  // optional string Tel = 15;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->tel(), output);
  }

  // optional string Contacter = 16;
  if (has_contacter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contacter().data(), this->contacter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->contacter(), output);
  }

  // optional string ContactAddress = 17;
  if (has_contactaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactaddress().data(), this->contactaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->contactaddress(), output);
  }

  // optional string DeptMemo = 18;
  if (has_deptmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deptmemo().data(), this->deptmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->deptmemo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_DeptInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 DeptID = 1;
  if (has_deptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deptid(), target);
  }

  // optional int32 ParentID = 2;
  if (has_parentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parentid(), target);
  }

  // optional bool IsDel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // optional int32 DTypeID = 4;
  if (has_dtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dtypeid(), target);
  }

  // optional int32 IncOrder = 5;
  if (has_incorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->incorder(), target);
  }

  // optional int32 ShowOrder = 6;
  if (has_showorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->showorder(), target);
  }

  // optional int32 CreatorID = 7;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->creatorid(), target);
  }

  // optional int32 UpdaterID = 8;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->updaterid(), target);
  }

  // optional int64 CreateTime = 9;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->createtime(), target);
  }

  // optional int64 UpdateTime = 10;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->updatetime(), target);
  }

  // optional string GeoCode = 11;
  if (has_geocode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geocode().data(), this->geocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->geocode(), target);
  }

  // optional string DeptCode = 12;
  if (has_deptcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deptcode().data(), this->deptcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->deptcode(), target);
  }

  // optional string DeptName = 13;
  if (has_deptname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deptname().data(), this->deptname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->deptname(), target);
  }

  // optional string Postcode = 14;
  if (has_postcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postcode().data(), this->postcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->postcode(), target);
  }

  // optional string Tel = 15;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->tel(), target);
  }

  // optional string Contacter = 16;
  if (has_contacter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contacter().data(), this->contacter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->contacter(), target);
  }

  // optional string ContactAddress = 17;
  if (has_contactaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactaddress().data(), this->contactaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->contactaddress(), target);
  }

  // optional string DeptMemo = 18;
  if (has_deptmemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deptmemo().data(), this->deptmemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->deptmemo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_DeptInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 DeptID = 1;
    if (has_deptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deptid());
    }

    // optional int32 ParentID = 2;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parentid());
    }

    // optional bool IsDel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // optional int32 DTypeID = 4;
    if (has_dtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dtypeid());
    }

    // optional int32 IncOrder = 5;
    if (has_incorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->incorder());
    }

    // optional int32 ShowOrder = 6;
    if (has_showorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showorder());
    }

    // optional int32 CreatorID = 7;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // optional int32 UpdaterID = 8;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 CreateTime = 9;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int64 UpdateTime = 10;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // optional string GeoCode = 11;
    if (has_geocode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geocode());
    }

    // optional string DeptCode = 12;
    if (has_deptcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deptcode());
    }

    // optional string DeptName = 13;
    if (has_deptname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deptname());
    }

    // optional string Postcode = 14;
    if (has_postcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postcode());
    }

    // optional string Tel = 15;
    if (has_tel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tel());
    }

    // optional string Contacter = 16;
    if (has_contacter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contacter());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string ContactAddress = 17;
    if (has_contactaddress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contactaddress());
    }

    // optional string DeptMemo = 18;
    if (has_deptmemo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deptmemo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_DeptInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_DeptInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_DeptInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_DeptInfo::MergeFrom(const GL_DeptInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deptid()) {
      set_deptid(from.deptid());
    }
    if (from.has_parentid()) {
      set_parentid(from.parentid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_dtypeid()) {
      set_dtypeid(from.dtypeid());
    }
    if (from.has_incorder()) {
      set_incorder(from.incorder());
    }
    if (from.has_showorder()) {
      set_showorder(from.showorder());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_geocode()) {
      set_geocode(from.geocode());
    }
    if (from.has_deptcode()) {
      set_deptcode(from.deptcode());
    }
    if (from.has_deptname()) {
      set_deptname(from.deptname());
    }
    if (from.has_postcode()) {
      set_postcode(from.postcode());
    }
    if (from.has_tel()) {
      set_tel(from.tel());
    }
    if (from.has_contacter()) {
      set_contacter(from.contacter());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_contactaddress()) {
      set_contactaddress(from.contactaddress());
    }
    if (from.has_deptmemo()) {
      set_deptmemo(from.deptmemo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_DeptInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_DeptInfo::CopyFrom(const GL_DeptInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_DeptInfo::IsInitialized() const {

  return true;
}

void GL_DeptInfo::Swap(GL_DeptInfo* other) {
  if (other != this) {
    std::swap(deptid_, other->deptid_);
    std::swap(parentid_, other->parentid_);
    std::swap(isdel_, other->isdel_);
    std::swap(dtypeid_, other->dtypeid_);
    std::swap(incorder_, other->incorder_);
    std::swap(showorder_, other->showorder_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(geocode_, other->geocode_);
    std::swap(deptcode_, other->deptcode_);
    std::swap(deptname_, other->deptname_);
    std::swap(postcode_, other->postcode_);
    std::swap(tel_, other->tel_);
    std::swap(contacter_, other->contacter_);
    std::swap(contactaddress_, other->contactaddress_);
    std::swap(deptmemo_, other->deptmemo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_DeptInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_DeptInfo_descriptor_;
  metadata.reflection = GL_DeptInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_DesignerConfigInfo::kEnableSnapFieldNumber;
const int GL_DesignerConfigInfo::kAllPoleFieldNumber;
const int GL_DesignerConfigInfo::kCrossPoleFieldNumber;
const int GL_DesignerConfigInfo::kWallPoleFieldNumber;
const int GL_DesignerConfigInfo::kHotspotCaptureFieldNumber;
const int GL_DesignerConfigInfo::kGridShowFieldNumber;
const int GL_DesignerConfigInfo::kAngleStepFieldNumber;
const int GL_DesignerConfigInfo::kTargetRangeFieldNumber;
const int GL_DesignerConfigInfo::kDesignBGIDFieldNumber;
const int GL_DesignerConfigInfo::kPrintBGIDFieldNumber;
const int GL_DesignerConfigInfo::kGridBigIDFieldNumber;
const int GL_DesignerConfigInfo::kGridSmallIDFieldNumber;
const int GL_DesignerConfigInfo::kHotspotRotateIDFieldNumber;
const int GL_DesignerConfigInfo::kHotspotNormalIDFieldNumber;
const int GL_DesignerConfigInfo::kHotspotSelectIDFieldNumber;
const int GL_DesignerConfigInfo::kCreatePointIDFieldNumber;
const int GL_DesignerConfigInfo::kDesignBGColorFieldNumber;
const int GL_DesignerConfigInfo::kPrintBGColorFieldNumber;
const int GL_DesignerConfigInfo::kGridBigColorFieldNumber;
const int GL_DesignerConfigInfo::kGridSmallColorFieldNumber;
const int GL_DesignerConfigInfo::kHotspotRotateColorFieldNumber;
const int GL_DesignerConfigInfo::kHotspotNormalColorFieldNumber;
const int GL_DesignerConfigInfo::kHotspotSelectColorFieldNumber;
const int GL_DesignerConfigInfo::kCreatePointColorFieldNumber;
const int GL_DesignerConfigInfo::kUserIDFieldNumber;
const int GL_DesignerConfigInfo::kWallThicknessFieldNumber;
const int GL_DesignerConfigInfo::kWallHeightFieldNumber;
const int GL_DesignerConfigInfo::kBaseLineLenFieldNumber;
const int GL_DesignerConfigInfo::kGridWidthFieldNumber;
const int GL_DesignerConfigInfo::kSnapRangeFieldNumber;
const int GL_DesignerConfigInfo::kSkirtLineOffsetLenFieldNumber;
const int GL_DesignerConfigInfo::kBottomLineOffsetLenFieldNumber;
const int GL_DesignerConfigInfo::kTopLineOffsetLenFieldNumber;
#endif  // !_MSC_VER

GL_DesignerConfigInfo::GL_DesignerConfigInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_DesignerConfigInfo::InitAsDefaultInstance() {
}

GL_DesignerConfigInfo::GL_DesignerConfigInfo(const GL_DesignerConfigInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_DesignerConfigInfo::SharedCtor() {
  _cached_size_ = 0;
  enablesnap_ = false;
  allpole_ = false;
  crosspole_ = false;
  wallpole_ = false;
  hotspotcapture_ = false;
  gridshow_ = false;
  anglestep_ = 0;
  targetrange_ = 0;
  designbgid_ = 0;
  printbgid_ = 0;
  gridbigid_ = 0;
  gridsmallid_ = 0;
  hotspotrotateid_ = 0;
  hotspotnormalid_ = 0;
  hotspotselectid_ = 0;
  createpointid_ = 0;
  designbgcolor_ = GOOGLE_LONGLONG(0);
  printbgcolor_ = GOOGLE_LONGLONG(0);
  gridbigcolor_ = GOOGLE_LONGLONG(0);
  gridsmallcolor_ = GOOGLE_LONGLONG(0);
  hotspotrotatecolor_ = GOOGLE_LONGLONG(0);
  hotspotnormalcolor_ = GOOGLE_LONGLONG(0);
  hotspotselectcolor_ = GOOGLE_LONGLONG(0);
  createpointcolor_ = GOOGLE_LONGLONG(0);
  userid_ = 0;
  wallthickness_ = 0;
  wallheight_ = 0;
  baselinelen_ = 0;
  gridwidth_ = 0;
  snaprange_ = 0;
  skirtlineoffsetlen_ = 0;
  bottomlineoffsetlen_ = 0;
  toplineoffsetlen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_DesignerConfigInfo::~GL_DesignerConfigInfo() {
  SharedDtor();
}

void GL_DesignerConfigInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GL_DesignerConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_DesignerConfigInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_DesignerConfigInfo_descriptor_;
}

const GL_DesignerConfigInfo& GL_DesignerConfigInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_DesignerConfigInfo* GL_DesignerConfigInfo::default_instance_ = NULL;

GL_DesignerConfigInfo* GL_DesignerConfigInfo::New() const {
  return new GL_DesignerConfigInfo;
}

void GL_DesignerConfigInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enablesnap_ = false;
    allpole_ = false;
    crosspole_ = false;
    wallpole_ = false;
    hotspotcapture_ = false;
    gridshow_ = false;
    anglestep_ = 0;
    targetrange_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    designbgid_ = 0;
    printbgid_ = 0;
    gridbigid_ = 0;
    gridsmallid_ = 0;
    hotspotrotateid_ = 0;
    hotspotnormalid_ = 0;
    hotspotselectid_ = 0;
    createpointid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    designbgcolor_ = GOOGLE_LONGLONG(0);
    printbgcolor_ = GOOGLE_LONGLONG(0);
    gridbigcolor_ = GOOGLE_LONGLONG(0);
    gridsmallcolor_ = GOOGLE_LONGLONG(0);
    hotspotrotatecolor_ = GOOGLE_LONGLONG(0);
    hotspotnormalcolor_ = GOOGLE_LONGLONG(0);
    hotspotselectcolor_ = GOOGLE_LONGLONG(0);
    createpointcolor_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    userid_ = 0;
    wallthickness_ = 0;
    wallheight_ = 0;
    baselinelen_ = 0;
    gridwidth_ = 0;
    snaprange_ = 0;
    skirtlineoffsetlen_ = 0;
    bottomlineoffsetlen_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    toplineoffsetlen_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_DesignerConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool EnableSnap = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablesnap_)));
          set_has_enablesnap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AllPole;
        break;
      }

      // optional bool AllPole = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AllPole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allpole_)));
          set_has_allpole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CrossPole;
        break;
      }

      // optional bool CrossPole = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CrossPole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crosspole_)));
          set_has_crosspole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_WallPole;
        break;
      }

      // optional bool WallPole = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WallPole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wallpole_)));
          set_has_wallpole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_HotspotCapture;
        break;
      }

      // optional bool HotspotCapture = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HotspotCapture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hotspotcapture_)));
          set_has_hotspotcapture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_GridShow;
        break;
      }

      // optional bool GridShow = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GridShow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gridshow_)));
          set_has_gridshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_AngleStep;
        break;
      }

      // optional int32 AngleStep = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AngleStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anglestep_)));
          set_has_anglestep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_TargetRange;
        break;
      }

      // optional int32 TargetRange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetrange_)));
          set_has_targetrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_DesignBGID;
        break;
      }

      // optional int32 DesignBGID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignBGID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designbgid_)));
          set_has_designbgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_PrintBGID;
        break;
      }

      // optional int32 PrintBGID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrintBGID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printbgid_)));
          set_has_printbgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_GridBigID;
        break;
      }

      // optional int32 GridBigID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GridBigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridbigid_)));
          set_has_gridbigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_GridSmallID;
        break;
      }

      // optional int32 GridSmallID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GridSmallID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridsmallid_)));
          set_has_gridsmallid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_HotspotRotateID;
        break;
      }

      // optional int32 HotspotRotateID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HotspotRotateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspotrotateid_)));
          set_has_hotspotrotateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_HotspotNormalID;
        break;
      }

      // optional int32 HotspotNormalID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HotspotNormalID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspotnormalid_)));
          set_has_hotspotnormalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_HotspotSelectID;
        break;
      }

      // optional int32 HotspotSelectID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HotspotSelectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspotselectid_)));
          set_has_hotspotselectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_CreatePointID;
        break;
      }

      // optional int32 CreatePointID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatePointID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createpointid_)));
          set_has_createpointid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_DesignBGColor;
        break;
      }

      // optional int64 DesignBGColor = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignBGColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &designbgcolor_)));
          set_has_designbgcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_PrintBGColor;
        break;
      }

      // optional int64 PrintBGColor = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrintBGColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &printbgcolor_)));
          set_has_printbgcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_GridBigColor;
        break;
      }

      // optional int64 GridBigColor = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GridBigColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gridbigcolor_)));
          set_has_gridbigcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_GridSmallColor;
        break;
      }

      // optional int64 GridSmallColor = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GridSmallColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gridsmallcolor_)));
          set_has_gridsmallcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_HotspotRotateColor;
        break;
      }

      // optional int64 HotspotRotateColor = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HotspotRotateColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hotspotrotatecolor_)));
          set_has_hotspotrotatecolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_HotspotNormalColor;
        break;
      }

      // optional int64 HotspotNormalColor = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HotspotNormalColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hotspotnormalcolor_)));
          set_has_hotspotnormalcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_HotspotSelectColor;
        break;
      }

      // optional int64 HotspotSelectColor = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HotspotSelectColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hotspotselectcolor_)));
          set_has_hotspotselectcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_CreatePointColor;
        break;
      }

      // optional int64 CreatePointColor = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatePointColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createpointcolor_)));
          set_has_createpointcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_UserID;
        break;
      }

      // optional int32 UserID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_WallThickness;
        break;
      }

      // optional double WallThickness = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_WallThickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wallthickness_)));
          set_has_wallthickness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_WallHeight;
        break;
      }

      // optional double WallHeight = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_WallHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wallheight_)));
          set_has_wallheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_BaseLineLen;
        break;
      }

      // optional double BaseLineLen = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BaseLineLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &baselinelen_)));
          set_has_baselinelen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_GridWidth;
        break;
      }

      // optional double GridWidth = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GridWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gridwidth_)));
          set_has_gridwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_SnapRange;
        break;
      }

      // optional double SnapRange = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SnapRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snaprange_)));
          set_has_snaprange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_SkirtLineOffsetLen;
        break;
      }

      // optional double SkirtLineOffsetLen = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SkirtLineOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &skirtlineoffsetlen_)));
          set_has_skirtlineoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_BottomLineOffsetLen;
        break;
      }

      // optional double BottomLineOffsetLen = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BottomLineOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bottomlineoffsetlen_)));
          set_has_bottomlineoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_TopLineOffsetLen;
        break;
      }

      // optional double TopLineOffsetLen = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TopLineOffsetLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toplineoffsetlen_)));
          set_has_toplineoffsetlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_DesignerConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool EnableSnap = 1;
  if (has_enablesnap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enablesnap(), output);
  }

  // optional bool AllPole = 2;
  if (has_allpole()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allpole(), output);
  }

  // optional bool CrossPole = 3;
  if (has_crosspole()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->crosspole(), output);
  }

  // optional bool WallPole = 4;
  if (has_wallpole()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->wallpole(), output);
  }

  // optional bool HotspotCapture = 5;
  if (has_hotspotcapture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hotspotcapture(), output);
  }

  // optional bool GridShow = 6;
  if (has_gridshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->gridshow(), output);
  }

  // optional int32 AngleStep = 7;
  if (has_anglestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->anglestep(), output);
  }

  // optional int32 TargetRange = 8;
  if (has_targetrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->targetrange(), output);
  }

  // optional int32 DesignBGID = 9;
  if (has_designbgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->designbgid(), output);
  }

  // optional int32 PrintBGID = 10;
  if (has_printbgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->printbgid(), output);
  }

  // optional int32 GridBigID = 11;
  if (has_gridbigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gridbigid(), output);
  }

  // optional int32 GridSmallID = 12;
  if (has_gridsmallid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gridsmallid(), output);
  }

  // optional int32 HotspotRotateID = 13;
  if (has_hotspotrotateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->hotspotrotateid(), output);
  }

  // optional int32 HotspotNormalID = 14;
  if (has_hotspotnormalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hotspotnormalid(), output);
  }

  // optional int32 HotspotSelectID = 15;
  if (has_hotspotselectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->hotspotselectid(), output);
  }

  // optional int32 CreatePointID = 16;
  if (has_createpointid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->createpointid(), output);
  }

  // optional int64 DesignBGColor = 17;
  if (has_designbgcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->designbgcolor(), output);
  }

  // optional int64 PrintBGColor = 18;
  if (has_printbgcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->printbgcolor(), output);
  }

  // optional int64 GridBigColor = 19;
  if (has_gridbigcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->gridbigcolor(), output);
  }

  // optional int64 GridSmallColor = 20;
  if (has_gridsmallcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->gridsmallcolor(), output);
  }

  // optional int64 HotspotRotateColor = 21;
  if (has_hotspotrotatecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->hotspotrotatecolor(), output);
  }

  // optional int64 HotspotNormalColor = 22;
  if (has_hotspotnormalcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->hotspotnormalcolor(), output);
  }

  // optional int64 HotspotSelectColor = 23;
  if (has_hotspotselectcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->hotspotselectcolor(), output);
  }

  // optional int64 CreatePointColor = 24;
  if (has_createpointcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->createpointcolor(), output);
  }

  // optional int32 UserID = 25;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->userid(), output);
  }

  // optional double WallThickness = 26;
  if (has_wallthickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->wallthickness(), output);
  }

  // optional double WallHeight = 27;
  if (has_wallheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->wallheight(), output);
  }

  // optional double BaseLineLen = 28;
  if (has_baselinelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->baselinelen(), output);
  }

  // optional double GridWidth = 29;
  if (has_gridwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->gridwidth(), output);
  }

  // optional double SnapRange = 30;
  if (has_snaprange()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->snaprange(), output);
  }

  // optional double SkirtLineOffsetLen = 31;
  if (has_skirtlineoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->skirtlineoffsetlen(), output);
  }

  // optional double BottomLineOffsetLen = 32;
  if (has_bottomlineoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->bottomlineoffsetlen(), output);
  }

  // optional double TopLineOffsetLen = 33;
  if (has_toplineoffsetlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->toplineoffsetlen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_DesignerConfigInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool EnableSnap = 1;
  if (has_enablesnap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enablesnap(), target);
  }

  // optional bool AllPole = 2;
  if (has_allpole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allpole(), target);
  }

  // optional bool CrossPole = 3;
  if (has_crosspole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->crosspole(), target);
  }

  // optional bool WallPole = 4;
  if (has_wallpole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->wallpole(), target);
  }

  // optional bool HotspotCapture = 5;
  if (has_hotspotcapture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hotspotcapture(), target);
  }

  // optional bool GridShow = 6;
  if (has_gridshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->gridshow(), target);
  }

  // optional int32 AngleStep = 7;
  if (has_anglestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->anglestep(), target);
  }

  // optional int32 TargetRange = 8;
  if (has_targetrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->targetrange(), target);
  }

  // optional int32 DesignBGID = 9;
  if (has_designbgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->designbgid(), target);
  }

  // optional int32 PrintBGID = 10;
  if (has_printbgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->printbgid(), target);
  }

  // optional int32 GridBigID = 11;
  if (has_gridbigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gridbigid(), target);
  }

  // optional int32 GridSmallID = 12;
  if (has_gridsmallid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gridsmallid(), target);
  }

  // optional int32 HotspotRotateID = 13;
  if (has_hotspotrotateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->hotspotrotateid(), target);
  }

  // optional int32 HotspotNormalID = 14;
  if (has_hotspotnormalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->hotspotnormalid(), target);
  }

  // optional int32 HotspotSelectID = 15;
  if (has_hotspotselectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->hotspotselectid(), target);
  }

  // optional int32 CreatePointID = 16;
  if (has_createpointid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->createpointid(), target);
  }

  // optional int64 DesignBGColor = 17;
  if (has_designbgcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->designbgcolor(), target);
  }

  // optional int64 PrintBGColor = 18;
  if (has_printbgcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->printbgcolor(), target);
  }

  // optional int64 GridBigColor = 19;
  if (has_gridbigcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->gridbigcolor(), target);
  }

  // optional int64 GridSmallColor = 20;
  if (has_gridsmallcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->gridsmallcolor(), target);
  }

  // optional int64 HotspotRotateColor = 21;
  if (has_hotspotrotatecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->hotspotrotatecolor(), target);
  }

  // optional int64 HotspotNormalColor = 22;
  if (has_hotspotnormalcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->hotspotnormalcolor(), target);
  }

  // optional int64 HotspotSelectColor = 23;
  if (has_hotspotselectcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->hotspotselectcolor(), target);
  }

  // optional int64 CreatePointColor = 24;
  if (has_createpointcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->createpointcolor(), target);
  }

  // optional int32 UserID = 25;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->userid(), target);
  }

  // optional double WallThickness = 26;
  if (has_wallthickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->wallthickness(), target);
  }

  // optional double WallHeight = 27;
  if (has_wallheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->wallheight(), target);
  }

  // optional double BaseLineLen = 28;
  if (has_baselinelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->baselinelen(), target);
  }

  // optional double GridWidth = 29;
  if (has_gridwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->gridwidth(), target);
  }

  // optional double SnapRange = 30;
  if (has_snaprange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->snaprange(), target);
  }

  // optional double SkirtLineOffsetLen = 31;
  if (has_skirtlineoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->skirtlineoffsetlen(), target);
  }

  // optional double BottomLineOffsetLen = 32;
  if (has_bottomlineoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->bottomlineoffsetlen(), target);
  }

  // optional double TopLineOffsetLen = 33;
  if (has_toplineoffsetlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->toplineoffsetlen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_DesignerConfigInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool EnableSnap = 1;
    if (has_enablesnap()) {
      total_size += 1 + 1;
    }

    // optional bool AllPole = 2;
    if (has_allpole()) {
      total_size += 1 + 1;
    }

    // optional bool CrossPole = 3;
    if (has_crosspole()) {
      total_size += 1 + 1;
    }

    // optional bool WallPole = 4;
    if (has_wallpole()) {
      total_size += 1 + 1;
    }

    // optional bool HotspotCapture = 5;
    if (has_hotspotcapture()) {
      total_size += 1 + 1;
    }

    // optional bool GridShow = 6;
    if (has_gridshow()) {
      total_size += 1 + 1;
    }

    // optional int32 AngleStep = 7;
    if (has_anglestep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->anglestep());
    }

    // optional int32 TargetRange = 8;
    if (has_targetrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetrange());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 DesignBGID = 9;
    if (has_designbgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designbgid());
    }

    // optional int32 PrintBGID = 10;
    if (has_printbgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printbgid());
    }

    // optional int32 GridBigID = 11;
    if (has_gridbigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridbigid());
    }

    // optional int32 GridSmallID = 12;
    if (has_gridsmallid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridsmallid());
    }

    // optional int32 HotspotRotateID = 13;
    if (has_hotspotrotateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hotspotrotateid());
    }

    // optional int32 HotspotNormalID = 14;
    if (has_hotspotnormalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hotspotnormalid());
    }

    // optional int32 HotspotSelectID = 15;
    if (has_hotspotselectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hotspotselectid());
    }

    // optional int32 CreatePointID = 16;
    if (has_createpointid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createpointid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 DesignBGColor = 17;
    if (has_designbgcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->designbgcolor());
    }

    // optional int64 PrintBGColor = 18;
    if (has_printbgcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->printbgcolor());
    }

    // optional int64 GridBigColor = 19;
    if (has_gridbigcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gridbigcolor());
    }

    // optional int64 GridSmallColor = 20;
    if (has_gridsmallcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gridsmallcolor());
    }

    // optional int64 HotspotRotateColor = 21;
    if (has_hotspotrotatecolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hotspotrotatecolor());
    }

    // optional int64 HotspotNormalColor = 22;
    if (has_hotspotnormalcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hotspotnormalcolor());
    }

    // optional int64 HotspotSelectColor = 23;
    if (has_hotspotselectcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hotspotselectcolor());
    }

    // optional int64 CreatePointColor = 24;
    if (has_createpointcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createpointcolor());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 UserID = 25;
    if (has_userid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional double WallThickness = 26;
    if (has_wallthickness()) {
      total_size += 2 + 8;
    }

    // optional double WallHeight = 27;
    if (has_wallheight()) {
      total_size += 2 + 8;
    }

    // optional double BaseLineLen = 28;
    if (has_baselinelen()) {
      total_size += 2 + 8;
    }

    // optional double GridWidth = 29;
    if (has_gridwidth()) {
      total_size += 2 + 8;
    }

    // optional double SnapRange = 30;
    if (has_snaprange()) {
      total_size += 2 + 8;
    }

    // optional double SkirtLineOffsetLen = 31;
    if (has_skirtlineoffsetlen()) {
      total_size += 2 + 8;
    }

    // optional double BottomLineOffsetLen = 32;
    if (has_bottomlineoffsetlen()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional double TopLineOffsetLen = 33;
    if (has_toplineoffsetlen()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_DesignerConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_DesignerConfigInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_DesignerConfigInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_DesignerConfigInfo::MergeFrom(const GL_DesignerConfigInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enablesnap()) {
      set_enablesnap(from.enablesnap());
    }
    if (from.has_allpole()) {
      set_allpole(from.allpole());
    }
    if (from.has_crosspole()) {
      set_crosspole(from.crosspole());
    }
    if (from.has_wallpole()) {
      set_wallpole(from.wallpole());
    }
    if (from.has_hotspotcapture()) {
      set_hotspotcapture(from.hotspotcapture());
    }
    if (from.has_gridshow()) {
      set_gridshow(from.gridshow());
    }
    if (from.has_anglestep()) {
      set_anglestep(from.anglestep());
    }
    if (from.has_targetrange()) {
      set_targetrange(from.targetrange());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_designbgid()) {
      set_designbgid(from.designbgid());
    }
    if (from.has_printbgid()) {
      set_printbgid(from.printbgid());
    }
    if (from.has_gridbigid()) {
      set_gridbigid(from.gridbigid());
    }
    if (from.has_gridsmallid()) {
      set_gridsmallid(from.gridsmallid());
    }
    if (from.has_hotspotrotateid()) {
      set_hotspotrotateid(from.hotspotrotateid());
    }
    if (from.has_hotspotnormalid()) {
      set_hotspotnormalid(from.hotspotnormalid());
    }
    if (from.has_hotspotselectid()) {
      set_hotspotselectid(from.hotspotselectid());
    }
    if (from.has_createpointid()) {
      set_createpointid(from.createpointid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_designbgcolor()) {
      set_designbgcolor(from.designbgcolor());
    }
    if (from.has_printbgcolor()) {
      set_printbgcolor(from.printbgcolor());
    }
    if (from.has_gridbigcolor()) {
      set_gridbigcolor(from.gridbigcolor());
    }
    if (from.has_gridsmallcolor()) {
      set_gridsmallcolor(from.gridsmallcolor());
    }
    if (from.has_hotspotrotatecolor()) {
      set_hotspotrotatecolor(from.hotspotrotatecolor());
    }
    if (from.has_hotspotnormalcolor()) {
      set_hotspotnormalcolor(from.hotspotnormalcolor());
    }
    if (from.has_hotspotselectcolor()) {
      set_hotspotselectcolor(from.hotspotselectcolor());
    }
    if (from.has_createpointcolor()) {
      set_createpointcolor(from.createpointcolor());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_wallthickness()) {
      set_wallthickness(from.wallthickness());
    }
    if (from.has_wallheight()) {
      set_wallheight(from.wallheight());
    }
    if (from.has_baselinelen()) {
      set_baselinelen(from.baselinelen());
    }
    if (from.has_gridwidth()) {
      set_gridwidth(from.gridwidth());
    }
    if (from.has_snaprange()) {
      set_snaprange(from.snaprange());
    }
    if (from.has_skirtlineoffsetlen()) {
      set_skirtlineoffsetlen(from.skirtlineoffsetlen());
    }
    if (from.has_bottomlineoffsetlen()) {
      set_bottomlineoffsetlen(from.bottomlineoffsetlen());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_toplineoffsetlen()) {
      set_toplineoffsetlen(from.toplineoffsetlen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_DesignerConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_DesignerConfigInfo::CopyFrom(const GL_DesignerConfigInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_DesignerConfigInfo::IsInitialized() const {

  return true;
}

void GL_DesignerConfigInfo::Swap(GL_DesignerConfigInfo* other) {
  if (other != this) {
    std::swap(enablesnap_, other->enablesnap_);
    std::swap(allpole_, other->allpole_);
    std::swap(crosspole_, other->crosspole_);
    std::swap(wallpole_, other->wallpole_);
    std::swap(hotspotcapture_, other->hotspotcapture_);
    std::swap(gridshow_, other->gridshow_);
    std::swap(anglestep_, other->anglestep_);
    std::swap(targetrange_, other->targetrange_);
    std::swap(designbgid_, other->designbgid_);
    std::swap(printbgid_, other->printbgid_);
    std::swap(gridbigid_, other->gridbigid_);
    std::swap(gridsmallid_, other->gridsmallid_);
    std::swap(hotspotrotateid_, other->hotspotrotateid_);
    std::swap(hotspotnormalid_, other->hotspotnormalid_);
    std::swap(hotspotselectid_, other->hotspotselectid_);
    std::swap(createpointid_, other->createpointid_);
    std::swap(designbgcolor_, other->designbgcolor_);
    std::swap(printbgcolor_, other->printbgcolor_);
    std::swap(gridbigcolor_, other->gridbigcolor_);
    std::swap(gridsmallcolor_, other->gridsmallcolor_);
    std::swap(hotspotrotatecolor_, other->hotspotrotatecolor_);
    std::swap(hotspotnormalcolor_, other->hotspotnormalcolor_);
    std::swap(hotspotselectcolor_, other->hotspotselectcolor_);
    std::swap(createpointcolor_, other->createpointcolor_);
    std::swap(userid_, other->userid_);
    std::swap(wallthickness_, other->wallthickness_);
    std::swap(wallheight_, other->wallheight_);
    std::swap(baselinelen_, other->baselinelen_);
    std::swap(gridwidth_, other->gridwidth_);
    std::swap(snaprange_, other->snaprange_);
    std::swap(skirtlineoffsetlen_, other->skirtlineoffsetlen_);
    std::swap(bottomlineoffsetlen_, other->bottomlineoffsetlen_);
    std::swap(toplineoffsetlen_, other->toplineoffsetlen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_DesignerConfigInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_DesignerConfigInfo_descriptor_;
  metadata.reflection = GL_DesignerConfigInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_GTypeInfo::kGTypeIDFieldNumber;
const int GL_GTypeInfo::kGTypeNameFieldNumber;
#endif  // !_MSC_VER

GL_GTypeInfo::GL_GTypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_GTypeInfo::InitAsDefaultInstance() {
}

GL_GTypeInfo::GL_GTypeInfo(const GL_GTypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_GTypeInfo::SharedCtor() {
  _cached_size_ = 0;
  gtypeid_ = 0;
  gtypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_GTypeInfo::~GL_GTypeInfo() {
  SharedDtor();
}

void GL_GTypeInfo::SharedDtor() {
  if (gtypename_ != &::google::protobuf::internal::kEmptyString) {
    delete gtypename_;
  }
  if (this != default_instance_) {
  }
}

void GL_GTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_GTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_GTypeInfo_descriptor_;
}

const GL_GTypeInfo& GL_GTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_GTypeInfo* GL_GTypeInfo::default_instance_ = NULL;

GL_GTypeInfo* GL_GTypeInfo::New() const {
  return new GL_GTypeInfo;
}

void GL_GTypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gtypeid_ = 0;
    if (has_gtypename()) {
      if (gtypename_ != &::google::protobuf::internal::kEmptyString) {
        gtypename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_GTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GTypeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GTypeName;
        break;
      }

      // optional string GTypeName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GTypeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gtypename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gtypename().data(), this->gtypename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_GTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 GTypeID = 1;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gtypeid(), output);
  }

  // optional string GTypeName = 2;
  if (has_gtypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gtypename().data(), this->gtypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gtypename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_GTypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 GTypeID = 1;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gtypeid(), target);
  }

  // optional string GTypeName = 2;
  if (has_gtypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gtypename().data(), this->gtypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gtypename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_GTypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GTypeID = 1;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // optional string GTypeName = 2;
    if (has_gtypename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gtypename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_GTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_GTypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_GTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_GTypeInfo::MergeFrom(const GL_GTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_gtypename()) {
      set_gtypename(from.gtypename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_GTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_GTypeInfo::CopyFrom(const GL_GTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_GTypeInfo::IsInitialized() const {

  return true;
}

void GL_GTypeInfo::Swap(GL_GTypeInfo* other) {
  if (other != this) {
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(gtypename_, other->gtypename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_GTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_GTypeInfo_descriptor_;
  metadata.reflection = GL_GTypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_GeoCodeInfo::kGeoCodeFieldNumber;
const int GL_GeoCodeInfo::kGeoNameFieldNumber;
#endif  // !_MSC_VER

GL_GeoCodeInfo::GL_GeoCodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_GeoCodeInfo::InitAsDefaultInstance() {
}

GL_GeoCodeInfo::GL_GeoCodeInfo(const GL_GeoCodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_GeoCodeInfo::SharedCtor() {
  _cached_size_ = 0;
  geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  geoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_GeoCodeInfo::~GL_GeoCodeInfo() {
  SharedDtor();
}

void GL_GeoCodeInfo::SharedDtor() {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    delete geocode_;
  }
  if (geoname_ != &::google::protobuf::internal::kEmptyString) {
    delete geoname_;
  }
  if (this != default_instance_) {
  }
}

void GL_GeoCodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_GeoCodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_GeoCodeInfo_descriptor_;
}

const GL_GeoCodeInfo& GL_GeoCodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_GeoCodeInfo* GL_GeoCodeInfo::default_instance_ = NULL;

GL_GeoCodeInfo* GL_GeoCodeInfo::New() const {
  return new GL_GeoCodeInfo;
}

void GL_GeoCodeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_geocode()) {
      if (geocode_ != &::google::protobuf::internal::kEmptyString) {
        geocode_->clear();
      }
    }
    if (has_geoname()) {
      if (geoname_ != &::google::protobuf::internal::kEmptyString) {
        geoname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_GeoCodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GeoCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geocode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geocode().data(), this->geocode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GeoName;
        break;
      }

      // optional string GeoName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GeoName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geoname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geoname().data(), this->geoname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_GeoCodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GeoCode = 1;
  if (has_geocode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geocode().data(), this->geocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->geocode(), output);
  }

  // optional string GeoName = 2;
  if (has_geoname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geoname().data(), this->geoname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->geoname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_GeoCodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GeoCode = 1;
  if (has_geocode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geocode().data(), this->geocode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->geocode(), target);
  }

  // optional string GeoName = 2;
  if (has_geoname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geoname().data(), this->geoname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->geoname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_GeoCodeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GeoCode = 1;
    if (has_geocode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geocode());
    }

    // optional string GeoName = 2;
    if (has_geoname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geoname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_GeoCodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_GeoCodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_GeoCodeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_GeoCodeInfo::MergeFrom(const GL_GeoCodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_geocode()) {
      set_geocode(from.geocode());
    }
    if (from.has_geoname()) {
      set_geoname(from.geoname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_GeoCodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_GeoCodeInfo::CopyFrom(const GL_GeoCodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_GeoCodeInfo::IsInitialized() const {

  return true;
}

void GL_GeoCodeInfo::Swap(GL_GeoCodeInfo* other) {
  if (other != this) {
    std::swap(geocode_, other->geocode_);
    std::swap(geoname_, other->geoname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_GeoCodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_GeoCodeInfo_descriptor_;
  metadata.reflection = GL_GeoCodeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_MajorCateInfo::kMajorCateIDFieldNumber;
const int GL_MajorCateInfo::kMajorCateNameFieldNumber;
#endif  // !_MSC_VER

GL_MajorCateInfo::GL_MajorCateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_MajorCateInfo::InitAsDefaultInstance() {
}

GL_MajorCateInfo::GL_MajorCateInfo(const GL_MajorCateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_MajorCateInfo::SharedCtor() {
  _cached_size_ = 0;
  majorcateid_ = 0;
  majorcatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_MajorCateInfo::~GL_MajorCateInfo() {
  SharedDtor();
}

void GL_MajorCateInfo::SharedDtor() {
  if (majorcatename_ != &::google::protobuf::internal::kEmptyString) {
    delete majorcatename_;
  }
  if (this != default_instance_) {
  }
}

void GL_MajorCateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_MajorCateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_MajorCateInfo_descriptor_;
}

const GL_MajorCateInfo& GL_MajorCateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_MajorCateInfo* GL_MajorCateInfo::default_instance_ = NULL;

GL_MajorCateInfo* GL_MajorCateInfo::New() const {
  return new GL_MajorCateInfo;
}

void GL_MajorCateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    majorcateid_ = 0;
    if (has_majorcatename()) {
      if (majorcatename_ != &::google::protobuf::internal::kEmptyString) {
        majorcatename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_MajorCateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MajorCateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majorcateid_)));
          set_has_majorcateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MajorCateName;
        break;
      }

      // optional string MajorCateName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MajorCateName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_majorcatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->majorcatename().data(), this->majorcatename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_MajorCateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 MajorCateID = 1;
  if (has_majorcateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->majorcateid(), output);
  }

  // optional string MajorCateName = 2;
  if (has_majorcatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->majorcatename().data(), this->majorcatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->majorcatename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_MajorCateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 MajorCateID = 1;
  if (has_majorcateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->majorcateid(), target);
  }

  // optional string MajorCateName = 2;
  if (has_majorcatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->majorcatename().data(), this->majorcatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->majorcatename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_MajorCateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MajorCateID = 1;
    if (has_majorcateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majorcateid());
    }

    // optional string MajorCateName = 2;
    if (has_majorcatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->majorcatename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_MajorCateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_MajorCateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_MajorCateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_MajorCateInfo::MergeFrom(const GL_MajorCateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_majorcateid()) {
      set_majorcateid(from.majorcateid());
    }
    if (from.has_majorcatename()) {
      set_majorcatename(from.majorcatename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_MajorCateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_MajorCateInfo::CopyFrom(const GL_MajorCateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_MajorCateInfo::IsInitialized() const {

  return true;
}

void GL_MajorCateInfo::Swap(GL_MajorCateInfo* other) {
  if (other != this) {
    std::swap(majorcateid_, other->majorcateid_);
    std::swap(majorcatename_, other->majorcatename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_MajorCateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_MajorCateInfo_descriptor_;
  metadata.reflection = GL_MajorCateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_MinorCateInfo::kMajorCateIDFieldNumber;
const int GL_MinorCateInfo::kMinorCateIDFieldNumber;
const int GL_MinorCateInfo::kMinorCateNameFieldNumber;
#endif  // !_MSC_VER

GL_MinorCateInfo::GL_MinorCateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_MinorCateInfo::InitAsDefaultInstance() {
}

GL_MinorCateInfo::GL_MinorCateInfo(const GL_MinorCateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_MinorCateInfo::SharedCtor() {
  _cached_size_ = 0;
  majorcateid_ = 0;
  minorcateid_ = 0;
  minorcatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_MinorCateInfo::~GL_MinorCateInfo() {
  SharedDtor();
}

void GL_MinorCateInfo::SharedDtor() {
  if (minorcatename_ != &::google::protobuf::internal::kEmptyString) {
    delete minorcatename_;
  }
  if (this != default_instance_) {
  }
}

void GL_MinorCateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_MinorCateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_MinorCateInfo_descriptor_;
}

const GL_MinorCateInfo& GL_MinorCateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_MinorCateInfo* GL_MinorCateInfo::default_instance_ = NULL;

GL_MinorCateInfo* GL_MinorCateInfo::New() const {
  return new GL_MinorCateInfo;
}

void GL_MinorCateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    majorcateid_ = 0;
    minorcateid_ = 0;
    if (has_minorcatename()) {
      if (minorcatename_ != &::google::protobuf::internal::kEmptyString) {
        minorcatename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_MinorCateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MajorCateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majorcateid_)));
          set_has_majorcateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MinorCateID;
        break;
      }

      // optional int32 MinorCateID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinorCateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minorcateid_)));
          set_has_minorcateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MinorCateName;
        break;
      }

      // optional string MinorCateName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MinorCateName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_minorcatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->minorcatename().data(), this->minorcatename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_MinorCateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 MajorCateID = 1;
  if (has_majorcateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->majorcateid(), output);
  }

  // optional int32 MinorCateID = 2;
  if (has_minorcateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minorcateid(), output);
  }

  // optional string MinorCateName = 3;
  if (has_minorcatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minorcatename().data(), this->minorcatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->minorcatename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_MinorCateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 MajorCateID = 1;
  if (has_majorcateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->majorcateid(), target);
  }

  // optional int32 MinorCateID = 2;
  if (has_minorcateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minorcateid(), target);
  }

  // optional string MinorCateName = 3;
  if (has_minorcatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minorcatename().data(), this->minorcatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->minorcatename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_MinorCateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MajorCateID = 1;
    if (has_majorcateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majorcateid());
    }

    // optional int32 MinorCateID = 2;
    if (has_minorcateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minorcateid());
    }

    // optional string MinorCateName = 3;
    if (has_minorcatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->minorcatename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_MinorCateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_MinorCateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_MinorCateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_MinorCateInfo::MergeFrom(const GL_MinorCateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_majorcateid()) {
      set_majorcateid(from.majorcateid());
    }
    if (from.has_minorcateid()) {
      set_minorcateid(from.minorcateid());
    }
    if (from.has_minorcatename()) {
      set_minorcatename(from.minorcatename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_MinorCateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_MinorCateInfo::CopyFrom(const GL_MinorCateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_MinorCateInfo::IsInitialized() const {

  return true;
}

void GL_MinorCateInfo::Swap(GL_MinorCateInfo* other) {
  if (other != this) {
    std::swap(majorcateid_, other->majorcateid_);
    std::swap(minorcateid_, other->minorcateid_);
    std::swap(minorcatename_, other->minorcatename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_MinorCateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_MinorCateInfo_descriptor_;
  metadata.reflection = GL_MinorCateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_MinorGTypeMapInfo::kMajorCateIDFieldNumber;
const int GL_MinorGTypeMapInfo::kMinorCateIDFieldNumber;
const int GL_MinorGTypeMapInfo::kCreateTypeFieldNumber;
const int GL_MinorGTypeMapInfo::kGTypeIDFieldNumber;
#endif  // !_MSC_VER

GL_MinorGTypeMapInfo::GL_MinorGTypeMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_MinorGTypeMapInfo::InitAsDefaultInstance() {
}

GL_MinorGTypeMapInfo::GL_MinorGTypeMapInfo(const GL_MinorGTypeMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_MinorGTypeMapInfo::SharedCtor() {
  _cached_size_ = 0;
  majorcateid_ = 0;
  minorcateid_ = 0;
  createtype_ = 0;
  gtypeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_MinorGTypeMapInfo::~GL_MinorGTypeMapInfo() {
  SharedDtor();
}

void GL_MinorGTypeMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GL_MinorGTypeMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_MinorGTypeMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_MinorGTypeMapInfo_descriptor_;
}

const GL_MinorGTypeMapInfo& GL_MinorGTypeMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_MinorGTypeMapInfo* GL_MinorGTypeMapInfo::default_instance_ = NULL;

GL_MinorGTypeMapInfo* GL_MinorGTypeMapInfo::New() const {
  return new GL_MinorGTypeMapInfo;
}

void GL_MinorGTypeMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    majorcateid_ = 0;
    minorcateid_ = 0;
    createtype_ = 0;
    gtypeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_MinorGTypeMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MajorCateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majorcateid_)));
          set_has_majorcateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MinorCateID;
        break;
      }

      // optional int32 MinorCateID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinorCateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minorcateid_)));
          set_has_minorcateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CreateType;
        break;
      }

      // optional int32 CreateType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createtype_)));
          set_has_createtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GTypeID;
        break;
      }

      // optional int32 GTypeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_MinorGTypeMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 MajorCateID = 1;
  if (has_majorcateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->majorcateid(), output);
  }

  // optional int32 MinorCateID = 2;
  if (has_minorcateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minorcateid(), output);
  }

  // optional int32 CreateType = 3;
  if (has_createtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->createtype(), output);
  }

  // optional int32 GTypeID = 4;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gtypeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_MinorGTypeMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 MajorCateID = 1;
  if (has_majorcateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->majorcateid(), target);
  }

  // optional int32 MinorCateID = 2;
  if (has_minorcateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minorcateid(), target);
  }

  // optional int32 CreateType = 3;
  if (has_createtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->createtype(), target);
  }

  // optional int32 GTypeID = 4;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gtypeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_MinorGTypeMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MajorCateID = 1;
    if (has_majorcateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majorcateid());
    }

    // optional int32 MinorCateID = 2;
    if (has_minorcateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minorcateid());
    }

    // optional int32 CreateType = 3;
    if (has_createtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createtype());
    }

    // optional int32 GTypeID = 4;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_MinorGTypeMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_MinorGTypeMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_MinorGTypeMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_MinorGTypeMapInfo::MergeFrom(const GL_MinorGTypeMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_majorcateid()) {
      set_majorcateid(from.majorcateid());
    }
    if (from.has_minorcateid()) {
      set_minorcateid(from.minorcateid());
    }
    if (from.has_createtype()) {
      set_createtype(from.createtype());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_MinorGTypeMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_MinorGTypeMapInfo::CopyFrom(const GL_MinorGTypeMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_MinorGTypeMapInfo::IsInitialized() const {

  return true;
}

void GL_MinorGTypeMapInfo::Swap(GL_MinorGTypeMapInfo* other) {
  if (other != this) {
    std::swap(majorcateid_, other->majorcateid_);
    std::swap(minorcateid_, other->minorcateid_);
    std::swap(createtype_, other->createtype_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_MinorGTypeMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_MinorGTypeMapInfo_descriptor_;
  metadata.reflection = GL_MinorGTypeMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_OrderInfo::kOrderIDFieldNumber;
const int GL_OrderInfo::kClientOrderIDFieldNumber;
const int GL_OrderInfo::kOrderIndexFieldNumber;
const int GL_OrderInfo::kOrderTypeFieldNumber;
const int GL_OrderInfo::kFactoryIDFieldNumber;
const int GL_OrderInfo::kShopIDFieldNumber;
const int GL_OrderInfo::kOrderStatusFieldNumber;
const int GL_OrderInfo::kIsDelFieldNumber;
const int GL_OrderInfo::kDesignerIDFieldNumber;
const int GL_OrderInfo::kShopAuditorIDFieldNumber;
const int GL_OrderInfo::kShopCommitorIDFieldNumber;
const int GL_OrderInfo::kFactoryGraphAuditorIDFieldNumber;
const int GL_OrderInfo::kFactoryListAuditorIDFieldNumber;
const int GL_OrderInfo::kFactoryFinanceAuditorIDFieldNumber;
const int GL_OrderInfo::kShopAuditTimeFieldNumber;
const int GL_OrderInfo::kShopCommitTimeFieldNumber;
const int GL_OrderInfo::kGraphAuditTimeFieldNumber;
const int GL_OrderInfo::kListAuditTimeFieldNumber;
const int GL_OrderInfo::kFinanceAuditTimeFieldNumber;
const int GL_OrderInfo::kOrderCodeFieldNumber;
const int GL_OrderInfo::kShopAuditContentFieldNumber;
const int GL_OrderInfo::kShopCommitContentFieldNumber;
const int GL_OrderInfo::kGraphAuditContentFieldNumber;
const int GL_OrderInfo::kListAuditContentFieldNumber;
const int GL_OrderInfo::kFinanceAuditContentFieldNumber;
#endif  // !_MSC_VER

GL_OrderInfo::GL_OrderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_OrderInfo::InitAsDefaultInstance() {
}

GL_OrderInfo::GL_OrderInfo(const GL_OrderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_OrderInfo::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = GOOGLE_LONGLONG(0);
  clientorderid_ = GOOGLE_LONGLONG(0);
  orderindex_ = 0;
  ordertype_ = 0;
  factoryid_ = 0;
  shopid_ = 0;
  orderstatus_ = 0;
  isdel_ = false;
  designerid_ = 0;
  shopauditorid_ = 0;
  shopcommitorid_ = 0;
  factorygraphauditorid_ = 0;
  factorylistauditorid_ = 0;
  factoryfinanceauditorid_ = 0;
  shopaudittime_ = GOOGLE_LONGLONG(0);
  shopcommittime_ = GOOGLE_LONGLONG(0);
  graphaudittime_ = GOOGLE_LONGLONG(0);
  listaudittime_ = GOOGLE_LONGLONG(0);
  financeaudittime_ = GOOGLE_LONGLONG(0);
  ordercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shopauditcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shopcommitcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  graphauditcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  listauditcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  financeauditcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_OrderInfo::~GL_OrderInfo() {
  SharedDtor();
}

void GL_OrderInfo::SharedDtor() {
  if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
    delete ordercode_;
  }
  if (shopauditcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete shopauditcontent_;
  }
  if (shopcommitcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete shopcommitcontent_;
  }
  if (graphauditcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete graphauditcontent_;
  }
  if (listauditcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete listauditcontent_;
  }
  if (financeauditcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete financeauditcontent_;
  }
  if (this != default_instance_) {
  }
}

void GL_OrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_OrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_OrderInfo_descriptor_;
}

const GL_OrderInfo& GL_OrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_OrderInfo* GL_OrderInfo::default_instance_ = NULL;

GL_OrderInfo* GL_OrderInfo::New() const {
  return new GL_OrderInfo;
}

void GL_OrderInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderid_ = GOOGLE_LONGLONG(0);
    clientorderid_ = GOOGLE_LONGLONG(0);
    orderindex_ = 0;
    ordertype_ = 0;
    factoryid_ = 0;
    shopid_ = 0;
    orderstatus_ = 0;
    isdel_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    designerid_ = 0;
    shopauditorid_ = 0;
    shopcommitorid_ = 0;
    factorygraphauditorid_ = 0;
    factorylistauditorid_ = 0;
    factoryfinanceauditorid_ = 0;
    shopaudittime_ = GOOGLE_LONGLONG(0);
    shopcommittime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    graphaudittime_ = GOOGLE_LONGLONG(0);
    listaudittime_ = GOOGLE_LONGLONG(0);
    financeaudittime_ = GOOGLE_LONGLONG(0);
    if (has_ordercode()) {
      if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
        ordercode_->clear();
      }
    }
    if (has_shopauditcontent()) {
      if (shopauditcontent_ != &::google::protobuf::internal::kEmptyString) {
        shopauditcontent_->clear();
      }
    }
    if (has_shopcommitcontent()) {
      if (shopcommitcontent_ != &::google::protobuf::internal::kEmptyString) {
        shopcommitcontent_->clear();
      }
    }
    if (has_graphauditcontent()) {
      if (graphauditcontent_ != &::google::protobuf::internal::kEmptyString) {
        graphauditcontent_->clear();
      }
    }
    if (has_listauditcontent()) {
      if (listauditcontent_ != &::google::protobuf::internal::kEmptyString) {
        listauditcontent_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_financeauditcontent()) {
      if (financeauditcontent_ != &::google::protobuf::internal::kEmptyString) {
        financeauditcontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_OrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 OrderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ClientOrderID;
        break;
      }

      // optional int64 ClientOrderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClientOrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientorderid_)));
          set_has_clientorderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OrderIndex;
        break;
      }

      // optional int32 OrderIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderindex_)));
          set_has_orderindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OrderType;
        break;
      }

      // optional int32 OrderType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordertype_)));
          set_has_ordertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FactoryID;
        break;
      }

      // optional int32 FactoryID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ShopID;
        break;
      }

      // optional int32 ShopID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShopID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_OrderStatus;
        break;
      }

      // optional int32 OrderStatus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderstatus_)));
          set_has_orderstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_IsDel;
        break;
      }

      // optional bool IsDel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_DesignerID;
        break;
      }

      // optional int32 DesignerID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DesignerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designerid_)));
          set_has_designerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ShopAuditorID;
        break;
      }

      // optional int32 ShopAuditorID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShopAuditorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopauditorid_)));
          set_has_shopauditorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ShopCommitorID;
        break;
      }

      // optional int32 ShopCommitorID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShopCommitorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopcommitorid_)));
          set_has_shopcommitorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_FactoryGraphAuditorID;
        break;
      }

      // optional int32 FactoryGraphAuditorID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryGraphAuditorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factorygraphauditorid_)));
          set_has_factorygraphauditorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_FactoryListAuditorID;
        break;
      }

      // optional int32 FactoryListAuditorID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryListAuditorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factorylistauditorid_)));
          set_has_factorylistauditorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_FactoryFinanceAuditorID;
        break;
      }

      // optional int32 FactoryFinanceAuditorID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryFinanceAuditorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryfinanceauditorid_)));
          set_has_factoryfinanceauditorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ShopAuditTime;
        break;
      }

      // optional int64 ShopAuditTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShopAuditTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shopaudittime_)));
          set_has_shopaudittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ShopCommitTime;
        break;
      }

      // optional int64 ShopCommitTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShopCommitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shopcommittime_)));
          set_has_shopcommittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_GraphAuditTime;
        break;
      }

      // optional int64 GraphAuditTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GraphAuditTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &graphaudittime_)));
          set_has_graphaudittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_ListAuditTime;
        break;
      }

      // optional int64 ListAuditTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ListAuditTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &listaudittime_)));
          set_has_listaudittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_FinanceAuditTime;
        break;
      }

      // optional int64 FinanceAuditTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FinanceAuditTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &financeaudittime_)));
          set_has_financeaudittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_OrderCode;
        break;
      }

      // optional string OrderCode = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordercode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordercode().data(), this->ordercode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ShopAuditContent;
        break;
      }

      // optional string ShopAuditContent = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShopAuditContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shopauditcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shopauditcontent().data(), this->shopauditcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_ShopCommitContent;
        break;
      }

      // optional string ShopCommitContent = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShopCommitContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shopcommitcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shopcommitcontent().data(), this->shopcommitcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_GraphAuditContent;
        break;
      }

      // optional string GraphAuditContent = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GraphAuditContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graphauditcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->graphauditcontent().data(), this->graphauditcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_ListAuditContent;
        break;
      }

      // optional string ListAuditContent = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ListAuditContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listauditcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->listauditcontent().data(), this->listauditcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_FinanceAuditContent;
        break;
      }

      // optional string FinanceAuditContent = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FinanceAuditContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_financeauditcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->financeauditcontent().data(), this->financeauditcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_OrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 OrderID = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->orderid(), output);
  }

  // optional int64 ClientOrderID = 2;
  if (has_clientorderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->clientorderid(), output);
  }

  // optional int32 OrderIndex = 3;
  if (has_orderindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->orderindex(), output);
  }

  // optional int32 OrderType = 4;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ordertype(), output);
  }

  // optional int32 FactoryID = 5;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factoryid(), output);
  }

  // optional int32 ShopID = 6;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->shopid(), output);
  }

  // optional int32 OrderStatus = 7;
  if (has_orderstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->orderstatus(), output);
  }

  // optional bool IsDel = 8;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isdel(), output);
  }

  // optional int32 DesignerID = 9;
  if (has_designerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->designerid(), output);
  }

  // optional int32 ShopAuditorID = 10;
  if (has_shopauditorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->shopauditorid(), output);
  }

  // optional int32 ShopCommitorID = 11;
  if (has_shopcommitorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->shopcommitorid(), output);
  }

  // optional int32 FactoryGraphAuditorID = 12;
  if (has_factorygraphauditorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->factorygraphauditorid(), output);
  }

  // optional int32 FactoryListAuditorID = 13;
  if (has_factorylistauditorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->factorylistauditorid(), output);
  }

  // optional int32 FactoryFinanceAuditorID = 14;
  if (has_factoryfinanceauditorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->factoryfinanceauditorid(), output);
  }

  // optional int64 ShopAuditTime = 15;
  if (has_shopaudittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->shopaudittime(), output);
  }

  // optional int64 ShopCommitTime = 16;
  if (has_shopcommittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->shopcommittime(), output);
  }

  // optional int64 GraphAuditTime = 17;
  if (has_graphaudittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->graphaudittime(), output);
  }

  // optional int64 ListAuditTime = 18;
  if (has_listaudittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->listaudittime(), output);
  }

  // optional int64 FinanceAuditTime = 19;
  if (has_financeaudittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->financeaudittime(), output);
  }

  // optional string OrderCode = 20;
  if (has_ordercode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordercode().data(), this->ordercode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->ordercode(), output);
  }

  // optional string ShopAuditContent = 21;
  if (has_shopauditcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shopauditcontent().data(), this->shopauditcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->shopauditcontent(), output);
  }

  // optional string ShopCommitContent = 22;
  if (has_shopcommitcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shopcommitcontent().data(), this->shopcommitcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->shopcommitcontent(), output);
  }

  // optional string GraphAuditContent = 23;
  if (has_graphauditcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->graphauditcontent().data(), this->graphauditcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->graphauditcontent(), output);
  }

  // optional string ListAuditContent = 24;
  if (has_listauditcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listauditcontent().data(), this->listauditcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->listauditcontent(), output);
  }

  // optional string FinanceAuditContent = 25;
  if (has_financeauditcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->financeauditcontent().data(), this->financeauditcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->financeauditcontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_OrderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 OrderID = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->orderid(), target);
  }

  // optional int64 ClientOrderID = 2;
  if (has_clientorderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->clientorderid(), target);
  }

  // optional int32 OrderIndex = 3;
  if (has_orderindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->orderindex(), target);
  }

  // optional int32 OrderType = 4;
  if (has_ordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ordertype(), target);
  }

  // optional int32 FactoryID = 5;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factoryid(), target);
  }

  // optional int32 ShopID = 6;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->shopid(), target);
  }

  // optional int32 OrderStatus = 7;
  if (has_orderstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->orderstatus(), target);
  }

  // optional bool IsDel = 8;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isdel(), target);
  }

  // optional int32 DesignerID = 9;
  if (has_designerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->designerid(), target);
  }

  // optional int32 ShopAuditorID = 10;
  if (has_shopauditorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->shopauditorid(), target);
  }

  // optional int32 ShopCommitorID = 11;
  if (has_shopcommitorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->shopcommitorid(), target);
  }

  // optional int32 FactoryGraphAuditorID = 12;
  if (has_factorygraphauditorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->factorygraphauditorid(), target);
  }

  // optional int32 FactoryListAuditorID = 13;
  if (has_factorylistauditorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->factorylistauditorid(), target);
  }

  // optional int32 FactoryFinanceAuditorID = 14;
  if (has_factoryfinanceauditorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->factoryfinanceauditorid(), target);
  }

  // optional int64 ShopAuditTime = 15;
  if (has_shopaudittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->shopaudittime(), target);
  }

  // optional int64 ShopCommitTime = 16;
  if (has_shopcommittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->shopcommittime(), target);
  }

  // optional int64 GraphAuditTime = 17;
  if (has_graphaudittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->graphaudittime(), target);
  }

  // optional int64 ListAuditTime = 18;
  if (has_listaudittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->listaudittime(), target);
  }

  // optional int64 FinanceAuditTime = 19;
  if (has_financeaudittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->financeaudittime(), target);
  }

  // optional string OrderCode = 20;
  if (has_ordercode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordercode().data(), this->ordercode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->ordercode(), target);
  }

  // optional string ShopAuditContent = 21;
  if (has_shopauditcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shopauditcontent().data(), this->shopauditcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->shopauditcontent(), target);
  }

  // optional string ShopCommitContent = 22;
  if (has_shopcommitcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shopcommitcontent().data(), this->shopcommitcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->shopcommitcontent(), target);
  }

  // optional string GraphAuditContent = 23;
  if (has_graphauditcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->graphauditcontent().data(), this->graphauditcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->graphauditcontent(), target);
  }

  // optional string ListAuditContent = 24;
  if (has_listauditcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listauditcontent().data(), this->listauditcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->listauditcontent(), target);
  }

  // optional string FinanceAuditContent = 25;
  if (has_financeauditcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->financeauditcontent().data(), this->financeauditcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->financeauditcontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_OrderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 OrderID = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderid());
    }

    // optional int64 ClientOrderID = 2;
    if (has_clientorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientorderid());
    }

    // optional int32 OrderIndex = 3;
    if (has_orderindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderindex());
    }

    // optional int32 OrderType = 4;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordertype());
    }

    // optional int32 FactoryID = 5;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // optional int32 ShopID = 6;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

    // optional int32 OrderStatus = 7;
    if (has_orderstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderstatus());
    }

    // optional bool IsDel = 8;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 DesignerID = 9;
    if (has_designerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designerid());
    }

    // optional int32 ShopAuditorID = 10;
    if (has_shopauditorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopauditorid());
    }

    // optional int32 ShopCommitorID = 11;
    if (has_shopcommitorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopcommitorid());
    }

    // optional int32 FactoryGraphAuditorID = 12;
    if (has_factorygraphauditorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factorygraphauditorid());
    }

    // optional int32 FactoryListAuditorID = 13;
    if (has_factorylistauditorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factorylistauditorid());
    }

    // optional int32 FactoryFinanceAuditorID = 14;
    if (has_factoryfinanceauditorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryfinanceauditorid());
    }

    // optional int64 ShopAuditTime = 15;
    if (has_shopaudittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shopaudittime());
    }

    // optional int64 ShopCommitTime = 16;
    if (has_shopcommittime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shopcommittime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 GraphAuditTime = 17;
    if (has_graphaudittime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->graphaudittime());
    }

    // optional int64 ListAuditTime = 18;
    if (has_listaudittime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->listaudittime());
    }

    // optional int64 FinanceAuditTime = 19;
    if (has_financeaudittime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->financeaudittime());
    }

    // optional string OrderCode = 20;
    if (has_ordercode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordercode());
    }

    // optional string ShopAuditContent = 21;
    if (has_shopauditcontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shopauditcontent());
    }

    // optional string ShopCommitContent = 22;
    if (has_shopcommitcontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shopcommitcontent());
    }

    // optional string GraphAuditContent = 23;
    if (has_graphauditcontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->graphauditcontent());
    }

    // optional string ListAuditContent = 24;
    if (has_listauditcontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->listauditcontent());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string FinanceAuditContent = 25;
    if (has_financeauditcontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->financeauditcontent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_OrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_OrderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_OrderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_OrderInfo::MergeFrom(const GL_OrderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_clientorderid()) {
      set_clientorderid(from.clientorderid());
    }
    if (from.has_orderindex()) {
      set_orderindex(from.orderindex());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_orderstatus()) {
      set_orderstatus(from.orderstatus());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_designerid()) {
      set_designerid(from.designerid());
    }
    if (from.has_shopauditorid()) {
      set_shopauditorid(from.shopauditorid());
    }
    if (from.has_shopcommitorid()) {
      set_shopcommitorid(from.shopcommitorid());
    }
    if (from.has_factorygraphauditorid()) {
      set_factorygraphauditorid(from.factorygraphauditorid());
    }
    if (from.has_factorylistauditorid()) {
      set_factorylistauditorid(from.factorylistauditorid());
    }
    if (from.has_factoryfinanceauditorid()) {
      set_factoryfinanceauditorid(from.factoryfinanceauditorid());
    }
    if (from.has_shopaudittime()) {
      set_shopaudittime(from.shopaudittime());
    }
    if (from.has_shopcommittime()) {
      set_shopcommittime(from.shopcommittime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_graphaudittime()) {
      set_graphaudittime(from.graphaudittime());
    }
    if (from.has_listaudittime()) {
      set_listaudittime(from.listaudittime());
    }
    if (from.has_financeaudittime()) {
      set_financeaudittime(from.financeaudittime());
    }
    if (from.has_ordercode()) {
      set_ordercode(from.ordercode());
    }
    if (from.has_shopauditcontent()) {
      set_shopauditcontent(from.shopauditcontent());
    }
    if (from.has_shopcommitcontent()) {
      set_shopcommitcontent(from.shopcommitcontent());
    }
    if (from.has_graphauditcontent()) {
      set_graphauditcontent(from.graphauditcontent());
    }
    if (from.has_listauditcontent()) {
      set_listauditcontent(from.listauditcontent());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_financeauditcontent()) {
      set_financeauditcontent(from.financeauditcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_OrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_OrderInfo::CopyFrom(const GL_OrderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_OrderInfo::IsInitialized() const {

  return true;
}

void GL_OrderInfo::Swap(GL_OrderInfo* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(clientorderid_, other->clientorderid_);
    std::swap(orderindex_, other->orderindex_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(shopid_, other->shopid_);
    std::swap(orderstatus_, other->orderstatus_);
    std::swap(isdel_, other->isdel_);
    std::swap(designerid_, other->designerid_);
    std::swap(shopauditorid_, other->shopauditorid_);
    std::swap(shopcommitorid_, other->shopcommitorid_);
    std::swap(factorygraphauditorid_, other->factorygraphauditorid_);
    std::swap(factorylistauditorid_, other->factorylistauditorid_);
    std::swap(factoryfinanceauditorid_, other->factoryfinanceauditorid_);
    std::swap(shopaudittime_, other->shopaudittime_);
    std::swap(shopcommittime_, other->shopcommittime_);
    std::swap(graphaudittime_, other->graphaudittime_);
    std::swap(listaudittime_, other->listaudittime_);
    std::swap(financeaudittime_, other->financeaudittime_);
    std::swap(ordercode_, other->ordercode_);
    std::swap(shopauditcontent_, other->shopauditcontent_);
    std::swap(shopcommitcontent_, other->shopcommitcontent_);
    std::swap(graphauditcontent_, other->graphauditcontent_);
    std::swap(listauditcontent_, other->listauditcontent_);
    std::swap(financeauditcontent_, other->financeauditcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_OrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_OrderInfo_descriptor_;
  metadata.reflection = GL_OrderInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_PinYin::kPYCodeFieldNumber;
const int GL_PinYin::kPYNameFieldNumber;
#endif  // !_MSC_VER

GL_PinYin::GL_PinYin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_PinYin::InitAsDefaultInstance() {
}

GL_PinYin::GL_PinYin(const GL_PinYin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_PinYin::SharedCtor() {
  _cached_size_ = 0;
  pycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_PinYin::~GL_PinYin() {
  SharedDtor();
}

void GL_PinYin::SharedDtor() {
  if (pycode_ != &::google::protobuf::internal::kEmptyString) {
    delete pycode_;
  }
  if (pyname_ != &::google::protobuf::internal::kEmptyString) {
    delete pyname_;
  }
  if (this != default_instance_) {
  }
}

void GL_PinYin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_PinYin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_PinYin_descriptor_;
}

const GL_PinYin& GL_PinYin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_PinYin* GL_PinYin::default_instance_ = NULL;

GL_PinYin* GL_PinYin::New() const {
  return new GL_PinYin;
}

void GL_PinYin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pycode()) {
      if (pycode_ != &::google::protobuf::internal::kEmptyString) {
        pycode_->clear();
      }
    }
    if (has_pyname()) {
      if (pyname_ != &::google::protobuf::internal::kEmptyString) {
        pyname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_PinYin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string PYCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pycode().data(), this->pycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PYName;
        break;
      }

      // optional string PYName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PYName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pyname().data(), this->pyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_PinYin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string PYCode = 1;
  if (has_pycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pycode().data(), this->pycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pycode(), output);
  }

  // optional string PYName = 2;
  if (has_pyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pyname().data(), this->pyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pyname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_PinYin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string PYCode = 1;
  if (has_pycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pycode().data(), this->pycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pycode(), target);
  }

  // optional string PYName = 2;
  if (has_pyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pyname().data(), this->pyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pyname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_PinYin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string PYCode = 1;
    if (has_pycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pycode());
    }

    // optional string PYName = 2;
    if (has_pyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pyname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_PinYin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_PinYin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_PinYin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_PinYin::MergeFrom(const GL_PinYin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pycode()) {
      set_pycode(from.pycode());
    }
    if (from.has_pyname()) {
      set_pyname(from.pyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_PinYin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_PinYin::CopyFrom(const GL_PinYin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_PinYin::IsInitialized() const {

  return true;
}

void GL_PinYin::Swap(GL_PinYin* other) {
  if (other != this) {
    std::swap(pycode_, other->pycode_);
    std::swap(pyname_, other->pyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_PinYin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_PinYin_descriptor_;
  metadata.reflection = GL_PinYin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_PrepaidCardInfo::kCardIDFieldNumber;
const int GL_PrepaidCardInfo::kCardCategoryFieldNumber;
const int GL_PrepaidCardInfo::kCardTypeFieldNumber;
const int GL_PrepaidCardInfo::kPeriodFieldNumber;
const int GL_PrepaidCardInfo::kSecureCodeFieldNumber;
const int GL_PrepaidCardInfo::kCardPwdFieldNumber;
const int GL_PrepaidCardInfo::kSerialNoFieldNumber;
const int GL_PrepaidCardInfo::kCardNoFieldNumber;
#endif  // !_MSC_VER

GL_PrepaidCardInfo::GL_PrepaidCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_PrepaidCardInfo::InitAsDefaultInstance() {
}

GL_PrepaidCardInfo::GL_PrepaidCardInfo(const GL_PrepaidCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_PrepaidCardInfo::SharedCtor() {
  _cached_size_ = 0;
  cardid_ = 0;
  cardcategory_ = 0;
  cardtype_ = 0;
  period_ = 0;
  securecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_PrepaidCardInfo::~GL_PrepaidCardInfo() {
  SharedDtor();
}

void GL_PrepaidCardInfo::SharedDtor() {
  if (securecode_ != &::google::protobuf::internal::kEmptyString) {
    delete securecode_;
  }
  if (cardpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete cardpwd_;
  }
  if (serialno_ != &::google::protobuf::internal::kEmptyString) {
    delete serialno_;
  }
  if (cardno_ != &::google::protobuf::internal::kEmptyString) {
    delete cardno_;
  }
  if (this != default_instance_) {
  }
}

void GL_PrepaidCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_PrepaidCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_PrepaidCardInfo_descriptor_;
}

const GL_PrepaidCardInfo& GL_PrepaidCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_PrepaidCardInfo* GL_PrepaidCardInfo::default_instance_ = NULL;

GL_PrepaidCardInfo* GL_PrepaidCardInfo::New() const {
  return new GL_PrepaidCardInfo;
}

void GL_PrepaidCardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardid_ = 0;
    cardcategory_ = 0;
    cardtype_ = 0;
    period_ = 0;
    if (has_securecode()) {
      if (securecode_ != &::google::protobuf::internal::kEmptyString) {
        securecode_->clear();
      }
    }
    if (has_cardpwd()) {
      if (cardpwd_ != &::google::protobuf::internal::kEmptyString) {
        cardpwd_->clear();
      }
    }
    if (has_serialno()) {
      if (serialno_ != &::google::protobuf::internal::kEmptyString) {
        serialno_->clear();
      }
    }
    if (has_cardno()) {
      if (cardno_ != &::google::protobuf::internal::kEmptyString) {
        cardno_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_PrepaidCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardCategory;
        break;
      }

      // optional int32 CardCategory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardCategory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardcategory_)));
          set_has_cardcategory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CardType;
        break;
      }

      // optional int32 CardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Period;
        break;
      }

      // optional int32 Period = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SecureCode;
        break;
      }

      // optional string SecureCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecureCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->securecode().data(), this->securecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_CardPwd;
        break;
      }

      // optional string CardPwd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardpwd().data(), this->cardpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SerialNo;
        break;
      }

      // optional string SerialNo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SerialNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serialno().data(), this->serialno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_CardNo;
        break;
      }

      // optional string CardNo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardno().data(), this->cardno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_PrepaidCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CardID = 1;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cardid(), output);
  }

  // optional int32 CardCategory = 2;
  if (has_cardcategory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardcategory(), output);
  }

  // optional int32 CardType = 3;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardtype(), output);
  }

  // optional int32 Period = 4;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->period(), output);
  }

  // optional string SecureCode = 5;
  if (has_securecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securecode().data(), this->securecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->securecode(), output);
  }

  // optional string CardPwd = 6;
  if (has_cardpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardpwd().data(), this->cardpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cardpwd(), output);
  }

  // optional string SerialNo = 7;
  if (has_serialno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialno().data(), this->serialno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->serialno(), output);
  }

  // optional string CardNo = 8;
  if (has_cardno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardno().data(), this->cardno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->cardno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_PrepaidCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CardID = 1;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cardid(), target);
  }

  // optional int32 CardCategory = 2;
  if (has_cardcategory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardcategory(), target);
  }

  // optional int32 CardType = 3;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardtype(), target);
  }

  // optional int32 Period = 4;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->period(), target);
  }

  // optional string SecureCode = 5;
  if (has_securecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securecode().data(), this->securecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->securecode(), target);
  }

  // optional string CardPwd = 6;
  if (has_cardpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardpwd().data(), this->cardpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cardpwd(), target);
  }

  // optional string SerialNo = 7;
  if (has_serialno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialno().data(), this->serialno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serialno(), target);
  }

  // optional string CardNo = 8;
  if (has_cardno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardno().data(), this->cardno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->cardno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_PrepaidCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CardID = 1;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardid());
    }

    // optional int32 CardCategory = 2;
    if (has_cardcategory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardcategory());
    }

    // optional int32 CardType = 3;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

    // optional int32 Period = 4;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }

    // optional string SecureCode = 5;
    if (has_securecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securecode());
    }

    // optional string CardPwd = 6;
    if (has_cardpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardpwd());
    }

    // optional string SerialNo = 7;
    if (has_serialno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialno());
    }

    // optional string CardNo = 8;
    if (has_cardno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_PrepaidCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_PrepaidCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_PrepaidCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_PrepaidCardInfo::MergeFrom(const GL_PrepaidCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_cardcategory()) {
      set_cardcategory(from.cardcategory());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_securecode()) {
      set_securecode(from.securecode());
    }
    if (from.has_cardpwd()) {
      set_cardpwd(from.cardpwd());
    }
    if (from.has_serialno()) {
      set_serialno(from.serialno());
    }
    if (from.has_cardno()) {
      set_cardno(from.cardno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_PrepaidCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_PrepaidCardInfo::CopyFrom(const GL_PrepaidCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_PrepaidCardInfo::IsInitialized() const {

  return true;
}

void GL_PrepaidCardInfo::Swap(GL_PrepaidCardInfo* other) {
  if (other != this) {
    std::swap(cardid_, other->cardid_);
    std::swap(cardcategory_, other->cardcategory_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(period_, other->period_);
    std::swap(securecode_, other->securecode_);
    std::swap(cardpwd_, other->cardpwd_);
    std::swap(serialno_, other->serialno_);
    std::swap(cardno_, other->cardno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_PrepaidCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_PrepaidCardInfo_descriptor_;
  metadata.reflection = GL_PrepaidCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_PrintTemplateInfo::kTemplateIDFieldNumber;
const int GL_PrintTemplateInfo::kFactoryIDFieldNumber;
const int GL_PrintTemplateInfo::kIsActiveFieldNumber;
const int GL_PrintTemplateInfo::kRelativePathFieldNumber;
const int GL_PrintTemplateInfo::kTemplateNameFieldNumber;
const int GL_PrintTemplateInfo::kTemplateMemoFieldNumber;
const int GL_PrintTemplateInfo::kHashCodeFieldNumber;
#endif  // !_MSC_VER

GL_PrintTemplateInfo::GL_PrintTemplateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_PrintTemplateInfo::InitAsDefaultInstance() {
}

GL_PrintTemplateInfo::GL_PrintTemplateInfo(const GL_PrintTemplateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_PrintTemplateInfo::SharedCtor() {
  _cached_size_ = 0;
  templateid_ = 0;
  factoryid_ = 0;
  isactive_ = false;
  relativepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  templatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  templatememo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_PrintTemplateInfo::~GL_PrintTemplateInfo() {
  SharedDtor();
}

void GL_PrintTemplateInfo::SharedDtor() {
  if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
    delete relativepath_;
  }
  if (templatename_ != &::google::protobuf::internal::kEmptyString) {
    delete templatename_;
  }
  if (templatememo_ != &::google::protobuf::internal::kEmptyString) {
    delete templatememo_;
  }
  if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
    delete hashcode_;
  }
  if (this != default_instance_) {
  }
}

void GL_PrintTemplateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_PrintTemplateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_PrintTemplateInfo_descriptor_;
}

const GL_PrintTemplateInfo& GL_PrintTemplateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_PrintTemplateInfo* GL_PrintTemplateInfo::default_instance_ = NULL;

GL_PrintTemplateInfo* GL_PrintTemplateInfo::New() const {
  return new GL_PrintTemplateInfo;
}

void GL_PrintTemplateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    templateid_ = 0;
    factoryid_ = 0;
    isactive_ = false;
    if (has_relativepath()) {
      if (relativepath_ != &::google::protobuf::internal::kEmptyString) {
        relativepath_->clear();
      }
    }
    if (has_templatename()) {
      if (templatename_ != &::google::protobuf::internal::kEmptyString) {
        templatename_->clear();
      }
    }
    if (has_templatememo()) {
      if (templatememo_ != &::google::protobuf::internal::kEmptyString) {
        templatememo_->clear();
      }
    }
    if (has_hashcode()) {
      if (hashcode_ != &::google::protobuf::internal::kEmptyString) {
        hashcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_PrintTemplateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TemplateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // optional int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsActive;
        break;
      }

      // optional bool IsActive = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RelativePath;
        break;
      }

      // optional string RelativePath = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RelativePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->relativepath().data(), this->relativepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_TemplateName;
        break;
      }

      // optional string TemplateName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TemplateName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->templatename().data(), this->templatename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_TemplateMemo;
        break;
      }

      // optional string TemplateMemo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TemplateMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templatememo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->templatememo().data(), this->templatememo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_HashCode;
        break;
      }

      // optional string HashCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HashCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hashcode().data(), this->hashcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_PrintTemplateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 TemplateID = 1;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->templateid(), output);
  }

  // optional int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // optional bool IsActive = 3;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isactive(), output);
  }

  // optional string RelativePath = 4;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->relativepath(), output);
  }

  // optional string TemplateName = 5;
  if (has_templatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templatename().data(), this->templatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->templatename(), output);
  }

  // optional string TemplateMemo = 6;
  if (has_templatememo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templatememo().data(), this->templatememo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->templatememo(), output);
  }

  // optional string HashCode = 7;
  if (has_hashcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashcode().data(), this->hashcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->hashcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_PrintTemplateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 TemplateID = 1;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->templateid(), target);
  }

  // optional int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // optional bool IsActive = 3;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isactive(), target);
  }

  // optional string RelativePath = 4;
  if (has_relativepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relativepath().data(), this->relativepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->relativepath(), target);
  }

  // optional string TemplateName = 5;
  if (has_templatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templatename().data(), this->templatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->templatename(), target);
  }

  // optional string TemplateMemo = 6;
  if (has_templatememo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templatememo().data(), this->templatememo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->templatememo(), target);
  }

  // optional string HashCode = 7;
  if (has_hashcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashcode().data(), this->hashcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->hashcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_PrintTemplateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TemplateID = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templateid());
    }

    // optional int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // optional bool IsActive = 3;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

    // optional string RelativePath = 4;
    if (has_relativepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relativepath());
    }

    // optional string TemplateName = 5;
    if (has_templatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->templatename());
    }

    // optional string TemplateMemo = 6;
    if (has_templatememo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->templatememo());
    }

    // optional string HashCode = 7;
    if (has_hashcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hashcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_PrintTemplateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_PrintTemplateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_PrintTemplateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_PrintTemplateInfo::MergeFrom(const GL_PrintTemplateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_relativepath()) {
      set_relativepath(from.relativepath());
    }
    if (from.has_templatename()) {
      set_templatename(from.templatename());
    }
    if (from.has_templatememo()) {
      set_templatememo(from.templatememo());
    }
    if (from.has_hashcode()) {
      set_hashcode(from.hashcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_PrintTemplateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_PrintTemplateInfo::CopyFrom(const GL_PrintTemplateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_PrintTemplateInfo::IsInitialized() const {

  return true;
}

void GL_PrintTemplateInfo::Swap(GL_PrintTemplateInfo* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(isactive_, other->isactive_);
    std::swap(relativepath_, other->relativepath_);
    std::swap(templatename_, other->templatename_);
    std::swap(templatememo_, other->templatememo_);
    std::swap(hashcode_, other->hashcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_PrintTemplateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_PrintTemplateInfo_descriptor_;
  metadata.reflection = GL_PrintTemplateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_RoleInfo::kRoleIDFieldNumber;
const int GL_RoleInfo::kDeptIDFieldNumber;
const int GL_RoleInfo::kDTypeIDFieldNumber;
const int GL_RoleInfo::kCreatorIDFieldNumber;
const int GL_RoleInfo::kUpdaterIDFieldNumber;
const int GL_RoleInfo::kCreateTimeFieldNumber;
const int GL_RoleInfo::kUpdateTimeFieldNumber;
const int GL_RoleInfo::kRoleNameFieldNumber;
#endif  // !_MSC_VER

GL_RoleInfo::GL_RoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_RoleInfo::InitAsDefaultInstance() {
}

GL_RoleInfo::GL_RoleInfo(const GL_RoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_RoleInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  deptid_ = 0;
  dtypeid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_RoleInfo::~GL_RoleInfo() {
  SharedDtor();
}

void GL_RoleInfo::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void GL_RoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_RoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_RoleInfo_descriptor_;
}

const GL_RoleInfo& GL_RoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_RoleInfo* GL_RoleInfo::default_instance_ = NULL;

GL_RoleInfo* GL_RoleInfo::New() const {
  return new GL_RoleInfo;
}

void GL_RoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    deptid_ = 0;
    dtypeid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_RoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DeptID;
        break;
      }

      // optional int32 DeptID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeptID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deptid_)));
          set_has_deptid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DTypeID;
        break;
      }

      // optional int32 DTypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtypeid_)));
          set_has_dtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CreatorID;
        break;
      }

      // optional int32 CreatorID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_UpdaterID;
        break;
      }

      // optional int32 UpdaterID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CreateTime;
        break;
      }

      // optional int64 CreateTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_UpdateTime;
        break;
      }

      // optional int64 UpdateTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_RoleName;
        break;
      }

      // optional string RoleName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_RoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 RoleID = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 DeptID = 2;
  if (has_deptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->deptid(), output);
  }

  // optional int32 DTypeID = 3;
  if (has_dtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dtypeid(), output);
  }

  // optional int32 CreatorID = 4;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->creatorid(), output);
  }

  // optional int32 UpdaterID = 5;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->updaterid(), output);
  }

  // optional int64 CreateTime = 6;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->createtime(), output);
  }

  // optional int64 UpdateTime = 7;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->updatetime(), output);
  }

  // optional string RoleName = 8;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->rolename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_RoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoleID = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 DeptID = 2;
  if (has_deptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->deptid(), target);
  }

  // optional int32 DTypeID = 3;
  if (has_dtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dtypeid(), target);
  }

  // optional int32 CreatorID = 4;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->creatorid(), target);
  }

  // optional int32 UpdaterID = 5;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->updaterid(), target);
  }

  // optional int64 CreateTime = 6;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->createtime(), target);
  }

  // optional int64 UpdateTime = 7;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->updatetime(), target);
  }

  // optional string RoleName = 8;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rolename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_RoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 DeptID = 2;
    if (has_deptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deptid());
    }

    // optional int32 DTypeID = 3;
    if (has_dtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dtypeid());
    }

    // optional int32 CreatorID = 4;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // optional int32 UpdaterID = 5;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // optional int64 CreateTime = 6;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int64 UpdateTime = 7;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // optional string RoleName = 8;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_RoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_RoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_RoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_RoleInfo::MergeFrom(const GL_RoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_deptid()) {
      set_deptid(from.deptid());
    }
    if (from.has_dtypeid()) {
      set_dtypeid(from.dtypeid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_RoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_RoleInfo::CopyFrom(const GL_RoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_RoleInfo::IsInitialized() const {

  return true;
}

void GL_RoleInfo::Swap(GL_RoleInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(deptid_, other->deptid_);
    std::swap(dtypeid_, other->dtypeid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_RoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_RoleInfo_descriptor_;
  metadata.reflection = GL_RoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_RoleRightInfo::kRightIDFieldNumber;
const int GL_RoleRightInfo::kRightTypeFieldNumber;
const int GL_RoleRightInfo::kRoleIDFieldNumber;
#endif  // !_MSC_VER

GL_RoleRightInfo::GL_RoleRightInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_RoleRightInfo::InitAsDefaultInstance() {
}

GL_RoleRightInfo::GL_RoleRightInfo(const GL_RoleRightInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_RoleRightInfo::SharedCtor() {
  _cached_size_ = 0;
  rightid_ = 0;
  righttype_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_RoleRightInfo::~GL_RoleRightInfo() {
  SharedDtor();
}

void GL_RoleRightInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GL_RoleRightInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_RoleRightInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_RoleRightInfo_descriptor_;
}

const GL_RoleRightInfo& GL_RoleRightInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_RoleRightInfo* GL_RoleRightInfo::default_instance_ = NULL;

GL_RoleRightInfo* GL_RoleRightInfo::New() const {
  return new GL_RoleRightInfo;
}

void GL_RoleRightInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rightid_ = 0;
    righttype_ = 0;
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_RoleRightInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RightID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightid_)));
          set_has_rightid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RightType;
        break;
      }

      // optional int32 RightType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RightType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &righttype_)));
          set_has_righttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }

      // optional int32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_RoleRightInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 RightID = 1;
  if (has_rightid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rightid(), output);
  }

  // optional int32 RightType = 2;
  if (has_righttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->righttype(), output);
  }

  // optional int32 RoleID = 3;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_RoleRightInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RightID = 1;
  if (has_rightid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rightid(), target);
  }

  // optional int32 RightType = 2;
  if (has_righttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->righttype(), target);
  }

  // optional int32 RoleID = 3;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_RoleRightInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RightID = 1;
    if (has_rightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightid());
    }

    // optional int32 RightType = 2;
    if (has_righttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->righttype());
    }

    // optional int32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_RoleRightInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_RoleRightInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_RoleRightInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_RoleRightInfo::MergeFrom(const GL_RoleRightInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rightid()) {
      set_rightid(from.rightid());
    }
    if (from.has_righttype()) {
      set_righttype(from.righttype());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_RoleRightInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_RoleRightInfo::CopyFrom(const GL_RoleRightInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_RoleRightInfo::IsInitialized() const {

  return true;
}

void GL_RoleRightInfo::Swap(GL_RoleRightInfo* other) {
  if (other != this) {
    std::swap(rightid_, other->rightid_);
    std::swap(righttype_, other->righttype_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_RoleRightInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_RoleRightInfo_descriptor_;
  metadata.reflection = GL_RoleRightInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_SugarVerInfo::kVerCodeFieldNumber;
const int GL_SugarVerInfo::kDeptIDFieldNumber;
const int GL_SugarVerInfo::kVerTypeFieldNumber;
const int GL_SugarVerInfo::kVerIndexFieldNumber;
const int GL_SugarVerInfo::kUploadStatusFieldNumber;
const int GL_SugarVerInfo::kFileCountFieldNumber;
const int GL_SugarVerInfo::kVerDBStateFieldNumber;
const int GL_SugarVerInfo::kCreatorIDFieldNumber;
const int GL_SugarVerInfo::kStartTimeFieldNumber;
const int GL_SugarVerInfo::kStopTimeFieldNumber;
const int GL_SugarVerInfo::kCreateTimeFieldNumber;
const int GL_SugarVerInfo::kVerMemoFieldNumber;
#endif  // !_MSC_VER

GL_SugarVerInfo::GL_SugarVerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_SugarVerInfo::InitAsDefaultInstance() {
}

GL_SugarVerInfo::GL_SugarVerInfo(const GL_SugarVerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_SugarVerInfo::SharedCtor() {
  _cached_size_ = 0;
  vercode_ = GOOGLE_LONGLONG(0);
  deptid_ = 0;
  vertype_ = 0;
  verindex_ = 0;
  uploadstatus_ = 0;
  filecount_ = 0;
  verdbstate_ = 0;
  creatorid_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  stoptime_ = GOOGLE_LONGLONG(0);
  createtime_ = GOOGLE_LONGLONG(0);
  vermemo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_SugarVerInfo::~GL_SugarVerInfo() {
  SharedDtor();
}

void GL_SugarVerInfo::SharedDtor() {
  if (vermemo_ != &::google::protobuf::internal::kEmptyString) {
    delete vermemo_;
  }
  if (this != default_instance_) {
  }
}

void GL_SugarVerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_SugarVerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_SugarVerInfo_descriptor_;
}

const GL_SugarVerInfo& GL_SugarVerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_SugarVerInfo* GL_SugarVerInfo::default_instance_ = NULL;

GL_SugarVerInfo* GL_SugarVerInfo::New() const {
  return new GL_SugarVerInfo;
}

void GL_SugarVerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vercode_ = GOOGLE_LONGLONG(0);
    deptid_ = 0;
    vertype_ = 0;
    verindex_ = 0;
    uploadstatus_ = 0;
    filecount_ = 0;
    verdbstate_ = 0;
    creatorid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    starttime_ = GOOGLE_LONGLONG(0);
    stoptime_ = GOOGLE_LONGLONG(0);
    createtime_ = GOOGLE_LONGLONG(0);
    if (has_vermemo()) {
      if (vermemo_ != &::google::protobuf::internal::kEmptyString) {
        vermemo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_SugarVerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 VerCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vercode_)));
          set_has_vercode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DeptID;
        break;
      }

      // optional int32 DeptID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeptID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deptid_)));
          set_has_deptid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_VerType;
        break;
      }

      // optional int32 VerType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertype_)));
          set_has_vertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VerIndex;
        break;
      }

      // optional int32 VerIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verindex_)));
          set_has_verindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_UploadStatus;
        break;
      }

      // optional int32 UploadStatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UploadStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uploadstatus_)));
          set_has_uploadstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FileCount;
        break;
      }

      // optional int32 FileCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FileCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filecount_)));
          set_has_filecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_VerDBState;
        break;
      }

      // optional int32 VerDBState = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VerDBState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verdbstate_)));
          set_has_verdbstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CreatorID;
        break;
      }

      // optional int32 CreatorID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_StartTime;
        break;
      }

      // optional int64 StartTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_StopTime;
        break;
      }

      // optional int64 StopTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CreateTime;
        break;
      }

      // optional int64 CreateTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_VerMemo;
        break;
      }

      // optional string VerMemo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VerMemo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vermemo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vermemo().data(), this->vermemo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_SugarVerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 VerCode = 1;
  if (has_vercode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->vercode(), output);
  }

  // optional int32 DeptID = 2;
  if (has_deptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->deptid(), output);
  }

  // optional int32 VerType = 3;
  if (has_vertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vertype(), output);
  }

  // optional int32 VerIndex = 4;
  if (has_verindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->verindex(), output);
  }

  // optional int32 UploadStatus = 5;
  if (has_uploadstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->uploadstatus(), output);
  }

  // optional int32 FileCount = 6;
  if (has_filecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->filecount(), output);
  }

  // optional int32 VerDBState = 7;
  if (has_verdbstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->verdbstate(), output);
  }

  // optional int32 CreatorID = 8;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->creatorid(), output);
  }

  // optional int64 StartTime = 9;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->starttime(), output);
  }

  // optional int64 StopTime = 10;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->stoptime(), output);
  }

  // optional int64 CreateTime = 11;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->createtime(), output);
  }

  // optional string VerMemo = 12;
  if (has_vermemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vermemo().data(), this->vermemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->vermemo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_SugarVerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 VerCode = 1;
  if (has_vercode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->vercode(), target);
  }

  // optional int32 DeptID = 2;
  if (has_deptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->deptid(), target);
  }

  // optional int32 VerType = 3;
  if (has_vertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vertype(), target);
  }

  // optional int32 VerIndex = 4;
  if (has_verindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->verindex(), target);
  }

  // optional int32 UploadStatus = 5;
  if (has_uploadstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->uploadstatus(), target);
  }

  // optional int32 FileCount = 6;
  if (has_filecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->filecount(), target);
  }

  // optional int32 VerDBState = 7;
  if (has_verdbstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->verdbstate(), target);
  }

  // optional int32 CreatorID = 8;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->creatorid(), target);
  }

  // optional int64 StartTime = 9;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->starttime(), target);
  }

  // optional int64 StopTime = 10;
  if (has_stoptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->stoptime(), target);
  }

  // optional int64 CreateTime = 11;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->createtime(), target);
  }

  // optional string VerMemo = 12;
  if (has_vermemo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vermemo().data(), this->vermemo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->vermemo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_SugarVerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 VerCode = 1;
    if (has_vercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vercode());
    }

    // optional int32 DeptID = 2;
    if (has_deptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deptid());
    }

    // optional int32 VerType = 3;
    if (has_vertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertype());
    }

    // optional int32 VerIndex = 4;
    if (has_verindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verindex());
    }

    // optional int32 UploadStatus = 5;
    if (has_uploadstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uploadstatus());
    }

    // optional int32 FileCount = 6;
    if (has_filecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filecount());
    }

    // optional int32 VerDBState = 7;
    if (has_verdbstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verdbstate());
    }

    // optional int32 CreatorID = 8;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 StartTime = 9;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 StopTime = 10;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stoptime());
    }

    // optional int64 CreateTime = 11;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional string VerMemo = 12;
    if (has_vermemo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vermemo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_SugarVerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_SugarVerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_SugarVerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_SugarVerInfo::MergeFrom(const GL_SugarVerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vercode()) {
      set_vercode(from.vercode());
    }
    if (from.has_deptid()) {
      set_deptid(from.deptid());
    }
    if (from.has_vertype()) {
      set_vertype(from.vertype());
    }
    if (from.has_verindex()) {
      set_verindex(from.verindex());
    }
    if (from.has_uploadstatus()) {
      set_uploadstatus(from.uploadstatus());
    }
    if (from.has_filecount()) {
      set_filecount(from.filecount());
    }
    if (from.has_verdbstate()) {
      set_verdbstate(from.verdbstate());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_vermemo()) {
      set_vermemo(from.vermemo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_SugarVerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_SugarVerInfo::CopyFrom(const GL_SugarVerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_SugarVerInfo::IsInitialized() const {

  return true;
}

void GL_SugarVerInfo::Swap(GL_SugarVerInfo* other) {
  if (other != this) {
    std::swap(vercode_, other->vercode_);
    std::swap(deptid_, other->deptid_);
    std::swap(vertype_, other->vertype_);
    std::swap(verindex_, other->verindex_);
    std::swap(uploadstatus_, other->uploadstatus_);
    std::swap(filecount_, other->filecount_);
    std::swap(verdbstate_, other->verdbstate_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(createtime_, other->createtime_);
    std::swap(vermemo_, other->vermemo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_SugarVerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_SugarVerInfo_descriptor_;
  metadata.reflection = GL_SugarVerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_TransferOrderInfo::kRecordIDFieldNumber;
const int GL_TransferOrderInfo::kTransferByUserIDFieldNumber;
const int GL_TransferOrderInfo::kTransferToUserIDFieldNumber;
#endif  // !_MSC_VER

GL_TransferOrderInfo::GL_TransferOrderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_TransferOrderInfo::InitAsDefaultInstance() {
}

GL_TransferOrderInfo::GL_TransferOrderInfo(const GL_TransferOrderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_TransferOrderInfo::SharedCtor() {
  _cached_size_ = 0;
  recordid_ = GOOGLE_LONGLONG(0);
  transferbyuserid_ = 0;
  transfertouserid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_TransferOrderInfo::~GL_TransferOrderInfo() {
  SharedDtor();
}

void GL_TransferOrderInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GL_TransferOrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_TransferOrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_TransferOrderInfo_descriptor_;
}

const GL_TransferOrderInfo& GL_TransferOrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_TransferOrderInfo* GL_TransferOrderInfo::default_instance_ = NULL;

GL_TransferOrderInfo* GL_TransferOrderInfo::New() const {
  return new GL_TransferOrderInfo;
}

void GL_TransferOrderInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recordid_ = GOOGLE_LONGLONG(0);
    transferbyuserid_ = 0;
    transfertouserid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_TransferOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 RecordID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TransferByUserID;
        break;
      }

      // optional int32 TransferByUserID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TransferByUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transferbyuserid_)));
          set_has_transferbyuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TransferToUserID;
        break;
      }

      // optional int32 TransferToUserID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TransferToUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfertouserid_)));
          set_has_transfertouserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_TransferOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 RecordID = 1;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->recordid(), output);
  }

  // optional int32 TransferByUserID = 2;
  if (has_transferbyuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->transferbyuserid(), output);
  }

  // optional int32 TransferToUserID = 3;
  if (has_transfertouserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->transfertouserid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_TransferOrderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 RecordID = 1;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->recordid(), target);
  }

  // optional int32 TransferByUserID = 2;
  if (has_transferbyuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->transferbyuserid(), target);
  }

  // optional int32 TransferToUserID = 3;
  if (has_transfertouserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->transfertouserid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_TransferOrderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 RecordID = 1;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recordid());
    }

    // optional int32 TransferByUserID = 2;
    if (has_transferbyuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transferbyuserid());
    }

    // optional int32 TransferToUserID = 3;
    if (has_transfertouserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transfertouserid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_TransferOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_TransferOrderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_TransferOrderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_TransferOrderInfo::MergeFrom(const GL_TransferOrderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_transferbyuserid()) {
      set_transferbyuserid(from.transferbyuserid());
    }
    if (from.has_transfertouserid()) {
      set_transfertouserid(from.transfertouserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_TransferOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_TransferOrderInfo::CopyFrom(const GL_TransferOrderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_TransferOrderInfo::IsInitialized() const {

  return true;
}

void GL_TransferOrderInfo::Swap(GL_TransferOrderInfo* other) {
  if (other != this) {
    std::swap(recordid_, other->recordid_);
    std::swap(transferbyuserid_, other->transferbyuserid_);
    std::swap(transfertouserid_, other->transfertouserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_TransferOrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_TransferOrderInfo_descriptor_;
  metadata.reflection = GL_TransferOrderInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_UnitInfo::kUnitIDFieldNumber;
const int GL_UnitInfo::kGTypeIDFieldNumber;
const int GL_UnitInfo::kUnitNameFieldNumber;
const int GL_UnitInfo::kCreatorIDFieldNumber;
const int GL_UnitInfo::kUpdaterIDFieldNumber;
const int GL_UnitInfo::kCreateTimeFieldNumber;
const int GL_UnitInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GL_UnitInfo::GL_UnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_UnitInfo::InitAsDefaultInstance() {
}

GL_UnitInfo::GL_UnitInfo(const GL_UnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_UnitInfo::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = 0;
  gtypeid_ = 0;
  unitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_UnitInfo::~GL_UnitInfo() {
  SharedDtor();
}

void GL_UnitInfo::SharedDtor() {
  if (unitname_ != &::google::protobuf::internal::kEmptyString) {
    delete unitname_;
  }
  if (this != default_instance_) {
  }
}

void GL_UnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_UnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_UnitInfo_descriptor_;
}

const GL_UnitInfo& GL_UnitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_UnitInfo* GL_UnitInfo::default_instance_ = NULL;

GL_UnitInfo* GL_UnitInfo::New() const {
  return new GL_UnitInfo;
}

void GL_UnitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unitid_ = 0;
    gtypeid_ = 0;
    if (has_unitname()) {
      if (unitname_ != &::google::protobuf::internal::kEmptyString) {
        unitname_->clear();
      }
    }
    creatorid_ = 0;
    updaterid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_UnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GTypeID;
        break;
      }

      // optional int32 GTypeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtypeid_)));
          set_has_gtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UnitName;
        break;
      }

      // optional string UnitName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UnitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitname().data(), this->unitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CreatorID;
        break;
      }

      // optional int32 CreatorID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_UpdaterID;
        break;
      }

      // optional int32 UpdaterID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CreateTime;
        break;
      }

      // optional int64 CreateTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_UpdateTime;
        break;
      }

      // optional int64 UpdateTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_UnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 UnitID = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unitid(), output);
  }

  // optional int32 GTypeID = 2;
  if (has_gtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gtypeid(), output);
  }

  // optional string UnitName = 3;
  if (has_unitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->unitname(), output);
  }

  // optional int32 CreatorID = 4;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->creatorid(), output);
  }

  // optional int32 UpdaterID = 5;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->updaterid(), output);
  }

  // optional int64 CreateTime = 6;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->createtime(), output);
  }

  // optional int64 UpdateTime = 7;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_UnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 UnitID = 1;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unitid(), target);
  }

  // optional int32 GTypeID = 2;
  if (has_gtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gtypeid(), target);
  }

  // optional string UnitName = 3;
  if (has_unitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->unitname(), target);
  }

  // optional int32 CreatorID = 4;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->creatorid(), target);
  }

  // optional int32 UpdaterID = 5;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->updaterid(), target);
  }

  // optional int64 CreateTime = 6;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->createtime(), target);
  }

  // optional int64 UpdateTime = 7;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_UnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UnitID = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitid());
    }

    // optional int32 GTypeID = 2;
    if (has_gtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtypeid());
    }

    // optional string UnitName = 3;
    if (has_unitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitname());
    }

    // optional int32 CreatorID = 4;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // optional int32 UpdaterID = 5;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

    // optional int64 CreateTime = 6;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int64 UpdateTime = 7;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_UnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_UnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_UnitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_UnitInfo::MergeFrom(const GL_UnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_gtypeid()) {
      set_gtypeid(from.gtypeid());
    }
    if (from.has_unitname()) {
      set_unitname(from.unitname());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_UnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_UnitInfo::CopyFrom(const GL_UnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_UnitInfo::IsInitialized() const {

  return true;
}

void GL_UnitInfo::Swap(GL_UnitInfo* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(gtypeid_, other->gtypeid_);
    std::swap(unitname_, other->unitname_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_UnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_UnitInfo_descriptor_;
  metadata.reflection = GL_UnitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_UserActivationInfo::kUserIDFieldNumber;
const int GL_UserActivationInfo::kActivationCodeFieldNumber;
const int GL_UserActivationInfo::kTryCountFieldNumber;
const int GL_UserActivationInfo::kLastTryTimeFieldNumber;
#endif  // !_MSC_VER

GL_UserActivationInfo::GL_UserActivationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_UserActivationInfo::InitAsDefaultInstance() {
}

GL_UserActivationInfo::GL_UserActivationInfo(const GL_UserActivationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_UserActivationInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  activationcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trycount_ = 0;
  lasttrytime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_UserActivationInfo::~GL_UserActivationInfo() {
  SharedDtor();
}

void GL_UserActivationInfo::SharedDtor() {
  if (activationcode_ != &::google::protobuf::internal::kEmptyString) {
    delete activationcode_;
  }
  if (this != default_instance_) {
  }
}

void GL_UserActivationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_UserActivationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_UserActivationInfo_descriptor_;
}

const GL_UserActivationInfo& GL_UserActivationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_UserActivationInfo* GL_UserActivationInfo::default_instance_ = NULL;

GL_UserActivationInfo* GL_UserActivationInfo::New() const {
  return new GL_UserActivationInfo;
}

void GL_UserActivationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_activationcode()) {
      if (activationcode_ != &::google::protobuf::internal::kEmptyString) {
        activationcode_->clear();
      }
    }
    trycount_ = 0;
    lasttrytime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_UserActivationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ActivationCode;
        break;
      }

      // optional string ActivationCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActivationCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activationcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activationcode().data(), this->activationcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TryCount;
        break;
      }

      // optional int32 TryCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TryCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trycount_)));
          set_has_trycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LastTryTime;
        break;
      }

      // optional int64 LastTryTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastTryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttrytime_)));
          set_has_lasttrytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_UserActivationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional string ActivationCode = 2;
  if (has_activationcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activationcode().data(), this->activationcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->activationcode(), output);
  }

  // optional int32 TryCount = 3;
  if (has_trycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trycount(), output);
  }

  // optional int64 LastTryTime = 4;
  if (has_lasttrytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lasttrytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_UserActivationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional string ActivationCode = 2;
  if (has_activationcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activationcode().data(), this->activationcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->activationcode(), target);
  }

  // optional int32 TryCount = 3;
  if (has_trycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trycount(), target);
  }

  // optional int64 LastTryTime = 4;
  if (has_lasttrytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lasttrytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_UserActivationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string ActivationCode = 2;
    if (has_activationcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activationcode());
    }

    // optional int32 TryCount = 3;
    if (has_trycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trycount());
    }

    // optional int64 LastTryTime = 4;
    if (has_lasttrytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttrytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_UserActivationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_UserActivationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_UserActivationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_UserActivationInfo::MergeFrom(const GL_UserActivationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_activationcode()) {
      set_activationcode(from.activationcode());
    }
    if (from.has_trycount()) {
      set_trycount(from.trycount());
    }
    if (from.has_lasttrytime()) {
      set_lasttrytime(from.lasttrytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_UserActivationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_UserActivationInfo::CopyFrom(const GL_UserActivationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_UserActivationInfo::IsInitialized() const {

  return true;
}

void GL_UserActivationInfo::Swap(GL_UserActivationInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(activationcode_, other->activationcode_);
    std::swap(trycount_, other->trycount_);
    std::swap(lasttrytime_, other->lasttrytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_UserActivationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_UserActivationInfo_descriptor_;
  metadata.reflection = GL_UserActivationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_UserInfo::kUserIDFieldNumber;
const int GL_UserInfo::kFactoryIDFieldNumber;
const int GL_UserInfo::kShopIDFieldNumber;
const int GL_UserInfo::kDeptIDFieldNumber;
const int GL_UserInfo::kIsDelFieldNumber;
const int GL_UserInfo::kRoleIDFieldNumber;
const int GL_UserInfo::kCreatorIDFieldNumber;
const int GL_UserInfo::kUpdaterIDFieldNumber;
const int GL_UserInfo::kCreateTimeFieldNumber;
const int GL_UserInfo::kUpdateTimeFieldNumber;
const int GL_UserInfo::kUserPwdFieldNumber;
const int GL_UserInfo::kUserCodeFieldNumber;
const int GL_UserInfo::kEncodeStrFieldNumber;
const int GL_UserInfo::kTrueNameFieldNumber;
const int GL_UserInfo::kIDCodeFieldNumber;
const int GL_UserInfo::kQQNumFieldNumber;
const int GL_UserInfo::kEmailFieldNumber;
const int GL_UserInfo::kTelFieldNumber;
const int GL_UserInfo::kCellPhoneFieldNumber;
const int GL_UserInfo::kPostCodeFieldNumber;
const int GL_UserInfo::kContactAddressFieldNumber;
const int GL_UserInfo::kIsActivedFieldNumber;
const int GL_UserInfo::kIsLockedFieldNumber;
#endif  // !_MSC_VER

GL_UserInfo::GL_UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_UserInfo::InitAsDefaultInstance() {
}

GL_UserInfo::GL_UserInfo(const GL_UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_UserInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  factoryid_ = 0;
  shopid_ = 0;
  deptid_ = 0;
  isdel_ = false;
  roleid_ = 0;
  creatorid_ = 0;
  updaterid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  userpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encodestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  truename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qqnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cellphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  postcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contactaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isactived_ = false;
  islocked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_UserInfo::~GL_UserInfo() {
  SharedDtor();
}

void GL_UserInfo::SharedDtor() {
  if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpwd_;
  }
  if (usercode_ != &::google::protobuf::internal::kEmptyString) {
    delete usercode_;
  }
  if (encodestr_ != &::google::protobuf::internal::kEmptyString) {
    delete encodestr_;
  }
  if (truename_ != &::google::protobuf::internal::kEmptyString) {
    delete truename_;
  }
  if (idcode_ != &::google::protobuf::internal::kEmptyString) {
    delete idcode_;
  }
  if (qqnum_ != &::google::protobuf::internal::kEmptyString) {
    delete qqnum_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    delete tel_;
  }
  if (cellphone_ != &::google::protobuf::internal::kEmptyString) {
    delete cellphone_;
  }
  if (postcode_ != &::google::protobuf::internal::kEmptyString) {
    delete postcode_;
  }
  if (contactaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete contactaddress_;
  }
  if (this != default_instance_) {
  }
}

void GL_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_UserInfo_descriptor_;
}

const GL_UserInfo& GL_UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_UserInfo* GL_UserInfo::default_instance_ = NULL;

GL_UserInfo* GL_UserInfo::New() const {
  return new GL_UserInfo;
}

void GL_UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    factoryid_ = 0;
    shopid_ = 0;
    deptid_ = 0;
    isdel_ = false;
    roleid_ = 0;
    creatorid_ = 0;
    updaterid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    createtime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    if (has_userpwd()) {
      if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
        userpwd_->clear();
      }
    }
    if (has_usercode()) {
      if (usercode_ != &::google::protobuf::internal::kEmptyString) {
        usercode_->clear();
      }
    }
    if (has_encodestr()) {
      if (encodestr_ != &::google::protobuf::internal::kEmptyString) {
        encodestr_->clear();
      }
    }
    if (has_truename()) {
      if (truename_ != &::google::protobuf::internal::kEmptyString) {
        truename_->clear();
      }
    }
    if (has_idcode()) {
      if (idcode_ != &::google::protobuf::internal::kEmptyString) {
        idcode_->clear();
      }
    }
    if (has_qqnum()) {
      if (qqnum_ != &::google::protobuf::internal::kEmptyString) {
        qqnum_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_tel()) {
      if (tel_ != &::google::protobuf::internal::kEmptyString) {
        tel_->clear();
      }
    }
    if (has_cellphone()) {
      if (cellphone_ != &::google::protobuf::internal::kEmptyString) {
        cellphone_->clear();
      }
    }
    if (has_postcode()) {
      if (postcode_ != &::google::protobuf::internal::kEmptyString) {
        postcode_->clear();
      }
    }
    if (has_contactaddress()) {
      if (contactaddress_ != &::google::protobuf::internal::kEmptyString) {
        contactaddress_->clear();
      }
    }
    isactived_ = false;
    islocked_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FactoryID;
        break;
      }

      // optional int32 FactoryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FactoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factoryid_)));
          set_has_factoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ShopID;
        break;
      }

      // optional int32 ShopID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShopID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DeptID;
        break;
      }

      // optional int32 DeptID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeptID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deptid_)));
          set_has_deptid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsDel;
        break;
      }

      // optional bool IsDel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RoleID;
        break;
      }

      // optional int32 RoleID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CreatorID;
        break;
      }

      // optional int32 CreatorID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatorid_)));
          set_has_creatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UpdaterID;
        break;
      }

      // optional int32 UpdaterID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdaterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updaterid_)));
          set_has_updaterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CreateTime;
        break;
      }

      // optional int64 CreateTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_UpdateTime;
        break;
      }

      // optional int64 UpdateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_UserPwd;
        break;
      }

      // optional string UserPwd = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userpwd().data(), this->userpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_UserCode;
        break;
      }

      // optional string UserCode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usercode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usercode().data(), this->usercode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_EncodeStr;
        break;
      }

      // optional string EncodeStr = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EncodeStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encodestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->encodestr().data(), this->encodestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_TrueName;
        break;
      }

      // optional string TrueName = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TrueName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_truename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->truename().data(), this->truename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_IDCode;
        break;
      }

      // optional string IDCode = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IDCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idcode().data(), this->idcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_QQNum;
        break;
      }

      // optional string QQNum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QQNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qqnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qqnum().data(), this->qqnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_Email;
        break;
      }

      // optional string Email = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_Tel;
        break;
      }

      // optional string Tel = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tel().data(), this->tel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_CellPhone;
        break;
      }

      // optional string CellPhone = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CellPhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cellphone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cellphone().data(), this->cellphone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_PostCode;
        break;
      }

      // optional string PostCode = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PostCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->postcode().data(), this->postcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ContactAddress;
        break;
      }

      // optional string ContactAddress = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContactAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contactaddress().data(), this->contactaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_IsActived;
        break;
      }

      // optional bool IsActived = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActived:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactived_)));
          set_has_isactived();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_IsLocked;
        break;
      }

      // optional bool IsLocked = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 FactoryID = 2;
  if (has_factoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factoryid(), output);
  }

  // optional int32 ShopID = 3;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->shopid(), output);
  }

  // optional int32 DeptID = 4;
  if (has_deptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->deptid(), output);
  }

  // optional bool IsDel = 5;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdel(), output);
  }

  // optional int32 RoleID = 6;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roleid(), output);
  }

  // optional int32 CreatorID = 7;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->creatorid(), output);
  }

  // optional int32 UpdaterID = 8;
  if (has_updaterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->updaterid(), output);
  }

  // optional int64 CreateTime = 9;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->createtime(), output);
  }

  // optional int64 UpdateTime = 10;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->updatetime(), output);
  }

  // optional string UserPwd = 11;
  if (has_userpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpwd().data(), this->userpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->userpwd(), output);
  }

  // optional string UserCode = 12;
  if (has_usercode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usercode().data(), this->usercode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->usercode(), output);
  }

  // optional string EncodeStr = 13;
  if (has_encodestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encodestr().data(), this->encodestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->encodestr(), output);
  }

  // optional string TrueName = 14;
  if (has_truename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->truename().data(), this->truename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->truename(), output);
  }

  // optional string IDCode = 15;
  if (has_idcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idcode().data(), this->idcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->idcode(), output);
  }

  // optional string QQNum = 16;
  if (has_qqnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qqnum().data(), this->qqnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->qqnum(), output);
  }

  // optional string Email = 17;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->email(), output);
  }

  // optional string Tel = 18;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->tel(), output);
  }

  // optional string CellPhone = 19;
  if (has_cellphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cellphone().data(), this->cellphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->cellphone(), output);
  }

  // optional string PostCode = 20;
  if (has_postcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postcode().data(), this->postcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->postcode(), output);
  }

  // optional string ContactAddress = 21;
  if (has_contactaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactaddress().data(), this->contactaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->contactaddress(), output);
  }

  // optional bool IsActived = 22;
  if (has_isactived()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->isactived(), output);
  }

  // optional bool IsLocked = 23;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->islocked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 FactoryID = 2;
  if (has_factoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factoryid(), target);
  }

  // optional int32 ShopID = 3;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->shopid(), target);
  }

  // optional int32 DeptID = 4;
  if (has_deptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->deptid(), target);
  }

  // optional bool IsDel = 5;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdel(), target);
  }

  // optional int32 RoleID = 6;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roleid(), target);
  }

  // optional int32 CreatorID = 7;
  if (has_creatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->creatorid(), target);
  }

  // optional int32 UpdaterID = 8;
  if (has_updaterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->updaterid(), target);
  }

  // optional int64 CreateTime = 9;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->createtime(), target);
  }

  // optional int64 UpdateTime = 10;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->updatetime(), target);
  }

  // optional string UserPwd = 11;
  if (has_userpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpwd().data(), this->userpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->userpwd(), target);
  }

  // optional string UserCode = 12;
  if (has_usercode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usercode().data(), this->usercode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->usercode(), target);
  }

  // optional string EncodeStr = 13;
  if (has_encodestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encodestr().data(), this->encodestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->encodestr(), target);
  }

  // optional string TrueName = 14;
  if (has_truename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->truename().data(), this->truename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->truename(), target);
  }

  // optional string IDCode = 15;
  if (has_idcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idcode().data(), this->idcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->idcode(), target);
  }

  // optional string QQNum = 16;
  if (has_qqnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qqnum().data(), this->qqnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->qqnum(), target);
  }

  // optional string Email = 17;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->email(), target);
  }

  // optional string Tel = 18;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->tel(), target);
  }

  // optional string CellPhone = 19;
  if (has_cellphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cellphone().data(), this->cellphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->cellphone(), target);
  }

  // optional string PostCode = 20;
  if (has_postcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postcode().data(), this->postcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->postcode(), target);
  }

  // optional string ContactAddress = 21;
  if (has_contactaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactaddress().data(), this->contactaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->contactaddress(), target);
  }

  // optional bool IsActived = 22;
  if (has_isactived()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->isactived(), target);
  }

  // optional bool IsLocked = 23;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->islocked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 FactoryID = 2;
    if (has_factoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factoryid());
    }

    // optional int32 ShopID = 3;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

    // optional int32 DeptID = 4;
    if (has_deptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deptid());
    }

    // optional bool IsDel = 5;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // optional int32 RoleID = 6;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 CreatorID = 7;
    if (has_creatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatorid());
    }

    // optional int32 UpdaterID = 8;
    if (has_updaterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updaterid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 CreateTime = 9;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int64 UpdateTime = 10;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // optional string UserPwd = 11;
    if (has_userpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userpwd());
    }

    // optional string UserCode = 12;
    if (has_usercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usercode());
    }

    // optional string EncodeStr = 13;
    if (has_encodestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encodestr());
    }

    // optional string TrueName = 14;
    if (has_truename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->truename());
    }

    // optional string IDCode = 15;
    if (has_idcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idcode());
    }

    // optional string QQNum = 16;
    if (has_qqnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qqnum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string Email = 17;
    if (has_email()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string Tel = 18;
    if (has_tel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tel());
    }

    // optional string CellPhone = 19;
    if (has_cellphone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cellphone());
    }

    // optional string PostCode = 20;
    if (has_postcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postcode());
    }

    // optional string ContactAddress = 21;
    if (has_contactaddress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contactaddress());
    }

    // optional bool IsActived = 22;
    if (has_isactived()) {
      total_size += 2 + 1;
    }

    // optional bool IsLocked = 23;
    if (has_islocked()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_UserInfo::MergeFrom(const GL_UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_factoryid()) {
      set_factoryid(from.factoryid());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_deptid()) {
      set_deptid(from.deptid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_updaterid()) {
      set_updaterid(from.updaterid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_userpwd()) {
      set_userpwd(from.userpwd());
    }
    if (from.has_usercode()) {
      set_usercode(from.usercode());
    }
    if (from.has_encodestr()) {
      set_encodestr(from.encodestr());
    }
    if (from.has_truename()) {
      set_truename(from.truename());
    }
    if (from.has_idcode()) {
      set_idcode(from.idcode());
    }
    if (from.has_qqnum()) {
      set_qqnum(from.qqnum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_tel()) {
      set_tel(from.tel());
    }
    if (from.has_cellphone()) {
      set_cellphone(from.cellphone());
    }
    if (from.has_postcode()) {
      set_postcode(from.postcode());
    }
    if (from.has_contactaddress()) {
      set_contactaddress(from.contactaddress());
    }
    if (from.has_isactived()) {
      set_isactived(from.isactived());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_UserInfo::CopyFrom(const GL_UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_UserInfo::IsInitialized() const {

  return true;
}

void GL_UserInfo::Swap(GL_UserInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(factoryid_, other->factoryid_);
    std::swap(shopid_, other->shopid_);
    std::swap(deptid_, other->deptid_);
    std::swap(isdel_, other->isdel_);
    std::swap(roleid_, other->roleid_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(updaterid_, other->updaterid_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(userpwd_, other->userpwd_);
    std::swap(usercode_, other->usercode_);
    std::swap(encodestr_, other->encodestr_);
    std::swap(truename_, other->truename_);
    std::swap(idcode_, other->idcode_);
    std::swap(qqnum_, other->qqnum_);
    std::swap(email_, other->email_);
    std::swap(tel_, other->tel_);
    std::swap(cellphone_, other->cellphone_);
    std::swap(postcode_, other->postcode_);
    std::swap(contactaddress_, other->contactaddress_);
    std::swap(isactived_, other->isactived_);
    std::swap(islocked_, other->islocked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_UserInfo_descriptor_;
  metadata.reflection = GL_UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GL_Table::kGLAppVerInfoFieldNumber;
const int GL_Table::kGLAppleseedInfoFieldNumber;
const int GL_Table::kGLAreaGeoMapInfoFieldNumber;
const int GL_Table::kGLAreaInfoFieldNumber;
const int GL_Table::kGLBaseBoardInfoFieldNumber;
const int GL_Table::kGLChargeLogInfoFieldNumber;
const int GL_Table::kGLDeptInfoFieldNumber;
const int GL_Table::kGLDesignerConfigInfoFieldNumber;
const int GL_Table::kGLGTypeInfoFieldNumber;
const int GL_Table::kGLGeoCodeInfoFieldNumber;
const int GL_Table::kGLMajorCateInfoFieldNumber;
const int GL_Table::kGLMinorCateInfoFieldNumber;
const int GL_Table::kGLMinorGTypeMapInfoFieldNumber;
const int GL_Table::kGLOrderInfoFieldNumber;
const int GL_Table::kGLPinYinFieldNumber;
const int GL_Table::kGLPrepaidCardInfoFieldNumber;
const int GL_Table::kGLPrintTemplateInfoFieldNumber;
const int GL_Table::kGLRoleInfoFieldNumber;
const int GL_Table::kGLRoleRightInfoFieldNumber;
const int GL_Table::kGLSugarVerInfoFieldNumber;
const int GL_Table::kGLTransferOrderInfoFieldNumber;
const int GL_Table::kGLUnitInfoFieldNumber;
const int GL_Table::kGLUserActivationInfoFieldNumber;
const int GL_Table::kGLUserInfoFieldNumber;
#endif  // !_MSC_VER

GL_Table::GL_Table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GL_Table::InitAsDefaultInstance() {
}

GL_Table::GL_Table(const GL_Table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GL_Table::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GL_Table::~GL_Table() {
  SharedDtor();
}

void GL_Table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GL_Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GL_Table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GL_Table_descriptor_;
}

const GL_Table& GL_Table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2dGL_2eproto();
  return *default_instance_;
}

GL_Table* GL_Table::default_instance_ = NULL;

GL_Table* GL_Table::New() const {
  return new GL_Table;
}

void GL_Table::Clear() {
  gl_appverinfo_.Clear();
  gl_appleseedinfo_.Clear();
  gl_areageomapinfo_.Clear();
  gl_areainfo_.Clear();
  gl_baseboardinfo_.Clear();
  gl_chargeloginfo_.Clear();
  gl_deptinfo_.Clear();
  gl_designerconfiginfo_.Clear();
  gl_gtypeinfo_.Clear();
  gl_geocodeinfo_.Clear();
  gl_majorcateinfo_.Clear();
  gl_minorcateinfo_.Clear();
  gl_minorgtypemapinfo_.Clear();
  gl_orderinfo_.Clear();
  gl_pinyin_.Clear();
  gl_prepaidcardinfo_.Clear();
  gl_printtemplateinfo_.Clear();
  gl_roleinfo_.Clear();
  gl_rolerightinfo_.Clear();
  gl_sugarverinfo_.Clear();
  gl_transferorderinfo_.Clear();
  gl_unitinfo_.Clear();
  gl_useractivationinfo_.Clear();
  gl_userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GL_Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transMsg.GL_AppVerInfo GL_AppVerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_AppVerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_appverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GL_AppVerInfo;
        if (input->ExpectTag(18)) goto parse_GL_AppleseedInfo;
        break;
      }

      // repeated .transMsg.GL_AppleseedInfo GL_AppleseedInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_AppleseedInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_appleseedinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GL_AppleseedInfo;
        if (input->ExpectTag(26)) goto parse_GL_AreaGeoMapInfo;
        break;
      }

      // repeated .transMsg.GL_AreaGeoMapInfo GL_AreaGeoMapInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_AreaGeoMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_areageomapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GL_AreaGeoMapInfo;
        if (input->ExpectTag(34)) goto parse_GL_AreaInfo;
        break;
      }

      // repeated .transMsg.GL_AreaInfo GL_AreaInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_AreaInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_areainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_GL_AreaInfo;
        if (input->ExpectTag(42)) goto parse_GL_BaseBoardInfo;
        break;
      }

      // repeated .transMsg.GL_BaseBoardInfo GL_BaseBoardInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_BaseBoardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_baseboardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_GL_BaseBoardInfo;
        if (input->ExpectTag(50)) goto parse_GL_ChargeLogInfo;
        break;
      }

      // repeated .transMsg.GL_ChargeLogInfo GL_ChargeLogInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_ChargeLogInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_chargeloginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_GL_ChargeLogInfo;
        if (input->ExpectTag(58)) goto parse_GL_DeptInfo;
        break;
      }

      // repeated .transMsg.GL_DeptInfo GL_DeptInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_DeptInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_deptinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_GL_DeptInfo;
        if (input->ExpectTag(66)) goto parse_GL_DesignerConfigInfo;
        break;
      }

      // repeated .transMsg.GL_DesignerConfigInfo GL_DesignerConfigInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_DesignerConfigInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_designerconfiginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_GL_DesignerConfigInfo;
        if (input->ExpectTag(74)) goto parse_GL_GTypeInfo;
        break;
      }

      // repeated .transMsg.GL_GTypeInfo GL_GTypeInfo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_GTypeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_gtypeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_GL_GTypeInfo;
        if (input->ExpectTag(82)) goto parse_GL_GeoCodeInfo;
        break;
      }

      // repeated .transMsg.GL_GeoCodeInfo GL_GeoCodeInfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_GeoCodeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_geocodeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_GL_GeoCodeInfo;
        if (input->ExpectTag(90)) goto parse_GL_MajorCateInfo;
        break;
      }

      // repeated .transMsg.GL_MajorCateInfo GL_MajorCateInfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_MajorCateInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_majorcateinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_GL_MajorCateInfo;
        if (input->ExpectTag(98)) goto parse_GL_MinorCateInfo;
        break;
      }

      // repeated .transMsg.GL_MinorCateInfo GL_MinorCateInfo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_MinorCateInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_minorcateinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_GL_MinorCateInfo;
        if (input->ExpectTag(106)) goto parse_GL_MinorGTypeMapInfo;
        break;
      }

      // repeated .transMsg.GL_MinorGTypeMapInfo GL_MinorGTypeMapInfo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_MinorGTypeMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_minorgtypemapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_GL_MinorGTypeMapInfo;
        if (input->ExpectTag(114)) goto parse_GL_OrderInfo;
        break;
      }

      // repeated .transMsg.GL_OrderInfo GL_OrderInfo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_OrderInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_orderinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_GL_OrderInfo;
        if (input->ExpectTag(122)) goto parse_GL_PinYin;
        break;
      }

      // repeated .transMsg.GL_PinYin GL_PinYin = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_PinYin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_pinyin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_GL_PinYin;
        if (input->ExpectTag(130)) goto parse_GL_PrepaidCardInfo;
        break;
      }

      // repeated .transMsg.GL_PrepaidCardInfo GL_PrepaidCardInfo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_PrepaidCardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_prepaidcardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_GL_PrepaidCardInfo;
        if (input->ExpectTag(138)) goto parse_GL_PrintTemplateInfo;
        break;
      }

      // repeated .transMsg.GL_PrintTemplateInfo GL_PrintTemplateInfo = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_PrintTemplateInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_printtemplateinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_GL_PrintTemplateInfo;
        if (input->ExpectTag(146)) goto parse_GL_RoleInfo;
        break;
      }

      // repeated .transMsg.GL_RoleInfo GL_RoleInfo = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_RoleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_GL_RoleInfo;
        if (input->ExpectTag(154)) goto parse_GL_RoleRightInfo;
        break;
      }

      // repeated .transMsg.GL_RoleRightInfo GL_RoleRightInfo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_RoleRightInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_rolerightinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_GL_RoleRightInfo;
        if (input->ExpectTag(162)) goto parse_GL_SugarVerInfo;
        break;
      }

      // repeated .transMsg.GL_SugarVerInfo GL_SugarVerInfo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_SugarVerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_sugarverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_GL_SugarVerInfo;
        if (input->ExpectTag(170)) goto parse_GL_TransferOrderInfo;
        break;
      }

      // repeated .transMsg.GL_TransferOrderInfo GL_TransferOrderInfo = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_TransferOrderInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_transferorderinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_GL_TransferOrderInfo;
        if (input->ExpectTag(178)) goto parse_GL_UnitInfo;
        break;
      }

      // repeated .transMsg.GL_UnitInfo GL_UnitInfo = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_UnitInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_unitinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_GL_UnitInfo;
        if (input->ExpectTag(186)) goto parse_GL_UserActivationInfo;
        break;
      }

      // repeated .transMsg.GL_UserActivationInfo GL_UserActivationInfo = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_UserActivationInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_useractivationinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_GL_UserActivationInfo;
        if (input->ExpectTag(194)) goto parse_GL_UserInfo;
        break;
      }

      // repeated .transMsg.GL_UserInfo GL_UserInfo = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gl_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_GL_UserInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GL_Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .transMsg.GL_AppVerInfo GL_AppVerInfo = 1;
  for (int i = 0; i < this->gl_appverinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gl_appverinfo(i), output);
  }

  // repeated .transMsg.GL_AppleseedInfo GL_AppleseedInfo = 2;
  for (int i = 0; i < this->gl_appleseedinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gl_appleseedinfo(i), output);
  }

  // repeated .transMsg.GL_AreaGeoMapInfo GL_AreaGeoMapInfo = 3;
  for (int i = 0; i < this->gl_areageomapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gl_areageomapinfo(i), output);
  }

  // repeated .transMsg.GL_AreaInfo GL_AreaInfo = 4;
  for (int i = 0; i < this->gl_areainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gl_areainfo(i), output);
  }

  // repeated .transMsg.GL_BaseBoardInfo GL_BaseBoardInfo = 5;
  for (int i = 0; i < this->gl_baseboardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gl_baseboardinfo(i), output);
  }

  // repeated .transMsg.GL_ChargeLogInfo GL_ChargeLogInfo = 6;
  for (int i = 0; i < this->gl_chargeloginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gl_chargeloginfo(i), output);
  }

  // repeated .transMsg.GL_DeptInfo GL_DeptInfo = 7;
  for (int i = 0; i < this->gl_deptinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gl_deptinfo(i), output);
  }

  // repeated .transMsg.GL_DesignerConfigInfo GL_DesignerConfigInfo = 8;
  for (int i = 0; i < this->gl_designerconfiginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->gl_designerconfiginfo(i), output);
  }

  // repeated .transMsg.GL_GTypeInfo GL_GTypeInfo = 9;
  for (int i = 0; i < this->gl_gtypeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->gl_gtypeinfo(i), output);
  }

  // repeated .transMsg.GL_GeoCodeInfo GL_GeoCodeInfo = 10;
  for (int i = 0; i < this->gl_geocodeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->gl_geocodeinfo(i), output);
  }

  // repeated .transMsg.GL_MajorCateInfo GL_MajorCateInfo = 11;
  for (int i = 0; i < this->gl_majorcateinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->gl_majorcateinfo(i), output);
  }

  // repeated .transMsg.GL_MinorCateInfo GL_MinorCateInfo = 12;
  for (int i = 0; i < this->gl_minorcateinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->gl_minorcateinfo(i), output);
  }

  // repeated .transMsg.GL_MinorGTypeMapInfo GL_MinorGTypeMapInfo = 13;
  for (int i = 0; i < this->gl_minorgtypemapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->gl_minorgtypemapinfo(i), output);
  }

  // repeated .transMsg.GL_OrderInfo GL_OrderInfo = 14;
  for (int i = 0; i < this->gl_orderinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->gl_orderinfo(i), output);
  }

  // repeated .transMsg.GL_PinYin GL_PinYin = 15;
  for (int i = 0; i < this->gl_pinyin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->gl_pinyin(i), output);
  }

  // repeated .transMsg.GL_PrepaidCardInfo GL_PrepaidCardInfo = 16;
  for (int i = 0; i < this->gl_prepaidcardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->gl_prepaidcardinfo(i), output);
  }

  // repeated .transMsg.GL_PrintTemplateInfo GL_PrintTemplateInfo = 17;
  for (int i = 0; i < this->gl_printtemplateinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->gl_printtemplateinfo(i), output);
  }

  // repeated .transMsg.GL_RoleInfo GL_RoleInfo = 18;
  for (int i = 0; i < this->gl_roleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->gl_roleinfo(i), output);
  }

  // repeated .transMsg.GL_RoleRightInfo GL_RoleRightInfo = 19;
  for (int i = 0; i < this->gl_rolerightinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->gl_rolerightinfo(i), output);
  }

  // repeated .transMsg.GL_SugarVerInfo GL_SugarVerInfo = 20;
  for (int i = 0; i < this->gl_sugarverinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->gl_sugarverinfo(i), output);
  }

  // repeated .transMsg.GL_TransferOrderInfo GL_TransferOrderInfo = 21;
  for (int i = 0; i < this->gl_transferorderinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->gl_transferorderinfo(i), output);
  }

  // repeated .transMsg.GL_UnitInfo GL_UnitInfo = 22;
  for (int i = 0; i < this->gl_unitinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->gl_unitinfo(i), output);
  }

  // repeated .transMsg.GL_UserActivationInfo GL_UserActivationInfo = 23;
  for (int i = 0; i < this->gl_useractivationinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->gl_useractivationinfo(i), output);
  }

  // repeated .transMsg.GL_UserInfo GL_UserInfo = 24;
  for (int i = 0; i < this->gl_userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->gl_userinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GL_Table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .transMsg.GL_AppVerInfo GL_AppVerInfo = 1;
  for (int i = 0; i < this->gl_appverinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gl_appverinfo(i), target);
  }

  // repeated .transMsg.GL_AppleseedInfo GL_AppleseedInfo = 2;
  for (int i = 0; i < this->gl_appleseedinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gl_appleseedinfo(i), target);
  }

  // repeated .transMsg.GL_AreaGeoMapInfo GL_AreaGeoMapInfo = 3;
  for (int i = 0; i < this->gl_areageomapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gl_areageomapinfo(i), target);
  }

  // repeated .transMsg.GL_AreaInfo GL_AreaInfo = 4;
  for (int i = 0; i < this->gl_areainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gl_areainfo(i), target);
  }

  // repeated .transMsg.GL_BaseBoardInfo GL_BaseBoardInfo = 5;
  for (int i = 0; i < this->gl_baseboardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gl_baseboardinfo(i), target);
  }

  // repeated .transMsg.GL_ChargeLogInfo GL_ChargeLogInfo = 6;
  for (int i = 0; i < this->gl_chargeloginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gl_chargeloginfo(i), target);
  }

  // repeated .transMsg.GL_DeptInfo GL_DeptInfo = 7;
  for (int i = 0; i < this->gl_deptinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gl_deptinfo(i), target);
  }

  // repeated .transMsg.GL_DesignerConfigInfo GL_DesignerConfigInfo = 8;
  for (int i = 0; i < this->gl_designerconfiginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->gl_designerconfiginfo(i), target);
  }

  // repeated .transMsg.GL_GTypeInfo GL_GTypeInfo = 9;
  for (int i = 0; i < this->gl_gtypeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->gl_gtypeinfo(i), target);
  }

  // repeated .transMsg.GL_GeoCodeInfo GL_GeoCodeInfo = 10;
  for (int i = 0; i < this->gl_geocodeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->gl_geocodeinfo(i), target);
  }

  // repeated .transMsg.GL_MajorCateInfo GL_MajorCateInfo = 11;
  for (int i = 0; i < this->gl_majorcateinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->gl_majorcateinfo(i), target);
  }

  // repeated .transMsg.GL_MinorCateInfo GL_MinorCateInfo = 12;
  for (int i = 0; i < this->gl_minorcateinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->gl_minorcateinfo(i), target);
  }

  // repeated .transMsg.GL_MinorGTypeMapInfo GL_MinorGTypeMapInfo = 13;
  for (int i = 0; i < this->gl_minorgtypemapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->gl_minorgtypemapinfo(i), target);
  }

  // repeated .transMsg.GL_OrderInfo GL_OrderInfo = 14;
  for (int i = 0; i < this->gl_orderinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->gl_orderinfo(i), target);
  }

  // repeated .transMsg.GL_PinYin GL_PinYin = 15;
  for (int i = 0; i < this->gl_pinyin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->gl_pinyin(i), target);
  }

  // repeated .transMsg.GL_PrepaidCardInfo GL_PrepaidCardInfo = 16;
  for (int i = 0; i < this->gl_prepaidcardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->gl_prepaidcardinfo(i), target);
  }

  // repeated .transMsg.GL_PrintTemplateInfo GL_PrintTemplateInfo = 17;
  for (int i = 0; i < this->gl_printtemplateinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->gl_printtemplateinfo(i), target);
  }

  // repeated .transMsg.GL_RoleInfo GL_RoleInfo = 18;
  for (int i = 0; i < this->gl_roleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->gl_roleinfo(i), target);
  }

  // repeated .transMsg.GL_RoleRightInfo GL_RoleRightInfo = 19;
  for (int i = 0; i < this->gl_rolerightinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->gl_rolerightinfo(i), target);
  }

  // repeated .transMsg.GL_SugarVerInfo GL_SugarVerInfo = 20;
  for (int i = 0; i < this->gl_sugarverinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->gl_sugarverinfo(i), target);
  }

  // repeated .transMsg.GL_TransferOrderInfo GL_TransferOrderInfo = 21;
  for (int i = 0; i < this->gl_transferorderinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->gl_transferorderinfo(i), target);
  }

  // repeated .transMsg.GL_UnitInfo GL_UnitInfo = 22;
  for (int i = 0; i < this->gl_unitinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->gl_unitinfo(i), target);
  }

  // repeated .transMsg.GL_UserActivationInfo GL_UserActivationInfo = 23;
  for (int i = 0; i < this->gl_useractivationinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->gl_useractivationinfo(i), target);
  }

  // repeated .transMsg.GL_UserInfo GL_UserInfo = 24;
  for (int i = 0; i < this->gl_userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->gl_userinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GL_Table::ByteSize() const {
  int total_size = 0;

  // repeated .transMsg.GL_AppVerInfo GL_AppVerInfo = 1;
  total_size += 1 * this->gl_appverinfo_size();
  for (int i = 0; i < this->gl_appverinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_appverinfo(i));
  }

  // repeated .transMsg.GL_AppleseedInfo GL_AppleseedInfo = 2;
  total_size += 1 * this->gl_appleseedinfo_size();
  for (int i = 0; i < this->gl_appleseedinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_appleseedinfo(i));
  }

  // repeated .transMsg.GL_AreaGeoMapInfo GL_AreaGeoMapInfo = 3;
  total_size += 1 * this->gl_areageomapinfo_size();
  for (int i = 0; i < this->gl_areageomapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_areageomapinfo(i));
  }

  // repeated .transMsg.GL_AreaInfo GL_AreaInfo = 4;
  total_size += 1 * this->gl_areainfo_size();
  for (int i = 0; i < this->gl_areainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_areainfo(i));
  }

  // repeated .transMsg.GL_BaseBoardInfo GL_BaseBoardInfo = 5;
  total_size += 1 * this->gl_baseboardinfo_size();
  for (int i = 0; i < this->gl_baseboardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_baseboardinfo(i));
  }

  // repeated .transMsg.GL_ChargeLogInfo GL_ChargeLogInfo = 6;
  total_size += 1 * this->gl_chargeloginfo_size();
  for (int i = 0; i < this->gl_chargeloginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_chargeloginfo(i));
  }

  // repeated .transMsg.GL_DeptInfo GL_DeptInfo = 7;
  total_size += 1 * this->gl_deptinfo_size();
  for (int i = 0; i < this->gl_deptinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_deptinfo(i));
  }

  // repeated .transMsg.GL_DesignerConfigInfo GL_DesignerConfigInfo = 8;
  total_size += 1 * this->gl_designerconfiginfo_size();
  for (int i = 0; i < this->gl_designerconfiginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_designerconfiginfo(i));
  }

  // repeated .transMsg.GL_GTypeInfo GL_GTypeInfo = 9;
  total_size += 1 * this->gl_gtypeinfo_size();
  for (int i = 0; i < this->gl_gtypeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_gtypeinfo(i));
  }

  // repeated .transMsg.GL_GeoCodeInfo GL_GeoCodeInfo = 10;
  total_size += 1 * this->gl_geocodeinfo_size();
  for (int i = 0; i < this->gl_geocodeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_geocodeinfo(i));
  }

  // repeated .transMsg.GL_MajorCateInfo GL_MajorCateInfo = 11;
  total_size += 1 * this->gl_majorcateinfo_size();
  for (int i = 0; i < this->gl_majorcateinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_majorcateinfo(i));
  }

  // repeated .transMsg.GL_MinorCateInfo GL_MinorCateInfo = 12;
  total_size += 1 * this->gl_minorcateinfo_size();
  for (int i = 0; i < this->gl_minorcateinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_minorcateinfo(i));
  }

  // repeated .transMsg.GL_MinorGTypeMapInfo GL_MinorGTypeMapInfo = 13;
  total_size += 1 * this->gl_minorgtypemapinfo_size();
  for (int i = 0; i < this->gl_minorgtypemapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_minorgtypemapinfo(i));
  }

  // repeated .transMsg.GL_OrderInfo GL_OrderInfo = 14;
  total_size += 1 * this->gl_orderinfo_size();
  for (int i = 0; i < this->gl_orderinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_orderinfo(i));
  }

  // repeated .transMsg.GL_PinYin GL_PinYin = 15;
  total_size += 1 * this->gl_pinyin_size();
  for (int i = 0; i < this->gl_pinyin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_pinyin(i));
  }

  // repeated .transMsg.GL_PrepaidCardInfo GL_PrepaidCardInfo = 16;
  total_size += 2 * this->gl_prepaidcardinfo_size();
  for (int i = 0; i < this->gl_prepaidcardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_prepaidcardinfo(i));
  }

  // repeated .transMsg.GL_PrintTemplateInfo GL_PrintTemplateInfo = 17;
  total_size += 2 * this->gl_printtemplateinfo_size();
  for (int i = 0; i < this->gl_printtemplateinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_printtemplateinfo(i));
  }

  // repeated .transMsg.GL_RoleInfo GL_RoleInfo = 18;
  total_size += 2 * this->gl_roleinfo_size();
  for (int i = 0; i < this->gl_roleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_roleinfo(i));
  }

  // repeated .transMsg.GL_RoleRightInfo GL_RoleRightInfo = 19;
  total_size += 2 * this->gl_rolerightinfo_size();
  for (int i = 0; i < this->gl_rolerightinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_rolerightinfo(i));
  }

  // repeated .transMsg.GL_SugarVerInfo GL_SugarVerInfo = 20;
  total_size += 2 * this->gl_sugarverinfo_size();
  for (int i = 0; i < this->gl_sugarverinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_sugarverinfo(i));
  }

  // repeated .transMsg.GL_TransferOrderInfo GL_TransferOrderInfo = 21;
  total_size += 2 * this->gl_transferorderinfo_size();
  for (int i = 0; i < this->gl_transferorderinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_transferorderinfo(i));
  }

  // repeated .transMsg.GL_UnitInfo GL_UnitInfo = 22;
  total_size += 2 * this->gl_unitinfo_size();
  for (int i = 0; i < this->gl_unitinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_unitinfo(i));
  }

  // repeated .transMsg.GL_UserActivationInfo GL_UserActivationInfo = 23;
  total_size += 2 * this->gl_useractivationinfo_size();
  for (int i = 0; i < this->gl_useractivationinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_useractivationinfo(i));
  }

  // repeated .transMsg.GL_UserInfo GL_UserInfo = 24;
  total_size += 2 * this->gl_userinfo_size();
  for (int i = 0; i < this->gl_userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gl_userinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GL_Table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GL_Table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GL_Table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GL_Table::MergeFrom(const GL_Table& from) {
  GOOGLE_CHECK_NE(&from, this);
  gl_appverinfo_.MergeFrom(from.gl_appverinfo_);
  gl_appleseedinfo_.MergeFrom(from.gl_appleseedinfo_);
  gl_areageomapinfo_.MergeFrom(from.gl_areageomapinfo_);
  gl_areainfo_.MergeFrom(from.gl_areainfo_);
  gl_baseboardinfo_.MergeFrom(from.gl_baseboardinfo_);
  gl_chargeloginfo_.MergeFrom(from.gl_chargeloginfo_);
  gl_deptinfo_.MergeFrom(from.gl_deptinfo_);
  gl_designerconfiginfo_.MergeFrom(from.gl_designerconfiginfo_);
  gl_gtypeinfo_.MergeFrom(from.gl_gtypeinfo_);
  gl_geocodeinfo_.MergeFrom(from.gl_geocodeinfo_);
  gl_majorcateinfo_.MergeFrom(from.gl_majorcateinfo_);
  gl_minorcateinfo_.MergeFrom(from.gl_minorcateinfo_);
  gl_minorgtypemapinfo_.MergeFrom(from.gl_minorgtypemapinfo_);
  gl_orderinfo_.MergeFrom(from.gl_orderinfo_);
  gl_pinyin_.MergeFrom(from.gl_pinyin_);
  gl_prepaidcardinfo_.MergeFrom(from.gl_prepaidcardinfo_);
  gl_printtemplateinfo_.MergeFrom(from.gl_printtemplateinfo_);
  gl_roleinfo_.MergeFrom(from.gl_roleinfo_);
  gl_rolerightinfo_.MergeFrom(from.gl_rolerightinfo_);
  gl_sugarverinfo_.MergeFrom(from.gl_sugarverinfo_);
  gl_transferorderinfo_.MergeFrom(from.gl_transferorderinfo_);
  gl_unitinfo_.MergeFrom(from.gl_unitinfo_);
  gl_useractivationinfo_.MergeFrom(from.gl_useractivationinfo_);
  gl_userinfo_.MergeFrom(from.gl_userinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GL_Table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GL_Table::CopyFrom(const GL_Table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GL_Table::IsInitialized() const {

  return true;
}

void GL_Table::Swap(GL_Table* other) {
  if (other != this) {
    gl_appverinfo_.Swap(&other->gl_appverinfo_);
    gl_appleseedinfo_.Swap(&other->gl_appleseedinfo_);
    gl_areageomapinfo_.Swap(&other->gl_areageomapinfo_);
    gl_areainfo_.Swap(&other->gl_areainfo_);
    gl_baseboardinfo_.Swap(&other->gl_baseboardinfo_);
    gl_chargeloginfo_.Swap(&other->gl_chargeloginfo_);
    gl_deptinfo_.Swap(&other->gl_deptinfo_);
    gl_designerconfiginfo_.Swap(&other->gl_designerconfiginfo_);
    gl_gtypeinfo_.Swap(&other->gl_gtypeinfo_);
    gl_geocodeinfo_.Swap(&other->gl_geocodeinfo_);
    gl_majorcateinfo_.Swap(&other->gl_majorcateinfo_);
    gl_minorcateinfo_.Swap(&other->gl_minorcateinfo_);
    gl_minorgtypemapinfo_.Swap(&other->gl_minorgtypemapinfo_);
    gl_orderinfo_.Swap(&other->gl_orderinfo_);
    gl_pinyin_.Swap(&other->gl_pinyin_);
    gl_prepaidcardinfo_.Swap(&other->gl_prepaidcardinfo_);
    gl_printtemplateinfo_.Swap(&other->gl_printtemplateinfo_);
    gl_roleinfo_.Swap(&other->gl_roleinfo_);
    gl_rolerightinfo_.Swap(&other->gl_rolerightinfo_);
    gl_sugarverinfo_.Swap(&other->gl_sugarverinfo_);
    gl_transferorderinfo_.Swap(&other->gl_transferorderinfo_);
    gl_unitinfo_.Swap(&other->gl_unitinfo_);
    gl_useractivationinfo_.Swap(&other->gl_useractivationinfo_);
    gl_userinfo_.Swap(&other->gl_userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GL_Table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GL_Table_descriptor_;
  metadata.reflection = GL_Table_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

// @@protoc_insertion_point(global_scope)
