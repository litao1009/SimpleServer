// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg-ZB.proto

#ifndef PROTOBUF_msg_2dZB_2eproto__INCLUDED
#define PROTOBUF_msg_2dZB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_2dZB_2eproto();
void protobuf_AssignDesc_msg_2dZB_2eproto();
void protobuf_ShutdownFile_msg_2dZB_2eproto();

class ZB_BoardGapInfo;
class ZB_BoardInfo;
class ZB_BoardSealInfo;
class ZB_Objects;
class ZB_OrderInfo;
class ZB_Table;

// ===================================================================

class ZB_BoardGapInfo : public ::google::protobuf::Message {
 public:
  ZB_BoardGapInfo();
  virtual ~ZB_BoardGapInfo();

  ZB_BoardGapInfo(const ZB_BoardGapInfo& from);

  inline ZB_BoardGapInfo& operator=(const ZB_BoardGapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZB_BoardGapInfo& default_instance();

  void Swap(ZB_BoardGapInfo* other);

  // implements Message ----------------------------------------------

  ZB_BoardGapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZB_BoardGapInfo& from);
  void MergeFrom(const ZB_BoardGapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ItemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 3;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 FactoryID = 4;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 4;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 BoardID = 5;
  inline bool has_boardid() const;
  inline void clear_boardid();
  static const int kBoardIDFieldNumber = 5;
  inline ::google::protobuf::int64 boardid() const;
  inline void set_boardid(::google::protobuf::int64 value);

  // required int32 GapIndex = 6;
  inline bool has_gapindex() const;
  inline void clear_gapindex();
  static const int kGapIndexFieldNumber = 6;
  inline ::google::protobuf::int32 gapindex() const;
  inline void set_gapindex(::google::protobuf::int32 value);

  // required int32 GapShape = 7;
  inline bool has_gapshape() const;
  inline void clear_gapshape();
  static const int kGapShapeFieldNumber = 7;
  inline ::google::protobuf::int32 gapshape() const;
  inline void set_gapshape(::google::protobuf::int32 value);

  // required double XLen = 8;
  inline bool has_xlen() const;
  inline void clear_xlen();
  static const int kXLenFieldNumber = 8;
  inline double xlen() const;
  inline void set_xlen(double value);

  // required double YLen = 9;
  inline bool has_ylen() const;
  inline void clear_ylen();
  static const int kYLenFieldNumber = 9;
  inline double ylen() const;
  inline void set_ylen(double value);

  // required double Square = 10;
  inline bool has_square() const;
  inline void clear_square();
  static const int kSquareFieldNumber = 10;
  inline double square() const;
  inline void set_square(double value);

  // required double XOffset = 11;
  inline bool has_xoffset() const;
  inline void clear_xoffset();
  static const int kXOffsetFieldNumber = 11;
  inline double xoffset() const;
  inline void set_xoffset(double value);

  // required double YOffset = 12;
  inline bool has_yoffset() const;
  inline void clear_yoffset();
  static const int kYOffsetFieldNumber = 12;
  inline double yoffset() const;
  inline void set_yoffset(double value);

  // required double ZOffset = 13;
  inline bool has_zoffset() const;
  inline void clear_zoffset();
  static const int kZOffsetFieldNumber = 13;
  inline double zoffset() const;
  inline void set_zoffset(double value);

  // required string OrderCode = 14;
  inline bool has_ordercode() const;
  inline void clear_ordercode();
  static const int kOrderCodeFieldNumber = 14;
  inline const ::std::string& ordercode() const;
  inline void set_ordercode(const ::std::string& value);
  inline void set_ordercode(const char* value);
  inline void set_ordercode(const char* value, size_t size);
  inline ::std::string* mutable_ordercode();
  inline ::std::string* release_ordercode();
  inline void set_allocated_ordercode(::std::string* ordercode);

  // required string OldTableName = 15;
  inline bool has_oldtablename() const;
  inline void clear_oldtablename();
  static const int kOldTableNameFieldNumber = 15;
  inline const ::std::string& oldtablename() const;
  inline void set_oldtablename(const ::std::string& value);
  inline void set_oldtablename(const char* value);
  inline void set_oldtablename(const char* value, size_t size);
  inline ::std::string* mutable_oldtablename();
  inline ::std::string* release_oldtablename();
  inline void set_allocated_oldtablename(::std::string* oldtablename);

  // required int32 OldID = 16;
  inline bool has_oldid() const;
  inline void clear_oldid();
  static const int kOldIDFieldNumber = 16;
  inline ::google::protobuf::int32 oldid() const;
  inline void set_oldid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.ZB_BoardGapInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_boardid();
  inline void clear_has_boardid();
  inline void set_has_gapindex();
  inline void clear_has_gapindex();
  inline void set_has_gapshape();
  inline void clear_has_gapshape();
  inline void set_has_xlen();
  inline void clear_has_xlen();
  inline void set_has_ylen();
  inline void clear_has_ylen();
  inline void set_has_square();
  inline void clear_has_square();
  inline void set_has_xoffset();
  inline void clear_has_xoffset();
  inline void set_has_yoffset();
  inline void clear_has_yoffset();
  inline void set_has_zoffset();
  inline void clear_has_zoffset();
  inline void set_has_ordercode();
  inline void clear_has_ordercode();
  inline void set_has_oldtablename();
  inline void clear_has_oldtablename();
  inline void set_has_oldid();
  inline void clear_has_oldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 boardid_;
  ::google::protobuf::int32 gapindex_;
  ::google::protobuf::int32 gapshape_;
  double xlen_;
  double ylen_;
  double square_;
  double xoffset_;
  double yoffset_;
  double zoffset_;
  ::std::string* ordercode_;
  ::std::string* oldtablename_;
  ::google::protobuf::int32 oldid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dZB_2eproto();
  friend void protobuf_AssignDesc_msg_2dZB_2eproto();
  friend void protobuf_ShutdownFile_msg_2dZB_2eproto();

  void InitAsDefaultInstance();
  static ZB_BoardGapInfo* default_instance_;
};
// -------------------------------------------------------------------

class ZB_BoardInfo : public ::google::protobuf::Message {
 public:
  ZB_BoardInfo();
  virtual ~ZB_BoardInfo();

  ZB_BoardInfo(const ZB_BoardInfo& from);

  inline ZB_BoardInfo& operator=(const ZB_BoardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZB_BoardInfo& default_instance();

  void Swap(ZB_BoardInfo* other);

  // implements Message ----------------------------------------------

  ZB_BoardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZB_BoardInfo& from);
  void MergeFrom(const ZB_BoardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ItemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 3;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 FactoryID = 4;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 4;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 BoardType = 5;
  inline bool has_boardtype() const;
  inline void clear_boardtype();
  static const int kBoardTypeFieldNumber = 5;
  inline ::google::protobuf::int32 boardtype() const;
  inline void set_boardtype(::google::protobuf::int32 value);

  // required int64 ObjectID = 6;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectIDFieldNumber = 6;
  inline ::google::protobuf::int64 objectid() const;
  inline void set_objectid(::google::protobuf::int64 value);

  // required int32 MaterialID = 7;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 7;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required int64 CabinetID = 8;
  inline bool has_cabinetid() const;
  inline void clear_cabinetid();
  static const int kCabinetIDFieldNumber = 8;
  inline ::google::protobuf::int64 cabinetid() const;
  inline void set_cabinetid(::google::protobuf::int64 value);

  // required int32 Grain = 9;
  inline bool has_grain() const;
  inline void clear_grain();
  static const int kGrainFieldNumber = 9;
  inline ::google::protobuf::int32 grain() const;
  inline void set_grain(::google::protobuf::int32 value);

  // required bool IsUserAdd = 10;
  inline bool has_isuseradd() const;
  inline void clear_isuseradd();
  static const int kIsUserAddFieldNumber = 10;
  inline bool isuseradd() const;
  inline void set_isuseradd(bool value);

  // required double XLength = 11;
  inline bool has_xlength() const;
  inline void clear_xlength();
  static const int kXLengthFieldNumber = 11;
  inline double xlength() const;
  inline void set_xlength(double value);

  // required double YLength = 12;
  inline bool has_ylength() const;
  inline void clear_ylength();
  static const int kYLengthFieldNumber = 12;
  inline double ylength() const;
  inline void set_ylength(double value);

  // required double ZLength = 13;
  inline bool has_zlength() const;
  inline void clear_zlength();
  static const int kZLengthFieldNumber = 13;
  inline double zlength() const;
  inline void set_zlength(double value);

  // required double Square = 14;
  inline bool has_square() const;
  inline void clear_square();
  static const int kSquareFieldNumber = 14;
  inline double square() const;
  inline void set_square(double value);

  // required double CutXLength = 15;
  inline bool has_cutxlength() const;
  inline void clear_cutxlength();
  static const int kCutXLengthFieldNumber = 15;
  inline double cutxlength() const;
  inline void set_cutxlength(double value);

  // required double CutYLength = 16;
  inline bool has_cutylength() const;
  inline void clear_cutylength();
  static const int kCutYLengthFieldNumber = 16;
  inline double cutylength() const;
  inline void set_cutylength(double value);

  // required string OrderCode = 17;
  inline bool has_ordercode() const;
  inline void clear_ordercode();
  static const int kOrderCodeFieldNumber = 17;
  inline const ::std::string& ordercode() const;
  inline void set_ordercode(const ::std::string& value);
  inline void set_ordercode(const char* value);
  inline void set_ordercode(const char* value, size_t size);
  inline ::std::string* mutable_ordercode();
  inline ::std::string* release_ordercode();
  inline void set_allocated_ordercode(::std::string* ordercode);

  // required string Name = 18;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 18;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string ObjectName = 19;
  inline bool has_objectname() const;
  inline void clear_objectname();
  static const int kObjectNameFieldNumber = 19;
  inline const ::std::string& objectname() const;
  inline void set_objectname(const ::std::string& value);
  inline void set_objectname(const char* value);
  inline void set_objectname(const char* value, size_t size);
  inline ::std::string* mutable_objectname();
  inline ::std::string* release_objectname();
  inline void set_allocated_objectname(::std::string* objectname);

  // required string ObjectCode = 20;
  inline bool has_objectcode() const;
  inline void clear_objectcode();
  static const int kObjectCodeFieldNumber = 20;
  inline const ::std::string& objectcode() const;
  inline void set_objectcode(const ::std::string& value);
  inline void set_objectcode(const char* value);
  inline void set_objectcode(const char* value, size_t size);
  inline ::std::string* mutable_objectcode();
  inline ::std::string* release_objectcode();
  inline void set_allocated_objectcode(::std::string* objectcode);

  // required string MaterialName = 21;
  inline bool has_materialname() const;
  inline void clear_materialname();
  static const int kMaterialNameFieldNumber = 21;
  inline const ::std::string& materialname() const;
  inline void set_materialname(const ::std::string& value);
  inline void set_materialname(const char* value);
  inline void set_materialname(const char* value, size_t size);
  inline ::std::string* mutable_materialname();
  inline ::std::string* release_materialname();
  inline void set_allocated_materialname(::std::string* materialname);

  // required string CabinetName = 22;
  inline bool has_cabinetname() const;
  inline void clear_cabinetname();
  static const int kCabinetNameFieldNumber = 22;
  inline const ::std::string& cabinetname() const;
  inline void set_cabinetname(const ::std::string& value);
  inline void set_cabinetname(const char* value);
  inline void set_cabinetname(const char* value, size_t size);
  inline ::std::string* mutable_cabinetname();
  inline ::std::string* release_cabinetname();
  inline void set_allocated_cabinetname(::std::string* cabinetname);

  // required string CabinetCode = 23;
  inline bool has_cabinetcode() const;
  inline void clear_cabinetcode();
  static const int kCabinetCodeFieldNumber = 23;
  inline const ::std::string& cabinetcode() const;
  inline void set_cabinetcode(const ::std::string& value);
  inline void set_cabinetcode(const char* value);
  inline void set_cabinetcode(const char* value, size_t size);
  inline ::std::string* mutable_cabinetcode();
  inline ::std::string* release_cabinetcode();
  inline void set_allocated_cabinetcode(::std::string* cabinetcode);

  // required string OldTableName = 24;
  inline bool has_oldtablename() const;
  inline void clear_oldtablename();
  static const int kOldTableNameFieldNumber = 24;
  inline const ::std::string& oldtablename() const;
  inline void set_oldtablename(const ::std::string& value);
  inline void set_oldtablename(const char* value);
  inline void set_oldtablename(const char* value, size_t size);
  inline ::std::string* mutable_oldtablename();
  inline ::std::string* release_oldtablename();
  inline void set_allocated_oldtablename(::std::string* oldtablename);

  // required int32 OldID = 25;
  inline bool has_oldid() const;
  inline void clear_oldid();
  static const int kOldIDFieldNumber = 25;
  inline ::google::protobuf::int32 oldid() const;
  inline void set_oldid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.ZB_BoardInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_boardtype();
  inline void clear_has_boardtype();
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_cabinetid();
  inline void clear_has_cabinetid();
  inline void set_has_grain();
  inline void clear_has_grain();
  inline void set_has_isuseradd();
  inline void clear_has_isuseradd();
  inline void set_has_xlength();
  inline void clear_has_xlength();
  inline void set_has_ylength();
  inline void clear_has_ylength();
  inline void set_has_zlength();
  inline void clear_has_zlength();
  inline void set_has_square();
  inline void clear_has_square();
  inline void set_has_cutxlength();
  inline void clear_has_cutxlength();
  inline void set_has_cutylength();
  inline void clear_has_cutylength();
  inline void set_has_ordercode();
  inline void clear_has_ordercode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_objectname();
  inline void clear_has_objectname();
  inline void set_has_objectcode();
  inline void clear_has_objectcode();
  inline void set_has_materialname();
  inline void clear_has_materialname();
  inline void set_has_cabinetname();
  inline void clear_has_cabinetname();
  inline void set_has_cabinetcode();
  inline void clear_has_cabinetcode();
  inline void set_has_oldtablename();
  inline void clear_has_oldtablename();
  inline void set_has_oldid();
  inline void clear_has_oldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 objectid_;
  ::google::protobuf::int32 boardtype_;
  ::google::protobuf::int32 materialid_;
  ::google::protobuf::int64 cabinetid_;
  ::google::protobuf::int32 grain_;
  bool isuseradd_;
  double xlength_;
  double ylength_;
  double zlength_;
  double square_;
  double cutxlength_;
  double cutylength_;
  ::std::string* ordercode_;
  ::std::string* name_;
  ::std::string* objectname_;
  ::std::string* objectcode_;
  ::std::string* materialname_;
  ::std::string* cabinetname_;
  ::std::string* cabinetcode_;
  ::std::string* oldtablename_;
  ::google::protobuf::int32 oldid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dZB_2eproto();
  friend void protobuf_AssignDesc_msg_2dZB_2eproto();
  friend void protobuf_ShutdownFile_msg_2dZB_2eproto();

  void InitAsDefaultInstance();
  static ZB_BoardInfo* default_instance_;
};
// -------------------------------------------------------------------

class ZB_BoardSealInfo : public ::google::protobuf::Message {
 public:
  ZB_BoardSealInfo();
  virtual ~ZB_BoardSealInfo();

  ZB_BoardSealInfo(const ZB_BoardSealInfo& from);

  inline ZB_BoardSealInfo& operator=(const ZB_BoardSealInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZB_BoardSealInfo& default_instance();

  void Swap(ZB_BoardSealInfo* other);

  // implements Message ----------------------------------------------

  ZB_BoardSealInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZB_BoardSealInfo& from);
  void MergeFrom(const ZB_BoardSealInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ItemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 3;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 FactoryID = 4;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 4;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 BoardID = 5;
  inline bool has_boardid() const;
  inline void clear_boardid();
  static const int kBoardIDFieldNumber = 5;
  inline ::google::protobuf::int64 boardid() const;
  inline void set_boardid(::google::protobuf::int64 value);

  // required int32 SealIndex = 6;
  inline bool has_sealindex() const;
  inline void clear_sealindex();
  static const int kSealIndexFieldNumber = 6;
  inline ::google::protobuf::int32 sealindex() const;
  inline void set_sealindex(::google::protobuf::int32 value);

  // required int32 MaterialID = 7;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 7;
  inline ::google::protobuf::int32 materialid() const;
  inline void set_materialid(::google::protobuf::int32 value);

  // required double PreMill = 8;
  inline bool has_premill() const;
  inline void clear_premill();
  static const int kPreMillFieldNumber = 8;
  inline double premill() const;
  inline void set_premill(double value);

  // required string OrderCode = 9;
  inline bool has_ordercode() const;
  inline void clear_ordercode();
  static const int kOrderCodeFieldNumber = 9;
  inline const ::std::string& ordercode() const;
  inline void set_ordercode(const ::std::string& value);
  inline void set_ordercode(const char* value);
  inline void set_ordercode(const char* value, size_t size);
  inline ::std::string* mutable_ordercode();
  inline ::std::string* release_ordercode();
  inline void set_allocated_ordercode(::std::string* ordercode);

  // required string MaterialCode = 10;
  inline bool has_materialcode() const;
  inline void clear_materialcode();
  static const int kMaterialCodeFieldNumber = 10;
  inline const ::std::string& materialcode() const;
  inline void set_materialcode(const ::std::string& value);
  inline void set_materialcode(const char* value);
  inline void set_materialcode(const char* value, size_t size);
  inline ::std::string* mutable_materialcode();
  inline ::std::string* release_materialcode();
  inline void set_allocated_materialcode(::std::string* materialcode);

  // required string MaterialName = 11;
  inline bool has_materialname() const;
  inline void clear_materialname();
  static const int kMaterialNameFieldNumber = 11;
  inline const ::std::string& materialname() const;
  inline void set_materialname(const ::std::string& value);
  inline void set_materialname(const char* value);
  inline void set_materialname(const char* value, size_t size);
  inline ::std::string* mutable_materialname();
  inline ::std::string* release_materialname();
  inline void set_allocated_materialname(::std::string* materialname);

  // required string OldTableName = 12;
  inline bool has_oldtablename() const;
  inline void clear_oldtablename();
  static const int kOldTableNameFieldNumber = 12;
  inline const ::std::string& oldtablename() const;
  inline void set_oldtablename(const ::std::string& value);
  inline void set_oldtablename(const char* value);
  inline void set_oldtablename(const char* value, size_t size);
  inline ::std::string* mutable_oldtablename();
  inline ::std::string* release_oldtablename();
  inline void set_allocated_oldtablename(::std::string* oldtablename);

  // required int32 OldID = 13;
  inline bool has_oldid() const;
  inline void clear_oldid();
  static const int kOldIDFieldNumber = 13;
  inline ::google::protobuf::int32 oldid() const;
  inline void set_oldid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.ZB_BoardSealInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_boardid();
  inline void clear_has_boardid();
  inline void set_has_sealindex();
  inline void clear_has_sealindex();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_premill();
  inline void clear_has_premill();
  inline void set_has_ordercode();
  inline void clear_has_ordercode();
  inline void set_has_materialcode();
  inline void clear_has_materialcode();
  inline void set_has_materialname();
  inline void clear_has_materialname();
  inline void set_has_oldtablename();
  inline void clear_has_oldtablename();
  inline void set_has_oldid();
  inline void clear_has_oldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 boardid_;
  ::google::protobuf::int32 sealindex_;
  ::google::protobuf::int32 materialid_;
  double premill_;
  ::std::string* ordercode_;
  ::std::string* materialcode_;
  ::std::string* materialname_;
  ::std::string* oldtablename_;
  ::google::protobuf::int32 oldid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dZB_2eproto();
  friend void protobuf_AssignDesc_msg_2dZB_2eproto();
  friend void protobuf_ShutdownFile_msg_2dZB_2eproto();

  void InitAsDefaultInstance();
  static ZB_BoardSealInfo* default_instance_;
};
// -------------------------------------------------------------------

class ZB_Objects : public ::google::protobuf::Message {
 public:
  ZB_Objects();
  virtual ~ZB_Objects();

  ZB_Objects(const ZB_Objects& from);

  inline ZB_Objects& operator=(const ZB_Objects& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZB_Objects& default_instance();

  void Swap(ZB_Objects* other);

  // implements Message ----------------------------------------------

  ZB_Objects* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZB_Objects& from);
  void MergeFrom(const ZB_Objects& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ItemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 3;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int32 FactoryID = 4;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 4;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int32 ObjectType = 5;
  inline bool has_objecttype() const;
  inline void clear_objecttype();
  static const int kObjectTypeFieldNumber = 5;
  inline ::google::protobuf::int32 objecttype() const;
  inline void set_objecttype(::google::protobuf::int32 value);

  // required int64 ParentID = 6;
  inline bool has_parentid() const;
  inline void clear_parentid();
  static const int kParentIDFieldNumber = 6;
  inline ::google::protobuf::int64 parentid() const;
  inline void set_parentid(::google::protobuf::int64 value);

  // required int32 GType = 7;
  inline bool has_gtype() const;
  inline void clear_gtype();
  static const int kGTypeFieldNumber = 7;
  inline ::google::protobuf::int32 gtype() const;
  inline void set_gtype(::google::protobuf::int32 value);

  // required double XLength = 8;
  inline bool has_xlength() const;
  inline void clear_xlength();
  static const int kXLengthFieldNumber = 8;
  inline double xlength() const;
  inline void set_xlength(double value);

  // required double YLength = 9;
  inline bool has_ylength() const;
  inline void clear_ylength();
  static const int kYLengthFieldNumber = 9;
  inline double ylength() const;
  inline void set_ylength(double value);

  // required double ZLength = 10;
  inline bool has_zlength() const;
  inline void clear_zlength();
  static const int kZLengthFieldNumber = 10;
  inline double zlength() const;
  inline void set_zlength(double value);

  // required double ShapeXLength = 11;
  inline bool has_shapexlength() const;
  inline void clear_shapexlength();
  static const int kShapeXLengthFieldNumber = 11;
  inline double shapexlength() const;
  inline void set_shapexlength(double value);

  // required double ShapeZLength = 12;
  inline bool has_shapezlength() const;
  inline void clear_shapezlength();
  static const int kShapeZLengthFieldNumber = 12;
  inline double shapezlength() const;
  inline void set_shapezlength(double value);

  // required double GapXLength = 13;
  inline bool has_gapxlength() const;
  inline void clear_gapxlength();
  static const int kGapXLengthFieldNumber = 13;
  inline double gapxlength() const;
  inline void set_gapxlength(double value);

  // required double GapYLength = 14;
  inline bool has_gapylength() const;
  inline void clear_gapylength();
  static const int kGapYLengthFieldNumber = 14;
  inline double gapylength() const;
  inline void set_gapylength(double value);

  // required double GapZLength = 15;
  inline bool has_gapzlength() const;
  inline void clear_gapzlength();
  static const int kGapZLengthFieldNumber = 15;
  inline double gapzlength() const;
  inline void set_gapzlength(double value);

  // required double Amount = 16;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 16;
  inline double amount() const;
  inline void set_amount(double value);

  // required bool IsStandard = 17;
  inline bool has_isstandard() const;
  inline void clear_isstandard();
  static const int kIsStandardFieldNumber = 17;
  inline bool isstandard() const;
  inline void set_isstandard(bool value);

  // required bool IsUserAdd = 18;
  inline bool has_isuseradd() const;
  inline void clear_isuseradd();
  static const int kIsUserAddFieldNumber = 18;
  inline bool isuseradd() const;
  inline void set_isuseradd(bool value);

  // required int32 MaterialPlanID = 19;
  inline bool has_materialplanid() const;
  inline void clear_materialplanid();
  static const int kMaterialPlanIDFieldNumber = 19;
  inline ::google::protobuf::int32 materialplanid() const;
  inline void set_materialplanid(::google::protobuf::int32 value);

  // required int32 CabGapType = 20;
  inline bool has_cabgaptype() const;
  inline void clear_cabgaptype();
  static const int kCabGapTypeFieldNumber = 20;
  inline ::google::protobuf::int32 cabgaptype() const;
  inline void set_cabgaptype(::google::protobuf::int32 value);

  // required int32 CabShape = 21;
  inline bool has_cabshape() const;
  inline void clear_cabshape();
  static const int kCabShapeFieldNumber = 21;
  inline ::google::protobuf::int32 cabshape() const;
  inline void set_cabshape(::google::protobuf::int32 value);

  // required string OrderCode = 22;
  inline bool has_ordercode() const;
  inline void clear_ordercode();
  static const int kOrderCodeFieldNumber = 22;
  inline const ::std::string& ordercode() const;
  inline void set_ordercode(const ::std::string& value);
  inline void set_ordercode(const char* value);
  inline void set_ordercode(const char* value, size_t size);
  inline ::std::string* mutable_ordercode();
  inline ::std::string* release_ordercode();
  inline void set_allocated_ordercode(::std::string* ordercode);

  // required string Name = 23;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 23;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string Code = 24;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 24;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // required string MaterialPlanName = 25;
  inline bool has_materialplanname() const;
  inline void clear_materialplanname();
  static const int kMaterialPlanNameFieldNumber = 25;
  inline const ::std::string& materialplanname() const;
  inline void set_materialplanname(const ::std::string& value);
  inline void set_materialplanname(const char* value);
  inline void set_materialplanname(const char* value, size_t size);
  inline ::std::string* mutable_materialplanname();
  inline ::std::string* release_materialplanname();
  inline void set_allocated_materialplanname(::std::string* materialplanname);

  // required string BarCode = 26;
  inline bool has_barcode() const;
  inline void clear_barcode();
  static const int kBarCodeFieldNumber = 26;
  inline const ::std::string& barcode() const;
  inline void set_barcode(const ::std::string& value);
  inline void set_barcode(const char* value);
  inline void set_barcode(const char* value, size_t size);
  inline ::std::string* mutable_barcode();
  inline ::std::string* release_barcode();
  inline void set_allocated_barcode(::std::string* barcode);

  // required string Remarks = 27;
  inline bool has_remarks() const;
  inline void clear_remarks();
  static const int kRemarksFieldNumber = 27;
  inline const ::std::string& remarks() const;
  inline void set_remarks(const ::std::string& value);
  inline void set_remarks(const char* value);
  inline void set_remarks(const char* value, size_t size);
  inline ::std::string* mutable_remarks();
  inline ::std::string* release_remarks();
  inline void set_allocated_remarks(::std::string* remarks);

  // required string OldTableName = 28;
  inline bool has_oldtablename() const;
  inline void clear_oldtablename();
  static const int kOldTableNameFieldNumber = 28;
  inline const ::std::string& oldtablename() const;
  inline void set_oldtablename(const ::std::string& value);
  inline void set_oldtablename(const char* value);
  inline void set_oldtablename(const char* value, size_t size);
  inline ::std::string* mutable_oldtablename();
  inline ::std::string* release_oldtablename();
  inline void set_allocated_oldtablename(::std::string* oldtablename);

  // required int32 OldID = 29;
  inline bool has_oldid() const;
  inline void clear_oldid();
  static const int kOldIDFieldNumber = 29;
  inline ::google::protobuf::int32 oldid() const;
  inline void set_oldid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transMsg.ZB_Objects)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_objecttype();
  inline void clear_has_objecttype();
  inline void set_has_parentid();
  inline void clear_has_parentid();
  inline void set_has_gtype();
  inline void clear_has_gtype();
  inline void set_has_xlength();
  inline void clear_has_xlength();
  inline void set_has_ylength();
  inline void clear_has_ylength();
  inline void set_has_zlength();
  inline void clear_has_zlength();
  inline void set_has_shapexlength();
  inline void clear_has_shapexlength();
  inline void set_has_shapezlength();
  inline void clear_has_shapezlength();
  inline void set_has_gapxlength();
  inline void clear_has_gapxlength();
  inline void set_has_gapylength();
  inline void clear_has_gapylength();
  inline void set_has_gapzlength();
  inline void clear_has_gapzlength();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_isstandard();
  inline void clear_has_isstandard();
  inline void set_has_isuseradd();
  inline void clear_has_isuseradd();
  inline void set_has_materialplanid();
  inline void clear_has_materialplanid();
  inline void set_has_cabgaptype();
  inline void clear_has_cabgaptype();
  inline void set_has_cabshape();
  inline void clear_has_cabshape();
  inline void set_has_ordercode();
  inline void clear_has_ordercode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_materialplanname();
  inline void clear_has_materialplanname();
  inline void set_has_barcode();
  inline void clear_has_barcode();
  inline void set_has_remarks();
  inline void clear_has_remarks();
  inline void set_has_oldtablename();
  inline void clear_has_oldtablename();
  inline void set_has_oldid();
  inline void clear_has_oldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 parentid_;
  ::google::protobuf::int32 objecttype_;
  ::google::protobuf::int32 gtype_;
  double xlength_;
  double ylength_;
  double zlength_;
  double shapexlength_;
  double shapezlength_;
  double gapxlength_;
  double gapylength_;
  double gapzlength_;
  double amount_;
  bool isstandard_;
  bool isuseradd_;
  ::google::protobuf::int32 materialplanid_;
  ::google::protobuf::int32 cabgaptype_;
  ::google::protobuf::int32 cabshape_;
  ::std::string* ordercode_;
  ::std::string* name_;
  ::std::string* code_;
  ::std::string* materialplanname_;
  ::std::string* barcode_;
  ::std::string* remarks_;
  ::std::string* oldtablename_;
  ::google::protobuf::int32 oldid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dZB_2eproto();
  friend void protobuf_AssignDesc_msg_2dZB_2eproto();
  friend void protobuf_ShutdownFile_msg_2dZB_2eproto();

  void InitAsDefaultInstance();
  static ZB_Objects* default_instance_;
};
// -------------------------------------------------------------------

class ZB_OrderInfo : public ::google::protobuf::Message {
 public:
  ZB_OrderInfo();
  virtual ~ZB_OrderInfo();

  ZB_OrderInfo(const ZB_OrderInfo& from);

  inline ZB_OrderInfo& operator=(const ZB_OrderInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZB_OrderInfo& default_instance();

  void Swap(ZB_OrderInfo* other);

  // implements Message ----------------------------------------------

  ZB_OrderInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZB_OrderInfo& from);
  void MergeFrom(const ZB_OrderInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ItemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // required int32 OrderCate = 2;
  inline bool has_ordercate() const;
  inline void clear_ordercate();
  static const int kOrderCateFieldNumber = 2;
  inline ::google::protobuf::int32 ordercate() const;
  inline void set_ordercate(::google::protobuf::int32 value);

  // required int64 OrderID = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 3;
  inline ::google::protobuf::int64 orderid() const;
  inline void set_orderid(::google::protobuf::int64 value);

  // required int64 ParentID = 4;
  inline bool has_parentid() const;
  inline void clear_parentid();
  static const int kParentIDFieldNumber = 4;
  inline ::google::protobuf::int64 parentid() const;
  inline void set_parentid(::google::protobuf::int64 value);

  // required int32 OrderType = 5;
  inline bool has_ordertype() const;
  inline void clear_ordertype();
  static const int kOrderTypeFieldNumber = 5;
  inline ::google::protobuf::int32 ordertype() const;
  inline void set_ordertype(::google::protobuf::int32 value);

  // required int32 OrderIndex = 6;
  inline bool has_orderindex() const;
  inline void clear_orderindex();
  static const int kOrderIndexFieldNumber = 6;
  inline ::google::protobuf::int32 orderindex() const;
  inline void set_orderindex(::google::protobuf::int32 value);

  // required int32 FactoryID = 7;
  inline bool has_factoryid() const;
  inline void clear_factoryid();
  static const int kFactoryIDFieldNumber = 7;
  inline ::google::protobuf::int32 factoryid() const;
  inline void set_factoryid(::google::protobuf::int32 value);

  // required int64 VerCode = 8;
  inline bool has_vercode() const;
  inline void clear_vercode();
  static const int kVerCodeFieldNumber = 8;
  inline ::google::protobuf::int64 vercode() const;
  inline void set_vercode(::google::protobuf::int64 value);

  // required int32 ShopID = 9;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 9;
  inline ::google::protobuf::int32 shopid() const;
  inline void set_shopid(::google::protobuf::int32 value);

  // required int32 PreSurveyorID = 10;
  inline bool has_presurveyorid() const;
  inline void clear_presurveyorid();
  static const int kPreSurveyorIDFieldNumber = 10;
  inline ::google::protobuf::int32 presurveyorid() const;
  inline void set_presurveyorid(::google::protobuf::int32 value);

  // required int32 ReSurveyorID = 11;
  inline bool has_resurveyorid() const;
  inline void clear_resurveyorid();
  static const int kReSurveyorIDFieldNumber = 11;
  inline ::google::protobuf::int32 resurveyorid() const;
  inline void set_resurveyorid(::google::protobuf::int32 value);

  // required int32 DesignerID = 12;
  inline bool has_designerid() const;
  inline void clear_designerid();
  static const int kDesignerIDFieldNumber = 12;
  inline ::google::protobuf::int32 designerid() const;
  inline void set_designerid(::google::protobuf::int32 value);

  // required int32 SellerID = 13;
  inline bool has_sellerid() const;
  inline void clear_sellerid();
  static const int kSellerIDFieldNumber = 13;
  inline ::google::protobuf::int32 sellerid() const;
  inline void set_sellerid(::google::protobuf::int32 value);

  // required int32 AuditorID = 14;
  inline bool has_auditorid() const;
  inline void clear_auditorid();
  static const int kAuditorIDFieldNumber = 14;
  inline ::google::protobuf::int32 auditorid() const;
  inline void set_auditorid(::google::protobuf::int32 value);

  // required double Square = 15;
  inline bool has_square() const;
  inline void clear_square();
  static const int kSquareFieldNumber = 15;
  inline double square() const;
  inline void set_square(double value);

  // required int64 CreateTime = 16;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 16;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // required int64 PreSurveyTime = 17;
  inline bool has_presurveytime() const;
  inline void clear_presurveytime();
  static const int kPreSurveyTimeFieldNumber = 17;
  inline ::google::protobuf::int64 presurveytime() const;
  inline void set_presurveytime(::google::protobuf::int64 value);

  // required int64 ReSurveyTime = 18;
  inline bool has_resurveytime() const;
  inline void clear_resurveytime();
  static const int kReSurveyTimeFieldNumber = 18;
  inline ::google::protobuf::int64 resurveytime() const;
  inline void set_resurveytime(::google::protobuf::int64 value);

  // required int64 OrderTime = 19;
  inline bool has_ordertime() const;
  inline void clear_ordertime();
  static const int kOrderTimeFieldNumber = 19;
  inline ::google::protobuf::int64 ordertime() const;
  inline void set_ordertime(::google::protobuf::int64 value);

  // required int64 DeliveryTime = 20;
  inline bool has_deliverytime() const;
  inline void clear_deliverytime();
  static const int kDeliveryTimeFieldNumber = 20;
  inline ::google::protobuf::int64 deliverytime() const;
  inline void set_deliverytime(::google::protobuf::int64 value);

  // required int64 InstallTime = 21;
  inline bool has_installtime() const;
  inline void clear_installtime();
  static const int kInstallTimeFieldNumber = 21;
  inline ::google::protobuf::int64 installtime() const;
  inline void set_installtime(::google::protobuf::int64 value);

  // required string ShopName = 22;
  inline bool has_shopname() const;
  inline void clear_shopname();
  static const int kShopNameFieldNumber = 22;
  inline const ::std::string& shopname() const;
  inline void set_shopname(const ::std::string& value);
  inline void set_shopname(const char* value);
  inline void set_shopname(const char* value, size_t size);
  inline ::std::string* mutable_shopname();
  inline ::std::string* release_shopname();
  inline void set_allocated_shopname(::std::string* shopname);

  // required string ShopCode = 23;
  inline bool has_shopcode() const;
  inline void clear_shopcode();
  static const int kShopCodeFieldNumber = 23;
  inline const ::std::string& shopcode() const;
  inline void set_shopcode(const ::std::string& value);
  inline void set_shopcode(const char* value);
  inline void set_shopcode(const char* value, size_t size);
  inline ::std::string* mutable_shopcode();
  inline ::std::string* release_shopcode();
  inline void set_allocated_shopcode(::std::string* shopcode);

  // required string OrderCode = 24;
  inline bool has_ordercode() const;
  inline void clear_ordercode();
  static const int kOrderCodeFieldNumber = 24;
  inline const ::std::string& ordercode() const;
  inline void set_ordercode(const ::std::string& value);
  inline void set_ordercode(const char* value);
  inline void set_ordercode(const char* value, size_t size);
  inline ::std::string* mutable_ordercode();
  inline ::std::string* release_ordercode();
  inline void set_allocated_ordercode(::std::string* ordercode);

  // required string DesignerName = 25;
  inline bool has_designername() const;
  inline void clear_designername();
  static const int kDesignerNameFieldNumber = 25;
  inline const ::std::string& designername() const;
  inline void set_designername(const ::std::string& value);
  inline void set_designername(const char* value);
  inline void set_designername(const char* value, size_t size);
  inline ::std::string* mutable_designername();
  inline ::std::string* release_designername();
  inline void set_allocated_designername(::std::string* designername);

  // required string DesignerUserCode = 26;
  inline bool has_designerusercode() const;
  inline void clear_designerusercode();
  static const int kDesignerUserCodeFieldNumber = 26;
  inline const ::std::string& designerusercode() const;
  inline void set_designerusercode(const ::std::string& value);
  inline void set_designerusercode(const char* value);
  inline void set_designerusercode(const char* value, size_t size);
  inline ::std::string* mutable_designerusercode();
  inline ::std::string* release_designerusercode();
  inline void set_allocated_designerusercode(::std::string* designerusercode);

  // required string PreSurveyorName = 27;
  inline bool has_presurveyorname() const;
  inline void clear_presurveyorname();
  static const int kPreSurveyorNameFieldNumber = 27;
  inline const ::std::string& presurveyorname() const;
  inline void set_presurveyorname(const ::std::string& value);
  inline void set_presurveyorname(const char* value);
  inline void set_presurveyorname(const char* value, size_t size);
  inline ::std::string* mutable_presurveyorname();
  inline ::std::string* release_presurveyorname();
  inline void set_allocated_presurveyorname(::std::string* presurveyorname);

  // required string PreSurveyorCode = 28;
  inline bool has_presurveyorcode() const;
  inline void clear_presurveyorcode();
  static const int kPreSurveyorCodeFieldNumber = 28;
  inline const ::std::string& presurveyorcode() const;
  inline void set_presurveyorcode(const ::std::string& value);
  inline void set_presurveyorcode(const char* value);
  inline void set_presurveyorcode(const char* value, size_t size);
  inline ::std::string* mutable_presurveyorcode();
  inline ::std::string* release_presurveyorcode();
  inline void set_allocated_presurveyorcode(::std::string* presurveyorcode);

  // required string ReSurveyorName = 29;
  inline bool has_resurveyorname() const;
  inline void clear_resurveyorname();
  static const int kReSurveyorNameFieldNumber = 29;
  inline const ::std::string& resurveyorname() const;
  inline void set_resurveyorname(const ::std::string& value);
  inline void set_resurveyorname(const char* value);
  inline void set_resurveyorname(const char* value, size_t size);
  inline ::std::string* mutable_resurveyorname();
  inline ::std::string* release_resurveyorname();
  inline void set_allocated_resurveyorname(::std::string* resurveyorname);

  // required string ReSurveyorCode = 30;
  inline bool has_resurveyorcode() const;
  inline void clear_resurveyorcode();
  static const int kReSurveyorCodeFieldNumber = 30;
  inline const ::std::string& resurveyorcode() const;
  inline void set_resurveyorcode(const ::std::string& value);
  inline void set_resurveyorcode(const char* value);
  inline void set_resurveyorcode(const char* value, size_t size);
  inline ::std::string* mutable_resurveyorcode();
  inline ::std::string* release_resurveyorcode();
  inline void set_allocated_resurveyorcode(::std::string* resurveyorcode);

  // required string SellerName = 31;
  inline bool has_sellername() const;
  inline void clear_sellername();
  static const int kSellerNameFieldNumber = 31;
  inline const ::std::string& sellername() const;
  inline void set_sellername(const ::std::string& value);
  inline void set_sellername(const char* value);
  inline void set_sellername(const char* value, size_t size);
  inline ::std::string* mutable_sellername();
  inline ::std::string* release_sellername();
  inline void set_allocated_sellername(::std::string* sellername);

  // required string SellerUserCode = 32;
  inline bool has_sellerusercode() const;
  inline void clear_sellerusercode();
  static const int kSellerUserCodeFieldNumber = 32;
  inline const ::std::string& sellerusercode() const;
  inline void set_sellerusercode(const ::std::string& value);
  inline void set_sellerusercode(const char* value);
  inline void set_sellerusercode(const char* value, size_t size);
  inline ::std::string* mutable_sellerusercode();
  inline ::std::string* release_sellerusercode();
  inline void set_allocated_sellerusercode(::std::string* sellerusercode);

  // required string AuditorName = 33;
  inline bool has_auditorname() const;
  inline void clear_auditorname();
  static const int kAuditorNameFieldNumber = 33;
  inline const ::std::string& auditorname() const;
  inline void set_auditorname(const ::std::string& value);
  inline void set_auditorname(const char* value);
  inline void set_auditorname(const char* value, size_t size);
  inline ::std::string* mutable_auditorname();
  inline ::std::string* release_auditorname();
  inline void set_allocated_auditorname(::std::string* auditorname);

  // required string AuditorUserCode = 34;
  inline bool has_auditorusercode() const;
  inline void clear_auditorusercode();
  static const int kAuditorUserCodeFieldNumber = 34;
  inline const ::std::string& auditorusercode() const;
  inline void set_auditorusercode(const ::std::string& value);
  inline void set_auditorusercode(const char* value);
  inline void set_auditorusercode(const char* value, size_t size);
  inline ::std::string* mutable_auditorusercode();
  inline ::std::string* release_auditorusercode();
  inline void set_allocated_auditorusercode(::std::string* auditorusercode);

  // required string GeoCode = 35;
  inline bool has_geocode() const;
  inline void clear_geocode();
  static const int kGeoCodeFieldNumber = 35;
  inline const ::std::string& geocode() const;
  inline void set_geocode(const ::std::string& value);
  inline void set_geocode(const char* value);
  inline void set_geocode(const char* value, size_t size);
  inline ::std::string* mutable_geocode();
  inline ::std::string* release_geocode();
  inline void set_allocated_geocode(::std::string* geocode);

  // required string GeoName = 36;
  inline bool has_geoname() const;
  inline void clear_geoname();
  static const int kGeoNameFieldNumber = 36;
  inline const ::std::string& geoname() const;
  inline void set_geoname(const ::std::string& value);
  inline void set_geoname(const char* value);
  inline void set_geoname(const char* value, size_t size);
  inline ::std::string* mutable_geoname();
  inline ::std::string* release_geoname();
  inline void set_allocated_geoname(::std::string* geoname);

  // required string OrderTitle = 37;
  inline bool has_ordertitle() const;
  inline void clear_ordertitle();
  static const int kOrderTitleFieldNumber = 37;
  inline const ::std::string& ordertitle() const;
  inline void set_ordertitle(const ::std::string& value);
  inline void set_ordertitle(const char* value);
  inline void set_ordertitle(const char* value, size_t size);
  inline ::std::string* mutable_ordertitle();
  inline ::std::string* release_ordertitle();
  inline void set_allocated_ordertitle(::std::string* ordertitle);

  // required string CustomerName = 38;
  inline bool has_customername() const;
  inline void clear_customername();
  static const int kCustomerNameFieldNumber = 38;
  inline const ::std::string& customername() const;
  inline void set_customername(const ::std::string& value);
  inline void set_customername(const char* value);
  inline void set_customername(const char* value, size_t size);
  inline ::std::string* mutable_customername();
  inline ::std::string* release_customername();
  inline void set_allocated_customername(::std::string* customername);

  // required string CustomerTel = 39;
  inline bool has_customertel() const;
  inline void clear_customertel();
  static const int kCustomerTelFieldNumber = 39;
  inline const ::std::string& customertel() const;
  inline void set_customertel(const ::std::string& value);
  inline void set_customertel(const char* value);
  inline void set_customertel(const char* value, size_t size);
  inline ::std::string* mutable_customertel();
  inline ::std::string* release_customertel();
  inline void set_allocated_customertel(::std::string* customertel);

  // required string CustomerPostCode = 40;
  inline bool has_customerpostcode() const;
  inline void clear_customerpostcode();
  static const int kCustomerPostCodeFieldNumber = 40;
  inline const ::std::string& customerpostcode() const;
  inline void set_customerpostcode(const ::std::string& value);
  inline void set_customerpostcode(const char* value);
  inline void set_customerpostcode(const char* value, size_t size);
  inline ::std::string* mutable_customerpostcode();
  inline ::std::string* release_customerpostcode();
  inline void set_allocated_customerpostcode(::std::string* customerpostcode);

  // required string CustomerQQ = 41;
  inline bool has_customerqq() const;
  inline void clear_customerqq();
  static const int kCustomerQQFieldNumber = 41;
  inline const ::std::string& customerqq() const;
  inline void set_customerqq(const ::std::string& value);
  inline void set_customerqq(const char* value);
  inline void set_customerqq(const char* value, size_t size);
  inline ::std::string* mutable_customerqq();
  inline ::std::string* release_customerqq();
  inline void set_allocated_customerqq(::std::string* customerqq);

  // required string CustomerEmail = 42;
  inline bool has_customeremail() const;
  inline void clear_customeremail();
  static const int kCustomerEmailFieldNumber = 42;
  inline const ::std::string& customeremail() const;
  inline void set_customeremail(const ::std::string& value);
  inline void set_customeremail(const char* value);
  inline void set_customeremail(const char* value, size_t size);
  inline ::std::string* mutable_customeremail();
  inline ::std::string* release_customeremail();
  inline void set_allocated_customeremail(::std::string* customeremail);

  // required string InstallAddress = 43;
  inline bool has_installaddress() const;
  inline void clear_installaddress();
  static const int kInstallAddressFieldNumber = 43;
  inline const ::std::string& installaddress() const;
  inline void set_installaddress(const ::std::string& value);
  inline void set_installaddress(const char* value);
  inline void set_installaddress(const char* value, size_t size);
  inline ::std::string* mutable_installaddress();
  inline ::std::string* release_installaddress();
  inline void set_allocated_installaddress(::std::string* installaddress);

  // required string OrderRemarks = 44;
  inline bool has_orderremarks() const;
  inline void clear_orderremarks();
  static const int kOrderRemarksFieldNumber = 44;
  inline const ::std::string& orderremarks() const;
  inline void set_orderremarks(const ::std::string& value);
  inline void set_orderremarks(const char* value);
  inline void set_orderremarks(const char* value, size_t size);
  inline ::std::string* mutable_orderremarks();
  inline ::std::string* release_orderremarks();
  inline void set_allocated_orderremarks(::std::string* orderremarks);

  // required string PlanName = 45;
  inline bool has_planname() const;
  inline void clear_planname();
  static const int kPlanNameFieldNumber = 45;
  inline const ::std::string& planname() const;
  inline void set_planname(const ::std::string& value);
  inline void set_planname(const char* value);
  inline void set_planname(const char* value, size_t size);
  inline ::std::string* mutable_planname();
  inline ::std::string* release_planname();
  inline void set_allocated_planname(::std::string* planname);

  // required string PlanRemarks = 46;
  inline bool has_planremarks() const;
  inline void clear_planremarks();
  static const int kPlanRemarksFieldNumber = 46;
  inline const ::std::string& planremarks() const;
  inline void set_planremarks(const ::std::string& value);
  inline void set_planremarks(const char* value);
  inline void set_planremarks(const char* value, size_t size);
  inline ::std::string* mutable_planremarks();
  inline ::std::string* release_planremarks();
  inline void set_allocated_planremarks(::std::string* planremarks);

  // required string AttachFilePath = 47;
  inline bool has_attachfilepath() const;
  inline void clear_attachfilepath();
  static const int kAttachFilePathFieldNumber = 47;
  inline const ::std::string& attachfilepath() const;
  inline void set_attachfilepath(const ::std::string& value);
  inline void set_attachfilepath(const char* value);
  inline void set_attachfilepath(const char* value, size_t size);
  inline ::std::string* mutable_attachfilepath();
  inline ::std::string* release_attachfilepath();
  inline void set_allocated_attachfilepath(::std::string* attachfilepath);

  // @@protoc_insertion_point(class_scope:transMsg.ZB_OrderInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_ordercate();
  inline void clear_has_ordercate();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_parentid();
  inline void clear_has_parentid();
  inline void set_has_ordertype();
  inline void clear_has_ordertype();
  inline void set_has_orderindex();
  inline void clear_has_orderindex();
  inline void set_has_factoryid();
  inline void clear_has_factoryid();
  inline void set_has_vercode();
  inline void clear_has_vercode();
  inline void set_has_shopid();
  inline void clear_has_shopid();
  inline void set_has_presurveyorid();
  inline void clear_has_presurveyorid();
  inline void set_has_resurveyorid();
  inline void clear_has_resurveyorid();
  inline void set_has_designerid();
  inline void clear_has_designerid();
  inline void set_has_sellerid();
  inline void clear_has_sellerid();
  inline void set_has_auditorid();
  inline void clear_has_auditorid();
  inline void set_has_square();
  inline void clear_has_square();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_presurveytime();
  inline void clear_has_presurveytime();
  inline void set_has_resurveytime();
  inline void clear_has_resurveytime();
  inline void set_has_ordertime();
  inline void clear_has_ordertime();
  inline void set_has_deliverytime();
  inline void clear_has_deliverytime();
  inline void set_has_installtime();
  inline void clear_has_installtime();
  inline void set_has_shopname();
  inline void clear_has_shopname();
  inline void set_has_shopcode();
  inline void clear_has_shopcode();
  inline void set_has_ordercode();
  inline void clear_has_ordercode();
  inline void set_has_designername();
  inline void clear_has_designername();
  inline void set_has_designerusercode();
  inline void clear_has_designerusercode();
  inline void set_has_presurveyorname();
  inline void clear_has_presurveyorname();
  inline void set_has_presurveyorcode();
  inline void clear_has_presurveyorcode();
  inline void set_has_resurveyorname();
  inline void clear_has_resurveyorname();
  inline void set_has_resurveyorcode();
  inline void clear_has_resurveyorcode();
  inline void set_has_sellername();
  inline void clear_has_sellername();
  inline void set_has_sellerusercode();
  inline void clear_has_sellerusercode();
  inline void set_has_auditorname();
  inline void clear_has_auditorname();
  inline void set_has_auditorusercode();
  inline void clear_has_auditorusercode();
  inline void set_has_geocode();
  inline void clear_has_geocode();
  inline void set_has_geoname();
  inline void clear_has_geoname();
  inline void set_has_ordertitle();
  inline void clear_has_ordertitle();
  inline void set_has_customername();
  inline void clear_has_customername();
  inline void set_has_customertel();
  inline void clear_has_customertel();
  inline void set_has_customerpostcode();
  inline void clear_has_customerpostcode();
  inline void set_has_customerqq();
  inline void clear_has_customerqq();
  inline void set_has_customeremail();
  inline void clear_has_customeremail();
  inline void set_has_installaddress();
  inline void clear_has_installaddress();
  inline void set_has_orderremarks();
  inline void clear_has_orderremarks();
  inline void set_has_planname();
  inline void clear_has_planname();
  inline void set_has_planremarks();
  inline void clear_has_planremarks();
  inline void set_has_attachfilepath();
  inline void clear_has_attachfilepath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int64 orderid_;
  ::google::protobuf::int32 ordercate_;
  ::google::protobuf::int32 ordertype_;
  ::google::protobuf::int64 parentid_;
  ::google::protobuf::int32 orderindex_;
  ::google::protobuf::int32 factoryid_;
  ::google::protobuf::int64 vercode_;
  ::google::protobuf::int32 shopid_;
  ::google::protobuf::int32 presurveyorid_;
  ::google::protobuf::int32 resurveyorid_;
  ::google::protobuf::int32 designerid_;
  ::google::protobuf::int32 sellerid_;
  ::google::protobuf::int32 auditorid_;
  double square_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 presurveytime_;
  ::google::protobuf::int64 resurveytime_;
  ::google::protobuf::int64 ordertime_;
  ::google::protobuf::int64 deliverytime_;
  ::google::protobuf::int64 installtime_;
  ::std::string* shopname_;
  ::std::string* shopcode_;
  ::std::string* ordercode_;
  ::std::string* designername_;
  ::std::string* designerusercode_;
  ::std::string* presurveyorname_;
  ::std::string* presurveyorcode_;
  ::std::string* resurveyorname_;
  ::std::string* resurveyorcode_;
  ::std::string* sellername_;
  ::std::string* sellerusercode_;
  ::std::string* auditorname_;
  ::std::string* auditorusercode_;
  ::std::string* geocode_;
  ::std::string* geoname_;
  ::std::string* ordertitle_;
  ::std::string* customername_;
  ::std::string* customertel_;
  ::std::string* customerpostcode_;
  ::std::string* customerqq_;
  ::std::string* customeremail_;
  ::std::string* installaddress_;
  ::std::string* orderremarks_;
  ::std::string* planname_;
  ::std::string* planremarks_;
  ::std::string* attachfilepath_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(47 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dZB_2eproto();
  friend void protobuf_AssignDesc_msg_2dZB_2eproto();
  friend void protobuf_ShutdownFile_msg_2dZB_2eproto();

  void InitAsDefaultInstance();
  static ZB_OrderInfo* default_instance_;
};
// -------------------------------------------------------------------

class ZB_Table : public ::google::protobuf::Message {
 public:
  ZB_Table();
  virtual ~ZB_Table();

  ZB_Table(const ZB_Table& from);

  inline ZB_Table& operator=(const ZB_Table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZB_Table& default_instance();

  void Swap(ZB_Table* other);

  // implements Message ----------------------------------------------

  ZB_Table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZB_Table& from);
  void MergeFrom(const ZB_Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .transMsg.ZB_BoardGapInfo ZB_BoardGapInfo = 1;
  inline int zb_boardgapinfo_size() const;
  inline void clear_zb_boardgapinfo();
  static const int kZBBoardGapInfoFieldNumber = 1;
  inline const ::transMsg::ZB_BoardGapInfo& zb_boardgapinfo(int index) const;
  inline ::transMsg::ZB_BoardGapInfo* mutable_zb_boardgapinfo(int index);
  inline ::transMsg::ZB_BoardGapInfo* add_zb_boardgapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardGapInfo >&
      zb_boardgapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardGapInfo >*
      mutable_zb_boardgapinfo();

  // repeated .transMsg.ZB_BoardInfo ZB_BoardInfo = 2;
  inline int zb_boardinfo_size() const;
  inline void clear_zb_boardinfo();
  static const int kZBBoardInfoFieldNumber = 2;
  inline const ::transMsg::ZB_BoardInfo& zb_boardinfo(int index) const;
  inline ::transMsg::ZB_BoardInfo* mutable_zb_boardinfo(int index);
  inline ::transMsg::ZB_BoardInfo* add_zb_boardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardInfo >&
      zb_boardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardInfo >*
      mutable_zb_boardinfo();

  // repeated .transMsg.ZB_BoardSealInfo ZB_BoardSealInfo = 3;
  inline int zb_boardsealinfo_size() const;
  inline void clear_zb_boardsealinfo();
  static const int kZBBoardSealInfoFieldNumber = 3;
  inline const ::transMsg::ZB_BoardSealInfo& zb_boardsealinfo(int index) const;
  inline ::transMsg::ZB_BoardSealInfo* mutable_zb_boardsealinfo(int index);
  inline ::transMsg::ZB_BoardSealInfo* add_zb_boardsealinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardSealInfo >&
      zb_boardsealinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardSealInfo >*
      mutable_zb_boardsealinfo();

  // repeated .transMsg.ZB_Objects ZB_Objects = 4;
  inline int zb_objects_size() const;
  inline void clear_zb_objects();
  static const int kZBObjectsFieldNumber = 4;
  inline const ::transMsg::ZB_Objects& zb_objects(int index) const;
  inline ::transMsg::ZB_Objects* mutable_zb_objects(int index);
  inline ::transMsg::ZB_Objects* add_zb_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_Objects >&
      zb_objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_Objects >*
      mutable_zb_objects();

  // repeated .transMsg.ZB_OrderInfo ZB_OrderInfo = 5;
  inline int zb_orderinfo_size() const;
  inline void clear_zb_orderinfo();
  static const int kZBOrderInfoFieldNumber = 5;
  inline const ::transMsg::ZB_OrderInfo& zb_orderinfo(int index) const;
  inline ::transMsg::ZB_OrderInfo* mutable_zb_orderinfo(int index);
  inline ::transMsg::ZB_OrderInfo* add_zb_orderinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_OrderInfo >&
      zb_orderinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_OrderInfo >*
      mutable_zb_orderinfo();

  // @@protoc_insertion_point(class_scope:transMsg.ZB_Table)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardGapInfo > zb_boardgapinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardInfo > zb_boardinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardSealInfo > zb_boardsealinfo_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_Objects > zb_objects_;
  ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_OrderInfo > zb_orderinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2dZB_2eproto();
  friend void protobuf_AssignDesc_msg_2dZB_2eproto();
  friend void protobuf_ShutdownFile_msg_2dZB_2eproto();

  void InitAsDefaultInstance();
  static ZB_Table* default_instance_;
};
// ===================================================================


// ===================================================================

// ZB_BoardGapInfo

// required int64 ItemID = 1;
inline bool ZB_BoardGapInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZB_BoardGapInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZB_BoardGapInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZB_BoardGapInfo::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 ZB_BoardGapInfo::itemid() const {
  return itemid_;
}
inline void ZB_BoardGapInfo::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 OrderCate = 2;
inline bool ZB_BoardGapInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZB_BoardGapInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZB_BoardGapInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZB_BoardGapInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 ZB_BoardGapInfo::ordercate() const {
  return ordercate_;
}
inline void ZB_BoardGapInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 3;
inline bool ZB_BoardGapInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZB_BoardGapInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZB_BoardGapInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZB_BoardGapInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 ZB_BoardGapInfo::orderid() const {
  return orderid_;
}
inline void ZB_BoardGapInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 FactoryID = 4;
inline bool ZB_BoardGapInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZB_BoardGapInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZB_BoardGapInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZB_BoardGapInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 ZB_BoardGapInfo::factoryid() const {
  return factoryid_;
}
inline void ZB_BoardGapInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 BoardID = 5;
inline bool ZB_BoardGapInfo::has_boardid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZB_BoardGapInfo::set_has_boardid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZB_BoardGapInfo::clear_has_boardid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZB_BoardGapInfo::clear_boardid() {
  boardid_ = GOOGLE_LONGLONG(0);
  clear_has_boardid();
}
inline ::google::protobuf::int64 ZB_BoardGapInfo::boardid() const {
  return boardid_;
}
inline void ZB_BoardGapInfo::set_boardid(::google::protobuf::int64 value) {
  set_has_boardid();
  boardid_ = value;
}

// required int32 GapIndex = 6;
inline bool ZB_BoardGapInfo::has_gapindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ZB_BoardGapInfo::set_has_gapindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ZB_BoardGapInfo::clear_has_gapindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ZB_BoardGapInfo::clear_gapindex() {
  gapindex_ = 0;
  clear_has_gapindex();
}
inline ::google::protobuf::int32 ZB_BoardGapInfo::gapindex() const {
  return gapindex_;
}
inline void ZB_BoardGapInfo::set_gapindex(::google::protobuf::int32 value) {
  set_has_gapindex();
  gapindex_ = value;
}

// required int32 GapShape = 7;
inline bool ZB_BoardGapInfo::has_gapshape() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ZB_BoardGapInfo::set_has_gapshape() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ZB_BoardGapInfo::clear_has_gapshape() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ZB_BoardGapInfo::clear_gapshape() {
  gapshape_ = 0;
  clear_has_gapshape();
}
inline ::google::protobuf::int32 ZB_BoardGapInfo::gapshape() const {
  return gapshape_;
}
inline void ZB_BoardGapInfo::set_gapshape(::google::protobuf::int32 value) {
  set_has_gapshape();
  gapshape_ = value;
}

// required double XLen = 8;
inline bool ZB_BoardGapInfo::has_xlen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ZB_BoardGapInfo::set_has_xlen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ZB_BoardGapInfo::clear_has_xlen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ZB_BoardGapInfo::clear_xlen() {
  xlen_ = 0;
  clear_has_xlen();
}
inline double ZB_BoardGapInfo::xlen() const {
  return xlen_;
}
inline void ZB_BoardGapInfo::set_xlen(double value) {
  set_has_xlen();
  xlen_ = value;
}

// required double YLen = 9;
inline bool ZB_BoardGapInfo::has_ylen() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ZB_BoardGapInfo::set_has_ylen() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ZB_BoardGapInfo::clear_has_ylen() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ZB_BoardGapInfo::clear_ylen() {
  ylen_ = 0;
  clear_has_ylen();
}
inline double ZB_BoardGapInfo::ylen() const {
  return ylen_;
}
inline void ZB_BoardGapInfo::set_ylen(double value) {
  set_has_ylen();
  ylen_ = value;
}

// required double Square = 10;
inline bool ZB_BoardGapInfo::has_square() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ZB_BoardGapInfo::set_has_square() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ZB_BoardGapInfo::clear_has_square() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ZB_BoardGapInfo::clear_square() {
  square_ = 0;
  clear_has_square();
}
inline double ZB_BoardGapInfo::square() const {
  return square_;
}
inline void ZB_BoardGapInfo::set_square(double value) {
  set_has_square();
  square_ = value;
}

// required double XOffset = 11;
inline bool ZB_BoardGapInfo::has_xoffset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ZB_BoardGapInfo::set_has_xoffset() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ZB_BoardGapInfo::clear_has_xoffset() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ZB_BoardGapInfo::clear_xoffset() {
  xoffset_ = 0;
  clear_has_xoffset();
}
inline double ZB_BoardGapInfo::xoffset() const {
  return xoffset_;
}
inline void ZB_BoardGapInfo::set_xoffset(double value) {
  set_has_xoffset();
  xoffset_ = value;
}

// required double YOffset = 12;
inline bool ZB_BoardGapInfo::has_yoffset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ZB_BoardGapInfo::set_has_yoffset() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ZB_BoardGapInfo::clear_has_yoffset() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ZB_BoardGapInfo::clear_yoffset() {
  yoffset_ = 0;
  clear_has_yoffset();
}
inline double ZB_BoardGapInfo::yoffset() const {
  return yoffset_;
}
inline void ZB_BoardGapInfo::set_yoffset(double value) {
  set_has_yoffset();
  yoffset_ = value;
}

// required double ZOffset = 13;
inline bool ZB_BoardGapInfo::has_zoffset() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ZB_BoardGapInfo::set_has_zoffset() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ZB_BoardGapInfo::clear_has_zoffset() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ZB_BoardGapInfo::clear_zoffset() {
  zoffset_ = 0;
  clear_has_zoffset();
}
inline double ZB_BoardGapInfo::zoffset() const {
  return zoffset_;
}
inline void ZB_BoardGapInfo::set_zoffset(double value) {
  set_has_zoffset();
  zoffset_ = value;
}

// required string OrderCode = 14;
inline bool ZB_BoardGapInfo::has_ordercode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ZB_BoardGapInfo::set_has_ordercode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ZB_BoardGapInfo::clear_has_ordercode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ZB_BoardGapInfo::clear_ordercode() {
  if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
    ordercode_->clear();
  }
  clear_has_ordercode();
}
inline const ::std::string& ZB_BoardGapInfo::ordercode() const {
  return *ordercode_;
}
inline void ZB_BoardGapInfo::set_ordercode(const ::std::string& value) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(value);
}
inline void ZB_BoardGapInfo::set_ordercode(const char* value) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(value);
}
inline void ZB_BoardGapInfo::set_ordercode(const char* value, size_t size) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardGapInfo::mutable_ordercode() {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  return ordercode_;
}
inline ::std::string* ZB_BoardGapInfo::release_ordercode() {
  clear_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ordercode_;
    ordercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardGapInfo::set_allocated_ordercode(::std::string* ordercode) {
  if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
    delete ordercode_;
  }
  if (ordercode) {
    set_has_ordercode();
    ordercode_ = ordercode;
  } else {
    clear_has_ordercode();
    ordercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OldTableName = 15;
inline bool ZB_BoardGapInfo::has_oldtablename() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ZB_BoardGapInfo::set_has_oldtablename() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ZB_BoardGapInfo::clear_has_oldtablename() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ZB_BoardGapInfo::clear_oldtablename() {
  if (oldtablename_ != &::google::protobuf::internal::kEmptyString) {
    oldtablename_->clear();
  }
  clear_has_oldtablename();
}
inline const ::std::string& ZB_BoardGapInfo::oldtablename() const {
  return *oldtablename_;
}
inline void ZB_BoardGapInfo::set_oldtablename(const ::std::string& value) {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  oldtablename_->assign(value);
}
inline void ZB_BoardGapInfo::set_oldtablename(const char* value) {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  oldtablename_->assign(value);
}
inline void ZB_BoardGapInfo::set_oldtablename(const char* value, size_t size) {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  oldtablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardGapInfo::mutable_oldtablename() {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  return oldtablename_;
}
inline ::std::string* ZB_BoardGapInfo::release_oldtablename() {
  clear_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldtablename_;
    oldtablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardGapInfo::set_allocated_oldtablename(::std::string* oldtablename) {
  if (oldtablename_ != &::google::protobuf::internal::kEmptyString) {
    delete oldtablename_;
  }
  if (oldtablename) {
    set_has_oldtablename();
    oldtablename_ = oldtablename;
  } else {
    clear_has_oldtablename();
    oldtablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 OldID = 16;
inline bool ZB_BoardGapInfo::has_oldid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ZB_BoardGapInfo::set_has_oldid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ZB_BoardGapInfo::clear_has_oldid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ZB_BoardGapInfo::clear_oldid() {
  oldid_ = 0;
  clear_has_oldid();
}
inline ::google::protobuf::int32 ZB_BoardGapInfo::oldid() const {
  return oldid_;
}
inline void ZB_BoardGapInfo::set_oldid(::google::protobuf::int32 value) {
  set_has_oldid();
  oldid_ = value;
}

// -------------------------------------------------------------------

// ZB_BoardInfo

// required int64 ItemID = 1;
inline bool ZB_BoardInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZB_BoardInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZB_BoardInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZB_BoardInfo::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 ZB_BoardInfo::itemid() const {
  return itemid_;
}
inline void ZB_BoardInfo::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 OrderCate = 2;
inline bool ZB_BoardInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZB_BoardInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZB_BoardInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZB_BoardInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 ZB_BoardInfo::ordercate() const {
  return ordercate_;
}
inline void ZB_BoardInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 3;
inline bool ZB_BoardInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZB_BoardInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZB_BoardInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZB_BoardInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 ZB_BoardInfo::orderid() const {
  return orderid_;
}
inline void ZB_BoardInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 FactoryID = 4;
inline bool ZB_BoardInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZB_BoardInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZB_BoardInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZB_BoardInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 ZB_BoardInfo::factoryid() const {
  return factoryid_;
}
inline void ZB_BoardInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 BoardType = 5;
inline bool ZB_BoardInfo::has_boardtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZB_BoardInfo::set_has_boardtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZB_BoardInfo::clear_has_boardtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZB_BoardInfo::clear_boardtype() {
  boardtype_ = 0;
  clear_has_boardtype();
}
inline ::google::protobuf::int32 ZB_BoardInfo::boardtype() const {
  return boardtype_;
}
inline void ZB_BoardInfo::set_boardtype(::google::protobuf::int32 value) {
  set_has_boardtype();
  boardtype_ = value;
}

// required int64 ObjectID = 6;
inline bool ZB_BoardInfo::has_objectid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ZB_BoardInfo::set_has_objectid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ZB_BoardInfo::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ZB_BoardInfo::clear_objectid() {
  objectid_ = GOOGLE_LONGLONG(0);
  clear_has_objectid();
}
inline ::google::protobuf::int64 ZB_BoardInfo::objectid() const {
  return objectid_;
}
inline void ZB_BoardInfo::set_objectid(::google::protobuf::int64 value) {
  set_has_objectid();
  objectid_ = value;
}

// required int32 MaterialID = 7;
inline bool ZB_BoardInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ZB_BoardInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ZB_BoardInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ZB_BoardInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 ZB_BoardInfo::materialid() const {
  return materialid_;
}
inline void ZB_BoardInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required int64 CabinetID = 8;
inline bool ZB_BoardInfo::has_cabinetid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ZB_BoardInfo::set_has_cabinetid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ZB_BoardInfo::clear_has_cabinetid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ZB_BoardInfo::clear_cabinetid() {
  cabinetid_ = GOOGLE_LONGLONG(0);
  clear_has_cabinetid();
}
inline ::google::protobuf::int64 ZB_BoardInfo::cabinetid() const {
  return cabinetid_;
}
inline void ZB_BoardInfo::set_cabinetid(::google::protobuf::int64 value) {
  set_has_cabinetid();
  cabinetid_ = value;
}

// required int32 Grain = 9;
inline bool ZB_BoardInfo::has_grain() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ZB_BoardInfo::set_has_grain() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ZB_BoardInfo::clear_has_grain() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ZB_BoardInfo::clear_grain() {
  grain_ = 0;
  clear_has_grain();
}
inline ::google::protobuf::int32 ZB_BoardInfo::grain() const {
  return grain_;
}
inline void ZB_BoardInfo::set_grain(::google::protobuf::int32 value) {
  set_has_grain();
  grain_ = value;
}

// required bool IsUserAdd = 10;
inline bool ZB_BoardInfo::has_isuseradd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ZB_BoardInfo::set_has_isuseradd() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ZB_BoardInfo::clear_has_isuseradd() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ZB_BoardInfo::clear_isuseradd() {
  isuseradd_ = false;
  clear_has_isuseradd();
}
inline bool ZB_BoardInfo::isuseradd() const {
  return isuseradd_;
}
inline void ZB_BoardInfo::set_isuseradd(bool value) {
  set_has_isuseradd();
  isuseradd_ = value;
}

// required double XLength = 11;
inline bool ZB_BoardInfo::has_xlength() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ZB_BoardInfo::set_has_xlength() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ZB_BoardInfo::clear_has_xlength() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ZB_BoardInfo::clear_xlength() {
  xlength_ = 0;
  clear_has_xlength();
}
inline double ZB_BoardInfo::xlength() const {
  return xlength_;
}
inline void ZB_BoardInfo::set_xlength(double value) {
  set_has_xlength();
  xlength_ = value;
}

// required double YLength = 12;
inline bool ZB_BoardInfo::has_ylength() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ZB_BoardInfo::set_has_ylength() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ZB_BoardInfo::clear_has_ylength() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ZB_BoardInfo::clear_ylength() {
  ylength_ = 0;
  clear_has_ylength();
}
inline double ZB_BoardInfo::ylength() const {
  return ylength_;
}
inline void ZB_BoardInfo::set_ylength(double value) {
  set_has_ylength();
  ylength_ = value;
}

// required double ZLength = 13;
inline bool ZB_BoardInfo::has_zlength() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ZB_BoardInfo::set_has_zlength() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ZB_BoardInfo::clear_has_zlength() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ZB_BoardInfo::clear_zlength() {
  zlength_ = 0;
  clear_has_zlength();
}
inline double ZB_BoardInfo::zlength() const {
  return zlength_;
}
inline void ZB_BoardInfo::set_zlength(double value) {
  set_has_zlength();
  zlength_ = value;
}

// required double Square = 14;
inline bool ZB_BoardInfo::has_square() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ZB_BoardInfo::set_has_square() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ZB_BoardInfo::clear_has_square() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ZB_BoardInfo::clear_square() {
  square_ = 0;
  clear_has_square();
}
inline double ZB_BoardInfo::square() const {
  return square_;
}
inline void ZB_BoardInfo::set_square(double value) {
  set_has_square();
  square_ = value;
}

// required double CutXLength = 15;
inline bool ZB_BoardInfo::has_cutxlength() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ZB_BoardInfo::set_has_cutxlength() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ZB_BoardInfo::clear_has_cutxlength() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ZB_BoardInfo::clear_cutxlength() {
  cutxlength_ = 0;
  clear_has_cutxlength();
}
inline double ZB_BoardInfo::cutxlength() const {
  return cutxlength_;
}
inline void ZB_BoardInfo::set_cutxlength(double value) {
  set_has_cutxlength();
  cutxlength_ = value;
}

// required double CutYLength = 16;
inline bool ZB_BoardInfo::has_cutylength() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ZB_BoardInfo::set_has_cutylength() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ZB_BoardInfo::clear_has_cutylength() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ZB_BoardInfo::clear_cutylength() {
  cutylength_ = 0;
  clear_has_cutylength();
}
inline double ZB_BoardInfo::cutylength() const {
  return cutylength_;
}
inline void ZB_BoardInfo::set_cutylength(double value) {
  set_has_cutylength();
  cutylength_ = value;
}

// required string OrderCode = 17;
inline bool ZB_BoardInfo::has_ordercode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ZB_BoardInfo::set_has_ordercode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ZB_BoardInfo::clear_has_ordercode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ZB_BoardInfo::clear_ordercode() {
  if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
    ordercode_->clear();
  }
  clear_has_ordercode();
}
inline const ::std::string& ZB_BoardInfo::ordercode() const {
  return *ordercode_;
}
inline void ZB_BoardInfo::set_ordercode(const ::std::string& value) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(value);
}
inline void ZB_BoardInfo::set_ordercode(const char* value) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(value);
}
inline void ZB_BoardInfo::set_ordercode(const char* value, size_t size) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardInfo::mutable_ordercode() {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  return ordercode_;
}
inline ::std::string* ZB_BoardInfo::release_ordercode() {
  clear_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ordercode_;
    ordercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardInfo::set_allocated_ordercode(::std::string* ordercode) {
  if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
    delete ordercode_;
  }
  if (ordercode) {
    set_has_ordercode();
    ordercode_ = ordercode;
  } else {
    clear_has_ordercode();
    ordercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Name = 18;
inline bool ZB_BoardInfo::has_name() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ZB_BoardInfo::set_has_name() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ZB_BoardInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ZB_BoardInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ZB_BoardInfo::name() const {
  return *name_;
}
inline void ZB_BoardInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ZB_BoardInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ZB_BoardInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ZB_BoardInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ObjectName = 19;
inline bool ZB_BoardInfo::has_objectname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ZB_BoardInfo::set_has_objectname() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ZB_BoardInfo::clear_has_objectname() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ZB_BoardInfo::clear_objectname() {
  if (objectname_ != &::google::protobuf::internal::kEmptyString) {
    objectname_->clear();
  }
  clear_has_objectname();
}
inline const ::std::string& ZB_BoardInfo::objectname() const {
  return *objectname_;
}
inline void ZB_BoardInfo::set_objectname(const ::std::string& value) {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::kEmptyString) {
    objectname_ = new ::std::string;
  }
  objectname_->assign(value);
}
inline void ZB_BoardInfo::set_objectname(const char* value) {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::kEmptyString) {
    objectname_ = new ::std::string;
  }
  objectname_->assign(value);
}
inline void ZB_BoardInfo::set_objectname(const char* value, size_t size) {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::kEmptyString) {
    objectname_ = new ::std::string;
  }
  objectname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardInfo::mutable_objectname() {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::kEmptyString) {
    objectname_ = new ::std::string;
  }
  return objectname_;
}
inline ::std::string* ZB_BoardInfo::release_objectname() {
  clear_has_objectname();
  if (objectname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = objectname_;
    objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardInfo::set_allocated_objectname(::std::string* objectname) {
  if (objectname_ != &::google::protobuf::internal::kEmptyString) {
    delete objectname_;
  }
  if (objectname) {
    set_has_objectname();
    objectname_ = objectname;
  } else {
    clear_has_objectname();
    objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ObjectCode = 20;
inline bool ZB_BoardInfo::has_objectcode() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ZB_BoardInfo::set_has_objectcode() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ZB_BoardInfo::clear_has_objectcode() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ZB_BoardInfo::clear_objectcode() {
  if (objectcode_ != &::google::protobuf::internal::kEmptyString) {
    objectcode_->clear();
  }
  clear_has_objectcode();
}
inline const ::std::string& ZB_BoardInfo::objectcode() const {
  return *objectcode_;
}
inline void ZB_BoardInfo::set_objectcode(const ::std::string& value) {
  set_has_objectcode();
  if (objectcode_ == &::google::protobuf::internal::kEmptyString) {
    objectcode_ = new ::std::string;
  }
  objectcode_->assign(value);
}
inline void ZB_BoardInfo::set_objectcode(const char* value) {
  set_has_objectcode();
  if (objectcode_ == &::google::protobuf::internal::kEmptyString) {
    objectcode_ = new ::std::string;
  }
  objectcode_->assign(value);
}
inline void ZB_BoardInfo::set_objectcode(const char* value, size_t size) {
  set_has_objectcode();
  if (objectcode_ == &::google::protobuf::internal::kEmptyString) {
    objectcode_ = new ::std::string;
  }
  objectcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardInfo::mutable_objectcode() {
  set_has_objectcode();
  if (objectcode_ == &::google::protobuf::internal::kEmptyString) {
    objectcode_ = new ::std::string;
  }
  return objectcode_;
}
inline ::std::string* ZB_BoardInfo::release_objectcode() {
  clear_has_objectcode();
  if (objectcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = objectcode_;
    objectcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardInfo::set_allocated_objectcode(::std::string* objectcode) {
  if (objectcode_ != &::google::protobuf::internal::kEmptyString) {
    delete objectcode_;
  }
  if (objectcode) {
    set_has_objectcode();
    objectcode_ = objectcode;
  } else {
    clear_has_objectcode();
    objectcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string MaterialName = 21;
inline bool ZB_BoardInfo::has_materialname() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ZB_BoardInfo::set_has_materialname() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ZB_BoardInfo::clear_has_materialname() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ZB_BoardInfo::clear_materialname() {
  if (materialname_ != &::google::protobuf::internal::kEmptyString) {
    materialname_->clear();
  }
  clear_has_materialname();
}
inline const ::std::string& ZB_BoardInfo::materialname() const {
  return *materialname_;
}
inline void ZB_BoardInfo::set_materialname(const ::std::string& value) {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    materialname_ = new ::std::string;
  }
  materialname_->assign(value);
}
inline void ZB_BoardInfo::set_materialname(const char* value) {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    materialname_ = new ::std::string;
  }
  materialname_->assign(value);
}
inline void ZB_BoardInfo::set_materialname(const char* value, size_t size) {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    materialname_ = new ::std::string;
  }
  materialname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardInfo::mutable_materialname() {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    materialname_ = new ::std::string;
  }
  return materialname_;
}
inline ::std::string* ZB_BoardInfo::release_materialname() {
  clear_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = materialname_;
    materialname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardInfo::set_allocated_materialname(::std::string* materialname) {
  if (materialname_ != &::google::protobuf::internal::kEmptyString) {
    delete materialname_;
  }
  if (materialname) {
    set_has_materialname();
    materialname_ = materialname;
  } else {
    clear_has_materialname();
    materialname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabinetName = 22;
inline bool ZB_BoardInfo::has_cabinetname() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ZB_BoardInfo::set_has_cabinetname() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ZB_BoardInfo::clear_has_cabinetname() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ZB_BoardInfo::clear_cabinetname() {
  if (cabinetname_ != &::google::protobuf::internal::kEmptyString) {
    cabinetname_->clear();
  }
  clear_has_cabinetname();
}
inline const ::std::string& ZB_BoardInfo::cabinetname() const {
  return *cabinetname_;
}
inline void ZB_BoardInfo::set_cabinetname(const ::std::string& value) {
  set_has_cabinetname();
  if (cabinetname_ == &::google::protobuf::internal::kEmptyString) {
    cabinetname_ = new ::std::string;
  }
  cabinetname_->assign(value);
}
inline void ZB_BoardInfo::set_cabinetname(const char* value) {
  set_has_cabinetname();
  if (cabinetname_ == &::google::protobuf::internal::kEmptyString) {
    cabinetname_ = new ::std::string;
  }
  cabinetname_->assign(value);
}
inline void ZB_BoardInfo::set_cabinetname(const char* value, size_t size) {
  set_has_cabinetname();
  if (cabinetname_ == &::google::protobuf::internal::kEmptyString) {
    cabinetname_ = new ::std::string;
  }
  cabinetname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardInfo::mutable_cabinetname() {
  set_has_cabinetname();
  if (cabinetname_ == &::google::protobuf::internal::kEmptyString) {
    cabinetname_ = new ::std::string;
  }
  return cabinetname_;
}
inline ::std::string* ZB_BoardInfo::release_cabinetname() {
  clear_has_cabinetname();
  if (cabinetname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabinetname_;
    cabinetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardInfo::set_allocated_cabinetname(::std::string* cabinetname) {
  if (cabinetname_ != &::google::protobuf::internal::kEmptyString) {
    delete cabinetname_;
  }
  if (cabinetname) {
    set_has_cabinetname();
    cabinetname_ = cabinetname;
  } else {
    clear_has_cabinetname();
    cabinetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CabinetCode = 23;
inline bool ZB_BoardInfo::has_cabinetcode() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ZB_BoardInfo::set_has_cabinetcode() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ZB_BoardInfo::clear_has_cabinetcode() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ZB_BoardInfo::clear_cabinetcode() {
  if (cabinetcode_ != &::google::protobuf::internal::kEmptyString) {
    cabinetcode_->clear();
  }
  clear_has_cabinetcode();
}
inline const ::std::string& ZB_BoardInfo::cabinetcode() const {
  return *cabinetcode_;
}
inline void ZB_BoardInfo::set_cabinetcode(const ::std::string& value) {
  set_has_cabinetcode();
  if (cabinetcode_ == &::google::protobuf::internal::kEmptyString) {
    cabinetcode_ = new ::std::string;
  }
  cabinetcode_->assign(value);
}
inline void ZB_BoardInfo::set_cabinetcode(const char* value) {
  set_has_cabinetcode();
  if (cabinetcode_ == &::google::protobuf::internal::kEmptyString) {
    cabinetcode_ = new ::std::string;
  }
  cabinetcode_->assign(value);
}
inline void ZB_BoardInfo::set_cabinetcode(const char* value, size_t size) {
  set_has_cabinetcode();
  if (cabinetcode_ == &::google::protobuf::internal::kEmptyString) {
    cabinetcode_ = new ::std::string;
  }
  cabinetcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardInfo::mutable_cabinetcode() {
  set_has_cabinetcode();
  if (cabinetcode_ == &::google::protobuf::internal::kEmptyString) {
    cabinetcode_ = new ::std::string;
  }
  return cabinetcode_;
}
inline ::std::string* ZB_BoardInfo::release_cabinetcode() {
  clear_has_cabinetcode();
  if (cabinetcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cabinetcode_;
    cabinetcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardInfo::set_allocated_cabinetcode(::std::string* cabinetcode) {
  if (cabinetcode_ != &::google::protobuf::internal::kEmptyString) {
    delete cabinetcode_;
  }
  if (cabinetcode) {
    set_has_cabinetcode();
    cabinetcode_ = cabinetcode;
  } else {
    clear_has_cabinetcode();
    cabinetcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OldTableName = 24;
inline bool ZB_BoardInfo::has_oldtablename() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ZB_BoardInfo::set_has_oldtablename() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ZB_BoardInfo::clear_has_oldtablename() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ZB_BoardInfo::clear_oldtablename() {
  if (oldtablename_ != &::google::protobuf::internal::kEmptyString) {
    oldtablename_->clear();
  }
  clear_has_oldtablename();
}
inline const ::std::string& ZB_BoardInfo::oldtablename() const {
  return *oldtablename_;
}
inline void ZB_BoardInfo::set_oldtablename(const ::std::string& value) {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  oldtablename_->assign(value);
}
inline void ZB_BoardInfo::set_oldtablename(const char* value) {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  oldtablename_->assign(value);
}
inline void ZB_BoardInfo::set_oldtablename(const char* value, size_t size) {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  oldtablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardInfo::mutable_oldtablename() {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  return oldtablename_;
}
inline ::std::string* ZB_BoardInfo::release_oldtablename() {
  clear_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldtablename_;
    oldtablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardInfo::set_allocated_oldtablename(::std::string* oldtablename) {
  if (oldtablename_ != &::google::protobuf::internal::kEmptyString) {
    delete oldtablename_;
  }
  if (oldtablename) {
    set_has_oldtablename();
    oldtablename_ = oldtablename;
  } else {
    clear_has_oldtablename();
    oldtablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 OldID = 25;
inline bool ZB_BoardInfo::has_oldid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ZB_BoardInfo::set_has_oldid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ZB_BoardInfo::clear_has_oldid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ZB_BoardInfo::clear_oldid() {
  oldid_ = 0;
  clear_has_oldid();
}
inline ::google::protobuf::int32 ZB_BoardInfo::oldid() const {
  return oldid_;
}
inline void ZB_BoardInfo::set_oldid(::google::protobuf::int32 value) {
  set_has_oldid();
  oldid_ = value;
}

// -------------------------------------------------------------------

// ZB_BoardSealInfo

// required int64 ItemID = 1;
inline bool ZB_BoardSealInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZB_BoardSealInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZB_BoardSealInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZB_BoardSealInfo::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 ZB_BoardSealInfo::itemid() const {
  return itemid_;
}
inline void ZB_BoardSealInfo::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 OrderCate = 2;
inline bool ZB_BoardSealInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZB_BoardSealInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZB_BoardSealInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZB_BoardSealInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 ZB_BoardSealInfo::ordercate() const {
  return ordercate_;
}
inline void ZB_BoardSealInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 3;
inline bool ZB_BoardSealInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZB_BoardSealInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZB_BoardSealInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZB_BoardSealInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 ZB_BoardSealInfo::orderid() const {
  return orderid_;
}
inline void ZB_BoardSealInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 FactoryID = 4;
inline bool ZB_BoardSealInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZB_BoardSealInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZB_BoardSealInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZB_BoardSealInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 ZB_BoardSealInfo::factoryid() const {
  return factoryid_;
}
inline void ZB_BoardSealInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 BoardID = 5;
inline bool ZB_BoardSealInfo::has_boardid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZB_BoardSealInfo::set_has_boardid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZB_BoardSealInfo::clear_has_boardid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZB_BoardSealInfo::clear_boardid() {
  boardid_ = GOOGLE_LONGLONG(0);
  clear_has_boardid();
}
inline ::google::protobuf::int64 ZB_BoardSealInfo::boardid() const {
  return boardid_;
}
inline void ZB_BoardSealInfo::set_boardid(::google::protobuf::int64 value) {
  set_has_boardid();
  boardid_ = value;
}

// required int32 SealIndex = 6;
inline bool ZB_BoardSealInfo::has_sealindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ZB_BoardSealInfo::set_has_sealindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ZB_BoardSealInfo::clear_has_sealindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ZB_BoardSealInfo::clear_sealindex() {
  sealindex_ = 0;
  clear_has_sealindex();
}
inline ::google::protobuf::int32 ZB_BoardSealInfo::sealindex() const {
  return sealindex_;
}
inline void ZB_BoardSealInfo::set_sealindex(::google::protobuf::int32 value) {
  set_has_sealindex();
  sealindex_ = value;
}

// required int32 MaterialID = 7;
inline bool ZB_BoardSealInfo::has_materialid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ZB_BoardSealInfo::set_has_materialid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ZB_BoardSealInfo::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ZB_BoardSealInfo::clear_materialid() {
  materialid_ = 0;
  clear_has_materialid();
}
inline ::google::protobuf::int32 ZB_BoardSealInfo::materialid() const {
  return materialid_;
}
inline void ZB_BoardSealInfo::set_materialid(::google::protobuf::int32 value) {
  set_has_materialid();
  materialid_ = value;
}

// required double PreMill = 8;
inline bool ZB_BoardSealInfo::has_premill() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ZB_BoardSealInfo::set_has_premill() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ZB_BoardSealInfo::clear_has_premill() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ZB_BoardSealInfo::clear_premill() {
  premill_ = 0;
  clear_has_premill();
}
inline double ZB_BoardSealInfo::premill() const {
  return premill_;
}
inline void ZB_BoardSealInfo::set_premill(double value) {
  set_has_premill();
  premill_ = value;
}

// required string OrderCode = 9;
inline bool ZB_BoardSealInfo::has_ordercode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ZB_BoardSealInfo::set_has_ordercode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ZB_BoardSealInfo::clear_has_ordercode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ZB_BoardSealInfo::clear_ordercode() {
  if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
    ordercode_->clear();
  }
  clear_has_ordercode();
}
inline const ::std::string& ZB_BoardSealInfo::ordercode() const {
  return *ordercode_;
}
inline void ZB_BoardSealInfo::set_ordercode(const ::std::string& value) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(value);
}
inline void ZB_BoardSealInfo::set_ordercode(const char* value) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(value);
}
inline void ZB_BoardSealInfo::set_ordercode(const char* value, size_t size) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardSealInfo::mutable_ordercode() {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  return ordercode_;
}
inline ::std::string* ZB_BoardSealInfo::release_ordercode() {
  clear_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ordercode_;
    ordercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardSealInfo::set_allocated_ordercode(::std::string* ordercode) {
  if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
    delete ordercode_;
  }
  if (ordercode) {
    set_has_ordercode();
    ordercode_ = ordercode;
  } else {
    clear_has_ordercode();
    ordercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string MaterialCode = 10;
inline bool ZB_BoardSealInfo::has_materialcode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ZB_BoardSealInfo::set_has_materialcode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ZB_BoardSealInfo::clear_has_materialcode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ZB_BoardSealInfo::clear_materialcode() {
  if (materialcode_ != &::google::protobuf::internal::kEmptyString) {
    materialcode_->clear();
  }
  clear_has_materialcode();
}
inline const ::std::string& ZB_BoardSealInfo::materialcode() const {
  return *materialcode_;
}
inline void ZB_BoardSealInfo::set_materialcode(const ::std::string& value) {
  set_has_materialcode();
  if (materialcode_ == &::google::protobuf::internal::kEmptyString) {
    materialcode_ = new ::std::string;
  }
  materialcode_->assign(value);
}
inline void ZB_BoardSealInfo::set_materialcode(const char* value) {
  set_has_materialcode();
  if (materialcode_ == &::google::protobuf::internal::kEmptyString) {
    materialcode_ = new ::std::string;
  }
  materialcode_->assign(value);
}
inline void ZB_BoardSealInfo::set_materialcode(const char* value, size_t size) {
  set_has_materialcode();
  if (materialcode_ == &::google::protobuf::internal::kEmptyString) {
    materialcode_ = new ::std::string;
  }
  materialcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardSealInfo::mutable_materialcode() {
  set_has_materialcode();
  if (materialcode_ == &::google::protobuf::internal::kEmptyString) {
    materialcode_ = new ::std::string;
  }
  return materialcode_;
}
inline ::std::string* ZB_BoardSealInfo::release_materialcode() {
  clear_has_materialcode();
  if (materialcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = materialcode_;
    materialcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardSealInfo::set_allocated_materialcode(::std::string* materialcode) {
  if (materialcode_ != &::google::protobuf::internal::kEmptyString) {
    delete materialcode_;
  }
  if (materialcode) {
    set_has_materialcode();
    materialcode_ = materialcode;
  } else {
    clear_has_materialcode();
    materialcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string MaterialName = 11;
inline bool ZB_BoardSealInfo::has_materialname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ZB_BoardSealInfo::set_has_materialname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ZB_BoardSealInfo::clear_has_materialname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ZB_BoardSealInfo::clear_materialname() {
  if (materialname_ != &::google::protobuf::internal::kEmptyString) {
    materialname_->clear();
  }
  clear_has_materialname();
}
inline const ::std::string& ZB_BoardSealInfo::materialname() const {
  return *materialname_;
}
inline void ZB_BoardSealInfo::set_materialname(const ::std::string& value) {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    materialname_ = new ::std::string;
  }
  materialname_->assign(value);
}
inline void ZB_BoardSealInfo::set_materialname(const char* value) {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    materialname_ = new ::std::string;
  }
  materialname_->assign(value);
}
inline void ZB_BoardSealInfo::set_materialname(const char* value, size_t size) {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    materialname_ = new ::std::string;
  }
  materialname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardSealInfo::mutable_materialname() {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    materialname_ = new ::std::string;
  }
  return materialname_;
}
inline ::std::string* ZB_BoardSealInfo::release_materialname() {
  clear_has_materialname();
  if (materialname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = materialname_;
    materialname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardSealInfo::set_allocated_materialname(::std::string* materialname) {
  if (materialname_ != &::google::protobuf::internal::kEmptyString) {
    delete materialname_;
  }
  if (materialname) {
    set_has_materialname();
    materialname_ = materialname;
  } else {
    clear_has_materialname();
    materialname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OldTableName = 12;
inline bool ZB_BoardSealInfo::has_oldtablename() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ZB_BoardSealInfo::set_has_oldtablename() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ZB_BoardSealInfo::clear_has_oldtablename() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ZB_BoardSealInfo::clear_oldtablename() {
  if (oldtablename_ != &::google::protobuf::internal::kEmptyString) {
    oldtablename_->clear();
  }
  clear_has_oldtablename();
}
inline const ::std::string& ZB_BoardSealInfo::oldtablename() const {
  return *oldtablename_;
}
inline void ZB_BoardSealInfo::set_oldtablename(const ::std::string& value) {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  oldtablename_->assign(value);
}
inline void ZB_BoardSealInfo::set_oldtablename(const char* value) {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  oldtablename_->assign(value);
}
inline void ZB_BoardSealInfo::set_oldtablename(const char* value, size_t size) {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  oldtablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_BoardSealInfo::mutable_oldtablename() {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  return oldtablename_;
}
inline ::std::string* ZB_BoardSealInfo::release_oldtablename() {
  clear_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldtablename_;
    oldtablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_BoardSealInfo::set_allocated_oldtablename(::std::string* oldtablename) {
  if (oldtablename_ != &::google::protobuf::internal::kEmptyString) {
    delete oldtablename_;
  }
  if (oldtablename) {
    set_has_oldtablename();
    oldtablename_ = oldtablename;
  } else {
    clear_has_oldtablename();
    oldtablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 OldID = 13;
inline bool ZB_BoardSealInfo::has_oldid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ZB_BoardSealInfo::set_has_oldid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ZB_BoardSealInfo::clear_has_oldid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ZB_BoardSealInfo::clear_oldid() {
  oldid_ = 0;
  clear_has_oldid();
}
inline ::google::protobuf::int32 ZB_BoardSealInfo::oldid() const {
  return oldid_;
}
inline void ZB_BoardSealInfo::set_oldid(::google::protobuf::int32 value) {
  set_has_oldid();
  oldid_ = value;
}

// -------------------------------------------------------------------

// ZB_Objects

// required int64 ItemID = 1;
inline bool ZB_Objects::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZB_Objects::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZB_Objects::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZB_Objects::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 ZB_Objects::itemid() const {
  return itemid_;
}
inline void ZB_Objects::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 OrderCate = 2;
inline bool ZB_Objects::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZB_Objects::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZB_Objects::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZB_Objects::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 ZB_Objects::ordercate() const {
  return ordercate_;
}
inline void ZB_Objects::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 3;
inline bool ZB_Objects::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZB_Objects::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZB_Objects::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZB_Objects::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 ZB_Objects::orderid() const {
  return orderid_;
}
inline void ZB_Objects::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int32 FactoryID = 4;
inline bool ZB_Objects::has_factoryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZB_Objects::set_has_factoryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZB_Objects::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZB_Objects::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 ZB_Objects::factoryid() const {
  return factoryid_;
}
inline void ZB_Objects::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int32 ObjectType = 5;
inline bool ZB_Objects::has_objecttype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZB_Objects::set_has_objecttype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZB_Objects::clear_has_objecttype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZB_Objects::clear_objecttype() {
  objecttype_ = 0;
  clear_has_objecttype();
}
inline ::google::protobuf::int32 ZB_Objects::objecttype() const {
  return objecttype_;
}
inline void ZB_Objects::set_objecttype(::google::protobuf::int32 value) {
  set_has_objecttype();
  objecttype_ = value;
}

// required int64 ParentID = 6;
inline bool ZB_Objects::has_parentid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ZB_Objects::set_has_parentid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ZB_Objects::clear_has_parentid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ZB_Objects::clear_parentid() {
  parentid_ = GOOGLE_LONGLONG(0);
  clear_has_parentid();
}
inline ::google::protobuf::int64 ZB_Objects::parentid() const {
  return parentid_;
}
inline void ZB_Objects::set_parentid(::google::protobuf::int64 value) {
  set_has_parentid();
  parentid_ = value;
}

// required int32 GType = 7;
inline bool ZB_Objects::has_gtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ZB_Objects::set_has_gtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ZB_Objects::clear_has_gtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ZB_Objects::clear_gtype() {
  gtype_ = 0;
  clear_has_gtype();
}
inline ::google::protobuf::int32 ZB_Objects::gtype() const {
  return gtype_;
}
inline void ZB_Objects::set_gtype(::google::protobuf::int32 value) {
  set_has_gtype();
  gtype_ = value;
}

// required double XLength = 8;
inline bool ZB_Objects::has_xlength() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ZB_Objects::set_has_xlength() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ZB_Objects::clear_has_xlength() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ZB_Objects::clear_xlength() {
  xlength_ = 0;
  clear_has_xlength();
}
inline double ZB_Objects::xlength() const {
  return xlength_;
}
inline void ZB_Objects::set_xlength(double value) {
  set_has_xlength();
  xlength_ = value;
}

// required double YLength = 9;
inline bool ZB_Objects::has_ylength() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ZB_Objects::set_has_ylength() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ZB_Objects::clear_has_ylength() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ZB_Objects::clear_ylength() {
  ylength_ = 0;
  clear_has_ylength();
}
inline double ZB_Objects::ylength() const {
  return ylength_;
}
inline void ZB_Objects::set_ylength(double value) {
  set_has_ylength();
  ylength_ = value;
}

// required double ZLength = 10;
inline bool ZB_Objects::has_zlength() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ZB_Objects::set_has_zlength() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ZB_Objects::clear_has_zlength() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ZB_Objects::clear_zlength() {
  zlength_ = 0;
  clear_has_zlength();
}
inline double ZB_Objects::zlength() const {
  return zlength_;
}
inline void ZB_Objects::set_zlength(double value) {
  set_has_zlength();
  zlength_ = value;
}

// required double ShapeXLength = 11;
inline bool ZB_Objects::has_shapexlength() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ZB_Objects::set_has_shapexlength() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ZB_Objects::clear_has_shapexlength() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ZB_Objects::clear_shapexlength() {
  shapexlength_ = 0;
  clear_has_shapexlength();
}
inline double ZB_Objects::shapexlength() const {
  return shapexlength_;
}
inline void ZB_Objects::set_shapexlength(double value) {
  set_has_shapexlength();
  shapexlength_ = value;
}

// required double ShapeZLength = 12;
inline bool ZB_Objects::has_shapezlength() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ZB_Objects::set_has_shapezlength() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ZB_Objects::clear_has_shapezlength() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ZB_Objects::clear_shapezlength() {
  shapezlength_ = 0;
  clear_has_shapezlength();
}
inline double ZB_Objects::shapezlength() const {
  return shapezlength_;
}
inline void ZB_Objects::set_shapezlength(double value) {
  set_has_shapezlength();
  shapezlength_ = value;
}

// required double GapXLength = 13;
inline bool ZB_Objects::has_gapxlength() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ZB_Objects::set_has_gapxlength() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ZB_Objects::clear_has_gapxlength() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ZB_Objects::clear_gapxlength() {
  gapxlength_ = 0;
  clear_has_gapxlength();
}
inline double ZB_Objects::gapxlength() const {
  return gapxlength_;
}
inline void ZB_Objects::set_gapxlength(double value) {
  set_has_gapxlength();
  gapxlength_ = value;
}

// required double GapYLength = 14;
inline bool ZB_Objects::has_gapylength() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ZB_Objects::set_has_gapylength() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ZB_Objects::clear_has_gapylength() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ZB_Objects::clear_gapylength() {
  gapylength_ = 0;
  clear_has_gapylength();
}
inline double ZB_Objects::gapylength() const {
  return gapylength_;
}
inline void ZB_Objects::set_gapylength(double value) {
  set_has_gapylength();
  gapylength_ = value;
}

// required double GapZLength = 15;
inline bool ZB_Objects::has_gapzlength() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ZB_Objects::set_has_gapzlength() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ZB_Objects::clear_has_gapzlength() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ZB_Objects::clear_gapzlength() {
  gapzlength_ = 0;
  clear_has_gapzlength();
}
inline double ZB_Objects::gapzlength() const {
  return gapzlength_;
}
inline void ZB_Objects::set_gapzlength(double value) {
  set_has_gapzlength();
  gapzlength_ = value;
}

// required double Amount = 16;
inline bool ZB_Objects::has_amount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ZB_Objects::set_has_amount() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ZB_Objects::clear_has_amount() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ZB_Objects::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline double ZB_Objects::amount() const {
  return amount_;
}
inline void ZB_Objects::set_amount(double value) {
  set_has_amount();
  amount_ = value;
}

// required bool IsStandard = 17;
inline bool ZB_Objects::has_isstandard() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ZB_Objects::set_has_isstandard() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ZB_Objects::clear_has_isstandard() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ZB_Objects::clear_isstandard() {
  isstandard_ = false;
  clear_has_isstandard();
}
inline bool ZB_Objects::isstandard() const {
  return isstandard_;
}
inline void ZB_Objects::set_isstandard(bool value) {
  set_has_isstandard();
  isstandard_ = value;
}

// required bool IsUserAdd = 18;
inline bool ZB_Objects::has_isuseradd() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ZB_Objects::set_has_isuseradd() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ZB_Objects::clear_has_isuseradd() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ZB_Objects::clear_isuseradd() {
  isuseradd_ = false;
  clear_has_isuseradd();
}
inline bool ZB_Objects::isuseradd() const {
  return isuseradd_;
}
inline void ZB_Objects::set_isuseradd(bool value) {
  set_has_isuseradd();
  isuseradd_ = value;
}

// required int32 MaterialPlanID = 19;
inline bool ZB_Objects::has_materialplanid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ZB_Objects::set_has_materialplanid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ZB_Objects::clear_has_materialplanid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ZB_Objects::clear_materialplanid() {
  materialplanid_ = 0;
  clear_has_materialplanid();
}
inline ::google::protobuf::int32 ZB_Objects::materialplanid() const {
  return materialplanid_;
}
inline void ZB_Objects::set_materialplanid(::google::protobuf::int32 value) {
  set_has_materialplanid();
  materialplanid_ = value;
}

// required int32 CabGapType = 20;
inline bool ZB_Objects::has_cabgaptype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ZB_Objects::set_has_cabgaptype() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ZB_Objects::clear_has_cabgaptype() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ZB_Objects::clear_cabgaptype() {
  cabgaptype_ = 0;
  clear_has_cabgaptype();
}
inline ::google::protobuf::int32 ZB_Objects::cabgaptype() const {
  return cabgaptype_;
}
inline void ZB_Objects::set_cabgaptype(::google::protobuf::int32 value) {
  set_has_cabgaptype();
  cabgaptype_ = value;
}

// required int32 CabShape = 21;
inline bool ZB_Objects::has_cabshape() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ZB_Objects::set_has_cabshape() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ZB_Objects::clear_has_cabshape() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ZB_Objects::clear_cabshape() {
  cabshape_ = 0;
  clear_has_cabshape();
}
inline ::google::protobuf::int32 ZB_Objects::cabshape() const {
  return cabshape_;
}
inline void ZB_Objects::set_cabshape(::google::protobuf::int32 value) {
  set_has_cabshape();
  cabshape_ = value;
}

// required string OrderCode = 22;
inline bool ZB_Objects::has_ordercode() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ZB_Objects::set_has_ordercode() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ZB_Objects::clear_has_ordercode() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ZB_Objects::clear_ordercode() {
  if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
    ordercode_->clear();
  }
  clear_has_ordercode();
}
inline const ::std::string& ZB_Objects::ordercode() const {
  return *ordercode_;
}
inline void ZB_Objects::set_ordercode(const ::std::string& value) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(value);
}
inline void ZB_Objects::set_ordercode(const char* value) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(value);
}
inline void ZB_Objects::set_ordercode(const char* value, size_t size) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_Objects::mutable_ordercode() {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  return ordercode_;
}
inline ::std::string* ZB_Objects::release_ordercode() {
  clear_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ordercode_;
    ordercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_Objects::set_allocated_ordercode(::std::string* ordercode) {
  if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
    delete ordercode_;
  }
  if (ordercode) {
    set_has_ordercode();
    ordercode_ = ordercode;
  } else {
    clear_has_ordercode();
    ordercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Name = 23;
inline bool ZB_Objects::has_name() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ZB_Objects::set_has_name() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ZB_Objects::clear_has_name() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ZB_Objects::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ZB_Objects::name() const {
  return *name_;
}
inline void ZB_Objects::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ZB_Objects::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ZB_Objects::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_Objects::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ZB_Objects::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_Objects::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Code = 24;
inline bool ZB_Objects::has_code() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ZB_Objects::set_has_code() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ZB_Objects::clear_has_code() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ZB_Objects::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& ZB_Objects::code() const {
  return *code_;
}
inline void ZB_Objects::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void ZB_Objects::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void ZB_Objects::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_Objects::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* ZB_Objects::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_Objects::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string MaterialPlanName = 25;
inline bool ZB_Objects::has_materialplanname() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ZB_Objects::set_has_materialplanname() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ZB_Objects::clear_has_materialplanname() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ZB_Objects::clear_materialplanname() {
  if (materialplanname_ != &::google::protobuf::internal::kEmptyString) {
    materialplanname_->clear();
  }
  clear_has_materialplanname();
}
inline const ::std::string& ZB_Objects::materialplanname() const {
  return *materialplanname_;
}
inline void ZB_Objects::set_materialplanname(const ::std::string& value) {
  set_has_materialplanname();
  if (materialplanname_ == &::google::protobuf::internal::kEmptyString) {
    materialplanname_ = new ::std::string;
  }
  materialplanname_->assign(value);
}
inline void ZB_Objects::set_materialplanname(const char* value) {
  set_has_materialplanname();
  if (materialplanname_ == &::google::protobuf::internal::kEmptyString) {
    materialplanname_ = new ::std::string;
  }
  materialplanname_->assign(value);
}
inline void ZB_Objects::set_materialplanname(const char* value, size_t size) {
  set_has_materialplanname();
  if (materialplanname_ == &::google::protobuf::internal::kEmptyString) {
    materialplanname_ = new ::std::string;
  }
  materialplanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_Objects::mutable_materialplanname() {
  set_has_materialplanname();
  if (materialplanname_ == &::google::protobuf::internal::kEmptyString) {
    materialplanname_ = new ::std::string;
  }
  return materialplanname_;
}
inline ::std::string* ZB_Objects::release_materialplanname() {
  clear_has_materialplanname();
  if (materialplanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = materialplanname_;
    materialplanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_Objects::set_allocated_materialplanname(::std::string* materialplanname) {
  if (materialplanname_ != &::google::protobuf::internal::kEmptyString) {
    delete materialplanname_;
  }
  if (materialplanname) {
    set_has_materialplanname();
    materialplanname_ = materialplanname;
  } else {
    clear_has_materialplanname();
    materialplanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string BarCode = 26;
inline bool ZB_Objects::has_barcode() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ZB_Objects::set_has_barcode() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ZB_Objects::clear_has_barcode() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ZB_Objects::clear_barcode() {
  if (barcode_ != &::google::protobuf::internal::kEmptyString) {
    barcode_->clear();
  }
  clear_has_barcode();
}
inline const ::std::string& ZB_Objects::barcode() const {
  return *barcode_;
}
inline void ZB_Objects::set_barcode(const ::std::string& value) {
  set_has_barcode();
  if (barcode_ == &::google::protobuf::internal::kEmptyString) {
    barcode_ = new ::std::string;
  }
  barcode_->assign(value);
}
inline void ZB_Objects::set_barcode(const char* value) {
  set_has_barcode();
  if (barcode_ == &::google::protobuf::internal::kEmptyString) {
    barcode_ = new ::std::string;
  }
  barcode_->assign(value);
}
inline void ZB_Objects::set_barcode(const char* value, size_t size) {
  set_has_barcode();
  if (barcode_ == &::google::protobuf::internal::kEmptyString) {
    barcode_ = new ::std::string;
  }
  barcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_Objects::mutable_barcode() {
  set_has_barcode();
  if (barcode_ == &::google::protobuf::internal::kEmptyString) {
    barcode_ = new ::std::string;
  }
  return barcode_;
}
inline ::std::string* ZB_Objects::release_barcode() {
  clear_has_barcode();
  if (barcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = barcode_;
    barcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_Objects::set_allocated_barcode(::std::string* barcode) {
  if (barcode_ != &::google::protobuf::internal::kEmptyString) {
    delete barcode_;
  }
  if (barcode) {
    set_has_barcode();
    barcode_ = barcode;
  } else {
    clear_has_barcode();
    barcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Remarks = 27;
inline bool ZB_Objects::has_remarks() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ZB_Objects::set_has_remarks() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ZB_Objects::clear_has_remarks() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ZB_Objects::clear_remarks() {
  if (remarks_ != &::google::protobuf::internal::kEmptyString) {
    remarks_->clear();
  }
  clear_has_remarks();
}
inline const ::std::string& ZB_Objects::remarks() const {
  return *remarks_;
}
inline void ZB_Objects::set_remarks(const ::std::string& value) {
  set_has_remarks();
  if (remarks_ == &::google::protobuf::internal::kEmptyString) {
    remarks_ = new ::std::string;
  }
  remarks_->assign(value);
}
inline void ZB_Objects::set_remarks(const char* value) {
  set_has_remarks();
  if (remarks_ == &::google::protobuf::internal::kEmptyString) {
    remarks_ = new ::std::string;
  }
  remarks_->assign(value);
}
inline void ZB_Objects::set_remarks(const char* value, size_t size) {
  set_has_remarks();
  if (remarks_ == &::google::protobuf::internal::kEmptyString) {
    remarks_ = new ::std::string;
  }
  remarks_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_Objects::mutable_remarks() {
  set_has_remarks();
  if (remarks_ == &::google::protobuf::internal::kEmptyString) {
    remarks_ = new ::std::string;
  }
  return remarks_;
}
inline ::std::string* ZB_Objects::release_remarks() {
  clear_has_remarks();
  if (remarks_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remarks_;
    remarks_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_Objects::set_allocated_remarks(::std::string* remarks) {
  if (remarks_ != &::google::protobuf::internal::kEmptyString) {
    delete remarks_;
  }
  if (remarks) {
    set_has_remarks();
    remarks_ = remarks;
  } else {
    clear_has_remarks();
    remarks_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OldTableName = 28;
inline bool ZB_Objects::has_oldtablename() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ZB_Objects::set_has_oldtablename() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ZB_Objects::clear_has_oldtablename() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ZB_Objects::clear_oldtablename() {
  if (oldtablename_ != &::google::protobuf::internal::kEmptyString) {
    oldtablename_->clear();
  }
  clear_has_oldtablename();
}
inline const ::std::string& ZB_Objects::oldtablename() const {
  return *oldtablename_;
}
inline void ZB_Objects::set_oldtablename(const ::std::string& value) {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  oldtablename_->assign(value);
}
inline void ZB_Objects::set_oldtablename(const char* value) {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  oldtablename_->assign(value);
}
inline void ZB_Objects::set_oldtablename(const char* value, size_t size) {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  oldtablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_Objects::mutable_oldtablename() {
  set_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    oldtablename_ = new ::std::string;
  }
  return oldtablename_;
}
inline ::std::string* ZB_Objects::release_oldtablename() {
  clear_has_oldtablename();
  if (oldtablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldtablename_;
    oldtablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_Objects::set_allocated_oldtablename(::std::string* oldtablename) {
  if (oldtablename_ != &::google::protobuf::internal::kEmptyString) {
    delete oldtablename_;
  }
  if (oldtablename) {
    set_has_oldtablename();
    oldtablename_ = oldtablename;
  } else {
    clear_has_oldtablename();
    oldtablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 OldID = 29;
inline bool ZB_Objects::has_oldid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ZB_Objects::set_has_oldid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ZB_Objects::clear_has_oldid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ZB_Objects::clear_oldid() {
  oldid_ = 0;
  clear_has_oldid();
}
inline ::google::protobuf::int32 ZB_Objects::oldid() const {
  return oldid_;
}
inline void ZB_Objects::set_oldid(::google::protobuf::int32 value) {
  set_has_oldid();
  oldid_ = value;
}

// -------------------------------------------------------------------

// ZB_OrderInfo

// required int64 ItemID = 1;
inline bool ZB_OrderInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZB_OrderInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZB_OrderInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZB_OrderInfo::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 ZB_OrderInfo::itemid() const {
  return itemid_;
}
inline void ZB_OrderInfo::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 OrderCate = 2;
inline bool ZB_OrderInfo::has_ordercate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZB_OrderInfo::set_has_ordercate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZB_OrderInfo::clear_has_ordercate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZB_OrderInfo::clear_ordercate() {
  ordercate_ = 0;
  clear_has_ordercate();
}
inline ::google::protobuf::int32 ZB_OrderInfo::ordercate() const {
  return ordercate_;
}
inline void ZB_OrderInfo::set_ordercate(::google::protobuf::int32 value) {
  set_has_ordercate();
  ordercate_ = value;
}

// required int64 OrderID = 3;
inline bool ZB_OrderInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZB_OrderInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZB_OrderInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZB_OrderInfo::clear_orderid() {
  orderid_ = GOOGLE_LONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::int64 ZB_OrderInfo::orderid() const {
  return orderid_;
}
inline void ZB_OrderInfo::set_orderid(::google::protobuf::int64 value) {
  set_has_orderid();
  orderid_ = value;
}

// required int64 ParentID = 4;
inline bool ZB_OrderInfo::has_parentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZB_OrderInfo::set_has_parentid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZB_OrderInfo::clear_has_parentid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZB_OrderInfo::clear_parentid() {
  parentid_ = GOOGLE_LONGLONG(0);
  clear_has_parentid();
}
inline ::google::protobuf::int64 ZB_OrderInfo::parentid() const {
  return parentid_;
}
inline void ZB_OrderInfo::set_parentid(::google::protobuf::int64 value) {
  set_has_parentid();
  parentid_ = value;
}

// required int32 OrderType = 5;
inline bool ZB_OrderInfo::has_ordertype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZB_OrderInfo::set_has_ordertype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZB_OrderInfo::clear_has_ordertype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZB_OrderInfo::clear_ordertype() {
  ordertype_ = 0;
  clear_has_ordertype();
}
inline ::google::protobuf::int32 ZB_OrderInfo::ordertype() const {
  return ordertype_;
}
inline void ZB_OrderInfo::set_ordertype(::google::protobuf::int32 value) {
  set_has_ordertype();
  ordertype_ = value;
}

// required int32 OrderIndex = 6;
inline bool ZB_OrderInfo::has_orderindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ZB_OrderInfo::set_has_orderindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ZB_OrderInfo::clear_has_orderindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ZB_OrderInfo::clear_orderindex() {
  orderindex_ = 0;
  clear_has_orderindex();
}
inline ::google::protobuf::int32 ZB_OrderInfo::orderindex() const {
  return orderindex_;
}
inline void ZB_OrderInfo::set_orderindex(::google::protobuf::int32 value) {
  set_has_orderindex();
  orderindex_ = value;
}

// required int32 FactoryID = 7;
inline bool ZB_OrderInfo::has_factoryid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ZB_OrderInfo::set_has_factoryid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ZB_OrderInfo::clear_has_factoryid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ZB_OrderInfo::clear_factoryid() {
  factoryid_ = 0;
  clear_has_factoryid();
}
inline ::google::protobuf::int32 ZB_OrderInfo::factoryid() const {
  return factoryid_;
}
inline void ZB_OrderInfo::set_factoryid(::google::protobuf::int32 value) {
  set_has_factoryid();
  factoryid_ = value;
}

// required int64 VerCode = 8;
inline bool ZB_OrderInfo::has_vercode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ZB_OrderInfo::set_has_vercode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ZB_OrderInfo::clear_has_vercode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ZB_OrderInfo::clear_vercode() {
  vercode_ = GOOGLE_LONGLONG(0);
  clear_has_vercode();
}
inline ::google::protobuf::int64 ZB_OrderInfo::vercode() const {
  return vercode_;
}
inline void ZB_OrderInfo::set_vercode(::google::protobuf::int64 value) {
  set_has_vercode();
  vercode_ = value;
}

// required int32 ShopID = 9;
inline bool ZB_OrderInfo::has_shopid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ZB_OrderInfo::set_has_shopid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ZB_OrderInfo::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ZB_OrderInfo::clear_shopid() {
  shopid_ = 0;
  clear_has_shopid();
}
inline ::google::protobuf::int32 ZB_OrderInfo::shopid() const {
  return shopid_;
}
inline void ZB_OrderInfo::set_shopid(::google::protobuf::int32 value) {
  set_has_shopid();
  shopid_ = value;
}

// required int32 PreSurveyorID = 10;
inline bool ZB_OrderInfo::has_presurveyorid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ZB_OrderInfo::set_has_presurveyorid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ZB_OrderInfo::clear_has_presurveyorid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ZB_OrderInfo::clear_presurveyorid() {
  presurveyorid_ = 0;
  clear_has_presurveyorid();
}
inline ::google::protobuf::int32 ZB_OrderInfo::presurveyorid() const {
  return presurveyorid_;
}
inline void ZB_OrderInfo::set_presurveyorid(::google::protobuf::int32 value) {
  set_has_presurveyorid();
  presurveyorid_ = value;
}

// required int32 ReSurveyorID = 11;
inline bool ZB_OrderInfo::has_resurveyorid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ZB_OrderInfo::set_has_resurveyorid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ZB_OrderInfo::clear_has_resurveyorid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ZB_OrderInfo::clear_resurveyorid() {
  resurveyorid_ = 0;
  clear_has_resurveyorid();
}
inline ::google::protobuf::int32 ZB_OrderInfo::resurveyorid() const {
  return resurveyorid_;
}
inline void ZB_OrderInfo::set_resurveyorid(::google::protobuf::int32 value) {
  set_has_resurveyorid();
  resurveyorid_ = value;
}

// required int32 DesignerID = 12;
inline bool ZB_OrderInfo::has_designerid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ZB_OrderInfo::set_has_designerid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ZB_OrderInfo::clear_has_designerid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ZB_OrderInfo::clear_designerid() {
  designerid_ = 0;
  clear_has_designerid();
}
inline ::google::protobuf::int32 ZB_OrderInfo::designerid() const {
  return designerid_;
}
inline void ZB_OrderInfo::set_designerid(::google::protobuf::int32 value) {
  set_has_designerid();
  designerid_ = value;
}

// required int32 SellerID = 13;
inline bool ZB_OrderInfo::has_sellerid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ZB_OrderInfo::set_has_sellerid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ZB_OrderInfo::clear_has_sellerid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ZB_OrderInfo::clear_sellerid() {
  sellerid_ = 0;
  clear_has_sellerid();
}
inline ::google::protobuf::int32 ZB_OrderInfo::sellerid() const {
  return sellerid_;
}
inline void ZB_OrderInfo::set_sellerid(::google::protobuf::int32 value) {
  set_has_sellerid();
  sellerid_ = value;
}

// required int32 AuditorID = 14;
inline bool ZB_OrderInfo::has_auditorid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ZB_OrderInfo::set_has_auditorid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ZB_OrderInfo::clear_has_auditorid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ZB_OrderInfo::clear_auditorid() {
  auditorid_ = 0;
  clear_has_auditorid();
}
inline ::google::protobuf::int32 ZB_OrderInfo::auditorid() const {
  return auditorid_;
}
inline void ZB_OrderInfo::set_auditorid(::google::protobuf::int32 value) {
  set_has_auditorid();
  auditorid_ = value;
}

// required double Square = 15;
inline bool ZB_OrderInfo::has_square() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ZB_OrderInfo::set_has_square() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ZB_OrderInfo::clear_has_square() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ZB_OrderInfo::clear_square() {
  square_ = 0;
  clear_has_square();
}
inline double ZB_OrderInfo::square() const {
  return square_;
}
inline void ZB_OrderInfo::set_square(double value) {
  set_has_square();
  square_ = value;
}

// required int64 CreateTime = 16;
inline bool ZB_OrderInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ZB_OrderInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ZB_OrderInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ZB_OrderInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 ZB_OrderInfo::createtime() const {
  return createtime_;
}
inline void ZB_OrderInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required int64 PreSurveyTime = 17;
inline bool ZB_OrderInfo::has_presurveytime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ZB_OrderInfo::set_has_presurveytime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ZB_OrderInfo::clear_has_presurveytime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ZB_OrderInfo::clear_presurveytime() {
  presurveytime_ = GOOGLE_LONGLONG(0);
  clear_has_presurveytime();
}
inline ::google::protobuf::int64 ZB_OrderInfo::presurveytime() const {
  return presurveytime_;
}
inline void ZB_OrderInfo::set_presurveytime(::google::protobuf::int64 value) {
  set_has_presurveytime();
  presurveytime_ = value;
}

// required int64 ReSurveyTime = 18;
inline bool ZB_OrderInfo::has_resurveytime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ZB_OrderInfo::set_has_resurveytime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ZB_OrderInfo::clear_has_resurveytime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ZB_OrderInfo::clear_resurveytime() {
  resurveytime_ = GOOGLE_LONGLONG(0);
  clear_has_resurveytime();
}
inline ::google::protobuf::int64 ZB_OrderInfo::resurveytime() const {
  return resurveytime_;
}
inline void ZB_OrderInfo::set_resurveytime(::google::protobuf::int64 value) {
  set_has_resurveytime();
  resurveytime_ = value;
}

// required int64 OrderTime = 19;
inline bool ZB_OrderInfo::has_ordertime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ZB_OrderInfo::set_has_ordertime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ZB_OrderInfo::clear_has_ordertime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ZB_OrderInfo::clear_ordertime() {
  ordertime_ = GOOGLE_LONGLONG(0);
  clear_has_ordertime();
}
inline ::google::protobuf::int64 ZB_OrderInfo::ordertime() const {
  return ordertime_;
}
inline void ZB_OrderInfo::set_ordertime(::google::protobuf::int64 value) {
  set_has_ordertime();
  ordertime_ = value;
}

// required int64 DeliveryTime = 20;
inline bool ZB_OrderInfo::has_deliverytime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ZB_OrderInfo::set_has_deliverytime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ZB_OrderInfo::clear_has_deliverytime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ZB_OrderInfo::clear_deliverytime() {
  deliverytime_ = GOOGLE_LONGLONG(0);
  clear_has_deliverytime();
}
inline ::google::protobuf::int64 ZB_OrderInfo::deliverytime() const {
  return deliverytime_;
}
inline void ZB_OrderInfo::set_deliverytime(::google::protobuf::int64 value) {
  set_has_deliverytime();
  deliverytime_ = value;
}

// required int64 InstallTime = 21;
inline bool ZB_OrderInfo::has_installtime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ZB_OrderInfo::set_has_installtime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ZB_OrderInfo::clear_has_installtime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ZB_OrderInfo::clear_installtime() {
  installtime_ = GOOGLE_LONGLONG(0);
  clear_has_installtime();
}
inline ::google::protobuf::int64 ZB_OrderInfo::installtime() const {
  return installtime_;
}
inline void ZB_OrderInfo::set_installtime(::google::protobuf::int64 value) {
  set_has_installtime();
  installtime_ = value;
}

// required string ShopName = 22;
inline bool ZB_OrderInfo::has_shopname() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ZB_OrderInfo::set_has_shopname() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ZB_OrderInfo::clear_has_shopname() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ZB_OrderInfo::clear_shopname() {
  if (shopname_ != &::google::protobuf::internal::kEmptyString) {
    shopname_->clear();
  }
  clear_has_shopname();
}
inline const ::std::string& ZB_OrderInfo::shopname() const {
  return *shopname_;
}
inline void ZB_OrderInfo::set_shopname(const ::std::string& value) {
  set_has_shopname();
  if (shopname_ == &::google::protobuf::internal::kEmptyString) {
    shopname_ = new ::std::string;
  }
  shopname_->assign(value);
}
inline void ZB_OrderInfo::set_shopname(const char* value) {
  set_has_shopname();
  if (shopname_ == &::google::protobuf::internal::kEmptyString) {
    shopname_ = new ::std::string;
  }
  shopname_->assign(value);
}
inline void ZB_OrderInfo::set_shopname(const char* value, size_t size) {
  set_has_shopname();
  if (shopname_ == &::google::protobuf::internal::kEmptyString) {
    shopname_ = new ::std::string;
  }
  shopname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_shopname() {
  set_has_shopname();
  if (shopname_ == &::google::protobuf::internal::kEmptyString) {
    shopname_ = new ::std::string;
  }
  return shopname_;
}
inline ::std::string* ZB_OrderInfo::release_shopname() {
  clear_has_shopname();
  if (shopname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shopname_;
    shopname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_shopname(::std::string* shopname) {
  if (shopname_ != &::google::protobuf::internal::kEmptyString) {
    delete shopname_;
  }
  if (shopname) {
    set_has_shopname();
    shopname_ = shopname;
  } else {
    clear_has_shopname();
    shopname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ShopCode = 23;
inline bool ZB_OrderInfo::has_shopcode() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ZB_OrderInfo::set_has_shopcode() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ZB_OrderInfo::clear_has_shopcode() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ZB_OrderInfo::clear_shopcode() {
  if (shopcode_ != &::google::protobuf::internal::kEmptyString) {
    shopcode_->clear();
  }
  clear_has_shopcode();
}
inline const ::std::string& ZB_OrderInfo::shopcode() const {
  return *shopcode_;
}
inline void ZB_OrderInfo::set_shopcode(const ::std::string& value) {
  set_has_shopcode();
  if (shopcode_ == &::google::protobuf::internal::kEmptyString) {
    shopcode_ = new ::std::string;
  }
  shopcode_->assign(value);
}
inline void ZB_OrderInfo::set_shopcode(const char* value) {
  set_has_shopcode();
  if (shopcode_ == &::google::protobuf::internal::kEmptyString) {
    shopcode_ = new ::std::string;
  }
  shopcode_->assign(value);
}
inline void ZB_OrderInfo::set_shopcode(const char* value, size_t size) {
  set_has_shopcode();
  if (shopcode_ == &::google::protobuf::internal::kEmptyString) {
    shopcode_ = new ::std::string;
  }
  shopcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_shopcode() {
  set_has_shopcode();
  if (shopcode_ == &::google::protobuf::internal::kEmptyString) {
    shopcode_ = new ::std::string;
  }
  return shopcode_;
}
inline ::std::string* ZB_OrderInfo::release_shopcode() {
  clear_has_shopcode();
  if (shopcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shopcode_;
    shopcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_shopcode(::std::string* shopcode) {
  if (shopcode_ != &::google::protobuf::internal::kEmptyString) {
    delete shopcode_;
  }
  if (shopcode) {
    set_has_shopcode();
    shopcode_ = shopcode;
  } else {
    clear_has_shopcode();
    shopcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OrderCode = 24;
inline bool ZB_OrderInfo::has_ordercode() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ZB_OrderInfo::set_has_ordercode() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ZB_OrderInfo::clear_has_ordercode() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ZB_OrderInfo::clear_ordercode() {
  if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
    ordercode_->clear();
  }
  clear_has_ordercode();
}
inline const ::std::string& ZB_OrderInfo::ordercode() const {
  return *ordercode_;
}
inline void ZB_OrderInfo::set_ordercode(const ::std::string& value) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(value);
}
inline void ZB_OrderInfo::set_ordercode(const char* value) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(value);
}
inline void ZB_OrderInfo::set_ordercode(const char* value, size_t size) {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  ordercode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_ordercode() {
  set_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    ordercode_ = new ::std::string;
  }
  return ordercode_;
}
inline ::std::string* ZB_OrderInfo::release_ordercode() {
  clear_has_ordercode();
  if (ordercode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ordercode_;
    ordercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_ordercode(::std::string* ordercode) {
  if (ordercode_ != &::google::protobuf::internal::kEmptyString) {
    delete ordercode_;
  }
  if (ordercode) {
    set_has_ordercode();
    ordercode_ = ordercode;
  } else {
    clear_has_ordercode();
    ordercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DesignerName = 25;
inline bool ZB_OrderInfo::has_designername() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ZB_OrderInfo::set_has_designername() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ZB_OrderInfo::clear_has_designername() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ZB_OrderInfo::clear_designername() {
  if (designername_ != &::google::protobuf::internal::kEmptyString) {
    designername_->clear();
  }
  clear_has_designername();
}
inline const ::std::string& ZB_OrderInfo::designername() const {
  return *designername_;
}
inline void ZB_OrderInfo::set_designername(const ::std::string& value) {
  set_has_designername();
  if (designername_ == &::google::protobuf::internal::kEmptyString) {
    designername_ = new ::std::string;
  }
  designername_->assign(value);
}
inline void ZB_OrderInfo::set_designername(const char* value) {
  set_has_designername();
  if (designername_ == &::google::protobuf::internal::kEmptyString) {
    designername_ = new ::std::string;
  }
  designername_->assign(value);
}
inline void ZB_OrderInfo::set_designername(const char* value, size_t size) {
  set_has_designername();
  if (designername_ == &::google::protobuf::internal::kEmptyString) {
    designername_ = new ::std::string;
  }
  designername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_designername() {
  set_has_designername();
  if (designername_ == &::google::protobuf::internal::kEmptyString) {
    designername_ = new ::std::string;
  }
  return designername_;
}
inline ::std::string* ZB_OrderInfo::release_designername() {
  clear_has_designername();
  if (designername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = designername_;
    designername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_designername(::std::string* designername) {
  if (designername_ != &::google::protobuf::internal::kEmptyString) {
    delete designername_;
  }
  if (designername) {
    set_has_designername();
    designername_ = designername;
  } else {
    clear_has_designername();
    designername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DesignerUserCode = 26;
inline bool ZB_OrderInfo::has_designerusercode() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ZB_OrderInfo::set_has_designerusercode() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ZB_OrderInfo::clear_has_designerusercode() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ZB_OrderInfo::clear_designerusercode() {
  if (designerusercode_ != &::google::protobuf::internal::kEmptyString) {
    designerusercode_->clear();
  }
  clear_has_designerusercode();
}
inline const ::std::string& ZB_OrderInfo::designerusercode() const {
  return *designerusercode_;
}
inline void ZB_OrderInfo::set_designerusercode(const ::std::string& value) {
  set_has_designerusercode();
  if (designerusercode_ == &::google::protobuf::internal::kEmptyString) {
    designerusercode_ = new ::std::string;
  }
  designerusercode_->assign(value);
}
inline void ZB_OrderInfo::set_designerusercode(const char* value) {
  set_has_designerusercode();
  if (designerusercode_ == &::google::protobuf::internal::kEmptyString) {
    designerusercode_ = new ::std::string;
  }
  designerusercode_->assign(value);
}
inline void ZB_OrderInfo::set_designerusercode(const char* value, size_t size) {
  set_has_designerusercode();
  if (designerusercode_ == &::google::protobuf::internal::kEmptyString) {
    designerusercode_ = new ::std::string;
  }
  designerusercode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_designerusercode() {
  set_has_designerusercode();
  if (designerusercode_ == &::google::protobuf::internal::kEmptyString) {
    designerusercode_ = new ::std::string;
  }
  return designerusercode_;
}
inline ::std::string* ZB_OrderInfo::release_designerusercode() {
  clear_has_designerusercode();
  if (designerusercode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = designerusercode_;
    designerusercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_designerusercode(::std::string* designerusercode) {
  if (designerusercode_ != &::google::protobuf::internal::kEmptyString) {
    delete designerusercode_;
  }
  if (designerusercode) {
    set_has_designerusercode();
    designerusercode_ = designerusercode;
  } else {
    clear_has_designerusercode();
    designerusercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string PreSurveyorName = 27;
inline bool ZB_OrderInfo::has_presurveyorname() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ZB_OrderInfo::set_has_presurveyorname() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ZB_OrderInfo::clear_has_presurveyorname() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ZB_OrderInfo::clear_presurveyorname() {
  if (presurveyorname_ != &::google::protobuf::internal::kEmptyString) {
    presurveyorname_->clear();
  }
  clear_has_presurveyorname();
}
inline const ::std::string& ZB_OrderInfo::presurveyorname() const {
  return *presurveyorname_;
}
inline void ZB_OrderInfo::set_presurveyorname(const ::std::string& value) {
  set_has_presurveyorname();
  if (presurveyorname_ == &::google::protobuf::internal::kEmptyString) {
    presurveyorname_ = new ::std::string;
  }
  presurveyorname_->assign(value);
}
inline void ZB_OrderInfo::set_presurveyorname(const char* value) {
  set_has_presurveyorname();
  if (presurveyorname_ == &::google::protobuf::internal::kEmptyString) {
    presurveyorname_ = new ::std::string;
  }
  presurveyorname_->assign(value);
}
inline void ZB_OrderInfo::set_presurveyorname(const char* value, size_t size) {
  set_has_presurveyorname();
  if (presurveyorname_ == &::google::protobuf::internal::kEmptyString) {
    presurveyorname_ = new ::std::string;
  }
  presurveyorname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_presurveyorname() {
  set_has_presurveyorname();
  if (presurveyorname_ == &::google::protobuf::internal::kEmptyString) {
    presurveyorname_ = new ::std::string;
  }
  return presurveyorname_;
}
inline ::std::string* ZB_OrderInfo::release_presurveyorname() {
  clear_has_presurveyorname();
  if (presurveyorname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = presurveyorname_;
    presurveyorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_presurveyorname(::std::string* presurveyorname) {
  if (presurveyorname_ != &::google::protobuf::internal::kEmptyString) {
    delete presurveyorname_;
  }
  if (presurveyorname) {
    set_has_presurveyorname();
    presurveyorname_ = presurveyorname;
  } else {
    clear_has_presurveyorname();
    presurveyorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string PreSurveyorCode = 28;
inline bool ZB_OrderInfo::has_presurveyorcode() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ZB_OrderInfo::set_has_presurveyorcode() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ZB_OrderInfo::clear_has_presurveyorcode() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ZB_OrderInfo::clear_presurveyorcode() {
  if (presurveyorcode_ != &::google::protobuf::internal::kEmptyString) {
    presurveyorcode_->clear();
  }
  clear_has_presurveyorcode();
}
inline const ::std::string& ZB_OrderInfo::presurveyorcode() const {
  return *presurveyorcode_;
}
inline void ZB_OrderInfo::set_presurveyorcode(const ::std::string& value) {
  set_has_presurveyorcode();
  if (presurveyorcode_ == &::google::protobuf::internal::kEmptyString) {
    presurveyorcode_ = new ::std::string;
  }
  presurveyorcode_->assign(value);
}
inline void ZB_OrderInfo::set_presurveyorcode(const char* value) {
  set_has_presurveyorcode();
  if (presurveyorcode_ == &::google::protobuf::internal::kEmptyString) {
    presurveyorcode_ = new ::std::string;
  }
  presurveyorcode_->assign(value);
}
inline void ZB_OrderInfo::set_presurveyorcode(const char* value, size_t size) {
  set_has_presurveyorcode();
  if (presurveyorcode_ == &::google::protobuf::internal::kEmptyString) {
    presurveyorcode_ = new ::std::string;
  }
  presurveyorcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_presurveyorcode() {
  set_has_presurveyorcode();
  if (presurveyorcode_ == &::google::protobuf::internal::kEmptyString) {
    presurveyorcode_ = new ::std::string;
  }
  return presurveyorcode_;
}
inline ::std::string* ZB_OrderInfo::release_presurveyorcode() {
  clear_has_presurveyorcode();
  if (presurveyorcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = presurveyorcode_;
    presurveyorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_presurveyorcode(::std::string* presurveyorcode) {
  if (presurveyorcode_ != &::google::protobuf::internal::kEmptyString) {
    delete presurveyorcode_;
  }
  if (presurveyorcode) {
    set_has_presurveyorcode();
    presurveyorcode_ = presurveyorcode;
  } else {
    clear_has_presurveyorcode();
    presurveyorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ReSurveyorName = 29;
inline bool ZB_OrderInfo::has_resurveyorname() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ZB_OrderInfo::set_has_resurveyorname() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ZB_OrderInfo::clear_has_resurveyorname() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ZB_OrderInfo::clear_resurveyorname() {
  if (resurveyorname_ != &::google::protobuf::internal::kEmptyString) {
    resurveyorname_->clear();
  }
  clear_has_resurveyorname();
}
inline const ::std::string& ZB_OrderInfo::resurveyorname() const {
  return *resurveyorname_;
}
inline void ZB_OrderInfo::set_resurveyorname(const ::std::string& value) {
  set_has_resurveyorname();
  if (resurveyorname_ == &::google::protobuf::internal::kEmptyString) {
    resurveyorname_ = new ::std::string;
  }
  resurveyorname_->assign(value);
}
inline void ZB_OrderInfo::set_resurveyorname(const char* value) {
  set_has_resurveyorname();
  if (resurveyorname_ == &::google::protobuf::internal::kEmptyString) {
    resurveyorname_ = new ::std::string;
  }
  resurveyorname_->assign(value);
}
inline void ZB_OrderInfo::set_resurveyorname(const char* value, size_t size) {
  set_has_resurveyorname();
  if (resurveyorname_ == &::google::protobuf::internal::kEmptyString) {
    resurveyorname_ = new ::std::string;
  }
  resurveyorname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_resurveyorname() {
  set_has_resurveyorname();
  if (resurveyorname_ == &::google::protobuf::internal::kEmptyString) {
    resurveyorname_ = new ::std::string;
  }
  return resurveyorname_;
}
inline ::std::string* ZB_OrderInfo::release_resurveyorname() {
  clear_has_resurveyorname();
  if (resurveyorname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resurveyorname_;
    resurveyorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_resurveyorname(::std::string* resurveyorname) {
  if (resurveyorname_ != &::google::protobuf::internal::kEmptyString) {
    delete resurveyorname_;
  }
  if (resurveyorname) {
    set_has_resurveyorname();
    resurveyorname_ = resurveyorname;
  } else {
    clear_has_resurveyorname();
    resurveyorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ReSurveyorCode = 30;
inline bool ZB_OrderInfo::has_resurveyorcode() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ZB_OrderInfo::set_has_resurveyorcode() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ZB_OrderInfo::clear_has_resurveyorcode() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ZB_OrderInfo::clear_resurveyorcode() {
  if (resurveyorcode_ != &::google::protobuf::internal::kEmptyString) {
    resurveyorcode_->clear();
  }
  clear_has_resurveyorcode();
}
inline const ::std::string& ZB_OrderInfo::resurveyorcode() const {
  return *resurveyorcode_;
}
inline void ZB_OrderInfo::set_resurveyorcode(const ::std::string& value) {
  set_has_resurveyorcode();
  if (resurveyorcode_ == &::google::protobuf::internal::kEmptyString) {
    resurveyorcode_ = new ::std::string;
  }
  resurveyorcode_->assign(value);
}
inline void ZB_OrderInfo::set_resurveyorcode(const char* value) {
  set_has_resurveyorcode();
  if (resurveyorcode_ == &::google::protobuf::internal::kEmptyString) {
    resurveyorcode_ = new ::std::string;
  }
  resurveyorcode_->assign(value);
}
inline void ZB_OrderInfo::set_resurveyorcode(const char* value, size_t size) {
  set_has_resurveyorcode();
  if (resurveyorcode_ == &::google::protobuf::internal::kEmptyString) {
    resurveyorcode_ = new ::std::string;
  }
  resurveyorcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_resurveyorcode() {
  set_has_resurveyorcode();
  if (resurveyorcode_ == &::google::protobuf::internal::kEmptyString) {
    resurveyorcode_ = new ::std::string;
  }
  return resurveyorcode_;
}
inline ::std::string* ZB_OrderInfo::release_resurveyorcode() {
  clear_has_resurveyorcode();
  if (resurveyorcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resurveyorcode_;
    resurveyorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_resurveyorcode(::std::string* resurveyorcode) {
  if (resurveyorcode_ != &::google::protobuf::internal::kEmptyString) {
    delete resurveyorcode_;
  }
  if (resurveyorcode) {
    set_has_resurveyorcode();
    resurveyorcode_ = resurveyorcode;
  } else {
    clear_has_resurveyorcode();
    resurveyorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string SellerName = 31;
inline bool ZB_OrderInfo::has_sellername() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ZB_OrderInfo::set_has_sellername() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ZB_OrderInfo::clear_has_sellername() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ZB_OrderInfo::clear_sellername() {
  if (sellername_ != &::google::protobuf::internal::kEmptyString) {
    sellername_->clear();
  }
  clear_has_sellername();
}
inline const ::std::string& ZB_OrderInfo::sellername() const {
  return *sellername_;
}
inline void ZB_OrderInfo::set_sellername(const ::std::string& value) {
  set_has_sellername();
  if (sellername_ == &::google::protobuf::internal::kEmptyString) {
    sellername_ = new ::std::string;
  }
  sellername_->assign(value);
}
inline void ZB_OrderInfo::set_sellername(const char* value) {
  set_has_sellername();
  if (sellername_ == &::google::protobuf::internal::kEmptyString) {
    sellername_ = new ::std::string;
  }
  sellername_->assign(value);
}
inline void ZB_OrderInfo::set_sellername(const char* value, size_t size) {
  set_has_sellername();
  if (sellername_ == &::google::protobuf::internal::kEmptyString) {
    sellername_ = new ::std::string;
  }
  sellername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_sellername() {
  set_has_sellername();
  if (sellername_ == &::google::protobuf::internal::kEmptyString) {
    sellername_ = new ::std::string;
  }
  return sellername_;
}
inline ::std::string* ZB_OrderInfo::release_sellername() {
  clear_has_sellername();
  if (sellername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sellername_;
    sellername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_sellername(::std::string* sellername) {
  if (sellername_ != &::google::protobuf::internal::kEmptyString) {
    delete sellername_;
  }
  if (sellername) {
    set_has_sellername();
    sellername_ = sellername;
  } else {
    clear_has_sellername();
    sellername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string SellerUserCode = 32;
inline bool ZB_OrderInfo::has_sellerusercode() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ZB_OrderInfo::set_has_sellerusercode() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ZB_OrderInfo::clear_has_sellerusercode() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ZB_OrderInfo::clear_sellerusercode() {
  if (sellerusercode_ != &::google::protobuf::internal::kEmptyString) {
    sellerusercode_->clear();
  }
  clear_has_sellerusercode();
}
inline const ::std::string& ZB_OrderInfo::sellerusercode() const {
  return *sellerusercode_;
}
inline void ZB_OrderInfo::set_sellerusercode(const ::std::string& value) {
  set_has_sellerusercode();
  if (sellerusercode_ == &::google::protobuf::internal::kEmptyString) {
    sellerusercode_ = new ::std::string;
  }
  sellerusercode_->assign(value);
}
inline void ZB_OrderInfo::set_sellerusercode(const char* value) {
  set_has_sellerusercode();
  if (sellerusercode_ == &::google::protobuf::internal::kEmptyString) {
    sellerusercode_ = new ::std::string;
  }
  sellerusercode_->assign(value);
}
inline void ZB_OrderInfo::set_sellerusercode(const char* value, size_t size) {
  set_has_sellerusercode();
  if (sellerusercode_ == &::google::protobuf::internal::kEmptyString) {
    sellerusercode_ = new ::std::string;
  }
  sellerusercode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_sellerusercode() {
  set_has_sellerusercode();
  if (sellerusercode_ == &::google::protobuf::internal::kEmptyString) {
    sellerusercode_ = new ::std::string;
  }
  return sellerusercode_;
}
inline ::std::string* ZB_OrderInfo::release_sellerusercode() {
  clear_has_sellerusercode();
  if (sellerusercode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sellerusercode_;
    sellerusercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_sellerusercode(::std::string* sellerusercode) {
  if (sellerusercode_ != &::google::protobuf::internal::kEmptyString) {
    delete sellerusercode_;
  }
  if (sellerusercode) {
    set_has_sellerusercode();
    sellerusercode_ = sellerusercode;
  } else {
    clear_has_sellerusercode();
    sellerusercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string AuditorName = 33;
inline bool ZB_OrderInfo::has_auditorname() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ZB_OrderInfo::set_has_auditorname() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ZB_OrderInfo::clear_has_auditorname() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ZB_OrderInfo::clear_auditorname() {
  if (auditorname_ != &::google::protobuf::internal::kEmptyString) {
    auditorname_->clear();
  }
  clear_has_auditorname();
}
inline const ::std::string& ZB_OrderInfo::auditorname() const {
  return *auditorname_;
}
inline void ZB_OrderInfo::set_auditorname(const ::std::string& value) {
  set_has_auditorname();
  if (auditorname_ == &::google::protobuf::internal::kEmptyString) {
    auditorname_ = new ::std::string;
  }
  auditorname_->assign(value);
}
inline void ZB_OrderInfo::set_auditorname(const char* value) {
  set_has_auditorname();
  if (auditorname_ == &::google::protobuf::internal::kEmptyString) {
    auditorname_ = new ::std::string;
  }
  auditorname_->assign(value);
}
inline void ZB_OrderInfo::set_auditorname(const char* value, size_t size) {
  set_has_auditorname();
  if (auditorname_ == &::google::protobuf::internal::kEmptyString) {
    auditorname_ = new ::std::string;
  }
  auditorname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_auditorname() {
  set_has_auditorname();
  if (auditorname_ == &::google::protobuf::internal::kEmptyString) {
    auditorname_ = new ::std::string;
  }
  return auditorname_;
}
inline ::std::string* ZB_OrderInfo::release_auditorname() {
  clear_has_auditorname();
  if (auditorname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auditorname_;
    auditorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_auditorname(::std::string* auditorname) {
  if (auditorname_ != &::google::protobuf::internal::kEmptyString) {
    delete auditorname_;
  }
  if (auditorname) {
    set_has_auditorname();
    auditorname_ = auditorname;
  } else {
    clear_has_auditorname();
    auditorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string AuditorUserCode = 34;
inline bool ZB_OrderInfo::has_auditorusercode() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ZB_OrderInfo::set_has_auditorusercode() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ZB_OrderInfo::clear_has_auditorusercode() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ZB_OrderInfo::clear_auditorusercode() {
  if (auditorusercode_ != &::google::protobuf::internal::kEmptyString) {
    auditorusercode_->clear();
  }
  clear_has_auditorusercode();
}
inline const ::std::string& ZB_OrderInfo::auditorusercode() const {
  return *auditorusercode_;
}
inline void ZB_OrderInfo::set_auditorusercode(const ::std::string& value) {
  set_has_auditorusercode();
  if (auditorusercode_ == &::google::protobuf::internal::kEmptyString) {
    auditorusercode_ = new ::std::string;
  }
  auditorusercode_->assign(value);
}
inline void ZB_OrderInfo::set_auditorusercode(const char* value) {
  set_has_auditorusercode();
  if (auditorusercode_ == &::google::protobuf::internal::kEmptyString) {
    auditorusercode_ = new ::std::string;
  }
  auditorusercode_->assign(value);
}
inline void ZB_OrderInfo::set_auditorusercode(const char* value, size_t size) {
  set_has_auditorusercode();
  if (auditorusercode_ == &::google::protobuf::internal::kEmptyString) {
    auditorusercode_ = new ::std::string;
  }
  auditorusercode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_auditorusercode() {
  set_has_auditorusercode();
  if (auditorusercode_ == &::google::protobuf::internal::kEmptyString) {
    auditorusercode_ = new ::std::string;
  }
  return auditorusercode_;
}
inline ::std::string* ZB_OrderInfo::release_auditorusercode() {
  clear_has_auditorusercode();
  if (auditorusercode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auditorusercode_;
    auditorusercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_auditorusercode(::std::string* auditorusercode) {
  if (auditorusercode_ != &::google::protobuf::internal::kEmptyString) {
    delete auditorusercode_;
  }
  if (auditorusercode) {
    set_has_auditorusercode();
    auditorusercode_ = auditorusercode;
  } else {
    clear_has_auditorusercode();
    auditorusercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string GeoCode = 35;
inline bool ZB_OrderInfo::has_geocode() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ZB_OrderInfo::set_has_geocode() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ZB_OrderInfo::clear_has_geocode() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ZB_OrderInfo::clear_geocode() {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    geocode_->clear();
  }
  clear_has_geocode();
}
inline const ::std::string& ZB_OrderInfo::geocode() const {
  return *geocode_;
}
inline void ZB_OrderInfo::set_geocode(const ::std::string& value) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(value);
}
inline void ZB_OrderInfo::set_geocode(const char* value) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(value);
}
inline void ZB_OrderInfo::set_geocode(const char* value, size_t size) {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  geocode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_geocode() {
  set_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    geocode_ = new ::std::string;
  }
  return geocode_;
}
inline ::std::string* ZB_OrderInfo::release_geocode() {
  clear_has_geocode();
  if (geocode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = geocode_;
    geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_geocode(::std::string* geocode) {
  if (geocode_ != &::google::protobuf::internal::kEmptyString) {
    delete geocode_;
  }
  if (geocode) {
    set_has_geocode();
    geocode_ = geocode;
  } else {
    clear_has_geocode();
    geocode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string GeoName = 36;
inline bool ZB_OrderInfo::has_geoname() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ZB_OrderInfo::set_has_geoname() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ZB_OrderInfo::clear_has_geoname() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ZB_OrderInfo::clear_geoname() {
  if (geoname_ != &::google::protobuf::internal::kEmptyString) {
    geoname_->clear();
  }
  clear_has_geoname();
}
inline const ::std::string& ZB_OrderInfo::geoname() const {
  return *geoname_;
}
inline void ZB_OrderInfo::set_geoname(const ::std::string& value) {
  set_has_geoname();
  if (geoname_ == &::google::protobuf::internal::kEmptyString) {
    geoname_ = new ::std::string;
  }
  geoname_->assign(value);
}
inline void ZB_OrderInfo::set_geoname(const char* value) {
  set_has_geoname();
  if (geoname_ == &::google::protobuf::internal::kEmptyString) {
    geoname_ = new ::std::string;
  }
  geoname_->assign(value);
}
inline void ZB_OrderInfo::set_geoname(const char* value, size_t size) {
  set_has_geoname();
  if (geoname_ == &::google::protobuf::internal::kEmptyString) {
    geoname_ = new ::std::string;
  }
  geoname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_geoname() {
  set_has_geoname();
  if (geoname_ == &::google::protobuf::internal::kEmptyString) {
    geoname_ = new ::std::string;
  }
  return geoname_;
}
inline ::std::string* ZB_OrderInfo::release_geoname() {
  clear_has_geoname();
  if (geoname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = geoname_;
    geoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_geoname(::std::string* geoname) {
  if (geoname_ != &::google::protobuf::internal::kEmptyString) {
    delete geoname_;
  }
  if (geoname) {
    set_has_geoname();
    geoname_ = geoname;
  } else {
    clear_has_geoname();
    geoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OrderTitle = 37;
inline bool ZB_OrderInfo::has_ordertitle() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ZB_OrderInfo::set_has_ordertitle() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ZB_OrderInfo::clear_has_ordertitle() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ZB_OrderInfo::clear_ordertitle() {
  if (ordertitle_ != &::google::protobuf::internal::kEmptyString) {
    ordertitle_->clear();
  }
  clear_has_ordertitle();
}
inline const ::std::string& ZB_OrderInfo::ordertitle() const {
  return *ordertitle_;
}
inline void ZB_OrderInfo::set_ordertitle(const ::std::string& value) {
  set_has_ordertitle();
  if (ordertitle_ == &::google::protobuf::internal::kEmptyString) {
    ordertitle_ = new ::std::string;
  }
  ordertitle_->assign(value);
}
inline void ZB_OrderInfo::set_ordertitle(const char* value) {
  set_has_ordertitle();
  if (ordertitle_ == &::google::protobuf::internal::kEmptyString) {
    ordertitle_ = new ::std::string;
  }
  ordertitle_->assign(value);
}
inline void ZB_OrderInfo::set_ordertitle(const char* value, size_t size) {
  set_has_ordertitle();
  if (ordertitle_ == &::google::protobuf::internal::kEmptyString) {
    ordertitle_ = new ::std::string;
  }
  ordertitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_ordertitle() {
  set_has_ordertitle();
  if (ordertitle_ == &::google::protobuf::internal::kEmptyString) {
    ordertitle_ = new ::std::string;
  }
  return ordertitle_;
}
inline ::std::string* ZB_OrderInfo::release_ordertitle() {
  clear_has_ordertitle();
  if (ordertitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ordertitle_;
    ordertitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_ordertitle(::std::string* ordertitle) {
  if (ordertitle_ != &::google::protobuf::internal::kEmptyString) {
    delete ordertitle_;
  }
  if (ordertitle) {
    set_has_ordertitle();
    ordertitle_ = ordertitle;
  } else {
    clear_has_ordertitle();
    ordertitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CustomerName = 38;
inline bool ZB_OrderInfo::has_customername() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ZB_OrderInfo::set_has_customername() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ZB_OrderInfo::clear_has_customername() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ZB_OrderInfo::clear_customername() {
  if (customername_ != &::google::protobuf::internal::kEmptyString) {
    customername_->clear();
  }
  clear_has_customername();
}
inline const ::std::string& ZB_OrderInfo::customername() const {
  return *customername_;
}
inline void ZB_OrderInfo::set_customername(const ::std::string& value) {
  set_has_customername();
  if (customername_ == &::google::protobuf::internal::kEmptyString) {
    customername_ = new ::std::string;
  }
  customername_->assign(value);
}
inline void ZB_OrderInfo::set_customername(const char* value) {
  set_has_customername();
  if (customername_ == &::google::protobuf::internal::kEmptyString) {
    customername_ = new ::std::string;
  }
  customername_->assign(value);
}
inline void ZB_OrderInfo::set_customername(const char* value, size_t size) {
  set_has_customername();
  if (customername_ == &::google::protobuf::internal::kEmptyString) {
    customername_ = new ::std::string;
  }
  customername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_customername() {
  set_has_customername();
  if (customername_ == &::google::protobuf::internal::kEmptyString) {
    customername_ = new ::std::string;
  }
  return customername_;
}
inline ::std::string* ZB_OrderInfo::release_customername() {
  clear_has_customername();
  if (customername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customername_;
    customername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_customername(::std::string* customername) {
  if (customername_ != &::google::protobuf::internal::kEmptyString) {
    delete customername_;
  }
  if (customername) {
    set_has_customername();
    customername_ = customername;
  } else {
    clear_has_customername();
    customername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CustomerTel = 39;
inline bool ZB_OrderInfo::has_customertel() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ZB_OrderInfo::set_has_customertel() {
  _has_bits_[1] |= 0x00000040u;
}
inline void ZB_OrderInfo::clear_has_customertel() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void ZB_OrderInfo::clear_customertel() {
  if (customertel_ != &::google::protobuf::internal::kEmptyString) {
    customertel_->clear();
  }
  clear_has_customertel();
}
inline const ::std::string& ZB_OrderInfo::customertel() const {
  return *customertel_;
}
inline void ZB_OrderInfo::set_customertel(const ::std::string& value) {
  set_has_customertel();
  if (customertel_ == &::google::protobuf::internal::kEmptyString) {
    customertel_ = new ::std::string;
  }
  customertel_->assign(value);
}
inline void ZB_OrderInfo::set_customertel(const char* value) {
  set_has_customertel();
  if (customertel_ == &::google::protobuf::internal::kEmptyString) {
    customertel_ = new ::std::string;
  }
  customertel_->assign(value);
}
inline void ZB_OrderInfo::set_customertel(const char* value, size_t size) {
  set_has_customertel();
  if (customertel_ == &::google::protobuf::internal::kEmptyString) {
    customertel_ = new ::std::string;
  }
  customertel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_customertel() {
  set_has_customertel();
  if (customertel_ == &::google::protobuf::internal::kEmptyString) {
    customertel_ = new ::std::string;
  }
  return customertel_;
}
inline ::std::string* ZB_OrderInfo::release_customertel() {
  clear_has_customertel();
  if (customertel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customertel_;
    customertel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_customertel(::std::string* customertel) {
  if (customertel_ != &::google::protobuf::internal::kEmptyString) {
    delete customertel_;
  }
  if (customertel) {
    set_has_customertel();
    customertel_ = customertel;
  } else {
    clear_has_customertel();
    customertel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CustomerPostCode = 40;
inline bool ZB_OrderInfo::has_customerpostcode() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void ZB_OrderInfo::set_has_customerpostcode() {
  _has_bits_[1] |= 0x00000080u;
}
inline void ZB_OrderInfo::clear_has_customerpostcode() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void ZB_OrderInfo::clear_customerpostcode() {
  if (customerpostcode_ != &::google::protobuf::internal::kEmptyString) {
    customerpostcode_->clear();
  }
  clear_has_customerpostcode();
}
inline const ::std::string& ZB_OrderInfo::customerpostcode() const {
  return *customerpostcode_;
}
inline void ZB_OrderInfo::set_customerpostcode(const ::std::string& value) {
  set_has_customerpostcode();
  if (customerpostcode_ == &::google::protobuf::internal::kEmptyString) {
    customerpostcode_ = new ::std::string;
  }
  customerpostcode_->assign(value);
}
inline void ZB_OrderInfo::set_customerpostcode(const char* value) {
  set_has_customerpostcode();
  if (customerpostcode_ == &::google::protobuf::internal::kEmptyString) {
    customerpostcode_ = new ::std::string;
  }
  customerpostcode_->assign(value);
}
inline void ZB_OrderInfo::set_customerpostcode(const char* value, size_t size) {
  set_has_customerpostcode();
  if (customerpostcode_ == &::google::protobuf::internal::kEmptyString) {
    customerpostcode_ = new ::std::string;
  }
  customerpostcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_customerpostcode() {
  set_has_customerpostcode();
  if (customerpostcode_ == &::google::protobuf::internal::kEmptyString) {
    customerpostcode_ = new ::std::string;
  }
  return customerpostcode_;
}
inline ::std::string* ZB_OrderInfo::release_customerpostcode() {
  clear_has_customerpostcode();
  if (customerpostcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customerpostcode_;
    customerpostcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_customerpostcode(::std::string* customerpostcode) {
  if (customerpostcode_ != &::google::protobuf::internal::kEmptyString) {
    delete customerpostcode_;
  }
  if (customerpostcode) {
    set_has_customerpostcode();
    customerpostcode_ = customerpostcode;
  } else {
    clear_has_customerpostcode();
    customerpostcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CustomerQQ = 41;
inline bool ZB_OrderInfo::has_customerqq() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void ZB_OrderInfo::set_has_customerqq() {
  _has_bits_[1] |= 0x00000100u;
}
inline void ZB_OrderInfo::clear_has_customerqq() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void ZB_OrderInfo::clear_customerqq() {
  if (customerqq_ != &::google::protobuf::internal::kEmptyString) {
    customerqq_->clear();
  }
  clear_has_customerqq();
}
inline const ::std::string& ZB_OrderInfo::customerqq() const {
  return *customerqq_;
}
inline void ZB_OrderInfo::set_customerqq(const ::std::string& value) {
  set_has_customerqq();
  if (customerqq_ == &::google::protobuf::internal::kEmptyString) {
    customerqq_ = new ::std::string;
  }
  customerqq_->assign(value);
}
inline void ZB_OrderInfo::set_customerqq(const char* value) {
  set_has_customerqq();
  if (customerqq_ == &::google::protobuf::internal::kEmptyString) {
    customerqq_ = new ::std::string;
  }
  customerqq_->assign(value);
}
inline void ZB_OrderInfo::set_customerqq(const char* value, size_t size) {
  set_has_customerqq();
  if (customerqq_ == &::google::protobuf::internal::kEmptyString) {
    customerqq_ = new ::std::string;
  }
  customerqq_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_customerqq() {
  set_has_customerqq();
  if (customerqq_ == &::google::protobuf::internal::kEmptyString) {
    customerqq_ = new ::std::string;
  }
  return customerqq_;
}
inline ::std::string* ZB_OrderInfo::release_customerqq() {
  clear_has_customerqq();
  if (customerqq_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customerqq_;
    customerqq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_customerqq(::std::string* customerqq) {
  if (customerqq_ != &::google::protobuf::internal::kEmptyString) {
    delete customerqq_;
  }
  if (customerqq) {
    set_has_customerqq();
    customerqq_ = customerqq;
  } else {
    clear_has_customerqq();
    customerqq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CustomerEmail = 42;
inline bool ZB_OrderInfo::has_customeremail() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void ZB_OrderInfo::set_has_customeremail() {
  _has_bits_[1] |= 0x00000200u;
}
inline void ZB_OrderInfo::clear_has_customeremail() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void ZB_OrderInfo::clear_customeremail() {
  if (customeremail_ != &::google::protobuf::internal::kEmptyString) {
    customeremail_->clear();
  }
  clear_has_customeremail();
}
inline const ::std::string& ZB_OrderInfo::customeremail() const {
  return *customeremail_;
}
inline void ZB_OrderInfo::set_customeremail(const ::std::string& value) {
  set_has_customeremail();
  if (customeremail_ == &::google::protobuf::internal::kEmptyString) {
    customeremail_ = new ::std::string;
  }
  customeremail_->assign(value);
}
inline void ZB_OrderInfo::set_customeremail(const char* value) {
  set_has_customeremail();
  if (customeremail_ == &::google::protobuf::internal::kEmptyString) {
    customeremail_ = new ::std::string;
  }
  customeremail_->assign(value);
}
inline void ZB_OrderInfo::set_customeremail(const char* value, size_t size) {
  set_has_customeremail();
  if (customeremail_ == &::google::protobuf::internal::kEmptyString) {
    customeremail_ = new ::std::string;
  }
  customeremail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_customeremail() {
  set_has_customeremail();
  if (customeremail_ == &::google::protobuf::internal::kEmptyString) {
    customeremail_ = new ::std::string;
  }
  return customeremail_;
}
inline ::std::string* ZB_OrderInfo::release_customeremail() {
  clear_has_customeremail();
  if (customeremail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customeremail_;
    customeremail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_customeremail(::std::string* customeremail) {
  if (customeremail_ != &::google::protobuf::internal::kEmptyString) {
    delete customeremail_;
  }
  if (customeremail) {
    set_has_customeremail();
    customeremail_ = customeremail;
  } else {
    clear_has_customeremail();
    customeremail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string InstallAddress = 43;
inline bool ZB_OrderInfo::has_installaddress() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void ZB_OrderInfo::set_has_installaddress() {
  _has_bits_[1] |= 0x00000400u;
}
inline void ZB_OrderInfo::clear_has_installaddress() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void ZB_OrderInfo::clear_installaddress() {
  if (installaddress_ != &::google::protobuf::internal::kEmptyString) {
    installaddress_->clear();
  }
  clear_has_installaddress();
}
inline const ::std::string& ZB_OrderInfo::installaddress() const {
  return *installaddress_;
}
inline void ZB_OrderInfo::set_installaddress(const ::std::string& value) {
  set_has_installaddress();
  if (installaddress_ == &::google::protobuf::internal::kEmptyString) {
    installaddress_ = new ::std::string;
  }
  installaddress_->assign(value);
}
inline void ZB_OrderInfo::set_installaddress(const char* value) {
  set_has_installaddress();
  if (installaddress_ == &::google::protobuf::internal::kEmptyString) {
    installaddress_ = new ::std::string;
  }
  installaddress_->assign(value);
}
inline void ZB_OrderInfo::set_installaddress(const char* value, size_t size) {
  set_has_installaddress();
  if (installaddress_ == &::google::protobuf::internal::kEmptyString) {
    installaddress_ = new ::std::string;
  }
  installaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_installaddress() {
  set_has_installaddress();
  if (installaddress_ == &::google::protobuf::internal::kEmptyString) {
    installaddress_ = new ::std::string;
  }
  return installaddress_;
}
inline ::std::string* ZB_OrderInfo::release_installaddress() {
  clear_has_installaddress();
  if (installaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = installaddress_;
    installaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_installaddress(::std::string* installaddress) {
  if (installaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete installaddress_;
  }
  if (installaddress) {
    set_has_installaddress();
    installaddress_ = installaddress;
  } else {
    clear_has_installaddress();
    installaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string OrderRemarks = 44;
inline bool ZB_OrderInfo::has_orderremarks() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void ZB_OrderInfo::set_has_orderremarks() {
  _has_bits_[1] |= 0x00000800u;
}
inline void ZB_OrderInfo::clear_has_orderremarks() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void ZB_OrderInfo::clear_orderremarks() {
  if (orderremarks_ != &::google::protobuf::internal::kEmptyString) {
    orderremarks_->clear();
  }
  clear_has_orderremarks();
}
inline const ::std::string& ZB_OrderInfo::orderremarks() const {
  return *orderremarks_;
}
inline void ZB_OrderInfo::set_orderremarks(const ::std::string& value) {
  set_has_orderremarks();
  if (orderremarks_ == &::google::protobuf::internal::kEmptyString) {
    orderremarks_ = new ::std::string;
  }
  orderremarks_->assign(value);
}
inline void ZB_OrderInfo::set_orderremarks(const char* value) {
  set_has_orderremarks();
  if (orderremarks_ == &::google::protobuf::internal::kEmptyString) {
    orderremarks_ = new ::std::string;
  }
  orderremarks_->assign(value);
}
inline void ZB_OrderInfo::set_orderremarks(const char* value, size_t size) {
  set_has_orderremarks();
  if (orderremarks_ == &::google::protobuf::internal::kEmptyString) {
    orderremarks_ = new ::std::string;
  }
  orderremarks_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_orderremarks() {
  set_has_orderremarks();
  if (orderremarks_ == &::google::protobuf::internal::kEmptyString) {
    orderremarks_ = new ::std::string;
  }
  return orderremarks_;
}
inline ::std::string* ZB_OrderInfo::release_orderremarks() {
  clear_has_orderremarks();
  if (orderremarks_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderremarks_;
    orderremarks_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_orderremarks(::std::string* orderremarks) {
  if (orderremarks_ != &::google::protobuf::internal::kEmptyString) {
    delete orderremarks_;
  }
  if (orderremarks) {
    set_has_orderremarks();
    orderremarks_ = orderremarks;
  } else {
    clear_has_orderremarks();
    orderremarks_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string PlanName = 45;
inline bool ZB_OrderInfo::has_planname() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void ZB_OrderInfo::set_has_planname() {
  _has_bits_[1] |= 0x00001000u;
}
inline void ZB_OrderInfo::clear_has_planname() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void ZB_OrderInfo::clear_planname() {
  if (planname_ != &::google::protobuf::internal::kEmptyString) {
    planname_->clear();
  }
  clear_has_planname();
}
inline const ::std::string& ZB_OrderInfo::planname() const {
  return *planname_;
}
inline void ZB_OrderInfo::set_planname(const ::std::string& value) {
  set_has_planname();
  if (planname_ == &::google::protobuf::internal::kEmptyString) {
    planname_ = new ::std::string;
  }
  planname_->assign(value);
}
inline void ZB_OrderInfo::set_planname(const char* value) {
  set_has_planname();
  if (planname_ == &::google::protobuf::internal::kEmptyString) {
    planname_ = new ::std::string;
  }
  planname_->assign(value);
}
inline void ZB_OrderInfo::set_planname(const char* value, size_t size) {
  set_has_planname();
  if (planname_ == &::google::protobuf::internal::kEmptyString) {
    planname_ = new ::std::string;
  }
  planname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_planname() {
  set_has_planname();
  if (planname_ == &::google::protobuf::internal::kEmptyString) {
    planname_ = new ::std::string;
  }
  return planname_;
}
inline ::std::string* ZB_OrderInfo::release_planname() {
  clear_has_planname();
  if (planname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = planname_;
    planname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_planname(::std::string* planname) {
  if (planname_ != &::google::protobuf::internal::kEmptyString) {
    delete planname_;
  }
  if (planname) {
    set_has_planname();
    planname_ = planname;
  } else {
    clear_has_planname();
    planname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string PlanRemarks = 46;
inline bool ZB_OrderInfo::has_planremarks() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void ZB_OrderInfo::set_has_planremarks() {
  _has_bits_[1] |= 0x00002000u;
}
inline void ZB_OrderInfo::clear_has_planremarks() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void ZB_OrderInfo::clear_planremarks() {
  if (planremarks_ != &::google::protobuf::internal::kEmptyString) {
    planremarks_->clear();
  }
  clear_has_planremarks();
}
inline const ::std::string& ZB_OrderInfo::planremarks() const {
  return *planremarks_;
}
inline void ZB_OrderInfo::set_planremarks(const ::std::string& value) {
  set_has_planremarks();
  if (planremarks_ == &::google::protobuf::internal::kEmptyString) {
    planremarks_ = new ::std::string;
  }
  planremarks_->assign(value);
}
inline void ZB_OrderInfo::set_planremarks(const char* value) {
  set_has_planremarks();
  if (planremarks_ == &::google::protobuf::internal::kEmptyString) {
    planremarks_ = new ::std::string;
  }
  planremarks_->assign(value);
}
inline void ZB_OrderInfo::set_planremarks(const char* value, size_t size) {
  set_has_planremarks();
  if (planremarks_ == &::google::protobuf::internal::kEmptyString) {
    planremarks_ = new ::std::string;
  }
  planremarks_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_planremarks() {
  set_has_planremarks();
  if (planremarks_ == &::google::protobuf::internal::kEmptyString) {
    planremarks_ = new ::std::string;
  }
  return planremarks_;
}
inline ::std::string* ZB_OrderInfo::release_planremarks() {
  clear_has_planremarks();
  if (planremarks_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = planremarks_;
    planremarks_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_planremarks(::std::string* planremarks) {
  if (planremarks_ != &::google::protobuf::internal::kEmptyString) {
    delete planremarks_;
  }
  if (planremarks) {
    set_has_planremarks();
    planremarks_ = planremarks;
  } else {
    clear_has_planremarks();
    planremarks_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string AttachFilePath = 47;
inline bool ZB_OrderInfo::has_attachfilepath() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void ZB_OrderInfo::set_has_attachfilepath() {
  _has_bits_[1] |= 0x00004000u;
}
inline void ZB_OrderInfo::clear_has_attachfilepath() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void ZB_OrderInfo::clear_attachfilepath() {
  if (attachfilepath_ != &::google::protobuf::internal::kEmptyString) {
    attachfilepath_->clear();
  }
  clear_has_attachfilepath();
}
inline const ::std::string& ZB_OrderInfo::attachfilepath() const {
  return *attachfilepath_;
}
inline void ZB_OrderInfo::set_attachfilepath(const ::std::string& value) {
  set_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    attachfilepath_ = new ::std::string;
  }
  attachfilepath_->assign(value);
}
inline void ZB_OrderInfo::set_attachfilepath(const char* value) {
  set_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    attachfilepath_ = new ::std::string;
  }
  attachfilepath_->assign(value);
}
inline void ZB_OrderInfo::set_attachfilepath(const char* value, size_t size) {
  set_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    attachfilepath_ = new ::std::string;
  }
  attachfilepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZB_OrderInfo::mutable_attachfilepath() {
  set_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    attachfilepath_ = new ::std::string;
  }
  return attachfilepath_;
}
inline ::std::string* ZB_OrderInfo::release_attachfilepath() {
  clear_has_attachfilepath();
  if (attachfilepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attachfilepath_;
    attachfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZB_OrderInfo::set_allocated_attachfilepath(::std::string* attachfilepath) {
  if (attachfilepath_ != &::google::protobuf::internal::kEmptyString) {
    delete attachfilepath_;
  }
  if (attachfilepath) {
    set_has_attachfilepath();
    attachfilepath_ = attachfilepath;
  } else {
    clear_has_attachfilepath();
    attachfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ZB_Table

// repeated .transMsg.ZB_BoardGapInfo ZB_BoardGapInfo = 1;
inline int ZB_Table::zb_boardgapinfo_size() const {
  return zb_boardgapinfo_.size();
}
inline void ZB_Table::clear_zb_boardgapinfo() {
  zb_boardgapinfo_.Clear();
}
inline const ::transMsg::ZB_BoardGapInfo& ZB_Table::zb_boardgapinfo(int index) const {
  return zb_boardgapinfo_.Get(index);
}
inline ::transMsg::ZB_BoardGapInfo* ZB_Table::mutable_zb_boardgapinfo(int index) {
  return zb_boardgapinfo_.Mutable(index);
}
inline ::transMsg::ZB_BoardGapInfo* ZB_Table::add_zb_boardgapinfo() {
  return zb_boardgapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardGapInfo >&
ZB_Table::zb_boardgapinfo() const {
  return zb_boardgapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardGapInfo >*
ZB_Table::mutable_zb_boardgapinfo() {
  return &zb_boardgapinfo_;
}

// repeated .transMsg.ZB_BoardInfo ZB_BoardInfo = 2;
inline int ZB_Table::zb_boardinfo_size() const {
  return zb_boardinfo_.size();
}
inline void ZB_Table::clear_zb_boardinfo() {
  zb_boardinfo_.Clear();
}
inline const ::transMsg::ZB_BoardInfo& ZB_Table::zb_boardinfo(int index) const {
  return zb_boardinfo_.Get(index);
}
inline ::transMsg::ZB_BoardInfo* ZB_Table::mutable_zb_boardinfo(int index) {
  return zb_boardinfo_.Mutable(index);
}
inline ::transMsg::ZB_BoardInfo* ZB_Table::add_zb_boardinfo() {
  return zb_boardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardInfo >&
ZB_Table::zb_boardinfo() const {
  return zb_boardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardInfo >*
ZB_Table::mutable_zb_boardinfo() {
  return &zb_boardinfo_;
}

// repeated .transMsg.ZB_BoardSealInfo ZB_BoardSealInfo = 3;
inline int ZB_Table::zb_boardsealinfo_size() const {
  return zb_boardsealinfo_.size();
}
inline void ZB_Table::clear_zb_boardsealinfo() {
  zb_boardsealinfo_.Clear();
}
inline const ::transMsg::ZB_BoardSealInfo& ZB_Table::zb_boardsealinfo(int index) const {
  return zb_boardsealinfo_.Get(index);
}
inline ::transMsg::ZB_BoardSealInfo* ZB_Table::mutable_zb_boardsealinfo(int index) {
  return zb_boardsealinfo_.Mutable(index);
}
inline ::transMsg::ZB_BoardSealInfo* ZB_Table::add_zb_boardsealinfo() {
  return zb_boardsealinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardSealInfo >&
ZB_Table::zb_boardsealinfo() const {
  return zb_boardsealinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_BoardSealInfo >*
ZB_Table::mutable_zb_boardsealinfo() {
  return &zb_boardsealinfo_;
}

// repeated .transMsg.ZB_Objects ZB_Objects = 4;
inline int ZB_Table::zb_objects_size() const {
  return zb_objects_.size();
}
inline void ZB_Table::clear_zb_objects() {
  zb_objects_.Clear();
}
inline const ::transMsg::ZB_Objects& ZB_Table::zb_objects(int index) const {
  return zb_objects_.Get(index);
}
inline ::transMsg::ZB_Objects* ZB_Table::mutable_zb_objects(int index) {
  return zb_objects_.Mutable(index);
}
inline ::transMsg::ZB_Objects* ZB_Table::add_zb_objects() {
  return zb_objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_Objects >&
ZB_Table::zb_objects() const {
  return zb_objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_Objects >*
ZB_Table::mutable_zb_objects() {
  return &zb_objects_;
}

// repeated .transMsg.ZB_OrderInfo ZB_OrderInfo = 5;
inline int ZB_Table::zb_orderinfo_size() const {
  return zb_orderinfo_.size();
}
inline void ZB_Table::clear_zb_orderinfo() {
  zb_orderinfo_.Clear();
}
inline const ::transMsg::ZB_OrderInfo& ZB_Table::zb_orderinfo(int index) const {
  return zb_orderinfo_.Get(index);
}
inline ::transMsg::ZB_OrderInfo* ZB_Table::mutable_zb_orderinfo(int index) {
  return zb_orderinfo_.Mutable(index);
}
inline ::transMsg::ZB_OrderInfo* ZB_Table::add_zb_orderinfo() {
  return zb_orderinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_OrderInfo >&
ZB_Table::zb_orderinfo() const {
  return zb_orderinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::transMsg::ZB_OrderInfo >*
ZB_Table::mutable_zb_orderinfo() {
  return &zb_orderinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2dZB_2eproto__INCLUDED
