// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DownloadInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DownloadInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transMsg {

namespace {

const ::google::protobuf::Descriptor* QDownloadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QDownloadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADownloadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADownloadInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DownloadInfo_2eproto() {
  protobuf_AddDesc_DownloadInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DownloadInfo.proto");
  GOOGLE_CHECK(file != NULL);
  QDownloadInfo_descriptor_ = file->message_type(0);
  static const int QDownloadInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_areageomapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_areainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_deptinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_designerconfiginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_gtypeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_majorcateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_minorcateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_minorgtypemapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_geocodeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_unitinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_rolerightinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_printtemplateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, gl_appleseedinfo_),
  };
  QDownloadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QDownloadInfo_descriptor_,
      QDownloadInfo::default_instance_,
      QDownloadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDownloadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QDownloadInfo));
  ADownloadInfo_descriptor_ = file->message_type(1);
  static const int ADownloadInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADownloadInfo, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADownloadInfo, gl_table_),
  };
  ADownloadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ADownloadInfo_descriptor_,
      ADownloadInfo::default_instance_,
      ADownloadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADownloadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADownloadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ADownloadInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DownloadInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QDownloadInfo_descriptor_, &QDownloadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ADownloadInfo_descriptor_, &ADownloadInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DownloadInfo_2eproto() {
  delete QDownloadInfo::default_instance_;
  delete QDownloadInfo_reflection_;
  delete ADownloadInfo::default_instance_;
  delete ADownloadInfo_reflection_;
}

void protobuf_AddDesc_DownloadInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::transMsg::protobuf_AddDesc_EReturnStatus_2eproto();
  ::transMsg::protobuf_AddDesc_msg_2dGL_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022DownloadInfo.proto\022\010transMsg\032\023EReturnS"
    "tatus.proto\032\014msg-GL.proto\"\321\003\n\rQDownloadI"
    "nfo\022 \n\021GL_AreaGeoMapInfo\030\001 \001(\010:\005false\022\032\n"
    "\013GL_AreaInfo\030\002 \001(\010:\005false\022\032\n\013GL_DeptInfo"
    "\030\003 \001(\010:\005false\022$\n\025GL_DesignerConfigInfo\030\004"
    " \001(\010:\005false\022\033\n\014GL_GTypeInfo\030\005 \001(\010:\005false"
    "\022\037\n\020GL_MajorCateInfo\030\006 \001(\010:\005false\022\037\n\020GL_"
    "MinorCateInfo\030\007 \001(\010:\005false\022#\n\024GL_MinorGT"
    "ypeMapInfo\030\010 \001(\010:\005false\022\035\n\016GL_GeoCodeInf"
    "o\030\t \001(\010:\005false\022\032\n\013GL_UnitInfo\030\n \001(\010:\005fal"
    "se\022\032\n\013GL_UserInfo\030\013 \001(\010:\005false\022\037\n\020GL_Rol"
    "eRightInfo\030\014 \001(\010:\005false\022#\n\024GL_PrintTempl"
    "ateInfo\030\r \001(\010:\005false\022\037\n\020GL_AppleseedInfo"
    "\030\016 \001(\010:\005false\"]\n\rADownloadInfo\022&\n\005Stats\030"
    "\001 \002(\0162\027.transMsg.EReturnStatus\022$\n\010GL_Tab"
    "le\030e \001(\0132\022.transMsg.GL_Table", 628);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DownloadInfo.proto", &protobuf_RegisterTypes);
  QDownloadInfo::default_instance_ = new QDownloadInfo();
  ADownloadInfo::default_instance_ = new ADownloadInfo();
  QDownloadInfo::default_instance_->InitAsDefaultInstance();
  ADownloadInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DownloadInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DownloadInfo_2eproto {
  StaticDescriptorInitializer_DownloadInfo_2eproto() {
    protobuf_AddDesc_DownloadInfo_2eproto();
  }
} static_descriptor_initializer_DownloadInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int QDownloadInfo::kGLAreaGeoMapInfoFieldNumber;
const int QDownloadInfo::kGLAreaInfoFieldNumber;
const int QDownloadInfo::kGLDeptInfoFieldNumber;
const int QDownloadInfo::kGLDesignerConfigInfoFieldNumber;
const int QDownloadInfo::kGLGTypeInfoFieldNumber;
const int QDownloadInfo::kGLMajorCateInfoFieldNumber;
const int QDownloadInfo::kGLMinorCateInfoFieldNumber;
const int QDownloadInfo::kGLMinorGTypeMapInfoFieldNumber;
const int QDownloadInfo::kGLGeoCodeInfoFieldNumber;
const int QDownloadInfo::kGLUnitInfoFieldNumber;
const int QDownloadInfo::kGLUserInfoFieldNumber;
const int QDownloadInfo::kGLRoleRightInfoFieldNumber;
const int QDownloadInfo::kGLPrintTemplateInfoFieldNumber;
const int QDownloadInfo::kGLAppleseedInfoFieldNumber;
#endif  // !_MSC_VER

QDownloadInfo::QDownloadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QDownloadInfo::InitAsDefaultInstance() {
}

QDownloadInfo::QDownloadInfo(const QDownloadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QDownloadInfo::SharedCtor() {
  _cached_size_ = 0;
  gl_areageomapinfo_ = false;
  gl_areainfo_ = false;
  gl_deptinfo_ = false;
  gl_designerconfiginfo_ = false;
  gl_gtypeinfo_ = false;
  gl_majorcateinfo_ = false;
  gl_minorcateinfo_ = false;
  gl_minorgtypemapinfo_ = false;
  gl_geocodeinfo_ = false;
  gl_unitinfo_ = false;
  gl_userinfo_ = false;
  gl_rolerightinfo_ = false;
  gl_printtemplateinfo_ = false;
  gl_appleseedinfo_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QDownloadInfo::~QDownloadInfo() {
  SharedDtor();
}

void QDownloadInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QDownloadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QDownloadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QDownloadInfo_descriptor_;
}

const QDownloadInfo& QDownloadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadInfo_2eproto();
  return *default_instance_;
}

QDownloadInfo* QDownloadInfo::default_instance_ = NULL;

QDownloadInfo* QDownloadInfo::New() const {
  return new QDownloadInfo;
}

void QDownloadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gl_areageomapinfo_ = false;
    gl_areainfo_ = false;
    gl_deptinfo_ = false;
    gl_designerconfiginfo_ = false;
    gl_gtypeinfo_ = false;
    gl_majorcateinfo_ = false;
    gl_minorcateinfo_ = false;
    gl_minorgtypemapinfo_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gl_geocodeinfo_ = false;
    gl_unitinfo_ = false;
    gl_userinfo_ = false;
    gl_rolerightinfo_ = false;
    gl_printtemplateinfo_ = false;
    gl_appleseedinfo_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QDownloadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool GL_AreaGeoMapInfo = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_areageomapinfo_)));
          set_has_gl_areageomapinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GL_AreaInfo;
        break;
      }

      // optional bool GL_AreaInfo = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GL_AreaInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_areainfo_)));
          set_has_gl_areainfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GL_DeptInfo;
        break;
      }

      // optional bool GL_DeptInfo = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GL_DeptInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_deptinfo_)));
          set_has_gl_deptinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GL_DesignerConfigInfo;
        break;
      }

      // optional bool GL_DesignerConfigInfo = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GL_DesignerConfigInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_designerconfiginfo_)));
          set_has_gl_designerconfiginfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_GL_GTypeInfo;
        break;
      }

      // optional bool GL_GTypeInfo = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GL_GTypeInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_gtypeinfo_)));
          set_has_gl_gtypeinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_GL_MajorCateInfo;
        break;
      }

      // optional bool GL_MajorCateInfo = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GL_MajorCateInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_majorcateinfo_)));
          set_has_gl_majorcateinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_GL_MinorCateInfo;
        break;
      }

      // optional bool GL_MinorCateInfo = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GL_MinorCateInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_minorcateinfo_)));
          set_has_gl_minorcateinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GL_MinorGTypeMapInfo;
        break;
      }

      // optional bool GL_MinorGTypeMapInfo = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GL_MinorGTypeMapInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_minorgtypemapinfo_)));
          set_has_gl_minorgtypemapinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_GL_GeoCodeInfo;
        break;
      }

      // optional bool GL_GeoCodeInfo = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GL_GeoCodeInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_geocodeinfo_)));
          set_has_gl_geocodeinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_GL_UnitInfo;
        break;
      }

      // optional bool GL_UnitInfo = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GL_UnitInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_unitinfo_)));
          set_has_gl_unitinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_GL_UserInfo;
        break;
      }

      // optional bool GL_UserInfo = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GL_UserInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_userinfo_)));
          set_has_gl_userinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_GL_RoleRightInfo;
        break;
      }

      // optional bool GL_RoleRightInfo = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GL_RoleRightInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_rolerightinfo_)));
          set_has_gl_rolerightinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_GL_PrintTemplateInfo;
        break;
      }

      // optional bool GL_PrintTemplateInfo = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GL_PrintTemplateInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_printtemplateinfo_)));
          set_has_gl_printtemplateinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_GL_AppleseedInfo;
        break;
      }

      // optional bool GL_AppleseedInfo = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GL_AppleseedInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gl_appleseedinfo_)));
          set_has_gl_appleseedinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QDownloadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool GL_AreaGeoMapInfo = 1 [default = false];
  if (has_gl_areageomapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->gl_areageomapinfo(), output);
  }

  // optional bool GL_AreaInfo = 2 [default = false];
  if (has_gl_areainfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->gl_areainfo(), output);
  }

  // optional bool GL_DeptInfo = 3 [default = false];
  if (has_gl_deptinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->gl_deptinfo(), output);
  }

  // optional bool GL_DesignerConfigInfo = 4 [default = false];
  if (has_gl_designerconfiginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->gl_designerconfiginfo(), output);
  }

  // optional bool GL_GTypeInfo = 5 [default = false];
  if (has_gl_gtypeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->gl_gtypeinfo(), output);
  }

  // optional bool GL_MajorCateInfo = 6 [default = false];
  if (has_gl_majorcateinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->gl_majorcateinfo(), output);
  }

  // optional bool GL_MinorCateInfo = 7 [default = false];
  if (has_gl_minorcateinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->gl_minorcateinfo(), output);
  }

  // optional bool GL_MinorGTypeMapInfo = 8 [default = false];
  if (has_gl_minorgtypemapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->gl_minorgtypemapinfo(), output);
  }

  // optional bool GL_GeoCodeInfo = 9 [default = false];
  if (has_gl_geocodeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->gl_geocodeinfo(), output);
  }

  // optional bool GL_UnitInfo = 10 [default = false];
  if (has_gl_unitinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->gl_unitinfo(), output);
  }

  // optional bool GL_UserInfo = 11 [default = false];
  if (has_gl_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->gl_userinfo(), output);
  }

  // optional bool GL_RoleRightInfo = 12 [default = false];
  if (has_gl_rolerightinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->gl_rolerightinfo(), output);
  }

  // optional bool GL_PrintTemplateInfo = 13 [default = false];
  if (has_gl_printtemplateinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->gl_printtemplateinfo(), output);
  }

  // optional bool GL_AppleseedInfo = 14 [default = false];
  if (has_gl_appleseedinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->gl_appleseedinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QDownloadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool GL_AreaGeoMapInfo = 1 [default = false];
  if (has_gl_areageomapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->gl_areageomapinfo(), target);
  }

  // optional bool GL_AreaInfo = 2 [default = false];
  if (has_gl_areainfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->gl_areainfo(), target);
  }

  // optional bool GL_DeptInfo = 3 [default = false];
  if (has_gl_deptinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->gl_deptinfo(), target);
  }

  // optional bool GL_DesignerConfigInfo = 4 [default = false];
  if (has_gl_designerconfiginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->gl_designerconfiginfo(), target);
  }

  // optional bool GL_GTypeInfo = 5 [default = false];
  if (has_gl_gtypeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->gl_gtypeinfo(), target);
  }

  // optional bool GL_MajorCateInfo = 6 [default = false];
  if (has_gl_majorcateinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->gl_majorcateinfo(), target);
  }

  // optional bool GL_MinorCateInfo = 7 [default = false];
  if (has_gl_minorcateinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->gl_minorcateinfo(), target);
  }

  // optional bool GL_MinorGTypeMapInfo = 8 [default = false];
  if (has_gl_minorgtypemapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->gl_minorgtypemapinfo(), target);
  }

  // optional bool GL_GeoCodeInfo = 9 [default = false];
  if (has_gl_geocodeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->gl_geocodeinfo(), target);
  }

  // optional bool GL_UnitInfo = 10 [default = false];
  if (has_gl_unitinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->gl_unitinfo(), target);
  }

  // optional bool GL_UserInfo = 11 [default = false];
  if (has_gl_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->gl_userinfo(), target);
  }

  // optional bool GL_RoleRightInfo = 12 [default = false];
  if (has_gl_rolerightinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->gl_rolerightinfo(), target);
  }

  // optional bool GL_PrintTemplateInfo = 13 [default = false];
  if (has_gl_printtemplateinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->gl_printtemplateinfo(), target);
  }

  // optional bool GL_AppleseedInfo = 14 [default = false];
  if (has_gl_appleseedinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->gl_appleseedinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QDownloadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool GL_AreaGeoMapInfo = 1 [default = false];
    if (has_gl_areageomapinfo()) {
      total_size += 1 + 1;
    }

    // optional bool GL_AreaInfo = 2 [default = false];
    if (has_gl_areainfo()) {
      total_size += 1 + 1;
    }

    // optional bool GL_DeptInfo = 3 [default = false];
    if (has_gl_deptinfo()) {
      total_size += 1 + 1;
    }

    // optional bool GL_DesignerConfigInfo = 4 [default = false];
    if (has_gl_designerconfiginfo()) {
      total_size += 1 + 1;
    }

    // optional bool GL_GTypeInfo = 5 [default = false];
    if (has_gl_gtypeinfo()) {
      total_size += 1 + 1;
    }

    // optional bool GL_MajorCateInfo = 6 [default = false];
    if (has_gl_majorcateinfo()) {
      total_size += 1 + 1;
    }

    // optional bool GL_MinorCateInfo = 7 [default = false];
    if (has_gl_minorcateinfo()) {
      total_size += 1 + 1;
    }

    // optional bool GL_MinorGTypeMapInfo = 8 [default = false];
    if (has_gl_minorgtypemapinfo()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool GL_GeoCodeInfo = 9 [default = false];
    if (has_gl_geocodeinfo()) {
      total_size += 1 + 1;
    }

    // optional bool GL_UnitInfo = 10 [default = false];
    if (has_gl_unitinfo()) {
      total_size += 1 + 1;
    }

    // optional bool GL_UserInfo = 11 [default = false];
    if (has_gl_userinfo()) {
      total_size += 1 + 1;
    }

    // optional bool GL_RoleRightInfo = 12 [default = false];
    if (has_gl_rolerightinfo()) {
      total_size += 1 + 1;
    }

    // optional bool GL_PrintTemplateInfo = 13 [default = false];
    if (has_gl_printtemplateinfo()) {
      total_size += 1 + 1;
    }

    // optional bool GL_AppleseedInfo = 14 [default = false];
    if (has_gl_appleseedinfo()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QDownloadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QDownloadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QDownloadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QDownloadInfo::MergeFrom(const QDownloadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gl_areageomapinfo()) {
      set_gl_areageomapinfo(from.gl_areageomapinfo());
    }
    if (from.has_gl_areainfo()) {
      set_gl_areainfo(from.gl_areainfo());
    }
    if (from.has_gl_deptinfo()) {
      set_gl_deptinfo(from.gl_deptinfo());
    }
    if (from.has_gl_designerconfiginfo()) {
      set_gl_designerconfiginfo(from.gl_designerconfiginfo());
    }
    if (from.has_gl_gtypeinfo()) {
      set_gl_gtypeinfo(from.gl_gtypeinfo());
    }
    if (from.has_gl_majorcateinfo()) {
      set_gl_majorcateinfo(from.gl_majorcateinfo());
    }
    if (from.has_gl_minorcateinfo()) {
      set_gl_minorcateinfo(from.gl_minorcateinfo());
    }
    if (from.has_gl_minorgtypemapinfo()) {
      set_gl_minorgtypemapinfo(from.gl_minorgtypemapinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gl_geocodeinfo()) {
      set_gl_geocodeinfo(from.gl_geocodeinfo());
    }
    if (from.has_gl_unitinfo()) {
      set_gl_unitinfo(from.gl_unitinfo());
    }
    if (from.has_gl_userinfo()) {
      set_gl_userinfo(from.gl_userinfo());
    }
    if (from.has_gl_rolerightinfo()) {
      set_gl_rolerightinfo(from.gl_rolerightinfo());
    }
    if (from.has_gl_printtemplateinfo()) {
      set_gl_printtemplateinfo(from.gl_printtemplateinfo());
    }
    if (from.has_gl_appleseedinfo()) {
      set_gl_appleseedinfo(from.gl_appleseedinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QDownloadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QDownloadInfo::CopyFrom(const QDownloadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QDownloadInfo::IsInitialized() const {

  return true;
}

void QDownloadInfo::Swap(QDownloadInfo* other) {
  if (other != this) {
    std::swap(gl_areageomapinfo_, other->gl_areageomapinfo_);
    std::swap(gl_areainfo_, other->gl_areainfo_);
    std::swap(gl_deptinfo_, other->gl_deptinfo_);
    std::swap(gl_designerconfiginfo_, other->gl_designerconfiginfo_);
    std::swap(gl_gtypeinfo_, other->gl_gtypeinfo_);
    std::swap(gl_majorcateinfo_, other->gl_majorcateinfo_);
    std::swap(gl_minorcateinfo_, other->gl_minorcateinfo_);
    std::swap(gl_minorgtypemapinfo_, other->gl_minorgtypemapinfo_);
    std::swap(gl_geocodeinfo_, other->gl_geocodeinfo_);
    std::swap(gl_unitinfo_, other->gl_unitinfo_);
    std::swap(gl_userinfo_, other->gl_userinfo_);
    std::swap(gl_rolerightinfo_, other->gl_rolerightinfo_);
    std::swap(gl_printtemplateinfo_, other->gl_printtemplateinfo_);
    std::swap(gl_appleseedinfo_, other->gl_appleseedinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QDownloadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QDownloadInfo_descriptor_;
  metadata.reflection = QDownloadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ADownloadInfo::kStatsFieldNumber;
const int ADownloadInfo::kGLTableFieldNumber;
#endif  // !_MSC_VER

ADownloadInfo::ADownloadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ADownloadInfo::InitAsDefaultInstance() {
  gl_table_ = const_cast< ::transMsg::GL_Table*>(&::transMsg::GL_Table::default_instance());
}

ADownloadInfo::ADownloadInfo(const ADownloadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ADownloadInfo::SharedCtor() {
  _cached_size_ = 0;
  stats_ = 0;
  gl_table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADownloadInfo::~ADownloadInfo() {
  SharedDtor();
}

void ADownloadInfo::SharedDtor() {
  if (this != default_instance_) {
    delete gl_table_;
  }
}

void ADownloadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADownloadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADownloadInfo_descriptor_;
}

const ADownloadInfo& ADownloadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownloadInfo_2eproto();
  return *default_instance_;
}

ADownloadInfo* ADownloadInfo::default_instance_ = NULL;

ADownloadInfo* ADownloadInfo::New() const {
  return new ADownloadInfo;
}

void ADownloadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stats_ = 0;
    if (has_gl_table()) {
      if (gl_table_ != NULL) gl_table_->::transMsg::GL_Table::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ADownloadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transMsg.EReturnStatus Stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transMsg::EReturnStatus_IsValid(value)) {
            set_stats(static_cast< ::transMsg::EReturnStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_GL_Table;
        break;
      }

      // optional .transMsg.GL_Table GL_Table = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GL_Table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gl_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ADownloadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stats(), output);
  }

  // optional .transMsg.GL_Table GL_Table = 101;
  if (has_gl_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->gl_table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ADownloadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transMsg.EReturnStatus Stats = 1;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stats(), target);
  }

  // optional .transMsg.GL_Table GL_Table = 101;
  if (has_gl_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->gl_table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ADownloadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transMsg.EReturnStatus Stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stats());
    }

    // optional .transMsg.GL_Table GL_Table = 101;
    if (has_gl_table()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gl_table());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADownloadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ADownloadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ADownloadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ADownloadInfo::MergeFrom(const ADownloadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      set_stats(from.stats());
    }
    if (from.has_gl_table()) {
      mutable_gl_table()->::transMsg::GL_Table::MergeFrom(from.gl_table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ADownloadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADownloadInfo::CopyFrom(const ADownloadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADownloadInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ADownloadInfo::Swap(ADownloadInfo* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    std::swap(gl_table_, other->gl_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ADownloadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADownloadInfo_descriptor_;
  metadata.reflection = ADownloadInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transMsg

// @@protoc_insertion_point(global_scope)
