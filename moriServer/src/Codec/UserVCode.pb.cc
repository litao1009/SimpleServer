// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserVCode.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserVCode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* UserVCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserVCode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UserVCode_2eproto() {
  protobuf_AddDesc_UserVCode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UserVCode.proto");
  GOOGLE_CHECK(file != NULL);
  UserVCode_descriptor_ = file->message_type(0);
  static const int UserVCode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVCode, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVCode, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVCode, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVCode, ctype_),
  };
  UserVCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserVCode_descriptor_,
      UserVCode::default_instance_,
      UserVCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserVCode));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UserVCode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserVCode_descriptor_, &UserVCode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UserVCode_2eproto() {
  delete UserVCode::default_instance_;
  delete UserVCode_reflection_;
}

void protobuf_AddDesc_UserVCode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CodecProtocol::protobuf_AddDesc_EClientType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017UserVCode.proto\032\021EClientType.proto\"f\n\t"
    "UserVCode\022\016\n\006UserID\030\001 \002(\005\022\021\n\tLoginTime\030\002"
    " \002(\003\022\013\n\003UID\030\003 \002(\004\022)\n\005CType\030\004 \002(\0162\032.Codec"
    "Protocol.EClientType", 140);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserVCode.proto", &protobuf_RegisterTypes);
  UserVCode::default_instance_ = new UserVCode();
  UserVCode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserVCode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserVCode_2eproto {
  StaticDescriptorInitializer_UserVCode_2eproto() {
    protobuf_AddDesc_UserVCode_2eproto();
  }
} static_descriptor_initializer_UserVCode_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UserVCode::kUserIDFieldNumber;
const int UserVCode::kLoginTimeFieldNumber;
const int UserVCode::kUIDFieldNumber;
const int UserVCode::kCTypeFieldNumber;
#endif  // !_MSC_VER

UserVCode::UserVCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserVCode::InitAsDefaultInstance() {
}

UserVCode::UserVCode(const UserVCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserVCode::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  logintime_ = GOOGLE_LONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  ctype_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserVCode::~UserVCode() {
  SharedDtor();
}

void UserVCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserVCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserVCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserVCode_descriptor_;
}

const UserVCode& UserVCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserVCode_2eproto();
  return *default_instance_;
}

UserVCode* UserVCode::default_instance_ = NULL;

UserVCode* UserVCode::New() const {
  return new UserVCode;
}

void UserVCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    logintime_ = GOOGLE_LONGLONG(0);
    uid_ = GOOGLE_ULONGLONG(0);
    ctype_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserVCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 UserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LoginTime;
        break;
      }

      // required int64 LoginTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_UID;
        break;
      }

      // required uint64 UID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CType;
        break;
      }

      // required .CodecProtocol.EClientType CType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CodecProtocol::EClientType_IsValid(value)) {
            set_ctype(static_cast< ::CodecProtocol::EClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserVCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 UserID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int64 LoginTime = 2;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->logintime(), output);
  }

  // required uint64 UID = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uid(), output);
  }

  // required .CodecProtocol.EClientType CType = 4;
  if (has_ctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ctype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserVCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 UserID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int64 LoginTime = 2;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->logintime(), target);
  }

  // required uint64 UID = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uid(), target);
  }

  // required .CodecProtocol.EClientType CType = 4;
  if (has_ctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ctype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserVCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int64 LoginTime = 2;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logintime());
    }

    // required uint64 UID = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required .CodecProtocol.EClientType CType = 4;
    if (has_ctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserVCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserVCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserVCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserVCode::MergeFrom(const UserVCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_ctype()) {
      set_ctype(from.ctype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserVCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserVCode::CopyFrom(const UserVCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserVCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UserVCode::Swap(UserVCode* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(logintime_, other->logintime_);
    std::swap(uid_, other->uid_);
    std::swap(ctype_, other->ctype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserVCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserVCode_descriptor_;
  metadata.reflection = UserVCode_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
