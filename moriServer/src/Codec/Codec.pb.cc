// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Codec.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Codec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CodecProtocol {

namespace {

const ::google::protobuf::Descriptor* Codec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Codec_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Codec_2eproto() {
  protobuf_AddDesc_Codec_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Codec.proto");
  GOOGLE_CHECK(file != NULL);
  Codec_descriptor_ = file->message_type(0);
  static const int Codec_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Codec, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Codec, clienttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Codec, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Codec, verifycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Codec, rawsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Codec, aeskey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Codec, rsaencode_),
  };
  Codec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Codec_descriptor_,
      Codec::default_instance_,
      Codec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Codec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Codec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Codec));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Codec_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Codec_descriptor_, &Codec::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Codec_2eproto() {
  delete Codec::default_instance_;
  delete Codec_reflection_;
}

void protobuf_AddDesc_Codec_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CodecProtocol::protobuf_AddDesc_EClientType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Codec.proto\022\rCodecProtocol\032\021EClientTyp"
    "e.proto\"\247\001\n\005Codec\022\017\n\007MsgName\030\001 \002(\t\022.\n\nCl"
    "ientType\030\002 \002(\0162\032.CodecProtocol.EClientTy"
    "pe\022\016\n\006UserID\030\003 \001(\005\022\022\n\nVerifyCode\030\004 \001(\014\022\017"
    "\n\007RawSize\030\005 \001(\005\022\016\n\006AESKey\030\006 \001(\014\022\030\n\tRSAEn"
    "code\030\007 \001(\010:\005false", 217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Codec.proto", &protobuf_RegisterTypes);
  Codec::default_instance_ = new Codec();
  Codec::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Codec_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Codec_2eproto {
  StaticDescriptorInitializer_Codec_2eproto() {
    protobuf_AddDesc_Codec_2eproto();
  }
} static_descriptor_initializer_Codec_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Codec::kMsgNameFieldNumber;
const int Codec::kClientTypeFieldNumber;
const int Codec::kUserIDFieldNumber;
const int Codec::kVerifyCodeFieldNumber;
const int Codec::kRawSizeFieldNumber;
const int Codec::kAESKeyFieldNumber;
const int Codec::kRSAEncodeFieldNumber;
#endif  // !_MSC_VER

Codec::Codec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Codec::InitAsDefaultInstance() {
}

Codec::Codec(const Codec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Codec::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clienttype_ = 2;
  userid_ = 0;
  verifycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rawsize_ = 0;
  aeskey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rsaencode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Codec::~Codec() {
  SharedDtor();
}

void Codec::SharedDtor() {
  if (msgname_ != &::google::protobuf::internal::kEmptyString) {
    delete msgname_;
  }
  if (verifycode_ != &::google::protobuf::internal::kEmptyString) {
    delete verifycode_;
  }
  if (aeskey_ != &::google::protobuf::internal::kEmptyString) {
    delete aeskey_;
  }
  if (this != default_instance_) {
  }
}

void Codec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Codec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Codec_descriptor_;
}

const Codec& Codec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Codec_2eproto();
  return *default_instance_;
}

Codec* Codec::default_instance_ = NULL;

Codec* Codec::New() const {
  return new Codec;
}

void Codec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != &::google::protobuf::internal::kEmptyString) {
        msgname_->clear();
      }
    }
    clienttype_ = 2;
    userid_ = 0;
    if (has_verifycode()) {
      if (verifycode_ != &::google::protobuf::internal::kEmptyString) {
        verifycode_->clear();
      }
    }
    rawsize_ = 0;
    if (has_aeskey()) {
      if (aeskey_ != &::google::protobuf::internal::kEmptyString) {
        aeskey_->clear();
      }
    }
    rsaencode_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Codec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string MsgName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ClientType;
        break;
      }

      // required .CodecProtocol.EClientType ClientType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClientType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CodecProtocol::EClientType_IsValid(value)) {
            set_clienttype(static_cast< ::CodecProtocol::EClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_UserID;
        break;
      }

      // optional int32 UserID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_VerifyCode;
        break;
      }

      // optional bytes VerifyCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VerifyCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verifycode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RawSize;
        break;
      }

      // optional int32 RawSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RawSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rawsize_)));
          set_has_rawsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_AESKey;
        break;
      }

      // optional bytes AESKey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AESKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_aeskey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_RSAEncode;
        break;
      }

      // optional bool RSAEncode = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RSAEncode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rsaencode_)));
          set_has_rsaencode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Codec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string MsgName = 1;
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // required .CodecProtocol.EClientType ClientType = 2;
  if (has_clienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->clienttype(), output);
  }

  // optional int32 UserID = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid(), output);
  }

  // optional bytes VerifyCode = 4;
  if (has_verifycode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->verifycode(), output);
  }

  // optional int32 RawSize = 5;
  if (has_rawsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rawsize(), output);
  }

  // optional bytes AESKey = 6;
  if (has_aeskey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->aeskey(), output);
  }

  // optional bool RSAEncode = 7 [default = false];
  if (has_rsaencode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->rsaencode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Codec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string MsgName = 1;
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // required .CodecProtocol.EClientType ClientType = 2;
  if (has_clienttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->clienttype(), target);
  }

  // optional int32 UserID = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid(), target);
  }

  // optional bytes VerifyCode = 4;
  if (has_verifycode()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->verifycode(), target);
  }

  // optional int32 RawSize = 5;
  if (has_rawsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rawsize(), target);
  }

  // optional bytes AESKey = 6;
  if (has_aeskey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->aeskey(), target);
  }

  // optional bool RSAEncode = 7 [default = false];
  if (has_rsaencode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->rsaencode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Codec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string MsgName = 1;
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // required .CodecProtocol.EClientType ClientType = 2;
    if (has_clienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clienttype());
    }

    // optional int32 UserID = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional bytes VerifyCode = 4;
    if (has_verifycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verifycode());
    }

    // optional int32 RawSize = 5;
    if (has_rawsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rawsize());
    }

    // optional bytes AESKey = 6;
    if (has_aeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->aeskey());
    }

    // optional bool RSAEncode = 7 [default = false];
    if (has_rsaencode()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Codec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Codec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Codec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Codec::MergeFrom(const Codec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_clienttype()) {
      set_clienttype(from.clienttype());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_verifycode()) {
      set_verifycode(from.verifycode());
    }
    if (from.has_rawsize()) {
      set_rawsize(from.rawsize());
    }
    if (from.has_aeskey()) {
      set_aeskey(from.aeskey());
    }
    if (from.has_rsaencode()) {
      set_rsaencode(from.rsaencode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Codec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Codec::CopyFrom(const Codec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Codec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Codec::Swap(Codec* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(clienttype_, other->clienttype_);
    std::swap(userid_, other->userid_);
    std::swap(verifycode_, other->verifycode_);
    std::swap(rawsize_, other->rawsize_);
    std::swap(aeskey_, other->aeskey_);
    std::swap(rsaencode_, other->rsaencode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Codec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Codec_descriptor_;
  metadata.reflection = Codec_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CodecProtocol

// @@protoc_insertion_point(global_scope)
